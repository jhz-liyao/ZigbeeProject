###############################################################################
#
# IAR C/C++ Compiler V9.30.1.3056 for 8051                31/Oct/2016  11:56:47
# Copyright 2004-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZMain\TI2530DB\OnBoard.c
#    Command line       =  
#        -f "E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.03优化动态内存
#        -最后无错修改\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f
#        "E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.03优化动态内存
#        -最后无错修改\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=50 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
#        -DREJOIN_POLL_RATE=440 "E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZMain\TI2530DB\OnBoard.c" -D HAL_UART=TRUE -D
#        HAL_UART_ISR=1 -D HAL_UART_DMA=0 -D LOG_OUT -D
#        UART1_PROTOCOL_RESOLVER=1 -D xISQC -D NWK_AUTO_POLL -D xZTOOL_P1 -D
#        ISR_KEYINTERRUPT -D xMT_TASK -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D
#        xLCD_SUPPORTED=DEBUG -D xPOWER_SAVING -lC
#        "E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.03优化动态内存
#        -最后无错修改\CC2530DB\WaterMachine\List" -lA
#        "E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.03优化动态内存
#        -最后无错修改\CC2530DB\WaterMachine\List" --diag_suppress Pe001,Pa010
#        -o "E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.03优化动态内存
#        -最后无错修改\CC2530DB\WaterMachine\Obj" -e --no_code_motion --debug
#        --core=plain --dptr=16,1 --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 8 -I "E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.03优化动态内存
#        -最后无错修改\CC2530DB\" -I "E:\资源\个人项目\ZigbeeProject\Z-Stack
#        Mesh 1.0.0\Projects\zstack\Samples\Demo_App_V2.03优化动态内存
#        -最后无错修改\CC2530DB\..\Source\" -I
#        "E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.03优化动态内存
#        -最后无错修改\CC2530DB\..\Frame\" -I
#        "E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.03优化动态内存
#        -最后无错修改\CC2530DB\..\Module\WaterMachine\" -I
#        "E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.03优化动态内存
#        -最后无错修改\CC2530DB\..\..\..\ZMain\TI2530DB\" -I
#        "E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.03优化动态内存
#        -最后无错修改\CC2530DB\..\..\..\..\..\Components\hal\include\" -I
#        "E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.03优化动态内存
#        -最后无错修改\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.03优化动态内存
#        -最后无错修改\CC2530DB\..\..\..\..\..\Components\mac\include\" -I
#        "E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.03优化动态内存
#        -最后无错修改\CC2530DB\..\..\..\..\..\Components\mac\high_level\" -I
#        "E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.03优化动态内存
#        -最后无错修改\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.03优化动态内存
#        -最后无错修改\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.03优化动态内存
#        -最后无错修改\CC2530DB\..\..\..\..\..\Components\mt\" -I
#        "E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.03优化动态内存
#        -最后无错修改\CC2530DB\..\..\..\..\..\Components\osal\include\" -I
#        "E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.03优化动态内存
#        -最后无错修改\CC2530DB\..\..\..\..\..\Components\services\saddr\" -I
#        "E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.03优化动态内存
#        -最后无错修改\CC2530DB\..\..\..\..\..\Components\services\sdata\" -I
#        "E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.03优化动态内存
#        -最后无错修改\CC2530DB\..\..\..\..\..\Components\stack\af\" -I
#        "E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.03优化动态内存
#        -最后无错修改\CC2530DB\..\..\..\..\..\Components\stack\nwk\" -I
#        "E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.03优化动态内存
#        -最后无错修改\CC2530DB\..\..\..\..\..\Components\stack\sapi\" -I
#        "E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.03优化动态内存
#        -最后无错修改\CC2530DB\..\..\..\..\..\Components\stack\sec\" -I
#        "E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.03优化动态内存
#        -最后无错修改\CC2530DB\..\..\..\..\..\Components\stack\sys\" -I
#        "E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.03优化动态内存
#        -最后无错修改\CC2530DB\..\..\..\..\..\Components\stack\zdo\" -I
#        "E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.03优化动态内存
#        -最后无错修改\CC2530DB\..\..\..\..\..\Components\zmac\" -I
#        "E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.03优化动态内存
#        -最后无错修改\CC2530DB\..\..\..\..\..\Components\zmac\f8w\" -Ohz
#    List file          =  
#        E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.03优化动态内存
#        -最后无错修改\CC2530DB\WaterMachine\List\OnBoard.lst
#    Object file        =  
#        E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.03优化动态内存
#        -最后无错修改\CC2530DB\WaterMachine\Obj\OnBoard.r51
#
###############################################################################

E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh 1.0.0\Projects\zstack\ZMain\TI2530DB\OnBoard.c
      1          #include "ZComDef.h"
      2          #include "ZGlobals.h"
      3          #include "OnBoard.h"

   \                                 In  segment SFR_AN, at 0x9d
   \   unsigned char volatile __sfr SLEEPSTA
   \                     SLEEPSTA:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xa8
   \   union <unnamed> volatile __sfr _A_IEN0
   \                     _A_IEN0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xd6
   \   unsigned char volatile __sfr DMAARM
   \                     DMAARM:
   \   000000                DS 1
      4          #include "OSAL.h"
      5          #include "MT.h"
      6          #include "MT_SYS.h"
      7          #include "DebugTrace.h"
      8          
      9          /* Hal */
     10          #include "hal_lcd.h"
     11          #include "hal_mcu.h"
     12          #include "hal_timer.h"
     13          #include "hal_key.h"
     14          #include "hal_led.h"
     15          
     16          /* Allow access macRandomByte() */
     17          #include "mac_radio_defs.h"
     18          
     19          /*********************************************************************
     20           * CONSTANTS
     21           */
     22          
     23          // Task ID not initialized
     24          #define NO_TASK_ID 0xFF
     25          
     26          // Minimum length RAM "pattern" for Stack check
     27          #define MIN_RAM_INIT 12
     28          
     29          /*********************************************************************
     30           * GLOBAL VARIABLES
     31           */
     32          
     33          #if defined MAKE_CRC_SHDW
     34          #pragma location="CRC_SHDW"
     35          const CODE uint16 _crcShdw = 0xFFFF;
     36          #pragma required=_crcShdw
     37          
     38          #elif !defined MT_UBL_FUNC
     39          
     40          #pragma location="LOCK_BITS_ADDRESS_SPACE"

   \                                 In  segment LOCK_BITS_ADDRESS_SPACE, align 1
     41          __no_init uint8 _lockBits[16];
   \                     _lockBits:
   \   000000                DS 16
     42          #pragma required=_lockBits
     43          
     44          #if defined ZCL_KEY_ESTABLISH
     45          #include "zcl_cert_data.c"
     46          #else
     47          #pragma location="IEEE_ADDRESS_SPACE"

   \                                 In  segment IEEE_ADDRESS_SPACE, align 1
     48          __no_init uint8 _nvIEEE[Z_EXTADDR_LEN];
   \                     _nvIEEE:
   \   000000                DS 8
   \   000008                REQUIRE _lockBits
     49          #pragma required=_nvIEEE
     50          #endif
     51          
     52          #pragma location="RESERVED_ADDRESS_SPACE"

   \                                 In  segment RESERVED_ADDRESS_SPACE, align 1
     53          __no_init uint8 _reserved[1932];
   \                     _reserved:
   \   000000                DS 1932
   \   00078C                REQUIRE _nvIEEE
     54          #pragma required=_reserved
     55          #endif
     56          
     57          // 64-bit Extended Address of this device

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     58          uint8 aExtendedAddress[8];
   \                     aExtendedAddress:
   \   000000                DS 8
   \   000008                REQUIRE __INIT_XDATA_Z
   \   000008                REQUIRE _reserved
     59          
     60          /*********************************************************************
     61           * LOCAL VARIABLES
     62           */
     63          
     64          // Registered keys task ID, initialized to NOT USED.

   \                                 In  segment XDATA_I, align 1, keep-with-next
     65          static uint8 registeredKeysTaskID = NO_TASK_ID;
   \                     registeredKeysTaskID:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for registeredKeysTaskID>`
   \   000001                REQUIRE __INIT_XDATA_I
     66          
     67          /*********************************************************************
     68           * LOCAL FUNCTIONS
     69           */
     70          
     71          static void ChkReset( void );
     72          
     73          /*********************************************************************
     74           * @fn      InitBoard()
     75           * @brief   Initialize the CC2420DB Board Peripherals
     76           * @param   level: COLD,WARM,READY
     77           * @return  None
     78           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     79          void InitBoard( uint8 level )
   \                     InitBoard:
     80          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
     81            if ( level == OB_COLD )
   \   000006   7020         JNZ     ??InitBoard_0
     82            {
     83              // IAR does not zero-out this byte below the XSTACK.
     84              *(uint8 *)0x0 = 0;
   \   000008   900000       MOV     DPTR,#0x0
   \   00000B   E4           CLR     A
   \   00000C   F0           MOVX    @DPTR,A
     85              // Interrupts off
     86              osal_int_disable( INTS_ALL );
   \   00000D                ; Setup parameters for call to function osal_int_disable
   \   00000D   79FF         MOV     R1,#-0x1
   \   00000F   12....       LCALL   `??osal_int_disable::?relay`; Banked call to: osal_int_disable
     87              // Check for Brown-Out reset
     88              ChkReset();
   \   000012   E59D         MOV     A,0x9d
   \   000014   5418         ANL     A,#0x18
   \   000016   F8           MOV     R0,A
   \   000017   6018         JZ      ??InitBoard_1
   \   000019   7408         MOV     A,#0x8
   \   00001B   68           XRL     A,R0
   \   00001C   6013         JZ      ??InitBoard_1
   \   00001E   7410         MOV     A,#0x10
   \   000020   68           XRL     A,R0
   \   000021   600E         JZ      ??InitBoard_1
   \   000023                ; Setup parameters for call to function halAssertHandler
   \   000023   12....       LCALL   `??halAssertHandler::?relay`; Banked call to: halAssertHandler
   \   000026   8009         SJMP    ??InitBoard_1
     89            }
     90            else  // !OB_COLD
     91            {
     92              /* Initialize Key stuff */
     93              #if defined (ISR_KEYINTERRUPT)
     94              HalKeyConfig(HAL_KEY_INTERRUPT_ENABLE , OnBoard_KeyCallback);
   \                     ??InitBoard_0:
   \   000028                ; Setup parameters for call to function HalKeyConfig
   \   000028   7A..         MOV     R2,#`??OnBoard_KeyCallback::?relay` & 0xff
   \   00002A   7B..         MOV     R3,#(`??OnBoard_KeyCallback::?relay` >> 8) & 0xff
   \   00002C   7901         MOV     R1,#0x1
   \   00002E   12....       LCALL   `??HalKeyConfig::?relay`; Banked call to: HalKeyConfig
     95              #else
     96              HalKeyConfig(HAL_KEY_INTERRUPT_DISABLE, OnBoard_KeyCallback);
     97              #endif
     98            }
     99          }
   \                     ??InitBoard_1:
   \   000031                REQUIRE ?Subroutine0
   \   000031                REQUIRE SLEEPSTA
   \   000031                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    100          
    101          /*********************************************************************
    102           * @fn      ChkReset()
    103           * @brief   Check reset bits - if reset cause is unknown, assume a
    104           *          brown-out (low power), assume batteries are not reliable,
    105           *          hang in a loop and sequence through the LEDs.
    106           * @param   None
    107           * @return  None
    108           *********************************************************************/
    109          void ChkReset( void )
    110          {
    111            uint8 rib;
    112          
    113            // Isolate reset indicator bits
    114            rib = SLEEPSTA & LRESET;
    115          
    116            if ( rib == RESETPO )
    117            {
    118              // Put code here to handle Power-On reset
    119            }
    120            else if ( rib == RESETEX )
    121            {
    122              // Put code here to handle External reset
    123            }
    124            else if ( rib == RESETWD )
    125            {
    126              // Put code here to handle WatchDog reset
    127            }
    128            else  // Unknown reason - not expected.
    129            {
    130              HAL_ASSERT(0);
    131            }
    132          }
    133          
    134          /*********************************************************************
    135           *                        "Keyboard" Support
    136           *********************************************************************/
    137          
    138          /*********************************************************************
    139           * Keyboard Register function
    140           *
    141           * The keyboard handler is setup to send all keyboard changes to
    142           * one task (if a task is registered).
    143           *
    144           * If a task registers, it will get all the keys. You can change this
    145           * to register for individual keys.
    146           *********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    147          uint8 RegisterForKeys( uint8 task_id )
   \                     RegisterForKeys:
    148          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   E9           MOV     A,R1
   \   000005   F8           MOV     R0,A
    149            // Allow only the first task
    150            if ( registeredKeysTaskID == NO_TASK_ID )
   \   000006   90....       MOV     DPTR,#registeredKeysTaskID
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   F4           CPL     A
   \   00000B   7006         JNZ     ??RegisterForKeys_0
    151            {
    152              registeredKeysTaskID = task_id;
   \   00000D   E8           MOV     A,R0
   \   00000E   F0           MOVX    @DPTR,A
    153              return ( true );
   \   00000F   7901         MOV     R1,#0x1
   \   000011   8002         SJMP    ??RegisterForKeys_1
    154            }
    155            else
    156              return ( false );
   \                     ??RegisterForKeys_0:
   \   000013   7900         MOV     R1,#0x0
   \                     ??RegisterForKeys_1:
   \   000015                REQUIRE ?Subroutine1
   \   000015                ; // Fall through to label ?Subroutine1
    157          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    158          
    159          /*********************************************************************
    160           * @fn      OnBoard_SendKeys
    161           *
    162           * @brief   Send "Key Pressed" message to application.
    163           *
    164           * @param   keys  - keys that were pressed
    165           *          state - shifted
    166           *
    167           * @return  status
    168           *********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    169          uint8 OnBoard_SendKeys( uint8 keys, uint8 state )
   \                     OnBoard_SendKeys:
    170          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   \   000007   EA           MOV     A,R2
   \   000008   FF           MOV     R7,A
    171            keyChange_t *msgPtr;
    172          
    173            if ( registeredKeysTaskID != NO_TASK_ID )
   \   000009   90....       MOV     DPTR,#registeredKeysTaskID
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   F4           CPL     A
   \   00000E   602B         JZ      ??OnBoard_SendKeys_0
    174            {
    175              // Send the address to the task
    176              msgPtr = (keyChange_t *)osal_msg_allocate( sizeof(keyChange_t) );
   \   000010                ; Setup parameters for call to function osal_msg_allocate
   \   000010   7A04         MOV     R2,#0x4
   \   000012   7B00         MOV     R3,#0x0
   \   000014   12....       LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
    177              if ( msgPtr )
   \   000017   EA           MOV     A,R2
   \   000018   4B           ORL     A,R3
   \   000019   601C         JZ      ??OnBoard_SendKeys_1
    178              {
    179                msgPtr->hdr.event = KEY_CHANGE;
   \   00001B   8A82         MOV     DPL,R2
   \   00001D   8B83         MOV     DPH,R3
   \   00001F   74C0         MOV     A,#-0x40
   \   000021   F0           MOVX    @DPTR,A
    180                msgPtr->state = state;
   \   000022   EF           MOV     A,R7
   \   000023   A3           INC     DPTR
   \   000024   A3           INC     DPTR
   \   000025   F0           MOVX    @DPTR,A
    181                msgPtr->keys = keys;
   \   000026   EE           MOV     A,R6
   \   000027   8A82         MOV     DPL,R2
   \   000029   8B83         MOV     DPH,R3
   \   00002B   A3           INC     DPTR
   \   00002C   A3           INC     DPTR
   \   00002D   A3           INC     DPTR
   \   00002E   F0           MOVX    @DPTR,A
    182          
    183                osal_msg_send( registeredKeysTaskID, (uint8 *)msgPtr );
   \   00002F                ; Setup parameters for call to function osal_msg_send
   \   00002F   90....       MOV     DPTR,#registeredKeysTaskID
   \   000032   E0           MOVX    A,@DPTR
   \   000033   F9           MOV     R1,A
   \   000034   12....       LCALL   `??osal_msg_send::?relay`; Banked call to: osal_msg_send
    184              }
    185              return ( ZSuccess );
   \                     ??OnBoard_SendKeys_1:
   \   000037   7900         MOV     R1,#0x0
   \   000039   8002         SJMP    ??OnBoard_SendKeys_2
    186            }
    187            else
    188              return ( ZFailure );
   \                     ??OnBoard_SendKeys_0:
   \   00003B   7901         MOV     R1,#0x1
   \                     ??OnBoard_SendKeys_2:
   \   00003D   7F02         MOV     R7,#0x2
   \   00003F   02....       LJMP    ?BANKED_LEAVE_XDATA
    189          }
    190          
    191          /*********************************************************************
    192           * @fn      OnBoard_KeyCallback
    193           *
    194           * @brief   Callback service for keys
    195           *
    196           * @param   keys  - keys that were pressed
    197           *          state - shifted
    198           *
    199           * @return  void
    200           *********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    201          void OnBoard_KeyCallback ( uint8 keys, uint8 state )
   \                     OnBoard_KeyCallback:
    202          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
    203            uint8 shift;
    204            (void)state;
    205          
    206            shift = (keys & HAL_KEY_SW_6) ? true : false;
    207          
    208            if ( OnBoard_SendKeys( keys, shift ) != ZSuccess )
   \   000006                ; Setup parameters for call to function OnBoard_SendKeys
   \   000006   A2E5         MOV     C,0xE0 /* A   */.5
   \   000008   E4           CLR     A
   \   000009   33           RLC     A
   \   00000A   FA           MOV     R2,A
   \   00000B   12....       LCALL   `??OnBoard_SendKeys::?relay`; Banked call to: OnBoard_SendKeys
    209            {
    210              // Process SW1 here
    211              if ( keys & HAL_KEY_SW_1 )  // Switch 1
    212              {
    213              }
    214              // Process SW2 here
    215              if ( keys & HAL_KEY_SW_2 )  // Switch 2
    216              {
    217              }
    218              // Process SW3 here
    219              if ( keys & HAL_KEY_SW_3 )  // Switch 3
    220              {
    221              }
    222              // Process SW4 here
    223              if ( keys & HAL_KEY_SW_4 )  // Switch 4
    224              {
    225              }
    226              // Process SW5 here
    227              if ( keys & HAL_KEY_SW_5 )  // Switch 5
    228              {
    229              }
    230              // Process SW6 here
    231              if ( keys & HAL_KEY_SW_6 )  // Switch 6
    232              {
    233              }
    234            }
    235          }
   \   00000E   80..         SJMP    ?Subroutine0
    236          
    237          /*********************************************************************
    238           * @fn      OnBoard_stack_used
    239           *
    240           * @brief   Runs through the stack looking for touched memory.
    241           *
    242           * @param   none
    243           *
    244           * @return  Maximum number of bytes used by the stack.
    245           *********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    246          uint16 OnBoard_stack_used(void)
   \                     OnBoard_stack_used:
    247          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    248            uint8 const *ptr;
    249            uint8 cnt = 0;
   \   000004   7800         MOV     R0,#0x0
    250          
    251            for (ptr = CSTACK_END; ptr > CSTACK_BEG; ptr--)
   \   000006   7582..       MOV     DPL,#(SFE(XSTACK) + 255) & 0xff
   \   000009   7583..       MOV     DPH,#((SFE(XSTACK) - 1) >> 8) & 0xff
   \   00000C   800E         SJMP    ??OnBoard_stack_used_0
    252            {
    253              if (STACK_INIT_VALUE == *ptr)
    254              {
    255                if (++cnt >= MIN_RAM_INIT)
    256                {
    257                  ptr += MIN_RAM_INIT;
    258                  break;
    259                }
    260              }
    261              else
    262              {
    263                cnt = 0;
   \                     ??OnBoard_stack_used_1:
   \   00000E   7800         MOV     R0,#0x0
    264              }
   \                     ??OnBoard_stack_used_2:
   \   000010   E582         MOV     A,DPL
   \   000012   24FF         ADD     A,#-0x1
   \   000014   F582         MOV     DPL,A
   \   000016   E583         MOV     A,DPH
   \   000018   34FF         ADDC    A,#-0x1
   \   00001A   F583         MOV     DPH,A
   \                     ??OnBoard_stack_used_0:
   \   00001C   C3           CLR     C
   \   00001D   74..         MOV     A,#SFB(XSTACK) & 0xff
   \   00001F   9582         SUBB    A,DPL
   \   000021   74..         MOV     A,#(SFB(XSTACK) >> 8) & 0xff
   \   000023   9583         SUBB    A,DPH
   \   000025   5016         JNC     ??OnBoard_stack_used_3
   \   000027   E0           MOVX    A,@DPTR
   \   000028   64CD         XRL     A,#0xcd
   \   00002A   70E2         JNZ     ??OnBoard_stack_used_1
   \   00002C   08           INC     R0
   \   00002D   E8           MOV     A,R0
   \   00002E   C3           CLR     C
   \   00002F   940C         SUBB    A,#0xc
   \   000031   40DD         JC      ??OnBoard_stack_used_2
   \   000033   E582         MOV     A,DPL
   \   000035   240C         ADD     A,#0xc
   \   000037   F582         MOV     DPL,A
   \   000039   5002         JNC     ??OnBoard_stack_used_3
   \   00003B   0583         INC     DPH
    265            }
    266          
    267            return (uint16)(CSTACK_END - ptr + 1);
   \                     ??OnBoard_stack_used_3:
   \   00003D   74..         MOV     A,#(SFE(XSTACK) + 255) & 0xff
   \   00003F   C3           CLR     C
   \   000040   9582         SUBB    A,DPL
   \   000042   F8           MOV     R0,A
   \   000043   74..         MOV     A,#((SFE(XSTACK) - 1) >> 8) & 0xff
   \   000045   9583         SUBB    A,DPH
   \   000047   F9           MOV     R1,A
   \   000048   E8           MOV     A,R0
   \   000049   2401         ADD     A,#0x1
   \   00004B   FA           MOV     R2,A
   \   00004C   E4           CLR     A
   \   00004D   39           ADDC    A,R1
   \   00004E   FB           MOV     R3,A
   \   00004F   02....       LJMP    ?Subroutine1 & 0xFFFF
    268          }
    269          
    270          /*********************************************************************
    271           * @fn      _itoa
    272           *
    273           * @brief   convert a 16bit number to ASCII
    274           *
    275           * @param   num -
    276           *          buf -
    277           *          radix -
    278           *
    279           * @return  void
    280           *
    281           *********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    282          void _itoa(uint16 num, uint8 *buf, uint8 radix)
   \                     _itoa:
    283          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV     A,#-0x5
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   \   00000E   89..         MOV     ?V0,R1
    284            char c,i;
    285            uint8 *p, rst[5];
    286          
    287            p = rst;
   \   000010   A8..         MOV     R0,?XSP + 0
   \   000012   A9..         MOV     R1,?XSP + 1
   \   000014   88..         MOV     ?V4,R0
   \   000016   89..         MOV     ?V5,R1
    288            for ( i=0; i<5; i++,p++ )
   \   000018   75..00       MOV     ?V1,#0x0
    289            {
    290              c = num % radix;  // Isolate a digit
   \                     ??_itoa_0:
   \   00001B   EE           MOV     A,R6
   \   00001C   F8           MOV     R0,A
   \   00001D   EF           MOV     A,R7
   \   00001E   F9           MOV     R1,A
   \   00001F   AA..         MOV     R2,?V0
   \   000021   7B00         MOV     R3,#0x0
   \   000023   12....       LCALL   ?US_DIV_MOD
   \   000026   EA           MOV     A,R2
   \   000027   F8           MOV     R0,A
    291              *p = c + (( c < 10 ) ? '0' : '7');  // Convert to Ascii
   \   000028   940A         SUBB    A,#0xa
   \   00002A   5004         JNC     ??_itoa_1
   \   00002C   7A30         MOV     R2,#0x30
   \   00002E   8002         SJMP    ??_itoa_2
   \                     ??_itoa_1:
   \   000030   7A37         MOV     R2,#0x37
   \                     ??_itoa_2:
   \   000032   EA           MOV     A,R2
   \   000033   28           ADD     A,R0
   \   000034   85..82       MOV     DPL,?V4
   \   000037   85..83       MOV     DPH,?V5
   \   00003A   F0           MOVX    @DPTR,A
    292              num /= radix;
   \   00003B   EE           MOV     A,R6
   \   00003C   F8           MOV     R0,A
   \   00003D   EF           MOV     A,R7
   \   00003E   F9           MOV     R1,A
   \   00003F   AA..         MOV     R2,?V0
   \   000041   7B00         MOV     R3,#0x0
   \   000043   12....       LCALL   ?US_DIV_MOD
   \   000046   88..         MOV     ?V2,R0
   \   000048   89..         MOV     ?V3,R1
   \   00004A   AE..         MOV     R6,?V2
   \   00004C   AF..         MOV     R7,?V3
    293              if ( !num )
   \   00004E   EE           MOV     A,R6
   \   00004F   4F           ORL     A,R7
   \   000050   600F         JZ      ??_itoa_3
    294                break;
    295            }
   \   000052   05..         INC     ?V1
   \   000054   A3           INC     DPTR
   \   000055   8582..       MOV     ?V4,DPL
   \   000058   8583..       MOV     ?V5,DPH
   \   00005B   E5..         MOV     A,?V1
   \   00005D   9405         SUBB    A,#0x5
   \   00005F   40BA         JC      ??_itoa_0
    296          
    297            for ( c=0 ; c<=i; c++ )
   \                     ??_itoa_3:
   \   000061   7800         MOV     R0,#0x0
    298              *buf++ = *p--;  // Reverse character order
   \                     ??_itoa_4:
   \   000063   85..82       MOV     DPL,?V4
   \   000066   85..83       MOV     DPH,?V5
   \   000069   E0           MOVX    A,@DPTR
   \   00006A   8C82         MOV     DPL,R4
   \   00006C   8D83         MOV     DPH,R5
   \   00006E   F0           MOVX    @DPTR,A
   \   00006F   E5..         MOV     A,?V4
   \   000071   24FF         ADD     A,#-0x1
   \   000073   F5..         MOV     ?V4,A
   \   000075   E5..         MOV     A,?V5
   \   000077   34FF         ADDC    A,#-0x1
   \   000079   F5..         MOV     ?V5,A
   \   00007B   A3           INC     DPTR
   \   00007C   AC82         MOV     R4,DPL
   \   00007E   AD83         MOV     R5,DPH
   \   000080   08           INC     R0
   \   000081   E5..         MOV     A,?V1
   \   000083   C3           CLR     C
   \   000084   98           SUBB    A,R0
   \   000085   50DC         JNC     ??_itoa_4
    299          
    300            *buf = '\0';
   \   000087   E4           CLR     A
   \   000088   F0           MOVX    @DPTR,A
    301          }
   \   000089   7405         MOV     A,#0x5
   \   00008B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00008E   7F06         MOV     R7,#0x6
   \   000090   02....       LJMP    ?BANKED_LEAVE_XDATA
    302          
    303          /*********************************************************************
    304           * @fn        Onboard_rand
    305           *
    306           * @brief    Random number generator
    307           *
    308           * @param   none
    309           *
    310           * @return  uint16 - new random number
    311           *
    312           *********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    313          uint16 Onboard_rand( void )
   \                     Onboard_rand:
    314          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    315            return ( MAC_RADIO_RANDOM_WORD() );
   \   000004                ; Setup parameters for call to function macMcuRandomWord
   \   000004   12....       LCALL   `??macMcuRandomWord::?relay`; Banked call to: macMcuRandomWord
   \   000007   02....       LJMP    ?Subroutine1 & 0xFFFF
    316          }
    317          
    318          /*********************************************************************
    319           * @fn        Onboard_wait
    320           *
    321           * @brief    Delay wait
    322           *
    323           * @param   uint16 - time to wait
    324           *
    325           * @return  none
    326           *
    327           *********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    328          void Onboard_wait( uint16 timeout )
   \                     Onboard_wait:
    329          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   \   000000   8003         SJMP    ??Onboard_wait_0
    330            while (timeout--)
    331            {
    332              asm("NOP");
   \                     ??Onboard_wait_1:
   \   000002   00           NOP
    333              asm("NOP");
   \   000003   00           NOP
    334              asm("NOP");
   \   000004   00           NOP
    335            }
   \                     ??Onboard_wait_0:
   \   000005   EA           MOV     A,R2
   \   000006   F8           MOV     R0,A
   \   000007   EB           MOV     A,R3
   \   000008   F9           MOV     R1,A
   \   000009   E8           MOV     A,R0
   \   00000A   24FF         ADD     A,#-0x1
   \   00000C   1A           DEC     R2
   \   00000D   E9           MOV     A,R1
   \   00000E   34FF         ADDC    A,#-0x1
   \   000010   FB           MOV     R3,A
   \   000011   E8           MOV     A,R0
   \   000012   49           ORL     A,R1
   \   000013   70ED         JNZ     ??Onboard_wait_1
    336          }
   \   000015   02....       LJMP    ?BRET
    337          
    338          /*********************************************************************
    339           * @fn      Onboard_soft_reset
    340           *
    341           * @brief   Effect a soft reset.
    342           *
    343           * @param   none
    344           *
    345           * @return  none
    346           *
    347           *********************************************************************/

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    348          __near_func void Onboard_soft_reset( void )
   \                     Onboard_soft_reset:
    349          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    350            HAL_DISABLE_INTERRUPTS();
   \   000000   C2AF         CLR     0xa8.7
    351            // Abort all DMA channels to insure that ongoing operations do not
    352            // interfere with re-configuration.
    353            DMAARM = 0x80 | 0x1F;
   \   000002   75D69F       MOV     0xd6,#-0x61
    354            asm("LJMP 0x0");
   \   000005   020000       LJMP 0x0
    355          }
   \   000008   22           RET
   \   000009                REQUIRE _A_IEN0
   \   000009                REQUIRE DMAARM
    356          
    357          #if defined MT_UBL_FUNC
    358          #if !defined UBL_RC_IMG_PG_BEG
    359          #define UBL_RC_IMG_PG_BEG  (HAL_SB_CRC_ADDR / HAL_FLASH_PAGE_SIZE)
    360          #endif
    361          #if !defined UBL_MD_PG_OFFSET
    362          #define UBL_MD_PG_OFFSET   (HAL_SB_CRC_ADDR % HAL_FLASH_PAGE_SIZE + 2)
    363          #endif
    364          #if !defined UBL_ADDR
    365          #define UBL_MD_ADDR        (HAL_SB_CRC_ADDR + 2)
    366          #endif
    367          
    368          /*********************************************************************
    369           * @fn      MT_UblCommandProcessing
    370           *
    371           * @brief   Effect a soft reset.
    372           *
    373           * @param   pBuf - Pointer to the received MT buffer.
    374           *
    375           * @return  MT_RPC_ERR_COMMAND_ID if the MT command is not MT_UBL_ERASE.
    376           *
    377           *********************************************************************/
    378          uint8 MT_UblCommandProcessing(uint8 *pBuf);
    379          uint8 MT_UblCommandProcessing(uint8 *pBuf)
    380          {
    381            if (pBuf[MT_RPC_POS_CMD1] == MT_UBL_ERASE)
    382            {
    383              uint16 crc[2];
    384              HalFlashRead(UBL_RC_IMG_PG_BEG, UBL_MD_PG_OFFSET, (uint8 *)(crc+1), 2);
    385          
    386              if (crc[1] != 0)
    387              {
    388                crc[1] ^= 0xFFFF;  // Only write to zero bits that are not already zero.
    389                crc[0] = 0xFFFF;
    390                HalFlashWrite((UBL_MD_ADDR - 2) / HAL_FLASH_WORD_SIZE, (uint8 *)crc, 1);
    391              }
    392          
    393              Onboard_soft_reset();
    394            }
    395          
    396            return MT_RPC_ERR_COMMAND_ID;
    397          }
    398          #endif
    399          
    400          /*********************************************************************
    401           *                    EXTERNAL I/O FUNCTIONS
    402           *
    403           * User defined functions to control external devices. Add your code
    404           * to the following functions to control devices wired to DB outputs.
    405           *
    406           *********************************************************************/
    407          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    408          void BigLight_On( void )
   \                     BigLight_On:
    409          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    410            // Put code here to turn on an external light
    411          }
   \   000000   02....       LJMP    ?BRET
    412          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    413          void BigLight_Off( void )
   \                     BigLight_Off:
    414          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    415            // Put code here to turn off an external light
    416          }
   \   000000   02....       LJMP    ?BRET
    417          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    418          void BuzzerControl( uint8 on )
   \                     BuzzerControl:
    419          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    420            // Put code here to turn a buzzer on/off
    421            (void)on;
    422          }
   \   000000   02....       LJMP    ?BRET
    423          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    424          void Dimmer( uint8 lvl )
   \                     Dimmer:
    425          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    426            // Put code here to control a dimmer
    427            (void)lvl;
    428          }
   \   000000   02....       LJMP    ?BRET
    429          
    430          // No dip switches on this board

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    431          uint8 GetUserDipSw( void )
   \                     GetUserDipSw:
    432          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    433            return 0;
   \   000000   7900         MOV     R1,#0x0
   \   000002   02....       LJMP    ?BRET
    434          }

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for registeredKeysTaskID>`:
   \   000000   FF           DB 255

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??InitBoard::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    InitBoard

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??RegisterForKeys::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    RegisterForKeys

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??OnBoard_SendKeys::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    OnBoard_SendKeys

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??OnBoard_KeyCallback::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    OnBoard_KeyCallback

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??OnBoard_stack_used::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    OnBoard_stack_used

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??_itoa::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    _itoa

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??Onboard_rand::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Onboard_rand

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??Onboard_wait::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Onboard_wait

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??BigLight_On::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    BigLight_On

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??BigLight_Off::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    BigLight_Off

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??BuzzerControl::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    BuzzerControl

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??Dimmer::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Dimmer

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??GetUserDipSw::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    GetUserDipSw
    435          
    436          /*********************************************************************
    437          *********************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0      0   BigLight_Off
      0      0   BigLight_On
      0      0   BuzzerControl
      0      0   Dimmer
      0      0   GetUserDipSw
      0      9   InitBoard
        0      9   -> HalKeyConfig
        0      9   -> halAssertHandler
        0      9   -> osal_int_disable
      0      9   OnBoard_KeyCallback
        0      9   -> OnBoard_SendKeys
      1     19   OnBoard_SendKeys
        0     10   -> osal_msg_allocate
        0     10   -> osal_msg_send
      2      0   OnBoard_stack_used
      2      0   Onboard_rand
        2      0   -> macMcuRandomWord
      0      0   Onboard_soft_reset
      0      0   Onboard_wait
      2      0   RegisterForKeys
      1     19   _itoa


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       1  ?<Initializer for registeredKeysTaskID>
       5  ?Subroutine0
       7  ?Subroutine1
       3  BigLight_Off
       6  BigLight_Off::?relay
       3  BigLight_On
       6  BigLight_On::?relay
       3  BuzzerControl
       6  BuzzerControl::?relay
       1  DMAARM
       3  Dimmer
       6  Dimmer::?relay
       5  GetUserDipSw
       6  GetUserDipSw::?relay
      49  InitBoard
       6  InitBoard::?relay
      16  OnBoard_KeyCallback
       6  OnBoard_KeyCallback::?relay
      66  OnBoard_SendKeys
       6  OnBoard_SendKeys::?relay
      82  OnBoard_stack_used
       6  OnBoard_stack_used::?relay
      10  Onboard_rand
       6  Onboard_rand::?relay
       9  Onboard_soft_reset
      24  Onboard_wait
       6  Onboard_wait::?relay
      21  RegisterForKeys
       6  RegisterForKeys::?relay
       1  SLEEPSTA
       1  _A_IEN0
     147  _itoa
       6  _itoa::?relay
      16  _lockBits
       8  _nvIEEE
    1932  _reserved
       8  aExtendedAddress
       1  registeredKeysTaskID

 
   444 bytes in segment BANKED_CODE
    78 bytes in segment BANK_RELAYS
     8 bytes in segment IEEE_ADDRESS_SPACE
    16 bytes in segment LOCK_BITS_ADDRESS_SPACE
     9 bytes in segment NEAR_CODE
 1 932 bytes in segment RESERVED_ADDRESS_SPACE
     3 bytes in segment SFR_AN
     1 byte  in segment XDATA_I
     1 byte  in segment XDATA_ID
     8 bytes in segment XDATA_Z
 
   532 bytes of CODE  memory
     0 bytes of DATA  memory (+ 3 bytes shared)
 1 965 bytes of XDATA memory

Errors: none
Warnings: none
