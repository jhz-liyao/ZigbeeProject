###############################################################################
#
# IAR C/C++ Compiler V9.30.1.3056 for 8051                31/Oct/2016  11:56:46
# Copyright 2004-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.03优化动态内存
#        -最后无错修改\Frame\ESP8266_Driver.c
#    Command line       =  
#        -f "E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.03优化动态内存
#        -最后无错修改\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f
#        "E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.03优化动态内存
#        -最后无错修改\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=50 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
#        -DREJOIN_POLL_RATE=440 "E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.03优化动态内存
#        -最后无错修改\Frame\ESP8266_Driver.c" -D HAL_UART=TRUE -D
#        HAL_UART_ISR=1 -D HAL_UART_DMA=0 -D LOG_OUT -D
#        UART1_PROTOCOL_RESOLVER=1 -D xISQC -D NWK_AUTO_POLL -D xZTOOL_P1 -D
#        ISR_KEYINTERRUPT -D xMT_TASK -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D
#        xLCD_SUPPORTED=DEBUG -D xPOWER_SAVING -lC
#        "E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.03优化动态内存
#        -最后无错修改\CC2530DB\WaterMachine\List" -lA
#        "E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.03优化动态内存
#        -最后无错修改\CC2530DB\WaterMachine\List" --diag_suppress Pe001,Pa010
#        -o "E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.03优化动态内存
#        -最后无错修改\CC2530DB\WaterMachine\Obj" -e --no_code_motion --debug
#        --core=plain --dptr=16,1 --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 8 -I "E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.03优化动态内存
#        -最后无错修改\CC2530DB\" -I "E:\资源\个人项目\ZigbeeProject\Z-Stack
#        Mesh 1.0.0\Projects\zstack\Samples\Demo_App_V2.03优化动态内存
#        -最后无错修改\CC2530DB\..\Source\" -I
#        "E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.03优化动态内存
#        -最后无错修改\CC2530DB\..\Frame\" -I
#        "E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.03优化动态内存
#        -最后无错修改\CC2530DB\..\Module\WaterMachine\" -I
#        "E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.03优化动态内存
#        -最后无错修改\CC2530DB\..\..\..\ZMain\TI2530DB\" -I
#        "E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.03优化动态内存
#        -最后无错修改\CC2530DB\..\..\..\..\..\Components\hal\include\" -I
#        "E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.03优化动态内存
#        -最后无错修改\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.03优化动态内存
#        -最后无错修改\CC2530DB\..\..\..\..\..\Components\mac\include\" -I
#        "E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.03优化动态内存
#        -最后无错修改\CC2530DB\..\..\..\..\..\Components\mac\high_level\" -I
#        "E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.03优化动态内存
#        -最后无错修改\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.03优化动态内存
#        -最后无错修改\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.03优化动态内存
#        -最后无错修改\CC2530DB\..\..\..\..\..\Components\mt\" -I
#        "E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.03优化动态内存
#        -最后无错修改\CC2530DB\..\..\..\..\..\Components\osal\include\" -I
#        "E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.03优化动态内存
#        -最后无错修改\CC2530DB\..\..\..\..\..\Components\services\saddr\" -I
#        "E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.03优化动态内存
#        -最后无错修改\CC2530DB\..\..\..\..\..\Components\services\sdata\" -I
#        "E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.03优化动态内存
#        -最后无错修改\CC2530DB\..\..\..\..\..\Components\stack\af\" -I
#        "E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.03优化动态内存
#        -最后无错修改\CC2530DB\..\..\..\..\..\Components\stack\nwk\" -I
#        "E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.03优化动态内存
#        -最后无错修改\CC2530DB\..\..\..\..\..\Components\stack\sapi\" -I
#        "E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.03优化动态内存
#        -最后无错修改\CC2530DB\..\..\..\..\..\Components\stack\sec\" -I
#        "E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.03优化动态内存
#        -最后无错修改\CC2530DB\..\..\..\..\..\Components\stack\sys\" -I
#        "E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.03优化动态内存
#        -最后无错修改\CC2530DB\..\..\..\..\..\Components\stack\zdo\" -I
#        "E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.03优化动态内存
#        -最后无错修改\CC2530DB\..\..\..\..\..\Components\zmac\" -I
#        "E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.03优化动态内存
#        -最后无错修改\CC2530DB\..\..\..\..\..\Components\zmac\f8w\" -Ohz
#    List file          =  
#        E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.03优化动态内存
#        -最后无错修改\CC2530DB\WaterMachine\List\ESP8266_Driver.lst
#    Object file        =  
#        E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.03优化动态内存
#        -最后无错修改\CC2530DB\WaterMachine\Obj\ESP8266_Driver.r51
#
###############################################################################

E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh 1.0.0\Projects\zstack\Samples\Demo_App_V2.03优化动态内存 -最后无错修改\Frame\ESP8266_Driver.c
      1          #include "ESP8266_Driver.h"
      2          #include "hal_uart.h"
      3          #include "OnBoard.h"
      4          #include <stdio.h>
      5          

   \                                 In  segment XDATA_I, align 1, keep-with-next
      6          ESP8266_CMD_T ESP_8266_CMD = {
   \                     ESP_8266_CMD:
   \   000000                DS 10
   \   00000A                REQUIRE `?<Initializer for ESP_8266_CMD>`
   \   00000A                REQUIRE __INIT_XDATA_I
      7              "AT+CWMODE=%d\r\n",
      8              "AT+CWJAP=\"%s\",\"%s\"\r\n",
      9              "AT+CIPMUX=1\r\n",
     10              "AT+CIPSERVER=1,8080\r\n",
     11              "AT+CIPSEND=%d,%d\r\n"
     12          };
     13          
     14          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     15          QUEUE_T* ESP8266_Pack_Queue;
   \                     ESP8266_Pack_Queue:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     16          uint8_t* ESP8266_Pack_Buff;
   \                     ESP8266_Pack_Buff:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
     17          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     18          ESP8266_STATE ESP8266_State = ESP8266_BUSY; 
   \                     ESP8266_State:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     19          ESP8266_SECTION ESP8266_Section = ESP8266_INIT; 
   \                     ESP8266_Section:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     20          uint8_t ESP8266_CONN[CONN_COUNT] = {0}; 
   \                     ESP8266_CONN:
   \   000000                DS 5
   \   000005                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     21          uint8_t ESP_Change = 0;
   \                     ESP_Change:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     22          uint8_t ESP8266_Conn_Flag = 0;
   \                     ESP8266_Conn_Flag:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     23          ESP8266_Pack_T pack = {0};
   \                     pack:
   \   000000                DS 3
   \   000003                REQUIRE __INIT_XDATA_Z
     24          
     25          
     26          
     27          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     28          void ESP8266_Init(void){
   \                     ESP8266_Init:
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
     29              ESP8266_Pack_Buff = (uint8_t*)osal_mem_alloc(ESP8266_PACK_LEN * sizeof(ESP8266_Pack_T));
   \   000004                ; Setup parameters for call to function osal_mem_alloc
   \   000004   7A5A         MOV     R2,#0x5a
   \   000006   7B00         MOV     R3,#0x0
   \   000008   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00000B   90....       MOV     DPTR,#ESP8266_Pack_Buff
   \   00000E   EA           MOV     A,R2
   \   00000F   F0           MOVX    @DPTR,A
   \   000010   A3           INC     DPTR
   \   000011   EB           MOV     A,R3
   \   000012   F0           MOVX    @DPTR,A
     30              ESP8266_Pack_Queue = Queue_Init(ESP8266_Pack_Buff , sizeof(ESP8266_Pack_T), ESP8266_PACK_LEN); 
   \   000013                ; Setup parameters for call to function Queue_Init
   \   000013   7C1E         MOV     R4,#0x1e
   \   000015   7D00         MOV     R5,#0x0
   \   000017   7903         MOV     R1,#0x3
   \   000019   12....       LCALL   `??Queue_Init::?relay`; Banked call to: Queue_Init
   \   00001C   90....       MOV     DPTR,#ESP8266_Pack_Queue
   \   00001F   EA           MOV     A,R2
   \   000020   F0           MOVX    @DPTR,A
   \   000021   A3           INC     DPTR
   \   000022   EB           MOV     A,R3
   \   000023   F0           MOVX    @DPTR,A
     31          }
   \   000024                REQUIRE ?Subroutine0
   \   000024                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
     32          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     33          void ESP8266_Poll(uint8_t* data, uint8_t len){
   \                     ESP8266_Poll:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
     34            if(ESP8266_Section == ESP8266_INIT){
   \   000009   90....       MOV     DPTR,#ESP8266_Section
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   707F         JNZ     ??ESP8266_Poll_0
     35                if(strstr((char const*)data,"ready") != NULL || strstr((char const*)data,"OK") != NULL){
   \   00000F                ; Setup parameters for call to function strstr
   \   00000F   7C..         MOV     R4,#`?<Constant "ready">` & 0xff
   \   000011   7D..         MOV     R5,#(`?<Constant "ready">` >> 8) & 0xff
   \   000013   12....       LCALL   `??strstr::?relay`   ; Banked call to: strstr
   \   000016   8B..         MOV     ?V1,R3
   \   000018   EA           MOV     A,R2
   \   000019   45..         ORL     A,?V1
   \   00001B   7012         JNZ     ??ESP8266_Poll_1
   \   00001D                ; Setup parameters for call to function strstr
   \   00001D   7C..         MOV     R4,#`?<Constant "OK">` & 0xff
   \   00001F   7D..         MOV     R5,#(`?<Constant "OK">` >> 8) & 0xff
   \   000021   EE           MOV     A,R6
   \   000022   FA           MOV     R2,A
   \   000023   EF           MOV     A,R7
   \   000024   FB           MOV     R3,A
   \   000025   12....       LCALL   `??strstr::?relay`   ; Banked call to: strstr
   \   000028   8B..         MOV     ?V1,R3
   \   00002A   EA           MOV     A,R2
   \   00002B   45..         ORL     A,?V1
   \   00002D   6016         JZ      ??ESP8266_Poll_2
     36                  Log.waring("路由器启动完成\r\n");   
   \                     ??ESP8266_Poll_1:
   \   00002F                ; Setup parameters for indirect call
   \   00002F   7A..         MOV     R2,#`?<Constant "\\302\\267\\323\\311\\306\\367\\306\\364\\2` & 0xff
   \   000031   7B..         MOV     R3,#(`?<Constant "\\302\\267\\323\\311\\306\\367\\306\\364\\2` >> 8) & 0xff
   \   000033   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   000036   12....       LCALL   ?CALL_IND
     37                  ESP8266_Section = ESP8266_CONF;
   \   000039   90....       MOV     DPTR,#ESP8266_Section
   \   00003C   7401         MOV     A,#0x1
   \   00003E   F0           MOVX    @DPTR,A
     38                  ESP8266_State = ESP8266_READY;
   \   00003F   90....       MOV     DPTR,#ESP8266_State
   \   000042   02....       LJMP    ??ESP8266_Poll_3 & 0xFFFF
     39                }else if(strstr((char const*)data,"WIFI GOT IP") != NULL){
   \                     ??ESP8266_Poll_2:
   \   000045                ; Setup parameters for call to function strstr
   \   000045   7C..         MOV     R4,#`?<Constant "WIFI GOT IP">` & 0xff
   \   000047   7D..         MOV     R5,#(`?<Constant "WIFI GOT IP">` >> 8) & 0xff
   \   000049   EE           MOV     A,R6
   \   00004A   FA           MOV     R2,A
   \   00004B   EF           MOV     A,R7
   \   00004C   FB           MOV     R3,A
   \   00004D   12....       LCALL   `??strstr::?relay`   ; Banked call to: strstr
   \   000050   8B..         MOV     ?V1,R3
   \   000052   EA           MOV     A,R2
   \   000053   45..         ORL     A,?V1
   \   000055   600C         JZ      ??ESP8266_Poll_4
     40                  ESP8266_State = ESP8266_CONNECTED;
   \   000057   90....       MOV     DPTR,#ESP8266_State
   \   00005A   7405         MOV     A,#0x5
   \   00005C   F0           MOVX    @DPTR,A
     41                  Log.waring("路由器连接成功\r\n");   
   \   00005D                ; Setup parameters for indirect call
   \   00005D   7A..         MOV     R2,#`?<Constant "\\302\\267\\323\\311\\306\\367\\301\\254\\2` & 0xff
   \   00005F   7B..         MOV     R3,#(`?<Constant "\\302\\267\\323\\311\\306\\367\\301\\254\\2` >> 8) & 0xff
   \   000061   801F         SJMP    ??ESP8266_Poll_5
     42                  ESP8266_Section = ESP8266_CONF;
     43                }else if(strstr((char const*)data,"WIFI DISCONNECT") != NULL){
   \                     ??ESP8266_Poll_4:
   \   000063                ; Setup parameters for call to function strstr
   \   000063   7C..         MOV     R4,#`?<Constant "WIFI DISCONNECT">` & 0xff
   \   000065   7D..         MOV     R5,#(`?<Constant "WIFI DISCONNECT">` >> 8) & 0xff
   \   000067   EE           MOV     A,R6
   \   000068   FA           MOV     R2,A
   \   000069   EF           MOV     A,R7
   \   00006A   FB           MOV     R3,A
   \   00006B   12....       LCALL   `??strstr::?relay`   ; Banked call to: strstr
   \   00006E   8B..         MOV     ?V1,R3
   \   000070   EA           MOV     A,R2
   \   000071   45..         ORL     A,?V1
   \   000073   7003         JNZ     $+5
   \   000075   02....       LJMP    ??ESP8266_Poll_6 & 0xFFFF
     44                  ESP8266_State = ESP8266_CONNFAIL;
   \   000078   90....       MOV     DPTR,#ESP8266_State
   \   00007B   7406         MOV     A,#0x6
   \   00007D   F0           MOVX    @DPTR,A
     45                  Log.waring("路由器连接失败\r\n"); 
   \   00007E                ; Setup parameters for indirect call
   \   00007E   7A..         MOV     R2,#`?<Constant "\\302\\267\\323\\311\\306\\367\\301\\254\\2_1` & 0xff
   \   000080   7B..         MOV     R3,#(`?<Constant "\\302\\267\\323\\311\\306\\367\\301\\254\\2_1` >> 8) & 0xff
   \                     ??ESP8266_Poll_5:
   \   000082   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   000085   12....       LCALL   ?CALL_IND
     46                  ESP8266_Section = ESP8266_CONF;
   \   000088   90....       MOV     DPTR,#ESP8266_Section
   \   00008B   02....       LJMP    ??ESP8266_Poll_7 & 0xFFFF
     47                }
     48            }else if(ESP8266_Section == ESP8266_WORK || ESP8266_Section == ESP8266_CONF ){
   \                     ??ESP8266_Poll_0:
   \   00008E   6402         XRL     A,#0x2
   \   000090   6008         JZ      ??ESP8266_Poll_8
   \   000092   E0           MOVX    A,@DPTR
   \   000093   6401         XRL     A,#0x1
   \   000095   6003         JZ      $+5
   \   000097   02....       LJMP    ??ESP8266_Poll_6 & 0xFFFF
     49                if(strstr((char const*)data,"CONNECT") != NULL){
   \                     ??ESP8266_Poll_8:
   \   00009A                ; Setup parameters for call to function strstr
   \   00009A   7C..         MOV     R4,#`?<Constant "CONNECT">` & 0xff
   \   00009C   7D..         MOV     R5,#(`?<Constant "CONNECT">` >> 8) & 0xff
   \   00009E   12....       LCALL   `??strstr::?relay`   ; Banked call to: strstr
   \   0000A1   8B..         MOV     ?V1,R3
   \   0000A3   EA           MOV     A,R2
   \   0000A4   45..         ORL     A,?V1
   \   0000A6   6037         JZ      ??ESP8266_Poll_9
     50                  ESP8266_CONN[(*data)-(uint8_t)'0'] = 1;
   \   0000A8   8E82         MOV     DPL,R6
   \   0000AA   8F83         MOV     DPH,R7
   \   0000AC   E0           MOVX    A,@DPTR
   \   0000AD   F8           MOV     R0,A
   \   0000AE   74..         MOV     A,#(ESP8266_CONN + 208) & 0xff
   \   0000B0   28           ADD     A,R0
   \   0000B1   F582         MOV     DPL,A
   \   0000B3   E4           CLR     A
   \   0000B4   34..         ADDC    A,#((ESP8266_CONN - 48) >> 8) & 0xff
   \   0000B6   F583         MOV     DPH,A
   \   0000B8   7401         MOV     A,#0x1
   \   0000BA   F0           MOVX    @DPTR,A
     51                  ESP8266_Conn_Flag |=  1 << ((*data)-(uint8_t)'0');
   \   0000BB   F5..         MOV     ?V0,A
   \   0000BD   75..00       MOV     ?V1,#0x0
   \   0000C0   8E82         MOV     DPL,R6
   \   0000C2   8F83         MOV     DPH,R7
   \   0000C4   E0           MOVX    A,@DPTR
   \   0000C5   24D0         ADD     A,#-0x30
   \   0000C7   78..         MOV     R0,#?V0
   \   0000C9   12....       LCALL   ?S_SHL
   \   0000CC   90....       MOV     DPTR,#ESP8266_Conn_Flag
   \   0000CF   E0           MOVX    A,@DPTR
   \   0000D0   45..         ORL     A,?V0
   \   0000D2   F0           MOVX    @DPTR,A
     52                  ESP8266_State = ESP8266_READY;
   \   0000D3   90....       MOV     DPTR,#ESP8266_State
   \   0000D6   7401         MOV     A,#0x1
   \   0000D8   F0           MOVX    @DPTR,A
     53                  Log.waring("终端连接\r\n");
   \   0000D9                ; Setup parameters for indirect call
   \   0000D9   7A..         MOV     R2,#`?<Constant "\\326\\325\\266\\313\\301\\254\\275\\323\\r` & 0xff
   \   0000DB   7B..         MOV     R3,#(`?<Constant "\\326\\325\\266\\313\\301\\254\\275\\323\\r` >> 8) & 0xff
   \   0000DD   804D         SJMP    ??ESP8266_Poll_10
     54                }else if(strstr((char const*)data,"CLOSED") != NULL){ 
   \                     ??ESP8266_Poll_9:
   \   0000DF                ; Setup parameters for call to function strstr
   \   0000DF   7C..         MOV     R4,#`?<Constant "CLOSED">` & 0xff
   \   0000E1   7D..         MOV     R5,#(`?<Constant "CLOSED">` >> 8) & 0xff
   \   0000E3   EE           MOV     A,R6
   \   0000E4   FA           MOV     R2,A
   \   0000E5   EF           MOV     A,R7
   \   0000E6   FB           MOV     R3,A
   \   0000E7   12....       LCALL   `??strstr::?relay`   ; Banked call to: strstr
   \   0000EA   8B..         MOV     ?V1,R3
   \   0000EC   EA           MOV     A,R2
   \   0000ED   45..         ORL     A,?V1
   \   0000EF   600B         JZ      ??ESP8266_Poll_11
     55                  ESP8266_Conn_Flag &=  0 << ((*data)-(uint8_t)'0');
   \   0000F1   90....       MOV     DPTR,#ESP8266_Conn_Flag
   \   0000F4   E4           CLR     A
   \   0000F5   F0           MOVX    @DPTR,A
     56                  Log.waring("终端退出\r\n");
   \   0000F6                ; Setup parameters for indirect call
   \   0000F6   7A..         MOV     R2,#`?<Constant "\\326\\325\\266\\313\\315\\313\\263\\366\\r` & 0xff
   \   0000F8   7B..         MOV     R3,#(`?<Constant "\\326\\325\\266\\313\\315\\313\\263\\366\\r` >> 8) & 0xff
   \   0000FA   8030         SJMP    ??ESP8266_Poll_10
     57                }else if(strstr((char const*)data,"OK") != NULL){
   \                     ??ESP8266_Poll_11:
   \   0000FC                ; Setup parameters for call to function strstr
   \   0000FC   7C..         MOV     R4,#`?<Constant "OK">` & 0xff
   \   0000FE   7D..         MOV     R5,#(`?<Constant "OK">` >> 8) & 0xff
   \   000100   EE           MOV     A,R6
   \   000101   FA           MOV     R2,A
   \   000102   EF           MOV     A,R7
   \   000103   FB           MOV     R3,A
   \   000104   12....       LCALL   `??strstr::?relay`   ; Banked call to: strstr
   \   000107   8B..         MOV     ?V1,R3
   \   000109   EA           MOV     A,R2
   \   00010A   45..         ORL     A,?V1
   \   00010C   6008         JZ      ??ESP8266_Poll_12
     58                  ESP8266_State = ESP8266_READY;
   \   00010E   90....       MOV     DPTR,#ESP8266_State
   \                     ??ESP8266_Poll_7:
   \   000111   7401         MOV     A,#0x1
   \                     ??ESP8266_Poll_3:
   \   000113   F0           MOVX    @DPTR,A
   \   000114   801C         SJMP    ??ESP8266_Poll_6
     59                }else if(strstr((char const*)data,"ERROR") != NULL){
   \                     ??ESP8266_Poll_12:
   \   000116                ; Setup parameters for call to function strstr
   \   000116   7C..         MOV     R4,#`?<Constant "ERROR">` & 0xff
   \   000118   7D..         MOV     R5,#(`?<Constant "ERROR">` >> 8) & 0xff
   \   00011A   EE           MOV     A,R6
   \   00011B   FA           MOV     R2,A
   \   00011C   EF           MOV     A,R7
   \   00011D   FB           MOV     R3,A
   \   00011E   12....       LCALL   `??strstr::?relay`   ; Banked call to: strstr
   \   000121   8B..         MOV     ?V1,R3
   \   000123   EA           MOV     A,R2
   \   000124   45..         ORL     A,?V1
   \   000126   600A         JZ      ??ESP8266_Poll_6
     60                  //ESP8266_State = ESP8266_ERROR; 
     61                  Log.waring("WIFI模块ERROR\r\n"); 
   \   000128                ; Setup parameters for indirect call
   \   000128   7A..         MOV     R2,#`?<Constant "WIFI\\304\\243\\277\\351ERROR\\r\\n">` & 0xff
   \   00012A   7B..         MOV     R3,#(`?<Constant "WIFI\\304\\243\\277\\351ERROR\\r\\n">` >> 8) & 0xff
     62                } 
     63            } 
   \                     ??ESP8266_Poll_10:
   \   00012C   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   00012F   12....       LCALL   ?CALL_IND
     64          }
   \                     ??ESP8266_Poll_6:
   \   000132                REQUIRE ?Subroutine1
   \   000132                ; // Fall through to label ?Subroutine1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   90....       MOV     DPTR,#Log + 2
   \   000003                REQUIRE ??Subroutine10_0
   \   000003                ; // Fall through to label ??Subroutine10_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine10_0:
   \   000000   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F583         MOV     DPH,A
   \   000006   8882         MOV     DPL,R0
   \   000008   22           RET
     65          
     66          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     67          void ESP8266_Run(void){ 
   \                     ESP8266_Run:
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
     68            if(ESP8266_Section == ESP8266_INIT){
   \   000004   90....       MOV     DPTR,#ESP8266_Section
   \   000007   E0           MOVX    A,@DPTR
   \   000008   6065         JZ      ??ESP8266_Run_0
     69              return;
     70            }else if(ESP8266_Section == ESP8266_CONF){
   \   00000A   6401         XRL     A,#0x1
   \   00000C   7016         JNZ     ??ESP8266_Run_1
     71              ESP8266_CMD_Send("AT+CIPMUX=1\r\n");
   \   00000E                ; Setup parameters for call to function ESP8266_CMD_Send
   \   00000E   7A..         MOV     R2,#`?<Constant "AT+CIPMUX=1\\r\\n">` & 0xff
   \   000010   7B..         MOV     R3,#(`?<Constant "AT+CIPMUX=1\\r\\n">` >> 8) & 0xff
   \   000012   12....       LCALL   `??ESP8266_CMD_Send::?relay`; Banked call to: ESP8266_CMD_Send
     72              ESP8266_CMD_Send("AT+CIPSERVER=0,8080\r\n");
   \   000015                ; Setup parameters for call to function ESP8266_CMD_Send
   \   000015   7A..         MOV     R2,#`?<Constant "AT+CIPSERVER=0,8080\\r\\n">` & 0xff
   \   000017   7B..         MOV     R3,#(`?<Constant "AT+CIPSERVER=0,8080\\r\\n">` >> 8) & 0xff
   \   000019   12....       LCALL   `??ESP8266_CMD_Send::?relay`; Banked call to: ESP8266_CMD_Send
     73              ESP8266_Section = ESP8266_WORK;
   \   00001C   90....       MOV     DPTR,#ESP8266_Section
   \   00001F   7402         MOV     A,#0x2
   \   000021   F0           MOVX    @DPTR,A
   \   000022   804B         SJMP    ??ESP8266_Run_0
     74            }else if(ESP8266_Section == ESP8266_WORK){
   \                     ??ESP8266_Run_1:
   \   000024   E0           MOVX    A,@DPTR
   \   000025   6402         XRL     A,#0x2
   \   000027   7046         JNZ     ??ESP8266_Run_0
     75               if(ESP8266_State == ESP8266_READY){ 
   \   000029   90....       MOV     DPTR,#ESP8266_State
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   6401         XRL     A,#0x1
   \   00002F   7024         JNZ     ??ESP8266_Run_2
     76                  if(Queue_Get(ESP8266_Pack_Queue,&pack) == 0){
   \   000031                ; Setup parameters for call to function Queue_Get
   \   000031   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_35:
   \   000034   12....       LCALL   `??Queue_Get::?relay`; Banked call to: Queue_Get
   \   000037   E9           MOV     A,R1
   \   000038   701B         JNZ     ??ESP8266_Run_2
     77                      //ESP8266_State = ESP8266_BUSY;
     78                      HalUARTWrite(HAL_UART_PORT_1,pack.data, pack.len);
   \   00003A                ; Setup parameters for call to function HalUARTWrite
   \   00003A   90....       MOV     DPTR,#pack + 2
   \   00003D   E0           MOVX    A,@DPTR
   \   00003E   FC           MOV     R4,A
   \   00003F   7D00         MOV     R5,#0x0
   \   000041   90....       MOV     DPTR,#pack
   \   000044   12....       LCALL   ??Subroutine13_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   000047   7901         MOV     R1,#0x1
   \   000049   12....       LCALL   `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
     79                      osal_mem_free(pack.data);
   \   00004C                ; Setup parameters for call to function osal_mem_free
   \   00004C   90....       MOV     DPTR,#pack
   \   00004F   12....       LCALL   ??Subroutine13_0 & 0xFFFF
     80                  }  
     81               }
   \                     ??CrossCallReturnLabel_27:
   \   000052   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
     82               
     83               if(ESP8266_Conn_Flag == 0)
   \                     ??ESP8266_Run_2:
   \   000055   90....       MOV     DPTR,#ESP8266_Conn_Flag
   \   000058   E0           MOVX    A,@DPTR
   \   000059   7014         JNZ     ??ESP8266_Run_0
   \   00005B   8009         SJMP    ??ESP8266_Run_3
     84                 while(Queue_Get(ESP8266_Pack_Queue,&pack) == 0)
     85                   osal_mem_free(pack.data);
   \                     ??ESP8266_Run_4:
   \   00005D                ; Setup parameters for call to function osal_mem_free
   \   00005D   90....       MOV     DPTR,#pack
   \   000060   12....       LCALL   ??Subroutine13_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   000063   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \                     ??ESP8266_Run_3:
   \   000066                ; Setup parameters for call to function Queue_Get
   \   000066   12....       LCALL   ?Subroutine2 & 0xFFFF
     86               
     87               
     88            } 
   \                     ??CrossCallReturnLabel_36:
   \   000069   12....       LCALL   `??Queue_Get::?relay`; Banked call to: Queue_Get
   \   00006C   E9           MOV     A,R1
   \   00006D   60EE         JZ      ??ESP8266_Run_4
     89          }
   \                     ??ESP8266_Run_0:
   \   00006F   02....       LJMP    ?Subroutine0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7C..         MOV     R4,#pack & 0xff
   \   000002   7D..         MOV     R5,#(pack >> 8) & 0xff
   \   000004   90....       MOV     DPTR,#ESP8266_Pack_Queue
   \   000007                REQUIRE ??Subroutine13_0
   \   000007                ; // Fall through to label ??Subroutine13_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine13_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FB           MOV     R3,A
   \   000005   22           RET
     90          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     91          int8_t ESP8266_CMD_Send(uint8_t* CMD){ 
   \                     ESP8266_CMD_Send:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
     92            uint8_t len = strlen((char const*)CMD);
   \   000009                ; Setup parameters for call to function strlen
   \   000009   12....       LCALL   `??strlen::?relay`   ; Banked call to: strlen
   \   00000C   EA           MOV     A,R2
   \   00000D   F5..         MOV     ?V0,A
     93            pack.len = len;
   \   00000F   90....       MOV     DPTR,#pack + 2
   \   000012   F0           MOVX    @DPTR,A
     94            pack.data = (uint8_t*)osal_mem_alloc(len);
   \   000013   75..00       MOV     ?V1,#0x0
   \   000016                ; Setup parameters for call to function osal_mem_alloc
   \   000016   AB..         MOV     R3,?V1
   \   000018   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00001B   90....       MOV     DPTR,#pack
   \   00001E   EA           MOV     A,R2
   \   00001F   F0           MOVX    @DPTR,A
   \   000020   A3           INC     DPTR
   \   000021   EB           MOV     A,R3
   \   000022   F0           MOVX    @DPTR,A
     95            memcpy(pack.data, CMD, len); 
   \   000023                ; Setup parameters for call to function memcpy
   \   000023   78..         MOV     R0,#?V0
   \   000025   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000028   EE           MOV     A,R6
   \   000029   FC           MOV     R4,A
   \   00002A   EF           MOV     A,R7
   \   00002B   FD           MOV     R5,A
   \   00002C   90....       MOV     DPTR,#pack
   \   00002F   12....       LCALL   ??Subroutine13_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   000032   12....       LCALL   `??memcpy::?relay`   ; Banked call to: memcpy
   \   000035   7402         MOV     A,#0x2
   \   000037   12....       LCALL   ?DEALLOC_XSTACK8
     96            Queue_Put(ESP8266_Pack_Queue, &pack);
   \   00003A                ; Setup parameters for call to function Queue_Put
   \   00003A   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_37:
   \   00003D   12....       LCALL   `??Queue_Put::?relay`; Banked call to: Queue_Put
     97            return 0;
   \   000040   7900         MOV     R1,#0x0
   \   000042   02....       LJMP    ?Subroutine1 & 0xFFFF
     98          }
     99          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    100          void ESP8266_Data_Send(uint8_t *data, uint8_t  len){
   \                     ESP8266_Data_Send:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0,R2
   \   000007   8B..         MOV     ?V1,R3
   \   000009   E9           MOV     A,R1
   \   00000A   FF           MOV     R7,A
    101              uint8_t i; 
    102              for(i = 0; i < CONN_COUNT; i++){
   \   00000B   7E00         MOV     R6,#0x0
    103                if((ESP8266_Conn_Flag & (1 << i))){
   \                     ??ESP8266_Data_Send_0:
   \   00000D   75..01       MOV     ?V2,#0x1
   \   000010   75..00       MOV     ?V3,#0x0
   \   000013   EE           MOV     A,R6
   \   000014   78..         MOV     R0,#?V2
   \   000016   12....       LCALL   ?S_SHL
   \   000019   90....       MOV     DPTR,#ESP8266_Conn_Flag
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   55..         ANL     A,?V2
   \   00001F   7003         JNZ     $+5
   \   000021   02....       LJMP    ??ESP8266_Data_Send_1 & 0xFFFF
    104                    pack.data = osal_mem_alloc(strlen((char const*)ESP_8266_CMD.SendCMD) + 10);
   \   000024                ; Setup parameters for call to function strlen
   \   000024   90....       MOV     DPTR,#ESP_8266_CMD + 8
   \   000027   12....       LCALL   ??Subroutine13_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   00002A   12....       LCALL   `??strlen::?relay`   ; Banked call to: strlen
   \   00002D   8B..         MOV     ?V3,R3
   \   00002F   A9..         MOV     R1,?V3
   \   000031                ; Setup parameters for call to function osal_mem_alloc
   \   000031   EA           MOV     A,R2
   \   000032   240A         ADD     A,#0xa
   \   000034   FA           MOV     R2,A
   \   000035   E4           CLR     A
   \   000036   39           ADDC    A,R1
   \   000037   FB           MOV     R3,A
   \   000038   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00003B   90....       MOV     DPTR,#pack
   \   00003E   EA           MOV     A,R2
   \   00003F   F0           MOVX    @DPTR,A
   \   000040   A3           INC     DPTR
   \   000041   EB           MOV     A,R3
   \   000042   F0           MOVX    @DPTR,A
    105                    pack.len = sprintf((char*)pack.data,(char const *)ESP_8266_CMD.SendCMD,i,len); 
   \   000043                ; Setup parameters for call to function sprintf
   \   000043   8F..         MOV     ?V2,R7
   \   000045   75..00       MOV     ?V3,#0x0
   \   000048   78..         MOV     R0,#?V2
   \   00004A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004D   8E..         MOV     ?V2,R6
   \   00004F   78..         MOV     R0,#?V2
   \   000051   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000054   90....       MOV     DPTR,#ESP_8266_CMD + 8
   \   000057   E0           MOVX    A,@DPTR
   \   000058   FC           MOV     R4,A
   \   000059   A3           INC     DPTR
   \   00005A   E0           MOVX    A,@DPTR
   \   00005B   FD           MOV     R5,A
   \   00005C   90....       MOV     DPTR,#pack
   \   00005F   12....       LCALL   ??Subroutine13_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   000062   12....       LCALL   `??sprintf::?relay`  ; Banked call to: sprintf
   \   000065   7404         MOV     A,#0x4
   \   000067   12....       LCALL   ?DEALLOC_XSTACK8
   \   00006A   EA           MOV     A,R2
   \   00006B   90....       MOV     DPTR,#pack + 2
   \   00006E   F0           MOVX    @DPTR,A
    106                    Queue_Put(ESP8266_Pack_Queue, &pack); 
   \   00006F                ; Setup parameters for call to function Queue_Put
   \   00006F   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   000072   12....       LCALL   `??Queue_Put::?relay`; Banked call to: Queue_Put
    107                    
    108                    pack.data = osal_mem_alloc(len);
   \   000075   8F..         MOV     ?V2,R7
   \   000077                ; Setup parameters for call to function osal_mem_alloc
   \   000077   AA..         MOV     R2,?V2
   \   000079   AB..         MOV     R3,?V3
   \   00007B   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00007E   90....       MOV     DPTR,#pack
   \   000081   EA           MOV     A,R2
   \   000082   F0           MOVX    @DPTR,A
   \   000083   A3           INC     DPTR
   \   000084   EB           MOV     A,R3
   \   000085   F0           MOVX    @DPTR,A
    109                    pack.len = len;
   \   000086   EF           MOV     A,R7
   \   000087   A3           INC     DPTR
   \   000088   F0           MOVX    @DPTR,A
    110                    memcpy(pack.data, data, len);
   \   000089                ; Setup parameters for call to function memcpy
   \   000089   78..         MOV     R0,#?V2
   \   00008B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00008E   AC..         MOV     R4,?V0
   \   000090   AD..         MOV     R5,?V1
   \   000092   90....       MOV     DPTR,#pack
   \   000095   12....       LCALL   ??Subroutine13_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   000098   12....       LCALL   `??memcpy::?relay`   ; Banked call to: memcpy
   \   00009B   7402         MOV     A,#0x2
   \   00009D   12....       LCALL   ?DEALLOC_XSTACK8
    111                    Queue_Put(ESP8266_Pack_Queue, &pack); 
   \   0000A0                ; Setup parameters for call to function Queue_Put
   \   0000A0   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_39:
   \   0000A3   12....       LCALL   `??Queue_Put::?relay`; Banked call to: Queue_Put
    112                    printf("发送给WIFI:%X %X %X %X %X %X %X %X %X \r\n",pack.data[0],pack.data[1],pack.data[2],pack.data[3],
    113                           pack.data[4],pack.data[5],pack.data[6],pack.data[7],pack.data[8]);
   \   0000A6                ; Setup parameters for call to function printf
   \   0000A6   12....       LCALL   ?Subroutine7 & 0xFFFF
    114                }
    115              } 
   \                     ??CrossCallReturnLabel_14:
   \   0000A9   2408         ADD     A,#0x8
   \   0000AB   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   0000AE   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000B1   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   0000B4   2407         ADD     A,#0x7
   \   0000B6   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   0000B9   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000BC   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   0000BF   2406         ADD     A,#0x6
   \   0000C1   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   0000C4   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000C7   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   0000CA   A3           INC     DPTR
   \   0000CB   12....       LCALL   ??Subroutine12_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   0000CE   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000D1   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   0000D4   12....       LCALL   ??Subroutine12_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   0000D7   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000DA   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   0000DD   A3           INC     DPTR
   \   0000DE   12....       LCALL   ??Subroutine12_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   0000E1   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000E4   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   0000E7   12....       LCALL   ??Subroutine12_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   0000EA   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000ED   90....       MOV     DPTR,#pack
   \   0000F0   12....       LCALL   ??Subroutine10_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   0000F3   A3           INC     DPTR
   \   0000F4   12....       LCALL   ??Subroutine12_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   0000F7   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000FA   90....       MOV     DPTR,#pack
   \   0000FD   12....       LCALL   ??Subroutine10_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   000100   12....       LCALL   ??Subroutine12_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   000103   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000106   7A..         MOV     R2,#`?<Constant "\\267\\242\\313\\315\\270\\370WIFI:%X %X` & 0xff
   \   000108   7B..         MOV     R3,#(`?<Constant "\\267\\242\\313\\315\\270\\370WIFI:%X %X` >> 8) & 0xff
   \   00010A   12....       LCALL   `??printf::?relay`   ; Banked call to: printf
   \   00010D   7412         MOV     A,#0x12
   \   00010F   12....       LCALL   ?DEALLOC_XSTACK8
   \                     ??ESP8266_Data_Send_1:
   \   000112   0E           INC     R6
   \   000113   EE           MOV     A,R6
   \   000114   C3           CLR     C
   \   000115   9405         SUBB    A,#0x5
   \   000117   5003         JNC     $+5
   \   000119   02....       LJMP    ??ESP8266_Data_Send_0 & 0xFFFF
    116          }
   \   00011C   7F04         MOV     R7,#0x4
   \   00011E   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   90....       MOV     DPTR,#pack
   \   000003                REQUIRE ??Subroutine11_0
   \   000003                ; // Fall through to label ??Subroutine11_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine11_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   C8           XCH     A,R0
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   90....       MOV     DPTR,#pack
   \   000003   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   F582         MOV     DPL,A
   \   000002   E4           CLR     A
   \   000003   38           ADDC    A,R0
   \   000004   F583         MOV     DPH,A
   \   000006                REQUIRE ??Subroutine12_0
   \   000006                ; // Fall through to label ??Subroutine12_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine12_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V2,A
   \   000003   78..         MOV     R0,#?V2
   \   000005   22           RET
    117          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    118          void ESP8266_Protocol_Send(Protocol_Info_T* pi){
   \                     ESP8266_Protocol_Send:
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    119              pi->ProtocolDesc->Send = ESP8266_Data_Send;
   \   000004   EA           MOV     A,R2
   \   000005   240C         ADD     A,#0xc
   \   000007   F582         MOV     DPL,A
   \   000009   E4           CLR     A
   \   00000A   3B           ADDC    A,R3
   \   00000B   F583         MOV     DPH,A
   \   00000D   12....       LCALL   ??Subroutine11_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   000010   2406         ADD     A,#0x6
   \   000012   F582         MOV     DPL,A
   \   000014   E4           CLR     A
   \   000015   38           ADDC    A,R0
   \   000016   F583         MOV     DPH,A
   \   000018   74..         MOV     A,#`??ESP8266_Data_Send::?relay` & 0xff
   \   00001A   F0           MOVX    @DPTR,A
   \   00001B   A3           INC     DPTR
   \   00001C   74..         MOV     A,#(`??ESP8266_Data_Send::?relay` >> 8) & 0xff
   \   00001E   F0           MOVX    @DPTR,A
    120              Protocol_Send_Transpond(pi);
   \   00001F                ; Setup parameters for call to function Protocol_Send_Transpond
   \   00001F   12....       LCALL   `??Protocol_Send_Transpond::?relay`; Banked call to: Protocol_Send_Transpond
    121              
    122          }
   \   000022   02....       LJMP    ?Subroutine0 & 0xFFFF
    123          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    124          void SetSsidPwd(char* SSID, char* PWD){
   \                     SetSsidPwd:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 80
   \   000005   74B0         MOV     A,#-0x50
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0,R2
   \   00000C   8B..         MOV     ?V1,R3
   \   00000E   EC           MOV     A,R4
   \   00000F   FE           MOV     R6,A
   \   000010   ED           MOV     A,R5
   \   000011   FF           MOV     R7,A
    125            char Ssid[20] = {0};
   \   000012   90....       MOV     DPTR,#`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0`
   \   000015   7414         MOV     A,#0x14
   \   000017   12....       LCALL   ?XSTACK_DISP102_8
   \   00001A   7414         MOV     A,#0x14
   \   00001C   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    126            char  Pwd[20] = {0};
   \   00001F   90....       MOV     DPTR,#`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_1`
   \   000022   AC..         MOV     R4,?XSP + 0
   \   000024   AD..         MOV     R5,?XSP + 1
   \   000026   7414         MOV     A,#0x14
   \   000028   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    127            memcpy(Ssid, SSID, strlen(SSID));
   \   00002B                ; Setup parameters for call to function strlen
   \   00002B   12....       LCALL   `??strlen::?relay`   ; Banked call to: strlen
   \   00002E   8A..         MOV     ?V2,R2
   \   000030   8B..         MOV     ?V3,R3
   \   000032                ; Setup parameters for call to function memcpy
   \   000032   78..         MOV     R0,#?V2
   \   000034   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000037   AC..         MOV     R4,?V0
   \   000039   AD..         MOV     R5,?V1
   \   00003B   7416         MOV     A,#0x16
   \   00003D   12....       LCALL   ?XSTACK_DISP101_8
   \   000040   12....       LCALL   `??memcpy::?relay`   ; Banked call to: memcpy
   \   000043   7402         MOV     A,#0x2
   \   000045   12....       LCALL   ?DEALLOC_XSTACK8
    128            memcpy(Pwd, PWD, strlen(PWD));
   \   000048                ; Setup parameters for call to function strlen
   \   000048   EE           MOV     A,R6
   \   000049   FA           MOV     R2,A
   \   00004A   EF           MOV     A,R7
   \   00004B   FB           MOV     R3,A
   \   00004C   12....       LCALL   `??strlen::?relay`   ; Banked call to: strlen
   \   00004F   8A..         MOV     ?V0,R2
   \   000051   8B..         MOV     ?V1,R3
   \   000053                ; Setup parameters for call to function memcpy
   \   000053   78..         MOV     R0,#?V0
   \   000055   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000058   EE           MOV     A,R6
   \   000059   FC           MOV     R4,A
   \   00005A   EF           MOV     A,R7
   \   00005B   FD           MOV     R5,A
   \   00005C   7402         MOV     A,#0x2
   \   00005E   12....       LCALL   ?XSTACK_DISP101_8
   \   000061   12....       LCALL   `??memcpy::?relay`   ; Banked call to: memcpy
   \   000064   7402         MOV     A,#0x2
   \   000066   12....       LCALL   ?DEALLOC_XSTACK8
    129            uint8_t cmd[40] = {0}; 
   \   000069   90....       MOV     DPTR,#`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_2`
   \   00006C   7428         MOV     A,#0x28
   \   00006E   12....       LCALL   ?XSTACK_DISP102_8
   \   000071   7428         MOV     A,#0x28
   \   000073   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    130            sprintf((char*)cmd, (char const*)ESP_8266_CMD.SsidPwd, Ssid, Pwd);
   \   000076                ; Setup parameters for call to function sprintf
   \   000076   A8..         MOV     R0,?XSP + 0
   \   000078   A9..         MOV     R1,?XSP + 1
   \   00007A   88..         MOV     ?V0,R0
   \   00007C   89..         MOV     ?V1,R1
   \   00007E   78..         MOV     R0,#?V0
   \   000080   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000083   7416         MOV     A,#0x16
   \   000085   12....       LCALL   ?XSTACK_DISP100_8
   \   000088   88..         MOV     ?V0,R0
   \   00008A   89..         MOV     ?V1,R1
   \   00008C   78..         MOV     R0,#?V0
   \   00008E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000091   90....       MOV     DPTR,#ESP_8266_CMD + 2
   \   000094   E0           MOVX    A,@DPTR
   \   000095   FC           MOV     R4,A
   \   000096   A3           INC     DPTR
   \   000097   E0           MOVX    A,@DPTR
   \   000098   FD           MOV     R5,A
   \   000099   742C         MOV     A,#0x2c
   \   00009B   12....       LCALL   ?XSTACK_DISP101_8
   \   00009E   12....       LCALL   `??sprintf::?relay`  ; Banked call to: sprintf
   \   0000A1   7404         MOV     A,#0x4
   \   0000A3   12....       LCALL   ?DEALLOC_XSTACK8
    131            ESP8266_CMD_Send(cmd);
   \   0000A6                ; Setup parameters for call to function ESP8266_CMD_Send
   \   0000A6   7428         MOV     A,#0x28
   \   0000A8   12....       LCALL   ?XSTACK_DISP101_8
   \   0000AB   12....       LCALL   `??ESP8266_CMD_Send::?relay`; Banked call to: ESP8266_CMD_Send
    132            ESP8266_CMD_Send(ESP_8266_CMD.MultiConn);
   \   0000AE                ; Setup parameters for call to function ESP8266_CMD_Send
   \   0000AE   90....       MOV     DPTR,#ESP_8266_CMD + 4
   \   0000B1   12....       LCALL   ??Subroutine13_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   0000B4   12....       LCALL   `??ESP8266_CMD_Send::?relay`; Banked call to: ESP8266_CMD_Send
    133            ESP8266_CMD_Send(ESP_8266_CMD.ServerMode);
   \   0000B7                ; Setup parameters for call to function ESP8266_CMD_Send
   \   0000B7   90....       MOV     DPTR,#ESP_8266_CMD + 6
   \   0000BA   12....       LCALL   ??Subroutine13_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   0000BD   12....       LCALL   `??ESP8266_CMD_Send::?relay`; Banked call to: ESP8266_CMD_Send
    134          }  
   \   0000C0   7450         MOV     A,#0x50
   \   0000C2   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000C5   7F06         MOV     R7,#0x6
   \   0000C7   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for ESP_8266_CMD>`:
   \   000000   ....         DW `?<Constant "AT+CWMODE=%d\\r\\n">`
   \   000002   ....         DW `?<Constant "AT+CWJAP=\\"%s\\",\\"%s\\"\\r\\n">`
   \   000004   ....         DW `?<Constant "AT+CIPMUX=1\\r\\n">`
   \   000006   ....         DW `?<Constant "AT+CIPSERVER=1,8080\\r\\n">`
   \   000008   ....         DW `?<Constant "AT+CIPSEND=%d,%d\\r\\n">`

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ESP8266_Init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ESP8266_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ESP8266_Poll::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ESP8266_Poll

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ESP8266_Run::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ESP8266_Run

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ESP8266_CMD_Send::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ESP8266_CMD_Send

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ESP8266_Data_Send::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ESP8266_Data_Send

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ESP8266_Protocol_Send::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ESP8266_Protocol_Send

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SetSsidPwd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SetSsidPwd

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "AT+CWMODE=%d\\r\\n">`:
   \   000000   41542B43     DB "AT+CWMODE=%d\015\012"
   \            574D4F44
   \            453D2564
   \            0D0A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "AT+CWJAP=\\"%s\\",\\"%s\\"\\r\\n">`:
   \   000000   41542B43     DB "AT+CWJAP=\"%s\",\"%s\"\015\012"
   \            574A4150
   \            3D222573
   \            222C2225
   \            73220D0A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "AT+CIPMUX=1\\r\\n">`:
   \   000000   41542B43     DB "AT+CIPMUX=1\015\012"
   \            49504D55
   \            583D310D
   \            0A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "AT+CIPSERVER=1,8080\\r\\n">`:
   \   000000   41542B43     DB "AT+CIPSERVER=1,8080\015\012"
   \            49505345
   \            52564552
   \            3D312C38
   \            3038300D
   \            0A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "AT+CIPSEND=%d,%d\\r\\n">`:
   \   000000   41542B43     DB "AT+CIPSEND=%d,%d\015\012"
   \            49505345
   \            4E443D25
   \            642C2564
   \            0D0A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "ready">`:
   \   000000   72656164     DB "ready"
   \            7900    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "OK">`:
   \   000000   4F4B00       DB "OK"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\302\\267\\323\\311\\306\\367\\306\\364\\2`:
   \   000000   C2B7D3C9     DB "\302\267\323\311\306\367\306\364\266\257\315\352\263\311\015\012"
   \            C6F7C6F4
   \            B6AFCDEA
   \            B3C90D0A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "WIFI GOT IP">`:
   \   000000   57494649     DB "WIFI GOT IP"
   \            20474F54
   \            20495000

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\302\\267\\323\\311\\306\\367\\301\\254\\2`:
   \   000000   C2B7D3C9     DB "\302\267\323\311\306\367\301\254\275\323\263\311\271\246\015\012"
   \            C6F7C1AC
   \            BDD3B3C9
   \            B9A60D0A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "WIFI DISCONNECT">`:
   \   000000   57494649     DB "WIFI DISCONNECT"
   \            20444953
   \            434F4E4E
   \            45435400

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\302\\267\\323\\311\\306\\367\\301\\254\\2_1`:
   \   000000   C2B7D3C9     DB "\302\267\323\311\306\367\301\254\275\323\312\247\260\334\015\012"
   \            C6F7C1AC
   \            BDD3CAA7
   \            B0DC0D0A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "CONNECT">`:
   \   000000   434F4E4E     DB "CONNECT"
   \            45435400

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\326\\325\\266\\313\\301\\254\\275\\323\\r`:
   \   000000   D6D5B6CB     DB "\326\325\266\313\301\254\275\323\015\012"
   \            C1ACBDD3
   \            0D0A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "CLOSED">`:
   \   000000   434C4F53     DB "CLOSED"
   \            454400  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\326\\325\\266\\313\\315\\313\\263\\366\\r`:
   \   000000   D6D5B6CB     DB "\326\325\266\313\315\313\263\366\015\012"
   \            CDCBB3F6
   \            0D0A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "ERROR">`:
   \   000000   4552524F     DB "ERROR"
   \            5200    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "WIFI\\304\\243\\277\\351ERROR\\r\\n">`:
   \   000000   57494649     DB "WIFI\304\243\277\351ERROR\015\012"
   \            C4A3BFE9
   \            4552524F
   \            520D0A00

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "AT+CIPSERVER=0,8080\\r\\n">`:
   \   000000   41542B43     DB "AT+CIPSERVER=0,8080\015\012"
   \            49505345
   \            52564552
   \            3D302C38
   \            3038300D
   \            0A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\267\\242\\313\\315\\270\\370WIFI:%X %X`:
   \   000000   B7A2CBCD     DB "\267\242\313\315\270\370WIFI:%X %X %X %X %X %X %X %X %X \015\012"
   \            B8F85749
   \            46493A25
   \            58202558
   \            20255820
   \            25582025
   \            58202558
   \            20255820
   \            25582025
   \            58200D0A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0`:
   \   000000   00           DB 0
   \   000001   00           DB 0
   \   000002   00           DB 0
   \   000003   00           DB 0
   \   000004   00           DB 0
   \   000005   00           DB 0
   \   000006   00           DB 0
   \   000007   00           DB 0
   \   000008   00           DB 0
   \   000009   00           DB 0
   \   00000A   00           DB 0
   \   00000B   00           DB 0
   \   00000C   00           DB 0
   \   00000D   00           DB 0
   \   00000E   00           DB 0
   \   00000F   00           DB 0
   \   000010   00           DB 0
   \   000011   00           DB 0
   \   000012   00           DB 0
   \   000013   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_1`:
   \   000000   00           DB 0
   \   000001   00           DB 0
   \   000002   00           DB 0
   \   000003   00           DB 0
   \   000004   00           DB 0
   \   000005   00           DB 0
   \   000006   00           DB 0
   \   000007   00           DB 0
   \   000008   00           DB 0
   \   000009   00           DB 0
   \   00000A   00           DB 0
   \   00000B   00           DB 0
   \   00000C   00           DB 0
   \   00000D   00           DB 0
   \   00000E   00           DB 0
   \   00000F   00           DB 0
   \   000010   00           DB 0
   \   000011   00           DB 0
   \   000012   00           DB 0
   \   000013   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_2`:
   \   000000   00           DB 0
   \   000001   00           DB 0
   \   000002   00           DB 0
   \   000003   00           DB 0
   \   000004   00           DB 0
   \   000005   00           DB 0
   \   000006   00           DB 0
   \   000007   00           DB 0
   \   000008   00           DB 0
   \   000009   00           DB 0
   \   00000A   00           DB 0
   \   00000B   00           DB 0
   \   00000C   00           DB 0
   \   00000D   00           DB 0
   \   00000E   00           DB 0
   \   00000F   00           DB 0
   \   000010   00           DB 0
   \   000011   00           DB 0
   \   000012   00           DB 0
   \   000013   00           DB 0
   \   000014   00           DB 0
   \   000015   00           DB 0
   \   000016   00           DB 0
   \   000017   00           DB 0
   \   000018   00           DB 0
   \   000019   00           DB 0
   \   00001A   00           DB 0
   \   00001B   00           DB 0
   \   00001C   00           DB 0
   \   00001D   00           DB 0
   \   00001E   00           DB 0
   \   00001F   00           DB 0
   \   000020   00           DB 0
   \   000021   00           DB 0
   \   000022   00           DB 0
   \   000023   00           DB 0
   \   000024   00           DB 0
   \   000025   00           DB 0
   \   000026   00           DB 0
   \   000027   00           DB 0
    135            
    136            
    137          
    138          
    139            
    140            

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0    106   ESP8266_CMD_Send
        0     10   -> Queue_Put
        0     12   -> memcpy
        0     10   -> osal_mem_alloc
        0     10   -> strlen
      0     30   ESP8266_Data_Send
        0     12   -> Queue_Put
        0     14   -> memcpy
        0     12   -> osal_mem_alloc
        0     30   -> printf
        0     16   -> sprintf
        0     12   -> strlen
      2      0   ESP8266_Init
        2      0   -> Queue_Init
        2      0   -> osal_mem_alloc
      0     10   ESP8266_Poll
        0     10   -> strstr
      2      0   ESP8266_Protocol_Send
        2      0   -> Protocol_Send_Transpond
      2      0   ESP8266_Run
        2      0   -> ESP8266_CMD_Send
        2      0   -> HalUARTWrite
        2      0   -> Queue_Get
        2      0   -> osal_mem_free
      0     98   SetSsidPwd
        0     94   -> ESP8266_CMD_Send
        0     96   -> memcpy
        0     98   -> sprintf
        0     94   -> strlen


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      14  ?<Constant "AT+CIPMUX=1\r\n">
      19  ?<Constant "AT+CIPSEND=%d,%d\r\n">
      22  ?<Constant "AT+CIPSERVER=0,8080\r\n">
      22  ?<Constant "AT+CIPSERVER=1,8080\r\n">
      21  ?<Constant "AT+CWJAP=\"%s\",\"%s\"\r\n">
      15  ?<Constant "AT+CWMODE=%d\r\n">
       7  ?<Constant "CLOSED">
       8  ?<Constant "CONNECT">
       6  ?<Constant "ERROR">
       3  ?<Constant "OK">
      16  ?<Constant "WIFI DISCONNECT">
      12  ?<Constant "WIFI GOT IP">
      16  ?<Constant "WIFI\304\243\277\351ERROR\r\n">
      41  ?<Constant "\267\242\313\315\270\370WIFI:%X %X
      17  ?<Constant "\302\267\323\311\306\367\301\254\2
      17  ?<Constant "\302\267\323\311\306\367\301\254\2_1
      17  ?<Constant "\302\267\323\311\306\367\306\364\2
      11  ?<Constant "\326\325\266\313\301\254\275\323\r
      11  ?<Constant "\326\325\266\313\315\313\263\366\r
       6  ?<Constant "ready">
      20  ?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
      20  ?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_1
      40  ?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_2
      10  ?<Initializer for ESP_8266_CMD>
       4  ??Subroutine10_0
       6  ??Subroutine11_0
       6  ??Subroutine12_0
       6  ??Subroutine13_0
       7  ?Subroutine0
       5  ?Subroutine1
       7  ?Subroutine2
       6  ?Subroutine3
       6  ?Subroutine4
       4  ?Subroutine5
       3  ?Subroutine6
       3  ?Subroutine7
       9  ?Subroutine8
       9  ?Subroutine9
      69  ESP8266_CMD_Send
       6  ESP8266_CMD_Send::?relay
       5  ESP8266_CONN
       1  ESP8266_Conn_Flag
     289  ESP8266_Data_Send
       6  ESP8266_Data_Send::?relay
      36  ESP8266_Init
       6  ESP8266_Init::?relay
       2  ESP8266_Pack_Buff
       2  ESP8266_Pack_Queue
     306  ESP8266_Poll
       6  ESP8266_Poll::?relay
      37  ESP8266_Protocol_Send
       6  ESP8266_Protocol_Send::?relay
     114  ESP8266_Run
       6  ESP8266_Run::?relay
       1  ESP8266_Section
       1  ESP8266_State
      10  ESP_8266_CMD
       1  ESP_Change
     202  SetSsidPwd
       6  SetSsidPwd::?relay
       3  pack

 
 1 134 bytes in segment BANKED_CODE
    42 bytes in segment BANK_RELAYS
    10 bytes in segment XDATA_I
    10 bytes in segment XDATA_ID
   381 bytes in segment XDATA_ROM_C
    16 bytes in segment XDATA_Z
 
 1 186 bytes of CODE  memory
   381 bytes of CONST memory
    26 bytes of XDATA memory

Errors: none
Warnings: none
