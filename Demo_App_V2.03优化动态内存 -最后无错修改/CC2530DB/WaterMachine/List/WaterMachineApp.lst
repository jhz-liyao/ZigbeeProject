###############################################################################
#
# IAR C/C++ Compiler V9.30.1.3056 for 8051                31/Oct/2016  11:56:48
# Copyright 2004-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.03优化动态内存
#        -最后无错修改\Module\WaterMachine\WaterMachineApp.c
#    Command line       =  
#        -f "E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.03优化动态内存
#        -最后无错修改\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f
#        "E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.03优化动态内存
#        -最后无错修改\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=50 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
#        -DREJOIN_POLL_RATE=440 "E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.03优化动态内存
#        -最后无错修改\Module\WaterMachine\WaterMachineApp.c" -D HAL_UART=TRUE
#        -D HAL_UART_ISR=1 -D HAL_UART_DMA=0 -D LOG_OUT -D
#        UART1_PROTOCOL_RESOLVER=1 -D xISQC -D NWK_AUTO_POLL -D xZTOOL_P1 -D
#        ISR_KEYINTERRUPT -D xMT_TASK -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D
#        xLCD_SUPPORTED=DEBUG -D xPOWER_SAVING -lC
#        "E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.03优化动态内存
#        -最后无错修改\CC2530DB\WaterMachine\List" -lA
#        "E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.03优化动态内存
#        -最后无错修改\CC2530DB\WaterMachine\List" --diag_suppress Pe001,Pa010
#        -o "E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.03优化动态内存
#        -最后无错修改\CC2530DB\WaterMachine\Obj" -e --no_code_motion --debug
#        --core=plain --dptr=16,1 --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 8 -I "E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.03优化动态内存
#        -最后无错修改\CC2530DB\" -I "E:\资源\个人项目\ZigbeeProject\Z-Stack
#        Mesh 1.0.0\Projects\zstack\Samples\Demo_App_V2.03优化动态内存
#        -最后无错修改\CC2530DB\..\Source\" -I
#        "E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.03优化动态内存
#        -最后无错修改\CC2530DB\..\Frame\" -I
#        "E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.03优化动态内存
#        -最后无错修改\CC2530DB\..\Module\WaterMachine\" -I
#        "E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.03优化动态内存
#        -最后无错修改\CC2530DB\..\..\..\ZMain\TI2530DB\" -I
#        "E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.03优化动态内存
#        -最后无错修改\CC2530DB\..\..\..\..\..\Components\hal\include\" -I
#        "E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.03优化动态内存
#        -最后无错修改\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.03优化动态内存
#        -最后无错修改\CC2530DB\..\..\..\..\..\Components\mac\include\" -I
#        "E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.03优化动态内存
#        -最后无错修改\CC2530DB\..\..\..\..\..\Components\mac\high_level\" -I
#        "E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.03优化动态内存
#        -最后无错修改\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.03优化动态内存
#        -最后无错修改\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.03优化动态内存
#        -最后无错修改\CC2530DB\..\..\..\..\..\Components\mt\" -I
#        "E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.03优化动态内存
#        -最后无错修改\CC2530DB\..\..\..\..\..\Components\osal\include\" -I
#        "E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.03优化动态内存
#        -最后无错修改\CC2530DB\..\..\..\..\..\Components\services\saddr\" -I
#        "E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.03优化动态内存
#        -最后无错修改\CC2530DB\..\..\..\..\..\Components\services\sdata\" -I
#        "E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.03优化动态内存
#        -最后无错修改\CC2530DB\..\..\..\..\..\Components\stack\af\" -I
#        "E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.03优化动态内存
#        -最后无错修改\CC2530DB\..\..\..\..\..\Components\stack\nwk\" -I
#        "E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.03优化动态内存
#        -最后无错修改\CC2530DB\..\..\..\..\..\Components\stack\sapi\" -I
#        "E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.03优化动态内存
#        -最后无错修改\CC2530DB\..\..\..\..\..\Components\stack\sec\" -I
#        "E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.03优化动态内存
#        -最后无错修改\CC2530DB\..\..\..\..\..\Components\stack\sys\" -I
#        "E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.03优化动态内存
#        -最后无错修改\CC2530DB\..\..\..\..\..\Components\stack\zdo\" -I
#        "E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.03优化动态内存
#        -最后无错修改\CC2530DB\..\..\..\..\..\Components\zmac\" -I
#        "E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.03优化动态内存
#        -最后无错修改\CC2530DB\..\..\..\..\..\Components\zmac\f8w\" -Ohz
#    List file          =  
#        E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.03优化动态内存
#        -最后无错修改\CC2530DB\WaterMachine\List\WaterMachineApp.lst
#    Object file        =  
#        E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.03优化动态内存
#        -最后无错修改\CC2530DB\WaterMachine\Obj\WaterMachineApp.r51
#
###############################################################################

E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh 1.0.0\Projects\zstack\Samples\Demo_App_V2.03优化动态内存 -最后无错修改\Module\WaterMachine\WaterMachineApp.c
      1          #include "OSAL.h"
      2          #include "AF.h"
      3          #include "ZDApp.h"
      4          #include "ZDObject.h"
      5          #include "ZDProfile.h"
      6          
      7          #include "DemoApp.h"
      8          #include "DebugTrace.h"
      9          
     10          #if !defined( WIN32 ) || defined( ZBIT )
     11            #include "OnBoard.h"
     12          #endif
     13           
     14          /* HAL */
     15          #include "hal_led.h"
     16          #include "hal_key.h"
     17          #include "hal_uart.h" 
     18          #include "Tool.h"  
     19          #include "Protocol.h"
     20          #include "ProtocolFrame.h"
     21          #include "LOG.h"
     22          #include "ModuleManager.h"
     23          #include "WaterMachineDriver.h"
     24          
     25          #define APP_SEND_MSG_TIMEOUT   1000     
     26          #define HEARTBEAT_CHECK_TIMEOUT 3000
     27          #define HEARTBEAT_SEND_TIMEOUT  1000
     28          #define WATER_MACHINE_STATE_CHECK_TIMEOUT 100
     29          #define APP_SEND_MSG_EVT                     (BV(0))
     30          #define WATER_MACHINE_STATE_CHECK_EVT             (BV(1))
     31          #define HEARTBEAT_CHECK_EVT                       (BV(2))
     32          #define HEARTBEAT_SEND_EVT                       (BV(3))
     33          
     34          /*********************************************************************
     35           * GLOBAL VARIABLES
     36           */ 
     37          const cId_t App_ClusterList[APP_MAX_CLUSTERS] = { APP_CLUSTERID };//簇列表
     38          
     39          const SimpleDescriptionFormat_t App_SimpleDesc =       //简单描述符
     40          {
     41            APP_ENDPOINT,              //  int Endpoint;
     42            APP_PROFID,                //  uint16 AppProfId[2];
     43            APP_DEVICEID,              //  uint16 AppDeviceId[2];
     44            APP_DEVICE_VERSION,        //  int   AppDevVer:4;
     45            APP_FLAGS,                 //  int   AppFlags:4;
     46            APP_MAX_CLUSTERS,          //  byte  AppNumInClusters;
     47            (cId_t *)App_ClusterList,  //  byte *pAppInClusterList;
     48            APP_MAX_CLUSTERS,          //  byte  AppNumInClusters;
     49            (cId_t *)App_ClusterList   //  byte *pAppInClusterList;
     50          };
     51          
     52          endPointDesc_t App_epDesc; //端点描述符
     53          /*********************************************************************
     54           * 本地变量
     55           */
     56          byte App_TaskId; 
     57          devStates_t App_NwkState; 
     58          byte App_TransID; 
     59          afAddrType_t App_DstAddr; 
     60           
     61          PROTOCOL_T protocol = {0}; 
                 ^
Error[Pe020]: identifier "PROTOCOL_T" is undefined
     62          /*********************************************************************
     63           * LOCAL FUNCTIONS
     64           */
     65          static void App_ProcessZDOMsgs( zdoIncomingMsg_t *inMsg );
     66          static void App_HandleKeys( byte shift, byte keys );
     67          static void App_ReceiveHandle( afIncomingMSGPacket_t *pckt );
     68          static void App_SendHandle( void );
     69          
     70           
     71          void SendHandle(uint8_t* data, uint8_t len){
     72            
     73            App_DstAddr.addr.shortAddr = 0x00;
     74            //Protocol_Printf(data, len);
     75            if ( AF_DataRequest( &App_DstAddr, &App_epDesc,
     76                                 APP_CLUSTERID,
     77                                 len,
     78                                 (byte *)data,
     79                                 &App_TransID,
     80                                 AF_DISCV_ROUTE, AF_DEFAULT_RADIUS ) == afStatus_SUCCESS );
     81          }
     82          /****************************************************
     83          *      函数名: App_Init
     84          *        功能: 应用初始化
     85          *        参数: 应用层任务ID 
     86          ****************************************************/
     87          void App_Init( uint8 task_id ){
     88            
     89            App_TaskId = task_id;
     90            App_NwkState = DEV_INIT;
     91            App_TransID = 0; 
     92          
     93            App_DstAddr.addrMode = (afAddrMode_t)Addr16Bit;
     94            App_DstAddr.endPoint = APP_ENDPOINT;
     95            App_DstAddr.addr.shortAddr = 0;
     96           
     97            App_epDesc.endPoint = APP_ENDPOINT;
     98            App_epDesc.task_id = &App_TaskId;
     99            App_epDesc.simpleDesc = (SimpleDescriptionFormat_t *)&App_SimpleDesc;
    100            App_epDesc.latencyReq = noLatencyReqs;
    101           
    102            afRegister( &App_epDesc );
    103           
    104            RegisterForKeys( App_TaskId );
    105           
    106            Device_Info();
    107           
    108          
    109          //  ZDO_RegisterForZDOMsg( App_TaskId, End_Device_Bind_rsp );
    110          //  ZDO_RegisterForZDOMsg( App_TaskId, Match_Desc_req );
    111          //  ZDO_RegisterForZDOMsg( App_TaskId, Match_Desc_rsp );
    112           
    113            Log_Init();
    114            ProtocolFrame_Init();
    115            WaterMachine_Init();
    116            
    117            
    118          }
    119          
    120          
    121          /****************************************************
    122          *      函数名: App_GetTaskID
    123          *      功能: 获得APP层的ID
    124          ****************************************************/
    125          uint8* App_GetTaskID(){
    126              return (uint8*)&App_TaskId;
    127          }
    128          
    129          /****************************************************
    130          *      函数名: App_GetepDesc
    131          *      功能: 获得APP层的简单描述符
    132          ****************************************************/
    133          endPointDesc_t App_GetepDesc(){
    134              return App_epDesc;
    135          }
    136          
    137          
    138          /****************************************************
    139          *      函数名: App_HandleKeys
    140          *        功能: 按键事件处理函数
    141          ****************************************************/
    142          void App_HandleKeys( uint8 shift, uint8 keys )
    143          { 
    144            if ( shift ){
    145              if ( keys & HAL_KEY_SW_1 ) {}
    146              if ( keys & HAL_KEY_SW_2 ) {}
    147              if ( keys & HAL_KEY_SW_3 ) {}
    148              if ( keys & HAL_KEY_SW_4 ) {}
    149            }else{
    150              if ( keys & HAL_KEY_SW_1 ){ 
    151                printf("HAL_KEY_SW_1\r\n"); 
    152              }
    153          
    154              if ( keys & HAL_KEY_SW_2 ){
    155                printf("HAL_KEY_SW_2\r\n"); 
    156              } 
    157              if ( keys & HAL_KEY_SW_3 ){ } 
    158              if ( keys & HAL_KEY_SW_4 ){ }
    159            }
    160          }
    161          
    162          /****************************************************
    163          *      函数名: App_ReceiveHandle
    164          *        功能: 数据接收处理函数
    165          ****************************************************/ 
    166          static void App_ReceiveHandle( afIncomingMSGPacket_t *pkt )
    167          {
    168            switch ( pkt->clusterId ){
    169              case APP_CLUSTERID:  
    170                printf("收到数据:");
    171                Protocol_Printf(pkt->cmd.Data, pkt->cmd.DataLength);
    172                if(pkt->cmd.DataLength > 1)
    173                  UART1_Resolver->Protocol_Put(UART1_Resolver,pkt->cmd.Data, pkt->cmd.DataLength);
    174                HeartBeat_Set(COORDINATOR_MODULE);
    175                break;
    176            }
    177          }
    178          
    179          void SendHearBeat(void){
    180            static uint8_t cnt = 0;  
    181            PROTOCOL_T protocol = {0}; 
                   ^
Error[Pe020]: identifier "PROTOCOL_T" is undefined
    182            
    183            uint16 ShortAddr = NLME_GetShortAddr(); 
    184            protocol.Heartbeat_P.para1 = cnt++;
    185            protocol.Heartbeat_P.para2 = ShortAddr >> 8;
    186            protocol.Heartbeat_P.para3 = ShortAddr & 0xff;
    187            Protocol_Send(HEARTBEAT_PROTOCOL, &protocol, sizeof(protocol.Heartbeat_P));
    188          }
    189          
    190          /****************************************************
    191          *      函数名: App_SendHandle
    192          *        功能: 数据发送函数
    193          ****************************************************/ 
    194          static void App_SendHandle( void )
    195          {
    196            if(App_NwkState != DEV_END_DEVICE)
    197              return; 
    198            static uint8_t cnt = 0;  
    199            uint16 Short_Addr = NLME_GetShortAddr();
    200            protocol.Heartbeat_P.para1 = cnt++;
    201            protocol.Heartbeat_P.para2 = Short_Addr >> 8;
    202            protocol.Heartbeat_P.para3 = Short_Addr & 0xff;
    203            Protocol_Send(HEARTBEAT_PROTOCOL, &protocol, sizeof(protocol.Heartbeat_P));
    204            printf("本机地址：%X,%X\r\n",Short_Addr >> 8, Short_Addr & 0x00ff);
    205          //  if ( AF_DataRequest( &App_DstAddr, &App_epDesc, APP_CLUSTERID,
    206          //                       10, (byte *)&shortaddr,
    207          //                       &App_TransID, AF_ACK_REQUEST, AF_DEFAULT_RADIUS ) == afStatus_SUCCESS );
    208            
    209            
    210          //  Protocol_Send(HEARTBEAT_PROTOCOL, &protocol, sizeof(protocol.Heartbeat_P)); 
    211          //  Protocol_Send(STATE_PROTOCOL, &protocol, sizeof(protocol.State_P));
    212          //  Protocol_Send(ACK_PROTOCOL, &protocol, sizeof(protocol.Ack_P));  
    213              
    214          //  LED_Flag = ~LED_Flag;
    215          //  P1_0 = LED_Flag;
    216          //  P1_1 = LED_Flag;
    217          //  P1_4 = LED_Flag;
    218          //  //P0_4 = LED_Flag;
    219          //  P0_6 = LED_Flag;
    220            printf("温控输入:%d\r\n", P1_3); 
    221          }
    222          
    223          void BrodcastData(uint8* data,uint8 len){
    224            static uint8_t cnt = 0; 
    225            afAddrType_t Broadcast_DstAddr;  //地址描述符
    226            endPointDesc_t Broadcast_epDesc; //端点描述符 
    227            
    228            Broadcast_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
    229            Broadcast_DstAddr.endPoint = APP_ENDPOINT;
    230            Broadcast_DstAddr.addr.shortAddr = 0xFFFF;
    231           
    232            Broadcast_epDesc.endPoint = APP_ENDPOINT;
    233            Broadcast_epDesc.task_id = &App_TaskId;
    234            Broadcast_epDesc.simpleDesc = (SimpleDescriptionFormat_t *)&App_SimpleDesc;
    235            Broadcast_epDesc.latencyReq = noLatencyReqs;
    236            cnt++;
    237            if ( AF_DataRequest( &Broadcast_DstAddr, &Broadcast_epDesc, APP_CLUSTERID, len, (byte *)data, &App_TransID, AF_DISCV_ROUTE, AF_DEFAULT_RADIUS ) == afStatus_SUCCESS );
    238          
    239          }
    240           
    241          
    242          /****************************************************
    243          *      函数名: App_ProcessEvent
    244          *        功能: 应用初事件处理函数
    245          *        参数: 应用层任务ID， 事件源
    246          ****************************************************/
    247          uint16 App_ProcessEvent( uint8 task_id, uint16 events ){
    248            afIncomingMSGPacket_t *MSGpkt;
    249            afDataConfirm_t *afDataConfirm;
    250           
    251            if ( events & SYS_EVENT_MSG ){
    252              MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( App_TaskId );
    253              while ( MSGpkt ){
    254                switch ( MSGpkt->hdr.event )
    255                {
    256                  case ZDO_CB_MSG:
    257                    App_ProcessZDOMsgs( (zdoIncomingMsg_t *)MSGpkt );
    258                    break;
    259          
    260                  case KEY_CHANGE:
    261                    App_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
    262                    break;
    263          
    264                  case AF_DATA_CONFIRM_CMD:
    265                    afDataConfirm = (afDataConfirm_t *)MSGpkt;
    266          //          byte sentEP = afDataConfirm->endpoint; (void)sentEP;
    267          //          byte sentTransID = afDataConfirm->transID;(void)sentTransID;  
    268                    if ( afDataConfirm->hdr.status != ZSuccess ){
    269                      printf("发送失败\r\n");
    270                    }
    271                    break; 
    272                  case AF_INCOMING_MSG_CMD:
    273                    App_ReceiveHandle( MSGpkt );
    274                    break;
    275          
    276                  case ZDO_STATE_CHANGE:
    277                    App_NwkState = (devStates_t)(MSGpkt->hdr.status);
    278                    ZdoStateChange_printf(App_NwkState); 
    279                    if ( (App_NwkState == DEV_ZB_COORD) || (App_NwkState == DEV_ROUTER) || (App_NwkState == DEV_END_DEVICE) ){ 
    280                      //osal_start_timerEx( App_TaskId, APP_SEND_MSG_EVT, APP_SEND_MSG_TIMEOUT ); 
    281                      
    282                      osal_start_timerEx( App_TaskId, HEARTBEAT_SEND_EVT , HEARTBEAT_SEND_TIMEOUT ); //发送心跳
    283                      osal_start_timerEx( App_TaskId, HEARTBEAT_CHECK_EVT, HEARTBEAT_CHECK_TIMEOUT );//启动心跳检查 
    284                      osal_start_timerEx( App_TaskId, WATER_MACHINE_STATE_CHECK_EVT, 100 );
    285                    }
    286                    break; 
    287                  default:
    288                    break;
    289                } 
    290                osal_msg_deallocate( (uint8 *)MSGpkt ); 
    291                MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( App_TaskId );
    292              } 
    293              return (events ^ SYS_EVENT_MSG);
    294            }
    295            
    296            if ( events & APP_SEND_MSG_EVT ){ 
    297              App_SendHandle(); 
    298              osal_start_timerEx( App_TaskId, APP_SEND_MSG_EVT, APP_SEND_MSG_TIMEOUT ); 
    299              return (events ^ APP_SEND_MSG_EVT);
    300            }
    301            
    302            if( events & WATER_MACHINE_STATE_CHECK_EVT){
    303              State_Check();
    304              osal_start_timerEx( App_TaskId, WATER_MACHINE_STATE_CHECK_EVT, 100 );
    305              return (events ^ WATER_MACHINE_STATE_CHECK_EVT);
    306            }
    307            
    308            if ( events & HEARTBEAT_CHECK_EVT ){ 
    309              HeartBeat_Check(); 
    310              osal_start_timerEx( App_TaskId, HEARTBEAT_CHECK_EVT, HEARTBEAT_CHECK_TIMEOUT ); 
    311              return (events ^ HEARTBEAT_CHECK_EVT);
    312            }
    313            
    314            if ( events & HEARTBEAT_SEND_EVT ){ 
    315              SendHearBeat(); 
    316              osal_start_timerEx( App_TaskId, HEARTBEAT_SEND_EVT, HEARTBEAT_SEND_TIMEOUT ); 
    317              return (events ^ HEARTBEAT_SEND_EVT);
    318            }
    319            
    320            return 0;
    321          }
    322          
    323          /****************************************************
    324          *      函数名: App_ProcessZDOMsgs
    325          *        功能: ZDO设备对象层消息处理 
    326          ****************************************************/
    327          static void App_ProcessZDOMsgs( zdoIncomingMsg_t *inMsg ){
    328            switch ( inMsg->clusterID ){
    329              case End_Device_Bind_rsp:
    330                if ( ZDO_ParseBindRsp( inMsg ) == ZSuccess ){
    331                  // Light LED
    332                  HalLedSet( HAL_LED_4, HAL_LED_MODE_ON );
    333                }
    334                break;
    335          
    336              case Match_Desc_rsp:
    337                {
    338                  ZDO_ActiveEndpointRsp_t *pRsp = ZDO_ParseEPListRsp( inMsg );
    339                  if ( pRsp ){
    340                    if ( pRsp->status == ZSuccess && pRsp->cnt ){
    341                      App_DstAddr.addrMode = (afAddrMode_t)Addr16Bit;
    342                      App_DstAddr.addr.shortAddr = pRsp->nwkAddr; 
    343                      App_DstAddr.endPoint = pRsp->epList[0];
    344          
    345                      // Light LED
    346                      HalLedSet( HAL_LED_4, HAL_LED_MODE_ON );
    347                    }
    348                    printf("Match_Desc_rsp,addr:%X,%X\r\n", pRsp->nwkAddr >> 8, pRsp->nwkAddr & 0x00FF);
    349                    osal_mem_free( pRsp );
    350                  }
    351                }
    352                break;
    353              case Match_Desc_req:
    354                printf("Match_Desc_rsp\r\n");
    355                break;
    356            }
    357          }

Errors: 2
Warnings: none
