###############################################################################
#
# IAR C/C++ Compiler V9.30.1.3056 for 8051                20/Oct/2016  09:33:54
# Copyright 2004-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Components\stack\zdo\ZDObject.c
#    Command line       =  
#        -f "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.4饮水机控制 -
#        副本\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg" (-DCPU32MHZ
#        -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3 -DMAC_CFG_TX_MAX=6
#        -DMAC_CFG_RX_MAX=3) -f "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack
#        Mesh 1.0.0\Projects\zstack\Samples\Demo_App_V1.4饮水机控制 -
#        副本\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg" (-DZIGBEEPRO
#        -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=100 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
#        -DREJOIN_POLL_RATE=440 "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack
#        Mesh 1.0.0\Components\stack\zdo\ZDObject.c" -D LOG_OUT -D
#        UART1_PROTOCOL_RESOLVER=1 -D xISQC -D NWK_AUTO_POLL -D ZTOOL_P1 -D
#        ISR_KEYINTERRUPT -D xMT_TASK -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D
#        xLCD_SUPPORTED=DEBUG -D xPOWER_SAVING -lC
#        "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.4饮水机控制 -
#        副本\CC2530DB\WaterMachine\List" -lA
#        "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.4饮水机控制 -
#        副本\CC2530DB\WaterMachine\List" --diag_suppress Pe001,Pa010 -o
#        "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.4饮水机控制 -
#        副本\CC2530DB\WaterMachine\Obj" -e --no_code_motion --debug
#        --core=plain --dptr=16,1 --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 8 -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack
#        Mesh 1.0.0\Projects\zstack\Samples\Demo_App_V1.4饮水机控制 -
#        副本\CC2530DB\" -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.4饮水机控制 -
#        副本\CC2530DB\..\Source\" -I
#        "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.4饮水机控制 -
#        副本\CC2530DB\..\Frame\" -I
#        "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.4饮水机控制 -
#        副本\CC2530DB\..\Module\WaterMachine\" -I
#        "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.4饮水机控制 -
#        副本\CC2530DB\..\..\..\ZMain\TI2530DB\" -I
#        "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.4饮水机控制 -
#        副本\CC2530DB\..\..\..\..\..\Components\hal\include\" -I
#        "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.4饮水机控制 -
#        副本\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\" -I
#        "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.4饮水机控制 -
#        副本\CC2530DB\..\..\..\..\..\Components\mac\include\" -I
#        "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.4饮水机控制 -
#        副本\CC2530DB\..\..\..\..\..\Components\mac\high_level\" -I
#        "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.4饮水机控制 -
#        副本\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\" -I
#        "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.4饮水机控制 -
#        副本\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.4饮水机控制 -
#        副本\CC2530DB\..\..\..\..\..\Components\mt\" -I
#        "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.4饮水机控制 -
#        副本\CC2530DB\..\..\..\..\..\Components\osal\include\" -I
#        "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.4饮水机控制 -
#        副本\CC2530DB\..\..\..\..\..\Components\services\saddr\" -I
#        "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.4饮水机控制 -
#        副本\CC2530DB\..\..\..\..\..\Components\services\sdata\" -I
#        "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.4饮水机控制 -
#        副本\CC2530DB\..\..\..\..\..\Components\stack\af\" -I
#        "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.4饮水机控制 -
#        副本\CC2530DB\..\..\..\..\..\Components\stack\nwk\" -I
#        "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.4饮水机控制 -
#        副本\CC2530DB\..\..\..\..\..\Components\stack\sapi\" -I
#        "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.4饮水机控制 -
#        副本\CC2530DB\..\..\..\..\..\Components\stack\sec\" -I
#        "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.4饮水机控制 -
#        副本\CC2530DB\..\..\..\..\..\Components\stack\sys\" -I
#        "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.4饮水机控制 -
#        副本\CC2530DB\..\..\..\..\..\Components\stack\zdo\" -I
#        "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.4饮水机控制 -
#        副本\CC2530DB\..\..\..\..\..\Components\zmac\" -I
#        "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.4饮水机控制 -
#        副本\CC2530DB\..\..\..\..\..\Components\zmac\f8w\" -Ohz
#    List file          =  
#        E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.4饮水机控制 -
#        副本\CC2530DB\WaterMachine\List\ZDObject.lst
#    Object file        =  
#        E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.4饮水机控制 -
#        副本\CC2530DB\WaterMachine\Obj\ZDObject.r51
#
###############################################################################

E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh 1.0.0\Components\stack\zdo\ZDObject.c
      1          /**************************************************************************************************
      2            Filename:       ZDObject.c
      3            Revised:        $Date: 2014-08-04 18:42:36 -0700 (Mon, 04 Aug 2014) $
      4            Revision:       $Revision: 39656 $
      5          
      6            Description:    This is the Zigbee Device Object.
      7          
      8          
      9            Copyright 2004-2014 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License"). You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product. Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          #include "ZComDef.h"
     44          #include "OSAL.h"
     45          #include "OSAL_Nv.h"
     46          #include "rtg.h"
     47          #include "NLMEDE.h"
     48          #include "nwk_globals.h"
     49          #include "APS.h"
     50          #include "APSMEDE.h"
     51          #include "AssocList.h"
     52          #include "BindingTable.h"
     53          #include "AddrMgr.h"
     54          #include "AF.h"
     55          #include "ZDObject.h"
     56          #include "ZDProfile.h"
     57          #include "ZDConfig.h"
     58          #include "ZDSecMgr.h"
     59          #include "ZDApp.h"
     60          #include "nwk_util.h"   // NLME_IsAddressBroadcast()
     61          #include "ZGlobals.h"
     62          #if defined MT_ZDO_CB_FUNC
     63          #include "MT.h"
     64          #endif
     65          
     66          #if defined( LCD_SUPPORTED )
     67            #include "OnBoard.h"
     68          #endif
     69          
     70          /* HAL */
     71          #include "hal_lcd.h"
     72          
     73          /*********************************************************************
     74           * MACROS
     75           */
     76          
     77          /*********************************************************************
     78           * CONSTANTS
     79           */
     80          // NLME Stub Implementations
     81          #define ZDO_ProcessMgmtPermitJoinTimeout NLME_PermitJoiningTimeout
     82          
     83          /*********************************************************************
     84           * TYPEDEFS
     85           */
     86          #if defined ( REFLECTOR )
     87          typedef struct
     88          {
     89            byte SrcTransSeq;
     90            zAddrType_t SrcAddr;
     91            uint16 LocalCoordinator;
     92            byte epIntf;
     93            uint16 ProfileID;
     94            byte numInClusters;
     95            uint16 *inClusters;
     96            byte numOutClusters;
     97            uint16 *outClusters;
     98            byte SecurityUse;
     99            byte status;
    100          } ZDO_EDBind_t;
    101          #endif // defined ( REFLECTOR )
    102          
    103          enum
    104          {
    105            ZDMATCH_INIT,           // Initialized
    106            ZDMATCH_WAIT_REQ,       // Received first request, waiting for second
    107            ZDMATCH_SENDING_BINDS   // Received both requests, sending unbind/binds
    108          };
    109          
    110          enum
    111          {
    112            ZDMATCH_SENDING_NOT,
    113            ZDMATCH_SENDING_UNBIND,
    114            ZDMATCH_SENDING_BIND
    115          };
    116          
    117          /*********************************************************************
    118           * GLOBAL VARIABLES
    119           */
    120          
    121          /*********************************************************************
    122           * EXTERNAL VARIABLES
    123           */
    124          
    125          /*********************************************************************
    126           * EXTERNAL FUNCTIONS
    127           */
    128          
    129          /*********************************************************************
    130           * LOCAL VARIABLES
    131           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    132          static uint16 ZDOBuildBuf[26];  // temp area to build data without allocation
   \                     ZDOBuildBuf:
   \   000000                DS 52
   \   000034                REQUIRE __INIT_XDATA_Z
    133          
    134          #if defined ( REFLECTOR )

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    135          static ZDO_EDBind_t *ZDO_EDBind;     // Null when not used
   \                     ZDO_EDBind:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    136          #endif
    137          
    138          #if defined ( MANAGED_SCAN )
    139            uint32 managedScanNextChannel = 0;
    140            uint32 managedScanChannelMask = 0;
    141            uint8  managedScanTimesPerChannel = 0;
    142          #endif
    143          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    144          ZDMatchEndDeviceBind_t *matchED = (ZDMatchEndDeviceBind_t *)NULL;
   \                     matchED:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    145          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    146          uint32 apsChannelMask = 0;
   \                     apsChannelMask:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z
    147          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    148          int16 zdpExternalStateTaskID = -1;
   \                     zdpExternalStateTaskID:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for zdpExternalStateTaskID>`
   \   000002                REQUIRE __INIT_XDATA_I
    149          
    150          /*********************************************************************
    151           * LOCAL FUNCTIONS
    152           */
    153          static void ZDODeviceSetup( void );
    154          #if defined ( MANAGED_SCAN )
    155            static void ZDOManagedScan_Next( void );
    156          #endif
    157          #if defined ( REFLECTOR )
    158            static void ZDO_RemoveEndDeviceBind( void );
    159            static void ZDO_SendEDBindRsp( byte TransSeq, zAddrType_t *dstAddr, byte Status, byte secUse );
    160          #endif
    161          #if ( ZG_BUILD_COORDINATOR_TYPE )
    162            static byte ZDO_CompareClusterLists( byte numList1, uint16 *list1,
    163                                                 byte numList2, uint16 *list2, uint16 *pMatches );
    164            static void ZDO_RemoveMatchMemory( void );
    165            static uint8 ZDO_CopyMatchInfo( ZDEndDeviceBind_t *destReq, ZDEndDeviceBind_t *srcReq );
    166            static void ZDO_EndDeviceBindMatchTimeoutCB( void );
    167          #endif
    168          uint8 *ZDO_ConvertOTAClusters( uint8 cnt, uint8 *inBuf, uint16 *outList );
    169          static void zdoSendStateChangeMsg(uint8 state, uint8 taskId);
    170          
    171          /*********************************************************************
    172           * @fn          ZDO_Init
    173           *
    174           * @brief       ZDObject and ZDProfile initialization.
    175           *
    176           * @param       none
    177           *
    178           * @return      none
    179           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    180          void ZDO_Init( void )
   \                     ZDO_Init:
    181          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    182            // Initialize ZD items
    183            #if defined ( REFLECTOR )
    184            ZDO_EDBind = NULL;
   \   000004   90....       MOV     DPTR,#ZDO_EDBind
   \   000007   E4           CLR     A
   \   000008   F0           MOVX    @DPTR,A
   \   000009   A3           INC     DPTR
   \   00000A   F0           MOVX    @DPTR,A
    185            #endif
    186          
    187            // Initialize default ZDO_UseExtendedPANID to the APS one.
    188            osal_cpyExtAddr( ZDO_UseExtendedPANID, AIB_apsUseExtendedPANID );
   \   00000B                ; Setup parameters for call to function sAddrExtCpy
   \   00000B   7C..         MOV     R4,#AIB_apsUseExtendedPANID & 0xff
   \   00000D   7D..         MOV     R5,#(AIB_apsUseExtendedPANID >> 8) & 0xff
   \   00000F   7A..         MOV     R2,#ZDO_UseExtendedPANID & 0xff
   \   000011   7B..         MOV     R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
   \   000013   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
    189          
    190            // Setup the device - type of device to create.
    191            ZDODeviceSetup();
   \   000016                ; Setup parameters for call to function APS_ReflectorInit
   \   000016   12....       LCALL   `??APS_ReflectorInit::?relay`; Banked call to: APS_ReflectorInit
   \   000019                ; Setup parameters for call to function NLME_DeviceJoiningInit
   \   000019   12....       LCALL   `??NLME_DeviceJoiningInit::?relay`; Banked call to: NLME_DeviceJoiningInit
    192          }
   \   00001C                REQUIRE ?Subroutine0
   \   00001C                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    193          
    194          #if defined ( MANAGED_SCAN )
    195          /*********************************************************************
    196           * @fn      ZDOManagedScan_Next()
    197           *
    198           * @brief   Setup a managed scan.
    199           *
    200           * @param   none
    201           *
    202           * @return  none
    203           */
    204          static void ZDOManagedScan_Next( void )
    205          {
    206            // Is it the first time
    207            if ( managedScanNextChannel == 0 && managedScanTimesPerChannel == 0 )
    208            {
    209              // Setup the defaults
    210              managedScanNextChannel  = 1;
    211          
    212              while( managedScanNextChannel && (zgDefaultChannelList & managedScanNextChannel) == 0 )
    213                managedScanNextChannel <<= 1;
    214          
    215              managedScanChannelMask = managedScanNextChannel;
    216              managedScanTimesPerChannel = MANAGEDSCAN_TIMES_PRE_CHANNEL;
    217            }
    218            else
    219            {
    220              // Do we need to go to the next channel
    221              if ( managedScanTimesPerChannel == 0 )
    222              {
    223                // Find next active channel
    224                managedScanChannelMask  = managedScanNextChannel;
    225                managedScanTimesPerChannel = MANAGEDSCAN_TIMES_PRE_CHANNEL;
    226              }
    227              else
    228              {
    229                managedScanTimesPerChannel--;
    230          
    231                if ( managedScanTimesPerChannel == 0 )
    232                {
    233                  managedScanNextChannel  <<= 1;
    234                  while( managedScanNextChannel && (zgDefaultChannelList & managedScanNextChannel) == 0 )
    235                    managedScanNextChannel <<= 1;
    236          
    237                  if ( managedScanNextChannel == 0 )
    238                    zdoDiscCounter  = NUM_DISC_ATTEMPTS + 1; // Stop
    239                }
    240              }
    241            }
    242          }
    243          #endif // MANAGED_SCAN
    244          
    245          /*********************************************************************
    246           * @fn      ZDODeviceSetup()
    247           *
    248           * @brief   Call set functions depending on the type of device compiled.
    249           *
    250           * @param   none
    251           *
    252           * @return  none
    253           */
    254          static void ZDODeviceSetup( void )
    255          {
    256            if ( ZG_BUILD_COORDINATOR_TYPE )
    257            {
    258              NLME_CoordinatorInit();
    259            }
    260          
    261          #if defined ( REFLECTOR )
    262            APS_ReflectorInit();
    263          #endif
    264          
    265            if ( ZG_BUILD_JOINING_TYPE )
    266            {
    267              NLME_DeviceJoiningInit();
    268            }
    269          }
    270          
    271          /*********************************************************************
    272           * @fn          ZDO_StartDevice
    273           *
    274           * @brief       This function starts a device in a network.
    275           *
    276           * @param       logicalType     - Device type to start
    277           *              startMode       - indicates mode of device startup
    278           *              beaconOrder     - indicates time betwen beacons
    279           *              superframeOrder - indicates length of active superframe
    280           *
    281           * @return      none
    282           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    283          void ZDO_StartDevice( byte logicalType, devStartModes_t startMode, byte beaconOrder, byte superframeOrder )
   \                     ZDO_StartDevice:
    284          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 11
   \   000005   74F5         MOV     A,#-0xb
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FF           MOV     R7,A
   \   00000C   EA           MOV     A,R2
   \   00000D   FE           MOV     R6,A
    285            ZStatus_t ret;
    286          #if defined ( ZIGBEE_FREQ_AGILITY )
    287            static uint8 discRetries = 0;
    288          #endif
    289          #if defined ( ZIGBEE_COMMISSIONING )
    290            static uint8 scanCnt = 0;
    291          #endif
    292          
    293            ret = ZUnsupportedMode;
    294          
    295            if ( ZG_BUILD_COORDINATOR_TYPE && logicalType == NODETYPE_COORDINATOR )
    296            {
    297              if ( startMode == MODE_HARD )
    298              {
    299                devState = DEV_COORD_STARTING;
    300                ret = NLME_NetworkFormationRequest( zgConfigPANID, zgApsUseExtendedPANID, zgDefaultChannelList,
    301                                                    zgDefaultStartingScanDuration, beaconOrder,
    302                                                    superframeOrder, false );
    303              }
    304              else if ( startMode == MODE_RESUME )
    305              {
    306                // Just start the coordinator
    307                devState = DEV_COORD_STARTING;
    308                ret = NLME_StartRouterRequest( beaconOrder, beaconOrder, false );
    309              }
    310              else
    311              {
    312          #if defined( LCD_SUPPORTED )
    313                HalLcdWriteScreen( "StartDevice ERR", "MODE unknown" );
    314          #endif
    315              }
    316            }
    317          
    318            if ( ZG_BUILD_JOINING_TYPE && (logicalType == NODETYPE_ROUTER || logicalType == NODETYPE_DEVICE) )
   \   00000E   7401         MOV     A,#0x1
   \   000010   6F           XRL     A,R7
   \   000011   6008         JZ      ??ZDO_StartDevice_0
   \   000013   7402         MOV     A,#0x2
   \   000015   6F           XRL     A,R7
   \   000016   6003         JZ      $+5
   \   000018   02....       LJMP    ??ZDO_StartDevice_1 & 0xFFFF
    319            {
    320              if ( (startMode == MODE_JOIN) || (startMode == MODE_REJOIN) )
   \                     ??ZDO_StartDevice_0:
   \   00001B   EE           MOV     A,R6
   \   00001C   6005         JZ      ??ZDO_StartDevice_2
   \   00001E   7403         MOV     A,#0x3
   \   000020   6E           XRL     A,R6
   \   000021   7037         JNZ     ??ZDO_StartDevice_3
    321              {
    322                devState = DEV_NWK_DISC;
   \                     ??ZDO_StartDevice_2:
   \   000023   90....       MOV     DPTR,#devState
   \   000026   7402         MOV     A,#0x2
   \   000028   12....       LCALL   ?Subroutine43 & 0xFFFF
    323          
    324            #if defined( MANAGED_SCAN )
    325                ZDOManagedScan_Next();
    326                ret = NLME_NetworkDiscoveryRequest( managedScanChannelMask, BEACON_ORDER_15_MSEC );
    327            #else
    328                ret = NLME_NetworkDiscoveryRequest( zgDefaultChannelList, zgDefaultStartingScanDuration );
   \                     ??CrossCallReturnLabel_69:
   \   00002B   12....       LCALL   ?XLOAD_R2345
   \   00002E   12....       LCALL   `??NLME_NetworkDiscoveryRequest::?relay`; Banked call to: NLME_NetworkDiscoveryRequest
   \   000031   E9           MOV     A,R1
   \   000032   F9           MOV     R1,A
    329              #if defined ( ZIGBEE_FREQ_AGILITY )
    330                if ( !( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE ) &&
    331                      ( ret == ZSuccess ) && ( ++discRetries == 4 ) )
    332                {
    333                  // For devices with RxOnWhenIdle equals to FALSE, any network channel
    334                  // change will not be recieved. On these devices or routers that have
    335                  // lost the network, an active scan shall be conducted on the Default
    336                  // Channel list using the extended PANID to find the network. If the
    337                  // extended PANID isn't found using the Default Channel list, an scan
    338                  // should be completed using all channels.
    339                  zgDefaultChannelList = MAX_CHANNELS_24GHZ;
    340                }
    341              #endif // ZIGBEE_FREQ_AGILITY
    342              #if defined ( ZIGBEE_COMMISSIONING )
    343                if (startMode == MODE_REJOIN && scanCnt++ >= 5 )
   \   000033   7403         MOV     A,#0x3
   \   000035   6E           XRL     A,R6
   \   000036   706A         JNZ     ??ZDO_StartDevice_4
   \   000038   90....       MOV     DPTR,#??scanCnt
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   F8           MOV     R0,A
   \   00003D   7401         MOV     A,#0x1
   \   00003F   28           ADD     A,R0
   \   000040   F0           MOVX    @DPTR,A
   \   000041   E8           MOV     A,R0
   \   000042   C3           CLR     C
   \   000043   9405         SUBB    A,#0x5
   \   000045   405B         JC      ??ZDO_StartDevice_4
    344                {
    345                  // When ApsUseExtendedPanID is commissioned to a non zero value via
    346                  // application specific means, the device shall conduct an active scan
    347                  // on the Default Channel list and join the PAN with the same
    348                  // ExtendedPanID. If the PAN is not found, an scan should be completed
    349                  // on all channels.
    350                  // When devices rejoin the network and the PAN is not found from
    351                  zgDefaultChannelList = MAX_CHANNELS_24GHZ;
   \   000047   90....       MOV     DPTR,#zgDefaultChannelList
   \   00004A   E4           CLR     A
   \   00004B   F0           MOVX    @DPTR,A
   \   00004C   A3           INC     DPTR
   \   00004D   74F8         MOV     A,#-0x8
   \   00004F   F0           MOVX    @DPTR,A
   \   000050   A3           INC     DPTR
   \   000051   74FF         MOV     A,#-0x1
   \   000053   F0           MOVX    @DPTR,A
   \   000054   A3           INC     DPTR
   \   000055   7407         MOV     A,#0x7
   \   000057   F0           MOVX    @DPTR,A
   \   000058   8048         SJMP    ??ZDO_StartDevice_4
    352                }
    353              #endif // ZIGBEE_COMMISSIONING
    354            #endif
    355              }
    356              else if ( startMode == MODE_RESUME )
   \                     ??ZDO_StartDevice_3:
   \   00005A   7401         MOV     A,#0x1
   \   00005C   6E           XRL     A,R6
   \   00005D   7046         JNZ     ??ZDO_StartDevice_1
    357              {
    358                if ( logicalType == NODETYPE_ROUTER )
   \   00005F   7401         MOV     A,#0x1
   \   000061   6F           XRL     A,R7
   \   000062   90....       MOV     DPTR,#devState
   \   000065   702E         JNZ     ??ZDO_StartDevice_5
    359                {
    360                  ZMacScanCnf_t scanCnf;
    361                  devState = DEV_NWK_ORPHAN;
   \   000067   740A         MOV     A,#0xa
   \   000069   F0           MOVX    @DPTR,A
    362          
    363                  /* if router and nvram is available, fake successful orphan scan */
    364                  scanCnf.hdr.Status = ZSUCCESS;
   \   00006A   7401         MOV     A,#0x1
   \   00006C   12....       LCALL   ?XSTACK_DISP0_8
   \   00006F   E4           CLR     A
   \   000070   F0           MOVX    @DPTR,A
    365                  scanCnf.ScanType = ZMAC_ORPHAN_SCAN;
   \   000071   7402         MOV     A,#0x2
   \   000073   12....       LCALL   ?XSTACK_DISP0_8
   \   000076   7403         MOV     A,#0x3
   \   000078   F0           MOVX    @DPTR,A
    366                  scanCnf.UnscannedChannels = 0;
   \   000079   04           INC     A
   \   00007A   12....       LCALL   ?XSTACK_DISP0_8
   \   00007D   E4           CLR     A
   \   00007E   F0           MOVX    @DPTR,A
   \   00007F   A3           INC     DPTR
   \   000080   F0           MOVX    @DPTR,A
   \   000081   A3           INC     DPTR
   \   000082   F0           MOVX    @DPTR,A
   \   000083   A3           INC     DPTR
   \   000084   F0           MOVX    @DPTR,A
    367                  scanCnf.ResultListSize = 0;
   \   000085   7408         MOV     A,#0x8
   \   000087   12....       LCALL   ?XSTACK_DISP0_8
   \   00008A   E4           CLR     A
   \   00008B   F0           MOVX    @DPTR,A
    368                  nwk_ScanJoiningOrphan(&scanCnf);
   \   00008C                ; Setup parameters for call to function nwk_ScanJoiningOrphan
   \   00008C   AA..         MOV     R2,?XSP + 0
   \   00008E   AB..         MOV     R3,?XSP + 1
   \   000090   12....       LCALL   `??nwk_ScanJoiningOrphan::?relay`; Banked call to: nwk_ScanJoiningOrphan
    369          
    370                  ret = ZSuccess;
   \   000093   8027         SJMP    ??ZDO_StartDevice_6
    371                }
    372                else
    373                {
    374                  devState = DEV_NWK_ORPHAN;
   \                     ??ZDO_StartDevice_5:
   \   000095   740A         MOV     A,#0xa
   \   000097   12....       LCALL   ?Subroutine43 & 0xFFFF
    375                  ret = NLME_OrphanJoinRequest( zgDefaultChannelList,
    376                                                zgDefaultStartingScanDuration );
    377                }
    378              }
    379              else
    380              {
    381          #if defined( LCD_SUPPORTED )
    382                HalLcdWriteScreen( "StartDevice ERR", "MODE unknown" );
    383          #endif
    384              }
    385            }
   \                     ??CrossCallReturnLabel_70:
   \   00009A   12....       LCALL   ?XLOAD_R2345
   \   00009D   12....       LCALL   `??NLME_OrphanJoinRequest::?relay`; Banked call to: NLME_OrphanJoinRequest
   \   0000A0   E9           MOV     A,R1
   \   0000A1   F9           MOV     R1,A
    386          
    387            if ( ret != ZSuccess )
   \                     ??ZDO_StartDevice_4:
   \   0000A2   E9           MOV     A,R1
   \   0000A3   6017         JZ      ??ZDO_StartDevice_6
    388            {
    389              osal_start_timerEx(ZDAppTaskID, ZDO_NETWORK_INIT, NWK_RETRY_DELAY );
   \                     ??ZDO_StartDevice_1:
   \   0000A5                ; Setup parameters for call to function osal_start_timerEx
   \   0000A5   90....       MOV     DPTR,#__Constant_3e8
   \   0000A8   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   0000AB   7A01         MOV     R2,#0x1
   \   0000AD   7B00         MOV     R3,#0x0
   \   0000AF   90....       MOV     DPTR,#ZDAppTaskID
   \   0000B2   E0           MOVX    A,@DPTR
   \   0000B3   F9           MOV     R1,A
   \   0000B4   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   0000B7   7404         MOV     A,#0x4
   \   0000B9   12....       LCALL   ?DEALLOC_XSTACK8
    390            }
    391          }
   \                     ??ZDO_StartDevice_6:
   \   0000BC   740B         MOV     A,#0xb
   \   0000BE   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000C1   02....       LJMP    ?Subroutine1 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine43:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function NLME_NetworkDiscoveryRequest
   \   000001                ; Setup parameters for call to function NLME_OrphanJoinRequest
   \   000001   90....       MOV     DPTR,#zgDefaultStartingScanDuration
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F9           MOV     R1,A
   \   000006   90....       MOV     DPTR,#zgDefaultChannelList
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??scanCnt:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    392          
    393          /**************************************************************************************************
    394           * @fn          zdoSendStateChangeMsg
    395           *
    396           * @brief       Helper function for ZDO_UpdateNwkStatus.
    397           *
    398           * input parameters
    399           *
    400           * @param       taskId - The OSAL task identifier to which to send the ZDO_STATE_CHANGE_EVT.
    401           * @param       state - The current device state.
    402           *
    403           * output parameters
    404           *
    405           * None.
    406           *
    407           * @return      None.
    408           **************************************************************************************************
    409           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    410          static void zdoSendStateChangeMsg(uint8 state, uint8 taskId)
   \                     zdoSendStateChangeMsg:
    411          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FF           MOV     R7,A
   \   000007   EA           MOV     A,R2
   \   000008   FE           MOV     R6,A
    412            osal_event_hdr_t *pMsg = (osal_event_hdr_t *)osal_msg_find(taskId, ZDO_STATE_CHANGE);
   \   000009                ; Setup parameters for call to function osal_msg_find
   \   000009   7AD1         MOV     R2,#-0x2f
   \   00000B   F9           MOV     R1,A
   \   00000C   12....       LCALL   `??osal_msg_find::?relay`; Banked call to: osal_msg_find
   \   00000F   8A82         MOV     DPL,R2
   \   000011   8B83         MOV     DPH,R3
    413          
    414            if (NULL == pMsg)
   \   000013   E582         MOV     A,DPL
   \   000015   4583         ORL     A,DPH
   \   000017   702A         JNZ     ??zdoSendStateChangeMsg_0
    415            {
    416              if (NULL == (pMsg = (osal_event_hdr_t *)osal_msg_allocate(sizeof(osal_event_hdr_t))))
   \   000019                ; Setup parameters for call to function osal_msg_allocate
   \   000019   7A02         MOV     R2,#0x2
   \   00001B   7B00         MOV     R3,#0x0
   \   00001D   12....       LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   000020   EA           MOV     A,R2
   \   000021   4B           ORL     A,R3
   \   000022   700E         JNZ     ??zdoSendStateChangeMsg_1
    417              {
    418                // Upon failure to notify any EndPoint of the state change, re-set the ZDO event to
    419                // try again later when more Heap may be available.
    420                osal_set_event(ZDAppTaskID, ZDO_STATE_CHANGE_EVT);
   \   000024                ; Setup parameters for call to function osal_set_event
   \   000024   7A10         MOV     R2,#0x10
   \   000026   7B00         MOV     R3,#0x0
   \   000028   90....       MOV     DPTR,#ZDAppTaskID
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   F9           MOV     R1,A
   \   00002D   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   000030   8014         SJMP    ??zdoSendStateChangeMsg_2
    421              }
    422              else
    423              {
    424                pMsg->event = ZDO_STATE_CHANGE;
   \                     ??zdoSendStateChangeMsg_1:
   \   000032   8A82         MOV     DPL,R2
   \   000034   8B83         MOV     DPH,R3
   \   000036   74D1         MOV     A,#-0x2f
   \   000038   F0           MOVX    @DPTR,A
    425                pMsg->status = state;
   \   000039   EF           MOV     A,R7
   \   00003A   A3           INC     DPTR
   \   00003B   F0           MOVX    @DPTR,A
    426          
    427                (void)osal_msg_send(taskId, (uint8 *)pMsg);
   \   00003C                ; Setup parameters for call to function osal_msg_send
   \   00003C   EE           MOV     A,R6
   \   00003D   F9           MOV     R1,A
   \   00003E   12....       LCALL   `??osal_msg_send::?relay`; Banked call to: osal_msg_send
   \   000041   8003         SJMP    ??zdoSendStateChangeMsg_2
    428              }
    429            }
    430            else
    431            {
    432              // Modify in place the status of an existing ZDO_STATE_CHANGE message to the EndPoint.
    433              pMsg->status = state;
   \                     ??zdoSendStateChangeMsg_0:
   \   000043   EF           MOV     A,R7
   \   000044   A3           INC     DPTR
   \   000045   F0           MOVX    @DPTR,A
    434            }
    435          }
   \                     ??zdoSendStateChangeMsg_2:
   \   000046   02....       LJMP    ??Subroutine187_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine187_0:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    436          
    437          /**************************************************************************************************
    438           * @fn          ZDO_UpdateNwkStatus
    439           *
    440           * @brief       This function sends a ZDO_STATE_CHANGE message to the task of every EndPoint
    441           *              registered with AF (except, of course, the ZDO_EP). Even if a single task has more
    442           *              than one registered EndPoint, it will only receive one notification per state
    443           *              change. Although the device may go through a sequence of state changes, the
    444           *              Application task may only receive notification of the final, steady-state state
    445           *              because it has the lowest priority and never even runs to receive the intermediate
    446           *              state change notifications.
    447           *
    448           * input parameters
    449           *
    450           * @param       state - The current device state.
    451           *
    452           * output parameters
    453           *
    454           * None.
    455           *
    456           * @return      None.
    457           **************************************************************************************************
    458           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    459          void ZDO_UpdateNwkStatus(devStates_t state)
   \                     ZDO_UpdateNwkStatus:
    460          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0,R1
    461            epList_t *pItem = epList;
   \   000007   90....       MOV     DPTR,#epList
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   FE           MOV     R6,A
   \   00000C   A3           INC     DPTR
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   8025         SJMP    ??ZDO_UpdateNwkStatus_0
    462          
    463          #if defined MT_ZDO_CB_FUNC
    464            if ( zdpExternalStateTaskID == -1 )
    465            {
    466              zdpExternalStateTaskID = MT_TaskID;
    467            }
    468          #endif
    469          
    470            while (pItem != NULL)
    471            {
    472              if (pItem->epDesc->endPoint != ZDO_EP)
   \                     ??ZDO_UpdateNwkStatus_1:
   \   000010   8E82         MOV     DPL,R6
   \   000012   8F83         MOV     DPH,R7
   \   000014   12....       LCALL   ??Subroutine206_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_404:
   \   000017   6012         JZ      ??ZDO_UpdateNwkStatus_2
    473              {
    474                zdoSendStateChangeMsg(state, *(pItem->epDesc->task_id));
   \   000019                ; Setup parameters for call to function zdoSendStateChangeMsg
   \   000019   8E82         MOV     DPL,R6
   \   00001B   8F83         MOV     DPH,R7
   \   00001D   A3           INC     DPTR
   \   00001E   A3           INC     DPTR
   \   00001F   12....       LCALL   ?Subroutine87 & 0xFFFF
    475              }
   \                     ??CrossCallReturnLabel_150:
   \   000022   12....       LCALL   ??Subroutine207_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_402:
   \   000025   FA           MOV     R2,A
   \   000026   A9..         MOV     R1,?V0
   \   000028   12....       LCALL   `??zdoSendStateChangeMsg::?relay`; Banked call to: zdoSendStateChangeMsg
    476          
    477              pItem = pItem->nextDesc;
   \                     ??ZDO_UpdateNwkStatus_2:
   \   00002B   8E82         MOV     DPL,R6
   \   00002D   8F83         MOV     DPH,R7
   \   00002F   12....       LCALL   ??Subroutine201_0 & 0xFFFF
    478            }
   \                     ??CrossCallReturnLabel_359:
   \   000032   E8           MOV     A,R0
   \   000033   FE           MOV     R6,A
   \   000034   E9           MOV     A,R1
   \                     ??ZDO_UpdateNwkStatus_0:
   \   000035   FF           MOV     R7,A
   \   000036   EE           MOV     A,R6
   \   000037   4F           ORL     A,R7
   \   000038   70D6         JNZ     ??ZDO_UpdateNwkStatus_1
    479            
    480            if ( zdpExternalStateTaskID != -1 )
   \   00003A   90....       MOV     DPTR,#zdpExternalStateTaskID
   \   00003D   E0           MOVX    A,@DPTR
   \   00003E   F4           CPL     A
   \   00003F   7003         JNZ     ??ZDO_UpdateNwkStatus_3
   \   000041   A3           INC     DPTR
   \   000042   E0           MOVX    A,@DPTR
   \   000043   F4           CPL     A
   \                     ??ZDO_UpdateNwkStatus_3:
   \   000044   600A         JZ      ??ZDO_UpdateNwkStatus_4
    481            {  
    482              zdoSendStateChangeMsg( state, zdpExternalStateTaskID );
   \   000046                ; Setup parameters for call to function zdoSendStateChangeMsg
   \   000046   90....       MOV     DPTR,#zdpExternalStateTaskID
   \   000049   E0           MOVX    A,@DPTR
   \   00004A   FA           MOV     R2,A
   \   00004B   A9..         MOV     R1,?V0
   \   00004D   12....       LCALL   `??zdoSendStateChangeMsg::?relay`; Banked call to: zdoSendStateChangeMsg
    483            }
    484            
    485            ZDAppNwkAddr.addr.shortAddr = NLME_GetShortAddr();
   \                     ??ZDO_UpdateNwkStatus_4:
   \   000050                ; Setup parameters for call to function NLME_GetShortAddr
   \   000050   12....       LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   000053   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000056   12....       LCALL   ?Subroutine22 & 0xFFFF
    486            (void)NLME_GetExtAddr();  // Load the saveExtAddr pointer.
   \                     ??CrossCallReturnLabel_327:
   \   000059                ; Setup parameters for call to function NLME_GetExtAddr
   \   000059   12....       LCALL   `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
    487          }
   \   00005C   02....       LJMP    ?Subroutine1 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine87:
   \   000000   12....       LCALL   ??Subroutine210_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_409:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   EA           MOV     A,R2
   \   000001                REQUIRE ??Subroutine193_0
   \   000001                ; // Fall through to label ??Subroutine193_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine193_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   EB           MOV     A,R3
   \   000003   F0           MOVX    @DPTR,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine201_0:
   \   000000   12....       LCALL   ?Subroutine148 & 0xFFFF
   \                     ??CrossCallReturnLabel_560:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine206_0:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine207_0
   \   000001                ; // Fall through to label ??Subroutine207_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine207_0:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine208_0
   \   000001                ; // Fall through to label ??Subroutine208_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine208_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001                REQUIRE ??Subroutine209_0
   \   000001                ; // Fall through to label ??Subroutine209_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine209_0:
   \   000000   12....       LCALL   ?Subroutine151 & 0xFFFF
   \                     ??CrossCallReturnLabel_411:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine151:
   \   000000   F8           MOV     R0,A
   \   000001                REQUIRE ??Subroutine210_0
   \   000001                ; // Fall through to label ??Subroutine210_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine210_0:
   \   000000   A3           INC     DPTR
   \   000001   E0           MOVX    A,@DPTR
   \   000002   F583         MOV     DPH,A
   \   000004   8882         MOV     DPL,R0
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine148:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   22           RET
    488          
    489          #if defined ( REFLECTOR )
    490          /*********************************************************************
    491           * @fn          ZDO_RemoveEndDeviceBind
    492           *
    493           * @brief       Remove the end device bind
    494           *
    495           * @param  none
    496           *
    497           * @return      none
    498           */
    499          static void ZDO_RemoveEndDeviceBind( void )
    500          {
    501            if ( ZDO_EDBind != NULL )
    502            {
    503              // Free the RAM
    504              if ( ZDO_EDBind->inClusters != NULL )
    505              {
    506                osal_mem_free( ZDO_EDBind->inClusters );
    507              }
    508              if ( ZDO_EDBind->outClusters != NULL )
    509              {
    510                osal_mem_free( ZDO_EDBind->outClusters );
    511              }
    512              osal_mem_free( ZDO_EDBind );
    513              ZDO_EDBind = NULL;
    514            }
    515          }
    516          #endif // REFLECTOR
    517          
    518          #if defined ( REFLECTOR )
    519          /*********************************************************************
    520           * @fn          ZDO_RemoveEndDeviceBind
    521           *
    522           * @brief       Remove the end device bind
    523           *
    524           * @param  none
    525           *
    526           * @return      none
    527           */
    528          static void ZDO_SendEDBindRsp( byte TransSeq, zAddrType_t *dstAddr, byte Status, byte secUse )
    529          {
    530            ZDP_EndDeviceBindRsp( TransSeq, dstAddr, Status, secUse );
    531          
    532          #if defined( LCD_SUPPORTED )
    533            HalLcdWriteString( "End Device Bind", HAL_LCD_LINE_1 );
    534            if ( Status == ZDP_SUCCESS )
    535            {
    536              HalLcdWriteString( "Success Sent", HAL_LCD_LINE_2 );
    537            }
    538            else
    539            {
    540              HalLcdWriteString( "Timeout", HAL_LCD_LINE_2 );
    541            }
    542          #endif
    543          
    544          }
    545          #endif // REFLECTOR
    546          
    547          #if ( ZG_BUILD_COORDINATOR_TYPE )
    548          /*********************************************************************
    549           * @fn          ZDO_CompareClusterLists
    550           *
    551           * @brief       Compare one list to another list
    552           *
    553           * @param       numList1 - number of items in list 1
    554           * @param       list1 - first list of cluster IDs
    555           * @param       numList2 - number of items in list 2
    556           * @param       list2 - second list of cluster IDs
    557           * @param       pMatches - buffer to put matches
    558           *
    559           * @return      number of matches
    560           */
    561          static byte ZDO_CompareClusterLists( byte numList1, uint16 *list1,
    562                                    byte numList2, uint16 *list2, uint16 *pMatches )
    563          {
    564            byte x, y;
    565            uint16 z;
    566            byte numMatches = 0;
    567          
    568            // Check the first in against the seconds out
    569            for ( x = 0; x < numList1; x++ )
    570            {
    571              for ( y = 0; y < numList2; y++ )
    572              {
    573                z = list2[y];
    574                if ( list1[x] == z )
    575                {
    576                  pMatches[numMatches++] = z;
    577                }
    578              }
    579            }
    580          
    581            return ( numMatches );
    582          }
    583          #endif // ZG_BUILD_COORDINATOR_TYPE
    584          
    585          /*********************************************************************
    586           * Utility functions
    587           */
    588          
    589          /*********************************************************************
    590           * @fn          ZDO_CompareByteLists
    591           *
    592           * @brief       Compares two lists for matches.
    593           *
    594           * @param       ACnt  - number of entries in list A
    595           * @param       AList  - List A
    596           * @param       BCnt  - number of entries in list B
    597           * @param       BList  - List B
    598           *
    599           * @return      true if a match is found
    600           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    601          byte ZDO_AnyClusterMatches( byte ACnt, uint16 *AList, byte BCnt, uint16 *BList )
   \                     ZDO_AnyClusterMatches:
    602          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   \   000007   8C..         MOV     ?V2,R4
    603            byte x, y;
    604          
    605            for ( x = 0; x < ACnt; x++ )
   \   000009   7F00         MOV     R7,#0x0
   \   00000B   740C         MOV     A,#0xc
   \   00000D   12....       LCALL   ?XSTACK_DISP0_8
   \   000010   12....       LCALL   ??Subroutine201_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_360:
   \   000013   E8           MOV     A,R0
   \   000014   FC           MOV     R4,A
   \   000015   E9           MOV     A,R1
   \   000016   FD           MOV     R5,A
   \   000017   8001         SJMP    ??ZDO_AnyClusterMatches_0
   \                     ??ZDO_AnyClusterMatches_1:
   \   000019   0F           INC     R7
   \                     ??ZDO_AnyClusterMatches_0:
   \   00001A   EF           MOV     A,R7
   \   00001B   C3           CLR     C
   \   00001C   9E           SUBB    A,R6
   \   00001D   503B         JNC     ??ZDO_AnyClusterMatches_2
    606            {
    607              for ( y = 0; y < BCnt; y++ )
   \   00001F   75..00       MOV     ?V3,#0x0
   \   000022   8002         SJMP    ??ZDO_AnyClusterMatches_3
   \                     ??ZDO_AnyClusterMatches_4:
   \   000024   05..         INC     ?V3
   \                     ??ZDO_AnyClusterMatches_3:
   \   000026   E5..         MOV     A,?V3
   \   000028   C3           CLR     C
   \   000029   95..         SUBB    A,?V2
   \   00002B   50EC         JNC     ??ZDO_AnyClusterMatches_1
    608              {
    609                if ( AList[x] == BList[y] )
   \   00002D   12....       LCALL   ?Subroutine96 & 0xFFFF
   \                     ??CrossCallReturnLabel_309:
   \   000030   EA           MOV     A,R2
   \   000031   28           ADD     A,R0
   \   000032   F582         MOV     DPL,A
   \   000034   EB           MOV     A,R3
   \   000035   39           ADDC    A,R1
   \   000036   F583         MOV     DPH,A
   \   000038   12....       LCALL   ?Subroutine81 & 0xFFFF
   \                     ??CrossCallReturnLabel_140:
   \   00003B   A8..         MOV     R0,?V3
   \   00003D   E8           MOV     A,R0
   \   00003E   28           ADD     A,R0
   \   00003F   F8           MOV     R0,A
   \   000040   E4           CLR     A
   \   000041   33           RLC     A
   \   000042   F9           MOV     R1,A
   \   000043   EC           MOV     A,R4
   \   000044   28           ADD     A,R0
   \   000045   F582         MOV     DPL,A
   \   000047   ED           MOV     A,R5
   \   000048   39           ADDC    A,R1
   \   000049   F583         MOV     DPH,A
   \   00004B   E0           MOVX    A,@DPTR
   \   00004C   65..         XRL     A,?V0
   \   00004E   7004         JNZ     ??ZDO_AnyClusterMatches_5
   \   000050   A3           INC     DPTR
   \   000051   E0           MOVX    A,@DPTR
   \   000052   65..         XRL     A,?V1
   \                     ??ZDO_AnyClusterMatches_5:
   \   000054   70CE         JNZ     ??ZDO_AnyClusterMatches_4
    610                {
    611                  return true;
   \   000056   7901         MOV     R1,#0x1
   \   000058   8002         SJMP    ??ZDO_AnyClusterMatches_6
    612                }
    613              }
    614            }
    615          
    616            return false;
   \                     ??ZDO_AnyClusterMatches_2:
   \   00005A   7900         MOV     R1,#0x0
   \                     ??ZDO_AnyClusterMatches_6:
   \   00005C   02....       LJMP    ??Subroutine217_0 & 0xFFFF
    617          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine96:
   \   000000   EF           MOV     A,R7
   \   000001                REQUIRE ??Subroutine185_0
   \   000001                ; // Fall through to label ??Subroutine185_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine185_0:
   \   000000   25E0         ADD     A,0xE0 /* A   */
   \   000002   F8           MOV     R0,A
   \   000003   E4           CLR     A
   \   000004   33           RLC     A
   \   000005   F9           MOV     R1,A
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine81:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V1,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine217_0:
   \   000000   7F04         MOV     R7,#0x4
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    618          
    619          /*********************************************************************
    620           * Callback functions from ZDProfile
    621           */
    622          
    623          /*********************************************************************
    624           * @fn          ZDO_ProcessNodeDescReq
    625           *
    626           * @brief       This function processes and responds to the
    627           *              Node_Desc_req message.
    628           *
    629           * @param       inMsg - incoming message
    630           *
    631           * @return      none
    632           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    633          void ZDO_ProcessNodeDescReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessNodeDescReq:
    634          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL   ?Subroutine53 & 0xFFFF
    635            uint16 aoi = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
    636            NodeDescriptorFormat_t *desc = NULL;
    637          
    638            if ( aoi == ZDAppNwkAddr.addr.shortAddr )
   \                     ??CrossCallReturnLabel_86:
   \   000008   7003         JNZ     ??ZDO_ProcessNodeDescReq_0
   \   00000A   A3           INC     DPTR
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   6D           XRL     A,R5
   \                     ??ZDO_ProcessNodeDescReq_0:
   \   00000D   7017         JNZ     ??ZDO_ProcessNodeDescReq_1
    639            {
    640              desc = &ZDO_Config_Node_Descriptor;
    641            }
    642          
    643            if ( desc != NULL )
    644            {
    645              ZDP_NodeDescMsg( inMsg, aoi, desc );
   \   00000F                ; Setup parameters for call to function ZDP_NodeDescMsg
   \   00000F   75....       MOV     ?V0,#ZDO_Config_Node_Descriptor & 0xff
   \   000012   75....       MOV     ?V1,#(ZDO_Config_Node_Descriptor >> 8) & 0xff
   \   000015   78..         MOV     R0,#?V0
   \   000017   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001A   EE           MOV     A,R6
   \   00001B   FA           MOV     R2,A
   \   00001C   12....       LCALL   `??ZDP_NodeDescMsg::?relay`; Banked call to: ZDP_NodeDescMsg
   \   00001F   7402         MOV     A,#0x2
   \   000021   12....       LCALL   ?DEALLOC_XSTACK8
   \   000024   801F         SJMP    ??ZDO_ProcessNodeDescReq_2
    646            }
    647            else
    648            {
    649              ZDP_GenericRsp( inMsg->TransSeq, &(inMsg->srcAddr),
    650                        ZDP_INVALID_REQTYPE, aoi, Node_Desc_rsp, inMsg->SecurityUse );
   \                     ??ZDO_ProcessNodeDescReq_1:
   \   000026                ; Setup parameters for call to function ZDP_GenericRsp
   \   000026   75..02       MOV     ?V0,#0x2
   \   000029   75..80       MOV     ?V1,#-0x80
   \   00002C   78..         MOV     R0,#?V0
   \   00002E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000031   8C..         MOV     ?V0,R4
   \   000033   8D..         MOV     ?V1,R5
   \   000035   78..         MOV     R0,#?V0
   \   000037   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003A   12....       LCALL   ?Subroutine57 & 0xFFFF
    651            }
   \                     ??CrossCallReturnLabel_92:
   \   00003D   12....       LCALL   `??ZDP_GenericRsp::?relay`; Banked call to: ZDP_GenericRsp
   \   000040   7404         MOV     A,#0x4
   \   000042   12....       LCALL   ?DEALLOC_XSTACK8
    652          }
   \                     ??ZDO_ProcessNodeDescReq_2:
   \   000045   80..         SJMP    ??Subroutine187_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine57:
   \   000000   12....       LCALL   ?Subroutine158 & 0xFFFF
   \                     ??CrossCallReturnLabel_272:
   \   000003   7C80         MOV     R4,#-0x80
   \   000005   12....       LCALL   ?Subroutine160 & 0xFFFF
   \                     ??CrossCallReturnLabel_274:
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine53:
   \   000000   EA           MOV     A,R2
   \   000001   FE           MOV     R6,A
   \   000002   EB           MOV     A,R3
   \   000003   FF           MOV     R7,A
   \   000004   12....       LCALL   ?Subroutine164 & 0xFFFF
   \                     ??CrossCallReturnLabel_394:
   \   000007   12....       LCALL   ?Subroutine142 & 0xFFFF
   \                     ??CrossCallReturnLabel_247:
   \   00000A   FC           MOV     R4,A
   \   00000B   E4           CLR     A
   \   00000C   39           ADDC    A,R1
   \   00000D   FD           MOV     R5,A
   \   00000E   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000011   E0           MOVX    A,@DPTR
   \   000012   6C           XRL     A,R4
   \   000013   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine164:
   \   000000   12....       LCALL   ?Subroutine181 & 0xFFFF
   \                     ??CrossCallReturnLabel_568:
   \   000003   3F           ADDC    A,R7
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine158:
   \   000000   EE           MOV     A,R6
   \   000001   240E         ADD     A,#0xe
   \   000003   F582         MOV     DPL,A
   \   000005   E4           CLR     A
   \   000006   3F           ADDC    A,R7
   \   000007   F583         MOV     DPH,A
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   FD           MOV     R5,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine160:
   \   000000   EE           MOV     A,R6
   \   000001   2402         ADD     A,#0x2
   \   000003   FA           MOV     R2,A
   \   000004   E4           CLR     A
   \   000005   3F           ADDC    A,R7
   \   000006   FB           MOV     R3,A
   \   000007   EE           MOV     A,R6
   \   000008   240F         ADD     A,#0xf
   \   00000A   F582         MOV     DPL,A
   \   00000C   E4           CLR     A
   \   00000D   3F           ADDC    A,R7
   \   00000E   F583         MOV     DPH,A
   \   000010   E0           MOVX    A,@DPTR
   \   000011   F9           MOV     R1,A
   \   000012   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine142:
   \   000000   F583         MOV     DPH,A
   \   000002   E0           MOVX    A,@DPTR
   \   000003   F8           MOV     R0,A
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   F9           MOV     R1,A
   \   000007   8882         MOV     DPL,R0
   \   000009   8983         MOV     DPH,R1
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   FA           MOV     R2,A
   \   00000D   A3           INC     DPTR
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   F8           MOV     R0,A
   \   000010   E4           CLR     A
   \   000011   C8           XCH     A,R0
   \   000012   F9           MOV     R1,A
   \   000013   EA           MOV     A,R2
   \   000014   28           ADD     A,R0
   \   000015   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine181:
   \   000000   EE           MOV     A,R6
   \   000001                REQUIRE ??Subroutine237_0
   \   000001                ; // Fall through to label ??Subroutine237_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine237_0:
   \   000000   2413         ADD     A,#0x13
   \   000002   F582         MOV     DPL,A
   \   000004   E4           CLR     A
   \   000005   22           RET
    653          
    654          /*********************************************************************
    655           * @fn          ZDO_ProcessPowerDescReq
    656           *
    657           * @brief       This function processes and responds to the
    658           *              Node_Power_req message.
    659           *
    660           * @param       inMsg  - incoming request
    661           *
    662           * @return      none
    663           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    664          void ZDO_ProcessPowerDescReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessPowerDescReq:
    665          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL   ?Subroutine53 & 0xFFFF
    666            uint16 aoi = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
    667            NodePowerDescriptorFormat_t *desc = NULL;
    668          
    669            if ( aoi == ZDAppNwkAddr.addr.shortAddr )
   \                     ??CrossCallReturnLabel_87:
   \   000008   7003         JNZ     ??ZDO_ProcessPowerDescReq_0
   \   00000A   A3           INC     DPTR
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   6D           XRL     A,R5
   \                     ??ZDO_ProcessPowerDescReq_0:
   \   00000D   7017         JNZ     ??ZDO_ProcessPowerDescReq_1
    670            {
    671              desc = &ZDO_Config_Power_Descriptor;
    672            }
    673          
    674            if ( desc != NULL )
    675            {
    676              ZDP_PowerDescMsg( inMsg, aoi, desc );
   \   00000F                ; Setup parameters for call to function ZDP_PowerDescMsg
   \   00000F   75....       MOV     ?V0,#ZDO_Config_Power_Descriptor & 0xff
   \   000012   75....       MOV     ?V1,#(ZDO_Config_Power_Descriptor >> 8) & 0xff
   \   000015   78..         MOV     R0,#?V0
   \   000017   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001A   EE           MOV     A,R6
   \   00001B   FA           MOV     R2,A
   \   00001C   12....       LCALL   `??ZDP_PowerDescMsg::?relay`; Banked call to: ZDP_PowerDescMsg
   \   00001F   7402         MOV     A,#0x2
   \   000021   12....       LCALL   ?DEALLOC_XSTACK8
   \   000024   801F         SJMP    ??ZDO_ProcessPowerDescReq_2
    677            }
    678            else
    679            {
    680              ZDP_GenericRsp( inMsg->TransSeq, &(inMsg->srcAddr),
    681                        ZDP_INVALID_REQTYPE, aoi, Power_Desc_rsp, inMsg->SecurityUse );
   \                     ??ZDO_ProcessPowerDescReq_1:
   \   000026                ; Setup parameters for call to function ZDP_GenericRsp
   \   000026   75..03       MOV     ?V0,#0x3
   \   000029   75..80       MOV     ?V1,#-0x80
   \   00002C   78..         MOV     R0,#?V0
   \   00002E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000031   8C..         MOV     ?V0,R4
   \   000033   8D..         MOV     ?V1,R5
   \   000035   78..         MOV     R0,#?V0
   \   000037   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003A   12....       LCALL   ?Subroutine57 & 0xFFFF
    682            }
   \                     ??CrossCallReturnLabel_93:
   \   00003D   12....       LCALL   `??ZDP_GenericRsp::?relay`; Banked call to: ZDP_GenericRsp
   \   000040   7404         MOV     A,#0x4
   \   000042   12....       LCALL   ?DEALLOC_XSTACK8
    683          }
   \                     ??ZDO_ProcessPowerDescReq_2:
   \   000045   80..         SJMP    ??Subroutine187_0
    684          
    685          /*********************************************************************
    686           * @fn          ZDO_ProcessSimpleDescReq
    687           *
    688           * @brief       This function processes and responds to the
    689           *              Simple_Desc_req message.
    690           *
    691           * @param       inMsg - incoming message (request)
    692           *
    693           * @return      none
    694           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7402         MOV     A,#0x2
   \   000002                REQUIRE ??Subroutine186_0
   \   000002                ; // Fall through to label ??Subroutine186_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine186_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine187_0
   \   000003                ; // Fall through to label ??Subroutine187_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    695          void ZDO_ProcessSimpleDescReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessSimpleDescReq:
    696          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    697            SimpleDescriptionFormat_t *sDesc = NULL;
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   E4           CLR     A
   \   000015   F0           MOVX    @DPTR,A
   \   000016   A3           INC     DPTR
   \   000017   12....       LCALL   ?Subroutine34 & 0xFFFF
    698            uint16 aoi = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
   \                     ??CrossCallReturnLabel_52:
   \   00001A   F8           MOV     R0,A
   \   00001B   A3           INC     DPTR
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   F9           MOV     R1,A
   \   00001E   8882         MOV     DPL,R0
   \   000020   8983         MOV     DPH,R1
   \   000022   E0           MOVX    A,@DPTR
   \   000023   FC           MOV     R4,A
   \   000024   A3           INC     DPTR
   \   000025   E0           MOVX    A,@DPTR
   \   000026   FB           MOV     R3,A
   \   000027   EC           MOV     A,R4
   \   000028   FA           MOV     R2,A
    699            byte endPoint = inMsg->asdu[2];
   \   000029   8882         MOV     DPL,R0
   \   00002B   8983         MOV     DPH,R1
   \   00002D   A3           INC     DPTR
   \   00002E   A3           INC     DPTR
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   F9           MOV     R1,A
    700            byte free = false;
   \   000031   75..00       MOV     ?V1,#0x0
    701            byte stat = ZDP_SUCCESS;
   \   000034   75..00       MOV     ?V0,#0x0
    702          
    703            if ( (endPoint == ZDO_EP) || (endPoint > MAX_ENDPOINTS) )
   \   000037   6005         JZ      ??ZDO_ProcessSimpleDescReq_0
   \   000039   74FF         MOV     A,#-0x1
   \   00003B   69           XRL     A,R1
   \   00003C   7005         JNZ     ??ZDO_ProcessSimpleDescReq_1
    704            {
    705              stat = ZDP_INVALID_EP;
   \                     ??ZDO_ProcessSimpleDescReq_0:
   \   00003E   75..82       MOV     ?V0,#-0x7e
   \   000041   8024         SJMP    ??ZDO_ProcessSimpleDescReq_2
    706            }
    707            else if ( aoi == ZDAppNwkAddr.addr.shortAddr )
   \                     ??ZDO_ProcessSimpleDescReq_1:
   \   000043   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000046   E0           MOVX    A,@DPTR
   \   000047   6A           XRL     A,R2
   \   000048   7003         JNZ     ??ZDO_ProcessSimpleDescReq_3
   \   00004A   A3           INC     DPTR
   \   00004B   E0           MOVX    A,@DPTR
   \   00004C   6B           XRL     A,R3
   \                     ??ZDO_ProcessSimpleDescReq_3:
   \   00004D   7015         JNZ     ??ZDO_ProcessSimpleDescReq_4
    708            {
    709              free = afFindSimpleDesc( &sDesc, endPoint );
   \   00004F                ; Setup parameters for call to function afFindSimpleDesc
   \   00004F   AA..         MOV     R2,?XSP + 0
   \   000051   AB..         MOV     R3,?XSP + 1
   \   000053   12....       LCALL   `??afFindSimpleDesc::?relay`; Banked call to: afFindSimpleDesc
   \   000056   E9           MOV     A,R1
   \   000057   FA           MOV     R2,A
    710              if ( sDesc == NULL )
   \   000058   12....       LCALL   ?Subroutine51 & 0xFFFF
   \                     ??CrossCallReturnLabel_555:
   \   00005B   7003         JNZ     ??ZDO_ProcessSimpleDescReq_5
    711              {
    712                stat = ZDP_NOT_ACTIVE;
   \   00005D   75..83       MOV     ?V0,#-0x7d
   \                     ??ZDO_ProcessSimpleDescReq_5:
   \   000060   8A..         MOV     ?V1,R2
   \   000062   8003         SJMP    ??ZDO_ProcessSimpleDescReq_2
    713              }
    714            }
    715            else
    716            {
    717              if ( ZSTACK_ROUTER_BUILD )
    718              {
    719                stat = ZDP_DEVICE_NOT_FOUND;
    720              }
    721              else if ( ZSTACK_END_DEVICE_BUILD )
    722              {
    723                stat = ZDP_INVALID_REQTYPE;
   \                     ??ZDO_ProcessSimpleDescReq_4:
   \   000064   75..80       MOV     ?V0,#-0x80
    724              }
    725            }
    726          
    727            ZDP_SimpleDescMsg( inMsg, stat, sDesc );
   \                     ??ZDO_ProcessSimpleDescReq_2:
   \   000067                ; Setup parameters for call to function ZDP_SimpleDescMsg
   \   000067   85..82       MOV     DPL,?XSP + 0
   \   00006A   85..83       MOV     DPH,?XSP + 1
   \   00006D   E0           MOVX    A,@DPTR
   \   00006E   FC           MOV     R4,A
   \   00006F   A3           INC     DPTR
   \   000070   E0           MOVX    A,@DPTR
   \   000071   FD           MOV     R5,A
   \   000072   A9..         MOV     R1,?V0
   \   000074   EE           MOV     A,R6
   \   000075   FA           MOV     R2,A
   \   000076   EF           MOV     A,R7
   \   000077   FB           MOV     R3,A
   \   000078   12....       LCALL   `??ZDP_SimpleDescMsg::?relay`; Banked call to: ZDP_SimpleDescMsg
    728          
    729            if ( free && sDesc )
   \   00007B   E5..         MOV     A,?V1
   \   00007D   600B         JZ      ??ZDO_ProcessSimpleDescReq_6
   \   00007F   12....       LCALL   ?Subroutine51 & 0xFFFF
   \                     ??CrossCallReturnLabel_556:
   \   000082   6006         JZ      ??ZDO_ProcessSimpleDescReq_6
    730            {
    731              osal_mem_free( sDesc );
   \   000084                ; Setup parameters for call to function osal_mem_free
   \   000084   12....       LCALL   ??Subroutine232_0 & 0xFFFF
    732            }
   \                     ??CrossCallReturnLabel_527:
   \   000087   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    733          }
   \                     ??ZDO_ProcessSimpleDescReq_6:
   \   00008A   02....       LJMP    ?Subroutine2 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   12....       LCALL   ?Subroutine163 & 0xFFFF
   \                     ??CrossCallReturnLabel_279:
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine163:
   \   000000   12....       LCALL   ?Subroutine181 & 0xFFFF
   \                     ??CrossCallReturnLabel_567:
   \   000003   3F           ADDC    A,R7
   \   000004   F583         MOV     DPH,A
   \   000006   E0           MOVX    A,@DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine232_0:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine233_0
   \   000006                ; // Fall through to label ??Subroutine233_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine233_0:
   \   000000   12....       LCALL   ??Subroutine234_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_538:
   \   000003   FB           MOV     R3,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine234_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine51:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine235_0
   \   000006                ; // Fall through to label ??Subroutine235_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine235_0:
   \   000000   12....       LCALL   ?Subroutine148 & 0xFFFF
   \                     ??CrossCallReturnLabel_561:
   \   000003   E8           MOV     A,R0
   \   000004   49           ORL     A,R1
   \   000005   22           RET
    734          
    735          /*********************************************************************
    736           * @fn          ZDO_ProcessActiveEPReq
    737           *
    738           * @brief       This function processes and responds to the
    739           *              Active_EP_req message.
    740           *
    741           * @param       inMsg  - incoming message (request)
    742           *
    743           * @return      none
    744           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    745          void ZDO_ProcessActiveEPReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessActiveEPReq:
    746          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V4,R2
   \   000007   8B..         MOV     ?V5,R3
    747            byte cnt = 0;
   \   000009   75..00       MOV     ?V0,#0x0
    748            uint16 aoi;
    749            byte stat = ZDP_SUCCESS;
   \   00000C   75..00       MOV     ?V1,#0x0
    750          
    751            aoi = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
   \   00000F   12....       LCALL   ??Subroutine219_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_431:
   \   000012   35..         ADDC    A,?V5
   \   000014   12....       LCALL   ?Subroutine60 & 0xFFFF
   \                     ??CrossCallReturnLabel_100:
   \   000017   FE           MOV     R6,A
   \   000018   E4           CLR     A
   \   000019   39           ADDC    A,R1
   \   00001A   FF           MOV     R7,A
    752          
    753            if ( aoi == NLME_GetShortAddr() )
   \   00001B                ; Setup parameters for call to function NLME_GetShortAddr
   \   00001B   12....       LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   00001E   EA           MOV     A,R2
   \   00001F   6E           XRL     A,R6
   \   000020   7002         JNZ     ??ZDO_ProcessActiveEPReq_0
   \   000022   EB           MOV     A,R3
   \   000023   6F           XRL     A,R7
   \                     ??ZDO_ProcessActiveEPReq_0:
   \   000024   7012         JNZ     ??ZDO_ProcessActiveEPReq_1
    754            {
    755              cnt = afNumEndPoints() - 1;  // -1 for ZDO endpoint descriptor
   \   000026                ; Setup parameters for call to function afNumEndPoints
   \   000026   12....       LCALL   `??afNumEndPoints::?relay`; Banked call to: afNumEndPoints
   \   000029   E9           MOV     A,R1
   \   00002A   14           DEC     A
   \   00002B   F5..         MOV     ?V0,A
    756              afEndPoints( (uint8 *)ZDOBuildBuf, true );
   \   00002D                ; Setup parameters for call to function afEndPoints
   \   00002D   7901         MOV     R1,#0x1
   \   00002F   7A..         MOV     R2,#ZDOBuildBuf & 0xff
   \   000031   7B..         MOV     R3,#(ZDOBuildBuf >> 8) & 0xff
   \   000033   12....       LCALL   `??afEndPoints::?relay`; Banked call to: afEndPoints
   \   000036   8003         SJMP    ??ZDO_ProcessActiveEPReq_2
    757            }
    758            else
    759            {
    760              stat = ZDP_INVALID_REQTYPE;
   \                     ??ZDO_ProcessActiveEPReq_1:
   \   000038   75..80       MOV     ?V1,#-0x80
    761            }
    762          
    763            ZDP_ActiveEPRsp( inMsg->TransSeq, &(inMsg->srcAddr), stat,
    764                            aoi, cnt, (uint8 *)ZDOBuildBuf, inMsg->SecurityUse );
   \                     ??ZDO_ProcessActiveEPReq_2:
   \   00003B                ; Setup parameters for call to function ZDP_EPRsp
   \   00003B   12....       LCALL   ?Subroutine104 & 0xFFFF
   \                     ??CrossCallReturnLabel_174:
   \   00003E   F5..         MOV     ?V2,A
   \   000040   78..         MOV     R0,#?V2
   \   000042   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000045   75....       MOV     ?V2,#ZDOBuildBuf & 0xff
   \   000048   75....       MOV     ?V3,#(ZDOBuildBuf >> 8) & 0xff
   \   00004B   78..         MOV     R0,#?V2
   \   00004D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000050   78..         MOV     R0,#?V0
   \   000052   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000055   8E..         MOV     ?V2,R6
   \   000057   8F..         MOV     ?V3,R7
   \   000059   78..         MOV     R0,#?V2
   \   00005B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005E   E5..         MOV     A,?V1
   \   000060   F5..         MOV     ?V0,A
   \   000062   78..         MOV     R0,#?V0
   \   000064   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000067   E5..         MOV     A,?V4
   \   000069   2402         ADD     A,#0x2
   \   00006B   FC           MOV     R4,A
   \   00006C   E4           CLR     A
   \   00006D   35..         ADDC    A,?V5
   \   00006F   FD           MOV     R5,A
   \   000070   12....       LCALL   ?Subroutine112 & 0xFFFF
   \                     ??CrossCallReturnLabel_188:
   \   000073   F9           MOV     R1,A
   \   000074   7A05         MOV     R2,#0x5
   \   000076   7B80         MOV     R3,#-0x80
   \   000078   12....       LCALL   `??ZDP_EPRsp::?relay`; Banked call to: ZDP_EPRsp
   \   00007B   7407         MOV     A,#0x7
   \   00007D   02....       LJMP    ?Subroutine4 & 0xFFFF
    765          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine112:
   \   000000   E5..         MOV     A,?V4
   \   000002   12....       LCALL   ?Subroutine162 & 0xFFFF
   \                     ??CrossCallReturnLabel_389:
   \   000005   35..         ADDC    A,?V5
   \   000007   F583         MOV     DPH,A
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine104:
   \   000000   12....       LCALL   ?Subroutine159 & 0xFFFF
   \                     ??CrossCallReturnLabel_471:
   \   000003   35..         ADDC    A,?V5
   \   000005   F583         MOV     DPH,A
   \   000007   E0           MOVX    A,@DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine162:
   \   000000   240F         ADD     A,#0xf
   \   000002   F582         MOV     DPL,A
   \   000004   E4           CLR     A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine60:
   \   000000   12....       LCALL   ?Subroutine142 & 0xFFFF
   \                     ??CrossCallReturnLabel_248:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine218_0
   \   000003                ; // Fall through to label ??Subroutine218_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine218_0:
   \   000000   7F06         MOV     R7,#0x6
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine219_0:
   \   000000   12....       LCALL   ?Subroutine165 & 0xFFFF
   \                     ??CrossCallReturnLabel_439:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine165:
   \   000000   EA           MOV     A,R2
   \   000001                REQUIRE ??Subroutine220_0
   \   000001                ; // Fall through to label ??Subroutine220_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine220_0:
   \   000000   12....       LCALL   ??Subroutine237_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_569:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine159:
   \   000000   E5..         MOV     A,?V4
   \   000002                REQUIRE ??Subroutine224_0
   \   000002                ; // Fall through to label ??Subroutine224_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine224_0:
   \   000000   240E         ADD     A,#0xe
   \   000002   F582         MOV     DPL,A
   \   000004   E4           CLR     A
   \   000005   22           RET
    766          
    767          /*********************************************************************
    768           * @fn          ZDO_ConvertOTAClusters
    769           *
    770           * @brief       This function will convert the over-the-air cluster list
    771           *              format to an internal format.
    772           *
    773           * @param       inMsg  - incoming message (request)
    774           *
    775           * @return      pointer to incremented inBuf
    776           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    777          uint8 *ZDO_ConvertOTAClusters( uint8 cnt, uint8 *inBuf, uint16 *outList )
   \                     ZDO_ConvertOTAClusters:
    778          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    779            uint8 x;
    780          
    781            for ( x = 0; x < cnt; x++ )
   \   000007   7F00         MOV     R7,#0x0
   \   000009   802B         SJMP    ??ZDO_ConvertOTAClusters_0
    782            {
    783              // convert ota format to internal
    784              outList[x] = BUILD_UINT16( inBuf[0], inBuf[1] );
   \                     ??ZDO_ConvertOTAClusters_1:
   \   00000B   8A82         MOV     DPL,R2
   \   00000D   8B83         MOV     DPH,R3
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   F5..         MOV     ?V0,A
   \   000012   12....       LCALL   ?Subroutine154 & 0xFFFF
   \                     ??CrossCallReturnLabel_262:
   \   000015   E5..         MOV     A,?V0
   \   000017   28           ADD     A,R0
   \   000018   E4           CLR     A
   \   000019   39           ADDC    A,R1
   \   00001A   F5..         MOV     ?V1,A
   \   00001C   12....       LCALL   ?Subroutine96 & 0xFFFF
   \                     ??CrossCallReturnLabel_310:
   \   00001F   EC           MOV     A,R4
   \   000020   28           ADD     A,R0
   \   000021   F582         MOV     DPL,A
   \   000023   ED           MOV     A,R5
   \   000024   39           ADDC    A,R1
   \   000025   F583         MOV     DPH,A
   \   000027   E5..         MOV     A,?V0
   \   000029   F0           MOVX    @DPTR,A
   \   00002A   A3           INC     DPTR
   \   00002B   E5..         MOV     A,?V1
   \   00002D   F0           MOVX    @DPTR,A
    785              inBuf += sizeof( uint16 );
   \   00002E   EA           MOV     A,R2
   \   00002F   2402         ADD     A,#0x2
   \   000031   FA           MOV     R2,A
   \   000032   5001         JNC     ??ZDO_ConvertOTAClusters_2
   \   000034   0B           INC     R3
    786            }
   \                     ??ZDO_ConvertOTAClusters_2:
   \   000035   0F           INC     R7
   \                     ??ZDO_ConvertOTAClusters_0:
   \   000036   EF           MOV     A,R7
   \   000037   C3           CLR     C
   \   000038   9E           SUBB    A,R6
   \   000039   40D0         JC      ??ZDO_ConvertOTAClusters_1
    787            return ( inBuf );
   \   00003B   02....       LJMP    ??Subroutine187_0 & 0xFFFF
    788          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine154:
   \   000000   A3           INC     DPTR
   \   000001   E0           MOVX    A,@DPTR
   \   000002   F8           MOV     R0,A
   \   000003   E4           CLR     A
   \   000004   C8           XCH     A,R0
   \   000005   F9           MOV     R1,A
   \   000006   22           RET
    789          
    790          /*********************************************************************
    791           * @fn          ZDO_ProcessMatchDescReq
    792           *
    793           * @brief       This function processes and responds to the
    794           *              Match_Desc_req message.
    795           *
    796           * @param       inMsg  - incoming message (request)
    797           *
    798           * @return      none
    799           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    800          void ZDO_ProcessMatchDescReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMatchDescReq:
    801          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 13
   \   000005   74F3         MOV     A,#-0xd
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   7402         MOV     A,#0x2
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   12....       LCALL   ?Subroutine22 & 0xFFFF
    802            uint8 epCnt = 0;
   \                     ??CrossCallReturnLabel_328:
   \   000012   7408         MOV     A,#0x8
   \   000014   12....       LCALL   ?XSTACK_DISP0_8
   \   000017   E4           CLR     A
   \   000018   F0           MOVX    @DPTR,A
    803            uint8 numInClusters;
    804            uint16 *inClusters = NULL;
   \   000019   740B         MOV     A,#0xb
   \   00001B   12....       LCALL   ?XSTACK_DISP0_8
   \   00001E   E4           CLR     A
   \   00001F   F0           MOVX    @DPTR,A
   \   000020   A3           INC     DPTR
   \   000021   F0           MOVX    @DPTR,A
    805            uint8 numOutClusters;
    806            uint16 *outClusters = NULL;
   \   000022   7409         MOV     A,#0x9
   \   000024   12....       LCALL   ?XSTACK_DISP0_8
   \   000027   E4           CLR     A
   \   000028   F0           MOVX    @DPTR,A
   \   000029   A3           INC     DPTR
   \   00002A   F0           MOVX    @DPTR,A
    807            epList_t *epDesc;
    808            SimpleDescriptionFormat_t *sDesc = NULL;
    809            uint8 allocated;
    810            uint8 *msg;
    811            uint16 aoi;
    812            uint16 profileID;
    813          
    814            // Parse the incoming message
    815            msg = inMsg->asdu;
   \   00002B   7402         MOV     A,#0x2
   \   00002D   12....       LCALL   ?XSTACK_DISP0_8
   \   000030   12....       LCALL   ??Subroutine195_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_341:
   \   000033   12....       LCALL   ?Subroutine81 & 0xFFFF
    816            aoi = BUILD_UINT16( msg[0], msg[1] );
   \                     ??CrossCallReturnLabel_141:
   \   000036   85..82       MOV     DPL,?V0
   \   000039   F583         MOV     DPH,A
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   FA           MOV     R2,A
   \   00003D   12....       LCALL   ?Subroutine154 & 0xFFFF
   \                     ??CrossCallReturnLabel_263:
   \   000040   EA           MOV     A,R2
   \   000041   28           ADD     A,R0
   \   000042   FE           MOV     R6,A
   \   000043   E4           CLR     A
   \   000044   39           ADDC    A,R1
   \   000045   FF           MOV     R7,A
    817            profileID = BUILD_UINT16( msg[2], msg[3] );
   \   000046   85..82       MOV     DPL,?V0
   \   000049   85..83       MOV     DPH,?V1
   \   00004C   A3           INC     DPTR
   \   00004D   A3           INC     DPTR
   \   00004E   E0           MOVX    A,@DPTR
   \   00004F   FA           MOV     R2,A
   \   000050   85..82       MOV     DPL,?V0
   \   000053   85..83       MOV     DPH,?V1
   \   000056   A3           INC     DPTR
   \   000057   A3           INC     DPTR
   \   000058   A3           INC     DPTR
   \   000059   E0           MOVX    A,@DPTR
   \   00005A   F9           MOV     R1,A
   \   00005B   EA           MOV     A,R2
   \   00005C   F5..         MOV     ?V4,A
   \   00005E   E4           CLR     A
   \   00005F   39           ADDC    A,R1
   \   000060   F5..         MOV     ?V5,A
    818            msg += 4;
    819          
    820            if ( ADDR_BCAST_NOT_ME == NLME_IsAddressBroadcast(aoi) )
   \   000062                ; Setup parameters for call to function NLME_IsAddressBroadcast
   \   000062   EE           MOV     A,R6
   \   000063   FA           MOV     R2,A
   \   000064   EF           MOV     A,R7
   \   000065   FB           MOV     R3,A
   \   000066   12....       LCALL   `??NLME_IsAddressBroadcast::?relay`; Banked call to: NLME_IsAddressBroadcast
   \   000069   E9           MOV     A,R1
   \   00006A   6401         XRL     A,#0x1
   \   00006C   6016         JZ      ??ZDO_ProcessMatchDescReq_0
    821            {
    822              ZDP_MatchDescRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZDP_INVALID_REQTYPE,
    823                                    ZDAppNwkAddr.addr.shortAddr, 0, NULL, inMsg->SecurityUse );
    824              return;
    825            }
    826            else if ( (ADDR_NOT_BCAST == NLME_IsAddressBroadcast(aoi)) && (aoi != ZDAppNwkAddr.addr.shortAddr) )
   \   00006E                ; Setup parameters for call to function NLME_IsAddressBroadcast
   \   00006E   EE           MOV     A,R6
   \   00006F   FA           MOV     R2,A
   \   000070   EF           MOV     A,R7
   \   000071   FB           MOV     R3,A
   \   000072   12....       LCALL   `??NLME_IsAddressBroadcast::?relay`; Banked call to: NLME_IsAddressBroadcast
   \   000075   E9           MOV     A,R1
   \   000076   704D         JNZ     ??ZDO_ProcessMatchDescReq_1
   \   000078   90....       MOV     DPTR,#ZDAppNwkAddr
   \   00007B   E0           MOVX    A,@DPTR
   \   00007C   6E           XRL     A,R6
   \   00007D   7003         JNZ     ??ZDO_ProcessMatchDescReq_2
   \   00007F   A3           INC     DPTR
   \   000080   E0           MOVX    A,@DPTR
   \   000081   6F           XRL     A,R7
   \                     ??ZDO_ProcessMatchDescReq_2:
   \   000082   6041         JZ      ??ZDO_ProcessMatchDescReq_1
    827            {
    828              ZDP_MatchDescRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZDP_INVALID_REQTYPE,
    829                                       ZDAppNwkAddr.addr.shortAddr, 0, NULL, inMsg->SecurityUse );
   \                     ??ZDO_ProcessMatchDescReq_0:
   \   000084                ; Setup parameters for call to function ZDP_EPRsp
   \   000084   7402         MOV     A,#0x2
   \   000086   12....       LCALL   ?XSTACK_DISP0_8
   \   000089   12....       LCALL   ?Subroutine52 & 0xFFFF
   \                     ??CrossCallReturnLabel_83:
   \   00008C   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00008F   E4           CLR     A
   \   000090   F5..         MOV     ?V0,A
   \   000092   F5..         MOV     ?V1,A
   \   000094   78..         MOV     R0,#?V0
   \   000096   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000099   78..         MOV     R0,#?V0
   \   00009B   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00009E   90....       MOV     DPTR,#ZDAppNwkAddr
   \   0000A1   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   0000A4   75..80       MOV     ?V0,#-0x80
   \   0000A7   78..         MOV     R0,#?V0
   \   0000A9   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000AC   7409         MOV     A,#0x9
   \   0000AE   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B1   12....       LCALL   ?Subroutine84 & 0xFFFF
   \                     ??CrossCallReturnLabel_144:
   \   0000B4   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B7   12....       LCALL   ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_102:
   \   0000BA   12....       LCALL   `??ZDP_EPRsp::?relay`; Banked call to: ZDP_EPRsp
   \   0000BD   7407         MOV     A,#0x7
   \   0000BF   12....       LCALL   ?DEALLOC_XSTACK8
    830              return;
   \   0000C2   02....       LJMP    ??ZDO_ProcessMatchDescReq_3 & 0xFFFF
    831            }
    832          
    833            if ((numInClusters = *msg++) &&
    834                (inClusters = (uint16*)osal_mem_alloc( numInClusters * sizeof( uint16 ) )))
   \                     ??ZDO_ProcessMatchDescReq_1:
   \   0000C5   85..82       MOV     DPL,?V0
   \   0000C8   85..83       MOV     DPH,?V1
   \   0000CB   A3           INC     DPTR
   \   0000CC   A3           INC     DPTR
   \   0000CD   A3           INC     DPTR
   \   0000CE   A3           INC     DPTR
   \   0000CF   12....       LCALL   ?Subroutine94 & 0xFFFF
   \                     ??CrossCallReturnLabel_165:
   \   0000D2   E5..         MOV     A,?V0
   \   0000D4   2405         ADD     A,#0x5
   \   0000D6   F5..         MOV     ?V0,A
   \   0000D8   5002         JNC     ??ZDO_ProcessMatchDescReq_4
   \   0000DA   05..         INC     ?V1
   \                     ??ZDO_ProcessMatchDescReq_4:
   \   0000DC   E0           MOVX    A,@DPTR
   \   0000DD   6031         JZ      ??ZDO_ProcessMatchDescReq_5
   \   0000DF                ; Setup parameters for call to function osal_mem_alloc
   \   0000DF   12....       LCALL   ??Subroutine229_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_497:
   \   0000E2   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   0000E5   740B         MOV     A,#0xb
   \   0000E7   12....       LCALL   ?XSTACK_DISP0_8
   \   0000EA   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_329:
   \   0000ED   740B         MOV     A,#0xb
   \   0000EF   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F2   12....       LCALL   ??Subroutine235_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_539:
   \   0000F5   6019         JZ      ??ZDO_ProcessMatchDescReq_5
    835            {
    836              msg = ZDO_ConvertOTAClusters( numInClusters, msg, inClusters );
   \   0000F7                ; Setup parameters for call to function ZDO_ConvertOTAClusters
   \   0000F7   740B         MOV     A,#0xb
   \   0000F9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000FC   12....       LCALL   ?Subroutine89 & 0xFFFF
    837            }
   \                     ??CrossCallReturnLabel_156:
   \   0000FF   85..82       MOV     DPL,?XSP + 0
   \   000102   85..83       MOV     DPH,?XSP + 1
   \   000105   E0           MOVX    A,@DPTR
   \   000106   F9           MOV     R1,A
   \   000107   12....       LCALL   `??ZDO_ConvertOTAClusters::?relay`; Banked call to: ZDO_ConvertOTAClusters
   \   00010A   8A..         MOV     ?V0,R2
   \   00010C   8B..         MOV     ?V1,R3
   \   00010E   8008         SJMP    ??ZDO_ProcessMatchDescReq_6
    838            else
    839            {
    840              numInClusters = 0;
   \                     ??ZDO_ProcessMatchDescReq_5:
   \   000110   85..82       MOV     DPL,?XSP + 0
   \   000113   85..83       MOV     DPH,?XSP + 1
   \   000116   E4           CLR     A
   \   000117   F0           MOVX    @DPTR,A
    841            }
    842          
    843            if ((numOutClusters = *msg++) &&
    844                (outClusters = (uint16 *)osal_mem_alloc( numOutClusters * sizeof( uint16 ) )))
   \                     ??ZDO_ProcessMatchDescReq_6:
   \   000118   85..82       MOV     DPL,?V0
   \   00011B   85..83       MOV     DPH,?V1
   \   00011E   E0           MOVX    A,@DPTR
   \   00011F   C0E0         PUSH    A
   \   000121   7401         MOV     A,#0x1
   \   000123   12....       LCALL   ?XSTACK_DISP0_8
   \   000126   D0E0         POP     A
   \   000128   12....       LCALL   ?Subroutine48 & 0xFFFF
   \                     ??CrossCallReturnLabel_78:
   \   00012B   8582..       MOV     ?V0,DPL
   \   00012E   8583..       MOV     ?V1,DPH
   \   000131   7401         MOV     A,#0x1
   \   000133   12....       LCALL   ?XSTACK_DISP0_8
   \   000136   E0           MOVX    A,@DPTR
   \   000137   602C         JZ      ??ZDO_ProcessMatchDescReq_7
   \   000139                ; Setup parameters for call to function osal_mem_alloc
   \   000139   12....       LCALL   ??Subroutine229_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_498:
   \   00013C   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00013F   7409         MOV     A,#0x9
   \   000141   12....       LCALL   ?XSTACK_DISP0_8
   \   000144   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_330:
   \   000147   7409         MOV     A,#0x9
   \   000149   12....       LCALL   ?XSTACK_DISP0_8
   \   00014C   12....       LCALL   ??Subroutine235_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_540:
   \   00014F   6014         JZ      ??ZDO_ProcessMatchDescReq_7
    845            {
    846              msg = ZDO_ConvertOTAClusters( numOutClusters, msg, outClusters );
   \   000151                ; Setup parameters for call to function ZDO_ConvertOTAClusters
   \   000151   7409         MOV     A,#0x9
   \   000153   12....       LCALL   ?XSTACK_DISP0_8
   \   000156   12....       LCALL   ?Subroutine89 & 0xFFFF
    847            }
   \                     ??CrossCallReturnLabel_157:
   \   000159   7401         MOV     A,#0x1
   \   00015B   12....       LCALL   ?XSTACK_DISP0_8
   \   00015E   E0           MOVX    A,@DPTR
   \   00015F   F9           MOV     R1,A
   \   000160   12....       LCALL   `??ZDO_ConvertOTAClusters::?relay`; Banked call to: ZDO_ConvertOTAClusters
   \   000163   8007         SJMP    ??ZDO_ProcessMatchDescReq_8
    848            else
    849            {
    850              numOutClusters = 0;
   \                     ??ZDO_ProcessMatchDescReq_7:
   \   000165   7401         MOV     A,#0x1
   \   000167   12....       LCALL   ?XSTACK_DISP0_8
   \   00016A   E4           CLR     A
   \   00016B   F0           MOVX    @DPTR,A
    851            }
    852          
    853            // First count the number of endpoints that match.
    854            epDesc = epList;
   \                     ??ZDO_ProcessMatchDescReq_8:
   \   00016C   90....       MOV     DPTR,#epList
   \   00016F   8064         SJMP    ??CrossCallReturnLabel_115
    855            while ( epDesc )
    856            {
    857              // Don't search endpoint 0 and check if response is allowed
    858              if ( epDesc->epDesc->endPoint != ZDO_EP && (epDesc->flags&eEP_AllowMatch) )
    859              {
    860                if ( epDesc->pfnDescCB )
    861                {
    862                  sDesc = (SimpleDescriptionFormat_t *)epDesc->pfnDescCB( AF_DESCRIPTOR_SIMPLE, epDesc->epDesc->endPoint );
    863                  allocated = TRUE;
    864                }
    865                else
    866                {
    867                  sDesc = epDesc->epDesc->simpleDesc;
    868                  allocated = FALSE;
    869                }
    870          
    871                // Allow specific ProfileId or Wildcard ProfileID
    872                if ( sDesc && ( ( sDesc->AppProfId == profileID ) || ( profileID == ZDO_WILDCARD_PROFILE_ID ) ) )
    873                {
    874                  uint8 *uint8Buf = (uint8 *)ZDOBuildBuf;
    875          
    876                  // Are there matching input clusters?
    877                  if ((ZDO_AnyClusterMatches( numInClusters, inClusters,
    878                             sDesc->AppNumInClusters, sDesc->pAppInClusterList )) ||
    879                      // Are there matching output clusters?
    880                      (ZDO_AnyClusterMatches( numOutClusters, outClusters,
    881                             sDesc->AppNumOutClusters, sDesc->pAppOutClusterList )))
    882                  {
    883                    // Notify the endpoint of the match.
    884                    uint8 bufLen = sizeof( ZDO_MatchDescRspSent_t ) + (numOutClusters + numInClusters) * sizeof(uint16);
    885                    ZDO_MatchDescRspSent_t *pRspSent = (ZDO_MatchDescRspSent_t *) osal_msg_allocate( bufLen );
    886          
    887                    if (pRspSent)
    888                    {
    889                      pRspSent->hdr.event = ZDO_MATCH_DESC_RSP_SENT;
    890                      pRspSent->nwkAddr = inMsg->srcAddr.addr.shortAddr;
    891                      pRspSent->numInClusters = numInClusters;
    892                      pRspSent->numOutClusters = numOutClusters;
    893          
    894                      if (numInClusters)
    895                      {
    896                        pRspSent->pInClusters = (uint16*) (pRspSent + 1);
    897                        osal_memcpy(pRspSent->pInClusters, inClusters, numInClusters * sizeof(uint16));
    898                      }
    899                      else
    900                      {
    901                        pRspSent->pInClusters = NULL;
    902                      }
    903          
    904                      if (numOutClusters)
    905                      {
    906                        pRspSent->pOutClusters = (uint16*)(pRspSent + 1) + numInClusters;
    907                        osal_memcpy(pRspSent->pOutClusters, outClusters, numOutClusters * sizeof(uint16));
    908                      }
    909                      else
    910                      {
    911                        pRspSent->pOutClusters = NULL;
   \                     ??ZDO_ProcessMatchDescReq_9:
   \   000171   85..82       MOV     DPL,?V6
   \   000174   85..83       MOV     DPH,?V7
   \   000177   A3           INC     DPTR
   \   000178   A3           INC     DPTR
   \   000179   A3           INC     DPTR
   \   00017A   A3           INC     DPTR
   \   00017B   A3           INC     DPTR
   \   00017C   A3           INC     DPTR
   \   00017D   A3           INC     DPTR
   \   00017E   A3           INC     DPTR
   \   00017F   E4           CLR     A
   \   000180   F0           MOVX    @DPTR,A
   \   000181   A3           INC     DPTR
   \   000182   F0           MOVX    @DPTR,A
    912                      }
    913          
    914                      osal_msg_send( *epDesc->epDesc->task_id, (uint8 *)pRspSent );
   \                     ??ZDO_ProcessMatchDescReq_10:
   \   000183                ; Setup parameters for call to function osal_msg_send
   \   000183   AA..         MOV     R2,?V6
   \   000185   AB..         MOV     R3,?V7
   \   000187   7404         MOV     A,#0x4
   \   000189   12....       LCALL   ?XSTACK_DISP0_8
   \   00018C   12....       LCALL   ?Subroutine67 & 0xFFFF
   \                     ??CrossCallReturnLabel_110:
   \   00018F   12....       LCALL   ??Subroutine207_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_403:
   \   000192   F9           MOV     R1,A
   \   000193   12....       LCALL   `??osal_msg_send::?relay`; Banked call to: osal_msg_send
    915                    }
    916          
    917                    uint8Buf[epCnt++] = sDesc->EndPoint;
   \                     ??ZDO_ProcessMatchDescReq_11:
   \   000196   7406         MOV     A,#0x6
   \   000198   12....       LCALL   ?XSTACK_DISP0_8
   \   00019B   12....       LCALL   ??Subroutine208_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_398:
   \   00019E   C0E0         PUSH    A
   \   0001A0   7408         MOV     A,#0x8
   \   0001A2   12....       LCALL   ?XSTACK_DISP0_8
   \   0001A5   E0           MOVX    A,@DPTR
   \   0001A6   F8           MOV     R0,A
   \   0001A7   74..         MOV     A,#ZDOBuildBuf & 0xff
   \   0001A9   28           ADD     A,R0
   \   0001AA   F582         MOV     DPL,A
   \   0001AC   E4           CLR     A
   \   0001AD   34..         ADDC    A,#(ZDOBuildBuf >> 8) & 0xff
   \   0001AF   F583         MOV     DPH,A
   \   0001B1   D0E0         POP     A
   \   0001B3   F0           MOVX    @DPTR,A
   \   0001B4   7408         MOV     A,#0x8
   \   0001B6   12....       LCALL   ?XSTACK_DISP0_8
   \   0001B9   E0           MOVX    A,@DPTR
   \   0001BA   04           INC     A
   \   0001BB   F0           MOVX    @DPTR,A
    918                  }
    919                }
    920          
    921                if ( allocated )
   \                     ??ZDO_ProcessMatchDescReq_12:
   \   0001BC   E5..         MOV     A,?V3
   \   0001BE   A2E0         MOV     C,0xE0 /* A   */.0
   \   0001C0   500B         JNC     ??ZDO_ProcessMatchDescReq_13
    922                {
    923                  osal_mem_free( sDesc );
   \   0001C2                ; Setup parameters for call to function osal_mem_free
   \   0001C2   7406         MOV     A,#0x6
   \   0001C4   12....       LCALL   ?XSTACK_DISP0_8
   \   0001C7   12....       LCALL   ??Subroutine233_0 & 0xFFFF
    924                }
   \                     ??CrossCallReturnLabel_511:
   \   0001CA   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    925              }
    926              epDesc = epDesc->nextDesc;
   \                     ??ZDO_ProcessMatchDescReq_13:
   \   0001CD   7404         MOV     A,#0x4
   \   0001CF   12....       LCALL   ?XSTACK_DISP0_8
   \   0001D2   12....       LCALL   ?Subroutine70 & 0xFFFF
   \                     ??CrossCallReturnLabel_115:
   \   0001D5   12....       LCALL   ??Subroutine201_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_361:
   \   0001D8   7404         MOV     A,#0x4
   \   0001DA   12....       LCALL   ?XSTACK_DISP0_8
   \   0001DD   12....       LCALL   ??Subroutine202_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_376:
   \   0001E0   7404         MOV     A,#0x4
   \   0001E2   12....       LCALL   ?XSTACK_DISP0_8
   \   0001E5   12....       LCALL   ??Subroutine235_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_541:
   \   0001E8   7003         JNZ     $+5
   \   0001EA   02....       LJMP    ??ZDO_ProcessMatchDescReq_14 & 0xFFFF
   \   0001ED   7404         MOV     A,#0x4
   \   0001EF   12....       LCALL   ?XSTACK_DISP0_8
   \   0001F2   12....       LCALL   ?Subroutine56 & 0xFFFF
   \                     ??CrossCallReturnLabel_405:
   \   0001F5   60D6         JZ      ??ZDO_ProcessMatchDescReq_13
   \   0001F7   7404         MOV     A,#0x4
   \   0001F9   12....       LCALL   ?XSTACK_DISP0_8
   \   0001FC   12....       LCALL   ?Subroutine76 & 0xFFFF
   \                     ??CrossCallReturnLabel_127:
   \   0001FF   2408         ADD     A,#0x8
   \   000201   12....       LCALL   ?Subroutine180 & 0xFFFF
   \                     ??CrossCallReturnLabel_313:
   \   000204   A2E0         MOV     C,0xE0 /* A   */.0
   \   000206   50C5         JNC     ??ZDO_ProcessMatchDescReq_13
   \   000208   7404         MOV     A,#0x4
   \   00020A   12....       LCALL   ?XSTACK_DISP0_8
   \   00020D   12....       LCALL   ?Subroutine58 & 0xFFFF
   \                     ??CrossCallReturnLabel_94:
   \   000210   12....       LCALL   ??Subroutine235_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_542:
   \   000213   6028         JZ      ??ZDO_ProcessMatchDescReq_15
   \   000215                ; Setup parameters for indirect call
   \   000215   7404         MOV     A,#0x4
   \   000217   12....       LCALL   ?XSTACK_DISP0_8
   \   00021A   E0           MOVX    A,@DPTR
   \   00021B   F8           MOV     R0,A
   \   00021C   12....       LCALL   ?Subroutine56 & 0xFFFF
   \                     ??CrossCallReturnLabel_406:
   \   00021F   FA           MOV     R2,A
   \   000220   7901         MOV     R1,#0x1
   \   000222   7404         MOV     A,#0x4
   \   000224   12....       LCALL   ?XSTACK_DISP0_8
   \   000227   12....       LCALL   ?Subroutine58 & 0xFFFF
   \                     ??CrossCallReturnLabel_95:
   \   00022A   12....       LCALL   ?Subroutine70 & 0xFFFF
   \                     ??CrossCallReturnLabel_116:
   \   00022D   12....       LCALL   ?CALL_IND
   \   000230   7406         MOV     A,#0x6
   \   000232   12....       LCALL   ?XSTACK_DISP0_8
   \   000235   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_331:
   \   000238   75..01       MOV     ?V3,#0x1
   \   00023B   8016         SJMP    ??ZDO_ProcessMatchDescReq_16
   \                     ??ZDO_ProcessMatchDescReq_15:
   \   00023D   7404         MOV     A,#0x4
   \   00023F   12....       LCALL   ?XSTACK_DISP0_8
   \   000242   12....       LCALL   ?Subroutine67 & 0xFFFF
   \                     ??CrossCallReturnLabel_111:
   \   000245   12....       LCALL   ??Subroutine199_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_369:
   \   000248   7406         MOV     A,#0x6
   \   00024A   12....       LCALL   ?XSTACK_DISP0_8
   \   00024D   12....       LCALL   ??Subroutine202_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_377:
   \   000250   75..00       MOV     ?V3,#0x0
   \                     ??ZDO_ProcessMatchDescReq_16:
   \   000253   7406         MOV     A,#0x6
   \   000255   12....       LCALL   ?XSTACK_DISP0_8
   \   000258   12....       LCALL   ??Subroutine235_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_543:
   \   00025B   7003         JNZ     $+5
   \   00025D   02....       LJMP    ??ZDO_ProcessMatchDescReq_12 & 0xFFFF
   \   000260   7406         MOV     A,#0x6
   \   000262   12....       LCALL   ?XSTACK_DISP0_8
   \   000265   12....       LCALL   ?Subroutine87 & 0xFFFF
   \                     ??CrossCallReturnLabel_151:
   \   000268   A3           INC     DPTR
   \   000269   E0           MOVX    A,@DPTR
   \   00026A   65..         XRL     A,?V4
   \   00026C   7004         JNZ     ??ZDO_ProcessMatchDescReq_17
   \   00026E   A3           INC     DPTR
   \   00026F   E0           MOVX    A,@DPTR
   \   000270   65..         XRL     A,?V5
   \                     ??ZDO_ProcessMatchDescReq_17:
   \   000272   600F         JZ      ??ZDO_ProcessMatchDescReq_18
   \   000274   74FF         MOV     A,#-0x1
   \   000276   65..         XRL     A,?V4
   \   000278   7004         JNZ     ??ZDO_ProcessMatchDescReq_19
   \   00027A   74FF         MOV     A,#-0x1
   \   00027C   65..         XRL     A,?V5
   \                     ??ZDO_ProcessMatchDescReq_19:
   \   00027E   6003         JZ      $+5
   \   000280   02....       LJMP    ??ZDO_ProcessMatchDescReq_12 & 0xFFFF
   \                     ??ZDO_ProcessMatchDescReq_18:
   \   000283                ; Setup parameters for call to function ZDO_AnyClusterMatches
   \   000283   7406         MOV     A,#0x6
   \   000285   12....       LCALL   ?XSTACK_DISP0_8
   \   000288   A3           INC     DPTR
   \   000289   E0           MOVX    A,@DPTR
   \   00028A   C8           XCH     A,R0
   \   00028B   12....       LCALL   ?Subroutine114 & 0xFFFF
   \                     ??CrossCallReturnLabel_190:
   \   00028E   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000291   7408         MOV     A,#0x8
   \   000293   12....       LCALL   ?XSTACK_DISP0_8
   \   000296   12....       LCALL   ?Subroutine76 & 0xFFFF
   \                     ??CrossCallReturnLabel_128:
   \   000299   2406         ADD     A,#0x6
   \   00029B   12....       LCALL   ?Subroutine180 & 0xFFFF
   \                     ??CrossCallReturnLabel_314:
   \   00029E   FC           MOV     R4,A
   \   00029F   740D         MOV     A,#0xd
   \   0002A1   12....       LCALL   ?XSTACK_DISP0_8
   \   0002A4   12....       LCALL   ??Subroutine233_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_512:
   \   0002A7   7402         MOV     A,#0x2
   \   0002A9   12....       LCALL   ?XSTACK_DISP0_8
   \   0002AC   E0           MOVX    A,@DPTR
   \   0002AD   F9           MOV     R1,A
   \   0002AE   12....       LCALL   `??ZDO_AnyClusterMatches::?relay`; Banked call to: ZDO_AnyClusterMatches
   \   0002B1   7402         MOV     A,#0x2
   \   0002B3   12....       LCALL   ?DEALLOC_XSTACK8
   \   0002B6   E9           MOV     A,R1
   \   0002B7   703A         JNZ     ??ZDO_ProcessMatchDescReq_20
   \   0002B9                ; Setup parameters for call to function ZDO_AnyClusterMatches
   \   0002B9   7406         MOV     A,#0x6
   \   0002BB   12....       LCALL   ?XSTACK_DISP0_8
   \   0002BE   12....       LCALL   ?Subroutine76 & 0xFFFF
   \                     ??CrossCallReturnLabel_129:
   \   0002C1   240A         ADD     A,#0xa
   \   0002C3   F582         MOV     DPL,A
   \   0002C5   E4           CLR     A
   \   0002C6   38           ADDC    A,R0
   \   0002C7   F583         MOV     DPH,A
   \   0002C9   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   0002CC   7408         MOV     A,#0x8
   \   0002CE   12....       LCALL   ?XSTACK_DISP0_8
   \   0002D1   12....       LCALL   ?Subroutine75 & 0xFFFF
   \                     ??CrossCallReturnLabel_125:
   \   0002D4   E0           MOVX    A,@DPTR
   \   0002D5   FC           MOV     R4,A
   \   0002D6   740B         MOV     A,#0xb
   \   0002D8   12....       LCALL   ?XSTACK_DISP0_8
   \   0002DB   12....       LCALL   ??Subroutine233_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_513:
   \   0002DE   7403         MOV     A,#0x3
   \   0002E0   12....       LCALL   ?XSTACK_DISP0_8
   \   0002E3   E0           MOVX    A,@DPTR
   \   0002E4   F9           MOV     R1,A
   \   0002E5   12....       LCALL   `??ZDO_AnyClusterMatches::?relay`; Banked call to: ZDO_AnyClusterMatches
   \   0002E8   7402         MOV     A,#0x2
   \   0002EA   12....       LCALL   ?DEALLOC_XSTACK8
   \   0002ED   E9           MOV     A,R1
   \   0002EE   7003         JNZ     $+5
   \   0002F0   02....       LJMP    ??ZDO_ProcessMatchDescReq_12 & 0xFFFF
   \                     ??ZDO_ProcessMatchDescReq_20:
   \   0002F3                ; Setup parameters for call to function osal_msg_allocate
   \   0002F3   85..82       MOV     DPL,?XSP + 0
   \   0002F6   85..83       MOV     DPH,?XSP + 1
   \   0002F9   E0           MOVX    A,@DPTR
   \   0002FA   F8           MOV     R0,A
   \   0002FB   7401         MOV     A,#0x1
   \   0002FD   12....       LCALL   ?XSTACK_DISP0_8
   \   000300   E0           MOVX    A,@DPTR
   \   000301   28           ADD     A,R0
   \   000302   C3           CLR     C
   \   000303   33           RLC     A
   \   000304   240A         ADD     A,#0xa
   \   000306   FA           MOV     R2,A
   \   000307   7B00         MOV     R3,#0x0
   \   000309   12....       LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   00030C   8A..         MOV     ?V6,R2
   \   00030E   8B..         MOV     ?V7,R3
   \   000310   EA           MOV     A,R2
   \   000311   45..         ORL     A,?V7
   \   000313   7003         JNZ     $+5
   \   000315   02....       LJMP    ??ZDO_ProcessMatchDescReq_11 & 0xFFFF
   \   000318   8A82         MOV     DPL,R2
   \   00031A   8B83         MOV     DPH,R3
   \   00031C   74D2         MOV     A,#-0x2e
   \   00031E   F0           MOVX    @DPTR,A
   \   00031F   7402         MOV     A,#0x2
   \   000321   12....       LCALL   ?XSTACK_DISP0_8
   \   000324   12....       LCALL   ?Subroutine70 & 0xFFFF
   \                     ??CrossCallReturnLabel_117:
   \   000327   12....       LCALL   ??Subroutine200_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_367:
   \   00032A   8A82         MOV     DPL,R2
   \   00032C   8B83         MOV     DPH,R3
   \   00032E   A3           INC     DPTR
   \   00032F   A3           INC     DPTR
   \   000330   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_45:
   \   000333   8A82         MOV     DPL,R2
   \   000335   8B83         MOV     DPH,R3
   \   000337   A3           INC     DPTR
   \   000338   A3           INC     DPTR
   \   000339   A3           INC     DPTR
   \   00033A   A3           INC     DPTR
   \   00033B   F0           MOVX    @DPTR,A
   \   00033C   7401         MOV     A,#0x1
   \   00033E   12....       LCALL   ?XSTACK_DISP0_8
   \   000341   12....       LCALL   ?Subroutine85 & 0xFFFF
   \                     ??CrossCallReturnLabel_146:
   \   000344   A3           INC     DPTR
   \   000345   12....       LCALL   ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_47:
   \   000348   603F         JZ      ??ZDO_ProcessMatchDescReq_21
   \   00034A   EA           MOV     A,R2
   \   00034B   240A         ADD     A,#0xa
   \   00034D   F8           MOV     R0,A
   \   00034E   E4           CLR     A
   \   00034F   35..         ADDC    A,?V7
   \   000351   F9           MOV     R1,A
   \   000352   8A82         MOV     DPL,R2
   \   000354   8B83         MOV     DPH,R3
   \   000356   A3           INC     DPTR
   \   000357   A3           INC     DPTR
   \   000358   A3           INC     DPTR
   \   000359   A3           INC     DPTR
   \   00035A   A3           INC     DPTR
   \   00035B   12....       LCALL   ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_66:
   \   00035E   12....       LCALL   ?XSTACK_DISP0_8
   \   000361   12....       LCALL   ?Subroutine59 & 0xFFFF
   \                     ??CrossCallReturnLabel_97:
   \   000364   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000367   7403         MOV     A,#0x3
   \   000369   12....       LCALL   ?XSTACK_DISP0_8
   \   00036C   E0           MOVX    A,@DPTR
   \   00036D   25E0         ADD     A,0xE0 /* A   */
   \   00036F   FC           MOV     R4,A
   \   000370   E4           CLR     A
   \   000371   33           RLC     A
   \   000372   FD           MOV     R5,A
   \   000373   8A82         MOV     DPL,R2
   \   000375   8B83         MOV     DPH,R3
   \   000377   A3           INC     DPTR
   \   000378   A3           INC     DPTR
   \   000379   A3           INC     DPTR
   \   00037A   A3           INC     DPTR
   \   00037B   A3           INC     DPTR
   \   00037C   12....       LCALL   ??Subroutine233_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_514:
   \   00037F   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000382   7403         MOV     A,#0x3
   \   000384   12....       LCALL   ?DEALLOC_XSTACK8
   \   000387   800D         SJMP    ??ZDO_ProcessMatchDescReq_22
   \                     ??ZDO_ProcessMatchDescReq_21:
   \   000389   8A82         MOV     DPL,R2
   \   00038B   8B83         MOV     DPH,R3
   \   00038D   A3           INC     DPTR
   \   00038E   A3           INC     DPTR
   \   00038F   A3           INC     DPTR
   \   000390   A3           INC     DPTR
   \   000391   A3           INC     DPTR
   \   000392   E4           CLR     A
   \   000393   F0           MOVX    @DPTR,A
   \   000394   A3           INC     DPTR
   \   000395   F0           MOVX    @DPTR,A
   \                     ??ZDO_ProcessMatchDescReq_22:
   \   000396   7401         MOV     A,#0x1
   \   000398   12....       LCALL   ?XSTACK_DISP0_8
   \   00039B   E0           MOVX    A,@DPTR
   \   00039C   7003         JNZ     $+5
   \   00039E   02....       LJMP    ??ZDO_ProcessMatchDescReq_9 & 0xFFFF
   \   0003A1   85..82       MOV     DPL,?XSP + 0
   \   0003A4   85..83       MOV     DPH,?XSP + 1
   \   0003A7   E0           MOVX    A,@DPTR
   \   0003A8   12....       LCALL   ??Subroutine185_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_308:
   \   0003AB   E5..         MOV     A,?V6
   \   0003AD   28           ADD     A,R0
   \   0003AE   F8           MOV     R0,A
   \   0003AF   E5..         MOV     A,?V7
   \   0003B1   39           ADDC    A,R1
   \   0003B2   F9           MOV     R1,A
   \   0003B3   E8           MOV     A,R0
   \   0003B4   240A         ADD     A,#0xa
   \   0003B6   5001         JNC     ??ZDO_ProcessMatchDescReq_23
   \   0003B8   09           INC     R1
   \                     ??ZDO_ProcessMatchDescReq_23:
   \   0003B9   85..82       MOV     DPL,?V6
   \   0003BC   85..83       MOV     DPH,?V7
   \   0003BF   A3           INC     DPTR
   \   0003C0   A3           INC     DPTR
   \   0003C1   A3           INC     DPTR
   \   0003C2   A3           INC     DPTR
   \   0003C3   A3           INC     DPTR
   \   0003C4   A3           INC     DPTR
   \   0003C5   A3           INC     DPTR
   \   0003C6   A3           INC     DPTR
   \   0003C7   12....       LCALL   ??Subroutine203_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_372:
   \   0003CA                ; Setup parameters for call to function osal_memcpy
   \   0003CA   7409         MOV     A,#0x9
   \   0003CC   12....       LCALL   ?XSTACK_DISP0_8
   \   0003CF   12....       LCALL   ?Subroutine59 & 0xFFFF
    927            }
   \                     ??CrossCallReturnLabel_98:
   \   0003D2   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0003D5   7404         MOV     A,#0x4
   \   0003D7   12....       LCALL   ?XSTACK_DISP0_8
   \   0003DA   E0           MOVX    A,@DPTR
   \   0003DB   25E0         ADD     A,0xE0 /* A   */
   \   0003DD   FC           MOV     R4,A
   \   0003DE   E4           CLR     A
   \   0003DF   33           RLC     A
   \   0003E0   FD           MOV     R5,A
   \   0003E1   85..82       MOV     DPL,?V6
   \   0003E4   85..83       MOV     DPH,?V7
   \   0003E7   A3           INC     DPTR
   \   0003E8   A3           INC     DPTR
   \   0003E9   A3           INC     DPTR
   \   0003EA   A3           INC     DPTR
   \   0003EB   A3           INC     DPTR
   \   0003EC   A3           INC     DPTR
   \   0003ED   A3           INC     DPTR
   \   0003EE   A3           INC     DPTR
   \   0003EF   12....       LCALL   ??Subroutine233_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_515:
   \   0003F2   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0003F5   7403         MOV     A,#0x3
   \   0003F7   12....       LCALL   ?DEALLOC_XSTACK8
   \   0003FA   02....       LJMP    ??ZDO_ProcessMatchDescReq_10 & 0xFFFF
    928          
    929            if ( epCnt )
   \                     ??ZDO_ProcessMatchDescReq_14:
   \   0003FD   7408         MOV     A,#0x8
   \   0003FF   12....       LCALL   ?XSTACK_DISP0_8
   \   000402   E0           MOVX    A,@DPTR
   \   000403   602C         JZ      ??ZDO_ProcessMatchDescReq_24
    930            {
    931              // Send the message if at least one match found.
    932              if ( ZSuccess == ZDP_MatchDescRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZDP_SUCCESS,
    933                        ZDAppNwkAddr.addr.shortAddr, epCnt, (uint8 *)ZDOBuildBuf, inMsg->SecurityUse ) )
   \   000405                ; Setup parameters for call to function ZDP_EPRsp
   \   000405   7402         MOV     A,#0x2
   \   000407   12....       LCALL   ?XSTACK_DISP0_8
   \   00040A   12....       LCALL   ?Subroutine52 & 0xFFFF
    934              {
    935          #if defined( LCD_SUPPORTED )
    936                HalLcdWriteScreen( "Match Desc Req", "Rsp Sent" );
    937          #endif
    938              }
    939            }
   \                     ??CrossCallReturnLabel_84:
   \   00040D   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000410   75....       MOV     ?V0,#ZDOBuildBuf & 0xff
   \   000413   75....       MOV     ?V1,#(ZDOBuildBuf >> 8) & 0xff
   \   000416   78..         MOV     R0,#?V0
   \   000418   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00041B   740B         MOV     A,#0xb
   \   00041D   12....       LCALL   ?XSTACK_DISP0_8
   \   000420   12....       LCALL   ??Subroutine191_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_320:
   \   000423   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000426   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000429   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00042C   75..00       MOV     ?V0,#0x0
   \   00042F   802E         SJMP    ??ZDO_ProcessMatchDescReq_25
    940            else
    941            {
    942              // No match found
    943              if (ADDR_NOT_BCAST == NLME_IsAddressBroadcast(aoi))
   \                     ??ZDO_ProcessMatchDescReq_24:
   \   000431                ; Setup parameters for call to function NLME_IsAddressBroadcast
   \   000431   EE           MOV     A,R6
   \   000432   FA           MOV     R2,A
   \   000433   EF           MOV     A,R7
   \   000434   FB           MOV     R3,A
   \   000435   12....       LCALL   `??NLME_IsAddressBroadcast::?relay`; Banked call to: NLME_IsAddressBroadcast
   \   000438   E9           MOV     A,R1
   \   000439   703F         JNZ     ??ZDO_ProcessMatchDescReq_26
    944              {
    945                // send response message with match length = 0
    946                ZDP_MatchDescRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZDP_SUCCESS,
    947                                  ZDAppNwkAddr.addr.shortAddr, 0, (uint8 *)ZDOBuildBuf, inMsg->SecurityUse );
   \   00043B                ; Setup parameters for call to function ZDP_EPRsp
   \   00043B   7402         MOV     A,#0x2
   \   00043D   12....       LCALL   ?XSTACK_DISP0_8
   \   000440   12....       LCALL   ?Subroutine52 & 0xFFFF
    948          #if defined( LCD_SUPPORTED )
    949                HalLcdWriteScreen( "Match Desc Req", "Rsp Non Matched" );
    950          #endif
    951              }
    952              else
    953              {
    954                // no response mesage for broadcast message
    955          #if defined( LCD_SUPPORTED )
    956                HalLcdWriteScreen( "Match Desc Req", "Non Matched" );
    957          #endif
    958              }
    959            }
   \                     ??CrossCallReturnLabel_85:
   \   000443   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000446   75....       MOV     ?V0,#ZDOBuildBuf & 0xff
   \   000449   75....       MOV     ?V1,#(ZDOBuildBuf >> 8) & 0xff
   \   00044C   78..         MOV     R0,#?V0
   \   00044E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000451   75..00       MOV     ?V0,#0x0
   \   000454   78..         MOV     R0,#?V0
   \   000456   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000459   90....       MOV     DPTR,#ZDAppNwkAddr
   \   00045C   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \                     ??ZDO_ProcessMatchDescReq_25:
   \   00045F   78..         MOV     R0,#?V0
   \   000461   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000464   7409         MOV     A,#0x9
   \   000466   12....       LCALL   ?XSTACK_DISP0_8
   \   000469   12....       LCALL   ?Subroutine84 & 0xFFFF
   \                     ??CrossCallReturnLabel_145:
   \   00046C   12....       LCALL   ?XSTACK_DISP0_8
   \   00046F   12....       LCALL   ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_103:
   \   000472   12....       LCALL   `??ZDP_EPRsp::?relay`; Banked call to: ZDP_EPRsp
   \   000475   7407         MOV     A,#0x7
   \   000477   12....       LCALL   ?DEALLOC_XSTACK8
    960          
    961            if ( inClusters != NULL )
   \                     ??ZDO_ProcessMatchDescReq_26:
   \   00047A   740B         MOV     A,#0xb
   \   00047C   12....       LCALL   ?XSTACK_DISP0_8
   \   00047F   12....       LCALL   ??Subroutine235_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_544:
   \   000482   600B         JZ      ??ZDO_ProcessMatchDescReq_27
    962            {
    963              osal_mem_free( inClusters );
   \   000484                ; Setup parameters for call to function osal_mem_free
   \   000484   740B         MOV     A,#0xb
   \   000486   12....       LCALL   ?XSTACK_DISP0_8
   \   000489   12....       LCALL   ??Subroutine233_0 & 0xFFFF
    964            }
   \                     ??CrossCallReturnLabel_516:
   \   00048C   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    965          
    966            if ( outClusters != NULL )
   \                     ??ZDO_ProcessMatchDescReq_27:
   \   00048F   7409         MOV     A,#0x9
   \   000491   12....       LCALL   ?XSTACK_DISP0_8
   \   000494   12....       LCALL   ??Subroutine235_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_545:
   \   000497   600B         JZ      ??ZDO_ProcessMatchDescReq_3
    967            {
    968              osal_mem_free( outClusters );
   \   000499                ; Setup parameters for call to function osal_mem_free
   \   000499   7409         MOV     A,#0x9
   \   00049B   12....       LCALL   ?XSTACK_DISP0_8
   \   00049E   12....       LCALL   ??Subroutine233_0 & 0xFFFF
    969            }
   \                     ??CrossCallReturnLabel_517:
   \   0004A1   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    970          }
   \                     ??ZDO_ProcessMatchDescReq_3:
   \   0004A4   740D         MOV     A,#0xd
   \   0004A6   02....       LJMP    ?Subroutine7 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine180:
   \   000000   F582         MOV     DPL,A
   \   000002   E4           CLR     A
   \   000003                REQUIRE ??Subroutine188_0
   \   000003                ; // Fall through to label ??Subroutine188_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine188_0:
   \   000000   38           ADDC    A,R0
   \   000001   F583         MOV     DPH,A
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine89:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FC           MOV     R4,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FD           MOV     R5,A
   \   000005   AA..         MOV     R2,?V0
   \   000007   AB..         MOV     R3,?V1
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine84:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   2402         ADD     A,#0x2
   \   000003   FC           MOV     R4,A
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   3400         ADDC    A,#0x0
   \   000008   FD           MOV     R5,A
   \   000009   7409         MOV     A,#0x9
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine67:
   \   000000   12....       LCALL   ?Subroutine149 & 0xFFFF
   \                     ??CrossCallReturnLabel_256:
   \   000003   12....       LCALL   ?Subroutine150 & 0xFFFF
   \                     ??CrossCallReturnLabel_258:
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine61:
   \   000000   12....       LCALL   ?Subroutine144 & 0xFFFF
   \                     ??CrossCallReturnLabel_251:
   \   000003   7A06         MOV     R2,#0x6
   \   000005   7B80         MOV     R3,#-0x80
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine52:
   \   000000   12....       LCALL   ?Subroutine178 & 0xFFFF
   \                     ??CrossCallReturnLabel_346:
   \   000003   12....       LCALL   ??Subroutine224_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_468:
   \   000006   12....       LCALL   ??Subroutine188_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_312:
   \   000009   F5..         MOV     ?V0,A
   \   00000B   78..         MOV     R0,#?V0
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine191_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0,A
   \   000003   78..         MOV     R0,#?V0
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine192_0:
   \   000000   7F08         MOV     R7,#0x8
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine94:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   85..82       MOV     DPL,?XSP + 0
   \   000004   85..83       MOV     DPH,?XSP + 1
   \   000007   F0           MOVX    @DPTR,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine195_0:
   \   000000   12....       LCALL   ?Subroutine145 & 0xFFFF
   \                     ??CrossCallReturnLabel_345:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine145:
   \   000000   12....       LCALL   ?Subroutine178 & 0xFFFF
   \                     ??CrossCallReturnLabel_350:
   \   000003   12....       LCALL   ??Subroutine237_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_566:
   \   000006   38           ADDC    A,R0
   \   000007   F583         MOV     DPH,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   02....       LJMP    ??Subroutine192_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine199_0:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine200_0
   \   000001                ; // Fall through to label ??Subroutine200_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine200_0:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002                REQUIRE ??Subroutine201_0
   \   000002                ; // Fall through to label ??Subroutine201_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine202_0:
   \   000000   E8           MOV     A,R0
   \   000001                REQUIRE ??Subroutine203_0
   \   000001                ; // Fall through to label ??Subroutine203_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine203_0:
   \   000000   12....       LCALL   ??Subroutine228_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_492:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine48:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   85..82       MOV     DPL,?V0
   \   000004   85..83       MOV     DPH,?V1
   \   000007   A3           INC     DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine144:
   \   000000   12....       LCALL   ?Subroutine178 & 0xFFFF
   \                     ??CrossCallReturnLabel_349:
   \   000003   240F         ADD     A,#0xf
   \   000005   12....       LCALL   ?Subroutine180 & 0xFFFF
   \                     ??CrossCallReturnLabel_316:
   \   000008   F9           MOV     R1,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine56:
   \   000000   12....       LCALL   ??Subroutine210_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_408:
   \   000003                REQUIRE ??Subroutine206_0
   \   000003                ; // Fall through to label ??Subroutine206_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine41:
   \   000000   12....       LCALL   ?Subroutine139 & 0xFFFF
   \                     ??CrossCallReturnLabel_494:
   \   000003                ; Setup parameters for call to function osal_memcpy
   \   000003                ; Setup parameters for call to function AddrMgrEntryLookupNwk
   \   000003                ; Setup parameters for call to function AddrMgrEntryUpdate
   \   000003   740B         MOV     A,#0xb
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   12....       LCALL   ??Subroutine236_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_564:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine212_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine85:
   \   000000   12....       LCALL   ??Subroutine212_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_412:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine76:
   \   000000   12....       LCALL   ?Subroutine178 & 0xFFFF
   \                     ??CrossCallReturnLabel_348:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine178:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   C8           XCH     A,R0
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine139:
   \   000000   E8           MOV     A,R0
   \   000001                REQUIRE ??Subroutine228_0
   \   000001                ; // Fall through to label ??Subroutine228_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine228_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   E9           MOV     A,R1
   \   000003   F0           MOVX    @DPTR,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine229_0:
   \   000000   25E0         ADD     A,0xE0 /* A   */
   \   000002   FA           MOV     R2,A
   \   000003   E4           CLR     A
   \   000004   33           RLC     A
   \   000005   FB           MOV     R3,A
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine114:
   \   000000   2407         ADD     A,#0x7
   \   000002   F582         MOV     DPL,A
   \   000004   E4           CLR     A
   \   000005   38           ADDC    A,R0
   \   000006   F583         MOV     DPH,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine75:
   \   000000   12....       LCALL   ?Subroutine178 & 0xFFFF
   \                     ??CrossCallReturnLabel_347:
   \   000003   2409         ADD     A,#0x9
   \   000005   F582         MOV     DPL,A
   \   000007   E4           CLR     A
   \   000008   38           ADDC    A,R0
   \   000009   F583         MOV     DPH,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine70:
   \   000000   12....       LCALL   ?Subroutine150 & 0xFFFF
   \                     ??CrossCallReturnLabel_259:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine150:
   \   000000   12....       LCALL   ?Subroutine179 & 0xFFFF
   \                     ??CrossCallReturnLabel_304:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine179:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F583         MOV     DPH,A
   \   000006   8882         MOV     DPL,R0
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine59:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V1,A
   \   000007   75..00       MOV     ?V2,#0x0
   \   00000A   78..         MOV     R0,#?V0
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine58:
   \   000000   12....       LCALL   ?Subroutine149 & 0xFFFF
   \                     ??CrossCallReturnLabel_255:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine149:
   \   000000   12....       LCALL   ?Subroutine179 & 0xFFFF
   \                     ??CrossCallReturnLabel_303:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   12....       LCALL   ?Subroutine131 & 0xFFFF
   \                     ??CrossCallReturnLabel_562:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine131:
   \   000000   E8           MOV     A,R0
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   E9           MOV     A,R1
   \   000004                REQUIRE ??Subroutine236_0
   \   000004                ; // Fall through to label ??Subroutine236_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine236_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   85..82       MOV     DPL,?XSP + 0
   \   000004   85..83       MOV     DPH,?XSP + 1
   \   000007   E0           MOVX    A,@DPTR
   \   000008   22           RET
    971          
    972          #if defined ( REFLECTOR )
    973          /*********************************************************************
    974           * @fn      ZDO_ProcessBindUnbindReq()
    975           *
    976           * @brief   Called to process a Bind or Unbind Request message.
    977           *
    978           * @param   inMsg  - incoming message (request)
    979           * @param   pReq - place to put parsed information
    980           *
    981           * @return  none
    982           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    983          void ZDO_ProcessBindUnbindReq( zdoIncomingMsg_t *inMsg, ZDO_BindUnbindReq_t *pReq )
   \                     ZDO_ProcessBindUnbindReq:
    984          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV     A,#-0xc
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V4,R2
   \   00000C   8B..         MOV     ?V5,R3
   \   00000E   EC           MOV     A,R4
   \   00000F   FE           MOV     R6,A
   \   000010   ED           MOV     A,R5
   \   000011   FF           MOV     R7,A
    985            zAddrType_t SourceAddr;       // Binding Source addres
    986            byte bindStat;
    987          
    988            SourceAddr.addrMode = Addr64Bit;
   \   000012   740B         MOV     A,#0xb
   \   000014   12....       LCALL   ?XSTACK_DISP0_8
   \   000017   7403         MOV     A,#0x3
   \   000019   F0           MOVX    @DPTR,A
    989            osal_cpyExtAddr( SourceAddr.addr.extAddr, pReq->srcAddress );
   \   00001A                ; Setup parameters for call to function sAddrExtCpy
   \   00001A   12....       LCALL   ?XSTACK_DISP101_8
   \   00001D   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
    990          
    991            // If the local device is not the primary binding cache
    992            // check the src address of the bind request.
    993            // If it is not the local device's extended address
    994            // discard the request.
    995            if ( !osal_ExtAddrEqual( SourceAddr.addr.extAddr, NLME_GetExtAddr()) ||
    996                  (pReq->dstAddress.addrMode != Addr64Bit &&
    997                   pReq->dstAddress.addrMode != AddrGroup) )
   \   000020                ; Setup parameters for call to function NLME_GetExtAddr
   \   000020   12....       LCALL   `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
   \   000023   8A..         MOV     ?V0,R2
   \   000025   8B..         MOV     ?V1,R3
   \   000027   AC..         MOV     R4,?V0
   \   000029   AD..         MOV     R5,?V1
   \   00002B                ; Setup parameters for call to function sAddrExtCmp
   \   00002B   7403         MOV     A,#0x3
   \   00002D   12....       LCALL   ?XSTACK_DISP101_8
   \   000030   12....       LCALL   `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   000033   E9           MOV     A,R1
   \   000034   600A         JZ      ??ZDO_ProcessBindUnbindReq_0
   \   000036   12....       LCALL   ?Subroutine97 & 0xFFFF
   \                     ??CrossCallReturnLabel_167:
   \   000039   6010         JZ      ??ZDO_ProcessBindUnbindReq_1
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   6401         XRL     A,#0x1
   \   00003E   600B         JZ      ??ZDO_ProcessBindUnbindReq_1
    998            {
    999              bindStat = ZDP_NOT_SUPPORTED;
   \                     ??ZDO_ProcessBindUnbindReq_0:
   \   000040   85..82       MOV     DPL,?XSP + 0
   \   000043   85..83       MOV     DPH,?XSP + 1
   \   000046   7484         MOV     A,#-0x7c
   \   000048   02....       LJMP    ??ZDO_ProcessBindUnbindReq_2 & 0xFFFF
   1000            }
   1001            else
   1002            {
   1003              // Check source & destination endpoints
   1004              if ( (pReq->srcEndpoint == 0 || pReq->srcEndpoint > MAX_ENDPOINTS)
   1005                  || (( pReq->dstAddress.addrMode == Addr64Bit ) &&
   1006                      (pReq->dstEndpoint == 0 || pReq->dstEndpoint > MAX_ENDPOINTS)) )
   \                     ??ZDO_ProcessBindUnbindReq_1:
   \   00004B   8E82         MOV     DPL,R6
   \   00004D   8F83         MOV     DPH,R7
   \   00004F   A3           INC     DPTR
   \   000050   A3           INC     DPTR
   \   000051   A3           INC     DPTR
   \   000052   A3           INC     DPTR
   \   000053   A3           INC     DPTR
   \   000054   A3           INC     DPTR
   \   000055   A3           INC     DPTR
   \   000056   A3           INC     DPTR
   \   000057   E0           MOVX    A,@DPTR
   \   000058   6012         JZ      ??ZDO_ProcessBindUnbindReq_3
   \   00005A   F4           CPL     A
   \   00005B   600F         JZ      ??ZDO_ProcessBindUnbindReq_3
   \   00005D   12....       LCALL   ?Subroutine97 & 0xFFFF
   \                     ??CrossCallReturnLabel_168:
   \   000060   7015         JNZ     ??ZDO_ProcessBindUnbindReq_4
   \   000062   EE           MOV     A,R6
   \   000063   12....       LCALL   ?Subroutine122 & 0xFFFF
   \                     ??CrossCallReturnLabel_210:
   \   000066   E0           MOVX    A,@DPTR
   \   000067   6003         JZ      ??ZDO_ProcessBindUnbindReq_3
   \   000069   F4           CPL     A
   \   00006A   700B         JNZ     ??ZDO_ProcessBindUnbindReq_4
   1007              {
   1008                bindStat = ZDP_INVALID_EP;
   \                     ??ZDO_ProcessBindUnbindReq_3:
   \   00006C   85..82       MOV     DPL,?XSP + 0
   \   00006F   85..83       MOV     DPH,?XSP + 1
   \   000072   7482         MOV     A,#-0x7e
   \   000074   02....       LJMP    ??ZDO_ProcessBindUnbindReq_2 & 0xFFFF
   1009              }
   1010              else
   1011              {
   1012                if ( inMsg->clusterID == Bind_req )
   \                     ??ZDO_ProcessBindUnbindReq_4:
   \   000077   12....       LCALL   ?Subroutine118 & 0xFFFF
   \                     ??CrossCallReturnLabel_202:
   \   00007A   6421         XRL     A,#0x21
   \   00007C   7002         JNZ     ??ZDO_ProcessBindUnbindReq_5
   \   00007E   A3           INC     DPTR
   \   00007F   E0           MOVX    A,@DPTR
   \                     ??ZDO_ProcessBindUnbindReq_5:
   \   000080   6003         JZ      $+5
   \   000082   02....       LJMP    ??ZDO_ProcessBindUnbindReq_6 & 0xFFFF
   1013                {
   1014                  // Assume the table is full
   1015                  bindStat = ZDP_TABLE_FULL;
   \   000085   85..82       MOV     DPL,?XSP + 0
   \   000088   85..83       MOV     DPH,?XSP + 1
   \   00008B   748C         MOV     A,#-0x74
   \   00008D   12....       LCALL   ?Subroutine34 & 0xFFFF
   1016          
   1017          #if defined( APP_TP ) || defined( APP_TP2 )
   1018                  // For ZigBee Conformance Testing
   1019                  if ( bindNumOfEntries() < gNWK_MAX_BINDING_ENTRIES )
   1020          #endif
   1021                  {
   1022          #if !defined ( ZDP_BIND_SKIP_VALIDATION )
   1023                    uint16 nwkAddr;
   1024          
   1025                    // Verifies that a valid NWK address exists for the device
   1026                    // before creating a Binding entry. If NWK address does not
   1027                    // exist the request is sent out and the BindReq is saved, to
   1028                    // create the Bind Entry once the NwkAddrRsp is received
   1029                    if ( ( pReq->dstAddress.addrMode == Addr64Bit ) &&
   1030                         ( APSME_LookupNwkAddr( pReq->dstAddress.addr.extAddr, &nwkAddr ) == FALSE ) )
   \                     ??CrossCallReturnLabel_53:
   \   000090   6403         XRL     A,#0x3
   \   000092   6003         JZ      $+5
   \   000094   02....       LJMP    ??ZDO_ProcessBindUnbindReq_7 & 0xFFFF
   \   000097                ; Setup parameters for call to function APSME_LookupNwkAddr
   \   000097   7401         MOV     A,#0x1
   \   000099   12....       LCALL   ?XSTACK_DISP102_8
   \   00009C   EE           MOV     A,R6
   \   00009D   240B         ADD     A,#0xb
   \   00009F   FA           MOV     R2,A
   \   0000A0   E4           CLR     A
   \   0000A1   3F           ADDC    A,R7
   \   0000A2   FB           MOV     R3,A
   \   0000A3   12....       LCALL   `??APSME_LookupNwkAddr::?relay`; Banked call to: APSME_LookupNwkAddr
   \   0000A6   E9           MOV     A,R1
   \   0000A7   6003         JZ      $+5
   \   0000A9   02....       LJMP    ??ZDO_ProcessBindUnbindReq_7 & 0xFFFF
   1031                    {
   1032                      // find an empty bind slot in the pending Bind Req list
   1033                      ZDO_PendingBindReq_t *pPendingBind;
   1034          
   1035                      if ( ( pPendingBind = ZDApp_GetEmptyPendingBindReq() ) != NULL )
   \   0000AC                ; Setup parameters for call to function ZDApp_GetEmptyPendingBindReq
   \   0000AC   12....       LCALL   `??ZDApp_GetEmptyPendingBindReq::?relay`; Banked call to: ZDApp_GetEmptyPendingBindReq
   \   0000AF   8A..         MOV     ?V6,R2
   \   0000B1   8B..         MOV     ?V7,R3
   \   0000B3   EA           MOV     A,R2
   \   0000B4   45..         ORL     A,?V7
   \   0000B6   7003         JNZ     $+5
   \   0000B8   02....       LJMP    ??ZDO_ProcessBindUnbindReq_8 & 0xFFFF
   1036                      {
   1037                        // copy the received request into the empty slot and all required info
   1038                        osal_memcpy( &(pPendingBind->bindReq), pReq, sizeof( ZDO_BindUnbindReq_t ) );
   \   0000BB                ; Setup parameters for call to function osal_memcpy
   \   0000BB   8E..         MOV     ?V0,R6
   \   0000BD   8F..         MOV     ?V1,R7
   \   0000BF   75..00       MOV     ?V2,#0x0
   \   0000C2   78..         MOV     R0,#?V0
   \   0000C4   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000C7   7C15         MOV     R4,#0x15
   \   0000C9   7D00         MOV     R5,#0x0
   \   0000CB   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000CE   7403         MOV     A,#0x3
   \   0000D0   12....       LCALL   ?DEALLOC_XSTACK8
   1039          
   1040                        pPendingBind->srcAddr = inMsg->srcAddr;
   \   0000D3   85..82       MOV     DPL,?V4
   \   0000D6   85..83       MOV     DPH,?V5
   \   0000D9   A3           INC     DPTR
   \   0000DA   A3           INC     DPTR
   \   0000DB   E5..         MOV     A,?V6
   \   0000DD   2415         ADD     A,#0x15
   \   0000DF   FC           MOV     R4,A
   \   0000E0   E4           CLR     A
   \   0000E1   35..         ADDC    A,?V7
   \   0000E3   FD           MOV     R5,A
   \   0000E4   7409         MOV     A,#0x9
   \   0000E6   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
   1041                        pPendingBind->securityUse = inMsg->SecurityUse;
   \   0000E9   12....       LCALL   ?Subroutine104 & 0xFFFF
   \                     ??CrossCallReturnLabel_175:
   \   0000EC   C0E0         PUSH    A
   \   0000EE   E5..         MOV     A,?V6
   \   0000F0   241E         ADD     A,#0x1e
   \   0000F2   F582         MOV     DPL,A
   \   0000F4   E4           CLR     A
   \   0000F5   35..         ADDC    A,?V7
   \   0000F7   F583         MOV     DPH,A
   \   0000F9   D0E0         POP     A
   \   0000FB   F0           MOVX    @DPTR,A
   1042                        pPendingBind->transSeq = inMsg->TransSeq;
   \   0000FC   12....       LCALL   ?Subroutine112 & 0xFFFF
   \                     ??CrossCallReturnLabel_189:
   \   0000FF   C0E0         PUSH    A
   \   000101   E5..         MOV     A,?V6
   \   000103   241F         ADD     A,#0x1f
   \   000105   F582         MOV     DPL,A
   \   000107   E4           CLR     A
   \   000108   35..         ADDC    A,?V7
   \   00010A   F583         MOV     DPH,A
   \   00010C   D0E0         POP     A
   \   00010E   F0           MOVX    @DPTR,A
   1043                        pPendingBind->age = MAX_TIME_ADDR_REQ;
   \   00010F   E5..         MOV     A,?V6
   \   000111   2420         ADD     A,#0x20
   \   000113   F582         MOV     DPL,A
   \   000115   E4           CLR     A
   \   000116   35..         ADDC    A,?V7
   \   000118   F583         MOV     DPH,A
   \   00011A   7405         MOV     A,#0x5
   \   00011C   F0           MOVX    @DPTR,A
   1044          
   1045                        // create an entry in Address Manager
   1046                        ( void )bindAddrIndexGet( &(pReq->dstAddress) );
   \   00011D   EE           MOV     A,R6
   \   00011E   240B         ADD     A,#0xb
   \   000120   FE           MOV     R6,A
   \   000121   5001         JNC     ??ZDO_ProcessBindUnbindReq_9
   \   000123   0F           INC     R7
   \                     ??ZDO_ProcessBindUnbindReq_9:
   \   000124                ; Setup parameters for call to function bindAddrIndexGet
   \   000124   FA           MOV     R2,A
   \   000125   EF           MOV     A,R7
   \   000126   FB           MOV     R3,A
   \   000127   12....       LCALL   `??bindAddrIndexGet::?relay`; Banked call to: bindAddrIndexGet
   1047          
   1048                        ZDP_NwkAddrReq( pReq->dstAddress.addr.extAddr, ZDP_ADDR_REQTYPE_SINGLE, 0, 0 );
   \   00012A                ; Setup parameters for call to function ZDP_NwkAddrReq
   \   00012A   7D00         MOV     R5,#0x0
   \   00012C   7C00         MOV     R4,#0x0
   \   00012E   7900         MOV     R1,#0x0
   \   000130   EE           MOV     A,R6
   \   000131   FA           MOV     R2,A
   \   000132   EF           MOV     A,R7
   \   000133   FB           MOV     R3,A
   \   000134   12....       LCALL   `??ZDP_NwkAddrReq::?relay`; Banked call to: ZDP_NwkAddrReq
   1049          
   1050                        osal_start_timerEx( ZDAppTaskID, ZDO_PENDING_BIND_REQ_EVT,
   1051                                            AGE_OUT_PEND_BIND_REQ_DELAY );
   \   000137                ; Setup parameters for call to function osal_start_timerEx
   \   000137   90....       MOV     DPTR,#__Constant_3e8
   \   00013A   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   00013D   7A00         MOV     R2,#0x0
   \   00013F   7B10         MOV     R3,#0x10
   \   000141   90....       MOV     DPTR,#ZDAppTaskID
   \   000144   E0           MOVX    A,@DPTR
   \   000145   F9           MOV     R1,A
   \   000146   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000149   7404         MOV     A,#0x4
   \   00014B   12....       LCALL   ?DEALLOC_XSTACK8
   1052                        return;
   \   00014E   8077         SJMP    ??ZDO_ProcessBindUnbindReq_10
   1053                      }
   1054                    }
   1055                    // Add Bind entry
   1056                    else if ( APSME_BindRequest( pReq->srcEndpoint, pReq->clusterID,
   1057                                                 &(pReq->dstAddress), pReq->dstEndpoint ) == ZSuccess )
   \                     ??ZDO_ProcessBindUnbindReq_7:
   \   000150                ; Setup parameters for call to function APSME_BindRequest
   \   000150   12....       LCALL   ?Subroutine182 & 0xFFFF
   1058                    {
   1059                      // valid entry
   1060                      bindStat = ZDP_SUCCESS;
   1061          
   1062                      // Notify to save info into NV
   1063                      ZDApp_NVUpdate();
   1064                    }
   1065          #else // ZDP_BIND_SKIP_VALIDATION  is defined
   1066                    // Create binding entry first independently of existance of  valid NWK addres
   1067                    // if NWK address does not exist a request is sent out
   1068                    if ( APSME_BindRequest( pReq->srcEndpoint, pReq->clusterID,
   1069                                   &(pReq->dstAddress), pReq->dstEndpoint ) == ZSuccess )
   1070                    {
   1071                      uint16 nwkAddr;
   1072          
   1073                      // valid entry
   1074                      bindStat = ZDP_SUCCESS;
   1075          
   1076                      // Notify to save info into NV
   1077                      ZDApp_NVUpdate();
   1078          
   1079                      // Check for the destination address
   1080                      if ( pReq->dstAddress.addrMode == Addr64Bit )
   1081                      {
   1082                        if ( APSME_LookupNwkAddr( pReq->dstAddress.addr.extAddr, &nwkAddr ) == FALSE )
   1083                        {
   1084                          ZDP_NwkAddrReq( pReq->dstAddress.addr.extAddr, ZDP_ADDR_REQTYPE_SINGLE, 0, 0 );
   1085                        }
   1086                      }
   1087                    }
   1088          #endif
   1089                  }
   1090                }
   \                     ??CrossCallReturnLabel_318:
   \   000153   12....       LCALL   ??Subroutine190_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_321:
   \   000156   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000159   12....       LCALL   ?Subroutine62 & 0xFFFF
   \                     ??CrossCallReturnLabel_104:
   \   00015C   12....       LCALL   `??APSME_BindRequest::?relay`; Banked call to: APSME_BindRequest
   \   00015F   7401         MOV     A,#0x1
   \   000161   12....       LCALL   ?DEALLOC_XSTACK8
   \   000164   E9           MOV     A,R1
   \   000165   702F         JNZ     ??ZDO_ProcessBindUnbindReq_8
   \   000167   8017         SJMP    ??ZDO_ProcessBindUnbindReq_11
   1091                else // Unbind_req
   1092                {
   1093                  if ( APSME_UnBindRequest( pReq->srcEndpoint, pReq->clusterID,
   1094                                 &(pReq->dstAddress), pReq->dstEndpoint ) == ZSuccess )
   \                     ??ZDO_ProcessBindUnbindReq_6:
   \   000169                ; Setup parameters for call to function APSME_UnBindRequest
   \   000169   12....       LCALL   ?Subroutine182 & 0xFFFF
   \                     ??CrossCallReturnLabel_319:
   \   00016C   12....       LCALL   ??Subroutine190_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_322:
   \   00016F   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000172   12....       LCALL   ?Subroutine62 & 0xFFFF
   \                     ??CrossCallReturnLabel_105:
   \   000175   12....       LCALL   `??APSME_UnBindRequest::?relay`; Banked call to: APSME_UnBindRequest
   \   000178   7401         MOV     A,#0x1
   \   00017A   12....       LCALL   ?DEALLOC_XSTACK8
   \   00017D   E9           MOV     A,R1
   \   00017E   700D         JNZ     ??ZDO_ProcessBindUnbindReq_12
   1095                  {
   1096                    bindStat = ZDP_SUCCESS;
   \                     ??ZDO_ProcessBindUnbindReq_11:
   \   000180   85..82       MOV     DPL,?XSP + 0
   \   000183   85..83       MOV     DPH,?XSP + 1
   \   000186   E4           CLR     A
   \   000187   F0           MOVX    @DPTR,A
   1097          
   1098                    // Notify to save info into NV
   1099                    ZDApp_NVUpdate();
   \   000188                ; Setup parameters for call to function ZDApp_NVUpdate
   \   000188   12....       LCALL   `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
   \   00018B   8009         SJMP    ??ZDO_ProcessBindUnbindReq_8
   1100                  }
   1101                  else
   1102                    bindStat = ZDP_NO_ENTRY;
   \                     ??ZDO_ProcessBindUnbindReq_12:
   \   00018D   85..82       MOV     DPL,?XSP + 0
   \   000190   85..83       MOV     DPH,?XSP + 1
   \   000193   7488         MOV     A,#-0x78
   \                     ??ZDO_ProcessBindUnbindReq_2:
   \   000195   F0           MOVX    @DPTR,A
   1103                }
   1104              }
   1105            }
   1106          
   1107            // Send back a response message
   1108            ZDP_SendData( &(inMsg->TransSeq), &(inMsg->srcAddr),
   1109                         (inMsg->clusterID | ZDO_RESPONSE_BIT), 1, &bindStat,
   1110                         inMsg->SecurityUse );
   \                     ??ZDO_ProcessBindUnbindReq_8:
   \   000196                ; Setup parameters for call to function ZDP_SendData
   \   000196   12....       LCALL   ?Subroutine83 & 0xFFFF
   \                     ??CrossCallReturnLabel_323:
   \   000199   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00019C   7401         MOV     A,#0x1
   \   00019E   12....       LCALL   ?XSTACK_DISP100_8
   \   0001A1   88..         MOV     ?V0,R0
   \   0001A3   89..         MOV     ?V1,R1
   \   0001A5   78..         MOV     R0,#?V0
   \   0001A7   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001AA   12....       LCALL   ?Subroutine118 & 0xFFFF
   \                     ??CrossCallReturnLabel_203:
   \   0001AD   F5..         MOV     ?V0,A
   \   0001AF   A3           INC     DPTR
   \   0001B0   E0           MOVX    A,@DPTR
   \   0001B1   4480         ORL     A,#0x80
   \   0001B3   F5..         MOV     ?V1,A
   \   0001B5   78..         MOV     R0,#?V0
   \   0001B7   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001BA   7901         MOV     R1,#0x1
   \   0001BC   12....       LCALL   ?Subroutine109 & 0xFFFF
   \                     ??CrossCallReturnLabel_184:
   \   0001BF   12....       LCALL   `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   0001C2   7405         MOV     A,#0x5
   \   0001C4   12....       LCALL   ?DEALLOC_XSTACK8
   1111          }
   \                     ??ZDO_ProcessBindUnbindReq_10:
   \   0001C7   740C         MOV     A,#0xc
   \   0001C9   02....       LJMP    ?Subroutine7 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine182:
   \   000000   EE           MOV     A,R6
   \   000001                REQUIRE ??Subroutine189_0
   \   000001                ; // Fall through to label ??Subroutine189_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine189_0:
   \   000000   2414         ADD     A,#0x14
   \   000002   F582         MOV     DPL,A
   \   000004   E4           CLR     A
   \   000005   3F           ADDC    A,R7
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine118:
   \   000000   E5..         MOV     A,?V4
   \   000002   240C         ADD     A,#0xc
   \   000004   F582         MOV     DPL,A
   \   000006   E4           CLR     A
   \   000007   35..         ADDC    A,?V5
   \   000009   F583         MOV     DPH,A
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine97:
   \   000000   12....       LCALL   ?Subroutine163 & 0xFFFF
   \                     ??CrossCallReturnLabel_280:
   \   000003   6403         XRL     A,#0x3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine83:
   \   000000   12....       LCALL   ?Subroutine159 & 0xFFFF
   \                     ??CrossCallReturnLabel_470:
   \   000003   35..         ADDC    A,?V5
   \   000005                REQUIRE ??Subroutine190_0
   \   000005                ; // Fall through to label ??Subroutine190_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine190_0:
   \   000000   F583         MOV     DPH,A
   \   000002                REQUIRE ??Subroutine191_0
   \   000002                ; // Fall through to label ??Subroutine191_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine62:
   \   000000   EE           MOV     A,R6
   \   000001   240B         ADD     A,#0xb
   \   000003   FC           MOV     R4,A
   \   000004   E4           CLR     A
   \   000005   3F           ADDC    A,R7
   \   000006   FD           MOV     R5,A
   \   000007   8E82         MOV     DPL,R6
   \   000009   8F83         MOV     DPH,R7
   \   00000B   A3           INC     DPTR
   \   00000C   A3           INC     DPTR
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   12....       LCALL   ??Subroutine234_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_535:
   \   000017   FB           MOV     R3,A
   \   000018   8E82         MOV     DPL,R6
   \   00001A   8F83         MOV     DPH,R7
   \   00001C   A3           INC     DPTR
   \   00001D   A3           INC     DPTR
   \   00001E   A3           INC     DPTR
   \   00001F   A3           INC     DPTR
   \   000020   A3           INC     DPTR
   \   000021   A3           INC     DPTR
   \   000022   A3           INC     DPTR
   \   000023   A3           INC     DPTR
   \   000024   E0           MOVX    A,@DPTR
   \   000025   F9           MOV     R1,A
   \   000026   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine122:
   \   000000   12....       LCALL   ?Subroutine170 & 0xFFFF
   \                     ??CrossCallReturnLabel_292:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine170:
   \   000000   12....       LCALL   ??Subroutine189_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_317:
   \   000003   F583         MOV     DPH,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine109:
   \   000000   E5..         MOV     A,?V4
   \   000002   2402         ADD     A,#0x2
   \   000004   FC           MOV     R4,A
   \   000005   E4           CLR     A
   \   000006   35..         ADDC    A,?V5
   \   000008   FD           MOV     R5,A
   \   000009   E5..         MOV     A,?V4
   \   00000B   240F         ADD     A,#0xf
   \   00000D   FA           MOV     R2,A
   \   00000E   E4           CLR     A
   \   00000F   35..         ADDC    A,?V5
   \   000011   FB           MOV     R3,A
   \   000012   22           RET
   1112          #endif // REFLECTOR
   1113          
   1114          /*********************************************************************
   1115           * @fn      ZDO_UpdateAddrManager
   1116           *
   1117           * @brief   Update the Address Manager.
   1118           *
   1119           * @param   nwkAddr - network address
   1120           * @param   extAddr - extended address
   1121           *
   1122           * @return  none
   1123           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1124          void ZDO_UpdateAddrManager( uint16 nwkAddr, uint8 *extAddr )
   \                     ZDO_UpdateAddrManager:
   1125          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 13
   \   000004   74F3         MOV     A,#-0xd
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
   1126            AddrMgrEntry_t addrEntry;
   1127          
   1128            // Update the address manager
   1129            addrEntry.user = ADDRMGR_USER_DEFAULT;
   \   000009   85..82       MOV     DPL,?XSP + 0
   \   00000C   85..83       MOV     DPH,?XSP + 1
   \   00000F   E4           CLR     A
   \   000010   F0           MOVX    @DPTR,A
   1130            addrEntry.nwkAddr = nwkAddr;
   \   000011   04           INC     A
   \   000012   12....       LCALL   ?XSTACK_DISP0_8
   \   000015   12....       LCALL   ?Subroutine22 & 0xFFFF
   1131            AddrMgrExtAddrSet( addrEntry.extAddr, extAddr );
   \                     ??CrossCallReturnLabel_332:
   \   000018                ; Setup parameters for call to function AddrMgrExtAddrSet
   \   000018   7403         MOV     A,#0x3
   \   00001A   12....       LCALL   ?XSTACK_DISP0_8
   \   00001D   AA82         MOV     R2,DPL
   \   00001F   AB83         MOV     R3,DPH
   \   000021   12....       LCALL   `??AddrMgrExtAddrSet::?relay`; Banked call to: AddrMgrExtAddrSet
   1132            AddrMgrEntryUpdate( &addrEntry );
   \   000024                ; Setup parameters for call to function AddrMgrEntryUpdate
   \   000024   AA..         MOV     R2,?XSP + 0
   \   000026   AB..         MOV     R3,?XSP + 1
   \   000028   12....       LCALL   `??AddrMgrEntryUpdate::?relay`; Banked call to: AddrMgrEntryUpdate
   1133          }
   \   00002B   740D         MOV     A,#0xd
   \   00002D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000030   02....       LJMP    ?Subroutine0 & 0xFFFF
   1134          
   1135          /*********************************************************************
   1136           * @fn      ZDO_ProcessServerDiscReq
   1137           *
   1138           * @brief   Process the Server_Discovery_req message.
   1139           *
   1140           * @param   inMsg  - incoming message (request)
   1141           *
   1142           * @return  none
   1143           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1144          void ZDO_ProcessServerDiscReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessServerDiscReq:
   1145          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL   ?Subroutine99 & 0xFFFF
   1146            uint16 serverMask = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
   1147            uint16 matchMask = serverMask & ZDO_Config_Node_Descriptor.ServerMask;
   \                     ??CrossCallReturnLabel_338:
   \   000008   12....       LCALL   ?Subroutine68 & 0xFFFF
   \                     ??CrossCallReturnLabel_114:
   \   00000B   FA           MOV     R2,A
   \   00000C   A3           INC     DPTR
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   F9           MOV     R1,A
   \   00000F   EA           MOV     A,R2
   \   000010   F8           MOV     R0,A
   \   000011   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 8
   \   000014   E0           MOVX    A,@DPTR
   \   000015   58           ANL     A,R0
   \   000016   F5..         MOV     ?V0,A
   \   000018   A3           INC     DPTR
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   59           ANL     A,R1
   \   00001B   F5..         MOV     ?V1,A
   1148          
   1149            if ( matchMask )
   \   00001D   E5..         MOV     A,?V0
   \   00001F   45..         ORL     A,?V1
   \   000021   601B         JZ      ??ZDO_ProcessServerDiscReq_0
   1150            {
   1151              ZDP_ServerDiscRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZSUCCESS,
   1152                          ZDAppNwkAddr.addr.shortAddr, matchMask, inMsg->SecurityUse );
   \   000023                ; Setup parameters for call to function ZDP_ServerDiscRsp
   \   000023   78..         MOV     R0,#?V0
   \   000025   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000028   90....       MOV     DPTR,#ZDAppNwkAddr
   \   00002B   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00002E   12....       LCALL   ?Subroutine105 & 0xFFFF
   1153            }
   \                     ??CrossCallReturnLabel_176:
   \   000031   7C00         MOV     R4,#0x0
   \   000033   12....       LCALL   ?Subroutine102 & 0xFFFF
   \                     ??CrossCallReturnLabel_171:
   \   000036   12....       LCALL   `??ZDP_ServerDiscRsp::?relay`; Banked call to: ZDP_ServerDiscRsp
   \   000039   7404         MOV     A,#0x4
   \   00003B   12....       LCALL   ?DEALLOC_XSTACK8
   1154          }
   \                     ??ZDO_ProcessServerDiscReq_0:
   \   00003E   02....       LJMP    ??Subroutine187_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine99:
   \   000000   EA           MOV     A,R2
   \   000001   FE           MOV     R6,A
   \   000002   EB           MOV     A,R3
   \   000003   FF           MOV     R7,A
   \   000004                REQUIRE ??Subroutine194_0
   \   000004                ; // Fall through to label ??Subroutine194_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine194_0:
   \   000000   12....       LCALL   ?Subroutine164 & 0xFFFF
   \                     ??CrossCallReturnLabel_395:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine105:
   \   000000   12....       LCALL   ?Subroutine158 & 0xFFFF
   \                     ??CrossCallReturnLabel_273:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine102:
   \   000000   12....       LCALL   ?Subroutine160 & 0xFFFF
   \                     ??CrossCallReturnLabel_275:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine68:
   \   000000   F583         MOV     DPH,A
   \   000002   12....       LCALL   ?Subroutine148 & 0xFFFF
   \                     ??CrossCallReturnLabel_559:
   \   000005   8882         MOV     DPL,R0
   \   000007   8983         MOV     DPH,R1
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   22           RET
   1155          
   1156          #if defined ( ZIGBEE_CHILD_AGING )
   1157          /*********************************************************************
   1158           * @fn          ZDO_ProcessEndDeviceTimeoutReq
   1159           *
   1160           * @brief       This function processes and responds to the
   1161           *              End_Device_Timeout_Req message.
   1162           *
   1163           * @param       inMsg  - incoming message (request)
   1164           *
   1165           * @return      none
   1166           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1167          void ZDO_ProcessEndDeviceTimeoutReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessEndDeviceTimeoutReq:
   1168          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1169            uint8 stat = ZDP_SUCCESS;
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   E4           CLR     A
   \   000011   F0           MOVX    @DPTR,A
   1170            uint8 *ieee = NULL;
   1171            uint16 reqTimeout;
   1172          
   1173            // Only process this message if Child Table Management is enabled OR
   1174            // If message was broadcast OR multicast OR
   1175            // if the NWK src and the MAC src are not the same) drop message
   1176            if ( ( zgChildAgingEnable == FALSE ) ||
   1177                 ( inMsg->wasBroadcast == TRUE ) ||
   1178                 ( inMsg->srcAddr.addr.shortAddr != inMsg->macSrcAddr ) )
   \   000012   90....       MOV     DPTR,#zgChildAgingEnable
   \   000015   E0           MOVX    A,@DPTR
   \   000016   6068         JZ      ??ZDO_ProcessEndDeviceTimeoutReq_0
   \   000018   EA           MOV     A,R2
   \   000019   12....       LCALL   ?Subroutine167 & 0xFFFF
   \                     ??CrossCallReturnLabel_283:
   \   00001C   3B           ADDC    A,R3
   \   00001D   F583         MOV     DPH,A
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   6401         XRL     A,#0x1
   \   000022   605C         JZ      ??ZDO_ProcessEndDeviceTimeoutReq_0
   \   000024   8A82         MOV     DPL,R2
   \   000026   8B83         MOV     DPH,R3
   \   000028   12....       LCALL   ??Subroutine200_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_368:
   \   00002B   EA           MOV     A,R2
   \   00002C   2415         ADD     A,#0x15
   \   00002E   F582         MOV     DPL,A
   \   000030   E4           CLR     A
   \   000031   3B           ADDC    A,R3
   \   000032   F583         MOV     DPH,A
   \   000034   E0           MOVX    A,@DPTR
   \   000035   68           XRL     A,R0
   \   000036   7003         JNZ     ??ZDO_ProcessEndDeviceTimeoutReq_1
   \   000038   A3           INC     DPTR
   \   000039   E0           MOVX    A,@DPTR
   \   00003A   69           XRL     A,R1
   \                     ??ZDO_ProcessEndDeviceTimeoutReq_1:
   \   00003B   7043         JNZ     ??ZDO_ProcessEndDeviceTimeoutReq_0
   1179            {
   1180              // the message does not come from a child, drop it
   1181              return;
   1182            }
   1183          
   1184            ieee = inMsg->asdu;
   1185          
   1186            reqTimeout = BUILD_UINT16( inMsg->asdu[Z_EXTADDR_LEN], inMsg->asdu[Z_EXTADDR_LEN+1] );
   1187          
   1188            if ( ( ( reqTimeout < ZDO_MIN_REQ_TIMEOUT ) || ( reqTimeout > ZDO_MAX_REQ_TIMEOUT ) ) ||
   1189                 ( ZSTACK_END_DEVICE_BUILD ) )
   1190            {
   1191              stat = ZDP_INVALID_REQTYPE;
   \   00003D   85..82       MOV     DPL,?XSP + 0
   \   000040   85..83       MOV     DPH,?XSP + 1
   \   000043   7480         MOV     A,#-0x80
   \   000045   12....       LCALL   ?Subroutine36 & 0xFFFF
   1192            }
   1193            else
   1194            {
   1195              associated_devices_t *pAssoc;
   1196          
   1197              if ( ( ( pAssoc = AssocGetWithExt( ieee ) ) != NULL ) &&
   1198                   ( ( pAssoc->nodeRelation >= CHILD_RFD ) &&
   1199                     ( pAssoc->nodeRelation <= CHILD_RFD_RX_IDLE ) ) )
   1200              {
   1201                pAssoc->timeoutCounter = reqTimeout;
   1202                pAssoc->endDevKaTimeout = reqTimeout;
   1203          
   1204                // Set event to save NV
   1205                ZDApp_NVUpdate();
   1206              }
   1207              else
   1208              {
   1209                stat = ZDP_DEVICE_NOT_FOUND;
   1210              }
   1211          
   1212            }
   1213          
   1214            ZDP_EndDeviceTimeoutRsp( inMsg->TransSeq, &(inMsg->srcAddr), stat,
   1215                                     inMsg->SecurityUse );
   \                     ??CrossCallReturnLabel_56:
   \   000048   F5..         MOV     ?V0,A
   \   00004A   78..         MOV     R0,#?V0
   \   00004C   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00004F   7401         MOV     A,#0x1
   \   000051   12....       LCALL   ?XSTACK_DISP100_8
   \   000054   88..         MOV     ?V0,R0
   \   000056   89..         MOV     ?V1,R1
   \   000058   78..         MOV     R0,#?V0
   \   00005A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005D   75..1F       MOV     ?V0,#0x1f
   \   000060   75..80       MOV     ?V1,#-0x80
   \   000063   78..         MOV     R0,#?V0
   \   000065   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000068   7901         MOV     R1,#0x1
   \   00006A   EA           MOV     A,R2
   \   00006B   2402         ADD     A,#0x2
   \   00006D   FC           MOV     R4,A
   \   00006E   E4           CLR     A
   \   00006F   3B           ADDC    A,R3
   \   000070   FD           MOV     R5,A
   \   000071   EA           MOV     A,R2
   \   000072   240F         ADD     A,#0xf
   \   000074   FA           MOV     R2,A
   \   000075   5001         JNC     ??ZDO_ProcessEndDeviceTimeoutReq_2
   \   000077   0B           INC     R3
   \                     ??ZDO_ProcessEndDeviceTimeoutReq_2:
   \   000078   12....       LCALL   `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   00007B   7405         MOV     A,#0x5
   \   00007D   12....       LCALL   ?DEALLOC_XSTACK8
   1216          }
   \                     ??ZDO_ProcessEndDeviceTimeoutReq_0:
   \   000080                REQUIRE ?Subroutine8
   \   000080                ; // Fall through to label ?Subroutine8

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   7401         MOV     A,#0x1
   \   000002   02....       LJMP    ??Subroutine186_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function ZDP_SendData
   \   000001   EA           MOV     A,R2
   \   000002   12....       LCALL   ??Subroutine224_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_467:
   \   000005   3B           ADDC    A,R3
   \   000006   F583         MOV     DPH,A
   \   000008   E0           MOVX    A,@DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine167:
   \   000000   240B         ADD     A,#0xb
   \   000002   F582         MOV     DPL,A
   \   000004   E4           CLR     A
   \   000005   22           RET
   1217          #endif // ZIGBEE_CHILD_AGING
   1218          
   1219          /*********************************************************************
   1220           * Call Back Functions from APS  - API
   1221           */
   1222          
   1223          /*********************************************************************
   1224           * @fn          ZDO_EndDeviceTimeoutCB
   1225           *
   1226           * @brief       This function handles the binding timer for the End
   1227           *              Device Bind command.
   1228           *
   1229           * @param       none
   1230           *
   1231           * @return      none
   1232           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1233          void ZDO_EndDeviceTimeoutCB( void )
   \                     ZDO_EndDeviceTimeoutCB:
   1234          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1235          #if defined ( REFLECTOR )
   1236            byte stat;
   1237            if ( ZDO_EDBind )
   \   00000A   90....       MOV     DPTR,#ZDO_EDBind
   \   00000D   12....       LCALL   ??Subroutine235_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_546:
   \   000010   7003         JNZ     $+5
   \   000012   02....       LJMP    ??ZDO_EndDeviceTimeoutCB_0 & 0xFFFF
   1238            {
   1239              stat = ZDO_EDBind->status;
   1240          
   1241              // Send the response message to the first sent
   1242              ZDO_SendEDBindRsp( ZDO_EDBind->SrcTransSeq, &(ZDO_EDBind->SrcAddr),
   1243                                  stat, ZDO_EDBind->SecurityUse );
   \   000015   E0           MOVX    A,@DPTR
   \   000016   C8           XCH     A,R0
   \   000017   2415         ADD     A,#0x15
   \   000019   12....       LCALL   ?Subroutine180 & 0xFFFF
   \                     ??CrossCallReturnLabel_315:
   \   00001C   F8           MOV     R0,A
   \   00001D   90....       MOV     DPTR,#ZDO_EDBind
   \   000020   E0           MOVX    A,@DPTR
   \   000021   F9           MOV     R1,A
   \   000022   A3           INC     DPTR
   \   000023   E0           MOVX    A,@DPTR
   \   000024   C9           XCH     A,R1
   \   000025   2416         ADD     A,#0x16
   \   000027   F582         MOV     DPL,A
   \   000029   E4           CLR     A
   \   00002A   39           ADDC    A,R1
   \   00002B   F583         MOV     DPH,A
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   C0E0         PUSH    A
   \   000030   7401         MOV     A,#0x1
   \   000032   12....       LCALL   ?XSTACK_DISP0_8
   \   000035   D0E0         POP     A
   \   000037   F0           MOVX    @DPTR,A
   \   000038   90....       MOV     DPTR,#ZDO_EDBind
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   2401         ADD     A,#0x1
   \   00003E   FC           MOV     R4,A
   \   00003F   A3           INC     DPTR
   \   000040   E0           MOVX    A,@DPTR
   \   000041   3400         ADDC    A,#0x0
   \   000043   FD           MOV     R5,A
   \   000044   90....       MOV     DPTR,#ZDO_EDBind
   \   000047   E0           MOVX    A,@DPTR
   \   000048   F9           MOV     R1,A
   \   000049   A3           INC     DPTR
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   F583         MOV     DPH,A
   \   00004D   8982         MOV     DPL,R1
   \   00004F   12....       LCALL   ?Subroutine94 & 0xFFFF
   \                     ??CrossCallReturnLabel_166:
   \   000052                ; Setup parameters for call to function ZDP_SendData
   \   000052   E8           MOV     A,R0
   \   000053   F5..         MOV     ?V0,A
   \   000055   78..         MOV     R0,#?V0
   \   000057   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00005A   7402         MOV     A,#0x2
   \   00005C   12....       LCALL   ?XSTACK_DISP100_8
   \   00005F   88..         MOV     ?V0,R0
   \   000061   89..         MOV     ?V1,R1
   \   000063   78..         MOV     R0,#?V0
   \   000065   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000068   75..20       MOV     ?V0,#0x20
   \   00006B   75..80       MOV     ?V1,#-0x80
   \   00006E   78..         MOV     R0,#?V0
   \   000070   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000073   7901         MOV     R1,#0x1
   \   000075   7405         MOV     A,#0x5
   \   000077   12....       LCALL   ?XSTACK_DISP101_8
   \   00007A   12....       LCALL   `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   00007D   7405         MOV     A,#0x5
   \   00007F   12....       LCALL   ?DEALLOC_XSTACK8
   1244          
   1245              ZDO_RemoveEndDeviceBind();
   1246            }
   \   000082   90....       MOV     DPTR,#ZDO_EDBind
   \   000085   12....       LCALL   ??Subroutine235_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_547:
   \   000088   603A         JZ      ??ZDO_EndDeviceTimeoutCB_0
   \   00008A   E0           MOVX    A,@DPTR
   \   00008B   C8           XCH     A,R0
   \   00008C   12....       LCALL   ?Subroutine125 & 0xFFFF
   \                     ??CrossCallReturnLabel_217:
   \   00008F   12....       LCALL   ??Subroutine235_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_548:
   \   000092   600F         JZ      ??ZDO_EndDeviceTimeoutCB_1
   \   000094                ; Setup parameters for call to function osal_mem_free
   \   000094   90....       MOV     DPTR,#ZDO_EDBind
   \   000097   12....       LCALL   ?Subroutine76 & 0xFFFF
   \                     ??CrossCallReturnLabel_130:
   \   00009A   12....       LCALL   ?Subroutine125 & 0xFFFF
   \                     ??CrossCallReturnLabel_218:
   \   00009D   12....       LCALL   ??Subroutine233_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_518:
   \   0000A0   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \                     ??ZDO_EndDeviceTimeoutCB_1:
   \   0000A3   12....       LCALL   ?Subroutine64 & 0xFFFF
   \                     ??CrossCallReturnLabel_342:
   \   0000A6   12....       LCALL   ??Subroutine235_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_549:
   \   0000A9   6009         JZ      ??ZDO_EndDeviceTimeoutCB_2
   \   0000AB                ; Setup parameters for call to function osal_mem_free
   \   0000AB   12....       LCALL   ?Subroutine64 & 0xFFFF
   \                     ??CrossCallReturnLabel_343:
   \   0000AE   12....       LCALL   ??Subroutine233_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_519:
   \   0000B1   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \                     ??ZDO_EndDeviceTimeoutCB_2:
   \   0000B4                ; Setup parameters for call to function osal_mem_free
   \   0000B4   90....       MOV     DPTR,#ZDO_EDBind
   \   0000B7   12....       LCALL   ??Subroutine233_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_520:
   \   0000BA   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0000BD   90....       MOV     DPTR,#ZDO_EDBind
   \   0000C0   E4           CLR     A
   \   0000C1   F0           MOVX    @DPTR,A
   \   0000C2   A3           INC     DPTR
   \   0000C3   F0           MOVX    @DPTR,A
   1247          #endif  // REFLECTOR
   1248          }
   \                     ??ZDO_EndDeviceTimeoutCB_0:
   \   0000C4   02....       LJMP    ?Subroutine2 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine125:
   \   000000   2410         ADD     A,#0x10
   \   000002   F582         MOV     DPL,A
   \   000004   E4           CLR     A
   \   000005   38           ADDC    A,R0
   \   000006   F583         MOV     DPH,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine64:
   \   000000   90....       MOV     DPTR,#ZDO_EDBind
   \   000003                REQUIRE ??Subroutine195_0
   \   000003                ; // Fall through to label ??Subroutine195_0
   1249          
   1250          /*********************************************************************
   1251           * Optional Management Messages
   1252           */
   1253          
   1254          /*********************************************************************
   1255           * @fn          ZDO_ProcessMgmtLqiReq
   1256           *
   1257           * @brief       This function handles parsing the incoming Management
   1258           *              LQI request and generate the response.
   1259           *
   1260           *   Note:      This function will limit the number of items returned
   1261           *              to ZDO_MAX_LQI_ITEMS items.
   1262           *
   1263           * @param       inMsg - incoming message (request)
   1264           *
   1265           * @return      none
   1266           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1267          void ZDO_ProcessMgmtLqiReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtLqiReq:
   1268          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 42
   \   000005   74D6         MOV     A,#-0x2a
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   7404         MOV     A,#0x4
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   12....       LCALL   ?Subroutine22 & 0xFFFF
   1269            byte x;
   1270            byte index;
   1271            byte numItems;
   1272            byte maxItems;
   1273            ZDP_MgmtLqiItem_t* table = NULL;
   \                     ??CrossCallReturnLabel_333:
   \   000012   7402         MOV     A,#0x2
   \   000014   12....       LCALL   ?XSTACK_DISP0_8
   \   000017   E4           CLR     A
   \   000018   F0           MOVX    @DPTR,A
   \   000019   A3           INC     DPTR
   \   00001A   F0           MOVX    @DPTR,A
   1274            ZDP_MgmtLqiItem_t* item;
   1275            neighborEntry_t    entry;
   1276            byte aItems;
   1277            associated_devices_t *aDevice;
   1278            AddrMgrEntry_t  nwkEntry;
   1279            uint8 StartIndex = inMsg->asdu[0];
   \   00001B   7404         MOV     A,#0x4
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   12....       LCALL   ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_90:
   \   000023   F5..         MOV     ?V7,A
   1280          
   1281            // Get the number of neighbor items
   1282            NLME_GetRequest( nwkNumNeighborTableEntries, 0, &maxItems );
   \   000025                ; Setup parameters for call to function NLME_GetRequest
   \   000025   AC..         MOV     R4,?XSP + 0
   \   000027   AD..         MOV     R5,?XSP + 1
   \   000029   7A00         MOV     R2,#0x0
   \   00002B   7B00         MOV     R3,#0x0
   \   00002D   799C         MOV     R1,#-0x64
   \   00002F   12....       LCALL   `??NLME_GetRequest::?relay`; Banked call to: NLME_GetRequest
   1283          
   1284            // Get the number of associated items
   1285            aItems = (uint8)AssocCount( PARENT, CHILD_FFD_RX_IDLE );
   \   000032                ; Setup parameters for call to function AssocCount
   \   000032   7A04         MOV     R2,#0x4
   \   000034   7900         MOV     R1,#0x0
   \   000036   12....       LCALL   `??AssocCount::?relay`; Banked call to: AssocCount
   \   000039   7401         MOV     A,#0x1
   \   00003B   12....       LCALL   ?XSTACK_DISP0_8
   \   00003E   EA           MOV     A,R2
   \   00003F   12....       LCALL   ?Subroutine33 & 0xFFFF
   1286          
   1287            // Total number of items
   1288            maxItems += aItems;
   \                     ??CrossCallReturnLabel_48:
   \   000042   2A           ADD     A,R2
   \   000043   F0           MOVX    @DPTR,A
   1289          
   1290            // Start with the supplied index
   1291            if ( maxItems > StartIndex )
   \   000044   F8           MOV     R0,A
   \   000045   E5..         MOV     A,?V7
   \   000047   C3           CLR     C
   \   000048   98           SUBB    A,R0
   \   000049   4003         JC      $+5
   \   00004B   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_0 & 0xFFFF
   1292            {
   1293              numItems = maxItems - StartIndex;
   \   00004E   E0           MOVX    A,@DPTR
   \   00004F   C3           CLR     C
   \   000050   95..         SUBB    A,?V7
   \   000052   F5..         MOV     ?V1,A
   1294          
   1295              // limit the size of the list
   1296              if ( numItems > ZDO_MAX_LQI_ITEMS )
   \   000054   C3           CLR     C
   \   000055   9404         SUBB    A,#0x4
   \   000057   4003         JC      ??ZDO_ProcessMgmtLqiReq_1
   1297                numItems = ZDO_MAX_LQI_ITEMS;
   \   000059   75..03       MOV     ?V1,#0x3
   1298          
   1299              // Allocate the memory to build the table
   1300              table = (ZDP_MgmtLqiItem_t*)osal_mem_alloc( (short)
   1301                        ( numItems * sizeof( ZDP_MgmtLqiItem_t ) ) );
   \                     ??ZDO_ProcessMgmtLqiReq_1:
   \   00005C                ; Setup parameters for call to function osal_mem_alloc
   \   00005C   E5..         MOV     A,?V1
   \   00005E   75F01A       MOV     B,#0x1a
   \   000061   A4           MUL     AB
   \   000062   FA           MOV     R2,A
   \   000063   ABF0         MOV     R3,B
   \   000065   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000068   7402         MOV     A,#0x2
   \   00006A   12....       LCALL   ?XSTACK_DISP0_8
   \   00006D   12....       LCALL   ?Subroutine22 & 0xFFFF
   1302          
   1303              if ( table != NULL )
   \                     ??CrossCallReturnLabel_334:
   \   000070   7402         MOV     A,#0x2
   \   000072   12....       LCALL   ?XSTACK_DISP0_8
   \   000075   12....       LCALL   ??Subroutine235_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_550:
   \   000078   7003         JNZ     $+5
   \   00007A   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_2 & 0xFFFF
   1304              {
   1305                x = 0;
   \   00007D   75..00       MOV     ?V6,#0x0
   1306                item = table;
   \   000080   7402         MOV     A,#0x2
   \   000082   12....       LCALL   ?XSTACK_DISP0_8
   \   000085   12....       LCALL   ?Subroutine155 & 0xFFFF
   1307                index = StartIndex;
   \                     ??CrossCallReturnLabel_266:
   \   000088   85....       MOV     ?V0,?V7
   \   00008B   807C         SJMP    ??ZDO_ProcessMgmtLqiReq_3
   1308          
   1309                // Loop through associated items and build list
   1310                for ( ; x < numItems; x++ )
   1311                {
   1312                  if ( index < aItems )
   1313                  {
   1314                    // get next associated device
   1315                    aDevice = AssocFindDevice( index++ );
   1316          
   1317                    // set basic fields
   1318                    item->panID   = _NIB.nwkPanId;
   1319                    osal_cpyExtAddr( item->extPanID, _NIB.extendedPANID );
   1320                    item->nwkAddr = aDevice->shortAddr;
   1321                    item->permit  = ZDP_MGMT_BOOL_UNKNOWN;
   1322                    item->depth   = 0xFF;
   1323                    item->lqi     = aDevice->linkInfo.rxLqi;
   1324          
   1325                    // set extented address
   1326                    nwkEntry.user    = ADDRMGR_USER_DEFAULT;
   1327                    nwkEntry.nwkAddr = aDevice->shortAddr;
   1328          
   1329                    if ( AddrMgrEntryLookupNwk( &nwkEntry ) == TRUE )
   1330                    {
   1331                      osal_cpyExtAddr( item->extAddr, nwkEntry.extAddr );
   1332                    }
   1333                    else
   1334                    {
   1335                      osal_memset( item->extAddr, 0xFF, Z_EXTADDR_LEN );
   \                     ??ZDO_ProcessMgmtLqiReq_4:
   \   00008D                ; Setup parameters for call to function osal_memset
   \   00008D   12....       LCALL   ?Subroutine113 & 0xFFFF
   1336                    }
   \                     ??CrossCallReturnLabel_352:
   \   000090   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   1337          
   1338                    // use association info to set other fields
   1339                    if ( aDevice->nodeRelation == PARENT )
   \                     ??ZDO_ProcessMgmtLqiReq_5:
   \   000093   85..82       MOV     DPL,?V4
   \   000096   85..83       MOV     DPH,?V5
   \   000099   A3           INC     DPTR
   \   00009A   A3           INC     DPTR
   \   00009B   A3           INC     DPTR
   \   00009C   A3           INC     DPTR
   \   00009D   E0           MOVX    A,@DPTR
   \   00009E   702B         JNZ     ??ZDO_ProcessMgmtLqiReq_6
   1340                    {
   1341                      if (  aDevice->shortAddr == 0 )
   \   0000A0   85..82       MOV     DPL,?V4
   \   0000A3   85..83       MOV     DPH,?V5
   \   0000A6   12....       LCALL   ??Subroutine235_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_551:
   \   0000A9   700A         JNZ     ??ZDO_ProcessMgmtLqiReq_7
   1342                      {
   1343                        item->devType = ZDP_MGMT_DT_COORD;
   \   0000AB   12....       LCALL   ?Subroutine119 & 0xFFFF
   \                     ??CrossCallReturnLabel_204:
   \   0000AE   F0           MOVX    @DPTR,A
   1344                        item->depth = 0;
   \   0000AF   12....       LCALL   ?Subroutine123 & 0xFFFF
   1345                      }
   \                     ??CrossCallReturnLabel_212:
   \   0000B2   E4           CLR     A
   \   0000B3   8010         SJMP    ??ZDO_ProcessMgmtLqiReq_8
   1346                      else
   1347                      {
   1348                        item->devType = ZDP_MGMT_DT_ROUTER;
   \                     ??ZDO_ProcessMgmtLqiReq_7:
   \   0000B5   12....       LCALL   ?Subroutine103 & 0xFFFF
   \                     ??CrossCallReturnLabel_357:
   \   0000B8   F0           MOVX    @DPTR,A
   1349                        item->depth = _NIB.nodeDepth - 1;
   \   0000B9   90....       MOV     DPTR,#_NIB + 52
   \   0000BC   E0           MOVX    A,@DPTR
   \   0000BD   14           DEC     A
   \   0000BE   C0E0         PUSH    A
   \   0000C0   12....       LCALL   ?Subroutine123 & 0xFFFF
   1350                      }
   1351          
   1352                      item->rxOnIdle = ZDP_MGMT_BOOL_UNKNOWN;
   1353                      item->relation = ZDP_MGMT_REL_PARENT;
   1354                    }
   \                     ??CrossCallReturnLabel_213:
   \   0000C3   D0E0         POP     A
   \                     ??ZDO_ProcessMgmtLqiReq_8:
   \   0000C5   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   0000C8   E4           CLR     A
   \   0000C9   8034         SJMP    ??CrossCallReturnLabel_355
   1355                    else
   1356                    {
   1357                      // If not parent, then it's a child
   1358                      item->depth = _NIB.nodeDepth + 1;
   \                     ??ZDO_ProcessMgmtLqiReq_6:
   \   0000CB   90....       MOV     DPTR,#_NIB + 52
   \   0000CE   E0           MOVX    A,@DPTR
   \   0000CF   04           INC     A
   \   0000D0   C0E0         PUSH    A
   \   0000D2   12....       LCALL   ?Subroutine123 & 0xFFFF
   \                     ??CrossCallReturnLabel_214:
   \   0000D5   D0E0         POP     A
   \   0000D7   12....       LCALL   ?Subroutine15 & 0xFFFF
   1359          
   1360                      if ( aDevice->nodeRelation < CHILD_FFD )
   \                     ??CrossCallReturnLabel_12:
   \   0000DA   C3           CLR     C
   \   0000DB   9403         SUBB    A,#0x3
   \   0000DD   EE           MOV     A,R6
   \   0000DE   4003         JC      $+5
   \   0000E0   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_9 & 0xFFFF
   1361                      {
   1362                        item->devType = ZDP_MGMT_DT_ENDDEV;
   \   0000E3   12....       LCALL   ?Subroutine122 & 0xFFFF
   1363          
   1364                        if ( aDevice->nodeRelation == CHILD_RFD )
   1365                        {
   1366                          item->rxOnIdle = FALSE;
   1367                        }
   1368                        else
   1369                        {
   1370                          item->rxOnIdle = TRUE;
   1371                        }
   1372                      }
   \                     ??CrossCallReturnLabel_211:
   \   0000E6   7402         MOV     A,#0x2
   \   0000E8   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   0000EB   6401         XRL     A,#0x1
   \   0000ED   7003         JNZ     $+5
   \   0000EF   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_10 & 0xFFFF
   1373                      else
   1374                      {
   1375                        item->devType = ZDP_MGMT_DT_ROUTER;
   1376          
   1377                        if ( aDevice->nodeRelation == CHILD_FFD )
   1378                        {
   1379                          item->rxOnIdle = FALSE;
   1380                        }
   1381                        else
   1382                        {
   1383                          item->rxOnIdle = TRUE;
   \                     ??ZDO_ProcessMgmtLqiReq_11:
   \   0000F2   EE           MOV     A,R6
   \   0000F3   2415         ADD     A,#0x15
   \   0000F5   12....       LCALL   ??Subroutine198_0 & 0xFFFF
   1384                        }
   \                     ??CrossCallReturnLabel_354:
   \   0000F8   F0           MOVX    @DPTR,A
   1385                      }
   1386          
   1387                      item->relation = ZDP_MGMT_REL_CHILD;
   \   0000F9   EE           MOV     A,R6
   \   0000FA   2416         ADD     A,#0x16
   \   0000FC   12....       LCALL   ??Subroutine198_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_355:
   \   0000FF   F0           MOVX    @DPTR,A
   1388                    }
   1389          
   1390                    item++;
   \   000100   EE           MOV     A,R6
   \   000101   241A         ADD     A,#0x1a
   \   000103   FE           MOV     R6,A
   \   000104   5001         JNC     ??ZDO_ProcessMgmtLqiReq_12
   \   000106   0F           INC     R7
   \                     ??ZDO_ProcessMgmtLqiReq_12:
   \   000107   05..         INC     ?V6
   \                     ??ZDO_ProcessMgmtLqiReq_3:
   \   000109   E5..         MOV     A,?V6
   \   00010B   C3           CLR     C
   \   00010C   95..         SUBB    A,?V1
   \   00010E   4003         JC      $+5
   \   000110   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_13 & 0xFFFF
   \   000113   7401         MOV     A,#0x1
   \   000115   12....       LCALL   ?XSTACK_DISP0_8
   \   000118   E0           MOVX    A,@DPTR
   \   000119   F8           MOV     R0,A
   \   00011A   E5..         MOV     A,?V0
   \   00011C   C3           CLR     C
   \   00011D   98           SUBB    A,R0
   \   00011E   4003         JC      $+5
   \   000120   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_14 & 0xFFFF
   \   000123                ; Setup parameters for call to function AssocFindDevice
   \   000123   AA..         MOV     R2,?V0
   \   000125   7B00         MOV     R3,#0x0
   \   000127   12....       LCALL   `??AssocFindDevice::?relay`; Banked call to: AssocFindDevice
   \   00012A   8A..         MOV     ?V4,R2
   \   00012C   8B..         MOV     ?V5,R3
   \   00012E   05..         INC     ?V0
   \   000130   90....       MOV     DPTR,#_NIB + 33
   \   000133   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   000136   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   000139   85..82       MOV     DPL,?V4
   \   00013C   85..83       MOV     DPH,?V5
   \   00013F   12....       LCALL   ??Subroutine201_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_362:
   \   000142   EE           MOV     A,R6
   \   000143   2412         ADD     A,#0x12
   \   000145   F582         MOV     DPL,A
   \   000147   E4           CLR     A
   \   000148   3F           ADDC    A,R7
   \   000149   F583         MOV     DPH,A
   \   00014B   E8           MOV     A,R0
   \   00014C   F0           MOVX    @DPTR,A
   \   00014D   A3           INC     DPTR
   \   00014E   E9           MOV     A,R1
   \   00014F   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   000152   85..82       MOV     DPL,?V4
   \   000155   85..83       MOV     DPH,?V5
   \   000158   A3           INC     DPTR
   \   000159   A3           INC     DPTR
   \   00015A   A3           INC     DPTR
   \   00015B   A3           INC     DPTR
   \   00015C   A3           INC     DPTR
   \   00015D   A3           INC     DPTR
   \   00015E   A3           INC     DPTR
   \   00015F   A3           INC     DPTR
   \   000160   A3           INC     DPTR
   \   000161   A3           INC     DPTR
   \   000162   E0           MOVX    A,@DPTR
   \   000163   C0E0         PUSH    A
   \   000165   12....       LCALL   ?Subroutine126 & 0xFFFF
   \                     ??CrossCallReturnLabel_219:
   \   000168   D0E0         POP     A
   \   00016A   F0           MOVX    @DPTR,A
   \   00016B   7406         MOV     A,#0x6
   \   00016D   12....       LCALL   ?XSTACK_DISP0_8
   \   000170   E4           CLR     A
   \   000171   F0           MOVX    @DPTR,A
   \   000172   85..82       MOV     DPL,?V4
   \   000175   85..83       MOV     DPH,?V5
   \   000178   12....       LCALL   ??Subroutine201_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_363:
   \   00017B   7407         MOV     A,#0x7
   \   00017D   12....       LCALL   ?XSTACK_DISP0_8
   \   000180   12....       LCALL   ??Subroutine202_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_378:
   \   000183                ; Setup parameters for call to function AddrMgrEntryLookupNwk
   \   000183   7406         MOV     A,#0x6
   \   000185   12....       LCALL   ?XSTACK_DISP101_8
   \   000188   12....       LCALL   `??AddrMgrEntryLookupNwk::?relay`; Banked call to: AddrMgrEntryLookupNwk
   \   00018B   E9           MOV     A,R1
   \   00018C   6401         XRL     A,#0x1
   \   00018E   6003         JZ      $+5
   \   000190   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_4 & 0xFFFF
   \   000193                ; Setup parameters for call to function sAddrExtCpy
   \   000193   7409         MOV     A,#0x9
   \   000195   12....       LCALL   ?XSTACK_DISP0_8
   \   000198   AC82         MOV     R4,DPL
   \   00019A   AD83         MOV     R5,DPH
   \   00019C   12....       LCALL   ??Subroutine196_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_351:
   \   00019F   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   0001A2   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_5 & 0xFFFF
   \                     ??ZDO_ProcessMgmtLqiReq_9:
   \   0001A5   12....       LCALL   ??Subroutine197_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_356:
   \   0001A8   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   0001AB   6403         XRL     A,#0x3
   \   0001AD   6003         JZ      $+5
   \   0001AF   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_11 & 0xFFFF
   \                     ??ZDO_ProcessMgmtLqiReq_10:
   \   0001B2   12....       LCALL   ?Subroutine168 & 0xFFFF
   1391                  }
   \                     ??CrossCallReturnLabel_287:
   \   0001B5   E4           CLR     A
   \   0001B6   02....       LJMP    ??CrossCallReturnLabel_354 & 0xFFFF
   1392                  else
   1393                  {
   1394                    if ( StartIndex <= aItems )
   \                     ??ZDO_ProcessMgmtLqiReq_14:
   \   0001B9   E0           MOVX    A,@DPTR
   \   0001BA   C3           CLR     C
   \   0001BB   95..         SUBB    A,?V7
   \   0001BD   4005         JC      ??ZDO_ProcessMgmtLqiReq_15
   1395                      // Start with 1st neighbor
   1396                      index = 0;
   \   0001BF   75..00       MOV     ?V0,#0x0
   \   0001C2   801C         SJMP    ??ZDO_ProcessMgmtLqiReq_16
   1397                    else
   1398                      // Start with >1st neighbor
   1399                      index = StartIndex - aItems;
   \                     ??ZDO_ProcessMgmtLqiReq_15:
   \   0001C4   E5..         MOV     A,?V7
   \   0001C6   C3           CLR     C
   \   0001C7   98           SUBB    A,R0
   \   0001C8   F5..         MOV     ?V0,A
   \   0001CA   8014         SJMP    ??ZDO_ProcessMgmtLqiReq_16
   1400                    break;
   1401                  }
   1402                }
   1403          
   1404                // Loop through neighbor items and finish list
   1405                for ( ; x < numItems; x++ )
   1406                {
   1407                  // Add next neighbor table item
   1408                  NLME_GetRequest( nwkNeighborTable, index++, &entry );
   1409          
   1410                  // set ZDP_MgmtLqiItem_t fields
   1411                  item->panID    = entry.panId;
   1412                  osal_cpyExtAddr( item->extPanID, _NIB.extendedPANID );
   1413                  osal_memset( item->extAddr, 0xFF, Z_EXTADDR_LEN );
   1414                  item->nwkAddr  = entry.neighborAddress;
   1415                  item->rxOnIdle = ZDP_MGMT_BOOL_UNKNOWN;
   1416                  item->relation = ZDP_MGMT_REL_UNKNOWN;
   1417                  item->permit   = ZDP_MGMT_BOOL_UNKNOWN;
   1418                  item->depth    = 0xFF;
   1419                  item->lqi      = entry.linkInfo.rxLqi;
   1420          
   1421                  if ( item->nwkAddr == 0 )
   1422                  {
   1423                    item->devType = ZDP_MGMT_DT_COORD;
   1424                  }
   1425                  else
   1426                  {
   1427                    item->devType = ZDP_MGMT_DT_ROUTER;
   \                     ??ZDO_ProcessMgmtLqiReq_17:
   \   0001CC   12....       LCALL   ?Subroutine103 & 0xFFFF
   1428                  }
   \                     ??CrossCallReturnLabel_358:
   \   0001CF   F0           MOVX    @DPTR,A
   1429          
   1430                  item++;
   \   0001D0   EE           MOV     A,R6
   \   0001D1   241A         ADD     A,#0x1a
   \   0001D3   FE           MOV     R6,A
   \   0001D4   5001         JNC     ??ZDO_ProcessMgmtLqiReq_18
   \   0001D6   0F           INC     R7
   \                     ??ZDO_ProcessMgmtLqiReq_18:
   \   0001D7   05..         INC     ?V6
   \                     ??ZDO_ProcessMgmtLqiReq_13:
   \   0001D9   E5..         MOV     A,?V6
   \   0001DB   C3           CLR     C
   \   0001DC   95..         SUBB    A,?V1
   \   0001DE   505C         JNC     ??ZDO_ProcessMgmtLqiReq_2
   \                     ??ZDO_ProcessMgmtLqiReq_16:
   \   0001E0                ; Setup parameters for call to function NLME_GetRequest
   \   0001E0   7413         MOV     A,#0x13
   \   0001E2   12....       LCALL   ?XSTACK_DISP102_8
   \   0001E5   AA..         MOV     R2,?V0
   \   0001E7   7B00         MOV     R3,#0x0
   \   0001E9   7987         MOV     R1,#-0x79
   \   0001EB   12....       LCALL   `??NLME_GetRequest::?relay`; Banked call to: NLME_GetRequest
   \   0001EE   05..         INC     ?V0
   \   0001F0   741D         MOV     A,#0x1d
   \   0001F2   12....       LCALL   ?XSTACK_DISP0_8
   \   0001F5   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   0001F8   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   0001FB                ; Setup parameters for call to function osal_memset
   \   0001FB   12....       LCALL   ?Subroutine113 & 0xFFFF
   \                     ??CrossCallReturnLabel_353:
   \   0001FE   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   \   000201   EE           MOV     A,R6
   \   000202   2412         ADD     A,#0x12
   \   000204   F8           MOV     R0,A
   \   000205   E4           CLR     A
   \   000206   3F           ADDC    A,R7
   \   000207   F9           MOV     R1,A
   \   000208   7413         MOV     A,#0x13
   \   00020A   12....       LCALL   ?XSTACK_DISP0_8
   \   00020D   12....       LCALL   ??Subroutine233_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_521:
   \   000210   8882         MOV     DPL,R0
   \   000212   8983         MOV     DPH,R1
   \   000214   EA           MOV     A,R2
   \   000215   F0           MOVX    @DPTR,A
   \   000216   A3           INC     DPTR
   \   000217   EB           MOV     A,R3
   \   000218   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   00021B   7403         MOV     A,#0x3
   \   00021D   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   000220   7422         MOV     A,#0x22
   \   000222   12....       LCALL   ?XSTACK_DISP0_8
   \   000225   E0           MOVX    A,@DPTR
   \   000226   C0E0         PUSH    A
   \   000228   12....       LCALL   ?Subroutine126 & 0xFFFF
   \                     ??CrossCallReturnLabel_220:
   \   00022B   D0E0         POP     A
   \   00022D   12....       LCALL   ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_62:
   \   000230   E8           MOV     A,R0
   \   000231   49           ORL     A,R1
   \   000232   7098         JNZ     ??ZDO_ProcessMgmtLqiReq_17
   \   000234   12....       LCALL   ?Subroutine119 & 0xFFFF
   1431                }
   1432              }
   1433            }
   \                     ??CrossCallReturnLabel_205:
   \   000237   8096         SJMP    ??CrossCallReturnLabel_358
   1434            else
   1435            {
   1436              numItems = 0;
   \                     ??ZDO_ProcessMgmtLqiReq_0:
   \   000239   75..00       MOV     ?V1,#0x0
   1437            }
   1438          
   1439            // Send response
   1440            ZDP_MgmtLqiRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZSuccess, maxItems,
   1441                            StartIndex, numItems, table, false );
   \                     ??ZDO_ProcessMgmtLqiReq_2:
   \   00023C                ; Setup parameters for call to function ZDP_MgmtLqiRsp
   \   00023C   75..00       MOV     ?V2,#0x0
   \   00023F   78..         MOV     R0,#?V2
   \   000241   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000244   7403         MOV     A,#0x3
   \   000246   12....       LCALL   ?XSTACK_DISP0_8
   \   000249   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00024C   78..         MOV     R0,#?V1
   \   00024E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000251   E5..         MOV     A,?V7
   \   000253   F5..         MOV     ?V1,A
   \   000255   78..         MOV     R0,#?V1
   \   000257   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00025A   7405         MOV     A,#0x5
   \   00025C   12....       LCALL   ?XSTACK_DISP0_8
   \   00025F   E0           MOVX    A,@DPTR
   \   000260   FD           MOV     R5,A
   \   000261   7C00         MOV     R4,#0x0
   \   000263   7409         MOV     A,#0x9
   \   000265   12....       LCALL   ?XSTACK_DISP0_8
   \   000268   12....       LCALL   ?Subroutine90 & 0xFFFF
   \                     ??CrossCallReturnLabel_158:
   \   00026B   7409         MOV     A,#0x9
   \   00026D   12....       LCALL   ?XSTACK_DISP0_8
   \   000270   12....       LCALL   ?Subroutine73 & 0xFFFF
   \                     ??CrossCallReturnLabel_121:
   \   000273   12....       LCALL   `??ZDP_MgmtLqiRsp::?relay`; Banked call to: ZDP_MgmtLqiRsp
   \   000276   7405         MOV     A,#0x5
   \   000278   12....       LCALL   ?DEALLOC_XSTACK8
   1442          
   1443            if ( table )
   \   00027B   7402         MOV     A,#0x2
   \   00027D   12....       LCALL   ?XSTACK_DISP0_8
   \   000280   12....       LCALL   ??Subroutine235_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_552:
   \   000283   600B         JZ      ??ZDO_ProcessMgmtLqiReq_19
   1444            {
   1445              osal_mem_free( table );
   \   000285                ; Setup parameters for call to function osal_mem_free
   \   000285   7402         MOV     A,#0x2
   \   000287   12....       LCALL   ?XSTACK_DISP0_8
   \   00028A   12....       LCALL   ??Subroutine233_0 & 0xFFFF
   1446            }
   \                     ??CrossCallReturnLabel_522:
   \   00028D   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   1447          }
   \                     ??ZDO_ProcessMgmtLqiReq_19:
   \   000290   742A         MOV     A,#0x2a
   \   000292                REQUIRE ?Subroutine7
   \   000292                ; // Fall through to label ?Subroutine7

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine126:
   \   000000   EE           MOV     A,R6
   \   000001   2419         ADD     A,#0x19
   \   000003   F582         MOV     DPL,A
   \   000005   E4           CLR     A
   \   000006   3F           ADDC    A,R7
   \   000007   F583         MOV     DPH,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine123:
   \   000000   12....       LCALL   ?Subroutine171 & 0xFFFF
   \                     ??CrossCallReturnLabel_294:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine171:
   \   000000   EE           MOV     A,R6
   \   000001   2418         ADD     A,#0x18
   \   000003   F582         MOV     DPL,A
   \   000005   E4           CLR     A
   \   000006   3F           ADDC    A,R7
   \   000007   F583         MOV     DPH,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine119:
   \   000000   EE           MOV     A,R6
   \   000001   12....       LCALL   ?Subroutine170 & 0xFFFF
   \                     ??CrossCallReturnLabel_291:
   \   000004   E4           CLR     A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine113:
   \   000000   7C08         MOV     R4,#0x8
   \   000002   7D00         MOV     R5,#0x0
   \   000004   79FF         MOV     R1,#-0x1
   \   000006                REQUIRE ??Subroutine196_0
   \   000006                ; // Fall through to label ??Subroutine196_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine196_0:
   \   000000   EE           MOV     A,R6
   \   000001   240A         ADD     A,#0xa
   \   000003   FA           MOV     R2,A
   \   000004   E4           CLR     A
   \   000005   3F           ADDC    A,R7
   \   000006   FB           MOV     R3,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine103:
   \   000000   EE           MOV     A,R6
   \   000001                REQUIRE ??Subroutine197_0
   \   000001                ; // Fall through to label ??Subroutine197_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine197_0:
   \   000000   2414         ADD     A,#0x14
   \   000002                REQUIRE ??Subroutine198_0
   \   000002                ; // Fall through to label ??Subroutine198_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine198_0:
   \   000000   F582         MOV     DPL,A
   \   000002   E4           CLR     A
   \   000003   3F           ADDC    A,R7
   \   000004   F583         MOV     DPH,A
   \   000006   7401         MOV     A,#0x1
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   12....       LCALL   ?Subroutine148 & 0xFFFF
   \                     ??CrossCallReturnLabel_557:
   \   000003   8E82         MOV     DPL,R6
   \   000005   8F83         MOV     DPH,R7
   \   000007   12....       LCALL   ?Subroutine139 & 0xFFFF
   \                     ??CrossCallReturnLabel_493:
   \   00000A                ; Setup parameters for call to function sAddrExtCpy
   \   00000A                ; Setup parameters for call to function sAddrExtCpy
   \   00000A   7C..         MOV     R4,#(_NIB + 53) & 0xff
   \   00000C   7D..         MOV     R5,#((_NIB + 53) >> 8) & 0xff
   \   00000E   EE           MOV     A,R6
   \   00000F   2402         ADD     A,#0x2
   \   000011   FA           MOV     R2,A
   \   000012   E4           CLR     A
   \   000013   3F           ADDC    A,R7
   \   000014   FB           MOV     R3,A
   \   000015   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   85..82       MOV     DPL,?V4
   \   000004   85..83       MOV     DPH,?V5
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   12....       LCALL   ?Subroutine168 & 0xFFFF
   \                     ??CrossCallReturnLabel_288:
   \   000004   7402         MOV     A,#0x2
   \   000006   F0           MOVX    @DPTR,A
   \   000007   EE           MOV     A,R6
   \   000008   2416         ADD     A,#0x16
   \   00000A   F582         MOV     DPL,A
   \   00000C   E4           CLR     A
   \   00000D   3F           ADDC    A,R7
   \   00000E   F583         MOV     DPH,A
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine168:
   \   000000   EE           MOV     A,R6
   \   000001   2415         ADD     A,#0x15
   \   000003   F582         MOV     DPL,A
   \   000005   E4           CLR     A
   \   000006   3F           ADDC    A,R7
   \   000007   F583         MOV     DPH,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   EE           MOV     A,R6
   \   000002   2417         ADD     A,#0x17
   \   000004   F582         MOV     DPL,A
   \   000006   E4           CLR     A
   \   000007   3F           ADDC    A,R7
   \   000008   F583         MOV     DPH,A
   \   00000A   7402         MOV     A,#0x2
   \   00000C   F0           MOVX    @DPTR,A
   \   00000D   12....       LCALL   ?Subroutine171 & 0xFFFF
   \                     ??CrossCallReturnLabel_293:
   \   000010   74FF         MOV     A,#-0x1
   \   000012   F0           MOVX    @DPTR,A
   \   000013   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine90:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   2402         ADD     A,#0x2
   \   000003   FA           MOV     R2,A
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   3400         ADDC    A,#0x0
   \   000008   FB           MOV     R3,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine73:
   \   000000   12....       LCALL   ?Subroutine144 & 0xFFFF
   \                     ??CrossCallReturnLabel_252:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine55:
   \   000000   12....       LCALL   ?Subroutine145 & 0xFFFF
   \                     ??CrossCallReturnLabel_344:
   \   000003   12....       LCALL   ?Subroutine150 & 0xFFFF
   \                     ??CrossCallReturnLabel_257:
   \   000006   E0           MOVX    A,@DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine155:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FE           MOV     R6,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FF           MOV     R7,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000   12....       LCALL   ?Subroutine137 & 0xFFFF
   \                     ??CrossCallReturnLabel_240:
   \   000003   12....       LCALL   ?Subroutine148 & 0xFFFF
   \                     ??CrossCallReturnLabel_558:
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine137:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function osal_memcpy
   \   000001   8882         MOV     DPL,R0
   \   000003   8983         MOV     DPH,R1
   \   000005   22           RET
   1448          
   1449          /*********************************************************************
   1450           * @fn          ZDO_ProcessMgmtNwkDiscReq
   1451           *
   1452           * @brief       This function handles parsing the incoming Management
   1453           *              Network Discover request and starts the request.
   1454           *
   1455           * @param       inMsg - incoming message (request)
   1456           *
   1457           * @return      none
   1458           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1459          void ZDO_ProcessMgmtNwkDiscReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtNwkDiscReq:
   1460          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 7
   \   000005   74F9         MOV     A,#-0x7
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   12....       LCALL   ?Subroutine101 & 0xFFFF
   1461            NLME_ScanFields_t scan;
   1462            uint8             index;
   1463            uint8             *msg;
   1464          
   1465            msg = inMsg->asdu;
   \                     ??CrossCallReturnLabel_429:
   \   00000D   35..         ADDC    A,?V1
   \   00000F   12....       LCALL   ?Subroutine80 & 0xFFFF
   1466            scan.channels = osal_build_uint32( msg, 4 );
   \                     ??CrossCallReturnLabel_137:
   \   000012   12....       LCALL   `??osal_build_uint32::?relay`; Banked call to: osal_build_uint32
   \   000015   EA           MOV     A,R2
   \   000016   F8           MOV     R0,A
   \   000017   EB           MOV     A,R3
   \   000018   F9           MOV     R1,A
   \   000019   EC           MOV     A,R4
   \   00001A   FA           MOV     R2,A
   \   00001B   ED           MOV     A,R5
   \   00001C   FB           MOV     R3,A
   \   00001D   85..82       MOV     DPL,?XSP + 0
   \   000020   85..83       MOV     DPH,?XSP + 1
   \   000023   12....       LCALL   ?XSTORE_R0123
   1467            msg += 4;
   1468            scan.duration = *msg++;
   \   000026   8E82         MOV     DPL,R6
   \   000028   8F83         MOV     DPH,R7
   \   00002A   A3           INC     DPTR
   \   00002B   A3           INC     DPTR
   \   00002C   A3           INC     DPTR
   \   00002D   A3           INC     DPTR
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   C0E0         PUSH    A
   \   000031   7404         MOV     A,#0x4
   \   000033   12....       LCALL   ?XSTACK_DISP0_8
   \   000036   D0E0         POP     A
   \   000038   12....       LCALL   ?Subroutine16 & 0xFFFF
   1469            index         = *msg;
   \                     ??CrossCallReturnLabel_15:
   \   00003B   F8           MOV     R0,A
   1470            scan.scanType = ZMAC_ACTIVE_SCAN;
   \   00003C   7405         MOV     A,#0x5
   \   00003E   12....       LCALL   ?XSTACK_DISP0_8
   \   000041   7401         MOV     A,#0x1
   \   000043   F0           MOVX    @DPTR,A
   1471            scan.scanApp  = NLME_DISC_SCAN;
   \   000044   7406         MOV     A,#0x6
   \   000046   12....       LCALL   ?XSTACK_DISP0_8
   \   000049   7401         MOV     A,#0x1
   \   00004B   F0           MOVX    @DPTR,A
   1472          
   1473            // Save off the information to be used for the response
   1474            zdappMgmtNwkDiscReqInProgress          = true;
   \   00004C   90....       MOV     DPTR,#zdappMgmtNwkDiscReqInProgress
   \   00004F   F0           MOVX    @DPTR,A
   1475            zdappMgmtNwkDiscRspAddr.addrMode       = Addr16Bit;
   \   000050   90....       MOV     DPTR,#zdappMgmtNwkDiscRspAddr + 8
   \   000053   04           INC     A
   \   000054   12....       LCALL   ?Subroutine48 & 0xFFFF
   1476            zdappMgmtNwkDiscRspAddr.addr.shortAddr = inMsg->srcAddr.addr.shortAddr;
   \                     ??CrossCallReturnLabel_77:
   \   000057   A3           INC     DPTR
   \   000058   12....       LCALL   ??Subroutine233_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_523:
   \   00005B   90....       MOV     DPTR,#zdappMgmtNwkDiscRspAddr
   \   00005E   12....       LCALL   ?Subroutine22 & 0xFFFF
   1477            zdappMgmtNwkDiscStartIndex             = index;
   \                     ??CrossCallReturnLabel_335:
   \   000061   E8           MOV     A,R0
   \   000062   90....       MOV     DPTR,#zdappMgmtNwkDiscStartIndex
   \   000065   F0           MOVX    @DPTR,A
   1478            zdappMgmtNwkDiscRspTransSeq            = inMsg->TransSeq;
   \   000066   12....       LCALL   ?Subroutine110 & 0xFFFF
   \                     ??CrossCallReturnLabel_384:
   \   000069   E0           MOVX    A,@DPTR
   \   00006A   90....       MOV     DPTR,#zdappMgmtNwkDiscRspTransSeq
   \   00006D   F0           MOVX    @DPTR,A
   1479          
   1480            if ( NLME_NwkDiscReq2( &scan ) != ZSuccess )
   \   00006E                ; Setup parameters for call to function NLME_NwkDiscReq2
   \   00006E   AA..         MOV     R2,?XSP + 0
   \   000070   AB..         MOV     R3,?XSP + 1
   \   000072   12....       LCALL   `??NLME_NwkDiscReq2::?relay`; Banked call to: NLME_NwkDiscReq2
   \   000075   E9           MOV     A,R1
   \   000076   6003         JZ      ??ZDO_ProcessMgmtNwkDiscReq_0
   1481            {
   1482              NLME_NwkDiscTerm();
   \   000078                ; Setup parameters for call to function NLME_NwkDiscTerm
   \   000078   12....       LCALL   `??NLME_NwkDiscTerm::?relay`; Banked call to: NLME_NwkDiscTerm
   1483          
   1484              // zdappMgmtNwkDiscReqInProgress will be reset in the confirm callback
   1485            }
   1486          }
   \                     ??ZDO_ProcessMgmtNwkDiscReq_0:
   \   00007B   7407         MOV     A,#0x7
   \   00007D   02....       LJMP    ??Subroutine186_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine110:
   \   000000   E5..         MOV     A,?V0
   \   000002                REQUIRE ??Subroutine204_0
   \   000002                ; // Fall through to label ??Subroutine204_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine204_0:
   \   000000   12....       LCALL   ?Subroutine162 & 0xFFFF
   \                     ??CrossCallReturnLabel_390:
   \   000003   12....       LCALL   ??Subroutine222_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_448:
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   12....       LCALL   ?Subroutine136 & 0xFFFF
   \                     ??CrossCallReturnLabel_237:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine101:
   \   000000   8A..         MOV     ?V0,R2
   \   000002   8B..         MOV     ?V1,R3
   \   000004                REQUIRE ??Subroutine219_0
   \   000004                ; // Fall through to label ??Subroutine219_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine222_0:
   \   000000   35..         ADDC    A,?V1
   \   000002   F583         MOV     DPH,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine176:
   \   000000   12....       LCALL   ?Subroutine184 & 0xFFFF
   \                     ??CrossCallReturnLabel_463:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine136:
   \   000000   12....       LCALL   ?Subroutine176 & 0xFFFF
   \                     ??CrossCallReturnLabel_300:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine184:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine80:
   \   000000   F583         MOV     DPH,A
   \   000002   12....       LCALL   ?Subroutine155 & 0xFFFF
   \                     ??CrossCallReturnLabel_269:
   \   000005                ; Setup parameters for call to function osal_build_uint32
   \   000005                ; Setup parameters for call to function osal_build_uint32
   \   000005   7904         MOV     R1,#0x4
   \   000007   EE           MOV     A,R6
   \   000008   FA           MOV     R2,A
   \   000009   EF           MOV     A,R7
   \   00000A   FB           MOV     R3,A
   \   00000B   22           RET
   1487          
   1488          #if defined ( ZDO_MGMT_NWKDISC_RESPONSE )
   1489          /*********************************************************************
   1490           * @fn          ZDO_FinishProcessingMgmtNwkDiscReq
   1491           *
   1492           * @brief       This function finishes the processing of the Management
   1493           *              Network Discover Request and generates the response.
   1494           *
   1495           *   Note:      This function will limit the number of items returned
   1496           *              to ZDO_MAX_NWKDISC_ITEMS items.
   1497           *
   1498           * @param       ResultCountSrcAddr - source of the request
   1499           * @param       msg - pointer to incoming message
   1500           * @param       SecurityUse -
   1501           *
   1502           * @return      none
   1503           */
   1504          void ZDO_FinishProcessingMgmtNwkDiscReq( void )
   1505          {
   1506            byte count, i, ResultCount = 0;
   1507            networkDesc_t *newDesc = NULL, *pList, *NetworkList;
   1508          
   1509            NetworkList = nwk_getNwkDescList();
   1510          
   1511            // Count the number of nwk descriptors in the list
   1512            pList = nwk_getNwkDescList();
   1513            while (pList)
   1514            {
   1515              ResultCount++;
   1516              pList = pList->nextDesc;
   1517            }
   1518          
   1519            if ( ZSTACK_ROUTER_BUILD )
   1520            {
   1521              // Look for my PanID.
   1522              pList = nwk_getNwkDescList();
   1523              while ( pList )
   1524              {
   1525                if ( pList->panId == _NIB.nwkPanId )
   1526                {
   1527                  break;
   1528                }
   1529          
   1530          
   1531                if ( !pList->nextDesc )
   1532                {
   1533                  break;
   1534                }
   1535                pList = pList->nextDesc;
   1536              }
   1537          
   1538          
   1539              // If my Pan not present (query to a star network ZC or an isolated ZR?),
   1540              // prepend it.
   1541              if ( !pList || (pList->panId != _NIB.nwkPanId) )
   1542              {
   1543                newDesc = (networkDesc_t *)osal_mem_alloc( sizeof( networkDesc_t ) );
   1544                if ( newDesc )
   1545                {
   1546                  byte pJoin;
   1547          
   1548                  newDesc->panId = _NIB.nwkPanId;
   1549                  newDesc->logicalChannel = _NIB.nwkLogicalChannel;
   1550                  newDesc->version = NLME_GetProtocolVersion();
   1551                  newDesc->stackProfile = zgStackProfile;
   1552          
   1553                  //Extended PanID
   1554                  osal_cpyExtAddr( newDesc->extendedPANID, _NIB.extendedPANID);
   1555          
   1556                  ZMacGetReq( ZMacAssociationPermit, &pJoin );
   1557                  newDesc->chosenRouter = ((pJoin) ? ZDAppNwkAddr.addr.shortAddr :
   1558                                                     INVALID_NODE_ADDR);
   1559          
   1560                  newDesc->nextDesc = NetworkList;
   1561                  NetworkList = newDesc;
   1562                  ResultCount++;
   1563                }
   1564              }
   1565            }
   1566          
   1567            // Calc the count and apply a max count.
   1568            if ( zdappMgmtNwkDiscStartIndex > ResultCount )
   1569            {
   1570              count = 0;
   1571            }
   1572            else
   1573            {
   1574              count = ResultCount - zdappMgmtNwkDiscStartIndex;
   1575              if ( count > ZDO_MAX_NWKDISC_ITEMS )
   1576              {
   1577                count = ZDO_MAX_NWKDISC_ITEMS;
   1578              }
   1579          
   1580              // Move the list pointer up to the start index.
   1581              for ( i = 0; i < zdappMgmtNwkDiscStartIndex; i++ )
   1582              {
   1583                NetworkList = NetworkList->nextDesc;
   1584              }
   1585            }
   1586          
   1587            ZDP_MgmtNwkDiscRsp( zdappMgmtNwkDiscRspTransSeq,
   1588                               &zdappMgmtNwkDiscRspAddr, ZSuccess, ResultCount,
   1589                                zdappMgmtNwkDiscStartIndex,
   1590                                count,
   1591                                NetworkList,
   1592                                false );
   1593          
   1594            if ( ZSTACK_ROUTER_BUILD )
   1595            {
   1596              if ( newDesc != NULL )
   1597              {
   1598                osal_mem_free( newDesc );
   1599              }
   1600            }
   1601          
   1602            NLME_NwkDiscTerm();
   1603          }
   1604          #endif
   1605          
   1606          /*********************************************************************
   1607           * @fn          ZDO_ProcessMgmtRtgReq
   1608           *
   1609           * @brief       This function finishes the processing of the Management
   1610           *              Routing Request and generates the response.
   1611           *
   1612           *   Note:      This function will limit the number of items returned
   1613           *              to ZDO_MAX_RTG_ITEMS items.
   1614           *
   1615           * @param       inMsg - incoming message (request)
   1616           *
   1617           * @return      none
   1618           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1619          void ZDO_ProcessMgmtRtgReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtRtgReq:
   1620          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V6,R2
   \   00000C   8B..         MOV     ?V7,R3
   1621            byte x;
   1622            byte maxNumItems;
   1623            byte numItems = 0;
   \   00000E   7E00         MOV     R6,#0x0
   1624            uint8 *pBuf = NULL;
   \   000010   8E..         MOV     ?V4,R6
   \   000012   8E..         MOV     ?V5,R6
   1625            rtgItem_t *pList;
   1626            uint8 StartIndex = inMsg->asdu[0];
   \   000014   12....       LCALL   ??Subroutine219_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_432:
   \   000017   35..         ADDC    A,?V7
   \   000019   F583         MOV     DPH,A
   \   00001B   12....       LCALL   ??Subroutine208_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_399:
   \   00001E   F5..         MOV     ?V2,A
   1627          
   1628            // Get the number of table items
   1629            NLME_GetRequest( nwkNumRoutingTableEntries, 0, &maxNumItems );
   \   000020                ; Setup parameters for call to function NLME_GetRequest
   \   000020   AC..         MOV     R4,?XSP + 0
   \   000022   AD..         MOV     R5,?XSP + 1
   \   000024   7A00         MOV     R2,#0x0
   \   000026   7B00         MOV     R3,#0x0
   \   000028   799D         MOV     R1,#-0x63
   \   00002A   12....       LCALL   `??NLME_GetRequest::?relay`; Banked call to: NLME_GetRequest
   1630          
   1631            if ( maxNumItems > StartIndex )
   \   00002D   85..82       MOV     DPL,?XSP + 0
   \   000030   85..83       MOV     DPH,?XSP + 1
   \   000033   E0           MOVX    A,@DPTR
   \   000034   F8           MOV     R0,A
   \   000035   E5..         MOV     A,?V2
   \   000037   C3           CLR     C
   \   000038   98           SUBB    A,R0
   \   000039   4003         JC      $+5
   \   00003B   02....       LJMP    ??ZDO_ProcessMgmtRtgReq_0 & 0xFFFF
   1632            {
   1633              numItems = maxNumItems - StartIndex;    // Start at the passed in index
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   C3           CLR     C
   \   000040   95..         SUBB    A,?V2
   \   000042   FE           MOV     R6,A
   1634          
   1635              // limit the size of the list
   1636              if ( numItems > ZDO_MAX_RTG_ITEMS )
   \   000043   C3           CLR     C
   \   000044   940B         SUBB    A,#0xb
   \   000046   4002         JC      ??ZDO_ProcessMgmtRtgReq_1
   1637              {
   1638                numItems = ZDO_MAX_RTG_ITEMS;
   \   000048   7E0A         MOV     R6,#0xa
   1639              }
   1640          
   1641              // Allocate the memory to build the table
   1642              pBuf = osal_mem_alloc( (short)(sizeof( rtgItem_t ) * numItems) );
   \                     ??ZDO_ProcessMgmtRtgReq_1:
   \   00004A                ; Setup parameters for call to function osal_mem_alloc
   \   00004A   EE           MOV     A,R6
   \   00004B   75F007       MOV     B,#0x7
   \   00004E   A4           MUL     AB
   \   00004F   FA           MOV     R2,A
   \   000050   ABF0         MOV     R3,B
   \   000052   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000055   8A..         MOV     ?V0,R2
   \   000057   8B..         MOV     ?V1,R3
   \   000059   8A..         MOV     ?V4,R2
   \   00005B   8B..         MOV     ?V5,R3
   1643          
   1644              if ( pBuf != NULL )
   \   00005D   EA           MOV     A,R2
   \   00005E   45..         ORL     A,?V5
   \   000060   6077         JZ      ??ZDO_ProcessMgmtRtgReq_2
   1645              {
   1646                // Convert buffer to list
   1647                pList = (rtgItem_t *)pBuf;
   1648          
   1649                // Loop through items and build list
   1650                for ( x = 0; x < numItems; x++ )
   \   000062   7F00         MOV     R7,#0x0
   \   000064   8019         SJMP    ??ZDO_ProcessMgmtRtgReq_3
   1651                {
   1652                  NLME_GetRequest( nwkRoutingTable, (uint16)(x + StartIndex), (void*)pList );
   1653          
   1654                  // Remap the status to the RoutingTableList Record Format defined in the ZigBee spec
   1655                  switch( pList->status )
   1656                  {
   1657                    case RT_ACTIVE:
   1658                      pList->status = ZDO_MGMT_RTG_ENTRY_ACTIVE;
   1659                      break;
   1660          
   1661                    case RT_DISC:
   1662                      pList->status = ZDO_MGMT_RTG_ENTRY_DISCOVERY_UNDERWAY;
   1663                      break;
   1664          
   1665                    case RT_LINK_FAIL:
   1666                      pList->status = ZDO_MGMT_RTG_ENTRY_DISCOVERY_FAILED;
   1667                      break;
   1668          
   1669                    case RT_INIT:
   1670                    case RT_REPAIR:
   1671                    default:
   1672                      pList->status = ZDO_MGMT_RTG_ENTRY_INACTIVE;
   \                     ??ZDO_ProcessMgmtRtgReq_4:
   \   000066   85..82       MOV     DPL,?V0
   \   000069   85..83       MOV     DPH,?V1
   \   00006C   A3           INC     DPTR
   \   00006D   A3           INC     DPTR
   \   00006E   A3           INC     DPTR
   \   00006F   A3           INC     DPTR
   \   000070   A3           INC     DPTR
   \   000071   7403         MOV     A,#0x3
   \                     ??ZDO_ProcessMgmtRtgReq_5:
   \   000073   F0           MOVX    @DPTR,A
   1673                      break;
   1674                  }
   1675          
   1676                  // Increment pointer to next record
   1677                  pList++;
   \   000074   E5..         MOV     A,?V0
   \   000076   2407         ADD     A,#0x7
   \   000078   F5..         MOV     ?V0,A
   \   00007A   5002         JNC     ??ZDO_ProcessMgmtRtgReq_6
   \   00007C   05..         INC     ?V1
   \                     ??ZDO_ProcessMgmtRtgReq_6:
   \   00007E   0F           INC     R7
   \                     ??ZDO_ProcessMgmtRtgReq_3:
   \   00007F   EF           MOV     A,R7
   \   000080   C3           CLR     C
   \   000081   9E           SUBB    A,R6
   \   000082   5057         JNC     ??ZDO_ProcessMgmtRtgReq_0
   \   000084                ; Setup parameters for call to function NLME_GetRequest
   \   000084   AC..         MOV     R4,?V0
   \   000086   AD..         MOV     R5,?V1
   \   000088   EF           MOV     A,R7
   \   000089   AA..         MOV     R2,?V2
   \   00008B   2A           ADD     A,R2
   \   00008C   FA           MOV     R2,A
   \   00008D   E4           CLR     A
   \   00008E   3400         ADDC    A,#0x0
   \   000090   FB           MOV     R3,A
   \   000091   798B         MOV     R1,#-0x75
   \   000093   12....       LCALL   `??NLME_GetRequest::?relay`; Banked call to: NLME_GetRequest
   \   000096   85..82       MOV     DPL,?V0
   \   000099   85..83       MOV     DPH,?V1
   \   00009C   A3           INC     DPTR
   \   00009D   A3           INC     DPTR
   \   00009E   A3           INC     DPTR
   \   00009F   A3           INC     DPTR
   \   0000A0   A3           INC     DPTR
   \   0000A1   E0           MOVX    A,@DPTR
   \   0000A2   14           DEC     A
   \   0000A3   6008         JZ      ??ZDO_ProcessMgmtRtgReq_7
   \   0000A5   14           DEC     A
   \   0000A6   6013         JZ      ??ZDO_ProcessMgmtRtgReq_8
   \   0000A8   14           DEC     A
   \   0000A9   601F         JZ      ??ZDO_ProcessMgmtRtgReq_9
   \   0000AB   80B9         SJMP    ??ZDO_ProcessMgmtRtgReq_4
   \                     ??ZDO_ProcessMgmtRtgReq_7:
   \   0000AD   85..82       MOV     DPL,?V0
   \   0000B0   85..83       MOV     DPH,?V1
   \   0000B3   A3           INC     DPTR
   \   0000B4   A3           INC     DPTR
   \   0000B5   A3           INC     DPTR
   \   0000B6   A3           INC     DPTR
   \   0000B7   A3           INC     DPTR
   \   0000B8   E4           CLR     A
   \   0000B9   80B8         SJMP    ??ZDO_ProcessMgmtRtgReq_5
   \                     ??ZDO_ProcessMgmtRtgReq_8:
   \   0000BB   85..82       MOV     DPL,?V0
   \   0000BE   85..83       MOV     DPH,?V1
   \   0000C1   A3           INC     DPTR
   \   0000C2   A3           INC     DPTR
   \   0000C3   A3           INC     DPTR
   \   0000C4   A3           INC     DPTR
   \   0000C5   A3           INC     DPTR
   \   0000C6   7401         MOV     A,#0x1
   \   0000C8   80A9         SJMP    ??ZDO_ProcessMgmtRtgReq_5
   \                     ??ZDO_ProcessMgmtRtgReq_9:
   \   0000CA   85..82       MOV     DPL,?V0
   \   0000CD   85..83       MOV     DPH,?V1
   \   0000D0   A3           INC     DPTR
   \   0000D1   A3           INC     DPTR
   \   0000D2   A3           INC     DPTR
   \   0000D3   A3           INC     DPTR
   \   0000D4   A3           INC     DPTR
   \   0000D5   7402         MOV     A,#0x2
   \   0000D7   809A         SJMP    ??ZDO_ProcessMgmtRtgReq_5
   1678                }
   1679              }
   1680              else
   1681              {
   1682                numItems = 0;
   \                     ??ZDO_ProcessMgmtRtgReq_2:
   \   0000D9   7E00         MOV     R6,#0x0
   1683              }
   1684            }
   1685          
   1686            // Send response
   1687            ZDP_MgmtRtgRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZSuccess, maxNumItems, StartIndex, numItems,
   1688                                  (rtgItem_t *)pBuf, false );
   \                     ??ZDO_ProcessMgmtRtgReq_0:
   \   0000DB                ; Setup parameters for call to function ZDP_MgmtRtgRsp
   \   0000DB   75..00       MOV     ?V0,#0x0
   \   0000DE   78..         MOV     R0,#?V0
   \   0000E0   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000E3   78..         MOV     R0,#?V4
   \   0000E5   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000E8   EE           MOV     A,R6
   \   0000E9   F5..         MOV     ?V0,A
   \   0000EB   78..         MOV     R0,#?V0
   \   0000ED   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000F0   E5..         MOV     A,?V2
   \   0000F2   F5..         MOV     ?V0,A
   \   0000F4   78..         MOV     R0,#?V0
   \   0000F6   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000F9   7405         MOV     A,#0x5
   \   0000FB   12....       LCALL   ?XSTACK_DISP0_8
   \   0000FE   E0           MOVX    A,@DPTR
   \   0000FF   FD           MOV     R5,A
   \   000100   7C00         MOV     R4,#0x0
   \   000102   E5..         MOV     A,?V6
   \   000104   2402         ADD     A,#0x2
   \   000106   FA           MOV     R2,A
   \   000107   E4           CLR     A
   \   000108   35..         ADDC    A,?V7
   \   00010A   FB           MOV     R3,A
   \   00010B   E5..         MOV     A,?V6
   \   00010D   12....       LCALL   ?Subroutine162 & 0xFFFF
   \                     ??CrossCallReturnLabel_386:
   \   000110   35..         ADDC    A,?V7
   \   000112   F583         MOV     DPH,A
   \   000114   E0           MOVX    A,@DPTR
   \   000115   F9           MOV     R1,A
   \   000116   12....       LCALL   `??ZDP_MgmtRtgRsp::?relay`; Banked call to: ZDP_MgmtRtgRsp
   \   000119   7405         MOV     A,#0x5
   \   00011B   12....       LCALL   ?DEALLOC_XSTACK8
   1689          
   1690            if ( pBuf != NULL )
   \   00011E   E5..         MOV     A,?V4
   \   000120   45..         ORL     A,?V5
   \   000122   6007         JZ      ??ZDO_ProcessMgmtRtgReq_10
   1691            {
   1692              osal_mem_free( pBuf );
   \   000124                ; Setup parameters for call to function osal_mem_free
   \   000124   AA..         MOV     R2,?V4
   \   000126   AB..         MOV     R3,?V5
   \   000128   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   1693            }
   1694          }
   \                     ??ZDO_ProcessMgmtRtgReq_10:
   \   00012B   7401         MOV     A,#0x1
   \   00012D   02....       LJMP    ?Subroutine7 & 0xFFFF
   1695          
   1696          /*********************************************************************
   1697           * @fn          ZDO_ProcessMgmtBindReq
   1698           *
   1699           * @brief       This function finishes the processing of the Management
   1700           *              Bind Request and generates the response.
   1701           *
   1702           *   Note:      This function will limit the number of items returned
   1703           *              to ZDO_MAX_BIND_ITEMS items.
   1704           *
   1705           * @param       inMsg - incoming message (request)
   1706           *
   1707           * @return      none
   1708           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1709          void ZDO_ProcessMgmtBindReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtBindReq:
   1710          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   7402         MOV     A,#0x2
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   12....       LCALL   ?Subroutine22 & 0xFFFF
   1711          #if defined ( REFLECTOR )
   1712            byte x;
   1713            uint16 maxNumItems;
   1714            uint16 numItems;
   1715            uint8 *pBuf = NULL;
   \                     ??CrossCallReturnLabel_336:
   \   000012   75..00       MOV     ?V4,#0x0
   \   000015   75..00       MOV     ?V5,#0x0
   1716            apsBindingItem_t *pList;
   1717            uint8 StartIndex = inMsg->asdu[0];
   \   000018   7402         MOV     A,#0x2
   \   00001A   12....       LCALL   ?XSTACK_DISP0_8
   \   00001D   12....       LCALL   ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_91:
   \   000020   F5..         MOV     ?V2,A
   1718            uint8 status;
   1719          
   1720            // Get the number of table items
   1721            APSME_GetRequest( apsNumBindingTableEntries, 0, (byte*)(&maxNumItems) );
   \   000022                ; Setup parameters for call to function APSME_GetRequest
   \   000022   AC..         MOV     R4,?XSP + 0
   \   000024   AD..         MOV     R5,?XSP + 1
   \   000026   7A00         MOV     R2,#0x0
   \   000028   7B00         MOV     R3,#0x0
   \   00002A   79A3         MOV     R1,#-0x5d
   \   00002C   12....       LCALL   `??APSME_GetRequest::?relay`; Banked call to: APSME_GetRequest
   1722          
   1723            if ( maxNumItems > StartIndex )
   \   00002F   12....       LCALL   ??Subroutine232_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_528:
   \   000032   C3           CLR     C
   \   000033   E5..         MOV     A,?V2
   \   000035   9A           SUBB    A,R2
   \   000036   E4           CLR     A
   \   000037   9B           SUBB    A,R3
   \   000038   507A         JNC     ??ZDO_ProcessMgmtBindReq_0
   1724            {
   1725              numItems = maxNumItems - StartIndex;    // Start at the passed in index
   \   00003A   85..82       MOV     DPL,?XSP + 0
   \   00003D   85..83       MOV     DPH,?XSP + 1
   \   000040   A8..         MOV     R0,?V2
   \   000042   E0           MOVX    A,@DPTR
   \   000043   C3           CLR     C
   \   000044   98           SUBB    A,R0
   \   000045   FE           MOV     R6,A
   \   000046   A3           INC     DPTR
   \   000047   E0           MOVX    A,@DPTR
   \   000048   9400         SUBB    A,#0x0
   \   00004A   FF           MOV     R7,A
   1726            }
   1727            else
   1728            {
   1729              numItems = 0;
   1730            }
   1731          
   1732            // limit the size of the list
   1733            if ( numItems > ZDO_MAX_BIND_ITEMS )
   \   00004B   C3           CLR     C
   \   00004C   EE           MOV     A,R6
   \   00004D   9404         SUBB    A,#0x4
   \   00004F   EF           MOV     A,R7
   \   000050   9400         SUBB    A,#0x0
   \   000052   4006         JC      ??ZDO_ProcessMgmtBindReq_1
   1734            {
   1735              numItems = ZDO_MAX_BIND_ITEMS;
   \   000054   7E03         MOV     R6,#0x3
   \   000056   7F00         MOV     R7,#0x0
   \   000058   8004         SJMP    ??ZDO_ProcessMgmtBindReq_2
   1736            }
   1737          
   1738            // Allocate the memory to build the table
   1739            if ( numItems && (pBuf = osal_mem_alloc( sizeof( apsBindingItem_t ) * numItems )) )
   \                     ??ZDO_ProcessMgmtBindReq_1:
   \   00005A   EE           MOV     A,R6
   \   00005B   4F           ORL     A,R7
   \   00005C   6056         JZ      ??ZDO_ProcessMgmtBindReq_0
   \                     ??ZDO_ProcessMgmtBindReq_2:
   \   00005E                ; Setup parameters for call to function osal_mem_alloc
   \   00005E   EE           MOV     A,R6
   \   00005F   FA           MOV     R2,A
   \   000060   EF           MOV     A,R7
   \   000061   FB           MOV     R3,A
   \   000062   EA           MOV     A,R2
   \   000063   75F015       MOV     B,#0x15
   \   000066   A4           MUL     AB
   \   000067   FA           MOV     R2,A
   \   000068   A8F0         MOV     R0,B
   \   00006A   75F015       MOV     B,#0x15
   \   00006D   EB           MOV     A,R3
   \   00006E   A4           MUL     AB
   \   00006F   28           ADD     A,R0
   \   000070   FB           MOV     R3,A
   \   000071   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000074   8A..         MOV     ?V4,R2
   \   000076   8B..         MOV     ?V5,R3
   \   000078   EA           MOV     A,R2
   \   000079   45..         ORL     A,?V5
   \   00007B   6037         JZ      ??ZDO_ProcessMgmtBindReq_0
   1740            {
   1741              status = ZSuccess;
   \   00007D   75..00       MOV     ?V1,#0x0
   1742          
   1743              // Convert buffer to list
   1744              pList = (apsBindingItem_t *)pBuf;
   \   000080   8A..         MOV     ?V6,R2
   \   000082   8B..         MOV     ?V7,R3
   1745          
   1746              // Loop through items and build list
   1747              for ( x = 0; x < numItems; x++ )
   \   000084   75..00       MOV     ?V0,#0x0
   \   000087   801F         SJMP    ??ZDO_ProcessMgmtBindReq_3
   1748              {
   1749                APSME_GetRequest( apsBindingTable, (x + StartIndex), (void*)pList );
   \                     ??ZDO_ProcessMgmtBindReq_4:
   \   000089                ; Setup parameters for call to function APSME_GetRequest
   \   000089   AC..         MOV     R4,?V6
   \   00008B   AD..         MOV     R5,?V7
   \   00008D   AA..         MOV     R2,?V2
   \   00008F   E5..         MOV     A,?V0
   \   000091   2A           ADD     A,R2
   \   000092   FA           MOV     R2,A
   \   000093   E4           CLR     A
   \   000094   3400         ADDC    A,#0x0
   \   000096   FB           MOV     R3,A
   \   000097   79A2         MOV     R1,#-0x5e
   \   000099   12....       LCALL   `??APSME_GetRequest::?relay`; Banked call to: APSME_GetRequest
   1750                pList++;
   \   00009C   E5..         MOV     A,?V6
   \   00009E   2415         ADD     A,#0x15
   \   0000A0   F5..         MOV     ?V6,A
   \   0000A2   5002         JNC     ??ZDO_ProcessMgmtBindReq_5
   \   0000A4   05..         INC     ?V7
   1751              }
   \                     ??ZDO_ProcessMgmtBindReq_5:
   \   0000A6   05..         INC     ?V0
   \                     ??ZDO_ProcessMgmtBindReq_3:
   \   0000A8   C3           CLR     C
   \   0000A9   E5..         MOV     A,?V0
   \   0000AB   9E           SUBB    A,R6
   \   0000AC   E4           CLR     A
   \   0000AD   9F           SUBB    A,R7
   \   0000AE   40D9         JC      ??ZDO_ProcessMgmtBindReq_4
   \   0000B0   EE           MOV     A,R6
   \   0000B1   F9           MOV     R1,A
   \   0000B2   8005         SJMP    ??ZDO_ProcessMgmtBindReq_6
   1752          
   1753            }
   1754            else
   1755            {
   1756              status = ZDP_NOT_PERMITTED;
   \                     ??ZDO_ProcessMgmtBindReq_0:
   \   0000B4   75..8B       MOV     ?V1,#-0x75
   1757              numItems = 0;
   \   0000B7   7900         MOV     R1,#0x0
   1758            }
   1759          
   1760            // Send response
   1761            ZDP_MgmtBindRsp( inMsg->TransSeq, &(inMsg->srcAddr), status, (byte)maxNumItems, StartIndex,
   1762                             (byte)numItems, (apsBindingItem_t *)pBuf, false );
   \                     ??ZDO_ProcessMgmtBindReq_6:
   \   0000B9                ; Setup parameters for call to function ZDP_MgmtBindRsp
   \   0000B9   75..00       MOV     ?V0,#0x0
   \   0000BC   78..         MOV     R0,#?V0
   \   0000BE   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000C1   78..         MOV     R0,#?V4
   \   0000C3   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000C6   E9           MOV     A,R1
   \   0000C7   F5..         MOV     ?V0,A
   \   0000C9   78..         MOV     R0,#?V0
   \   0000CB   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000CE   E5..         MOV     A,?V2
   \   0000D0   F5..         MOV     ?V0,A
   \   0000D2   78..         MOV     R0,#?V0
   \   0000D4   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000D7   7405         MOV     A,#0x5
   \   0000D9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000DC   E0           MOVX    A,@DPTR
   \   0000DD   FD           MOV     R5,A
   \   0000DE   AC..         MOV     R4,?V1
   \   0000E0   7407         MOV     A,#0x7
   \   0000E2   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E5   12....       LCALL   ?Subroutine90 & 0xFFFF
   \                     ??CrossCallReturnLabel_159:
   \   0000E8   7407         MOV     A,#0x7
   \   0000EA   12....       LCALL   ?XSTACK_DISP0_8
   \   0000ED   12....       LCALL   ?Subroutine73 & 0xFFFF
   \                     ??CrossCallReturnLabel_122:
   \   0000F0   12....       LCALL   `??ZDP_MgmtBindRsp::?relay`; Banked call to: ZDP_MgmtBindRsp
   \   0000F3   7405         MOV     A,#0x5
   \   0000F5   12....       LCALL   ?DEALLOC_XSTACK8
   1763          
   1764            if ( pBuf )
   \   0000F8   E5..         MOV     A,?V4
   \   0000FA   45..         ORL     A,?V5
   \   0000FC   6007         JZ      ??ZDO_ProcessMgmtBindReq_7
   1765            {
   1766              osal_mem_free( pBuf );
   \   0000FE                ; Setup parameters for call to function osal_mem_free
   \   0000FE   AA..         MOV     R2,?V4
   \   000100   AB..         MOV     R3,?V5
   \   000102   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   1767            }
   1768          #else
   1769            (void)inMsg;
   1770          #endif
   1771          }
   \                     ??ZDO_ProcessMgmtBindReq_7:
   \   000105   7404         MOV     A,#0x4
   \   000107   02....       LJMP    ?Subroutine7 & 0xFFFF
   1772          
   1773          /*********************************************************************
   1774           * @fn          ZDO_ProcessMgmtDirectJoinReq
   1775           *
   1776           * @brief       This function finishes the processing of the Management
   1777           *              Direct Join Request and generates the response.
   1778           *
   1779           * @param       inMsg - incoming message (request)
   1780           *
   1781           * @return      none
   1782           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1783          void ZDO_ProcessMgmtDirectJoinReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtDirectJoinReq:
   1784          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   12....       LCALL   ?Subroutine98 & 0xFFFF
   1785            uint8 *deviceAddr;
   1786            uint8 capInfo;
   1787            uint8 stat;
   1788          
   1789            // Parse the message
   1790            deviceAddr = inMsg->asdu;
   1791            capInfo = inMsg->asdu[Z_EXTADDR_LEN];
   1792          
   1793            stat = (byte) NLME_DirectJoinRequest( deviceAddr, capInfo );
   \                     ??CrossCallReturnLabel_391:
   \   00000D   12....       LCALL   ??Subroutine233_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_524:
   \   000010                ; Setup parameters for call to function NLME_DirectJoinRequest
   \   000010   8A82         MOV     DPL,R2
   \   000012   8B83         MOV     DPH,R3
   \   000014   A3           INC     DPTR
   \   000015   A3           INC     DPTR
   \   000016   A3           INC     DPTR
   \   000017   A3           INC     DPTR
   \   000018   A3           INC     DPTR
   \   000019   A3           INC     DPTR
   \   00001A   A3           INC     DPTR
   \   00001B   A3           INC     DPTR
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   F9           MOV     R1,A
   \   00001E   12....       LCALL   `??NLME_DirectJoinRequest::?relay`; Banked call to: NLME_DirectJoinRequest
   \   000021   E9           MOV     A,R1
   \   000022   85..82       MOV     DPL,?XSP + 0
   \   000025   85..83       MOV     DPH,?XSP + 1
   \   000028   F0           MOVX    @DPTR,A
   1794          
   1795            ZDP_MgmtDirectJoinRsp( inMsg->TransSeq, &(inMsg->srcAddr), stat, false );
   \   000029                ; Setup parameters for call to function ZDP_SendData
   \   000029   75..00       MOV     ?V0,#0x0
   \   00002C   78..         MOV     R0,#?V0
   \   00002E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000031   7401         MOV     A,#0x1
   \   000033   12....       LCALL   ?XSTACK_DISP100_8
   \   000036   88..         MOV     ?V0,R0
   \   000038   89..         MOV     ?V1,R1
   \   00003A   78..         MOV     R0,#?V0
   \   00003C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003F   75..35       MOV     ?V0,#0x35
   \   000042   75..80       MOV     ?V1,#-0x80
   \   000045   78..         MOV     R0,#?V0
   \   000047   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004A   12....       LCALL   ?Subroutine107 & 0xFFFF
   \                     ??CrossCallReturnLabel_180:
   \   00004D   12....       LCALL   `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   000050   7405         MOV     A,#0x5
   \   000052   12....       LCALL   ?DEALLOC_XSTACK8
   1796          }
   \   000055   02....       LJMP    ?Subroutine8 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine98:
   \   000000   EA           MOV     A,R2
   \   000001   FE           MOV     R6,A
   \   000002   EB           MOV     A,R3
   \   000003   FF           MOV     R7,A
   \   000004                ; Setup parameters for call to function NLME_PermitJoiningRequest
   \   000004                REQUIRE ??Subroutine205_0
   \   000004                ; // Fall through to label ??Subroutine205_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine205_0:
   \   000000   12....       LCALL   ?Subroutine164 & 0xFFFF
   \                     ??CrossCallReturnLabel_396:
   \   000003   F583         MOV     DPH,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine107:
   \   000000   7901         MOV     R1,#0x1
   \   000002   EE           MOV     A,R6
   \   000003   2402         ADD     A,#0x2
   \   000005   FC           MOV     R4,A
   \   000006   E4           CLR     A
   \   000007   3F           ADDC    A,R7
   \   000008   FD           MOV     R5,A
   \   000009   EE           MOV     A,R6
   \   00000A   240F         ADD     A,#0xf
   \   00000C   FA           MOV     R2,A
   \   00000D   E4           CLR     A
   \   00000E   3F           ADDC    A,R7
   \   00000F   FB           MOV     R3,A
   \   000010   22           RET
   1797          
   1798          /*********************************************************************
   1799           * @fn          ZDO_ProcessMgmtLeaveReq
   1800           *
   1801           * @brief       This function processes a Management Leave Request
   1802           *              and generates the response.
   1803           *
   1804           * @param       inMsg - incoming message (request)
   1805           *
   1806           * @return      none
   1807           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1808          void ZDO_ProcessMgmtLeaveReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtLeaveReq:
   1809          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 6
   \   000005   74FA         MOV     A,#-0x6
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   12....       LCALL   ?Subroutine101 & 0xFFFF
   1810            NLME_LeaveReq_t req;
   1811            ZStatus_t       status;
   1812            uint8           option;
   1813            uint8 *msg = inMsg->asdu;
   \                     ??CrossCallReturnLabel_430:
   \   00000D   12....       LCALL   ??Subroutine221_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_440:
   \   000010   12....       LCALL   ?Subroutine155 & 0xFFFF
   1814          
   1815            if ( ( AddrMgrExtAddrValid( msg ) == FALSE                 ) ||
   1816                 ( osal_ExtAddrEqual( msg, NLME_GetExtAddr() ) == TRUE )    )
   \                     ??CrossCallReturnLabel_267:
   \   000013                ; Setup parameters for call to function AddrMgrExtAddrValid
   \   000013   EE           MOV     A,R6
   \   000014   FA           MOV     R2,A
   \   000015   EF           MOV     A,R7
   \   000016   FB           MOV     R3,A
   \   000017   12....       LCALL   `??AddrMgrExtAddrValid::?relay`; Banked call to: AddrMgrExtAddrValid
   \   00001A   E9           MOV     A,R1
   \   00001B   6017         JZ      ??ZDO_ProcessMgmtLeaveReq_0
   \   00001D                ; Setup parameters for call to function NLME_GetExtAddr
   \   00001D   12....       LCALL   `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
   \   000020   8A..         MOV     ?V2,R2
   \   000022   8B..         MOV     ?V3,R3
   \   000024   AC..         MOV     R4,?V2
   \   000026   AD..         MOV     R5,?V3
   \   000028                ; Setup parameters for call to function sAddrExtCmp
   \   000028   EE           MOV     A,R6
   \   000029   FA           MOV     R2,A
   \   00002A   EF           MOV     A,R7
   \   00002B   FB           MOV     R3,A
   \   00002C   12....       LCALL   `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   00002F   E9           MOV     A,R1
   \   000030   6401         XRL     A,#0x1
   \   000032   700A         JNZ     ??ZDO_ProcessMgmtLeaveReq_1
   1817            {
   1818              // Remove this device
   1819              req.extAddr = NULL;
   \                     ??ZDO_ProcessMgmtLeaveReq_0:
   \   000034   7401         MOV     A,#0x1
   \   000036   12....       LCALL   ?XSTACK_DISP0_8
   \   000039   E4           CLR     A
   \   00003A   F0           MOVX    @DPTR,A
   \   00003B   A3           INC     DPTR
   \   00003C   8009         SJMP    ??ZDO_ProcessMgmtLeaveReq_2
   1820            }
   1821            else
   1822            {
   1823              // Remove child device
   1824              req.extAddr = msg;
   \                     ??ZDO_ProcessMgmtLeaveReq_1:
   \   00003E   7401         MOV     A,#0x1
   \   000040   12....       LCALL   ?XSTACK_DISP0_8
   \   000043   EE           MOV     A,R6
   \   000044   F0           MOVX    @DPTR,A
   \   000045   A3           INC     DPTR
   \   000046   EF           MOV     A,R7
   1825            }
   \                     ??ZDO_ProcessMgmtLeaveReq_2:
   \   000047   12....       LCALL   ?Subroutine26 & 0xFFFF
   1826          
   1827            option = msg[Z_EXTADDR_LEN];
   \                     ??CrossCallReturnLabel_32:
   \   00004A   F8           MOV     R0,A
   1828            if ( option & ZDP_MGMT_LEAVE_REQ_RC )
   \   00004B   A2E6         MOV     C,0xE0 /* A   */.6
   \   00004D   5008         JNC     ??ZDO_ProcessMgmtLeaveReq_3
   1829            {
   1830              req.removeChildren = TRUE;
   \   00004F   7403         MOV     A,#0x3
   \   000051   12....       LCALL   ?XSTACK_DISP0_8
   \   000054   7401         MOV     A,#0x1
   \   000056   F0           MOVX    @DPTR,A
   1831            }
   1832          
   1833            if ( option & ZDP_MGMT_LEAVE_REQ_REJOIN )
   \                     ??ZDO_ProcessMgmtLeaveReq_3:
   \   000057   E8           MOV     A,R0
   \   000058   A2E7         MOV     C,0xE0 /* A   */.7
   \   00005A   5008         JNC     ??ZDO_ProcessMgmtLeaveReq_4
   1834            {
   1835               req.rejoin = TRUE;
   \   00005C   7404         MOV     A,#0x4
   \   00005E   12....       LCALL   ?XSTACK_DISP0_8
   \   000061   7401         MOV     A,#0x1
   \   000063   F0           MOVX    @DPTR,A
   1836            }
   1837          
   1838            req.silent = FALSE;
   \                     ??ZDO_ProcessMgmtLeaveReq_4:
   \   000064   7405         MOV     A,#0x5
   \   000066   12....       LCALL   ?XSTACK_DISP0_8
   \   000069   E4           CLR     A
   \   00006A   F0           MOVX    @DPTR,A
   1839          
   1840            status = NLME_LeaveReq( &req );
   \   00006B                ; Setup parameters for call to function NLME_LeaveReq
   \   00006B   04           INC     A
   \   00006C   12....       LCALL   ?XSTACK_DISP101_8
   \   00006F   12....       LCALL   `??NLME_LeaveReq::?relay`; Banked call to: NLME_LeaveReq
   \   000072   E9           MOV     A,R1
   \   000073   85..82       MOV     DPL,?XSP + 0
   \   000076   85..83       MOV     DPH,?XSP + 1
   \   000079   F0           MOVX    @DPTR,A
   1841          
   1842            if ( ZG_BUILD_ENDDEVICE_TYPE )
   1843            {
   1844              // Stop polling and get ready to reset
   1845              NLME_SetPollRate( 0 );
   \   00007A                ; Setup parameters for call to function NLME_SetPollRate
   \   00007A   7A00         MOV     R2,#0x0
   \   00007C   7B00         MOV     R3,#0x0
   \   00007E   12....       LCALL   `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
   1846            }
   1847          
   1848            ZDP_MgmtLeaveRsp( inMsg->TransSeq, &(inMsg->srcAddr), status, FALSE );
   \   000081                ; Setup parameters for call to function ZDP_SendData
   \   000081   75..00       MOV     ?V2,#0x0
   \   000084   78..         MOV     R0,#?V2
   \   000086   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000089   7401         MOV     A,#0x1
   \   00008B   12....       LCALL   ?XSTACK_DISP100_8
   \   00008E   88..         MOV     ?V2,R0
   \   000090   89..         MOV     ?V3,R1
   \   000092   78..         MOV     R0,#?V2
   \   000094   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000097   75..34       MOV     ?V2,#0x34
   \   00009A   75..80       MOV     ?V3,#-0x80
   \   00009D   78..         MOV     R0,#?V2
   \   00009F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000A2   7901         MOV     R1,#0x1
   \   0000A4   E5..         MOV     A,?V0
   \   0000A6   2402         ADD     A,#0x2
   \   0000A8   FC           MOV     R4,A
   \   0000A9   E4           CLR     A
   \   0000AA   35..         ADDC    A,?V1
   \   0000AC   FD           MOV     R5,A
   \   0000AD   E5..         MOV     A,?V0
   \   0000AF   240F         ADD     A,#0xf
   \   0000B1   FA           MOV     R2,A
   \   0000B2   E4           CLR     A
   \   0000B3   35..         ADDC    A,?V1
   \   0000B5   FB           MOV     R3,A
   \   0000B6   12....       LCALL   `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   0000B9   7405         MOV     A,#0x5
   \   0000BB   12....       LCALL   ?DEALLOC_XSTACK8
   1849          }
   \   0000BE   7406         MOV     A,#0x6
   \   0000C0   02....       LJMP    ?Subroutine3 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine217_0
   \   000003                ; // Fall through to label ??Subroutine217_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine221_0:
   \   000000   12....       LCALL   ??Subroutine222_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_454:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   12....       LCALL   ?Subroutine136 & 0xFFFF
   \                     ??CrossCallReturnLabel_238:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   22           RET
   1850          
   1851          
   1852          /*********************************************************************
   1853           * @fn          ZDO_ProcessMgmtPermitJoinReq
   1854           *
   1855           * @brief       This function processes a Management Permit Join Request
   1856           *              and generates the response.
   1857           *
   1858           * @param       inMsg - incoming message (request)
   1859           *
   1860           * @return      none
   1861           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1862          void ZDO_ProcessMgmtPermitJoinReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtPermitJoinReq:
   1863          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   12....       LCALL   ?Subroutine98 & 0xFFFF
   1864            uint8 stat;
   1865            uint8 duration;
   1866            uint8 tcsig;
   1867          
   1868            duration = inMsg->asdu[ZDP_MGMT_PERMIT_JOIN_REQ_DURATION];
   1869            tcsig    = inMsg->asdu[ZDP_MGMT_PERMIT_JOIN_REQ_TC_SIG];
   1870          
   1871            // Set the network layer permit join duration
   1872            stat = (byte) NLME_PermitJoiningRequest( duration );
   \                     ??CrossCallReturnLabel_392:
   \   00000D   12....       LCALL   ??Subroutine208_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_400:
   \   000010   F9           MOV     R1,A
   \   000011   12....       LCALL   `??NLME_PermitJoiningRequest::?relay`; Banked call to: NLME_PermitJoiningRequest
   \   000014   E9           MOV     A,R1
   \   000015   85..82       MOV     DPL,?XSP + 0
   \   000018   85..83       MOV     DPH,?XSP + 1
   \   00001B   12....       LCALL   ?Subroutine35 & 0xFFFF
   1873          
   1874            // Handle the Trust Center Significance
   1875            if ( ZG_SECURE_ENABLED && ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
   1876            {
   1877              if ( tcsig == TRUE )
   1878              {
   1879                ZDSecMgrPermitJoining( duration );
   1880              }
   1881            }
   1882          
   1883            // Send a response if unicast
   1884            if ( !inMsg->wasBroadcast )
   \                     ??CrossCallReturnLabel_54:
   \   00001E   702C         JNZ     ??ZDO_ProcessMgmtPermitJoinReq_0
   1885            {
   1886              ZDP_MgmtPermitJoinRsp( inMsg->TransSeq, &(inMsg->srcAddr), stat, false );
   \   000020                ; Setup parameters for call to function ZDP_SendData
   \   000020   75..00       MOV     ?V0,#0x0
   \   000023   78..         MOV     R0,#?V0
   \   000025   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000028   7401         MOV     A,#0x1
   \   00002A   12....       LCALL   ?XSTACK_DISP100_8
   \   00002D   88..         MOV     ?V0,R0
   \   00002F   89..         MOV     ?V1,R1
   \   000031   78..         MOV     R0,#?V0
   \   000033   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000036   75..36       MOV     ?V0,#0x36
   \   000039   75..80       MOV     ?V1,#-0x80
   \   00003C   78..         MOV     R0,#?V0
   \   00003E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000041   12....       LCALL   ?Subroutine107 & 0xFFFF
   1887            }
   \                     ??CrossCallReturnLabel_181:
   \   000044   12....       LCALL   `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   000047   7405         MOV     A,#0x5
   \   000049   12....       LCALL   ?DEALLOC_XSTACK8
   1888          }
   \                     ??ZDO_ProcessMgmtPermitJoinReq_0:
   \   00004C   02....       LJMP    ?Subroutine8 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   EE           MOV     A,R6
   \   000002   12....       LCALL   ?Subroutine167 & 0xFFFF
   \                     ??CrossCallReturnLabel_286:
   \   000005   3F           ADDC    A,R7
   \   000006   F583         MOV     DPH,A
   \   000008   E0           MOVX    A,@DPTR
   \   000009   22           RET
   1889          
   1890          /*
   1891           * This function stub allows the next higher layer to be notified of
   1892           * a permit joining timeout.
   1893           */
   1894          /*********************************************************************
   1895           * @fn          ZDO_ProcessMgmtPermitJoinTimeout
   1896           *
   1897           * @brief       This function stub allows the next higher layer to be
   1898           *              notified of a permit joining timeout. Currently, this
   1899           *              directly bypasses the APS layer.
   1900           *
   1901           * @param       none
   1902           *
   1903           * @return      none
   1904           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1905          void ZDO_ProcessMgmtPermitJoinTimeout( void )
   \                     NLME_PermitJoiningTimeout:
   1906          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   1907            #if defined( ZDO_MGMT_PERMIT_JOIN_RESPONSE )
   1908            // Currently, only the ZDSecMgr needs to be notified
   1909            if ( ZG_SECURE_ENABLED && ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
   1910            {
   1911              ZDSecMgrPermitJoiningTimeout();
   1912            }
   1913            #endif
   1914          }
   \   000000   02....       LJMP    ?BRET
   1915          
   1916          /*********************************************************************
   1917           * @fn          ZDO_ProcessUserDescReq
   1918           *
   1919           * @brief       This function finishes the processing of the User
   1920           *              Descriptor Request and generates the response.
   1921           *
   1922           * @param       inMsg - incoming message (request)
   1923           *
   1924           * @return      none
   1925           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1926          void ZDO_ProcessUserDescReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessUserDescReq:
   1927          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 17
   \   000005   74EF         MOV     A,#-0x11
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   12....       LCALL   ?Subroutine99 & 0xFFFF
   1928            uint16 aoi = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
   \                     ??CrossCallReturnLabel_339:
   \   00000D   12....       LCALL   ?Subroutine60 & 0xFFFF
   \                     ??CrossCallReturnLabel_101:
   \   000010   F5..         MOV     ?V0,A
   \   000012   E4           CLR     A
   \   000013   39           ADDC    A,R1
   \   000014   F5..         MOV     ?V1,A
   1929            UserDescriptorFormat_t userDesc;
   1930          
   1931            if ( (aoi == ZDAppNwkAddr.addr.shortAddr) && (ZSUCCESS == osal_nv_read(
   1932                       ZCD_NV_USERDESC, 0, sizeof(UserDescriptorFormat_t), &userDesc )) )
   \   000016   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   65..         XRL     A,?V0
   \   00001C   7004         JNZ     ??ZDO_ProcessUserDescReq_0
   \   00001E   A3           INC     DPTR
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   65..         XRL     A,?V1
   \                     ??ZDO_ProcessUserDescReq_0:
   \   000022   7052         JNZ     ??ZDO_ProcessUserDescReq_1
   \   000024                ; Setup parameters for call to function osal_nv_read
   \   000024   A8..         MOV     R0,?XSP + 0
   \   000026   A9..         MOV     R1,?XSP + 1
   \   000028   88..         MOV     ?V2,R0
   \   00002A   89..         MOV     ?V3,R1
   \   00002C   78..         MOV     R0,#?V2
   \   00002E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000031   75..11       MOV     ?V2,#0x11
   \   000034   75..00       MOV     ?V3,#0x0
   \   000037   78..         MOV     R0,#?V2
   \   000039   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003C   7C00         MOV     R4,#0x0
   \   00003E   7D00         MOV     R5,#0x0
   \   000040   7A81         MOV     R2,#-0x7f
   \   000042   7B00         MOV     R3,#0x0
   \   000044   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000047   7404         MOV     A,#0x4
   \   000049   12....       LCALL   ?DEALLOC_XSTACK8
   \   00004C   E9           MOV     A,R1
   \   00004D   7027         JNZ     ??ZDO_ProcessUserDescReq_1
   1933            {
   1934              ZDP_UserDescRsp( inMsg->TransSeq, &(inMsg->srcAddr), aoi, &userDesc, false );
   \   00004F                ; Setup parameters for call to function ZDP_UserDescRsp
   \   00004F   75..00       MOV     ?V2,#0x0
   \   000052   78..         MOV     R0,#?V2
   \   000054   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000057   7401         MOV     A,#0x1
   \   000059   12....       LCALL   ?XSTACK_DISP100_8
   \   00005C   88..         MOV     ?V2,R0
   \   00005E   89..         MOV     ?V3,R1
   \   000060   78..         MOV     R0,#?V2
   \   000062   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000065   AC..         MOV     R4,?V0
   \   000067   AD..         MOV     R5,?V1
   \   000069   12....       LCALL   ?Subroutine102 & 0xFFFF
   1935            }
   \                     ??CrossCallReturnLabel_172:
   \   00006C   12....       LCALL   `??ZDP_UserDescRsp::?relay`; Banked call to: ZDP_UserDescRsp
   \   00006F   7403         MOV     A,#0x3
   \   000071   12....       LCALL   ?DEALLOC_XSTACK8
   \   000074   8020         SJMP    ??ZDO_ProcessUserDescReq_2
   1936            else
   1937            {
   1938              ZDP_GenericRsp(inMsg->TransSeq, &(inMsg->srcAddr),
   1939                     ZDP_NOT_SUPPORTED, aoi, User_Desc_rsp, inMsg->SecurityUse );
   \                     ??ZDO_ProcessUserDescReq_1:
   \   000076                ; Setup parameters for call to function ZDP_GenericRsp
   \   000076   75..11       MOV     ?V2,#0x11
   \   000079   75..80       MOV     ?V3,#-0x80
   \   00007C   78..         MOV     R0,#?V2
   \   00007E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000081   78..         MOV     R0,#?V0
   \   000083   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000086   12....       LCALL   ?Subroutine105 & 0xFFFF
   1940            }
   \                     ??CrossCallReturnLabel_177:
   \   000089   7C84         MOV     R4,#-0x7c
   \   00008B   12....       LCALL   ?Subroutine102 & 0xFFFF
   \                     ??CrossCallReturnLabel_173:
   \   00008E   12....       LCALL   `??ZDP_GenericRsp::?relay`; Banked call to: ZDP_GenericRsp
   \   000091   7404         MOV     A,#0x4
   \   000093   12....       LCALL   ?DEALLOC_XSTACK8
   1941          }
   \                     ??ZDO_ProcessUserDescReq_2:
   \   000096   7411         MOV     A,#0x11
   \   000098   02....       LJMP    ?Subroutine3 & 0xFFFF
   1942          
   1943          /*********************************************************************
   1944           * @fn          ZDO_ProcessUserDescSet
   1945           *
   1946           * @brief       This function finishes the processing of the User
   1947           *              Descriptor Set and generates the response.
   1948           *
   1949           * @param       inMsg - incoming message (request)
   1950           *
   1951           * @return      none
   1952           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1953          void ZDO_ProcessUserDescSet( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessUserDescSet:
   1954          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 21
   \   000005   74EB         MOV     A,#-0x15
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V4,R2
   \   00000C   8B..         MOV     ?V5,R3
   1955            uint8 *msg;
   1956            uint16 aoi;
   1957            UserDescriptorFormat_t userDesc;
   1958            uint8 outMsg[3];
   1959            uint8 status;
   1960          
   1961            msg = inMsg->asdu;
   \   00000E   12....       LCALL   ??Subroutine219_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_433:
   \   000011   35..         ADDC    A,?V5
   \   000013   12....       LCALL   ?Subroutine68 & 0xFFFF
   1962            aoi = BUILD_UINT16( msg[0], msg[1] );
   \                     ??CrossCallReturnLabel_112:
   \   000016   FC           MOV     R4,A
   \   000017   A3           INC     DPTR
   \   000018   E0           MOVX    A,@DPTR
   \   000019   FA           MOV     R2,A
   \   00001A   E4           CLR     A
   \   00001B   CA           XCH     A,R2
   \   00001C   FB           MOV     R3,A
   \   00001D   EC           MOV     A,R4
   \   00001E   2A           ADD     A,R2
   \   00001F   FE           MOV     R6,A
   \   000020   E4           CLR     A
   \   000021   3B           ADDC    A,R3
   \   000022   FF           MOV     R7,A
   1963          
   1964            if ( aoi == ZDAppNwkAddr.addr.shortAddr )
   \   000023   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000026   E0           MOVX    A,@DPTR
   \   000027   6E           XRL     A,R6
   \   000028   7003         JNZ     ??ZDO_ProcessUserDescSet_0
   \   00002A   A3           INC     DPTR
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   6F           XRL     A,R7
   \                     ??ZDO_ProcessUserDescSet_0:
   \   00002D   6003         JZ      $+5
   \   00002F   02....       LJMP    ??ZDO_ProcessUserDescSet_1 & 0xFFFF
   1965            {
   1966              userDesc.len = (msg[2] < AF_MAX_USER_DESCRIPTOR_LEN) ? msg[2] : AF_MAX_USER_DESCRIPTOR_LEN;
   \   000032   8882         MOV     DPL,R0
   \   000034   8983         MOV     DPH,R1
   \   000036   A3           INC     DPTR
   \   000037   A3           INC     DPTR
   \   000038   E0           MOVX    A,@DPTR
   \   000039   9410         SUBB    A,#0x10
   \   00003B   500F         JNC     ??ZDO_ProcessUserDescSet_2
   \   00003D   8882         MOV     DPL,R0
   \   00003F   8983         MOV     DPH,R1
   \   000041   A3           INC     DPTR
   \   000042   A3           INC     DPTR
   \   000043   E0           MOVX    A,@DPTR
   \   000044   85..82       MOV     DPL,?XSP + 0
   \   000047   85..83       MOV     DPH,?XSP + 1
   \   00004A   8008         SJMP    ??ZDO_ProcessUserDescSet_3
   \                     ??ZDO_ProcessUserDescSet_2:
   \   00004C   85..82       MOV     DPL,?XSP + 0
   \   00004F   85..83       MOV     DPH,?XSP + 1
   \   000052   7410         MOV     A,#0x10
   \                     ??ZDO_ProcessUserDescSet_3:
   \   000054   F0           MOVX    @DPTR,A
   \   000055   E0           MOVX    A,@DPTR
   \   000056   C0E0         PUSH    A
   \   000058   7404         MOV     A,#0x4
   \   00005A   12....       LCALL   ?XSTACK_DISP0_8
   \   00005D   D0E0         POP     A
   \   00005F   12....       LCALL   ?Subroutine137 & 0xFFFF
   1967              msg ++;  // increment one for the length field
   1968          
   1969              osal_memcpy( userDesc.desc, &msg[2], userDesc.len );
   \                     ??CrossCallReturnLabel_239:
   \   000062   A3           INC     DPTR
   \   000063   A3           INC     DPTR
   \   000064   A3           INC     DPTR
   \   000065   A982         MOV     R1,DPL
   \   000067   AA83         MOV     R2,DPH
   \   000069   89..         MOV     ?V0,R1
   \   00006B   8A..         MOV     ?V1,R2
   \   00006D   75..00       MOV     ?V2,#0x0
   \   000070   78..         MOV     R0,#?V0
   \   000072   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000075   7407         MOV     A,#0x7
   \   000077   12....       LCALL   ?XSTACK_DISP0_8
   \   00007A   E0           MOVX    A,@DPTR
   \   00007B   FC           MOV     R4,A
   \   00007C   7D00         MOV     R5,#0x0
   \   00007E   7408         MOV     A,#0x8
   \   000080   12....       LCALL   ?XSTACK_DISP0_8
   \   000083   AA82         MOV     R2,DPL
   \   000085   AB83         MOV     R3,DPH
   \   000087   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00008A   7403         MOV     A,#0x3
   \   00008C   12....       LCALL   ?DEALLOC_XSTACK8
   1970              osal_nv_write( ZCD_NV_USERDESC, 0, sizeof(UserDescriptorFormat_t), &userDesc );
   \   00008F                ; Setup parameters for call to function osal_nv_write
   \   00008F   7404         MOV     A,#0x4
   \   000091   12....       LCALL   ?XSTACK_DISP100_8
   \   000094   88..         MOV     ?V0,R0
   \   000096   89..         MOV     ?V1,R1
   \   000098   78..         MOV     R0,#?V0
   \   00009A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00009D   75..11       MOV     ?V0,#0x11
   \   0000A0   75..00       MOV     ?V1,#0x0
   \   0000A3   78..         MOV     R0,#?V0
   \   0000A5   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000A8   7C00         MOV     R4,#0x0
   \   0000AA   7D00         MOV     R5,#0x0
   \   0000AC   7A81         MOV     R2,#-0x7f
   \   0000AE   7B00         MOV     R3,#0x0
   \   0000B0   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   0000B3   7404         MOV     A,#0x4
   \   0000B5   12....       LCALL   ?DEALLOC_XSTACK8
   1971              if ( userDesc.len != 0 )
   \   0000B8   7404         MOV     A,#0x4
   \   0000BA   12....       LCALL   ?XSTACK_DISP0_8
   \   0000BD   E0           MOVX    A,@DPTR
   \   0000BE   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   0000C1   6005         JZ      ??ZDO_ProcessUserDescSet_4
   1972              {
   1973                ZDO_Config_Node_Descriptor.UserDescAvail = TRUE;
   \   0000C3   E0           MOVX    A,@DPTR
   \   0000C4   D2E4         SETB    0xE0 /* A   */.4
   \   0000C6   8003         SJMP    ??ZDO_ProcessUserDescSet_5
   1974              }
   1975              else
   1976              {
   1977                ZDO_Config_Node_Descriptor.UserDescAvail = FALSE;
   \                     ??ZDO_ProcessUserDescSet_4:
   \   0000C8   E0           MOVX    A,@DPTR
   \   0000C9   C2E4         CLR     0xE0 /* A   */.4
   \                     ??ZDO_ProcessUserDescSet_5:
   \   0000CB   F0           MOVX    @DPTR,A
   1978              }
   1979          
   1980              status = ZDP_SUCCESS;
   \   0000CC   85..82       MOV     DPL,?XSP + 0
   \   0000CF   85..83       MOV     DPH,?XSP + 1
   \   0000D2   E4           CLR     A
   \   0000D3   8008         SJMP    ??ZDO_ProcessUserDescSet_6
   1981            }
   1982            else
   1983            {
   1984              status =  ZDP_NOT_SUPPORTED;
   \                     ??ZDO_ProcessUserDescSet_1:
   \   0000D5   85..82       MOV     DPL,?XSP + 0
   \   0000D8   85..83       MOV     DPH,?XSP + 1
   \   0000DB   7484         MOV     A,#-0x7c
   \                     ??ZDO_ProcessUserDescSet_6:
   \   0000DD   F0           MOVX    @DPTR,A
   1985            }
   1986          
   1987            outMsg[0] = status;
   \   0000DE   E0           MOVX    A,@DPTR
   \   0000DF   C0E0         PUSH    A
   \   0000E1   7401         MOV     A,#0x1
   \   0000E3   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E6   D0E0         POP     A
   \   0000E8   F0           MOVX    @DPTR,A
   1988            outMsg[1] = LO_UINT16( aoi );
   \   0000E9   7402         MOV     A,#0x2
   \   0000EB   12....       LCALL   ?XSTACK_DISP0_8
   \   0000EE   EE           MOV     A,R6
   \   0000EF   F0           MOVX    @DPTR,A
   1989            outMsg[2] = LO_UINT16( aoi );
   \   0000F0   7403         MOV     A,#0x3
   \   0000F2   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F5   EE           MOV     A,R6
   \   0000F6   F0           MOVX    @DPTR,A
   1990          
   1991            ZDP_SendData( &(inMsg->TransSeq), &(inMsg->srcAddr), User_Desc_conf, 3, outMsg,
   1992                         inMsg->SecurityUse );
   \   0000F7                ; Setup parameters for call to function ZDP_SendData
   \   0000F7   12....       LCALL   ?Subroutine83 & 0xFFFF
   \                     ??CrossCallReturnLabel_324:
   \   0000FA   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000FD   7402         MOV     A,#0x2
   \   0000FF   12....       LCALL   ?XSTACK_DISP100_8
   \   000102   88..         MOV     ?V0,R0
   \   000104   89..         MOV     ?V1,R1
   \   000106   78..         MOV     R0,#?V0
   \   000108   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00010B   75..14       MOV     ?V0,#0x14
   \   00010E   75..80       MOV     ?V1,#-0x80
   \   000111   78..         MOV     R0,#?V0
   \   000113   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000116   7903         MOV     R1,#0x3
   \   000118   12....       LCALL   ?Subroutine109 & 0xFFFF
   \                     ??CrossCallReturnLabel_185:
   \   00011B   12....       LCALL   `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   00011E   7405         MOV     A,#0x5
   \   000120   12....       LCALL   ?DEALLOC_XSTACK8
   1993          }
   \   000123   7415         MOV     A,#0x15
   \   000125   02....       LJMP    ?Subroutine4 & 0xFFFF
   1994          
   1995          /*********************************************************************
   1996           * @fn          ZDO_ProcessDeviceAnnce
   1997           *
   1998           * @brief       This function processes a device annouce message.
   1999           *
   2000           * @param       inMsg - incoming message
   2001           *
   2002           * @return      none
   2003           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2004          void ZDO_ProcessDeviceAnnce( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessDeviceAnnce:
   2005          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 32
   \   000005   74E0         MOV     A,#-0x20
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   2006            ZDO_DeviceAnnce_t Annce;
   2007            AddrMgrEntry_t addrEntry;
   2008            uint8 parentExt[Z_EXTADDR_LEN];
   2009          
   2010            // Parse incoming message
   2011            ZDO_ParseDeviceAnnce( inMsg, &Annce );
   \   00000A                ; Setup parameters for call to function ZDO_ParseDeviceAnnce
   \   00000A   AC..         MOV     R4,?XSP + 0
   \   00000C   AD..         MOV     R5,?XSP + 1
   \   00000E   12....       LCALL   `??ZDO_ParseDeviceAnnce::?relay`; Banked call to: ZDO_ParseDeviceAnnce
   2012          
   2013            if ( ZSTACK_END_DEVICE_BUILD )
   2014            {
   2015              // Make sure the message didn't come from myself - end device only
   2016              if ( osal_ExtAddrEqual( NLME_GetExtAddr(), Annce.extAddr ) && Annce.nwkAddr == NLME_GetShortAddr() )
   \   000011                ; Setup parameters for call to function NLME_GetExtAddr
   \   000011   12....       LCALL   `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
   \   000014                ; Setup parameters for call to function sAddrExtCmp
   \   000014   7402         MOV     A,#0x2
   \   000016   12....       LCALL   ?XSTACK_DISP0_8
   \   000019   AC82         MOV     R4,DPL
   \   00001B   AD83         MOV     R5,DPH
   \   00001D   12....       LCALL   `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   000020   E9           MOV     A,R1
   \   000021   601D         JZ      ??ZDO_ProcessDeviceAnnce_0
   \   000023                ; Setup parameters for call to function NLME_GetShortAddr
   \   000023   12....       LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   000026   8A..         MOV     ?V0,R2
   \   000028   8B..         MOV     ?V1,R3
   \   00002A   A8..         MOV     R0,?V0
   \   00002C   A9..         MOV     R1,?V1
   \   00002E   85..82       MOV     DPL,?XSP + 0
   \   000031   85..83       MOV     DPH,?XSP + 1
   \   000034   E0           MOVX    A,@DPTR
   \   000035   68           XRL     A,R0
   \   000036   7003         JNZ     ??ZDO_ProcessDeviceAnnce_1
   \   000038   A3           INC     DPTR
   \   000039   E0           MOVX    A,@DPTR
   \   00003A   69           XRL     A,R1
   \                     ??ZDO_ProcessDeviceAnnce_1:
   \   00003B   7003         JNZ     $+5
   \   00003D   02....       LJMP    ??ZDO_ProcessDeviceAnnce_2 & 0xFFFF
   2017              {
   2018                return;
   2019              }
   2020            }
   2021          
   2022          #if defined ( ZIGBEE_STOCHASTIC_ADDRESSING )
   2023            // Clean up the neighbor table
   2024            nwkNeighborRemoveAllStranded();
   \                     ??ZDO_ProcessDeviceAnnce_0:
   \   000040                ; Setup parameters for call to function nwkNeighborRemoveAllStranded
   \   000040   12....       LCALL   `??nwkNeighborRemoveAllStranded::?relay`; Banked call to: nwkNeighborRemoveAllStranded
   2025          
   2026            // If address conflict is detected, no need to update the address manager
   2027            if ( NLME_CheckNewAddrSet( Annce.nwkAddr, Annce.extAddr )== ZFailure )
   \   000043                ; Setup parameters for call to function NLME_CheckNewAddrSet
   \   000043   7402         MOV     A,#0x2
   \   000045   12....       LCALL   ?XSTACK_DISP0_8
   \   000048   12....       LCALL   ?Subroutine63 & 0xFFFF
   \                     ??CrossCallReturnLabel_531:
   \   00004B   12....       LCALL   `??NLME_CheckNewAddrSet::?relay`; Banked call to: NLME_CheckNewAddrSet
   \   00004E   E9           MOV     A,R1
   \   00004F   6401         XRL     A,#0x1
   \   000051   7003         JNZ     $+5
   \   000053   02....       LJMP    ??ZDO_ProcessDeviceAnnce_2 & 0xFFFF
   2028            {
   2029              return;
   2030            }
   2031          #endif
   2032          
   2033          #if defined ( ZIGBEE_STOCHASTIC_ADDRESSING )
   2034            // Check for parent's address
   2035            NLME_GetCoordExtAddr( parentExt );
   \   000056                ; Setup parameters for call to function NLME_GetCoordExtAddr
   \   000056   7418         MOV     A,#0x18
   \   000058   12....       LCALL   ?XSTACK_DISP101_8
   \   00005B   12....       LCALL   `??NLME_GetCoordExtAddr::?relay`; Banked call to: NLME_GetCoordExtAddr
   2036            if ( osal_ExtAddrEqual( parentExt, Annce.extAddr ) )
   \   00005E                ; Setup parameters for call to function sAddrExtCmp
   \   00005E   7402         MOV     A,#0x2
   \   000060   12....       LCALL   ?XSTACK_DISP0_8
   \   000063   AC82         MOV     R4,DPL
   \   000065   AD83         MOV     R5,DPH
   \   000067   7418         MOV     A,#0x18
   \   000069   12....       LCALL   ?XSTACK_DISP101_8
   \   00006C   12....       LCALL   `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   00006F   E9           MOV     A,R1
   \   000070   6032         JZ      ??ZDO_ProcessDeviceAnnce_3
   2037            {
   2038              if ( Annce.nwkAddr != NLME_GetCoordShortAddr() )
   \   000072                ; Setup parameters for call to function NLME_GetCoordShortAddr
   \   000072   12....       LCALL   `??NLME_GetCoordShortAddr::?relay`; Banked call to: NLME_GetCoordShortAddr
   \   000075   8A..         MOV     ?V0,R2
   \   000077   8B..         MOV     ?V1,R3
   \   000079   A8..         MOV     R0,?V0
   \   00007B   A9..         MOV     R1,?V1
   \   00007D   85..82       MOV     DPL,?XSP + 0
   \   000080   85..83       MOV     DPH,?XSP + 1
   \   000083   E0           MOVX    A,@DPTR
   \   000084   68           XRL     A,R0
   \   000085   7003         JNZ     ??ZDO_ProcessDeviceAnnce_4
   \   000087   A3           INC     DPTR
   \   000088   E0           MOVX    A,@DPTR
   \   000089   69           XRL     A,R1
   \                     ??ZDO_ProcessDeviceAnnce_4:
   \   00008A   6018         JZ      ??ZDO_ProcessDeviceAnnce_3
   2039              {
   2040                // Set the Parent's MAC's new short address
   2041                _NIB.nwkCoordAddress = Annce.nwkAddr;
   \   00008C   85..82       MOV     DPL,?XSP + 0
   \   00008F   85..83       MOV     DPH,?XSP + 1
   \   000092   12....       LCALL   ??Subroutine201_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_364:
   \   000095   90....       MOV     DPTR,#_NIB + 23
   \   000098   12....       LCALL   ??Subroutine202_0 & 0xFFFF
   2042                ZMacSetReq( ZMacCoordShortAddress, (byte*)&(_NIB.nwkCoordAddress) );
   \                     ??CrossCallReturnLabel_379:
   \   00009B                ; Setup parameters for call to function ZMacSetReq
   \   00009B   7A..         MOV     R2,#(_NIB + 23) & 0xff
   \   00009D   7B..         MOV     R3,#((_NIB + 23) >> 8) & 0xff
   \   00009F   794B         MOV     R1,#0x4b
   \   0000A1   12....       LCALL   `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
   2043              }
   2044            }
   2045          
   2046            if ( ZSTACK_ROUTER_BUILD )
   2047            {
   2048              // If the device annce comes from a end device child that has moved
   2049              // to another parent, remove it from associated device list
   2050          
   2051              // If the dev annce is coming from other device's children,
   2052              // (The dev annce from its own children shall be unicast to itself,
   2053              // So check the mac destination address)
   2054              // Remove it from the associated device list. If it is not
   2055              // a child, no action will be taken in AssocRemove() anyway.
   2056              if ( inMsg->macDestAddr != NLME_GetShortAddr() )
   2057              {
   2058                associated_devices_t *dev_ptr;
   2059          
   2060                // If it's an end device child
   2061                dev_ptr = AssocGetWithExt( Annce.extAddr );
   2062                if ( dev_ptr )
   2063                {
   2064                  if ( dev_ptr->nodeRelation == CHILD_RFD ||
   2065                       dev_ptr->nodeRelation == CHILD_RFD_RX_IDLE )
   2066                  {
   2067                    AssocRemove( Annce.extAddr );
   2068                  }
   2069                }
   2070          
   2071          #if defined ( ZIGBEE_CHILD_AGING )
   2072                // Remove the address from the SrcMatch table,
   2073                // just in case the device was aged out by Child Management Table process
   2074                if ( ( pNwkNotMyChildListDelete != NULL ) &&
   2075                     ( zgChildAgingEnable == TRUE ) )
   2076                {
   2077                  pNwkNotMyChildListDelete( Annce.nwkAddr );
   2078                }
   2079          #endif // ZIGBEE_CHILD_AGING
   2080              }
   2081          
   2082              if ( Annce.nwkAddr != NLME_GetShortAddr() )
   2083              {
   2084                // If an associated device is found with matched extended Address,
   2085                // update its short address
   2086                if ( AssocChangeNwkAddr( Annce.nwkAddr, Annce.extAddr ) )
   2087                {
   2088                  // Set event to save NV
   2089                  ZDApp_NVUpdate();
   2090                }
   2091              }
   2092            }
   2093          
   2094            // Update the neighbor table
   2095            nwkNeighborUpdateNwkAddr( Annce.nwkAddr, Annce.extAddr );
   \                     ??ZDO_ProcessDeviceAnnce_3:
   \   0000A4                ; Setup parameters for call to function nwkNeighborUpdateNwkAddr
   \   0000A4   7402         MOV     A,#0x2
   \   0000A6   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A9   12....       LCALL   ?Subroutine63 & 0xFFFF
   \                     ??CrossCallReturnLabel_532:
   \   0000AC   12....       LCALL   `??nwkNeighborUpdateNwkAddr::?relay`; Banked call to: nwkNeighborUpdateNwkAddr
   2096          
   2097            // Assume that the device has moved, remove existing routing entries
   2098            RTG_RemoveRtgEntry( Annce.nwkAddr, 0 );
   \   0000AF                ; Setup parameters for call to function RTG_RemoveRtgEntry
   \   0000AF   7900         MOV     R1,#0x0
   \   0000B1   12....       LCALL   ??Subroutine232_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_529:
   \   0000B4   12....       LCALL   `??RTG_RemoveRtgEntry::?relay`; Banked call to: RTG_RemoveRtgEntry
   2099          
   2100          #endif // ZIGBEE_STOCHASTIC_ADDRESSING
   2101          
   2102            // Fill in the extended address in address manager if we don't have it already.
   2103            addrEntry.user = ADDRMGR_USER_DEFAULT;
   \   0000B7   740B         MOV     A,#0xb
   \   0000B9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000BC   E4           CLR     A
   \   0000BD   12....       LCALL   ?Subroutine33 & 0xFFFF
   2104            addrEntry.nwkAddr = Annce.nwkAddr;
   \                     ??CrossCallReturnLabel_49:
   \   0000C0   F8           MOV     R0,A
   \   0000C1   A3           INC     DPTR
   \   0000C2   E0           MOVX    A,@DPTR
   \   0000C3   F9           MOV     R1,A
   \   0000C4   740C         MOV     A,#0xc
   \   0000C6   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C9   12....       LCALL   ?Subroutine41 & 0xFFFF
   2105            if ( AddrMgrEntryLookupNwk( &addrEntry ) )
   \                     ??CrossCallReturnLabel_67:
   \   0000CC   12....       LCALL   ?XSTACK_DISP101_8
   \   0000CF   12....       LCALL   `??AddrMgrEntryLookupNwk::?relay`; Banked call to: AddrMgrEntryLookupNwk
   \   0000D2   E9           MOV     A,R1
   \   0000D3   603F         JZ      ??ZDO_ProcessDeviceAnnce_5
   2106            {
   2107              osal_memset( parentExt, 0, Z_EXTADDR_LEN );
   \   0000D5                ; Setup parameters for call to function osal_memset
   \   0000D5   7C08         MOV     R4,#0x8
   \   0000D7   7D00         MOV     R5,#0x0
   \   0000D9   7900         MOV     R1,#0x0
   \   0000DB   7418         MOV     A,#0x18
   \   0000DD   12....       LCALL   ?XSTACK_DISP101_8
   \   0000E0   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   2108              if ( osal_ExtAddrEqual( parentExt, addrEntry.extAddr ) )
   \   0000E3                ; Setup parameters for call to function sAddrExtCmp
   \   0000E3   740E         MOV     A,#0xe
   \   0000E5   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E8   AC82         MOV     R4,DPL
   \   0000EA   AD83         MOV     R5,DPH
   \   0000EC   7418         MOV     A,#0x18
   \   0000EE   12....       LCALL   ?XSTACK_DISP101_8
   \   0000F1   12....       LCALL   `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   0000F4   E9           MOV     A,R1
   \   0000F5   601D         JZ      ??ZDO_ProcessDeviceAnnce_5
   2109              {
   2110                AddrMgrExtAddrSet( addrEntry.extAddr, Annce.extAddr );
   \   0000F7                ; Setup parameters for call to function AddrMgrExtAddrSet
   \   0000F7   7402         MOV     A,#0x2
   \   0000F9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000FC   AC82         MOV     R4,DPL
   \   0000FE   AD83         MOV     R5,DPH
   \   000100   740E         MOV     A,#0xe
   \   000102   12....       LCALL   ?XSTACK_DISP0_8
   \   000105   AA82         MOV     R2,DPL
   \   000107   AB83         MOV     R3,DPH
   \   000109   12....       LCALL   `??AddrMgrExtAddrSet::?relay`; Banked call to: AddrMgrExtAddrSet
   2111                AddrMgrEntryUpdate( &addrEntry );
   \   00010C                ; Setup parameters for call to function AddrMgrEntryUpdate
   \   00010C   740B         MOV     A,#0xb
   \   00010E   12....       LCALL   ?XSTACK_DISP101_8
   \   000111   12....       LCALL   `??AddrMgrEntryUpdate::?relay`; Banked call to: AddrMgrEntryUpdate
   2112              }
   2113            }
   2114          
   2115            // Update the short address in address manager if it's been changed
   2116            AddrMgrExtAddrSet( addrEntry.extAddr, Annce.extAddr );
   \                     ??ZDO_ProcessDeviceAnnce_5:
   \   000114                ; Setup parameters for call to function AddrMgrExtAddrSet
   \   000114   7402         MOV     A,#0x2
   \   000116   12....       LCALL   ?XSTACK_DISP0_8
   \   000119   AC82         MOV     R4,DPL
   \   00011B   AD83         MOV     R5,DPH
   \   00011D   740E         MOV     A,#0xe
   \   00011F   12....       LCALL   ?XSTACK_DISP0_8
   \   000122   AA82         MOV     R2,DPL
   \   000124   AB83         MOV     R3,DPH
   \   000126   12....       LCALL   `??AddrMgrExtAddrSet::?relay`; Banked call to: AddrMgrExtAddrSet
   2117            if ( AddrMgrEntryLookupExt( &addrEntry ) )
   \   000129                ; Setup parameters for call to function AddrMgrEntryLookupExt
   \   000129   740B         MOV     A,#0xb
   \   00012B   12....       LCALL   ?XSTACK_DISP101_8
   \   00012E   12....       LCALL   `??AddrMgrEntryLookupExt::?relay`; Banked call to: AddrMgrEntryLookupExt
   \   000131   E9           MOV     A,R1
   \   000132   602E         JZ      ??ZDO_ProcessDeviceAnnce_2
   2118            {
   2119              if ( addrEntry.nwkAddr != Annce.nwkAddr )
   \   000134   740C         MOV     A,#0xc
   \   000136   12....       LCALL   ?XSTACK_DISP0_8
   \   000139   12....       LCALL   ??Subroutine201_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_365:
   \   00013C   85..82       MOV     DPL,?XSP + 0
   \   00013F   85..83       MOV     DPH,?XSP + 1
   \   000142   E0           MOVX    A,@DPTR
   \   000143   68           XRL     A,R0
   \   000144   7003         JNZ     ??ZDO_ProcessDeviceAnnce_6
   \   000146   A3           INC     DPTR
   \   000147   E0           MOVX    A,@DPTR
   \   000148   69           XRL     A,R1
   \                     ??ZDO_ProcessDeviceAnnce_6:
   \   000149   6017         JZ      ??ZDO_ProcessDeviceAnnce_2
   2120              {
   2121                addrEntry.nwkAddr = Annce.nwkAddr;
   \   00014B   85..82       MOV     DPL,?XSP + 0
   \   00014E   85..83       MOV     DPH,?XSP + 1
   \   000151   12....       LCALL   ??Subroutine201_0 & 0xFFFF
   2122                AddrMgrEntryUpdate( &addrEntry );
   2123              }
   2124            }
   \                     ??CrossCallReturnLabel_366:
   \   000154   740C         MOV     A,#0xc
   \   000156   12....       LCALL   ?XSTACK_DISP0_8
   \   000159   12....       LCALL   ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_68:
   \   00015C   12....       LCALL   ?XSTACK_DISP101_8
   \   00015F   12....       LCALL   `??AddrMgrEntryUpdate::?relay`; Banked call to: AddrMgrEntryUpdate
   2125          }
   \                     ??ZDO_ProcessDeviceAnnce_2:
   \   000162   7420         MOV     A,#0x20
   \   000164   02....       LJMP    ??Subroutine186_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine63:
   \   000000   AC82         MOV     R4,DPL
   \   000002   AD83         MOV     R5,DPH
   \   000004                REQUIRE ??Subroutine232_0
   \   000004                ; // Fall through to label ??Subroutine232_0
   2126          
   2127          /*********************************************************************
   2128           * @fn          ZDO_BuildSimpleDescBuf
   2129           *
   2130           * @brief       Build a byte sequence representation of a Simple Descriptor.
   2131           *
   2132           * @param       buf  - pointer to a byte array big enough for data.
   2133           * @param       desc - SimpleDescriptionFormat_t *
   2134           *
   2135           * @return      none
   2136           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine69:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   A3           INC     DPTR
   \   000004                REQUIRE ??Subroutine199_0
   \   000004                ; // Fall through to label ??Subroutine199_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2137          void ZDO_BuildSimpleDescBuf( uint8 *buf, SimpleDescriptionFormat_t *desc )
   \                     ZDO_BuildSimpleDescBuf:
   2138          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EC           MOV     A,R4
   \   000006   FE           MOV     R6,A
   \   000007   ED           MOV     A,R5
   \   000008   FF           MOV     R7,A
   2139            byte cnt;
   2140            uint16 *ptr;
   2141          
   2142            *buf++ = desc->EndPoint;
   \   000009   12....       LCALL   ?Subroutine86 & 0xFFFF
   2143            *buf++ = HI_UINT16( desc->AppProfId );
   \                     ??CrossCallReturnLabel_148:
   \   00000C   A882         MOV     R0,DPL
   \   00000E   A983         MOV     R1,DPH
   \   000010   12....       LCALL   ??Subroutine211_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_414:
   \   000013   12....       LCALL   ?Subroutine31 & 0xFFFF
   2144            *buf++ = LO_UINT16( desc->AppProfId );
   \                     ??CrossCallReturnLabel_43:
   \   000016   F0           MOVX    @DPTR,A
   2145            *buf++ = HI_UINT16( desc->AppDeviceId );
   \   000017   EE           MOV     A,R6
   \   000018   2403         ADD     A,#0x3
   \   00001A   F8           MOV     R0,A
   \   00001B   E4           CLR     A
   \   00001C   3F           ADDC    A,R7
   \   00001D   F9           MOV     R1,A
   \   00001E   12....       LCALL   ?Subroutine146 & 0xFFFF
   \                     ??CrossCallReturnLabel_416:
   \   000021   A3           INC     DPTR
   \   000022   A3           INC     DPTR
   \   000023   12....       LCALL   ?Subroutine31 & 0xFFFF
   2146            *buf++ = LO_UINT16( desc->AppDeviceId );
   \                     ??CrossCallReturnLabel_44:
   \   000026   A3           INC     DPTR
   \   000027   A3           INC     DPTR
   \   000028   12....       LCALL   ?Subroutine16 & 0xFFFF
   2147          
   2148            *buf++ = (byte)(desc->AppDevVer << 4);
   \                     ??CrossCallReturnLabel_16:
   \   00002B   C4           SWAP    A
   \   00002C   54F0         ANL     A,#0xf0
   \   00002E   8A82         MOV     DPL,R2
   \   000030   8B83         MOV     DPH,R3
   \   000032   A3           INC     DPTR
   \   000033   A3           INC     DPTR
   \   000034   A3           INC     DPTR
   \   000035   A3           INC     DPTR
   \   000036   A3           INC     DPTR
   \   000037   12....       LCALL   ?Subroutine46 & 0xFFFF
   2149          
   2150            *buf++ = desc->AppNumInClusters;
   \                     ??CrossCallReturnLabel_73:
   \   00003A   A3           INC     DPTR
   \   00003B   A3           INC     DPTR
   \   00003C   12....       LCALL   ?Subroutine85 & 0xFFFF
   \                     ??CrossCallReturnLabel_147:
   \   00003F   F0           MOVX    @DPTR,A
   \   000040   EA           MOV     A,R2
   \   000041   2407         ADD     A,#0x7
   \   000043   FA           MOV     R2,A
   \   000044   5001         JNC     ??ZDO_BuildSimpleDescBuf_0
   \   000046   0B           INC     R3
   2151            ptr = desc->pAppInClusterList;
   \                     ??ZDO_BuildSimpleDescBuf_0:
   \   000047   8E82         MOV     DPL,R6
   \   000049   8F83         MOV     DPH,R7
   \   00004B   12....       LCALL   ?Subroutine69 & 0xFFFF
   2152            for ( cnt = 0; cnt < desc->AppNumInClusters; ptr++, cnt++ )
   \                     ??CrossCallReturnLabel_370:
   \   00004E   7C00         MOV     R4,#0x0
   \   000050   800E         SJMP    ??ZDO_BuildSimpleDescBuf_1
   2153            {
   2154              *buf++ = HI_UINT16( *ptr );
   \                     ??ZDO_BuildSimpleDescBuf_2:
   \   000052   12....       LCALL   ?Subroutine21 & 0xFFFF
   2155              *buf++ = LO_UINT16( *ptr );
   2156            }
   \                     ??CrossCallReturnLabel_23:
   \   000055   5001         JNC     ??ZDO_BuildSimpleDescBuf_3
   \   000057   0B           INC     R3
   \                     ??ZDO_BuildSimpleDescBuf_3:
   \   000058   E8           MOV     A,R0
   \   000059   2402         ADD     A,#0x2
   \   00005B   F8           MOV     R0,A
   \   00005C   5001         JNC     ??ZDO_BuildSimpleDescBuf_4
   \   00005E   09           INC     R1
   \                     ??ZDO_BuildSimpleDescBuf_4:
   \   00005F   0C           INC     R4
   \                     ??ZDO_BuildSimpleDescBuf_1:
   \   000060   8E82         MOV     DPL,R6
   \   000062   8F83         MOV     DPH,R7
   \   000064   A3           INC     DPTR
   \   000065   A3           INC     DPTR
   \   000066   A3           INC     DPTR
   \   000067   A3           INC     DPTR
   \   000068   A3           INC     DPTR
   \   000069   A3           INC     DPTR
   \   00006A   E0           MOVX    A,@DPTR
   \   00006B   FD           MOV     R5,A
   \   00006C   EC           MOV     A,R4
   \   00006D   C3           CLR     C
   \   00006E   9D           SUBB    A,R5
   \   00006F   40E1         JC      ??ZDO_BuildSimpleDescBuf_2
   2157          
   2158            *buf++ = desc->AppNumOutClusters;
   \   000071   8E82         MOV     DPL,R6
   \   000073   8F83         MOV     DPH,R7
   \   000075   A3           INC     DPTR
   \   000076   A3           INC     DPTR
   \   000077   A3           INC     DPTR
   \   000078   A3           INC     DPTR
   \   000079   A3           INC     DPTR
   \   00007A   A3           INC     DPTR
   \   00007B   A3           INC     DPTR
   \   00007C   A3           INC     DPTR
   \   00007D   12....       LCALL   ??Subroutine211_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_415:
   \   000080   F0           MOVX    @DPTR,A
   \   000081   A3           INC     DPTR
   \   000082   AA82         MOV     R2,DPL
   \   000084   AB83         MOV     R3,DPH
   2159            ptr = desc->pAppOutClusterList;
   \   000086   8E82         MOV     DPL,R6
   \   000088   8F83         MOV     DPH,R7
   \   00008A   A3           INC     DPTR
   \   00008B   A3           INC     DPTR
   \   00008C   A3           INC     DPTR
   \   00008D   12....       LCALL   ?Subroutine69 & 0xFFFF
   2160            for ( cnt = 0; cnt < desc->AppNumOutClusters; ptr++, cnt++ )
   \                     ??CrossCallReturnLabel_371:
   \   000090   7C00         MOV     R4,#0x0
   \   000092   800E         SJMP    ??ZDO_BuildSimpleDescBuf_5
   2161            {
   2162              *buf++ = HI_UINT16( *ptr );
   \                     ??ZDO_BuildSimpleDescBuf_6:
   \   000094   12....       LCALL   ?Subroutine21 & 0xFFFF
   2163              *buf++ = LO_UINT16( *ptr );
   2164            }
   \                     ??CrossCallReturnLabel_24:
   \   000097   5001         JNC     ??ZDO_BuildSimpleDescBuf_7
   \   000099   0B           INC     R3
   \                     ??ZDO_BuildSimpleDescBuf_7:
   \   00009A   E8           MOV     A,R0
   \   00009B   2402         ADD     A,#0x2
   \   00009D   F8           MOV     R0,A
   \   00009E   5001         JNC     ??ZDO_BuildSimpleDescBuf_8
   \   0000A0   09           INC     R1
   \                     ??ZDO_BuildSimpleDescBuf_8:
   \   0000A1   0C           INC     R4
   \                     ??ZDO_BuildSimpleDescBuf_5:
   \   0000A2   8E82         MOV     DPL,R6
   \   0000A4   8F83         MOV     DPH,R7
   \   0000A6   A3           INC     DPTR
   \   0000A7   A3           INC     DPTR
   \   0000A8   A3           INC     DPTR
   \   0000A9   A3           INC     DPTR
   \   0000AA   A3           INC     DPTR
   \   0000AB   A3           INC     DPTR
   \   0000AC   A3           INC     DPTR
   \   0000AD   A3           INC     DPTR
   \   0000AE   A3           INC     DPTR
   \   0000AF   E0           MOVX    A,@DPTR
   \   0000B0   FD           MOV     R5,A
   \   0000B1   EC           MOV     A,R4
   \   0000B2   C3           CLR     C
   \   0000B3   9D           SUBB    A,R5
   \   0000B4   40DE         JC      ??ZDO_BuildSimpleDescBuf_6
   2165          }
   \   0000B6   02....       LJMP    ??Subroutine187_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine146:
   \   000000   8882         MOV     DPL,R0
   \   000002   8983         MOV     DPH,R1
   \   000004                REQUIRE ??Subroutine211_0
   \   000004                ; // Fall through to label ??Subroutine211_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine211_0:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine212_0
   \   000001                ; // Fall through to label ??Subroutine212_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   A3           INC     DPTR
   \   000001   12....       LCALL   ?Subroutine132 & 0xFFFF
   \                     ??CrossCallReturnLabel_226:
   \   000004   A3           INC     DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   12....       LCALL   ?Subroutine146 & 0xFFFF
   \                     ??CrossCallReturnLabel_417:
   \   000003   12....       LCALL   ?Subroutine132 & 0xFFFF
   \                     ??CrossCallReturnLabel_227:
   \   000006   F0           MOVX    @DPTR,A
   \   000007   EA           MOV     A,R2
   \   000008   2402         ADD     A,#0x2
   \   00000A   FA           MOV     R2,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine132:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8882         MOV     DPL,R0
   \   000003   8983         MOV     DPH,R1
   \   000005   E0           MOVX    A,@DPTR
   \   000006   8A82         MOV     DPL,R2
   \   000008   8B83         MOV     DPH,R3
   \   00000A   A3           INC     DPTR
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine46:
   \   000000   12....       LCALL   ?Subroutine140 & 0xFFFF
   \                     ??CrossCallReturnLabel_245:
   \   000003   A3           INC     DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine140:
   \   000000   12....       LCALL   ?Subroutine176 & 0xFFFF
   \                     ??CrossCallReturnLabel_299:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine86:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004   12....       LCALL   ??Subroutine212_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_413:
   \   000007   12....       LCALL   ?Subroutine141 & 0xFFFF
   \                     ??CrossCallReturnLabel_460:
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine141:
   \   000000   12....       LCALL   ?Subroutine184 & 0xFFFF
   \                     ??CrossCallReturnLabel_465:
   \   000003   A3           INC     DPTR
   \   000004   22           RET
   2166          
   2167          #if ( ZG_BUILD_COORDINATOR_TYPE )
   2168          /*********************************************************************
   2169           * @fn      ZDO_MatchEndDeviceBind()
   2170           *
   2171           * @brief
   2172           *
   2173           *   Called to match end device binding requests
   2174           *
   2175           * @param  bindReq  - binding request information
   2176           * @param  SecurityUse - Security enable/disable
   2177           *
   2178           * @return  none
   2179           */
   2180          void ZDO_MatchEndDeviceBind( ZDEndDeviceBind_t *bindReq )
   2181          {
   2182            zAddrType_t dstAddr;
   2183            uint8 sendRsp = FALSE;
   2184            uint8 status;
   2185          
   2186            // Is this the first request?
   2187            if ( matchED == NULL )
   2188            {
   2189              // Create match info structure
   2190              matchED = (ZDMatchEndDeviceBind_t *)osal_mem_alloc( sizeof ( ZDMatchEndDeviceBind_t ) );
   2191              if ( matchED )
   2192              {
   2193                // Clear the structure
   2194                osal_memset( (uint8 *)matchED, 0, sizeof ( ZDMatchEndDeviceBind_t ) );
   2195          
   2196                // Copy the first request's information
   2197                if ( !ZDO_CopyMatchInfo( &(matchED->ed1), bindReq ) )
   2198                {
   2199                  status = ZDP_NO_ENTRY;
   2200                  sendRsp = TRUE;
   2201                }
   2202              }
   2203              else
   2204              {
   2205                status = ZDP_NO_ENTRY;
   2206                sendRsp = TRUE;
   2207              }
   2208          
   2209              if ( !sendRsp )
   2210              {
   2211                // Set into the correct state
   2212                matchED->state = ZDMATCH_WAIT_REQ;
   2213          
   2214                // Setup the timeout
   2215                APS_SetEndDeviceBindTimeout( AIB_MaxBindingTime, ZDO_EndDeviceBindMatchTimeoutCB );
   2216              }
   2217            }
   2218            else
   2219            {
   2220                matchED->state = ZDMATCH_SENDING_BINDS;
   2221          
   2222                // Copy the 2nd request's information
   2223                if ( !ZDO_CopyMatchInfo( &(matchED->ed2), bindReq ) )
   2224                {
   2225                  status = ZDP_NO_ENTRY;
   2226                  sendRsp = TRUE;
   2227                }
   2228          
   2229                // Make a source match for ed1
   2230                matchED->ed1numMatched = ZDO_CompareClusterLists(
   2231                            matchED->ed1.numOutClusters, matchED->ed1.outClusters,
   2232                            matchED->ed2.numInClusters, matchED->ed2.inClusters, ZDOBuildBuf );
   2233                if ( matchED->ed1numMatched )
   2234                {
   2235                  // Save the match list
   2236                  matchED->ed1Matched = osal_mem_alloc( (short)(matchED->ed1numMatched * sizeof ( uint16 )) );
   2237                  if ( matchED->ed1Matched )
   2238                  {
   2239                    osal_memcpy( matchED->ed1Matched, ZDOBuildBuf, (matchED->ed1numMatched * sizeof ( uint16 )) );
   2240                  }
   2241                  else
   2242                  {
   2243                    // Allocation error, stop
   2244                    status = ZDP_NO_ENTRY;
   2245                    sendRsp = TRUE;
   2246                  }
   2247                }
   2248          
   2249                // Make a source match for ed2
   2250                matchED->ed2numMatched = ZDO_CompareClusterLists(
   2251                            matchED->ed2.numOutClusters, matchED->ed2.outClusters,
   2252                            matchED->ed1.numInClusters, matchED->ed1.inClusters, ZDOBuildBuf );
   2253                if ( matchED->ed2numMatched )
   2254                {
   2255                  // Save the match list
   2256                  matchED->ed2Matched = osal_mem_alloc( (short)(matchED->ed2numMatched * sizeof ( uint16 )) );
   2257                  if ( matchED->ed2Matched )
   2258                  {
   2259                    osal_memcpy( matchED->ed2Matched, ZDOBuildBuf, (matchED->ed2numMatched * sizeof ( uint16 )) );
   2260                  }
   2261                  else
   2262                  {
   2263                    // Allocation error, stop
   2264                    status = ZDP_NO_ENTRY;
   2265                    sendRsp = TRUE;
   2266                  }
   2267                }
   2268          
   2269                if ( (sendRsp == FALSE) && (matchED->ed1numMatched || matchED->ed2numMatched) )
   2270                {
   2271                  // Do the first unbind/bind state
   2272                  ZDMatchSendState( ZDMATCH_REASON_START, ZDP_SUCCESS, 0 );
   2273                }
   2274                else
   2275                {
   2276                  status = ZDP_NO_MATCH;
   2277                  sendRsp = TRUE;
   2278                }
   2279            }
   2280          
   2281            if ( sendRsp )
   2282            {
   2283              // send response to this requester
   2284              dstAddr.addrMode = Addr16Bit;
   2285              dstAddr.addr.shortAddr = bindReq->srcAddr;
   2286              ZDP_EndDeviceBindRsp( bindReq->TransSeq, &dstAddr, status, bindReq->SecurityUse );
   2287          
   2288              if ( matchED->state == ZDMATCH_SENDING_BINDS )
   2289              {
   2290                // send response to first requester
   2291                dstAddr.addrMode = Addr16Bit;
   2292                dstAddr.addr.shortAddr = matchED->ed1.srcAddr;
   2293                ZDP_EndDeviceBindRsp( matchED->ed1.TransSeq, &dstAddr, status, matchED->ed1.SecurityUse );
   2294              }
   2295          
   2296              // Process ended - release memory used
   2297              ZDO_RemoveMatchMemory();
   2298            }
   2299          }
   2300          
   2301          /*********************************************************************
   2302           * @fn      ZDO_RemoveMatchMemory()
   2303           *
   2304           * @brief   Called to clear the memory used for the end device bind.
   2305           *
   2306           * @param  none
   2307           *
   2308           * @return  none
   2309           */
   2310          static void ZDO_RemoveMatchMemory( void )
   2311          {
   2312            if ( matchED != NULL )
   2313            {
   2314              if ( matchED->ed2Matched != NULL )
   2315              {
   2316                osal_mem_free( matchED->ed2Matched );
   2317              }
   2318              if ( matchED->ed1Matched != NULL )
   2319              {
   2320                osal_mem_free( matchED->ed1Matched );
   2321              }
   2322              if ( matchED->ed1.inClusters != NULL )
   2323              {
   2324                osal_mem_free( matchED->ed1.inClusters );
   2325              }
   2326              if ( matchED->ed1.outClusters != NULL )
   2327              {
   2328                osal_mem_free( matchED->ed1.outClusters );
   2329              }
   2330              if ( matchED->ed2.inClusters != NULL )
   2331              {
   2332                osal_mem_free( matchED->ed2.inClusters );
   2333              }
   2334              if ( matchED->ed2.outClusters != NULL )
   2335              {
   2336                osal_mem_free( matchED->ed2.outClusters );
   2337              }
   2338          
   2339              osal_mem_free( matchED );
   2340              matchED = (ZDMatchEndDeviceBind_t *)NULL;
   2341            }
   2342          }
   2343          
   2344          /*********************************************************************
   2345           * @fn      ZDO_CopyMatchInfo()
   2346           *
   2347           * @brief   Called to copy memory used for the end device bind.
   2348           *
   2349           * @param  srcReq - source information
   2350           * @param  dstReq - destination location
   2351           *
   2352           * @return  TRUE if copy was successful.
   2353           */
   2354          static uint8 ZDO_CopyMatchInfo( ZDEndDeviceBind_t *destReq, ZDEndDeviceBind_t *srcReq )
   2355          {
   2356            uint8 allOK = TRUE;
   2357          
   2358            // Copy bind information into the match info structure
   2359            osal_memcpy( (uint8 *)destReq, srcReq, sizeof ( ZDEndDeviceBind_t ) );
   2360          
   2361            // Initialize the destination cluster pointers
   2362            destReq->inClusters = NULL;
   2363            destReq->outClusters = NULL;
   2364          
   2365            // Copy input cluster IDs
   2366            if ( srcReq->numInClusters )
   2367            {
   2368              destReq->inClusters = osal_mem_alloc( (short)(srcReq->numInClusters * sizeof ( uint16 )) );
   2369              if ( destReq->inClusters )
   2370              {
   2371                // Copy the clusters
   2372                osal_memcpy( (uint8*)(destReq->inClusters), (uint8 *)(srcReq->inClusters),
   2373                                (srcReq->numInClusters * sizeof ( uint16 )) );
   2374              }
   2375              else
   2376              {
   2377                allOK = FALSE;
   2378              }
   2379            }
   2380          
   2381            // Copy output cluster IDs
   2382            if ( srcReq->numOutClusters )
   2383            {
   2384              destReq->outClusters = osal_mem_alloc( (short)(srcReq->numOutClusters * sizeof ( uint16 )) );
   2385              if ( destReq->outClusters )
   2386              {
   2387                // Copy the clusters
   2388                osal_memcpy( (uint8 *)(destReq->outClusters), (uint8 *)(srcReq->outClusters),
   2389                                (srcReq->numOutClusters * sizeof ( uint16 )) );
   2390              }
   2391              else
   2392              {
   2393                allOK = FALSE;
   2394              }
   2395            }
   2396          
   2397            if ( allOK == FALSE )
   2398            {
   2399              if ( destReq->inClusters != NULL )
   2400              {
   2401                osal_mem_free( destReq->inClusters );
   2402              }
   2403              if ( destReq->outClusters != NULL )
   2404              {
   2405                osal_mem_free( destReq->outClusters );
   2406              }
   2407            }
   2408          
   2409            return ( allOK );
   2410          }
   2411          
   2412          /*********************************************************************
   2413           * @fn      ZDMatchSendState()
   2414           *
   2415           * @brief   State machine for the End device match message algorithm.
   2416           *
   2417           * @param  reason - state of algoritm
   2418           * @param  status - initial message status
   2419           * @param  TransSeq - next transaction sequence number
   2420           *
   2421           * @return  FALSE if error and we are not currently matching, TRUE
   2422           *          if success.
   2423           */
   2424          uint8 ZDMatchSendState( uint8 reason, uint8 status, uint8 TransSeq )
   2425          {
   2426            uint8 *dstIEEEAddr = NULL;
   2427            uint8 dstEP = 0xFF;
   2428            zAddrType_t dstAddr;
   2429            zAddrType_t destinationAddr;
   2430            uint16 msgType;
   2431            uint16 clusterID = 0xFFFF;
   2432            ZDEndDeviceBind_t *ed = NULL;
   2433            uint8 rspStatus = ZDP_SUCCESS;
   2434          
   2435            if ( matchED == NULL )
   2436            {
   2437              return ( FALSE );
   2438            }
   2439          
   2440            // Check sequence number
   2441            if ( reason == ZDMATCH_REASON_BIND_RSP || reason == ZDMATCH_REASON_UNBIND_RSP )
   2442            {
   2443              if ( TransSeq != matchED->transSeq )
   2444              {
   2445                return( FALSE ); // ignore the message
   2446              }
   2447            }
   2448          
   2449            // turn off timer
   2450            APS_SetEndDeviceBindTimeout( 0, ZDO_EndDeviceBindMatchTimeoutCB );
   2451          
   2452            if ( reason == ZDMATCH_REASON_TIMEOUT )
   2453            {
   2454              rspStatus = ZDP_TIMEOUT;    // The process will stop
   2455            }
   2456          
   2457            if ( reason == ZDMATCH_REASON_START || reason == ZDMATCH_REASON_BIND_RSP )
   2458            {
   2459              matchED->sending = ZDMATCH_SENDING_UNBIND;
   2460          
   2461              if ( reason == ZDMATCH_REASON_BIND_RSP && status != ZDP_SUCCESS )
   2462              {
   2463                rspStatus = status;
   2464              }
   2465            }
   2466            else if ( reason == ZDMATCH_REASON_UNBIND_RSP )
   2467            {
   2468              if ( status == ZDP_SUCCESS )
   2469              {
   2470                matchED->sending = ZDMATCH_SENDING_UNBIND;
   2471              }
   2472              else
   2473              {
   2474                matchED->sending = ZDMATCH_SENDING_BIND;
   2475              }
   2476            }
   2477          
   2478            if ( reason != ZDMATCH_REASON_START && matchED->sending == ZDMATCH_SENDING_UNBIND )
   2479            {
   2480              // Move to the next cluster ID
   2481              if ( matchED->ed1numMatched )
   2482              {
   2483                matchED->ed1numMatched--;
   2484              }
   2485              else if ( matchED->ed2numMatched )
   2486              {
   2487                matchED->ed2numMatched--;
   2488              }
   2489            }
   2490          
   2491            // What message do we send now
   2492            if ( matchED->ed1numMatched )
   2493            {
   2494              ed = &(matchED->ed1);
   2495              clusterID = matchED->ed1Matched[matchED->ed1numMatched-1];
   2496              dstIEEEAddr = matchED->ed2.ieeeAddr;
   2497              dstEP = matchED->ed2.endpoint;
   2498            }
   2499            else if ( matchED->ed2numMatched )
   2500            {
   2501              ed = &(matchED->ed2);
   2502              clusterID = matchED->ed2Matched[matchED->ed2numMatched-1];
   2503              dstIEEEAddr = matchED->ed1.ieeeAddr;
   2504              dstEP = matchED->ed1.endpoint;
   2505            }
   2506          
   2507            dstAddr.addrMode = Addr16Bit;
   2508          
   2509            // Send the next message
   2510            if ( (rspStatus == ZDP_SUCCESS) && ed )
   2511            {
   2512              // Send unbind/bind message to source
   2513              if ( matchED->sending == ZDMATCH_SENDING_UNBIND )
   2514              {
   2515                msgType = Unbind_req;
   2516              }
   2517              else
   2518              {
   2519                msgType = Bind_req;
   2520              }
   2521          
   2522              dstAddr.addr.shortAddr = ed->srcAddr;
   2523          
   2524              // Save off the transaction sequence number
   2525              matchED->transSeq = ZDP_TransID;
   2526          
   2527              destinationAddr.addrMode = Addr64Bit;
   2528              osal_cpyExtAddr( destinationAddr.addr.extAddr, dstIEEEAddr );
   2529          
   2530              ZDP_BindUnbindReq( msgType, &dstAddr, ed->ieeeAddr, ed->endpoint, clusterID,
   2531                  &destinationAddr, dstEP, ed->SecurityUse );
   2532          
   2533              // Set timeout for response
   2534              APS_SetEndDeviceBindTimeout( AIB_MaxBindingTime, ZDO_EndDeviceBindMatchTimeoutCB );
   2535            }
   2536            else
   2537            {
   2538              // Send the response messages to requesting devices
   2539              // send response to first requester
   2540              dstAddr.addr.shortAddr = matchED->ed1.srcAddr;
   2541              ZDP_EndDeviceBindRsp( matchED->ed1.TransSeq, &dstAddr, rspStatus, matchED->ed1.SecurityUse );
   2542          
   2543              // send response to second requester
   2544              if ( matchED->state == ZDMATCH_SENDING_BINDS )
   2545              {
   2546                dstAddr.addr.shortAddr = matchED->ed2.srcAddr;
   2547                ZDP_EndDeviceBindRsp( matchED->ed2.TransSeq, &dstAddr, rspStatus, matchED->ed2.SecurityUse );
   2548              }
   2549          
   2550              // Process ended - release memory used
   2551              ZDO_RemoveMatchMemory();
   2552            }
   2553          
   2554            return ( TRUE );
   2555          }
   2556          
   2557          /*********************************************************************
   2558           * @fn      ZDO_EndDeviceBindMatchTimeoutCB()
   2559           *
   2560           * @brief   End device bind timeout.
   2561           *
   2562           * @param  none
   2563           *
   2564           * @return  none
   2565           */
   2566          static void ZDO_EndDeviceBindMatchTimeoutCB( void )
   2567          {
   2568            ZDMatchSendState( ZDMATCH_REASON_TIMEOUT, ZDP_TIMEOUT, 0 );
   2569          }
   2570          #endif // ZG_BUILD_COORDINATOR_TYPE
   2571          
   2572          /*********************************************************************
   2573           * ZDO MESSAGE PARSING API FUNCTIONS
   2574           */
   2575          
   2576          /*********************************************************************
   2577           * @fn          ZDO_ParseEndDeviceBindReq
   2578           *
   2579           * @brief       This function parses the End_Device_Bind_req message.
   2580           *
   2581           *     NOTE:  The clusters lists in bindReq are allocated in this
   2582           *            function and must be freed by that calling function.
   2583           *
   2584           * @param       inMsg  - incoming message (request)
   2585           * @param       bindReq - pointer to place to parse message to
   2586           *
   2587           * @return      none
   2588           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2589          void ZDO_ParseEndDeviceBindReq( zdoIncomingMsg_t *inMsg, ZDEndDeviceBind_t *bindReq )
   \                     ZDO_ParseEndDeviceBindReq:
   2590          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8C..         MOV     ?V0,R4
   \   000007   8D..         MOV     ?V1,R5
   2591            uint8 *msg;
   2592          
   2593            // Parse the message
   2594            bindReq->TransSeq = inMsg->TransSeq;
   \   000009   EA           MOV     A,R2
   \   00000A   12....       LCALL   ?Subroutine162 & 0xFFFF
   \                     ??CrossCallReturnLabel_387:
   \   00000D   3B           ADDC    A,R3
   \   00000E   F583         MOV     DPH,A
   \   000010   12....       LCALL   ??Subroutine230_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_503:
   \   000013   12....       LCALL   ?Subroutine49 & 0xFFFF
   2595            bindReq->srcAddr = inMsg->srcAddr.addr.shortAddr;
   \                     ??CrossCallReturnLabel_79:
   \   000016   F8           MOV     R0,A
   \   000017   A3           INC     DPTR
   \   000018   E0           MOVX    A,@DPTR
   \   000019   F9           MOV     R1,A
   \   00001A   8C82         MOV     DPL,R4
   \   00001C   8D83         MOV     DPH,R5
   \   00001E   A3           INC     DPTR
   \   00001F   A3           INC     DPTR
   \   000020   E8           MOV     A,R0
   \   000021   F0           MOVX    @DPTR,A
   \   000022   A3           INC     DPTR
   \   000023   E9           MOV     A,R1
   \   000024   12....       LCALL   ?Subroutine36 & 0xFFFF
   2596            bindReq->SecurityUse = inMsg->SecurityUse;
   \                     ??CrossCallReturnLabel_57:
   \   000027   8C82         MOV     DPL,R4
   \   000029   8D83         MOV     DPH,R5
   \   00002B   A3           INC     DPTR
   \   00002C   12....       LCALL   ?Subroutine37 & 0xFFFF
   2597            msg = inMsg->asdu;
   \                     ??CrossCallReturnLabel_58:
   \   00002F   FE           MOV     R6,A
   \   000030   A3           INC     DPTR
   \   000031   E0           MOVX    A,@DPTR
   \   000032   FF           MOV     R7,A
   2598          
   2599            bindReq->localCoordinator = BUILD_UINT16( msg[0], msg[1] );
   \   000033   12....       LCALL   ?Subroutine77 & 0xFFFF
   \                     ??CrossCallReturnLabel_133:
   \   000036   12....       LCALL   ?Subroutine17 & 0xFFFF
   2600            msg += 2;
   \                     ??CrossCallReturnLabel_425:
   \   000039   5001         JNC     ??ZDO_ParseEndDeviceBindReq_0
   \   00003B   0F           INC     R7
   2601          
   2602            osal_cpyExtAddr( bindReq->ieeeAddr, msg );
   \                     ??ZDO_ParseEndDeviceBindReq_0:
   \   00003C                ; Setup parameters for call to function sAddrExtCpy
   \   00003C   FC           MOV     R4,A
   \   00003D   EF           MOV     A,R7
   \   00003E   FD           MOV     R5,A
   \   00003F   E5..         MOV     A,?V0
   \   000041   2406         ADD     A,#0x6
   \   000043   FA           MOV     R2,A
   \   000044   E4           CLR     A
   \   000045   35..         ADDC    A,?V1
   \   000047   FB           MOV     R3,A
   \   000048   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   2603            msg += Z_EXTADDR_LEN;
   2604          
   2605            bindReq->endpoint = *msg++;
   \   00004B   8E82         MOV     DPL,R6
   \   00004D   8F83         MOV     DPH,R7
   \   00004F   A3           INC     DPTR
   \   000050   A3           INC     DPTR
   \   000051   A3           INC     DPTR
   \   000052   A3           INC     DPTR
   \   000053   A3           INC     DPTR
   \   000054   A3           INC     DPTR
   \   000055   A3           INC     DPTR
   \   000056   A3           INC     DPTR
   \   000057   E0           MOVX    A,@DPTR
   \   000058   C0E0         PUSH    A
   \   00005A   12....       LCALL   ?Subroutine108 & 0xFFFF
   \                     ??CrossCallReturnLabel_182:
   \   00005D   D0E0         POP     A
   \   00005F   12....       LCALL   ??Subroutine227_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_486:
   \   000062   5001         JNC     ??ZDO_ParseEndDeviceBindReq_1
   \   000064   0F           INC     R7
   2606            bindReq->profileID = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseEndDeviceBindReq_1:
   \   000065   12....       LCALL   ?Subroutine88 & 0xFFFF
   \                     ??CrossCallReturnLabel_154:
   \   000068   12....       LCALL   ??Subroutine204_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_383:
   \   00006B   12....       LCALL   ??Subroutine202_0 & 0xFFFF
   2607            msg += 2;
   2608          
   2609            bindReq->inClusters = NULL;
   \                     ??CrossCallReturnLabel_380:
   \   00006E   E5..         MOV     A,?V0
   \   000070   12....       LCALL   ?Subroutine124 & 0xFFFF
   \                     ??CrossCallReturnLabel_215:
   \   000073   E4           CLR     A
   \   000074   F0           MOVX    @DPTR,A
   \   000075   A3           INC     DPTR
   \   000076   F0           MOVX    @DPTR,A
   2610            bindReq->outClusters = NULL;
   \   000077   12....       LCALL   ?Subroutine121 & 0xFFFF
   \                     ??CrossCallReturnLabel_208:
   \   00007A   E4           CLR     A
   \   00007B   F0           MOVX    @DPTR,A
   \   00007C   A3           INC     DPTR
   \   00007D   12....       LCALL   ??Subroutine223_0 & 0xFFFF
   2611          
   2612            if ((bindReq->numInClusters = *msg++) &&
   2613                (bindReq->inClusters = (uint16*)osal_mem_alloc( (bindReq->numInClusters * sizeof( uint16 )))))
   \                     ??CrossCallReturnLabel_457:
   \   000080   FA           MOV     R2,A
   \   000081   12....       LCALL   ?Subroutine127 & 0xFFFF
   \                     ??CrossCallReturnLabel_419:
   \   000084   EA           MOV     A,R2
   \   000085   F0           MOVX    @DPTR,A
   \   000086   EE           MOV     A,R6
   \   000087   2403         ADD     A,#0x3
   \   000089   FE           MOV     R6,A
   \   00008A   5001         JNC     ??ZDO_ParseEndDeviceBindReq_2
   \   00008C   0F           INC     R7
   \                     ??ZDO_ParseEndDeviceBindReq_2:
   \   00008D   EA           MOV     A,R2
   \   00008E   6030         JZ      ??ZDO_ParseEndDeviceBindReq_3
   \   000090   12....       LCALL   ?Subroutine95 & 0xFFFF
   \                     ??CrossCallReturnLabel_501:
   \   000093   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000096   8A..         MOV     ?V2,R2
   \   000098   8B..         MOV     ?V3,R3
   \   00009A   A8..         MOV     R0,?V2
   \   00009C   A9..         MOV     R1,?V3
   \   00009E   E5..         MOV     A,?V0
   \   0000A0   2412         ADD     A,#0x12
   \   0000A2   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_423:
   \   0000A5   6019         JZ      ??ZDO_ParseEndDeviceBindReq_3
   2614            {
   2615              msg = ZDO_ConvertOTAClusters( bindReq->numInClusters, msg, bindReq->inClusters );
   \   0000A7                ; Setup parameters for call to function ZDO_ConvertOTAClusters
   \   0000A7   E5..         MOV     A,?V0
   \   0000A9   2412         ADD     A,#0x12
   \   0000AB   12....       LCALL   ?Subroutine82 & 0xFFFF
   2616            }
   \                     ??CrossCallReturnLabel_142:
   \   0000AE   12....       LCALL   ??Subroutine213_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_418:
   \   0000B1   E0           MOVX    A,@DPTR
   \   0000B2   F9           MOV     R1,A
   \   0000B3   12....       LCALL   `??ZDO_ConvertOTAClusters::?relay`; Banked call to: ZDO_ConvertOTAClusters
   \   0000B6   8A..         MOV     ?V2,R2
   \   0000B8   8B..         MOV     ?V3,R3
   \   0000BA   AE..         MOV     R6,?V2
   \   0000BC   AF..         MOV     R7,?V3
   \   0000BE   8005         SJMP    ??ZDO_ParseEndDeviceBindReq_4
   2617            else
   2618            {
   2619              bindReq->numInClusters = 0;
   \                     ??ZDO_ParseEndDeviceBindReq_3:
   \   0000C0   12....       LCALL   ?Subroutine127 & 0xFFFF
   2620            }
   \                     ??CrossCallReturnLabel_420:
   \   0000C3   E4           CLR     A
   \   0000C4   F0           MOVX    @DPTR,A
   2621          
   2622            if ((bindReq->numOutClusters = *msg++) &&
   2623                (bindReq->outClusters = (uint16*)osal_mem_alloc((bindReq->numOutClusters * sizeof(uint16)))))
   \                     ??ZDO_ParseEndDeviceBindReq_4:
   \   0000C5   8E82         MOV     DPL,R6
   \   0000C7   8F83         MOV     DPH,R7
   \   0000C9   E0           MOVX    A,@DPTR
   \   0000CA   FA           MOV     R2,A
   \   0000CB   12....       LCALL   ?Subroutine117 & 0xFFFF
   \                     ??CrossCallReturnLabel_197:
   \   0000CE   EA           MOV     A,R2
   \   0000CF   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   0000D2   602C         JZ      ??ZDO_ParseEndDeviceBindReq_5
   \   0000D4   E5..         MOV     A,?V0
   \   0000D6   12....       LCALL   ?Subroutine116 & 0xFFFF
   \                     ??CrossCallReturnLabel_195:
   \   0000D9   12....       LCALL   ?Subroutine95 & 0xFFFF
   \                     ??CrossCallReturnLabel_502:
   \   0000DC   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   0000DF   8A..         MOV     ?V2,R2
   \   0000E1   8B..         MOV     ?V3,R3
   \   0000E3   A8..         MOV     R0,?V2
   \   0000E5   A9..         MOV     R1,?V3
   \   0000E7   E5..         MOV     A,?V0
   \   0000E9   2415         ADD     A,#0x15
   \   0000EB   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_424:
   \   0000EE   6010         JZ      ??ZDO_ParseEndDeviceBindReq_5
   2624            {
   2625              msg = ZDO_ConvertOTAClusters( bindReq->numOutClusters, msg, bindReq->outClusters );
   \   0000F0                ; Setup parameters for call to function ZDO_ConvertOTAClusters
   \   0000F0   E5..         MOV     A,?V0
   \   0000F2   2415         ADD     A,#0x15
   \   0000F4   12....       LCALL   ?Subroutine82 & 0xFFFF
   2626            }
   \                     ??CrossCallReturnLabel_143:
   \   0000F7   12....       LCALL   ?Subroutine116 & 0xFFFF
   \                     ??CrossCallReturnLabel_196:
   \   0000FA   F9           MOV     R1,A
   \   0000FB   12....       LCALL   `??ZDO_ConvertOTAClusters::?relay`; Banked call to: ZDO_ConvertOTAClusters
   \   0000FE   8005         SJMP    ??ZDO_ParseEndDeviceBindReq_6
   2627            else
   2628            {
   2629              bindReq->numOutClusters = 0;
   \                     ??ZDO_ParseEndDeviceBindReq_5:
   \   000100   12....       LCALL   ?Subroutine117 & 0xFFFF
   2630            }
   \                     ??CrossCallReturnLabel_198:
   \   000103   E4           CLR     A
   \   000104   F0           MOVX    @DPTR,A
   2631          }
   \                     ??ZDO_ParseEndDeviceBindReq_6:
   \   000105   80..         SJMP    ??Subroutine217_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine127:
   \   000000   E5..         MOV     A,?V0
   \   000002                REQUIRE ??Subroutine213_0
   \   000002                ; // Fall through to label ??Subroutine213_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine213_0:
   \   000000   2411         ADD     A,#0x11
   \   000002   12....       LCALL   ?Subroutine172 & 0xFFFF
   \                     ??CrossCallReturnLabel_453:
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine116:
   \   000000   12....       LCALL   ?Subroutine169 & 0xFFFF
   \                     ??CrossCallReturnLabel_289:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine82:
   \   000000   12....       LCALL   ?Subroutine172 & 0xFFFF
   \                     ??CrossCallReturnLabel_449:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FC           MOV     R4,A
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   FD           MOV     R5,A
   \   000008   EE           MOV     A,R6
   \   000009   FA           MOV     R2,A
   \   00000A   EF           MOV     A,R7
   \   00000B   FB           MOV     R3,A
   \   00000C   E5..         MOV     A,?V0
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   F582         MOV     DPL,A
   \   000002   E4           CLR     A
   \   000003   35..         ADDC    A,?V1
   \   000005                REQUIRE ??Subroutine214_0
   \   000005                ; // Fall through to label ??Subroutine214_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine214_0:
   \   000000   F583         MOV     DPH,A
   \   000002                REQUIRE ??Subroutine215_0
   \   000002                ; // Fall through to label ??Subroutine215_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine215_0:
   \   000000   12....       LCALL   ?Subroutine139 & 0xFFFF
   \                     ??CrossCallReturnLabel_495:
   \   000003   E8           MOV     A,R0
   \   000004   49           ORL     A,R1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine216_0
   \   000001                ; // Fall through to label ??Subroutine216_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine216_0:
   \   000000   12....       LCALL   ??Subroutine228_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_496:
   \   000003   EE           MOV     A,R6
   \   000004   2402         ADD     A,#0x2
   \   000006   FE           MOV     R6,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   12....       LCALL   ?Subroutine141 & 0xFFFF
   \                     ??CrossCallReturnLabel_461:
   \   000003   AE82         MOV     R6,DPL
   \   000005   AF83         MOV     R7,DPH
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine49:
   \   000000   12....       LCALL   ?Subroutine135 & 0xFFFF
   \                     ??CrossCallReturnLabel_234:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine124:
   \   000000   2412         ADD     A,#0x12
   \   000002   12....       LCALL   ?Subroutine172 & 0xFFFF
   \                     ??CrossCallReturnLabel_452:
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine121:
   \   000000   E5..         MOV     A,?V0
   \   000002   2415         ADD     A,#0x15
   \   000004   12....       LCALL   ?Subroutine172 & 0xFFFF
   \                     ??CrossCallReturnLabel_451:
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine172:
   \   000000   F582         MOV     DPL,A
   \   000002   E4           CLR     A
   \   000003                REQUIRE ??Subroutine222_0
   \   000003                ; // Fall through to label ??Subroutine222_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine117:
   \   000000   E5..         MOV     A,?V0
   \   000002   12....       LCALL   ?Subroutine169 & 0xFFFF
   \                     ??CrossCallReturnLabel_290:
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine169:
   \   000000   2414         ADD     A,#0x14
   \   000002   F582         MOV     DPL,A
   \   000004   E4           CLR     A
   \   000005   35..         ADDC    A,?V1
   \   000007   F583         MOV     DPH,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine88:
   \   000000   12....       LCALL   ?Subroutine156 & 0xFFFF
   \                     ??CrossCallReturnLabel_271:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine156:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004   E0           MOVX    A,@DPTR
   \   000005   FA           MOV     R2,A
   \   000006   A3           INC     DPTR
   \   000007   E0           MOVX    A,@DPTR
   \   000008   F9           MOV     R1,A
   \   000009   EA           MOV     A,R2
   \   00000A   F8           MOV     R0,A
   \   00000B   E5..         MOV     A,?V0
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine223_0:
   \   000000   12....       LCALL   ?Subroutine141 & 0xFFFF
   \                     ??CrossCallReturnLabel_459:
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine108:
   \   000000   E5..         MOV     A,?V0
   \   000002   12....       LCALL   ??Subroutine224_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_469:
   \   000005   12....       LCALL   ??Subroutine222_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_447:
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine135:
   \   000000   12....       LCALL   ?Subroutine183 & 0xFFFF
   \                     ??CrossCallReturnLabel_305:
   \   000003   A3           INC     DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine183:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   A3           INC     DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine227_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   EE           MOV     A,R6
   \   000002   2409         ADD     A,#0x9
   \   000004   FE           MOV     R6,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine95:
   \   000000   FA           MOV     R2,A
   \   000001                ; Setup parameters for call to function osal_mem_alloc
   \   000001                ; Setup parameters for call to function osal_mem_alloc
   \   000001                REQUIRE ??Subroutine229_0
   \   000001                ; // Fall through to label ??Subroutine229_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine230_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8C82         MOV     DPL,R4
   \   000003   8D83         MOV     DPH,R5
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine77:
   \   000000   12....       LCALL   ?Subroutine157 & 0xFFFF
   \                     ??CrossCallReturnLabel_537:
   \   000003   F9           MOV     R1,A
   \   000004   EA           MOV     A,R2
   \   000005   8C82         MOV     DPL,R4
   \   000007   8D83         MOV     DPH,R5
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine157:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004                REQUIRE ??Subroutine234_0
   \   000004                ; // Fall through to label ??Subroutine234_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   12....       LCALL   ?Subroutine161 & 0xFFFF
   \                     ??CrossCallReturnLabel_277:
   \   000004   E0           MOVX    A,@DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine161:
   \   000000   EA           MOV     A,R2
   \   000001   12....       LCALL   ??Subroutine237_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_565:
   \   000004   3B           ADDC    A,R3
   \   000005   F583         MOV     DPH,A
   \   000007   22           RET
   2632          
   2633          /*********************************************************************
   2634           * @fn          ZDO_ParseBindUnbindReq
   2635           *
   2636           * @brief       This function parses the Bind_req or Unbind_req message.
   2637           *
   2638           * @param       inMsg  - incoming message (request)
   2639           * @param       pReq - place to put parsed information
   2640           *
   2641           * @return      none
   2642           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2643          void ZDO_ParseBindUnbindReq( zdoIncomingMsg_t *inMsg, ZDO_BindUnbindReq_t *pReq )
   \                     ZDO_ParseBindUnbindReq:
   2644          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   8C..         MOV     ?V0,R4
   \   000007   8D..         MOV     ?V1,R5
   2645            uint8 *msg;
   2646          
   2647            msg = inMsg->asdu;
   \   000009   12....       LCALL   ?Subroutine100 & 0xFFFF
   \                     ??CrossCallReturnLabel_169:
   \   00000C   12....       LCALL   ?Subroutine155 & 0xFFFF
   2648            osal_cpyExtAddr( pReq->srcAddress, msg );
   \                     ??CrossCallReturnLabel_268:
   \   00000F                ; Setup parameters for call to function sAddrExtCpy
   \   00000F   EE           MOV     A,R6
   \   000010   FC           MOV     R4,A
   \   000011   EF           MOV     A,R7
   \   000012   FD           MOV     R5,A
   \   000013   AA..         MOV     R2,?V0
   \   000015   AB..         MOV     R3,?V1
   \   000017   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   2649            msg += Z_EXTADDR_LEN;
   2650            pReq->srcEndpoint = *msg++;
   \   00001A   12....       LCALL   ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_488:
   \   00001D   5001         JNC     ??ZDO_ParseBindUnbindReq_0
   \   00001F   0F           INC     R7
   2651            pReq->clusterID = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseBindUnbindReq_0:
   \   000020   12....       LCALL   ?Subroutine11 & 0xFFFF
   2652            msg += 2;
   2653            pReq->dstAddress.addrMode = *msg++;
   \                     ??CrossCallReturnLabel_4:
   \   000023   5001         JNC     ??ZDO_ParseBindUnbindReq_1
   \   000025   0F           INC     R7
   2654            if ( pReq->dstAddress.addrMode == Addr64Bit )
   \                     ??ZDO_ParseBindUnbindReq_1:
   \   000026   7403         MOV     A,#0x3
   \   000028   68           XRL     A,R0
   \   000029   7026         JNZ     ??ZDO_ParseBindUnbindReq_2
   2655            {
   2656              osal_cpyExtAddr( pReq->dstAddress.addr.extAddr, msg );
   \   00002B                ; Setup parameters for call to function sAddrExtCpy
   \   00002B   EE           MOV     A,R6
   \   00002C   FC           MOV     R4,A
   \   00002D   EF           MOV     A,R7
   \   00002E   FD           MOV     R5,A
   \   00002F   E5..         MOV     A,?V0
   \   000031   240B         ADD     A,#0xb
   \   000033   FA           MOV     R2,A
   \   000034   E4           CLR     A
   \   000035   35..         ADDC    A,?V1
   \   000037   FB           MOV     R3,A
   \   000038   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   2657              msg += Z_EXTADDR_LEN;
   2658              pReq->dstEndpoint = *msg;
   \   00003B   8E82         MOV     DPL,R6
   \   00003D   8F83         MOV     DPH,R7
   \   00003F   A3           INC     DPTR
   \   000040   A3           INC     DPTR
   \   000041   A3           INC     DPTR
   \   000042   A3           INC     DPTR
   \   000043   A3           INC     DPTR
   \   000044   A3           INC     DPTR
   \   000045   A3           INC     DPTR
   \   000046   A3           INC     DPTR
   \   000047   E0           MOVX    A,@DPTR
   \   000048   C0E0         PUSH    A
   \   00004A   12....       LCALL   ?Subroutine117 & 0xFFFF
   2659            }
   \                     ??CrossCallReturnLabel_199:
   \   00004D   D0E0         POP     A
   \   00004F   8006         SJMP    ??ZDO_ParseBindUnbindReq_3
   2660            else
   2661            {
   2662              // copy group address
   2663              pReq->dstAddress.addr.shortAddr = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseBindUnbindReq_2:
   \   000051   12....       LCALL   ?Subroutine65 & 0xFFFF
   2664            }
   \                     ??CrossCallReturnLabel_106:
   \   000054   F0           MOVX    @DPTR,A
   \   000055   A3           INC     DPTR
   \   000056   E9           MOV     A,R1
   \                     ??ZDO_ParseBindUnbindReq_3:
   \   000057   F0           MOVX    @DPTR,A
   2665          }
   \   000058   02....       LJMP    ??Subroutine187_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine166:
   \   000000   240B         ADD     A,#0xb
   \   000002   F582         MOV     DPL,A
   \   000004   E4           CLR     A
   \   000005   35..         ADDC    A,?V1
   \   000007   F583         MOV     DPH,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine65:
   \   000000   12....       LCALL   ?Subroutine156 & 0xFFFF
   \                     ??CrossCallReturnLabel_270:
   \   000003   12....       LCALL   ?Subroutine166 & 0xFFFF
   \                     ??CrossCallReturnLabel_281:
   \   000006   E8           MOV     A,R0
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine44:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   12....       LCALL   ?Subroutine147 & 0xFFFF
   \                     ??CrossCallReturnLabel_253:
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C                REQUIRE ??Subroutine227_0
   \   00000C                ; // Fall through to label ??Subroutine227_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   12....       LCALL   ?Subroutine143 & 0xFFFF
   \                     ??CrossCallReturnLabel_249:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   12....       LCALL   ?Subroutine138 & 0xFFFF
   \                     ??CrossCallReturnLabel_244:
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   F8           MOV     R0,A
   \   00000C   E5..         MOV     A,?V0
   \   00000E   12....       LCALL   ??Subroutine220_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_436:
   \   000011   12....       LCALL   ??Subroutine222_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_446:
   \   000014   E8           MOV     A,R0
   \   000015   F0           MOVX    @DPTR,A
   \   000016   EE           MOV     A,R6
   \   000017   2403         ADD     A,#0x3
   \   000019   FE           MOV     R6,A
   \   00001A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine138:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   E9           MOV     A,R1
   \   000003   12....       LCALL   ?Subroutine184 & 0xFFFF
   \                     ??CrossCallReturnLabel_464:
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine147:
   \   000000   12....       LCALL   ?Subroutine177 & 0xFFFF
   \                     ??CrossCallReturnLabel_302:
   \   000003   A3           INC     DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine177:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   85..82       MOV     DPL,?V0
   \   000009   85..83       MOV     DPH,?V1
   \   00000C   A3           INC     DPTR
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine143:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004   E0           MOVX    A,@DPTR
   \   000005   FA           MOV     R2,A
   \   000006   A3           INC     DPTR
   \   000007   E0           MOVX    A,@DPTR
   \   000008   F9           MOV     R1,A
   \   000009   EA           MOV     A,R2
   \   00000A   85..82       MOV     DPL,?V0
   \   00000D   85..83       MOV     DPH,?V1
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   A3           INC     DPTR
   \   000016   A3           INC     DPTR
   \   000017   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine100:
   \   000000   12....       LCALL   ?Subroutine161 & 0xFFFF
   \                     ??CrossCallReturnLabel_278:
   \   000003   22           RET
   2666          
   2667          /*********************************************************************
   2668           * @fn      ZDO_ParseAddrRsp
   2669           *
   2670           * @brief   Turns the inMsg (incoming message) into the out parsed
   2671           *          structure.
   2672           *
   2673           * @param   inMsg - incoming message
   2674           *
   2675           * @return  pointer to parsed structures.  This structure was
   2676           *          allocated using osal_mem_alloc, so it must be freed
   2677           *          by the calling function [osal_mem_free()].
   2678           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2679          ZDO_NwkIEEEAddrResp_t *ZDO_ParseAddrRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseAddrRsp:
   2680          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   2681            ZDO_NwkIEEEAddrResp_t *rsp;
   2682            uint8 *msg;
   2683            byte cnt = 0;
   \   000009   75..00       MOV     ?V2,#0x0
   2684          
   2685            // Calculate the number of items in the list
   2686            if ( inMsg->asduLen > (1 + Z_EXTADDR_LEN + 2) )
   \   00000C   EE           MOV     A,R6
   \   00000D   2410         ADD     A,#0x10
   \   00000F   F582         MOV     DPL,A
   \   000011   E4           CLR     A
   \   000012   3F           ADDC    A,R7
   \   000013   F583         MOV     DPH,A
   \   000015   E0           MOVX    A,@DPTR
   \   000016   C3           CLR     C
   \   000017   940C         SUBB    A,#0xc
   \   000019   400E         JC      ??ZDO_ParseAddrRsp_0
   2687            {
   2688              cnt = inMsg->asdu[1 + Z_EXTADDR_LEN + 2];
   \   00001B   12....       LCALL   ??Subroutine205_0 & 0xFFFF
   2689            }
   \                     ??CrossCallReturnLabel_393:
   \   00001E   12....       LCALL   ?Subroutine76 & 0xFFFF
   \                     ??CrossCallReturnLabel_131:
   \   000021   12....       LCALL   ?Subroutine167 & 0xFFFF
   \                     ??CrossCallReturnLabel_284:
   \   000024   12....       LCALL   ??Subroutine188_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_311:
   \   000027   F5..         MOV     ?V2,A
   2690            else
   2691            {
   2692              cnt = 0;
   2693            }
   2694          
   2695            // Make buffer
   2696            rsp = (ZDO_NwkIEEEAddrResp_t *)osal_mem_alloc( sizeof(ZDO_NwkIEEEAddrResp_t) + (cnt * sizeof ( uint16 )) );
   \                     ??ZDO_ParseAddrRsp_0:
   \   000029                ; Setup parameters for call to function osal_mem_alloc
   \   000029   A8..         MOV     R0,?V2
   \   00002B   E8           MOV     A,R0
   \   00002C   28           ADD     A,R0
   \   00002D   F8           MOV     R0,A
   \   00002E   E4           CLR     A
   \   00002F   33           RLC     A
   \   000030   F9           MOV     R1,A
   \   000031   E8           MOV     A,R0
   \   000032   240D         ADD     A,#0xd
   \   000034   FA           MOV     R2,A
   \   000035   E4           CLR     A
   \   000036   39           ADDC    A,R1
   \   000037   FB           MOV     R3,A
   \   000038   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00003B   8A..         MOV     ?V0,R2
   \   00003D   8B..         MOV     ?V1,R3
   2697          
   2698            if ( rsp )
   \   00003F   EA           MOV     A,R2
   \   000040   45..         ORL     A,?V1
   \   000042   7003         JNZ     $+5
   \   000044   02....       LJMP    ??ZDO_ParseAddrRsp_1 & 0xFFFF
   2699            {
   2700              msg = inMsg->asdu;
   \   000047   12....       LCALL   ??Subroutine194_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_340:
   \   00004A   12....       LCALL   ??Subroutine226_0 & 0xFFFF
   2701          
   2702              rsp->status = *msg++;
   \                     ??CrossCallReturnLabel_483:
   \   00004D   F8           MOV     R0,A
   \   00004E   8A82         MOV     DPL,R2
   \   000050   8B83         MOV     DPH,R3
   \   000052   12....       LCALL   ?Subroutine19 & 0xFFFF
   2703              if ( rsp->status == ZDO_SUCCESS )
   \                     ??CrossCallReturnLabel_19:
   \   000055   707E         JNZ     ??ZDO_ParseAddrRsp_1
   2704              {
   2705                osal_cpyExtAddr( rsp->extAddr, msg );
   \   000057                ; Setup parameters for call to function sAddrExtCpy
   \   000057   EE           MOV     A,R6
   \   000058   FC           MOV     R4,A
   \   000059   EF           MOV     A,R7
   \   00005A   FD           MOV     R5,A
   \   00005B   EA           MOV     A,R2
   \   00005C   2403         ADD     A,#0x3
   \   00005E   FA           MOV     R2,A
   \   00005F   E4           CLR     A
   \   000060   35..         ADDC    A,?V1
   \   000062   FB           MOV     R3,A
   \   000063   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   2706                msg += Z_EXTADDR_LEN;
   \   000066   EE           MOV     A,R6
   \   000067   2408         ADD     A,#0x8
   \   000069   FE           MOV     R6,A
   \   00006A   5001         JNC     ??ZDO_ParseAddrRsp_2
   \   00006C   0F           INC     R7
   2707                rsp->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseAddrRsp_2:
   \   00006D   12....       LCALL   ?Subroutine157 & 0xFFFF
   \                     ??CrossCallReturnLabel_536:
   \   000070   F9           MOV     R1,A
   \   000071   EA           MOV     A,R2
   \   000072   85..82       MOV     DPL,?V0
   \   000075   85..83       MOV     DPH,?V1
   \   000078   A3           INC     DPTR
   \   000079   12....       LCALL   ??Subroutine203_0 & 0xFFFF
   2708          
   2709                msg += 2;
   2710                rsp->numAssocDevs = 0;
   \                     ??CrossCallReturnLabel_373:
   \   00007C   12....       LCALL   ?Subroutine115 & 0xFFFF
   \                     ??CrossCallReturnLabel_192:
   \   00007F   E4           CLR     A
   \   000080   F0           MOVX    @DPTR,A
   2711          
   2712                // StartIndex field is only present if NumAssocDev field is non-zero.
   2713                if ( cnt > 0 )
   \   000081   E5..         MOV     A,?V2
   \   000083   6050         JZ      ??ZDO_ParseAddrRsp_1
   2714                {
   2715                  uint16 *pList = &(rsp->devList[0]);
   \   000085   E5..         MOV     A,?V0
   \   000087   240D         ADD     A,#0xd
   \   000089   F8           MOV     R0,A
   \   00008A   E4           CLR     A
   \   00008B   35..         ADDC    A,?V1
   \   00008D   F9           MOV     R1,A
   2716                  byte n = cnt;
   2717          
   2718                  rsp->numAssocDevs = *msg++;
   \   00008E   8E82         MOV     DPL,R6
   \   000090   8F83         MOV     DPH,R7
   \   000092   A3           INC     DPTR
   \   000093   A3           INC     DPTR
   \   000094   E0           MOVX    A,@DPTR
   \   000095   C0E0         PUSH    A
   \   000097   12....       LCALL   ?Subroutine115 & 0xFFFF
   \                     ??CrossCallReturnLabel_193:
   \   00009A   D0E0         POP     A
   \   00009C   12....       LCALL   ?Subroutine25 & 0xFFFF
   2719                  rsp->startIndex = *msg++;
   \                     ??CrossCallReturnLabel_29:
   \   00009F   C0E0         PUSH    A
   \   0000A1   12....       LCALL   ?Subroutine120 & 0xFFFF
   \                     ??CrossCallReturnLabel_206:
   \   0000A4   D0E0         POP     A
   \   0000A6   F0           MOVX    @DPTR,A
   \   0000A7   EE           MOV     A,R6
   \   0000A8   2404         ADD     A,#0x4
   \   0000AA   FE           MOV     R6,A
   \   0000AB   5001         JNC     ??ZDO_ParseAddrRsp_3
   \   0000AD   0F           INC     R7
   \                     ??ZDO_ParseAddrRsp_3:
   \   0000AE   AC..         MOV     R4,?V2
   2720          
   2721                  while ( n != 0 )
   2722                  {
   2723                    *pList++ = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseAddrRsp_4:
   \   0000B0   8E82         MOV     DPL,R6
   \   0000B2   8F83         MOV     DPH,R7
   \   0000B4   E0           MOVX    A,@DPTR
   \   0000B5   F5..         MOV     ?V2,A
   \   0000B7   A3           INC     DPTR
   \   0000B8   E0           MOVX    A,@DPTR
   \   0000B9   FB           MOV     R3,A
   \   0000BA   E5..         MOV     A,?V2
   \   0000BC   8882         MOV     DPL,R0
   \   0000BE   8983         MOV     DPH,R1
   \   0000C0   12....       LCALL   ??Subroutine193_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_325:
   \   0000C3   E8           MOV     A,R0
   \   0000C4   2402         ADD     A,#0x2
   \   0000C6   F8           MOV     R0,A
   \   0000C7   5001         JNC     ??ZDO_ParseAddrRsp_5
   \   0000C9   09           INC     R1
   2724                    msg += sizeof( uint16 );
   \                     ??ZDO_ParseAddrRsp_5:
   \   0000CA   EE           MOV     A,R6
   \   0000CB   2402         ADD     A,#0x2
   \   0000CD   FE           MOV     R6,A
   \   0000CE   5001         JNC     ??ZDO_ParseAddrRsp_6
   \   0000D0   0F           INC     R7
   2725                    n--;
   2726                  }
   \                     ??ZDO_ParseAddrRsp_6:
   \   0000D1   1C           DEC     R4
   \   0000D2   EC           MOV     A,R4
   \   0000D3   70DB         JNZ     ??ZDO_ParseAddrRsp_4
   2727                }
   2728              }
   2729            }
   2730          
   2731            return ( rsp );
   \                     ??ZDO_ParseAddrRsp_1:
   \   0000D5   AA..         MOV     R2,?V0
   \   0000D7   AB..         MOV     R3,?V1
   \   0000D9   80..         SJMP    ??Subroutine218_0
   2732          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   12....       LCALL   ?Subroutine140 & 0xFFFF
   \                     ??CrossCallReturnLabel_246:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine120:
   \   000000   E5..         MOV     A,?V0
   \   000002   240C         ADD     A,#0xc
   \   000004   12....       LCALL   ?Subroutine172 & 0xFFFF
   \                     ??CrossCallReturnLabel_450:
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine115:
   \   000000   E5..         MOV     A,?V0
   \   000002   12....       LCALL   ?Subroutine166 & 0xFFFF
   \                     ??CrossCallReturnLabel_282:
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine226_0:
   \   000000   12....       LCALL   ?Subroutine152 & 0xFFFF
   \                     ??CrossCallReturnLabel_485:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine152:
   \   000000   F583         MOV     DPH,A
   \   000002   E0           MOVX    A,@DPTR
   \   000003   FE           MOV     R6,A
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   FF           MOV     R7,A
   \   000007   8E82         MOV     DPL,R6
   \   000009   8F83         MOV     DPH,R7
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   22           RET
   2733          
   2734          /*********************************************************************
   2735           * @fn          ZDO_ParseNodeDescRsp
   2736           *
   2737           * @brief       This function parses the Node_Desc_rsp message.
   2738           *
   2739           * @param       inMsg - incoming message
   2740           * @param       pNDRsp - place to parse the message into
   2741           *
   2742           * @return      none
   2743           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2744          void ZDO_ParseNodeDescRsp( zdoIncomingMsg_t *inMsg, ZDO_NodeDescRsp_t *pNDRsp )
   \                     ZDO_ParseNodeDescRsp:
   2745          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   2746            uint8 *msg;
   2747          
   2748            msg = inMsg->asdu;
   \   000005   12....       LCALL   ?Subroutine10 & 0xFFFF
   2749          
   2750            pNDRsp->status = *msg++;
   2751            pNDRsp->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   2752          
   2753            if ( pNDRsp->status == ZDP_SUCCESS )
   \                     ??CrossCallReturnLabel_2:
   \   000008   6003         JZ      $+5
   \   00000A   02....       LJMP    ??ZDO_ParseNodeDescRsp_0 & 0xFFFF
   2754            {
   2755              msg += 2;
   2756              pNDRsp->nodeDesc.LogicalType = *msg & 0x07;
   \   00000D   12....       LCALL   ?Subroutine111 & 0xFFFF
   \                     ??CrossCallReturnLabel_186:
   \   000010   F8           MOV     R0,A
   \   000011   E4           CLR     A
   \   000012   3D           ADDC    A,R5
   \   000013   F9           MOV     R1,A
   \   000014   88..         MOV     ?V0,R0
   \   000016   89..         MOV     ?V1,R1
   \   000018   8E82         MOV     DPL,R6
   \   00001A   8F83         MOV     DPH,R7
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   5407         ANL     A,#0x7
   \   00001F   F8           MOV     R0,A
   \   000020   85..82       MOV     DPL,?V0
   \   000023   8983         MOV     DPH,R1
   \   000025   E0           MOVX    A,@DPTR
   \   000026   54F8         ANL     A,#0xf8
   \   000028   48           ORL     A,R0
   \   000029   12....       LCALL   ?Subroutine30 & 0xFFFF
   2757          
   2758              pNDRsp->nodeDesc.ComplexDescAvail = ( *msg & 0x08 ) >> 3;
   \                     ??CrossCallReturnLabel_38:
   \   00002C   A2E3         MOV     C,0xE0 /* A   */.3
   \   00002E   E4           CLR     A
   \   00002F   33           RLC     A
   \   000030   F8           MOV     R0,A
   \   000031   85..82       MOV     DPL,?V0
   \   000034   C082         PUSH    DPL
   \   000036   8E82         MOV     DPL,R6
   \   000038   E0           MOVX    A,@DPTR
   \   000039   A2E3         MOV     C,0xE0 /* A   */.3
   \   00003B   8983         MOV     DPH,R1
   \   00003D   D082         POP     DPL
   \   00003F   E0           MOVX    A,@DPTR
   \   000040   92E3         MOV     0xE0 /* A   */.3,C
   \   000042   12....       LCALL   ?Subroutine30 & 0xFFFF
   2759              pNDRsp->nodeDesc.UserDescAvail = ( *msg & 0x10 ) >> 4;
   \                     ??CrossCallReturnLabel_39:
   \   000045   A2E4         MOV     C,0xE0 /* A   */.4
   \   000047   E4           CLR     A
   \   000048   33           RLC     A
   \   000049   F9           MOV     R1,A
   \   00004A   85..82       MOV     DPL,?V0
   \   00004D   85..83       MOV     DPH,?V1
   \   000050   C082         PUSH    DPL
   \   000052   C083         PUSH    DPH
   \   000054   8E82         MOV     DPL,R6
   \   000056   8F83         MOV     DPH,R7
   \   000058   E0           MOVX    A,@DPTR
   \   000059   A2E4         MOV     C,0xE0 /* A   */.4
   \   00005B   D083         POP     DPH
   \   00005D   D082         POP     DPL
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   92E4         MOV     0xE0 /* A   */.4,C
   \   000062   F0           MOVX    @DPTR,A
   2760          
   2761              msg++;  // Reserved bits.
   2762              pNDRsp->nodeDesc.FrequencyBand = (*msg >> 3) & 0x1f;
   \   000063   EA           MOV     A,R2
   \   000064   2403         ADD     A,#0x3
   \   000066   0E           INC     R6
   \   000067   E4           CLR     A
   \   000068   3B           ADDC    A,R3
   \   000069   FF           MOV     R7,A
   \   00006A   EC           MOV     A,R4
   \   00006B   2404         ADD     A,#0x4
   \   00006D   F5..         MOV     ?V0,A
   \   00006F   E4           CLR     A
   \   000070   3D           ADDC    A,R5
   \   000071   F5..         MOV     ?V1,A
   \   000073   8E82         MOV     DPL,R6
   \   000075   8F83         MOV     DPH,R7
   \   000077   E0           MOVX    A,@DPTR
   \   000078   54F8         ANL     A,#0xf8
   \   00007A   F5..         MOV     ?V2,A
   \   00007C   85..82       MOV     DPL,?V0
   \   00007F   85..83       MOV     DPH,?V1
   \   000082   E0           MOVX    A,@DPTR
   \   000083   5407         ANL     A,#0x7
   \   000085   45..         ORL     A,?V2
   \   000087   F5..         MOV     ?V2,A
   \   000089   12....       LCALL   ?Subroutine30 & 0xFFFF
   2763              pNDRsp->nodeDesc.APSFlags = *msg++ & 0x07;
   \                     ??CrossCallReturnLabel_40:
   \   00008C   5407         ANL     A,#0x7
   \   00008E   FE           MOV     R6,A
   \   00008F   74F8         MOV     A,#-0x8
   \   000091   55..         ANL     A,?V2
   \   000093   4E           ORL     A,R6
   \   000094   85..82       MOV     DPL,?V0
   \   000097   85..83       MOV     DPH,?V1
   \   00009A   12....       LCALL   ?Subroutine40 & 0xFFFF
   2764              pNDRsp->nodeDesc.CapabilityFlags = *msg++;
   \                     ??CrossCallReturnLabel_64:
   \   00009D   8C82         MOV     DPL,R4
   \   00009F   8D83         MOV     DPH,R5
   \   0000A1   A3           INC     DPTR
   \   0000A2   A3           INC     DPTR
   \   0000A3   A3           INC     DPTR
   \   0000A4   A3           INC     DPTR
   \   0000A5   A3           INC     DPTR
   \   0000A6   12....       LCALL   ?Subroutine50 & 0xFFFF
   2765              pNDRsp->nodeDesc.ManufacturerCode[0] = *msg++;
   \                     ??CrossCallReturnLabel_81:
   \   0000A9   A3           INC     DPTR
   \   0000AA   12....       LCALL   ?Subroutine92 & 0xFFFF
   \                     ??CrossCallReturnLabel_506:
   \   0000AD   12....       LCALL   ?Subroutine38 & 0xFFFF
   2766              pNDRsp->nodeDesc.ManufacturerCode[1] = *msg++;
   \                     ??CrossCallReturnLabel_60:
   \   0000B0   12....       LCALL   ?Subroutine91 & 0xFFFF
   \                     ??CrossCallReturnLabel_160:
   \   0000B3   12....       LCALL   ?Subroutine38 & 0xFFFF
   2767              pNDRsp->nodeDesc.MaxBufferSize = *msg++;
   \                     ??CrossCallReturnLabel_61:
   \   0000B6   12....       LCALL   ?Subroutine92 & 0xFFFF
   \                     ??CrossCallReturnLabel_507:
   \   0000B9   12....       LCALL   ?Subroutine27 & 0xFFFF
   2768              pNDRsp->nodeDesc.MaxInTransferSize[0] = *msg++;
   \                     ??CrossCallReturnLabel_34:
   \   0000BC   12....       LCALL   ?Subroutine91 & 0xFFFF
   \                     ??CrossCallReturnLabel_161:
   \   0000BF   12....       LCALL   ?Subroutine27 & 0xFFFF
   2769              pNDRsp->nodeDesc.MaxInTransferSize[1] = *msg++;
   \                     ??CrossCallReturnLabel_35:
   \   0000C2   A3           INC     DPTR
   \   0000C3   12....       LCALL   ?Subroutine91 & 0xFFFF
   \                     ??CrossCallReturnLabel_162:
   \   0000C6   A3           INC     DPTR
   \   0000C7   A3           INC     DPTR
   \   0000C8   A3           INC     DPTR
   \   0000C9   A3           INC     DPTR
   \   0000CA   A3           INC     DPTR
   \   0000CB   A3           INC     DPTR
   \   0000CC   A3           INC     DPTR
   \   0000CD   A3           INC     DPTR
   \   0000CE   A3           INC     DPTR
   \   0000CF   F0           MOVX    @DPTR,A
   \   0000D0   EA           MOV     A,R2
   \   0000D1   240A         ADD     A,#0xa
   \   0000D3   FA           MOV     R2,A
   \   0000D4   5001         JNC     ??ZDO_ParseNodeDescRsp_1
   \   0000D6   0B           INC     R3
   2770              pNDRsp->nodeDesc.ServerMask = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseNodeDescRsp_1:
   \   0000D7   8A82         MOV     DPL,R2
   \   0000D9   8B83         MOV     DPH,R3
   \   0000DB   E0           MOVX    A,@DPTR
   \   0000DC   F5..         MOV     ?V0,A
   \   0000DE   A3           INC     DPTR
   \   0000DF   E0           MOVX    A,@DPTR
   \   0000E0   FF           MOV     R7,A
   \   0000E1   EC           MOV     A,R4
   \   0000E2   12....       LCALL   ?Subroutine167 & 0xFFFF
   2771              msg += 2;
   2772              pNDRsp->nodeDesc.MaxOutTransferSize[0] = *msg++;
   2773              pNDRsp->nodeDesc.MaxOutTransferSize[1] = *msg++;
   2774              pNDRsp->nodeDesc.DescriptorCapability = *msg;
   2775            }
   \                     ??CrossCallReturnLabel_285:
   \   0000E5   3D           ADDC    A,R5
   \   0000E6   F583         MOV     DPH,A
   \   0000E8   E5..         MOV     A,?V0
   \   0000EA   F0           MOVX    @DPTR,A
   \   0000EB   A3           INC     DPTR
   \   0000EC   EF           MOV     A,R7
   \   0000ED   12....       LCALL   ?Subroutine49 & 0xFFFF
   \                     ??CrossCallReturnLabel_80:
   \   0000F0   C0E0         PUSH    A
   \   0000F2   EC           MOV     A,R4
   \   0000F3   240D         ADD     A,#0xd
   \   0000F5   F582         MOV     DPL,A
   \   0000F7   E4           CLR     A
   \   0000F8   3D           ADDC    A,R5
   \   0000F9   F583         MOV     DPH,A
   \   0000FB   D0E0         POP     A
   \   0000FD   12....       LCALL   ?Subroutine50 & 0xFFFF
   \                     ??CrossCallReturnLabel_82:
   \   000100   E0           MOVX    A,@DPTR
   \   000101   C0E0         PUSH    A
   \   000103   EC           MOV     A,R4
   \   000104   12....       LCALL   ??Subroutine224_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_466:
   \   000107   3D           ADDC    A,R5
   \   000108   F583         MOV     DPH,A
   \   00010A   D0E0         POP     A
   \   00010C   12....       LCALL   ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_65:
   \   00010F   C0E0         PUSH    A
   \   000111   EC           MOV     A,R4
   \   000112   12....       LCALL   ?Subroutine162 & 0xFFFF
   \                     ??CrossCallReturnLabel_388:
   \   000115   3D           ADDC    A,R5
   \   000116   F583         MOV     DPH,A
   \   000118   D0E0         POP     A
   \   00011A   F0           MOVX    @DPTR,A
   2776          }
   \                     ??ZDO_ParseNodeDescRsp_0:
   \   00011B   02....       LJMP    ??Subroutine217_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine91:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8C82         MOV     DPL,R4
   \   000003   8D83         MOV     DPH,R5
   \   000005   A3           INC     DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine50:
   \   000000   12....       LCALL   ?Subroutine134 & 0xFFFF
   \                     ??CrossCallReturnLabel_230:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000   12....       LCALL   ?Subroutine134 & 0xFFFF
   \                     ??CrossCallReturnLabel_231:
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   12....       LCALL   ?Subroutine133 & 0xFFFF
   \                     ??CrossCallReturnLabel_228:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine133:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   12....       LCALL   ?Subroutine175 & 0xFFFF
   \                     ??CrossCallReturnLabel_297:
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   12....       LCALL   ?Subroutine133 & 0xFFFF
   \                     ??CrossCallReturnLabel_229:
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine111:
   \   000000   EA           MOV     A,R2
   \   000001   2402         ADD     A,#0x2
   \   000003   F8           MOV     R0,A
   \   000004   E4           CLR     A
   \   000005   3B           ADDC    A,R3
   \   000006   F9           MOV     R1,A
   \   000007   E8           MOV     A,R0
   \   000008   FE           MOV     R6,A
   \   000009   E9           MOV     A,R1
   \   00000A   FF           MOV     R7,A
   \   00000B   EC           MOV     A,R4
   \   00000C   2403         ADD     A,#0x3
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   12....       LCALL   ?Subroutine161 & 0xFFFF
   \                     ??CrossCallReturnLabel_276:
   \   000003   12....       LCALL   ??Subroutine234_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_534:
   \   000006   FB           MOV     R3,A
   \   000007   8A82         MOV     DPL,R2
   \   000009   8B83         MOV     DPH,R3
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   8C82         MOV     DPL,R4
   \   00000E   8D83         MOV     DPH,R5
   \   000010   12....       LCALL   ?Subroutine183 & 0xFFFF
   \                     ??CrossCallReturnLabel_307:
   \   000013   AA82         MOV     R2,DPL
   \   000015   AB83         MOV     R3,DPH
   \   000017   E0           MOVX    A,@DPTR
   \   000018   FE           MOV     R6,A
   \   000019   A3           INC     DPTR
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   F9           MOV     R1,A
   \   00001C   EE           MOV     A,R6
   \   00001D   8C82         MOV     DPL,R4
   \   00001F   8D83         MOV     DPH,R5
   \   000021   A3           INC     DPTR
   \   000022   12....       LCALL   ??Subroutine228_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_490:
   \   000025   8C82         MOV     DPL,R4
   \   000027   8D83         MOV     DPH,R5
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   12....       LCALL   ?Subroutine184 & 0xFFFF
   \                     ??CrossCallReturnLabel_462:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine134:
   \   000000   12....       LCALL   ?Subroutine175 & 0xFFFF
   \                     ??CrossCallReturnLabel_298:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine175:
   \   000000   12....       LCALL   ?Subroutine183 & 0xFFFF
   \                     ??CrossCallReturnLabel_306:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine92:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine230_0
   \   000001                ; // Fall through to label ??Subroutine230_0
   2777          
   2778          /*********************************************************************
   2779           * @fn          ZDO_ParsePowerDescRsp
   2780           *
   2781           * @brief       This function parses the Power_Desc_rsp message.
   2782           *
   2783           * @param       inMsg  - incoming message
   2784           * @param       pNPRsp - place to parse the message into
   2785           *
   2786           * @return      none
   2787           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2788          void ZDO_ParsePowerDescRsp( zdoIncomingMsg_t *inMsg, ZDO_PowerRsp_t *pNPRsp )
   \                     ZDO_ParsePowerDescRsp:
   2789          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   2790            uint8 *msg;
   2791          
   2792            msg = inMsg->asdu;
   \   000005   12....       LCALL   ?Subroutine10 & 0xFFFF
   2793            pNPRsp->status = *msg++;
   2794            pNPRsp->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   2795          
   2796            if ( pNPRsp->status == ZDP_SUCCESS )
   \                     ??CrossCallReturnLabel_3:
   \   000008   6003         JZ      $+5
   \   00000A   02....       LJMP    ??ZDO_ParsePowerDescRsp_0 & 0xFFFF
   2797            {
   2798              msg += 2;
   2799              pNPRsp->pwrDesc.AvailablePowerSources = *msg >> 4;
   \   00000D   12....       LCALL   ?Subroutine111 & 0xFFFF
   \                     ??CrossCallReturnLabel_187:
   \   000010   E4           CLR     A
   \   000011   3D           ADDC    A,R5
   \   000012   0C           INC     R4
   \   000013   0C           INC     R4
   \   000014   0C           INC     R4
   \   000015   FD           MOV     R5,A
   \   000016   8C82         MOV     DPL,R4
   \   000018   8D83         MOV     DPH,R5
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   540F         ANL     A,#0xf
   \   00001D   F5..         MOV     ?V2,A
   \   00001F   A3           INC     DPTR
   \   000020   E0           MOVX    A,@DPTR
   \   000021   F5..         MOV     ?V3,A
   \   000023   8E82         MOV     DPL,R6
   \   000025   8F83         MOV     DPH,R7
   \   000027   E0           MOVX    A,@DPTR
   \   000028   C4           SWAP    A
   \   000029   540F         ANL     A,#0xf
   \   00002B   F5..         MOV     ?V0,A
   \   00002D   75..00       MOV     ?V1,#0x0
   \   000030   7404         MOV     A,#0x4
   \   000032   78..         MOV     R0,#?V0
   \   000034   12....       LCALL   ?S_SHL
   \   000037   E5..         MOV     A,?V2
   \   000039   45..         ORL     A,?V0
   \   00003B   A9..         MOV     R1,?V3
   \   00003D   8C82         MOV     DPL,R4
   \   00003F   8D83         MOV     DPH,R5
   \   000041   12....       LCALL   ?Subroutine29 & 0xFFFF
   2800              pNPRsp->pwrDesc.PowerMode = *msg++ & 0x0F;
   \                     ??CrossCallReturnLabel_36:
   \   000044   E5..         MOV     A,?V0
   \   000046   48           ORL     A,R0
   \   000047   F5..         MOV     ?V0,A
   \   000049   8C82         MOV     DPL,R4
   \   00004B   8D83         MOV     DPH,R5
   \   00004D   12....       LCALL   ??Subroutine203_0 & 0xFFFF
   2801              pNPRsp->pwrDesc.CurrentPowerSourceLevel = *msg >> 4;
   \                     ??CrossCallReturnLabel_374:
   \   000050   EA           MOV     A,R2
   \   000051   2403         ADD     A,#0x3
   \   000053   E4           CLR     A
   \   000054   3B           ADDC    A,R3
   \   000055   0E           INC     R6
   \   000056   FF           MOV     R7,A
   \   000057   E5..         MOV     A,?V0
   \   000059   F5..         MOV     ?V2,A
   \   00005B   E9           MOV     A,R1
   \   00005C   540F         ANL     A,#0xf
   \   00005E   F5..         MOV     ?V3,A
   \   000060   8E82         MOV     DPL,R6
   \   000062   8F83         MOV     DPH,R7
   \   000064   E0           MOVX    A,@DPTR
   \   000065   C4           SWAP    A
   \   000066   540F         ANL     A,#0xf
   \   000068   F5..         MOV     ?V0,A
   \   00006A   740C         MOV     A,#0xc
   \   00006C   78..         MOV     R0,#?V0
   \   00006E   12....       LCALL   ?S_SHL
   \   000071   E5..         MOV     A,?V3
   \   000073   45..         ORL     A,?V1
   \   000075   F9           MOV     R1,A
   \   000076   8C82         MOV     DPL,R4
   \   000078   8D83         MOV     DPH,R5
   \   00007A   E5..         MOV     A,?V2
   \   00007C   12....       LCALL   ?Subroutine29 & 0xFFFF
   2802              pNPRsp->pwrDesc.CurrentPowerSource = *msg++ & 0x0F;
   2803            }
   \                     ??CrossCallReturnLabel_37:
   \   00007F   EA           MOV     A,R2
   \   000080   2404         ADD     A,#0x4
   \   000082   8C82         MOV     DPL,R4
   \   000084   8D83         MOV     DPH,R5
   \   000086   A3           INC     DPTR
   \   000087   E0           MOVX    A,@DPTR
   \   000088   54F0         ANL     A,#0xf0
   \   00008A   F0           MOVX    @DPTR,A
   \   00008B   E8           MOV     A,R0
   \   00008C   F9           MOV     R1,A
   \   00008D   8C82         MOV     DPL,R4
   \   00008F   8D83         MOV     DPH,R5
   \   000091   A3           INC     DPTR
   \   000092   E0           MOVX    A,@DPTR
   \   000093   49           ORL     A,R1
   \   000094   F0           MOVX    @DPTR,A
   2804          }
   \                     ??ZDO_ParsePowerDescRsp_0:
   \   000095   02....       LJMP    ??Subroutine217_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   12....       LCALL   ?Subroutine138 & 0xFFFF
   \                     ??CrossCallReturnLabel_243:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   540F         ANL     A,#0xf
   \   000006   F8           MOV     R0,A
   \   000007   22           RET
   2805          
   2806          /*********************************************************************
   2807           * @fn          ZDO_ParseSimpleDescRsp
   2808           *
   2809           * @brief       This function parse the Simple_Desc_rsp message.
   2810           *
   2811           *   NOTE: The pAppInClusterList and pAppOutClusterList fields
   2812           *         in the SimpleDescriptionFormat_t structure are allocated
   2813           *         and the calling function needs to free [osal_msg_free()]
   2814           *         these buffers.
   2815           *
   2816           * @param       inMsg  - incoming message
   2817           * @param       pSimpleDescRsp - place to parse the message into
   2818           *
   2819           * @return      none
   2820           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2821          void ZDO_ParseSimpleDescRsp( zdoIncomingMsg_t *inMsg, ZDO_SimpleDescRsp_t *pSimpleDescRsp )
   \                     ZDO_ParseSimpleDescRsp:
   2822          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   2823            uint8 *msg;
   2824          
   2825            msg = inMsg->asdu;
   \   000005   12....       LCALL   ??Subroutine219_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_434:
   \   000008   3B           ADDC    A,R3
   \   000009   12....       LCALL   ?Subroutine68 & 0xFFFF
   2826            pSimpleDescRsp->status = *msg++;
   \                     ??CrossCallReturnLabel_113:
   \   00000C   8C82         MOV     DPL,R4
   \   00000E   8D83         MOV     DPH,R5
   \   000010   12....       LCALL   ?Subroutine137 & 0xFFFF
   \                     ??CrossCallReturnLabel_242:
   \   000013   A3           INC     DPTR
   \   000014   A882         MOV     R0,DPL
   \   000016   A983         MOV     R1,DPH
   2827            pSimpleDescRsp->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   \   000018   E0           MOVX    A,@DPTR
   \   000019   FE           MOV     R6,A
   \   00001A   A3           INC     DPTR
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   FB           MOV     R3,A
   \   00001D   EE           MOV     A,R6
   \   00001E   8C82         MOV     DPL,R4
   \   000020   8D83         MOV     DPH,R5
   \   000022   A3           INC     DPTR
   \   000023   12....       LCALL   ??Subroutine193_0 & 0xFFFF
   2828            msg += sizeof ( uint16 );
   2829            msg++; // Skip past the length field.
   2830          
   2831            if ( pSimpleDescRsp->status == ZDP_SUCCESS )
   \                     ??CrossCallReturnLabel_326:
   \   000026   8C82         MOV     DPL,R4
   \   000028   8D83         MOV     DPH,R5
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   7011         JNZ     ??ZDO_ParseSimpleDescRsp_0
   2832            {
   2833              ZDO_ParseSimpleDescBuf( msg, &(pSimpleDescRsp->simpleDesc) );
   \   00002D                ; Setup parameters for call to function ZDO_ParseSimpleDescBuf
   \   00002D   EC           MOV     A,R4
   \   00002E   2403         ADD     A,#0x3
   \   000030   FC           MOV     R4,A
   \   000031   5001         JNC     ??ZDO_ParseSimpleDescRsp_1
   \   000033   0D           INC     R5
   \                     ??ZDO_ParseSimpleDescRsp_1:
   \   000034   E8           MOV     A,R0
   \   000035   2403         ADD     A,#0x3
   \   000037   FA           MOV     R2,A
   \   000038   E4           CLR     A
   \   000039   39           ADDC    A,R1
   \   00003A   FB           MOV     R3,A
   \   00003B   12....       LCALL   `??ZDO_ParseSimpleDescBuf::?relay`; Banked call to: ZDO_ParseSimpleDescBuf
   2834            }
   2835          }
   \                     ??ZDO_ParseSimpleDescRsp_0:
   \   00003E                REQUIRE ?Subroutine1
   \   00003E                ; // Fall through to label ?Subroutine1
   2836          
   2837          /*********************************************************************
   2838           * @fn          ZDO_ParseEPListRsp
   2839           *
   2840           * @brief       This parse the Active_EP_rsp or Match_Desc_rsp message.
   2841           *
   2842           * @param       inMsg  - incoming message
   2843           *
   2844           * @return      none
   2845           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2846          ZDO_ActiveEndpointRsp_t *ZDO_ParseEPListRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseEPListRsp:
   2847          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
   2848            ZDO_ActiveEndpointRsp_t *pRsp;
   2849            uint8 *msg;
   2850            uint8 Status;
   2851            uint8 cnt;
   2852          
   2853            msg = inMsg->asdu;
   \   000005   12....       LCALL   ?Subroutine72 & 0xFFFF
   2854            Status = *msg++;
   \                     ??CrossCallReturnLabel_478:
   \   000008   F5..         MOV     ?V3,A
   \   00000A   A3           INC     DPTR
   \   00000B   AE82         MOV     R6,DPL
   \   00000D   AF83         MOV     R7,DPH
   2855            cnt = msg[2];
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   E0           MOVX    A,@DPTR
   \   000012   F5..         MOV     ?V2,A
   2856          
   2857            pRsp = (ZDO_ActiveEndpointRsp_t *)osal_mem_alloc( sizeof(  ZDO_ActiveEndpointRsp_t ) + cnt );
   \   000014                ; Setup parameters for call to function osal_mem_alloc
   \   000014   12....       LCALL   ??Subroutine225_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_472:
   \   000017   3400         ADDC    A,#0x0
   \   000019   FB           MOV     R3,A
   \   00001A   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00001D   8A..         MOV     ?V0,R2
   \   00001F   8B..         MOV     ?V1,R3
   2858            if ( pRsp )
   \   000021   EA           MOV     A,R2
   \   000022   45..         ORL     A,?V1
   \   000024   6031         JZ      ??ZDO_ParseEPListRsp_0
   2859            {
   2860              pRsp->status = Status;
   \   000026   8A82         MOV     DPL,R2
   \   000028   8B83         MOV     DPH,R3
   \   00002A   E5..         MOV     A,?V3
   \   00002C   12....       LCALL   ?Subroutine30 & 0xFFFF
   2861              pRsp->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   \                     ??CrossCallReturnLabel_41:
   \   00002F   FA           MOV     R2,A
   \   000030   12....       LCALL   ?Subroutine24 & 0xFFFF
   2862              msg += sizeof( uint16 );
   2863              pRsp->cnt = cnt;
   2864              msg++; // pass cnt
   2865              osal_memcpy( pRsp->epList, msg, cnt );
   \                     ??CrossCallReturnLabel_27:
   \   000033                ; Setup parameters for call to function osal_memcpy
   \   000033   8E82         MOV     DPL,R6
   \   000035   8F83         MOV     DPH,R7
   \   000037   A3           INC     DPTR
   \   000038   A3           INC     DPTR
   \   000039   A3           INC     DPTR
   \   00003A   A982         MOV     R1,DPL
   \   00003C   AA83         MOV     R2,DPH
   \   00003E   89..         MOV     ?V4,R1
   \   000040   8A..         MOV     ?V5,R2
   \   000042   88..         MOV     ?V6,R0
   \   000044   78..         MOV     R0,#?V4
   \   000046   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000049   12....       LCALL   ?Subroutine174 & 0xFFFF
   2866            }
   \                     ??CrossCallReturnLabel_476:
   \   00004C   35..         ADDC    A,?V1
   \   00004E   FB           MOV     R3,A
   \   00004F   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000052   7403         MOV     A,#0x3
   \   000054   12....       LCALL   ?DEALLOC_XSTACK8
   2867          
   2868            return ( pRsp );
   \                     ??ZDO_ParseEPListRsp_0:
   \   000057                REQUIRE ?Subroutine6
   \   000057                ; // Fall through to label ?Subroutine6
   2869          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   AA..         MOV     R2,?V0
   \   000002   AB..         MOV     R3,?V1
   \   000004   7F07         MOV     R7,#0x7
   \   000006   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine174:
   \   000000   AC..         MOV     R4,?V2
   \   000002   7D00         MOV     R5,#0x0
   \   000004   E5..         MOV     A,?V0
   \   000006                REQUIRE ??Subroutine225_0
   \   000006                ; // Fall through to label ??Subroutine225_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine225_0:
   \   000000   2404         ADD     A,#0x4
   \   000002   FA           MOV     R2,A
   \   000003   E4           CLR     A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine72:
   \   000000   12....       LCALL   ?Subroutine165 & 0xFFFF
   \                     ??CrossCallReturnLabel_438:
   \   000003   3B           ADDC    A,R3
   \   000004                REQUIRE ??Subroutine226_0
   \   000004                ; // Fall through to label ??Subroutine226_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   12....       LCALL   ?Subroutine154 & 0xFFFF
   \                     ??CrossCallReturnLabel_264:
   \   000003   EA           MOV     A,R2
   \   000004   85..82       MOV     DPL,?V0
   \   000007   8B83         MOV     DPH,R3
   \   000009   A3           INC     DPTR
   \   00000A   12....       LCALL   ??Subroutine228_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_491:
   \   00000D   85..82       MOV     DPL,?V0
   \   000010   8B83         MOV     DPH,R3
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   E5..         MOV     A,?V2
   \   000017   F0           MOVX    @DPTR,A
   \   000018   22           RET
   2870          
   2871          /*********************************************************************
   2872           * @fn          ZDO_ParseServerDiscRsp
   2873           *
   2874           * @brief       Parse the Server_Discovery_rsp message.
   2875           *
   2876           * @param       inMsg - incoming message.
   2877           * @param       pRsp - place to put the parsed information.
   2878           *
   2879           * @return      none
   2880           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2881          void ZDO_ParseServerDiscRsp( zdoIncomingMsg_t *inMsg, ZDO_ServerDiscRsp_t *pRsp )
   \                     ZDO_ParseServerDiscRsp:
   2882          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   2883            pRsp->status = inMsg->asdu[0];
   \   000005   EA           MOV     A,R2
   \   000006   2413         ADD     A,#0x13
   \   000008   F8           MOV     R0,A
   \   000009   E4           CLR     A
   \   00000A   3B           ADDC    A,R3
   \   00000B   F9           MOV     R1,A
   \   00000C   8882         MOV     DPL,R0
   \   00000E   8983         MOV     DPH,R1
   \   000010   12....       LCALL   ??Subroutine234_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_533:
   \   000013   F583         MOV     DPH,A
   \   000015   8A82         MOV     DPL,R2
   \   000017   12....       LCALL   ??Subroutine230_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_504:
   \   00001A   12....       LCALL   ?Subroutine39 & 0xFFFF
   2884            pRsp->serverMask = BUILD_UINT16( inMsg->asdu[1], inMsg->asdu[2] );
   \                     ??CrossCallReturnLabel_63:
   \   00001D   8882         MOV     DPL,R0
   \   00001F   8983         MOV     DPH,R1
   \   000021   A3           INC     DPTR
   \   000022   E0           MOVX    A,@DPTR
   \   000023   FA           MOV     R2,A
   \   000024   8882         MOV     DPL,R0
   \   000026   8983         MOV     DPH,R1
   \   000028   A3           INC     DPTR
   \   000029   12....       LCALL   ??Subroutine231_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_508:
   \   00002C   A3           INC     DPTR
   \   00002D   12....       LCALL   ??Subroutine203_0 & 0xFFFF
   2885          }
   \                     ??CrossCallReturnLabel_375:
   \   000030   02....       LJMP    ?Subroutine1 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine231_0:
   \   000000   A3           INC     DPTR
   \   000001   E0           MOVX    A,@DPTR
   \   000002   F9           MOV     R1,A
   \   000003   EA           MOV     A,R2
   \   000004   8C82         MOV     DPL,R4
   \   000006   8D83         MOV     DPH,R5
   \   000008   22           RET
   2886          
   2887          /*********************************************************************
   2888           * @fn          ZDO_ParseMgmtLqiRsp
   2889           *
   2890           * @brief       This function parses the incoming Management
   2891           *              LQI response
   2892           *
   2893           * @param       inMsg - incoming message
   2894           *
   2895           * @return      a pointer to parsed response structure (NULL if not allocated).
   2896           *          This structure was allocated using osal_mem_alloc, so it must be freed
   2897           *          by the calling function [osal_mem_free()].
   2898           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   AA..         MOV     R2,?V2
   \   000002   AB..         MOV     R3,?V3
   \   000004                REQUIRE ??Subroutine192_0
   \   000004                ; // Fall through to label ??Subroutine192_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2899          ZDO_MgmtLqiRsp_t *ZDO_ParseMgmtLqiRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseMgmtLqiRsp:
   2900          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   2901            ZDO_MgmtLqiRsp_t *pRsp;
   2902            uint8 status;
   2903            uint8 startIndex = 0;
   \   000005   75..00       MOV     ?V5,#0x0
   2904            uint8 neighborLqiCount = 0;
   \   000008   75..00       MOV     ?V7,#0x0
   2905            uint8 neighborLqiEntries = 0;
   \   00000B   75..00       MOV     ?V4,#0x0
   2906            uint8 *msg;
   2907          
   2908            msg = inMsg->asdu;
   \   00000E   12....       LCALL   ?Subroutine71 & 0xFFFF
   2909          
   2910            status = *msg++;
   2911            if ( status == ZSuccess )
   \                     ??CrossCallReturnLabel_119:
   \   000011   700C         JNZ     ??ZDO_ParseMgmtLqiRsp_0
   2912            {
   2913              neighborLqiEntries = *msg++;
   \   000013   12....       LCALL   ?Subroutine74 & 0xFFFF
   2914              startIndex = *msg++;
   2915              neighborLqiCount = *msg++;
   2916            }
   \                     ??CrossCallReturnLabel_123:
   \   000016   F5..         MOV     ?V7,A
   \   000018   EE           MOV     A,R6
   \   000019   2403         ADD     A,#0x3
   \   00001B   FE           MOV     R6,A
   \   00001C   5001         JNC     ??ZDO_ParseMgmtLqiRsp_0
   \   00001E   0F           INC     R7
   2917          
   2918            // Allocate a buffer big enough to handle the list.
   2919            pRsp = (ZDO_MgmtLqiRsp_t *)osal_mem_alloc(
   2920                      sizeof( ZDO_MgmtLqiRsp_t ) + (neighborLqiCount * sizeof( ZDP_MgmtLqiItem_t )) );
   \                     ??ZDO_ParseMgmtLqiRsp_0:
   \   00001F                ; Setup parameters for call to function osal_mem_alloc
   \   00001F   E5..         MOV     A,?V7
   \   000021   75F01A       MOV     B,#0x1a
   \   000024   12....       LCALL   ?Subroutine130 & 0xFFFF
   \                     ??CrossCallReturnLabel_223:
   \   000027   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00002A   8A..         MOV     ?V2,R2
   \   00002C   8B..         MOV     ?V3,R3
   2921            if ( pRsp )
   \   00002E   EA           MOV     A,R2
   \   00002F   45..         ORL     A,?V3
   \   000031   7003         JNZ     $+5
   \   000033   02....       LJMP    ??ZDO_ParseMgmtLqiRsp_1 & 0xFFFF
   2922            {
   2923              uint8 x;
   2924              ZDP_MgmtLqiItem_t *pList = pRsp->list;
   \   000036   12....       LCALL   ?Subroutine129 & 0xFFFF
   2925              pRsp->status = status;
   \                     ??CrossCallReturnLabel_221:
   \   000039   E5..         MOV     A,?V6
   \   00003B   12....       LCALL   ?Subroutine14 & 0xFFFF
   2926              pRsp->neighborLqiEntries = neighborLqiEntries;
   2927              pRsp->startIndex = startIndex;
   2928              pRsp->neighborLqiCount = neighborLqiCount;
   \                     ??CrossCallReturnLabel_10:
   \   00003E   E5..         MOV     A,?V7
   \   000040   F0           MOVX    @DPTR,A
   2929          
   2930              for ( x = 0; x < neighborLqiCount; x++ )
   \   000041   75..00       MOV     ?V4,#0x0
   \   000044   02....       LJMP    ??ZDO_ParseMgmtLqiRsp_2 & 0xFFFF
   2931              {
   2932                uint8 tmp;
   2933          
   2934                pList->panID = 0; // This isn't in the record, why is it in the structure?
   \                     ??ZDO_ParseMgmtLqiRsp_3:
   \   000047   85..82       MOV     DPL,?V0
   \   00004A   85..83       MOV     DPH,?V1
   \   00004D   E4           CLR     A
   \   00004E   F0           MOVX    @DPTR,A
   \   00004F   A3           INC     DPTR
   \   000050   F0           MOVX    @DPTR,A
   2935                osal_cpyExtAddr(pList->extPanID, msg);   //Copy extended PAN ID
   \   000051                ; Setup parameters for call to function sAddrExtCpy
   \   000051   EE           MOV     A,R6
   \   000052   FC           MOV     R4,A
   \   000053   EF           MOV     A,R7
   \   000054   FD           MOV     R5,A
   \   000055   E5..         MOV     A,?V0
   \   000057   2402         ADD     A,#0x2
   \   000059   FA           MOV     R2,A
   \   00005A   E4           CLR     A
   \   00005B   35..         ADDC    A,?V1
   \   00005D   FB           MOV     R3,A
   \   00005E   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   2936                msg += Z_EXTADDR_LEN;
   \   000061   EE           MOV     A,R6
   \   000062   2408         ADD     A,#0x8
   \   000064   FE           MOV     R6,A
   \   000065   5001         JNC     ??ZDO_ParseMgmtLqiRsp_4
   \   000067   0F           INC     R7
   2937          
   2938                osal_cpyExtAddr(pList->extAddr, msg);   //Copy extended address
   \                     ??ZDO_ParseMgmtLqiRsp_4:
   \   000068                ; Setup parameters for call to function sAddrExtCpy
   \   000068   FC           MOV     R4,A
   \   000069   EF           MOV     A,R7
   \   00006A   FD           MOV     R5,A
   \   00006B   E5..         MOV     A,?V0
   \   00006D   240A         ADD     A,#0xa
   \   00006F   FA           MOV     R2,A
   \   000070   E4           CLR     A
   \   000071   35..         ADDC    A,?V1
   \   000073   FB           MOV     R3,A
   \   000074   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   2939                msg += Z_EXTADDR_LEN;
   \   000077   EE           MOV     A,R6
   \   000078   2408         ADD     A,#0x8
   \   00007A   FE           MOV     R6,A
   \   00007B   5001         JNC     ??ZDO_ParseMgmtLqiRsp_5
   \   00007D   0F           INC     R7
   2940          
   2941                pList->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseMgmtLqiRsp_5:
   \   00007E   12....       LCALL   ?Subroutine88 & 0xFFFF
   \                     ??CrossCallReturnLabel_155:
   \   000081   12....       LCALL   ?Subroutine124 & 0xFFFF
   \                     ??CrossCallReturnLabel_216:
   \   000084   E8           MOV     A,R0
   \   000085   12....       LCALL   ?Subroutine18 & 0xFFFF
   2942                msg += 2;
   2943          
   2944                tmp = *msg++;
   \                     ??CrossCallReturnLabel_455:
   \   000088   F8           MOV     R0,A
   2945                pList->devType = tmp & 0x03;
   \   000089   7403         MOV     A,#0x3
   \   00008B   58           ANL     A,R0
   \   00008C   C0E0         PUSH    A
   \   00008E   12....       LCALL   ?Subroutine117 & 0xFFFF
   \                     ??CrossCallReturnLabel_200:
   \   000091   D0E0         POP     A
   \   000093   F0           MOVX    @DPTR,A
   2946                pList->rxOnIdle = (tmp >> 2) & 0x03;
   \   000094   E8           MOV     A,R0
   \   000095   13           RRC     A
   \   000096   13           RRC     A
   \   000097   543F         ANL     A,#0x3f
   \   000099   5403         ANL     A,#0x3
   \   00009B   C0E0         PUSH    A
   \   00009D   12....       LCALL   ?Subroutine121 & 0xFFFF
   \                     ??CrossCallReturnLabel_209:
   \   0000A0   D0E0         POP     A
   \   0000A2   F0           MOVX    @DPTR,A
   2947                pList->relation = (tmp >> 4) & 0x07;
   \   0000A3   E8           MOV     A,R0
   \   0000A4   C4           SWAP    A
   \   0000A5   540F         ANL     A,#0xf
   \   0000A7   5407         ANL     A,#0x7
   \   0000A9   C0E0         PUSH    A
   \   0000AB   E5..         MOV     A,?V0
   \   0000AD   2416         ADD     A,#0x16
   \   0000AF   12....       LCALL   ?Subroutine128 & 0xFFFF
   \                     ??CrossCallReturnLabel_441:
   \   0000B2   D0E0         POP     A
   \   0000B4   12....       LCALL   ?Subroutine25 & 0xFFFF
   2948          
   2949                pList->permit = (*msg++) & 0x03;
   \                     ??CrossCallReturnLabel_30:
   \   0000B7   5403         ANL     A,#0x3
   \   0000B9   C0E0         PUSH    A
   \   0000BB   E5..         MOV     A,?V0
   \   0000BD   2417         ADD     A,#0x17
   \   0000BF   12....       LCALL   ?Subroutine128 & 0xFFFF
   \                     ??CrossCallReturnLabel_442:
   \   0000C2   D0E0         POP     A
   \   0000C4   12....       LCALL   ?Subroutine46 & 0xFFFF
   2950          
   2951                pList->depth = *msg++;
   \                     ??CrossCallReturnLabel_74:
   \   0000C7   E0           MOVX    A,@DPTR
   \   0000C8   C0E0         PUSH    A
   \   0000CA   E5..         MOV     A,?V0
   \   0000CC   2418         ADD     A,#0x18
   \   0000CE   12....       LCALL   ?Subroutine128 & 0xFFFF
   \                     ??CrossCallReturnLabel_443:
   \   0000D1   D0E0         POP     A
   \   0000D3   12....       LCALL   ?Subroutine16 & 0xFFFF
   2952          
   2953                pList->lqi = *msg++;
   \                     ??CrossCallReturnLabel_17:
   \   0000D6   C0E0         PUSH    A
   \   0000D8   E5..         MOV     A,?V0
   \   0000DA   2419         ADD     A,#0x19
   \   0000DC   12....       LCALL   ?Subroutine128 & 0xFFFF
   \                     ??CrossCallReturnLabel_444:
   \   0000DF   D0E0         POP     A
   \   0000E1   F0           MOVX    @DPTR,A
   \   0000E2   EE           MOV     A,R6
   \   0000E3   2406         ADD     A,#0x6
   \   0000E5   FE           MOV     R6,A
   \   0000E6   5001         JNC     ??ZDO_ParseMgmtLqiRsp_6
   \   0000E8   0F           INC     R7
   2954                pList++;
   \                     ??ZDO_ParseMgmtLqiRsp_6:
   \   0000E9   E5..         MOV     A,?V0
   \   0000EB   241A         ADD     A,#0x1a
   \   0000ED   F5..         MOV     ?V0,A
   \   0000EF   5002         JNC     ??ZDO_ParseMgmtLqiRsp_7
   \   0000F1   05..         INC     ?V1
   2955              }
   \                     ??ZDO_ParseMgmtLqiRsp_7:
   \   0000F3   05..         INC     ?V4
   \                     ??ZDO_ParseMgmtLqiRsp_2:
   \   0000F5   E5..         MOV     A,?V4
   \   0000F7   C3           CLR     C
   \   0000F8   95..         SUBB    A,?V7
   \   0000FA   5003         JNC     $+5
   \   0000FC   02....       LJMP    ??ZDO_ParseMgmtLqiRsp_3 & 0xFFFF
   2956            }
   2957          
   2958            return ( pRsp );
   \                     ??ZDO_ParseMgmtLqiRsp_1:
   \   0000FF   02....       LJMP    ?Subroutine5 & 0xFFFF
   2959          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine128:
   \   000000   F582         MOV     DPL,A
   \   000002   E4           CLR     A
   \   000003                REQUIRE ??Subroutine221_0
   \   000003                ; // Fall through to label ??Subroutine221_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   E9           MOV     A,R1
   \   000003                REQUIRE ??Subroutine223_0
   \   000003                ; // Fall through to label ??Subroutine223_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine71:
   \   000000   12....       LCALL   ?Subroutine165 & 0xFFFF
   \                     ??CrossCallReturnLabel_437:
   \   000003   3B           ADDC    A,R3
   \   000004   12....       LCALL   ?Subroutine152 & 0xFFFF
   \                     ??CrossCallReturnLabel_484:
   \   000007   F5..         MOV     ?V6,A
   \   000009   A3           INC     DPTR
   \   00000A   AE82         MOV     R6,DPL
   \   00000C   AF83         MOV     R7,DPH
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine130:
   \   000000   A4           MUL     AB
   \   000001   A9F0         MOV     R1,B
   \   000003   12....       LCALL   ??Subroutine225_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_475:
   \   000006   39           ADDC    A,R1
   \   000007   FB           MOV     R3,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine129:
   \   000000   12....       LCALL   ?Subroutine173 & 0xFFFF
   \                     ??CrossCallReturnLabel_296:
   \   000003   8A82         MOV     DPL,R2
   \   000005   8B83         MOV     DPH,R3
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine173:
   \   000000   EA           MOV     A,R2
   \   000001   2404         ADD     A,#0x4
   \   000003   F5..         MOV     ?V0,A
   \   000005   E4           CLR     A
   \   000006   35..         ADDC    A,?V3
   \   000008   F5..         MOV     ?V1,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine74:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V4,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V5,A
   \   000007   8E82         MOV     DPL,R6
   \   000009   8F83         MOV     DPH,R7
   \   00000B   A3           INC     DPTR
   \   00000C   A3           INC     DPTR
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   E5..         MOV     A,?V4
   \   000004   12....       LCALL   ?Subroutine135 & 0xFFFF
   \                     ??CrossCallReturnLabel_236:
   \   000007   E5..         MOV     A,?V5
   \   000009   12....       LCALL   ?Subroutine134 & 0xFFFF
   \                     ??CrossCallReturnLabel_233:
   \   00000C   22           RET
   2960          
   2961          /*********************************************************************
   2962           * @fn          ZDO_ParseMgmNwkDiscRsp
   2963           *
   2964           * @brief       This function parses the incoming Management
   2965           *              Network Discover response.
   2966           *
   2967           * @param       inMsg - incoming message
   2968           *
   2969           * @return      pointer to parsed response.  This structure was
   2970           *          allocated using osal_mem_alloc, so it must be freed
   2971           *          by the calling function [osal_mem_free()].
   2972           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2973          ZDO_MgmNwkDiscRsp_t *ZDO_ParseMgmNwkDiscRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseMgmNwkDiscRsp:
   2974          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   2975            ZDO_MgmNwkDiscRsp_t *pRsp;
   2976            uint8 status;
   2977            uint8 networkCount = 0;
   \   000005   75..00       MOV     ?V0,#0x0
   2978            uint8 startIndex = 0;
   \   000008   75..00       MOV     ?V1,#0x0
   2979            uint8 networkListCount = 0;
   \   00000B   75..00       MOV     ?V7,#0x0
   2980            uint8 *msg;
   2981          
   2982            msg = inMsg->asdu;
   \   00000E   12....       LCALL   ?Subroutine71 & 0xFFFF
   2983            status = *msg++;
   2984          
   2985            if ( status == ZSuccess )
   \                     ??CrossCallReturnLabel_120:
   \   000011   7013         JNZ     ??ZDO_ParseMgmNwkDiscRsp_0
   2986            {
   2987              networkCount = *msg++;
   \   000013   12....       LCALL   ?Subroutine81 & 0xFFFF
   2988              startIndex = *msg++;
   2989              networkListCount = *msg++;
   \                     ??CrossCallReturnLabel_139:
   \   000016   8E82         MOV     DPL,R6
   \   000018   8F83         MOV     DPH,R7
   \   00001A   A3           INC     DPTR
   \   00001B   A3           INC     DPTR
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   F5..         MOV     ?V7,A
   \   00001F   EE           MOV     A,R6
   \   000020   2403         ADD     A,#0x3
   \   000022   FE           MOV     R6,A
   \   000023   5001         JNC     ??ZDO_ParseMgmNwkDiscRsp_0
   \   000025   0F           INC     R7
   2990            }
   2991          
   2992            // Allocate a buffer big enough to handle the list.
   2993            pRsp = (ZDO_MgmNwkDiscRsp_t *)osal_mem_alloc( sizeof( ZDO_MgmNwkDiscRsp_t )
   2994                                            + (networkListCount * sizeof( mgmtNwkDiscItem_t )) );
   \                     ??ZDO_ParseMgmNwkDiscRsp_0:
   \   000026                ; Setup parameters for call to function osal_mem_alloc
   \   000026   85....       MOV     ?V2,?V7
   \   000029   75..00       MOV     ?V3,#0x0
   \   00002C   7404         MOV     A,#0x4
   \   00002E   78..         MOV     R0,#?V2
   \   000030   12....       LCALL   ?S_SHL
   \   000033   E5..         MOV     A,?V2
   \   000035   12....       LCALL   ??Subroutine225_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_473:
   \   000038   35..         ADDC    A,?V3
   \   00003A   FB           MOV     R3,A
   \   00003B   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00003E   8A..         MOV     ?V2,R2
   \   000040   8B..         MOV     ?V3,R3
   2995            if ( pRsp )
   \   000042   EA           MOV     A,R2
   \   000043   45..         ORL     A,?V3
   \   000045   7003         JNZ     $+5
   \   000047   02....       LJMP    ??ZDO_ParseMgmNwkDiscRsp_1 & 0xFFFF
   2996            {
   2997              uint8 x;
   2998              mgmtNwkDiscItem_t *pList;
   2999          
   3000              pRsp->status = status;
   \   00004A   8A82         MOV     DPL,R2
   \   00004C   8B83         MOV     DPH,R3
   \   00004E   E5..         MOV     A,?V6
   \   000050   F0           MOVX    @DPTR,A
   3001              pRsp->networkCount = networkCount;
   \   000051   A3           INC     DPTR
   \   000052   E5..         MOV     A,?V0
   \   000054   12....       LCALL   ?Subroutine20 & 0xFFFF
   3002              pRsp->startIndex = startIndex;
   3003              pRsp->networkListCount = networkListCount;
   \                     ??CrossCallReturnLabel_21:
   \   000057   E5..         MOV     A,?V7
   \   000059   F0           MOVX    @DPTR,A
   3004              pList = pRsp->list;
   \   00005A   12....       LCALL   ?Subroutine173 & 0xFFFF
   3005          
   3006              for ( x = 0; x < networkListCount; x++ )
   \                     ??CrossCallReturnLabel_295:
   \   00005D   75..00       MOV     ?V4,#0x0
   \   000060   8079         SJMP    ??ZDO_ParseMgmNwkDiscRsp_2
   3007              {
   3008                osal_cpyExtAddr(pList->extendedPANID, msg);   //Copy extended PAN ID
   \                     ??ZDO_ParseMgmNwkDiscRsp_3:
   \   000062                ; Setup parameters for call to function sAddrExtCpy
   \   000062   EE           MOV     A,R6
   \   000063   FC           MOV     R4,A
   \   000064   EF           MOV     A,R7
   \   000065   FD           MOV     R5,A
   \   000066   AA..         MOV     R2,?V0
   \   000068   AB..         MOV     R3,?V1
   \   00006A   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   3009                pList->PANId = BUILD_UINT16( msg[0], msg[1] );
   \   00006D   12....       LCALL   ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_108:
   \   000070   A3           INC     DPTR
   \   000071   F0           MOVX    @DPTR,A
   \   000072   A3           INC     DPTR
   \   000073   E9           MOV     A,R1
   \   000074   12....       LCALL   ?Subroutine26 & 0xFFFF
   3010                msg += Z_EXTADDR_LEN;
   3011          
   3012                pList->logicalChannel = *msg++;
   \                     ??CrossCallReturnLabel_33:
   \   000077   85..82       MOV     DPL,?V0
   \   00007A   85..83       MOV     DPH,?V1
   \   00007D   A3           INC     DPTR
   \   00007E   A3           INC     DPTR
   \   00007F   A3           INC     DPTR
   \   000080   A3           INC     DPTR
   \   000081   A3           INC     DPTR
   \   000082   A3           INC     DPTR
   \   000083   A3           INC     DPTR
   \   000084   A3           INC     DPTR
   \   000085   A3           INC     DPTR
   \   000086   A3           INC     DPTR
   \   000087   F0           MOVX    @DPTR,A
   3013                pList->stackProfile = (*msg) & 0x0F;
   \   000088   EE           MOV     A,R6
   \   000089   2409         ADD     A,#0x9
   \   00008B   F8           MOV     R0,A
   \   00008C   12....       LCALL   ?Subroutine106 & 0xFFFF
   \                     ??CrossCallReturnLabel_178:
   \   00008F   C0E0         PUSH    A
   \   000091   12....       LCALL   ?Subroutine115 & 0xFFFF
   \                     ??CrossCallReturnLabel_194:
   \   000094   D0E0         POP     A
   \   000096   12....       LCALL   ?Subroutine45 & 0xFFFF
   3014                pList->version = (*msg++ >> 4) & 0x0F;
   \                     ??CrossCallReturnLabel_71:
   \   000099   C0E0         PUSH    A
   \   00009B   12....       LCALL   ?Subroutine120 & 0xFFFF
   \                     ??CrossCallReturnLabel_207:
   \   00009E   D0E0         POP     A
   \   0000A0   F0           MOVX    @DPTR,A
   3015                pList->beaconOrder = (*msg) & 0x0F;
   \   0000A1   EE           MOV     A,R6
   \   0000A2   240A         ADD     A,#0xa
   \   0000A4   08           INC     R0
   \   0000A5   12....       LCALL   ?Subroutine106 & 0xFFFF
   \                     ??CrossCallReturnLabel_179:
   \   0000A8   C0E0         PUSH    A
   \   0000AA   E5..         MOV     A,?V0
   \   0000AC   240D         ADD     A,#0xd
   \   0000AE   12....       LCALL   ?Subroutine128 & 0xFFFF
   \                     ??CrossCallReturnLabel_445:
   \   0000B1   D0E0         POP     A
   \   0000B3   12....       LCALL   ?Subroutine45 & 0xFFFF
   3016                pList->superFrameOrder = (*msg++ >> 4) & 0x0F;
   \                     ??CrossCallReturnLabel_72:
   \   0000B6   C0E0         PUSH    A
   \   0000B8   12....       LCALL   ?Subroutine108 & 0xFFFF
   \                     ??CrossCallReturnLabel_183:
   \   0000BB   D0E0         POP     A
   \   0000BD   12....       LCALL   ?Subroutine35 & 0xFFFF
   3017                pList->permitJoining = *msg++;
   \                     ??CrossCallReturnLabel_55:
   \   0000C0   C0E0         PUSH    A
   \   0000C2   12....       LCALL   ?Subroutine110 & 0xFFFF
   \                     ??CrossCallReturnLabel_385:
   \   0000C5   D0E0         POP     A
   \   0000C7   F0           MOVX    @DPTR,A
   \   0000C8   EE           MOV     A,R6
   \   0000C9   240C         ADD     A,#0xc
   \   0000CB   FE           MOV     R6,A
   \   0000CC   5001         JNC     ??ZDO_ParseMgmNwkDiscRsp_4
   \   0000CE   0F           INC     R7
   3018                pList++;
   \                     ??ZDO_ParseMgmNwkDiscRsp_4:
   \   0000CF   E5..         MOV     A,?V0
   \   0000D1   2410         ADD     A,#0x10
   \   0000D3   F5..         MOV     ?V0,A
   \   0000D5   5002         JNC     ??ZDO_ParseMgmNwkDiscRsp_5
   \   0000D7   05..         INC     ?V1
   3019              }
   \                     ??ZDO_ParseMgmNwkDiscRsp_5:
   \   0000D9   05..         INC     ?V4
   \                     ??ZDO_ParseMgmNwkDiscRsp_2:
   \   0000DB   E5..         MOV     A,?V4
   \   0000DD   C3           CLR     C
   \   0000DE   95..         SUBB    A,?V7
   \   0000E0   4080         JC      ??ZDO_ParseMgmNwkDiscRsp_3
   3020            }
   3021          
   3022            return ( pRsp );
   \                     ??ZDO_ParseMgmNwkDiscRsp_1:
   \   0000E2   02....       LJMP    ?Subroutine5 & 0xFFFF
   3023          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine106:
   \   000000   E4           CLR     A
   \   000001   3F           ADDC    A,R7
   \   000002   F9           MOV     R1,A
   \   000003   8882         MOV     DPL,R0
   \   000005   8983         MOV     DPH,R1
   \   000007   E0           MOVX    A,@DPTR
   \   000008   540F         ANL     A,#0xf
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine45:
   \   000000   12....       LCALL   ?Subroutine137 & 0xFFFF
   \                     ??CrossCallReturnLabel_241:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   C4           SWAP    A
   \   000005   540F         ANL     A,#0xf
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   12....       LCALL   ?Subroutine135 & 0xFFFF
   \                     ??CrossCallReturnLabel_235:
   \   000003   E5..         MOV     A,?V1
   \   000005   12....       LCALL   ?Subroutine134 & 0xFFFF
   \                     ??CrossCallReturnLabel_232:
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine66:
   \   000000   12....       LCALL   ?Subroutine143 & 0xFFFF
   \                     ??CrossCallReturnLabel_250:
   \   000003   22           RET
   3024          
   3025          /*********************************************************************
   3026           * @fn          ZDO_ParseMgmtRtgRsp
   3027           *
   3028           * @brief       This function parses the incoming Management
   3029           *              Routing response.
   3030           *
   3031           * @param       inMsg - incoming message
   3032           *
   3033           * @return      a pointer to parsed response structure (NULL if not allocated).
   3034           *          This structure was allocated using osal_mem_alloc, so it must be freed
   3035           *          by the calling function [osal_mem_free()].
   3036           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3037          ZDO_MgmtRtgRsp_t *ZDO_ParseMgmtRtgRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseMgmtRtgRsp:
   3038          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   3039            ZDO_MgmtRtgRsp_t *pRsp;
   3040            uint8 status;
   3041            uint8 rtgCount = 0;
   \   000005   75..00       MOV     ?V4,#0x0
   3042            uint8 startIndex = 0;
   \   000008   75..00       MOV     ?V1,#0x0
   3043            uint8 rtgListCount = 0;
   \   00000B   75..00       MOV     ?V0,#0x0
   3044            uint8 *msg;
   3045          
   3046            msg = inMsg->asdu;
   \   00000E   12....       LCALL   ?Subroutine72 & 0xFFFF
   3047          
   3048            status = *msg++;
   \                     ??CrossCallReturnLabel_479:
   \   000011   F5..         MOV     ?V5,A
   \   000013   A3           INC     DPTR
   \   000014   AE82         MOV     R6,DPL
   \   000016   AF83         MOV     R7,DPH
   3049            if ( status == ZSuccess )
   \   000018   7017         JNZ     ??ZDO_ParseMgmtRtgRsp_0
   3050            {
   3051              rtgCount = *msg++;
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   F5..         MOV     ?V4,A
   3052              startIndex = *msg++;
   \   00001D   A3           INC     DPTR
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   F5..         MOV     ?V1,A
   3053              rtgListCount = *msg++;
   \   000021   8E82         MOV     DPL,R6
   \   000023   8F83         MOV     DPH,R7
   \   000025   A3           INC     DPTR
   \   000026   A3           INC     DPTR
   \   000027   E0           MOVX    A,@DPTR
   \   000028   F5..         MOV     ?V0,A
   \   00002A   EE           MOV     A,R6
   \   00002B   2403         ADD     A,#0x3
   \   00002D   FE           MOV     R6,A
   \   00002E   5001         JNC     ??ZDO_ParseMgmtRtgRsp_0
   \   000030   0F           INC     R7
   3054            }
   3055          
   3056            // Allocate a buffer big enough to handle the list
   3057            pRsp = (ZDO_MgmtRtgRsp_t *)osal_mem_alloc(
   3058                    sizeof( ZDO_MgmtRtgRsp_t ) + (rtgListCount * sizeof( rtgItem_t )) );
   \                     ??ZDO_ParseMgmtRtgRsp_0:
   \   000031                ; Setup parameters for call to function osal_mem_alloc
   \   000031   E5..         MOV     A,?V0
   \   000033   75F007       MOV     B,#0x7
   \   000036   12....       LCALL   ?Subroutine130 & 0xFFFF
   \                     ??CrossCallReturnLabel_224:
   \   000039   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   3059            if ( pRsp )
   \   00003C   EA           MOV     A,R2
   \   00003D   4B           ORL     A,R3
   \   00003E   6073         JZ      ??ZDO_ParseMgmtRtgRsp_1
   3060            {
   3061              uint8 x;
   3062              rtgItem_t *pList = pRsp->list;
   \   000040   EA           MOV     A,R2
   \   000041   2404         ADD     A,#0x4
   \   000043   F8           MOV     R0,A
   \   000044   E4           CLR     A
   \   000045   3B           ADDC    A,R3
   \   000046   F9           MOV     R1,A
   3063              pRsp->status = status;
   \   000047   8A82         MOV     DPL,R2
   \   000049   8B83         MOV     DPH,R3
   \   00004B   E5..         MOV     A,?V5
   \   00004D   F0           MOVX    @DPTR,A
   3064              pRsp->rtgCount = rtgCount;
   \   00004E   A3           INC     DPTR
   \   00004F   E5..         MOV     A,?V4
   \   000051   12....       LCALL   ?Subroutine20 & 0xFFFF
   3065              pRsp->startIndex = startIndex;
   3066              pRsp->rtgListCount = rtgListCount;
   \                     ??CrossCallReturnLabel_22:
   \   000054   E5..         MOV     A,?V0
   \   000056   F0           MOVX    @DPTR,A
   3067          
   3068              for ( x = 0; x < rtgListCount; x++ )
   \   000057   7C00         MOV     R4,#0x0
   \   000059   8052         SJMP    ??ZDO_ParseMgmtRtgRsp_2
   3069              {
   3070                uint8 statOpt;
   3071          
   3072                pList->dstAddress = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseMgmtRtgRsp_3:
   \   00005B   8E82         MOV     DPL,R6
   \   00005D   8F83         MOV     DPH,R7
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   12....       LCALL   ?Subroutine93 & 0xFFFF
   \                     ??CrossCallReturnLabel_163:
   \   000063   F0           MOVX    @DPTR,A
   \   000064   A3           INC     DPTR
   \   000065   E5..         MOV     A,?V3
   \   000067   12....       LCALL   ??Subroutine223_0 & 0xFFFF
   3073                msg += 2;
   3074                statOpt = *msg++;
   \                     ??CrossCallReturnLabel_458:
   \   00006A   FD           MOV     R5,A
   \   00006B   EE           MOV     A,R6
   \   00006C   2403         ADD     A,#0x3
   \   00006E   FE           MOV     R6,A
   \   00006F   5001         JNC     ??ZDO_ParseMgmtRtgRsp_4
   \   000071   0F           INC     R7
   3075                pList->status = (statOpt & 0x07);
   \                     ??ZDO_ParseMgmtRtgRsp_4:
   \   000072   7407         MOV     A,#0x7
   \   000074   5D           ANL     A,R5
   \   000075   8882         MOV     DPL,R0
   \   000077   8983         MOV     DPH,R1
   \   000079   A3           INC     DPTR
   \   00007A   A3           INC     DPTR
   \   00007B   A3           INC     DPTR
   \   00007C   A3           INC     DPTR
   \   00007D   A3           INC     DPTR
   \   00007E   F0           MOVX    @DPTR,A
   3076                pList->options = ((statOpt >> 3) & 0x07);
   \   00007F   ED           MOV     A,R5
   \   000080   13           RRC     A
   \   000081   13           RRC     A
   \   000082   13           RRC     A
   \   000083   541F         ANL     A,#0x1f
   \   000085   5407         ANL     A,#0x7
   \   000087   8882         MOV     DPL,R0
   \   000089   8983         MOV     DPH,R1
   \   00008B   A3           INC     DPTR
   \   00008C   A3           INC     DPTR
   \   00008D   A3           INC     DPTR
   \   00008E   A3           INC     DPTR
   \   00008F   A3           INC     DPTR
   \   000090   A3           INC     DPTR
   \   000091   12....       LCALL   ?Subroutine30 & 0xFFFF
   3077                pList->nextHopAddress = BUILD_UINT16( msg[0], msg[1] );
   \                     ??CrossCallReturnLabel_42:
   \   000094   12....       LCALL   ?Subroutine93 & 0xFFFF
   \                     ??CrossCallReturnLabel_164:
   \   000097   A3           INC     DPTR
   \   000098   A3           INC     DPTR
   \   000099   F0           MOVX    @DPTR,A
   \   00009A   A3           INC     DPTR
   \   00009B   E5..         MOV     A,?V3
   \   00009D   F0           MOVX    @DPTR,A
   3078                msg += 2;
   \   00009E   EE           MOV     A,R6
   \   00009F   2402         ADD     A,#0x2
   \   0000A1   FE           MOV     R6,A
   \   0000A2   5001         JNC     ??ZDO_ParseMgmtRtgRsp_5
   \   0000A4   0F           INC     R7
   3079                pList++;
   \                     ??ZDO_ParseMgmtRtgRsp_5:
   \   0000A5   E8           MOV     A,R0
   \   0000A6   2407         ADD     A,#0x7
   \   0000A8   F8           MOV     R0,A
   \   0000A9   5001         JNC     ??ZDO_ParseMgmtRtgRsp_6
   \   0000AB   09           INC     R1
   3080              }
   \                     ??ZDO_ParseMgmtRtgRsp_6:
   \   0000AC   0C           INC     R4
   \                     ??ZDO_ParseMgmtRtgRsp_2:
   \   0000AD   EC           MOV     A,R4
   \   0000AE   C3           CLR     C
   \   0000AF   95..         SUBB    A,?V0
   \   0000B1   40A8         JC      ??ZDO_ParseMgmtRtgRsp_3
   3081            }
   3082          
   3083            return ( pRsp );
   \                     ??ZDO_ParseMgmtRtgRsp_1:
   \   0000B3   02....       LJMP    ??Subroutine218_0 & 0xFFFF
   3084          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine93:
   \   000000   F5..         MOV     ?V4,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F5..         MOV     ?V3,A
   \   000006   E5..         MOV     A,?V4
   \   000008   8882         MOV     DPL,R0
   \   00000A   8983         MOV     DPH,R1
   \   00000C   22           RET
   3085          
   3086          /*********************************************************************
   3087           * @fn          ZDO_ParseMgmtBindRsp
   3088           *
   3089           * @brief       This function parses the incoming Management
   3090           *              Binding response.
   3091           *
   3092           * @param       inMsg - pointer to message to parse
   3093           *
   3094           * @return      a pointer to parsed response structure (NULL if not allocated).
   3095           *          This structure was allocated using osal_mem_alloc, so it must be freed
   3096           *          by the calling function [osal_mem_free()].
   3097           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3098          ZDO_MgmtBindRsp_t *ZDO_ParseMgmtBindRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseMgmtBindRsp:
   3099          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   3100            ZDO_MgmtBindRsp_t *pRsp;
   3101            uint8 status;
   3102            uint8 bindingCount = 0;
   \   000005   75..00       MOV     ?V4,#0x0
   3103            uint8 startIndex = 0;
   \   000008   75..00       MOV     ?V5,#0x0
   3104            uint8 bindingListCount = 0;
   \   00000B   75..00       MOV     ?V6,#0x0
   3105            uint8 *msg;
   3106          
   3107            msg = inMsg->asdu;
   \   00000E   12....       LCALL   ?Subroutine72 & 0xFFFF
   3108          
   3109            status = *msg++;
   \                     ??CrossCallReturnLabel_480:
   \   000011   F5..         MOV     ?V7,A
   \   000013   A3           INC     DPTR
   \   000014   AE82         MOV     R6,DPL
   \   000016   AF83         MOV     R7,DPH
   3110            if ( status == ZSuccess )
   \   000018   700C         JNZ     ??ZDO_ParseMgmtBindRsp_0
   3111            {
   3112              bindingCount = *msg++;
   \   00001A   12....       LCALL   ?Subroutine74 & 0xFFFF
   3113              startIndex = *msg++;
   3114              bindingListCount = *msg++;
   3115            }
   \                     ??CrossCallReturnLabel_124:
   \   00001D   F5..         MOV     ?V6,A
   \   00001F   EE           MOV     A,R6
   \   000020   2403         ADD     A,#0x3
   \   000022   FE           MOV     R6,A
   \   000023   5001         JNC     ??ZDO_ParseMgmtBindRsp_0
   \   000025   0F           INC     R7
   3116          
   3117            // Allocate a buffer big enough to handle the list
   3118            pRsp = (ZDO_MgmtBindRsp_t *)osal_mem_alloc(
   3119                    (sizeof ( ZDO_MgmtBindRsp_t ) + (bindingListCount * sizeof( apsBindingItem_t ))) );
   \                     ??ZDO_ParseMgmtBindRsp_0:
   \   000026                ; Setup parameters for call to function osal_mem_alloc
   \   000026   E5..         MOV     A,?V6
   \   000028   75F015       MOV     B,#0x15
   \   00002B   12....       LCALL   ?Subroutine130 & 0xFFFF
   \                     ??CrossCallReturnLabel_225:
   \   00002E   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000031   8A..         MOV     ?V2,R2
   \   000033   8B..         MOV     ?V3,R3
   3120            if ( pRsp )
   \   000035   EA           MOV     A,R2
   \   000036   45..         ORL     A,?V3
   \   000038   6074         JZ      ??ZDO_ParseMgmtBindRsp_1
   3121            {
   3122              uint8 x;
   3123              apsBindingItem_t *pList = pRsp->list;
   \   00003A   12....       LCALL   ?Subroutine129 & 0xFFFF
   3124              pRsp->status = status;
   \                     ??CrossCallReturnLabel_222:
   \   00003D   E5..         MOV     A,?V7
   \   00003F   12....       LCALL   ?Subroutine14 & 0xFFFF
   3125              pRsp->bindingCount = bindingCount;
   3126              pRsp->startIndex = startIndex;
   3127              pRsp->bindingListCount = bindingListCount;
   \                     ??CrossCallReturnLabel_11:
   \   000042   E5..         MOV     A,?V6
   \   000044   F0           MOVX    @DPTR,A
   3128          
   3129              for ( x = 0; x < bindingListCount; x++ )
   \   000045   75..00       MOV     ?V4,#0x0
   \   000048   8015         SJMP    ??ZDO_ParseMgmtBindRsp_2
   3130              {
   3131                osal_cpyExtAddr( pList->srcAddr, msg );
   3132                msg += Z_EXTADDR_LEN;
   3133                pList->srcEP = *msg++;
   3134          
   3135                // Get the Cluster ID
   3136          
   3137                pList->clusterID = BUILD_UINT16( msg[0], msg[1] );
   3138                msg += 2;
   3139                pList->dstAddr.addrMode = *msg++;
   3140                if ( pList->dstAddr.addrMode == Addr64Bit )
   3141                {
   3142                  osal_cpyExtAddr( pList->dstAddr.addr.extAddr, msg );
   3143                  msg += Z_EXTADDR_LEN;
   3144                  pList->dstEP = *msg++;
   3145                }
   3146                else
   3147                {
   3148                  pList->dstAddr.addr.shortAddr = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseMgmtBindRsp_3:
   \   00004A   12....       LCALL   ?Subroutine65 & 0xFFFF
   3149                  msg += 2;
   3150                }
   \                     ??CrossCallReturnLabel_107:
   \   00004D   12....       LCALL   ??Subroutine216_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_427:
   \   000050   5001         JNC     ??ZDO_ParseMgmtBindRsp_4
   \   000052   0F           INC     R7
   3151          
   3152                pList++;
   \                     ??ZDO_ParseMgmtBindRsp_4:
   \   000053   E5..         MOV     A,?V0
   \   000055   2415         ADD     A,#0x15
   \   000057   F5..         MOV     ?V0,A
   \   000059   5002         JNC     ??ZDO_ParseMgmtBindRsp_5
   \   00005B   05..         INC     ?V1
   \                     ??ZDO_ParseMgmtBindRsp_5:
   \   00005D   05..         INC     ?V4
   \                     ??ZDO_ParseMgmtBindRsp_2:
   \   00005F   E5..         MOV     A,?V4
   \   000061   C3           CLR     C
   \   000062   95..         SUBB    A,?V6
   \   000064   5048         JNC     ??ZDO_ParseMgmtBindRsp_1
   \   000066                ; Setup parameters for call to function sAddrExtCpy
   \   000066   EE           MOV     A,R6
   \   000067   FC           MOV     R4,A
   \   000068   EF           MOV     A,R7
   \   000069   FD           MOV     R5,A
   \   00006A   AA..         MOV     R2,?V0
   \   00006C   AB..         MOV     R3,?V1
   \   00006E   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   000071   12....       LCALL   ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_489:
   \   000074   5001         JNC     ??ZDO_ParseMgmtBindRsp_6
   \   000076   0F           INC     R7
   \                     ??ZDO_ParseMgmtBindRsp_6:
   \   000077   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   00007A   5001         JNC     ??ZDO_ParseMgmtBindRsp_7
   \   00007C   0F           INC     R7
   \                     ??ZDO_ParseMgmtBindRsp_7:
   \   00007D   7403         MOV     A,#0x3
   \   00007F   68           XRL     A,R0
   \   000080   70C8         JNZ     ??ZDO_ParseMgmtBindRsp_3
   \   000082                ; Setup parameters for call to function sAddrExtCpy
   \   000082   EE           MOV     A,R6
   \   000083   FC           MOV     R4,A
   \   000084   EF           MOV     A,R7
   \   000085   FD           MOV     R5,A
   \   000086   E5..         MOV     A,?V0
   \   000088   240B         ADD     A,#0xb
   \   00008A   FA           MOV     R2,A
   \   00008B   E4           CLR     A
   \   00008C   35..         ADDC    A,?V1
   \   00008E   FB           MOV     R3,A
   \   00008F   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   000092   8E82         MOV     DPL,R6
   \   000094   8F83         MOV     DPH,R7
   \   000096   A3           INC     DPTR
   \   000097   A3           INC     DPTR
   \   000098   A3           INC     DPTR
   \   000099   A3           INC     DPTR
   \   00009A   A3           INC     DPTR
   \   00009B   A3           INC     DPTR
   \   00009C   A3           INC     DPTR
   \   00009D   A3           INC     DPTR
   \   00009E   E0           MOVX    A,@DPTR
   \   00009F   C0E0         PUSH    A
   \   0000A1   12....       LCALL   ?Subroutine117 & 0xFFFF
   3153              }
   3154            }
   \                     ??CrossCallReturnLabel_201:
   \   0000A4   D0E0         POP     A
   \   0000A6   12....       LCALL   ??Subroutine227_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_487:
   \   0000A9   50A8         JNC     ??ZDO_ParseMgmtBindRsp_4
   \   0000AB   0F           INC     R7
   \                     ??ZDO_ParseMgmtBindRsp_8:
   \   0000AC   80A5         SJMP    ??ZDO_ParseMgmtBindRsp_4
   3155          
   3156            return ( pRsp );
   \                     ??ZDO_ParseMgmtBindRsp_1:
   \   0000AE   02....       LJMP    ?Subroutine5 & 0xFFFF
   3157          }
   3158          
   3159          /*********************************************************************
   3160           * @fn          ZDO_ParseUserDescRsp
   3161           *
   3162           * @brief       This function parses the incoming User
   3163           *              Descriptor Response.
   3164           *
   3165           * @param       inMsg - incoming response message
   3166           *
   3167           * @return      a pointer to parsed response structure (NULL if not allocated).
   3168           *          This structure was allocated using osal_mem_alloc, so it must be freed
   3169           *          by the calling function [osal_mem_free()].
   3170           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3171          ZDO_UserDescRsp_t *ZDO_ParseUserDescRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseUserDescRsp:
   3172          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
   3173            ZDO_UserDescRsp_t *pRsp;
   3174            uint8 *msg;
   3175            uint8 descLen = 0;
   \   000005   75..00       MOV     ?V2,#0x0
   3176          
   3177            msg = inMsg->asdu;
   \   000008   12....       LCALL   ?Subroutine72 & 0xFFFF
   3178          
   3179            if ( msg[0] == ZSuccess )
   \                     ??CrossCallReturnLabel_481:
   \   00000B   7006         JNZ     ??ZDO_ParseUserDescRsp_0
   3180            {
   3181              descLen = msg[3];
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   F5..         MOV     ?V2,A
   3182            }
   3183          
   3184            pRsp = (ZDO_UserDescRsp_t *)osal_mem_alloc( sizeof ( ZDO_UserDescRsp_t ) + descLen );
   \                     ??ZDO_ParseUserDescRsp_0:
   \   000013                ; Setup parameters for call to function osal_mem_alloc
   \   000013   E5..         MOV     A,?V2
   \   000015   12....       LCALL   ??Subroutine225_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_474:
   \   000018   3400         ADDC    A,#0x0
   \   00001A   FB           MOV     R3,A
   \   00001B   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00001E   8A..         MOV     ?V0,R2
   \   000020   8B..         MOV     ?V1,R3
   3185            if ( pRsp )
   \   000022   EA           MOV     A,R2
   \   000023   45..         ORL     A,?V1
   \   000025   602D         JZ      ??ZDO_ParseUserDescRsp_1
   3186            {
   3187              pRsp->status = msg[0];
   \   000027   12....       LCALL   ?Subroutine86 & 0xFFFF
   3188              pRsp->nwkAddr = BUILD_UINT16( msg[1], msg[2] );
   \                     ??CrossCallReturnLabel_149:
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   FA           MOV     R2,A
   \   00002C   8E82         MOV     DPL,R6
   \   00002E   8F83         MOV     DPH,R7
   \   000030   A3           INC     DPTR
   \   000031   12....       LCALL   ?Subroutine24 & 0xFFFF
   3189              pRsp->length = descLen;
   3190              if ( descLen )
   \                     ??CrossCallReturnLabel_28:
   \   000034   601E         JZ      ??ZDO_ParseUserDescRsp_1
   3191              {
   3192                osal_memcpy( pRsp->desc, &msg[4], descLen );
   \   000036                ; Setup parameters for call to function osal_memcpy
   \   000036   EE           MOV     A,R6
   \   000037   2404         ADD     A,#0x4
   \   000039   F5..         MOV     ?V4,A
   \   00003B   E4           CLR     A
   \   00003C   3F           ADDC    A,R7
   \   00003D   F5..         MOV     ?V5,A
   \   00003F   88..         MOV     ?V6,R0
   \   000041   78..         MOV     R0,#?V4
   \   000043   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000046   12....       LCALL   ?Subroutine174 & 0xFFFF
   3193              }
   3194            }
   \                     ??CrossCallReturnLabel_477:
   \   000049   35..         ADDC    A,?V1
   \   00004B   FB           MOV     R3,A
   \   00004C   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00004F   7403         MOV     A,#0x3
   \   000051   12....       LCALL   ?DEALLOC_XSTACK8
   3195          
   3196            return ( pRsp );
   \                     ??ZDO_ParseUserDescRsp_1:
   \   000054   02....       LJMP    ?Subroutine6 & 0xFFFF
   3197          }
   3198          
   3199          /*********************************************************************
   3200           * @fn          ZDO_ParseSimpleDescBuf
   3201           *
   3202           * @brief       Parse a byte sequence representation of a Simple Descriptor.
   3203           *
   3204           * @param       buf  - pointer to a byte array representing a Simple Desc.
   3205           * @param       desc - SimpleDescriptionFormat_t *
   3206           *
   3207           *              This routine allocates storage for the cluster IDs because
   3208           *              they are 16-bit and need to be aligned to be properly processed.
   3209           *              This routine returns non-zero if an allocation fails.
   3210           *
   3211           *              NOTE: This means that the caller or user of the input structure
   3212           *                    is responsible for freeing the memory
   3213           *
   3214           * @return      0: success
   3215           *              1: failure due to malloc failure.
   3216           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3217          uint8 ZDO_ParseSimpleDescBuf( uint8 *buf, SimpleDescriptionFormat_t *desc )
   \                     ZDO_ParseSimpleDescBuf:
   3218          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   8C..         MOV     ?V0,R4
   \   00000B   8D..         MOV     ?V1,R5
   3219            uint8 num, i;
   3220          
   3221            desc->EndPoint = *buf++;
   \   00000D   8E82         MOV     DPL,R6
   \   00000F   8F83         MOV     DPH,R7
   \   000011   12....       LCALL   ??Subroutine230_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_505:
   \   000014   12....       LCALL   ?Subroutine19 & 0xFFFF
   3222            desc->AppProfId = BUILD_UINT16( buf[0], buf[1] );
   \                     ??CrossCallReturnLabel_20:
   \   000017   E0           MOVX    A,@DPTR
   \   000018   12....       LCALL   ?Subroutine79 & 0xFFFF
   \                     ??CrossCallReturnLabel_509:
   \   00001B   12....       LCALL   ?Subroutine17 & 0xFFFF
   3223            buf += 2;
   \                     ??CrossCallReturnLabel_426:
   \   00001E   5001         JNC     ??ZDO_ParseSimpleDescBuf_0
   \   000020   0F           INC     R7
   3224            desc->AppDeviceId = BUILD_UINT16( buf[0], buf[1] );
   \                     ??ZDO_ParseSimpleDescBuf_0:
   \   000021   12....       LCALL   ?Subroutine77 & 0xFFFF
   \                     ??CrossCallReturnLabel_134:
   \   000024   12....       LCALL   ?Subroutine18 & 0xFFFF
   3225            buf += 2;
   3226            desc->AppDevVer = *buf >> 4;
   \                     ??CrossCallReturnLabel_456:
   \   000027   C4           SWAP    A
   \   000028   540F         ANL     A,#0xf
   3227          
   3228            desc->Reserved = 0;
   \   00002A   8C82         MOV     DPL,R4
   \   00002C   8D83         MOV     DPH,R5
   \   00002E   A3           INC     DPTR
   \   00002F   A3           INC     DPTR
   \   000030   A3           INC     DPTR
   \   000031   A3           INC     DPTR
   \   000032   A3           INC     DPTR
   \   000033   12....       LCALL   ?Subroutine25 & 0xFFFF
   3229            buf++;
   3230          
   3231            // move in input cluster list (if any). allocate aligned memory.
   3232            num = desc->AppNumInClusters = *buf++;
   \                     ??CrossCallReturnLabel_31:
   \   000036   F5..         MOV     ?V4,A
   \   000038   EE           MOV     A,R6
   \   000039   2404         ADD     A,#0x4
   \   00003B   FE           MOV     R6,A
   \   00003C   5001         JNC     ??ZDO_ParseSimpleDescBuf_1
   \   00003E   0F           INC     R7
   \                     ??ZDO_ParseSimpleDescBuf_1:
   \   00003F   8C82         MOV     DPL,R4
   \   000041   8D83         MOV     DPH,R5
   \   000043   A3           INC     DPTR
   \   000044   A3           INC     DPTR
   \   000045   A3           INC     DPTR
   \   000046   A3           INC     DPTR
   \   000047   A3           INC     DPTR
   \   000048   A3           INC     DPTR
   \   000049   E5..         MOV     A,?V4
   \   00004B   F0           MOVX    @DPTR,A
   3233            if ( num )
   \   00004C   6036         JZ      ??ZDO_ParseSimpleDescBuf_2
   3234            {
   3235              if (!(desc->pAppInClusterList = (uint16 *)osal_mem_alloc(num*sizeof(uint16))))
   \   00004E                ; Setup parameters for call to function osal_mem_alloc
   \   00004E   12....       LCALL   ??Subroutine229_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_499:
   \   000051   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000054   8A..         MOV     ?V2,R2
   \   000056   8B..         MOV     ?V3,R3
   \   000058   A8..         MOV     R0,?V2
   \   00005A   A9..         MOV     R1,?V3
   \   00005C   E5..         MOV     A,?V0
   \   00005E   2407         ADD     A,#0x7
   \   000060   F5..         MOV     ?V2,A
   \   000062   E4           CLR     A
   \   000063   35..         ADDC    A,?V1
   \   000065   85..82       MOV     DPL,?V2
   \   000068   12....       LCALL   ??Subroutine214_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_422:
   \   00006B   7003         JNZ     $+5
   \   00006D   02....       LJMP    ??ZDO_ParseSimpleDescBuf_3 & 0xFFFF
   3236              {
   3237                // malloc failed. we're done.
   3238                return 1;
   3239              }
   3240              for (i=0; i<num; ++i)
   \   000070   7A00         MOV     R2,#0x0
   \   000072   800A         SJMP    ??ZDO_ParseSimpleDescBuf_4
   3241              {
   3242                desc->pAppInClusterList[i] = BUILD_UINT16( buf[0], buf[1] );
   \                     ??ZDO_ParseSimpleDescBuf_5:
   \   000074   12....       LCALL   ?Subroutine54 & 0xFFFF
   3243                buf += 2;
   3244              }
   \                     ??CrossCallReturnLabel_88:
   \   000077   12....       LCALL   ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_75:
   \   00007A   5001         JNC     ??ZDO_ParseSimpleDescBuf_6
   \   00007C   0F           INC     R7
   \                     ??ZDO_ParseSimpleDescBuf_6:
   \   00007D   0A           INC     R2
   \                     ??ZDO_ParseSimpleDescBuf_4:
   \   00007E   EA           MOV     A,R2
   \   00007F   C3           CLR     C
   \   000080   95..         SUBB    A,?V4
   \   000082   40F0         JC      ??ZDO_ParseSimpleDescBuf_5
   3245            }
   3246          
   3247            // move in output cluster list (if any). allocate aligned memory.
   3248            num = desc->AppNumOutClusters = *buf++;
   \                     ??ZDO_ParseSimpleDescBuf_2:
   \   000084   8E82         MOV     DPL,R6
   \   000086   8F83         MOV     DPH,R7
   \   000088   E0           MOVX    A,@DPTR
   \   000089   F5..         MOV     ?V2,A
   \   00008B   A3           INC     DPTR
   \   00008C   AE82         MOV     R6,DPL
   \   00008E   AF83         MOV     R7,DPH
   \   000090   85..82       MOV     DPL,?V0
   \   000093   85..83       MOV     DPH,?V1
   \   000096   A3           INC     DPTR
   \   000097   A3           INC     DPTR
   \   000098   A3           INC     DPTR
   \   000099   A3           INC     DPTR
   \   00009A   A3           INC     DPTR
   \   00009B   A3           INC     DPTR
   \   00009C   A3           INC     DPTR
   \   00009D   A3           INC     DPTR
   \   00009E   A3           INC     DPTR
   \   00009F   F0           MOVX    @DPTR,A
   3249            if (num)
   \   0000A0   6070         JZ      ??ZDO_ParseSimpleDescBuf_7
   3250            {
   3251              if (!(desc->pAppOutClusterList = (uint16 *)osal_mem_alloc(num*sizeof(uint16))))
   \   0000A2                ; Setup parameters for call to function osal_mem_alloc
   \   0000A2   12....       LCALL   ??Subroutine229_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_500:
   \   0000A5   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   0000A8   8A..         MOV     ?V4,R2
   \   0000AA   8B..         MOV     ?V5,R3
   \   0000AC   A8..         MOV     R0,?V4
   \   0000AE   A9..         MOV     R1,?V5
   \   0000B0   85..82       MOV     DPL,?V0
   \   0000B3   85..83       MOV     DPH,?V1
   \   0000B6   A3           INC     DPTR
   \   0000B7   A3           INC     DPTR
   \   0000B8   A3           INC     DPTR
   \   0000B9   A3           INC     DPTR
   \   0000BA   A3           INC     DPTR
   \   0000BB   A3           INC     DPTR
   \   0000BC   A3           INC     DPTR
   \   0000BD   A3           INC     DPTR
   \   0000BE   A3           INC     DPTR
   \   0000BF   A3           INC     DPTR
   \   0000C0   12....       LCALL   ??Subroutine215_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_421:
   \   0000C3   7036         JNZ     ??ZDO_ParseSimpleDescBuf_8
   3252              {
   3253                // malloc failed. free input cluster list memory if there is any
   3254                if ( desc->pAppInClusterList != NULL )
   \   0000C5   85..82       MOV     DPL,?V0
   \   0000C8   85..83       MOV     DPH,?V1
   \   0000CB   A3           INC     DPTR
   \   0000CC   A3           INC     DPTR
   \   0000CD   A3           INC     DPTR
   \   0000CE   A3           INC     DPTR
   \   0000CF   A3           INC     DPTR
   \   0000D0   A3           INC     DPTR
   \   0000D1   A3           INC     DPTR
   \   0000D2   12....       LCALL   ??Subroutine235_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_553:
   \   0000D5   6020         JZ      ??ZDO_ParseSimpleDescBuf_3
   3255                {
   3256                  osal_mem_free(desc->pAppInClusterList);
   \   0000D7   E5..         MOV     A,?V0
   \   0000D9   2407         ADD     A,#0x7
   \   0000DB   F5..         MOV     ?V2,A
   \   0000DD   E4           CLR     A
   \   0000DE   35..         ADDC    A,?V1
   \   0000E0   F5..         MOV     ?V3,A
   \   0000E2                ; Setup parameters for call to function osal_mem_free
   \   0000E2   85..82       MOV     DPL,?V2
   \   0000E5   F583         MOV     DPH,A
   \   0000E7   12....       LCALL   ??Subroutine233_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_525:
   \   0000EA   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   3257          
   3258                  desc->pAppInClusterList = NULL;
   \   0000ED   85..82       MOV     DPL,?V2
   \   0000F0   85..83       MOV     DPH,?V3
   \   0000F3   E4           CLR     A
   \   0000F4   F0           MOVX    @DPTR,A
   \   0000F5   A3           INC     DPTR
   \   0000F6   F0           MOVX    @DPTR,A
   3259                }
   3260                return 1;
   \                     ??ZDO_ParseSimpleDescBuf_3:
   \   0000F7   7901         MOV     R1,#0x1
   \   0000F9   8019         SJMP    ??ZDO_ParseSimpleDescBuf_9
   3261              }
   3262              for (i=0; i<num; ++i)
   \                     ??ZDO_ParseSimpleDescBuf_8:
   \   0000FB   7A00         MOV     R2,#0x0
   \   0000FD   800D         SJMP    ??ZDO_ParseSimpleDescBuf_10
   3263              {
   3264                desc->pAppOutClusterList[i] = BUILD_UINT16( buf[0], buf[1] );
   \                     ??ZDO_ParseSimpleDescBuf_11:
   \   0000FF   12....       LCALL   ?Subroutine54 & 0xFFFF
   3265                buf += 2;
   3266              }
   \                     ??CrossCallReturnLabel_89:
   \   000102   A3           INC     DPTR
   \   000103   A3           INC     DPTR
   \   000104   A3           INC     DPTR
   \   000105   12....       LCALL   ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_76:
   \   000108   5001         JNC     ??ZDO_ParseSimpleDescBuf_12
   \   00010A   0F           INC     R7
   \                     ??ZDO_ParseSimpleDescBuf_12:
   \   00010B   0A           INC     R2
   \                     ??ZDO_ParseSimpleDescBuf_10:
   \   00010C   EA           MOV     A,R2
   \   00010D   C3           CLR     C
   \   00010E   95..         SUBB    A,?V2
   \   000110   40ED         JC      ??ZDO_ParseSimpleDescBuf_11
   3267            }
   3268            return 0;
   \                     ??ZDO_ParseSimpleDescBuf_7:
   \   000112   7900         MOV     R1,#0x0
   \                     ??ZDO_ParseSimpleDescBuf_9:
   \   000114   02....       LJMP    ??Subroutine218_0 & 0xFFFF
   3269          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine79:
   \   000000   FA           MOV     R2,A
   \   000001                REQUIRE ??Subroutine231_0
   \   000001                ; // Fall through to label ??Subroutine231_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine54:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004   E0           MOVX    A,@DPTR
   \   000005   FC           MOV     R4,A
   \   000006   12....       LCALL   ?Subroutine154 & 0xFFFF
   \                     ??CrossCallReturnLabel_265:
   \   000009   EC           MOV     A,R4
   \   00000A   28           ADD     A,R0
   \   00000B   E4           CLR     A
   \   00000C   39           ADDC    A,R1
   \   00000D   FD           MOV     R5,A
   \   00000E   EA           MOV     A,R2
   \   00000F   25E0         ADD     A,0xE0 /* A   */
   \   000011   F8           MOV     R0,A
   \   000012   E4           CLR     A
   \   000013   33           RLC     A
   \   000014   F9           MOV     R1,A
   \   000015   85..82       MOV     DPL,?V0
   \   000018   85..83       MOV     DPH,?V1
   \   00001B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine47:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   E0           MOVX    A,@DPTR
   \   000008   28           ADD     A,R0
   \   000009   FB           MOV     R3,A
   \   00000A   A3           INC     DPTR
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   39           ADDC    A,R1
   \   00000D   8B82         MOV     DPL,R3
   \   00000F   F583         MOV     DPH,A
   \   000011   EC           MOV     A,R4
   \   000012   F0           MOVX    @DPTR,A
   \   000013   A3           INC     DPTR
   \   000014   ED           MOV     A,R5
   \   000015   F0           MOVX    @DPTR,A
   \   000016   EE           MOV     A,R6
   \   000017   2402         ADD     A,#0x2
   \   000019   FE           MOV     R6,A
   \   00001A   22           RET
   3270          
   3271          /*********************************************************************
   3272           * @fn          ZDO_ParseDeviceAnnce
   3273           *
   3274           * @brief       Parse a Device Announce message.
   3275           *
   3276           * @param       inMsg - Incoming message
   3277           * @param       pAnnce - place to put the parsed information
   3278           *
   3279           * @return      none
   3280           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3281          void ZDO_ParseDeviceAnnce( zdoIncomingMsg_t *inMsg, ZDO_DeviceAnnce_t *pAnnce )
   \                     ZDO_ParseDeviceAnnce:
   3282          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   8C..         MOV     ?V0,R4
   \   000007   8D..         MOV     ?V1,R5
   3283            uint8 *msg;
   3284          
   3285            // Parse incoming message
   3286            msg = inMsg->asdu;
   \   000009   12....       LCALL   ?Subroutine72 & 0xFFFF
   3287            pAnnce->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   \                     ??CrossCallReturnLabel_482:
   \   00000C   12....       LCALL   ?Subroutine79 & 0xFFFF
   \                     ??CrossCallReturnLabel_510:
   \   00000F   12....       LCALL   ??Subroutine216_0 & 0xFFFF
   3288            msg += 2;
   \                     ??CrossCallReturnLabel_428:
   \   000012   5001         JNC     ??ZDO_ParseDeviceAnnce_0
   \   000014   0F           INC     R7
   3289            osal_cpyExtAddr( pAnnce->extAddr, msg );
   \                     ??ZDO_ParseDeviceAnnce_0:
   \   000015                ; Setup parameters for call to function sAddrExtCpy
   \   000015   FC           MOV     R4,A
   \   000016   EF           MOV     A,R7
   \   000017   FD           MOV     R5,A
   \   000018   E5..         MOV     A,?V0
   \   00001A   2402         ADD     A,#0x2
   \   00001C   FA           MOV     R2,A
   \   00001D   E4           CLR     A
   \   00001E   35..         ADDC    A,?V1
   \   000020   FB           MOV     R3,A
   \   000021   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   3290            msg += Z_EXTADDR_LEN;
   3291            pAnnce->capabilities = *msg;
   \   000024   8E82         MOV     DPL,R6
   \   000026   8F83         MOV     DPH,R7
   \   000028   A3           INC     DPTR
   \   000029   A3           INC     DPTR
   \   00002A   A3           INC     DPTR
   \   00002B   12....       LCALL   ?Subroutine78 & 0xFFFF
   \                     ??CrossCallReturnLabel_135:
   \   00002E   A3           INC     DPTR
   \   00002F   A3           INC     DPTR
   \   000030   A3           INC     DPTR
   \   000031   A3           INC     DPTR
   \   000032   F0           MOVX    @DPTR,A
   3292          }
   \   000033   02....       LJMP    ??Subroutine187_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine78:
   \   000000   12....       LCALL   ?Subroutine147 & 0xFFFF
   \                     ??CrossCallReturnLabel_254:
   \   000003   22           RET
   3293          
   3294          /*********************************************************************
   3295           * @fn          ZDO_ParseMgmtNwkUpdateNotify
   3296           *
   3297           * @brief       This function handles parsing of the incoming Management
   3298           *              Network Update notify.
   3299           *
   3300           * @param       inMsg - incoming message (request)
   3301           *
   3302           * @return      a pointer to parsed response structure (NULL if not allocated).
   3303           *          This structure was allocated using osal_mem_alloc, so it must be freed
   3304           *          by the calling function [osal_mem_free()].
   3305           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine42:
   \   000000   12....       LCALL   ?Subroutine153 & 0xFFFF
   \                     ??CrossCallReturnLabel_261:
   \   000003                REQUIRE ??Subroutine202_0
   \   000003                ; // Fall through to label ??Subroutine202_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3306          ZDO_MgmtNwkUpdateNotify_t *ZDO_ParseMgmtNwkUpdateNotify( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseMgmtNwkUpdateNotify:
   3307          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 6
   \   000005   74FA         MOV     A,#-0x6
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   3308            uint8 status;
   3309            uint32 scannedChannels = 0;
   \   00000A   75..00       MOV     ?V0,#0x0
   \   00000D   75..00       MOV     ?V1,#0x0
   \   000010   75..00       MOV     ?V2,#0x0
   \   000013   75..00       MOV     ?V3,#0x0
   3310            uint16 totalTransmissions = 0;
   \   000016   75..00       MOV     ?V4,#0x0
   \   000019   75..00       MOV     ?V5,#0x0
   3311            uint16 transmissionFailures = 0;
   \   00001C   7E00         MOV     R6,#0x0
   \   00001E   7F00         MOV     R7,#0x0
   3312            uint8 listCount = 0;
   \   000020   7402         MOV     A,#0x2
   \   000022   12....       LCALL   ?XSTACK_DISP0_8
   \   000025   E4           CLR     A
   \   000026   12....       LCALL   ?Subroutine37 & 0xFFFF
   3313            uint8 *msg = inMsg->asdu;
   \                     ??CrossCallReturnLabel_59:
   \   000029   F8           MOV     R0,A
   \   00002A   A3           INC     DPTR
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   F9           MOV     R1,A
   \   00002D   85..82       MOV     DPL,?XSP + 0
   \   000030   85..83       MOV     DPH,?XSP + 1
   \   000033   12....       LCALL   ?Subroutine32 & 0xFFFF
   3314            ZDO_MgmtNwkUpdateNotify_t *pRsp;
   3315          
   3316            status = *msg++;
   \                     ??CrossCallReturnLabel_46:
   \   000036   12....       LCALL   ??Subroutine209_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_397:
   \   000039   C0E0         PUSH    A
   \   00003B   7405         MOV     A,#0x5
   \   00003D   12....       LCALL   ?XSTACK_DISP0_8
   \   000040   D0E0         POP     A
   \   000042   12....       LCALL   ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_50:
   \   000045   2401         ADD     A,#0x1
   \   000047   12....       LCALL   ?Subroutine42 & 0xFFFF
   3317            if ( status == ZSuccess )
   \                     ??CrossCallReturnLabel_381:
   \   00004A   7405         MOV     A,#0x5
   \   00004C   12....       LCALL   ?XSTACK_DISP0_8
   \   00004F   E0           MOVX    A,@DPTR
   \   000050   704F         JNZ     ??CrossCallReturnLabel_382
   3318            {
   3319              scannedChannels = osal_build_uint32( msg, 4 );
   \   000052                ; Setup parameters for call to function osal_build_uint32
   \   000052   7904         MOV     R1,#0x4
   \   000054   12....       LCALL   ??Subroutine232_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_530:
   \   000057   12....       LCALL   `??osal_build_uint32::?relay`; Banked call to: osal_build_uint32
   \   00005A   8A..         MOV     ?V0,R2
   \   00005C   8B..         MOV     ?V1,R3
   \   00005E   8C..         MOV     ?V2,R4
   \   000060   8D..         MOV     ?V3,R5
   3320              msg += 4;
   \   000062   85..82       MOV     DPL,?XSP + 0
   \   000065   85..83       MOV     DPH,?XSP + 1
   \   000068   E0           MOVX    A,@DPTR
   \   000069   2404         ADD     A,#0x4
   \   00006B   12....       LCALL   ?Subroutine9 & 0xFFFF
   3321              totalTransmissions = BUILD_UINT16( msg[0], msg[1] );
   \                     ??CrossCallReturnLabel_0:
   \   00006E   F5..         MOV     ?V4,A
   \   000070   E4           CLR     A
   \   000071   39           ADDC    A,R1
   \   000072   F5..         MOV     ?V5,A
   3322              msg += 2;
   \   000074   85..82       MOV     DPL,?XSP + 0
   \   000077   85..83       MOV     DPH,?XSP + 1
   \   00007A   E0           MOVX    A,@DPTR
   \   00007B   2402         ADD     A,#0x2
   \   00007D   12....       LCALL   ?Subroutine9 & 0xFFFF
   3323              transmissionFailures = BUILD_UINT16( msg[0], msg[1] );
   \                     ??CrossCallReturnLabel_1:
   \   000080   FE           MOV     R6,A
   \   000081   E4           CLR     A
   \   000082   39           ADDC    A,R1
   \   000083   FF           MOV     R7,A
   3324              msg += 2;
   3325              listCount = *msg++;
   \   000084   85..82       MOV     DPL,?XSP + 0
   \   000087   85..83       MOV     DPH,?XSP + 1
   \   00008A   12....       LCALL   ?Subroutine87 & 0xFFFF
   3326            }
   \                     ??CrossCallReturnLabel_152:
   \   00008D   A3           INC     DPTR
   \   00008E   A3           INC     DPTR
   \   00008F   E0           MOVX    A,@DPTR
   \   000090   C0E0         PUSH    A
   \   000092   7402         MOV     A,#0x2
   \   000094   12....       LCALL   ?XSTACK_DISP0_8
   \   000097   D0E0         POP     A
   \   000099   12....       LCALL   ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_51:
   \   00009C   2403         ADD     A,#0x3
   \   00009E   12....       LCALL   ?Subroutine42 & 0xFFFF
   3327          
   3328            pRsp = (ZDO_MgmtNwkUpdateNotify_t *)osal_mem_alloc( sizeof ( ZDO_MgmtNwkUpdateNotify_t ) + listCount );
   \                     ??CrossCallReturnLabel_382:
   \   0000A1                ; Setup parameters for call to function osal_mem_alloc
   \   0000A1   7402         MOV     A,#0x2
   \   0000A3   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A6   E0           MOVX    A,@DPTR
   \   0000A7   240A         ADD     A,#0xa
   \   0000A9   FA           MOV     R2,A
   \   0000AA   E4           CLR     A
   \   0000AB   3400         ADDC    A,#0x0
   \   0000AD   FB           MOV     R3,A
   \   0000AE   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   0000B1   7403         MOV     A,#0x3
   \   0000B3   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B6   12....       LCALL   ?Subroutine22 & 0xFFFF
   3329          
   3330            if ( pRsp )
   \                     ??CrossCallReturnLabel_337:
   \   0000B9   7403         MOV     A,#0x3
   \   0000BB   12....       LCALL   ?XSTACK_DISP0_8
   \   0000BE   12....       LCALL   ??Subroutine235_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_554:
   \   0000C1   7003         JNZ     $+5
   \   0000C3   02....       LJMP    ??ZDO_ParseMgmtNwkUpdateNotify_0 & 0xFFFF
   3331            {
   3332              pRsp->status = status;
   \   0000C6   7405         MOV     A,#0x5
   \   0000C8   12....       LCALL   ?XSTACK_DISP0_8
   \   0000CB   E0           MOVX    A,@DPTR
   \   0000CC   C0E0         PUSH    A
   \   0000CE   7403         MOV     A,#0x3
   \   0000D0   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D3   12....       LCALL   ?Subroutine87 & 0xFFFF
   \                     ??CrossCallReturnLabel_153:
   \   0000D6   D0E0         POP     A
   \   0000D8   F0           MOVX    @DPTR,A
   3333              pRsp->scannedChannels = scannedChannels;
   \   0000D9   7403         MOV     A,#0x3
   \   0000DB   12....       LCALL   ?XSTACK_DISP0_8
   \   0000DE   12....       LCALL   ?Subroutine70 & 0xFFFF
   \                     ??CrossCallReturnLabel_118:
   \   0000E1   A3           INC     DPTR
   \   0000E2   78..         MOV     R0,#?V0
   \   0000E4   12....       LCALL   ?L_MOV_TO_X
   3334              pRsp->totalTransmissions = totalTransmissions;
   \   0000E7   7403         MOV     A,#0x3
   \   0000E9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000EC   12....       LCALL   ?Subroutine58 & 0xFFFF
   \                     ??CrossCallReturnLabel_96:
   \   0000EF   A3           INC     DPTR
   \   0000F0   E5..         MOV     A,?V4
   \   0000F2   F0           MOVX    @DPTR,A
   \   0000F3   A3           INC     DPTR
   \   0000F4   E5..         MOV     A,?V5
   \   0000F6   F0           MOVX    @DPTR,A
   3335              pRsp->transmissionFailures = transmissionFailures;
   \   0000F7   7403         MOV     A,#0x3
   \   0000F9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000FC   12....       LCALL   ?Subroutine76 & 0xFFFF
   \                     ??CrossCallReturnLabel_132:
   \   0000FF   12....       LCALL   ?Subroutine114 & 0xFFFF
   \                     ??CrossCallReturnLabel_191:
   \   000102   EE           MOV     A,R6
   \   000103   F0           MOVX    @DPTR,A
   \   000104   A3           INC     DPTR
   \   000105   EF           MOV     A,R7
   \   000106   F0           MOVX    @DPTR,A
   3336              pRsp->listCount = listCount;
   \   000107   7402         MOV     A,#0x2
   \   000109   12....       LCALL   ?XSTACK_DISP0_8
   \   00010C   E0           MOVX    A,@DPTR
   \   00010D   C0E0         PUSH    A
   \   00010F   7403         MOV     A,#0x3
   \   000111   12....       LCALL   ?XSTACK_DISP0_8
   \   000114   12....       LCALL   ?Subroutine75 & 0xFFFF
   \                     ??CrossCallReturnLabel_126:
   \   000117   D0E0         POP     A
   \   000119   F0           MOVX    @DPTR,A
   3337          
   3338              // Allocate a buffer big enough to handle the list.
   3339              if ( listCount > 0 )
   \   00011A   7402         MOV     A,#0x2
   \   00011C   12....       LCALL   ?XSTACK_DISP0_8
   \   00011F   E0           MOVX    A,@DPTR
   \   000120   602B         JZ      ??ZDO_ParseMgmtNwkUpdateNotify_0
   3340              {
   3341                osal_memcpy( pRsp->energyValues, msg, listCount );
   \   000122                ; Setup parameters for call to function osal_memcpy
   \   000122   85..82       MOV     DPL,?XSP + 0
   \   000125   85..83       MOV     DPH,?XSP + 1
   \   000128   12....       LCALL   ?Subroutine59 & 0xFFFF
   3342              }
   3343            }
   \                     ??CrossCallReturnLabel_99:
   \   00012B   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00012E   7405         MOV     A,#0x5
   \   000130   12....       LCALL   ?XSTACK_DISP0_8
   \   000133   E0           MOVX    A,@DPTR
   \   000134   FC           MOV     R4,A
   \   000135   7D00         MOV     R5,#0x0
   \   000137   7406         MOV     A,#0x6
   \   000139   12....       LCALL   ?XSTACK_DISP0_8
   \   00013C   E0           MOVX    A,@DPTR
   \   00013D   240A         ADD     A,#0xa
   \   00013F   FA           MOV     R2,A
   \   000140   A3           INC     DPTR
   \   000141   E0           MOVX    A,@DPTR
   \   000142   3400         ADDC    A,#0x0
   \   000144   FB           MOV     R3,A
   \   000145   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000148   7403         MOV     A,#0x3
   \   00014A   12....       LCALL   ?DEALLOC_XSTACK8
   3344          
   3345            return ( pRsp );
   \                     ??ZDO_ParseMgmtNwkUpdateNotify_0:
   \   00014D   7403         MOV     A,#0x3
   \   00014F   12....       LCALL   ?XSTACK_DISP0_8
   \   000152   12....       LCALL   ??Subroutine233_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_526:
   \   000155   7406         MOV     A,#0x6
   \   000157   02....       LJMP    ?Subroutine4 & 0xFFFF
   3346          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   12....       LCALL   ?Subroutine153 & 0xFFFF
   \                     ??CrossCallReturnLabel_260:
   \   000003   12....       LCALL   ?Subroutine131 & 0xFFFF
   \                     ??CrossCallReturnLabel_563:
   \   000006   12....       LCALL   ?Subroutine151 & 0xFFFF
   \                     ??CrossCallReturnLabel_410:
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   FA           MOV     R2,A
   \   00000B   85..82       MOV     DPL,?XSP + 0
   \   00000E   85..83       MOV     DPH,?XSP + 1
   \   000011   12....       LCALL   ??Subroutine210_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_407:
   \   000014   A3           INC     DPTR
   \   000015   E0           MOVX    A,@DPTR
   \   000016   F9           MOV     R1,A
   \   000017   EA           MOV     A,R2
   \   000018   2E           ADD     A,R6
   \   000019   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine153:
   \   000000   F8           MOV     R0,A
   \   000001   A3           INC     DPTR
   \   000002   E0           MOVX    A,@DPTR
   \   000003   3400         ADDC    A,#0x0
   \   000005   F9           MOV     R1,A
   \   000006   85..82       MOV     DPL,?XSP + 0
   \   000009   85..83       MOV     DPH,?XSP + 1
   \   00000C   22           RET
   3347          
   3348          /*********************************************************************
   3349           * @fn          ZDO_ParseMgmtNwkUpdateReq
   3350           *
   3351           * @brief       This function handles parsing the incoming Management
   3352           *              Network Update request and starts the request (if needed).
   3353           *
   3354           * @param       inMsg - incoming message (request)
   3355           * @param       pReq - pointer to place to parse message to
   3356           *
   3357           * @return      none
   3358           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3359          void ZDO_ParseMgmtNwkUpdateReq( zdoIncomingMsg_t *inMsg, ZDO_MgmtNwkUpdateReq_t *pReq )
   \                     ZDO_ParseMgmtNwkUpdateReq:
   3360          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   8C..         MOV     ?V0,R4
   \   000007   8D..         MOV     ?V1,R5
   3361            uint8 *msg = inMsg->asdu;
   \   000009   12....       LCALL   ??Subroutine219_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_435:
   \   00000C   3B           ADDC    A,R3
   \   00000D   12....       LCALL   ?Subroutine80 & 0xFFFF
   3362          
   3363            pReq->channelMask = osal_build_uint32( msg, 4 );
   \                     ??CrossCallReturnLabel_138:
   \   000010   12....       LCALL   `??osal_build_uint32::?relay`; Banked call to: osal_build_uint32
   \   000013   EA           MOV     A,R2
   \   000014   F8           MOV     R0,A
   \   000015   EB           MOV     A,R3
   \   000016   F9           MOV     R1,A
   \   000017   EC           MOV     A,R4
   \   000018   FA           MOV     R2,A
   \   000019   ED           MOV     A,R5
   \   00001A   FB           MOV     R3,A
   \   00001B   85..82       MOV     DPL,?V0
   \   00001E   85..83       MOV     DPH,?V1
   \   000021   12....       LCALL   ?XSTORE_R0123
   3364            msg += 4;
   3365            pReq->scanDuration = *msg++;
   \   000024   8E82         MOV     DPL,R6
   \   000026   8F83         MOV     DPH,R7
   \   000028   A3           INC     DPTR
   \   000029   A3           INC     DPTR
   \   00002A   A3           INC     DPTR
   \   00002B   A3           INC     DPTR
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   F8           MOV     R0,A
   \   00002E   85..82       MOV     DPL,?V0
   \   000031   85..83       MOV     DPH,?V1
   \   000034   A3           INC     DPTR
   \   000035   A3           INC     DPTR
   \   000036   A3           INC     DPTR
   \   000037   A3           INC     DPTR
   \   000038   F0           MOVX    @DPTR,A
   3366          
   3367            if ( pReq->scanDuration <= 0x05 )
   \   000039   C3           CLR     C
   \   00003A   9406         SUBB    A,#0x6
   \   00003C   5009         JNC     ??ZDO_ParseMgmtNwkUpdateReq_0
   3368            {
   3369              // Request is to scan over channelMask
   3370              pReq->scanCount = *msg;
   \   00003E   8E82         MOV     DPL,R6
   \   000040   8F83         MOV     DPH,R7
   \   000042   12....       LCALL   ?Subroutine177 & 0xFFFF
   3371            }
   \                     ??CrossCallReturnLabel_301:
   \   000045   8040         SJMP    ??ZDO_ParseMgmtNwkUpdateReq_1
   3372            else if ( ( pReq->scanDuration == 0xFE ) || ( pReq->scanDuration == 0xFF ) )
   \                     ??ZDO_ParseMgmtNwkUpdateReq_0:
   \   000047   85..82       MOV     DPL,?V0
   \   00004A   85..83       MOV     DPH,?V1
   \   00004D   A3           INC     DPTR
   \   00004E   A3           INC     DPTR
   \   00004F   A3           INC     DPTR
   \   000050   A3           INC     DPTR
   \   000051   E0           MOVX    A,@DPTR
   \   000052   64FE         XRL     A,#0xfe
   \   000054   600E         JZ      ??ZDO_ParseMgmtNwkUpdateReq_2
   \   000056   85..82       MOV     DPL,?V0
   \   000059   85..83       MOV     DPH,?V1
   \   00005C   A3           INC     DPTR
   \   00005D   A3           INC     DPTR
   \   00005E   A3           INC     DPTR
   \   00005F   A3           INC     DPTR
   \   000060   E0           MOVX    A,@DPTR
   \   000061   F4           CPL     A
   \   000062   7024         JNZ     ??ZDO_ParseMgmtNwkUpdateReq_3
   3373            {
   3374              // Request is to change Channel (0xFE) or apsChannelMask and NwkManagerAddr (0xFF)
   3375              pReq->nwkUpdateId = *msg++;
   \                     ??ZDO_ParseMgmtNwkUpdateReq_2:
   \   000064   8E82         MOV     DPL,R6
   \   000066   8F83         MOV     DPH,R7
   \   000068   12....       LCALL   ?Subroutine78 & 0xFFFF
   \                     ??CrossCallReturnLabel_136:
   \   00006B   F0           MOVX    @DPTR,A
   \   00006C   EE           MOV     A,R6
   \   00006D   2406         ADD     A,#0x6
   \   00006F   FE           MOV     R6,A
   \   000070   5001         JNC     ??ZDO_ParseMgmtNwkUpdateReq_4
   \   000072   0F           INC     R7
   3376          
   3377              if ( pReq->scanDuration == 0xFF )
   \                     ??ZDO_ParseMgmtNwkUpdateReq_4:
   \   000073   85..82       MOV     DPL,?V0
   \   000076   85..83       MOV     DPH,?V1
   \   000079   A3           INC     DPTR
   \   00007A   A3           INC     DPTR
   \   00007B   A3           INC     DPTR
   \   00007C   A3           INC     DPTR
   \   00007D   E0           MOVX    A,@DPTR
   \   00007E   F4           CPL     A
   \   00007F   7007         JNZ     ??ZDO_ParseMgmtNwkUpdateReq_3
   3378              {
   3379                pReq->nwkManagerAddr = BUILD_UINT16( msg[0], msg[1] );
   \   000081   12....       LCALL   ?Subroutine66 & 0xFFFF
   3380              }
   3381            }
   \                     ??CrossCallReturnLabel_109:
   \   000084   F0           MOVX    @DPTR,A
   \   000085   A3           INC     DPTR
   \   000086   E9           MOV     A,R1
   \                     ??ZDO_ParseMgmtNwkUpdateReq_1:
   \   000087   F0           MOVX    @DPTR,A
   3382          }
   \                     ??ZDO_ParseMgmtNwkUpdateReq_3:
   \   000088   02....       LJMP    ??Subroutine187_0 & 0xFFFF
   3383          
   3384          /*********************************************************************
   3385           * @fn          ZDO_ParseEndDeviceTimeoutRsp
   3386           *
   3387           * @brief       Parse the End_Device_Timeout_rsp message.
   3388           *
   3389           * @param       inMsg - incoming message.
   3390           * @param       pRsp - place to put the parsed information.
   3391           *
   3392           * @return      none
   3393           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3394          void ZDO_ParseEndDeviceTimeoutRsp( zdoIncomingMsg_t *inMsg, uint16 *pRsp )
   \                     ZDO_ParseEndDeviceTimeoutRsp:
   3395          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3396            *pRsp = inMsg->asdu[0];
   \   000004   12....       LCALL   ?Subroutine100 & 0xFFFF
   \                     ??CrossCallReturnLabel_170:
   \   000007   12....       LCALL   ??Subroutine208_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_401:
   \   00000A   8C82         MOV     DPL,R4
   \   00000C   8D83         MOV     DPH,R5
   \   00000E   F0           MOVX    @DPTR,A
   \   00000F   A3           INC     DPTR
   \   000010   E4           CLR     A
   \   000011   F0           MOVX    @DPTR,A
   3397          }
   \   000012   02....       LJMP    ?Subroutine0 & 0xFFFF

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zdpExternalStateTaskID>`:
   \   000000   FFFF         DW -1

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_3e8:
   \   000000   E8030000     DD 1000

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_Init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_StartDevice::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_StartDevice

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zdoSendStateChangeMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zdoSendStateChangeMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_UpdateNwkStatus::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_UpdateNwkStatus

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_AnyClusterMatches::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_AnyClusterMatches

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessNodeDescReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessNodeDescReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessPowerDescReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessPowerDescReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessSimpleDescReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessSimpleDescReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessActiveEPReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessActiveEPReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ConvertOTAClusters::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ConvertOTAClusters

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessMatchDescReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMatchDescReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessBindUnbindReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessBindUnbindReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_UpdateAddrManager::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_UpdateAddrManager

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessServerDiscReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessServerDiscReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessEndDeviceTimeoutReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessEndDeviceTimeoutReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_EndDeviceTimeoutCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_EndDeviceTimeoutCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessMgmtLqiReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMgmtLqiReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessMgmtNwkDiscReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMgmtNwkDiscReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessMgmtRtgReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMgmtRtgReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessMgmtBindReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMgmtBindReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessMgmtDirectJoinReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMgmtDirectJoinReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessMgmtLeaveReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMgmtLeaveReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessMgmtPermitJoinReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMgmtPermitJoinReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??NLME_PermitJoiningTimeout::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    NLME_PermitJoiningTimeout

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessUserDescReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessUserDescReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessUserDescSet::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessUserDescSet

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessDeviceAnnce::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessDeviceAnnce

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_BuildSimpleDescBuf::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_BuildSimpleDescBuf

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseEndDeviceBindReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseEndDeviceBindReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseBindUnbindReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseBindUnbindReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseAddrRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseAddrRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseNodeDescRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseNodeDescRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParsePowerDescRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParsePowerDescRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseSimpleDescRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseSimpleDescRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseEPListRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseEPListRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseServerDiscRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseServerDiscRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseMgmtLqiRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseMgmtLqiRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseMgmNwkDiscRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseMgmNwkDiscRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseMgmtRtgRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseMgmtRtgRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseMgmtBindRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseMgmtBindRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseUserDescRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseUserDescRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseSimpleDescBuf::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseSimpleDescBuf

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseDeviceAnnce::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseDeviceAnnce

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseMgmtNwkUpdateNotify::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseMgmtNwkUpdateNotify

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseMgmtNwkUpdateReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseMgmtNwkUpdateReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseEndDeviceTimeoutRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseEndDeviceTimeoutRsp
   3398          
   3399          /*********************************************************************
   3400          *********************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0      0   NLME_PermitJoiningTimeout
      0     43   ZDO_AnyClusterMatches
      1     10   ZDO_BuildSimpleDescBuf
      0     39   ZDO_ConvertOTAClusters
      1     17   ZDO_EndDeviceTimeoutCB
        0     17   -> ZDP_SendData
        0     12   -> osal_mem_free
      2      0   ZDO_Init
        2      0   -> APS_ReflectorInit
        2      0   -> NLME_DeviceJoiningInit
        2      0   -> sAddrExtCpy
      1     14   ZDO_ParseAddrRsp
        0     14   -> osal_mem_alloc
        0     14   -> sAddrExtCpy
      1     10   ZDO_ParseBindUnbindReq
        0     10   -> sAddrExtCpy
      1     52   ZDO_ParseDeviceAnnce
        0     10   -> sAddrExtCpy
      1     18   ZDO_ParseEPListRsp
        0     15   -> osal_mem_alloc
        0     18   -> osal_memcpy
      1     12   ZDO_ParseEndDeviceBindReq
        0     12   -> ZDO_ConvertOTAClusters
        0     12   -> osal_mem_alloc
        0     12   -> sAddrExtCpy
      2      0   ZDO_ParseEndDeviceTimeoutRsp
      1     16   ZDO_ParseMgmNwkDiscRsp
        0     16   -> osal_mem_alloc
        0     16   -> sAddrExtCpy
      1     16   ZDO_ParseMgmtBindRsp
        0     16   -> osal_mem_alloc
        0     16   -> sAddrExtCpy
      1     16   ZDO_ParseMgmtLqiRsp
        0     16   -> osal_mem_alloc
        0     16   -> sAddrExtCpy
      1     23   ZDO_ParseMgmtNwkUpdateNotify
        0     20   -> osal_build_uint32
        0     20   -> osal_mem_alloc
        0     23   -> osal_memcpy
      1     10   ZDO_ParseMgmtNwkUpdateReq
        0     10   -> osal_build_uint32
      1     14   ZDO_ParseMgmtRtgRsp
        0     14   -> osal_mem_alloc
      2     12   ZDO_ParseNodeDescRsp
      1     12   ZDO_ParsePowerDescRsp
      1      9   ZDO_ParseServerDiscRsp
      1     23   ZDO_ParseSimpleDescBuf
        0     14   -> osal_mem_alloc
        0     14   -> osal_mem_free
      1      9   ZDO_ParseSimpleDescRsp
        0      9   -> ZDO_ParseSimpleDescBuf
      1     18   ZDO_ParseUserDescRsp
        0     15   -> osal_mem_alloc
        0     18   -> osal_memcpy
      0     21   ZDO_ProcessActiveEPReq
        0     14   -> NLME_GetShortAddr
        0     21   -> ZDP_EPRsp
        0     14   -> afEndPoints
        0     14   -> afNumEndPoints
      1     33   ZDO_ProcessBindUnbindReq
        0     29   -> APSME_BindRequest
        0     28   -> APSME_LookupNwkAddr
        0     29   -> APSME_UnBindRequest
        0     28   -> NLME_GetExtAddr
        0     28   -> ZDApp_GetEmptyPendingBindReq
        0     28   -> ZDApp_NVUpdate
        0     28   -> ZDP_NwkAddrReq
        0     33   -> ZDP_SendData
        0     28   -> bindAddrIndexGet
        0     31   -> osal_memcpy
        0     32   -> osal_start_timerEx
        0     28   -> sAddrExtCmp
        0     28   -> sAddrExtCpy
      0     42   ZDO_ProcessDeviceAnnce
        0     42   -> AddrMgrEntryLookupExt
        0     42   -> AddrMgrEntryLookupNwk
        0     42   -> AddrMgrEntryUpdate
        0     42   -> AddrMgrExtAddrSet
        0     42   -> NLME_CheckNewAddrSet
        0     42   -> NLME_GetCoordExtAddr
        0     42   -> NLME_GetCoordShortAddr
        0     42   -> NLME_GetExtAddr
        0     42   -> NLME_GetShortAddr
        0     42   -> RTG_RemoveRtgEntry
        0     42   -> ZDO_ParseDeviceAnnce
        0     42   -> ZMacSetReq
        0     42   -> nwkNeighborRemoveAllStranded
        0     42   -> nwkNeighborUpdateNwkAddr
        0     42   -> osal_memset
        0     42   -> sAddrExtCmp
      0     16   ZDO_ProcessEndDeviceTimeoutReq
        0     16   -> ZDP_SendData
      1     36   ZDO_ProcessMatchDescReq
        0     29   -> NLME_IsAddressBroadcast
        0     31   -> ZDO_AnyClusterMatches
        0     29   -> ZDO_ConvertOTAClusters
        0     36   -> ZDP_EPRsp
        0     29   -> osal_mem_alloc
        0     29   -> osal_mem_free
        0     32   -> osal_memcpy
        0     29   -> osal_msg_allocate
        0     29   -> osal_msg_send
      0     25   ZDO_ProcessMgmtBindReq
        0     20   -> APSME_GetRequest
        0     25   -> ZDP_MgmtBindRsp
        0     20   -> osal_mem_alloc
        0     20   -> osal_mem_free
      1     16   ZDO_ProcessMgmtDirectJoinReq
        0     11   -> NLME_DirectJoinRequest
        0     16   -> ZDP_SendData
      1     23   ZDO_ProcessMgmtLeaveReq
        0     18   -> AddrMgrExtAddrValid
        0     18   -> NLME_GetExtAddr
        0     18   -> NLME_LeaveReq
        0     18   -> NLME_SetPollRate
        0     23   -> ZDP_SendData
        0     18   -> sAddrExtCmp
      1     63   ZDO_ProcessMgmtLqiReq
        0     58   -> AddrMgrEntryLookupNwk
        0     58   -> AssocCount
        0     58   -> AssocFindDevice
        0     58   -> NLME_GetRequest
        0     63   -> ZDP_MgmtLqiRsp
        0     58   -> osal_mem_alloc
        0     58   -> osal_mem_free
        0     58   -> osal_memset
        0     58   -> sAddrExtCpy
      1     17   ZDO_ProcessMgmtNwkDiscReq
        0     17   -> NLME_NwkDiscReq2
        0     17   -> NLME_NwkDiscTerm
        0     17   -> osal_build_uint32
      1     16   ZDO_ProcessMgmtPermitJoinReq
        0     11   -> NLME_PermitJoiningRequest
        0     16   -> ZDP_SendData
      0     22   ZDO_ProcessMgmtRtgReq
        0     17   -> NLME_GetRequest
        0     22   -> ZDP_MgmtRtgRsp
        0     17   -> osal_mem_alloc
        0     17   -> osal_mem_free
      0     14   ZDO_ProcessNodeDescReq
        0     14   -> ZDP_GenericRsp
        0     12   -> ZDP_NodeDescMsg
      0     14   ZDO_ProcessPowerDescReq
        0     14   -> ZDP_GenericRsp
        0     12   -> ZDP_PowerDescMsg
      0     14   ZDO_ProcessServerDiscReq
        0     14   -> ZDP_ServerDiscRsp
      0     12   ZDO_ProcessSimpleDescReq
        0     12   -> ZDP_SimpleDescMsg
        0     12   -> afFindSimpleDesc
        0     12   -> osal_mem_free
      0     33   ZDO_ProcessUserDescReq
        0     33   -> ZDP_GenericRsp
        0     32   -> ZDP_UserDescRsp
        0     33   -> osal_nv_read
      1     40   ZDO_ProcessUserDescSet
        0     40   -> ZDP_SendData
        0     38   -> osal_memcpy
        0     39   -> osal_nv_write
      0     24   ZDO_StartDevice
        0     20   -> NLME_NetworkDiscoveryRequest
        0     20   -> NLME_OrphanJoinRequest
        0     20   -> nwk_ScanJoiningOrphan
        0     24   -> osal_start_timerEx
      2     13   ZDO_UpdateAddrManager
        2     13   -> AddrMgrEntryUpdate
        2     13   -> AddrMgrExtAddrSet
      0      9   ZDO_UpdateNwkStatus
        0      9   -> NLME_GetExtAddr
        0      9   -> NLME_GetShortAddr
        0      9   -> zdoSendStateChangeMsg
      1     19   zdoSendStateChangeMsg
        0     10   -> osal_msg_allocate
        0     10   -> osal_msg_find
        0     10   -> osal_msg_send
        0     10   -> osal_set_event


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       2  ?<Initializer for zdpExternalStateTaskID>
       7  ??Subroutine185_0
       3  ??Subroutine186_0
       5  ??Subroutine187_0
       5  ??Subroutine188_0
       7  ??Subroutine189_0
       2  ??Subroutine190_0
       6  ??Subroutine191_0
       5  ??Subroutine192_0
       5  ??Subroutine193_0
       4  ??Subroutine194_0
       4  ??Subroutine195_0
       8  ??Subroutine196_0
       2  ??Subroutine197_0
       9  ??Subroutine198_0
       1  ??Subroutine199_0
       2  ??Subroutine200_0
       4  ??Subroutine201_0
       1  ??Subroutine202_0
       4  ??Subroutine203_0
       7  ??Subroutine204_0
       6  ??Subroutine205_0
       1  ??Subroutine206_0
       1  ??Subroutine207_0
       1  ??Subroutine208_0
       5  ??Subroutine209_0
       7  ??Subroutine210_0
       1  ??Subroutine211_0
       6  ??Subroutine212_0
       6  ??Subroutine213_0
       2  ??Subroutine214_0
       6  ??Subroutine215_0
       8  ??Subroutine216_0
       5  ??Subroutine217_0
       5  ??Subroutine218_0
       4  ??Subroutine219_0
       4  ??Subroutine220_0
       4  ??Subroutine221_0
       5  ??Subroutine222_0
       6  ??Subroutine223_0
       6  ??Subroutine224_0
       5  ??Subroutine225_0
       4  ??Subroutine226_0
       6  ??Subroutine227_0
       5  ??Subroutine228_0
       7  ??Subroutine229_0
       6  ??Subroutine230_0
       9  ??Subroutine231_0
       6  ??Subroutine232_0
       5  ??Subroutine233_0
       5  ??Subroutine234_0
       6  ??Subroutine235_0
       9  ??Subroutine236_0
       6  ??Subroutine237_0
       7  ?Subroutine0
       5  ?Subroutine1
      43  ?Subroutine10
       4  ?Subroutine100
       4  ?Subroutine101
       4  ?Subroutine102
       1  ?Subroutine103
       9  ?Subroutine104
       4  ?Subroutine105
      11  ?Subroutine106
      17  ?Subroutine107
       9  ?Subroutine108
      19  ?Subroutine109
      27  ?Subroutine11
       2  ?Subroutine110
      15  ?Subroutine111
      11  ?Subroutine112
       6  ?Subroutine113
       9  ?Subroutine114
       6  ?Subroutine115
       5  ?Subroutine116
       6  ?Subroutine117
      13  ?Subroutine118
       6  ?Subroutine119
      20  ?Subroutine12
       8  ?Subroutine120
       8  ?Subroutine121
       4  ?Subroutine122
       4  ?Subroutine123
       6  ?Subroutine124
       9  ?Subroutine125
      10  ?Subroutine126
       2  ?Subroutine127
       3  ?Subroutine128
       8  ?Subroutine129
      17  ?Subroutine13
       9  ?Subroutine130
       4  ?Subroutine131
      12  ?Subroutine132
      13  ?Subroutine133
       4  ?Subroutine134
       5  ?Subroutine135
       6  ?Subroutine136
       6  ?Subroutine137
       7  ?Subroutine138
       1  ?Subroutine139
      13  ?Subroutine14
       4  ?Subroutine140
       5  ?Subroutine141
      22  ?Subroutine142
      24  ?Subroutine143
      10  ?Subroutine144
      10  ?Subroutine145
       4  ?Subroutine146
       5  ?Subroutine147
       6  ?Subroutine148
       6  ?Subroutine149
      13  ?Subroutine15
       4  ?Subroutine150
       1  ?Subroutine151
      13  ?Subroutine152
      13  ?Subroutine153
       7  ?Subroutine154
       6  ?Subroutine155
      14  ?Subroutine156
       4  ?Subroutine157
      12  ?Subroutine158
       2  ?Subroutine159
       5  ?Subroutine16
      19  ?Subroutine160
       8  ?Subroutine161
       6  ?Subroutine162
       8  ?Subroutine163
       5  ?Subroutine164
       1  ?Subroutine165
      10  ?Subroutine166
       6  ?Subroutine167
      10  ?Subroutine168
      10  ?Subroutine169
       1  ?Subroutine17
       6  ?Subroutine170
      10  ?Subroutine171
       3  ?Subroutine172
      11  ?Subroutine173
       6  ?Subroutine174
       6  ?Subroutine175
       7  ?Subroutine176
      18  ?Subroutine177
       6  ?Subroutine178
       9  ?Subroutine179
       3  ?Subroutine18
       3  ?Subroutine180
       1  ?Subroutine181
       1  ?Subroutine182
       7  ?Subroutine183
       6  ?Subroutine184
       8  ?Subroutine19
       2  ?Subroutine2
       9  ?Subroutine20
      12  ?Subroutine21
       1  ?Subroutine22
      22  ?Subroutine23
      25  ?Subroutine24
       5  ?Subroutine25
       8  ?Subroutine26
       8  ?Subroutine27
       5  ?Subroutine28
       8  ?Subroutine29
       3  ?Subroutine3
       5  ?Subroutine30
       6  ?Subroutine31
       4  ?Subroutine32
       4  ?Subroutine33
       5  ?Subroutine34
      10  ?Subroutine35
      10  ?Subroutine36
       6  ?Subroutine37
       4  ?Subroutine38
       7  ?Subroutine39
       3  ?Subroutine4
       6  ?Subroutine40
       6  ?Subroutine41
       3  ?Subroutine42
      10  ?Subroutine43
      12  ?Subroutine44
       8  ?Subroutine45
       5  ?Subroutine46
      27  ?Subroutine47
       9  ?Subroutine48
       5  ?Subroutine49
       4  ?Subroutine5
       4  ?Subroutine50
       6  ?Subroutine51
      14  ?Subroutine52
      20  ?Subroutine53
      28  ?Subroutine54
       8  ?Subroutine55
       3  ?Subroutine56
       9  ?Subroutine57
       6  ?Subroutine58
      13  ?Subroutine59
       9  ?Subroutine6
       4  ?Subroutine60
       8  ?Subroutine61
      39  ?Subroutine62
       4  ?Subroutine63
       3  ?Subroutine64
       8  ?Subroutine65
       4  ?Subroutine66
       7  ?Subroutine67
      11  ?Subroutine68
       4  ?Subroutine69
       6  ?Subroutine7
       4  ?Subroutine70
      15  ?Subroutine71
       4  ?Subroutine72
       4  ?Subroutine73
      15  ?Subroutine74
      12  ?Subroutine75
       4  ?Subroutine76
      13  ?Subroutine77
       4  ?Subroutine78
       1  ?Subroutine79
       5  ?Subroutine8
      12  ?Subroutine80
       8  ?Subroutine81
      15  ?Subroutine82
       5  ?Subroutine83
      12  ?Subroutine84
      10  ?Subroutine85
      11  ?Subroutine86
       4  ?Subroutine87
       4  ?Subroutine88
      10  ?Subroutine89
      26  ?Subroutine9
      10  ?Subroutine90
       7  ?Subroutine91
       1  ?Subroutine92
      13  ?Subroutine93
       9  ?Subroutine94
       1  ?Subroutine95
       1  ?Subroutine96
       6  ?Subroutine97
       4  ?Subroutine98
       4  ?Subroutine99
       3  NLME_PermitJoiningTimeout
       6  NLME_PermitJoiningTimeout::?relay
      52  ZDOBuildBuf
      95  ZDO_AnyClusterMatches
       6  ZDO_AnyClusterMatches::?relay
     185  ZDO_BuildSimpleDescBuf
       6  ZDO_BuildSimpleDescBuf::?relay
      62  ZDO_ConvertOTAClusters
       6  ZDO_ConvertOTAClusters::?relay
       2  ZDO_EDBind
     199  ZDO_EndDeviceTimeoutCB
       6  ZDO_EndDeviceTimeoutCB::?relay
      28  ZDO_Init
       6  ZDO_Init::?relay
     219  ZDO_ParseAddrRsp
       6  ZDO_ParseAddrRsp::?relay
      91  ZDO_ParseBindUnbindReq
       6  ZDO_ParseBindUnbindReq::?relay
      54  ZDO_ParseDeviceAnnce
       6  ZDO_ParseDeviceAnnce::?relay
      87  ZDO_ParseEPListRsp
       6  ZDO_ParseEPListRsp::?relay
     263  ZDO_ParseEndDeviceBindReq
       6  ZDO_ParseEndDeviceBindReq::?relay
      21  ZDO_ParseEndDeviceTimeoutRsp
       6  ZDO_ParseEndDeviceTimeoutRsp::?relay
     229  ZDO_ParseMgmNwkDiscRsp
       6  ZDO_ParseMgmNwkDiscRsp::?relay
     177  ZDO_ParseMgmtBindRsp
       6  ZDO_ParseMgmtBindRsp::?relay
     258  ZDO_ParseMgmtLqiRsp
       6  ZDO_ParseMgmtLqiRsp::?relay
     346  ZDO_ParseMgmtNwkUpdateNotify
       6  ZDO_ParseMgmtNwkUpdateNotify::?relay
     139  ZDO_ParseMgmtNwkUpdateReq
       6  ZDO_ParseMgmtNwkUpdateReq::?relay
     182  ZDO_ParseMgmtRtgRsp
       6  ZDO_ParseMgmtRtgRsp::?relay
     286  ZDO_ParseNodeDescRsp
       6  ZDO_ParseNodeDescRsp::?relay
     152  ZDO_ParsePowerDescRsp
       6  ZDO_ParsePowerDescRsp::?relay
      51  ZDO_ParseServerDiscRsp
       6  ZDO_ParseServerDiscRsp::?relay
     279  ZDO_ParseSimpleDescBuf
       6  ZDO_ParseSimpleDescBuf::?relay
      62  ZDO_ParseSimpleDescRsp
       6  ZDO_ParseSimpleDescRsp::?relay
      87  ZDO_ParseUserDescRsp
       6  ZDO_ParseUserDescRsp::?relay
     128  ZDO_ProcessActiveEPReq
       6  ZDO_ProcessActiveEPReq::?relay
     460  ZDO_ProcessBindUnbindReq
       6  ZDO_ProcessBindUnbindReq::?relay
     359  ZDO_ProcessDeviceAnnce
       6  ZDO_ProcessDeviceAnnce::?relay
     128  ZDO_ProcessEndDeviceTimeoutReq
       6  ZDO_ProcessEndDeviceTimeoutReq::?relay
    1193  ZDO_ProcessMatchDescReq
       6  ZDO_ProcessMatchDescReq::?relay
     266  ZDO_ProcessMgmtBindReq
       6  ZDO_ProcessMgmtBindReq::?relay
      88  ZDO_ProcessMgmtDirectJoinReq
       6  ZDO_ProcessMgmtDirectJoinReq::?relay
     195  ZDO_ProcessMgmtLeaveReq
       6  ZDO_ProcessMgmtLeaveReq::?relay
     658  ZDO_ProcessMgmtLqiReq
       6  ZDO_ProcessMgmtLqiReq::?relay
     128  ZDO_ProcessMgmtNwkDiscReq
       6  ZDO_ProcessMgmtNwkDiscReq::?relay
      79  ZDO_ProcessMgmtPermitJoinReq
       6  ZDO_ProcessMgmtPermitJoinReq::?relay
     304  ZDO_ProcessMgmtRtgReq
       6  ZDO_ProcessMgmtRtgReq::?relay
      71  ZDO_ProcessNodeDescReq
       6  ZDO_ProcessNodeDescReq::?relay
      71  ZDO_ProcessPowerDescReq
       6  ZDO_ProcessPowerDescReq::?relay
      65  ZDO_ProcessServerDiscReq
       6  ZDO_ProcessServerDiscReq::?relay
     141  ZDO_ProcessSimpleDescReq
       6  ZDO_ProcessSimpleDescReq::?relay
     155  ZDO_ProcessUserDescReq
       6  ZDO_ProcessUserDescReq::?relay
     296  ZDO_ProcessUserDescSet
       6  ZDO_ProcessUserDescSet::?relay
     196  ZDO_StartDevice
       6  ZDO_StartDevice::?relay
      51  ZDO_UpdateAddrManager
       6  ZDO_UpdateAddrManager::?relay
      95  ZDO_UpdateNwkStatus
       6  ZDO_UpdateNwkStatus::?relay
       4  __Constant_3e8
       4  apsChannelMask
       2  matchED
       1  scanCnt
      73  zdoSendStateChangeMsg
       6  zdoSendStateChangeMsg::?relay
       2  zdpExternalStateTaskID

 
 10 560 bytes in segment BANKED_CODE
    276 bytes in segment BANK_RELAYS
      2 bytes in segment XDATA_I
      2 bytes in segment XDATA_ID
      4 bytes in segment XDATA_ROM_C
     61 bytes in segment XDATA_Z
 
 10 838 bytes of CODE  memory
      0 bytes of CONST memory (+ 4 bytes shared)
     63 bytes of XDATA memory

Errors: none
Warnings: none
