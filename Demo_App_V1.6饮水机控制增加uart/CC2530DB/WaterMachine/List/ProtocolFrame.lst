###############################################################################
#
# IAR C/C++ Compiler V9.30.1.3056 for 8051                20/Oct/2016  12:36:11
# Copyright 2004-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.4饮水机控制 -
#        副本\Frame\ProtocolFrame.c
#    Command line       =  
#        -f "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.4饮水机控制 -
#        副本\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg" (-DCPU32MHZ
#        -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3 -DMAC_CFG_TX_MAX=6
#        -DMAC_CFG_RX_MAX=3) -f "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack
#        Mesh 1.0.0\Projects\zstack\Samples\Demo_App_V1.4饮水机控制 -
#        副本\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg" (-DZIGBEEPRO
#        -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=100 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
#        -DREJOIN_POLL_RATE=440 "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack
#        Mesh 1.0.0\Projects\zstack\Samples\Demo_App_V1.4饮水机控制 -
#        副本\Frame\ProtocolFrame.c" -D LOG_OUT -D UART1_PROTOCOL_RESOLVER=1 -D
#        xISQC -D NWK_AUTO_POLL -D ZTOOL_P1 -D ISR_KEYINTERRUPT -D xMT_TASK -D
#        xMT_SYS_FUNC -D xMT_ZDO_FUNC -D xLCD_SUPPORTED=DEBUG -D xPOWER_SAVING
#        -lC "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.4饮水机控制 -
#        副本\CC2530DB\WaterMachine\List" -lA
#        "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.4饮水机控制 -
#        副本\CC2530DB\WaterMachine\List" --diag_suppress Pe001,Pa010 -o
#        "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.4饮水机控制 -
#        副本\CC2530DB\WaterMachine\Obj" -e --no_code_motion --debug
#        --core=plain --dptr=16,1 --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 8 -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack
#        Mesh 1.0.0\Projects\zstack\Samples\Demo_App_V1.4饮水机控制 -
#        副本\CC2530DB\" -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.4饮水机控制 -
#        副本\CC2530DB\..\Source\" -I
#        "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.4饮水机控制 -
#        副本\CC2530DB\..\Frame\" -I
#        "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.4饮水机控制 -
#        副本\CC2530DB\..\Module\WaterMachine\" -I
#        "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.4饮水机控制 -
#        副本\CC2530DB\..\..\..\ZMain\TI2530DB\" -I
#        "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.4饮水机控制 -
#        副本\CC2530DB\..\..\..\..\..\Components\hal\include\" -I
#        "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.4饮水机控制 -
#        副本\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\" -I
#        "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.4饮水机控制 -
#        副本\CC2530DB\..\..\..\..\..\Components\mac\include\" -I
#        "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.4饮水机控制 -
#        副本\CC2530DB\..\..\..\..\..\Components\mac\high_level\" -I
#        "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.4饮水机控制 -
#        副本\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\" -I
#        "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.4饮水机控制 -
#        副本\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.4饮水机控制 -
#        副本\CC2530DB\..\..\..\..\..\Components\mt\" -I
#        "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.4饮水机控制 -
#        副本\CC2530DB\..\..\..\..\..\Components\osal\include\" -I
#        "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.4饮水机控制 -
#        副本\CC2530DB\..\..\..\..\..\Components\services\saddr\" -I
#        "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.4饮水机控制 -
#        副本\CC2530DB\..\..\..\..\..\Components\services\sdata\" -I
#        "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.4饮水机控制 -
#        副本\CC2530DB\..\..\..\..\..\Components\stack\af\" -I
#        "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.4饮水机控制 -
#        副本\CC2530DB\..\..\..\..\..\Components\stack\nwk\" -I
#        "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.4饮水机控制 -
#        副本\CC2530DB\..\..\..\..\..\Components\stack\sapi\" -I
#        "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.4饮水机控制 -
#        副本\CC2530DB\..\..\..\..\..\Components\stack\sec\" -I
#        "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.4饮水机控制 -
#        副本\CC2530DB\..\..\..\..\..\Components\stack\sys\" -I
#        "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.4饮水机控制 -
#        副本\CC2530DB\..\..\..\..\..\Components\stack\zdo\" -I
#        "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.4饮水机控制 -
#        副本\CC2530DB\..\..\..\..\..\Components\zmac\" -I
#        "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.4饮水机控制 -
#        副本\CC2530DB\..\..\..\..\..\Components\zmac\f8w\" -Ohz
#    List file          =  
#        E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.4饮水机控制 -
#        副本\CC2530DB\WaterMachine\List\ProtocolFrame.lst
#    Object file        =  
#        E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.4饮水机控制 -
#        副本\CC2530DB\WaterMachine\Obj\ProtocolFrame.r51
#
###############################################################################

E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh 1.0.0\Projects\zstack\Samples\Demo_App_V1.4饮水机控制 - 副本\Frame\ProtocolFrame.c
      1          #include "ProtocolFrame.h" 
      2          #include "ProtocolHandle.h"
      3          #include "LOG.h"
      4          #include "Protocol.h"
      5           
      6          //###################################对外变量区###################################
      7          //PROTOCOL_INFO_T protocol_send_infos[SEND_PROTOCOL_NUM] = {0};//发送协议栈
      8          //PROTOCOL_INFO_T recv_protocol_infos[RECV_PROTOCOL_NUM] = {0};//接收协议栈 
      9          //static uint8_t _Recv_Protocol_Arr[RECV_PROTOCOL_NUM] = {0};//已经接收到协议的索引  

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     10          PROTOCOL_DESC_T Send_Desc_P[SEND_PROTOCOL_NUM];//发送协议栈
   \                     Send_Desc_P:
   \   000000                DS 48
   \   000030                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     11          PROTOCOL_DESC_T Recv_Desc_P[RECV_PROTOCOL_NUM];//接收协议栈 
   \                     Recv_Desc_P:
   \   000000                DS 36
   \   000024                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     12          PROTOCOL_DESC_T Transpond_Desc_P[TRANSPOND_PROTOCOL_NUM];//接收协议栈 
   \                     Transpond_Desc_P:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
     13          //###################################对内变量区################################### 
     14           
     15          
     16          
     17          #if UART1_PROTOCOL_RESOLVER
     18          	#define UART1_RPQUEUE_SIZE		1 //接收协议缓冲区（存储多条协议） 

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     19          	Protocol_Resolver_T _UART1_Resolver;
   \                     _UART1_Resolver:
   \   000000                DS 33
   \   000021                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     20          	PROTOCOL_INFO_T _UART1_Protocol_QueueBuf[UART1_RPQUEUE_SIZE] = {0}; 
   \                     _UART1_Protocol_QueueBuf:
   \   000000                DS 19
   \   000013                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_I, align 1, keep-with-next
     21          	Protocol_Resolver_T *UART1_Resolver = &_UART1_Resolver;
   \                     UART1_Resolver:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for UART1_Resolver>`
   \   000002                REQUIRE __INIT_XDATA_I
     22          #endif
     23          #if UART2_PROTOCOL_RESOLVER
     24          	#define UART2_RPQUEUE_SIZE		30 //接收协议缓冲区（存储多条协议） 
     25          	Protocol_Resolver_T _UART2_Resolver;
     26          	PROTOCOL_INFO_T _UART2_Protocol_QueueBuf[UART2_RPQUEUE_SIZE] = {0}; 
     27          	Protocol_Resolver_T *UART2_Resolver = &_UART2_Resolver;
     28          #endif
     29          #if UART3_PROTOCOL_RESOLVER
     30          	#define UART3_RPQUEUE_SIZE		30 //接收协议缓冲区（存储多条协议） 
     31          	Protocol_Resolver_T _UART3_Resolver;
     32          	PROTOCOL_INFO_T _UART3_Protocol_QueueBuf[UART3_RPQUEUE_SIZE] = {0}; 
     33          	Protocol_Resolver_T *UART3_Resolver = &_UART3_Resolver;
     34          #endif
     35          #if UART4_PROTOCOL_RESOLVER
     36          	#define UART4_RPQUEUE_SIZE		30 //接收协议缓冲区（存储多条协议） 
     37          	Protocol_Resolver_T _UART4_Resolver;
     38          	PROTOCOL_INFO_T _UART4_Protocol_QueueBuf[UART4_RPQUEUE_SIZE] = {0}; 
     39          	Protocol_Resolver_T *UART1_Resolver = &_UART4_Resolver;
     40          #endif
     41          //-----------------------------------------------------  
     42          //###################################对内函数区###################################
     43          /****************************************************
     44          	函数名:	clean_recv_buf
     45          	功能:		清除协议栈正在写入的协议
     46          	作者:		liyao 2015年9月8日14:10:51
     47          ****************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     48          void _clean_recv_buf(Protocol_Resolver_T* pr){  
   \                     _clean_recv_buf:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
     49          	memset(&pr->pi, 0, sizeof(PROTOCOL_INFO_T)); 
   \   000009                ; Setup parameters for call to function memset
   \   000009   75..13       MOV     ?V0,#0x13
   \   00000C   75..00       MOV     ?V1,#0x0
   \   00000F   78..         MOV     R0,#?V0
   \   000011   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000014   7C00         MOV     R4,#0x0
   \   000016   7D00         MOV     R5,#0x0
   \   000018   EE           MOV     A,R6
   \   000019   2404         ADD     A,#0x4
   \   00001B   FA           MOV     R2,A
   \   00001C   E4           CLR     A
   \   00001D   3F           ADDC    A,R7
   \   00001E   FB           MOV     R3,A
   \   00001F   12....       LCALL   `??memset::?relay`   ; Banked call to: memset
   \   000022   7402         MOV     A,#0x2
   \   000024   12....       LCALL   ?DEALLOC_XSTACK8
     50          	pr->Recv_State = 0;
   \   000027   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   00002A   E4           CLR     A
   \   00002B   12....       LCALL   ?Subroutine3 & 0xFFFF
     51          	pr->cnt = 0;
   \                     ??CrossCallReturnLabel_0:
   \   00002E   E4           CLR     A
   \   00002F   F0           MOVX    @DPTR,A
     52          	pr->index = 0;
   \   000030   EE           MOV     A,R6
   \   000031   2418         ADD     A,#0x18
   \   000033   F582         MOV     DPL,A
   \   000035   E4           CLR     A
   \   000036   3F           ADDC    A,R7
   \   000037   F583         MOV     DPH,A
   \   000039   E4           CLR     A
   \   00003A   F0           MOVX    @DPTR,A
     53          	pr->Is_FE = 0;
   \   00003B   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   00003E   E4           CLR     A
   \   00003F   12....       LCALL   ?Subroutine6 & 0xFFFF
     54          	pr->CheckSum = 0;
   \                     ??CrossCallReturnLabel_9:
   \   000042   E4           CLR     A
   \   000043   F0           MOVX    @DPTR,A
   \   000044   A3           INC     DPTR
   \   000045   02....       LJMP    ?Subroutine0 & 0xFFFF
     55          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   EE           MOV     A,R6
   \   000001   241A         ADD     A,#0x1a
   \   000003   F582         MOV     DPL,A
   \   000005   E4           CLR     A
   \   000006   3F           ADDC    A,R7
   \   000007   F583         MOV     DPH,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   EE           MOV     A,R6
   \   000001   2419         ADD     A,#0x19
   \   000003   F582         MOV     DPL,A
   \   000005   E4           CLR     A
   \   000006   3F           ADDC    A,R7
   \   000007   F583         MOV     DPH,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   EE           MOV     A,R6
   \   000001   241C         ADD     A,#0x1c
   \   000003   F582         MOV     DPL,A
   \   000005   E4           CLR     A
   \   000006   3F           ADDC    A,R7
   \   000007   F583         MOV     DPH,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   EE           MOV     A,R6
   \   000002   2417         ADD     A,#0x17
   \   000004   F582         MOV     DPL,A
   \   000006   E4           CLR     A
   \   000007   3F           ADDC    A,R7
   \   000008   F583         MOV     DPH,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                REQUIRE ??Subroutine18_0
   \   000001                ; // Fall through to label ??Subroutine18_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine18_0:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
     56          
     57          /****************************************************
     58          	函数名:	_Fetch_Protocol
     59          	功能:		提取并执行已经缓存的协议
     60          	作者:		liyao 2016年9月8日10:54:34
     61          ****************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     62          void _Fetch_Protocol(Protocol_Resolver_T* pr){
   \                     _Fetch_Protocol:
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 19
   \   000005   74ED         MOV     A,#-0x13
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   \   00000E   8012         SJMP    ??_Fetch_Protocol_0
     63          	PROTOCOL_INFO_T pi;
     64          	while(Queue_Get(pr->Protocol_Queue,&pi) == 0){
     65          		if(pi.check != NULL){
     66          			if(pi.check(&pi) < 0){
     67          				Log.error("协议校验不通过\r\n");
     68          				break;
     69          			}
     70          		}
     71          		if(pi.handle != NULL){
     72          			pi.handle(&pi);
   \                     ??_Fetch_Protocol_1:
   \   000010                ; Setup parameters for indirect call
   \   000010   AA..         MOV     R2,?XSP + 0
   \   000012   AB..         MOV     R3,?XSP + 1
   \   000014   740F         MOV     A,#0xf
   \   000016   12....       LCALL   ?XSTACK_DISP0_8
   \                     ??_Fetch_Protocol_2:
   \   000019   A3           INC     DPTR
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   F583         MOV     DPH,A
   \   00001D   8882         MOV     DPL,R0
   \   00001F   12....       LCALL   ?CALL_IND
     73          		}else{
   \                     ??_Fetch_Protocol_0:
   \   000022                ; Setup parameters for call to function Queue_Get
   \   000022   AC..         MOV     R4,?XSP + 0
   \   000024   AD..         MOV     R5,?XSP + 1
   \   000026   8E82         MOV     DPL,R6
   \   000028   8F83         MOV     DPH,R7
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   FA           MOV     R2,A
   \   00002C   A3           INC     DPTR
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   FB           MOV     R3,A
   \   00002F   12....       LCALL   `??Queue_Get::?relay`; Banked call to: Queue_Get
   \   000032   E9           MOV     A,R1
   \   000033   7031         JNZ     ??_Fetch_Protocol_3
   \   000035   7411         MOV     A,#0x11
   \   000037   12....       LCALL   ?XSTACK_DISP0_8
   \   00003A   12....       LCALL   ??Subroutine17_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   00003D   602F         JZ      ??_Fetch_Protocol_4
   \   00003F                ; Setup parameters for indirect call
   \   00003F   AA..         MOV     R2,?XSP + 0
   \   000041   AB..         MOV     R3,?XSP + 1
   \   000043   7411         MOV     A,#0x11
   \   000045   12....       LCALL   ?XSTACK_DISP0_8
   \   000048   A3           INC     DPTR
   \   000049   E0           MOVX    A,@DPTR
   \   00004A   F583         MOV     DPH,A
   \   00004C   8882         MOV     DPL,R0
   \   00004E   12....       LCALL   ?CALL_IND
   \   000051   E9           MOV     A,R1
   \   000052   C3           CLR     C
   \   000053   9400         SUBB    A,#0x0
   \   000055   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000057   65D0         XRL     A,PSW
   \   000059   33           RLC     A
   \   00005A   5012         JNC     ??_Fetch_Protocol_4
   \   00005C                ; Setup parameters for indirect call
   \   00005C   7A..         MOV     R2,#`?<Constant "\\320\\255\\322\\351\\320\\243\\321\\351\\2` & 0xff
   \   00005E   7B..         MOV     R3,#(`?<Constant "\\320\\255\\322\\351\\320\\243\\321\\351\\2` >> 8) & 0xff
   \   000060   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_37:
   \   000063   12....       LCALL   ?CALL_IND
     74          			Log.error("收到协议但是无处理函数\r\n");
     75          		}
     76          	}
     77          }
   \                     ??_Fetch_Protocol_3:
   \   000066   7413         MOV     A,#0x13
   \   000068   12....       LCALL   ?DEALLOC_XSTACK8
   \   00006B   02....       LJMP    ?Subroutine1 & 0xFFFF
   \                     ??_Fetch_Protocol_4:
   \   00006E   740F         MOV     A,#0xf
   \   000070   12....       LCALL   ?XSTACK_DISP0_8
   \   000073   12....       LCALL   ??Subroutine17_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   000076   7098         JNZ     ??_Fetch_Protocol_1
   \   000078                ; Setup parameters for indirect call
   \   000078   7A..         MOV     R2,#`?<Constant "\\312\\325\\265\\275\\320\\255\\322\\351\\2` & 0xff
   \   00007A   7B..         MOV     R3,#(`?<Constant "\\312\\325\\265\\275\\320\\255\\322\\351\\2` >> 8) & 0xff
   \   00007C   90....       MOV     DPTR,#Log + 2
   \   00007F   E0           MOVX    A,@DPTR
   \   000080   F8           MOV     R0,A
   \   000081   8096         SJMP    ??_Fetch_Protocol_2

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine17_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   E8           MOV     A,R0
   \   000006   49           ORL     A,R1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   90....       MOV     DPTR,#Log + 2
   \   000003                REQUIRE ??Subroutine20_0
   \   000003                ; // Fall through to label ??Subroutine20_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine20_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F583         MOV     DPH,A
   \   000006   8882         MOV     DPL,R0
   \   000008   22           RET
     78           
     79          /****************************************************
     80          	函数名:	Protocol_Put
     81          	功能:		接收协议数据并解析封装
     82          	参数:		协议数据
     83          	注意: 	通过protocol_flag标志位标示是否解析出新的协议
     84          	作者:		liyao 2015年9月8日14:10:51
     85          ****************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     86          int8_t _Protocol_Put(Protocol_Resolver_T* pr,uint8_t* datas,uint8_t len){
   \                     _Protocol_Put:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000   74F3         MOV     A,#-0xd
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 13
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   8C..         MOV     ?V2,R4
   \   00000B   8D..         MOV     ?V3,R5
   \   00000D   89..         MOV     ?V1,R1
     87          	uint8_t i,j, data; 
     88          	uint16_t src_board_action;
     89          	
     90          	for(i = 0; i < len; i++){
   \   00000F   75..00       MOV     ?V0,#0x0
   \   000012   801F         SJMP    ??_Protocol_Put_0
     91          		data = datas[i];
     92          		if(pr->pi.head == 0xFD && data == 0xFD){ //协议被切断抛弃
     93          			_clean_recv_buf(pr);
     94          			Log.error("协议中途出现0xFD\r\n");
     95          			return -1;
     96          		}
     97          		if(data == 0xFE){//处理转义
     98          			pr->Is_FE = 1;
     99          			continue;
    100          		}else if(pr->Is_FE){
    101          			switch(data){
    102          				case 0x7D: data = 0xFD;break;
    103          				case 0x78: data = 0xF8;break;
    104          				case 0x7E: data = 0xFE;break;
    105          			} 
    106          			pr->Is_FE = 0;
    107          		}
    108          			
    109          		if(pr->Recv_State > 0 && pr->Recv_State < 7)//排除帧头帧尾计算校验和
    110          			pr->CheckSum += data; 
    111          	//协议解析状态机
    112          		switch(pr->Recv_State){
    113          			case 0:	//处理帧头
    114          						pr->pi.head = data;
    115          						pr->Recv_State++; 
    116          						break;
    117          			case 1:	//处理预留位
    118          						pr->pi.standby1 = data;
    119          						pr->Recv_State++; 
    120          						break;
    121          			case 2: //处理帧长(从ID到数据位最后一个)
    122          						pr->Recv_State++; 
    123          						pr->pi.plen = data;
    124          						if(data < 4){
    125          							_clean_recv_buf(pr);
    126          							Log.error("处理帧长错误\r\n");
    127          							return -2;
    128          						}
    129          						else
    130          							pr->cnt = pr->pi.paralen = data - 3;//计算结果为参数个数
    131          							pr->pi.alen = data + 5;//计算结果为协议总长度包括FD、F8
    132          						break;
    133          			case 3: //处理目标板
    134          						pr->pi.module = data;
    135          						pr->Recv_State++; 
    136          						break;
    137          			case 4: //处理编号
    138          						pr->pi.serial = data;
    139          						pr->Recv_State++; 
    140          						break;
    141          			case 5: //处理指令码(ACTION)
    142          						pr->pi.action = data;
    143          						pr->Recv_State++; 
    144          						break;
    145          			case 6: //处理参数 
    146          						((uint8_t *)(&pr->pi.protocol))[pr->index++] = data;  
    147          						if(--pr->cnt == 0)
    148          							pr->Recv_State++;
    149          						break;
    150          			case 7: //处理校验和校验  
    151          						pr->pi.checksum = data;
    152          						/*校验和暂时关闭*/
    153          						if(((uint8_t)pr->CheckSum & 0xff) != data){
    154          //                                                  printf("计算结果:%x\r\n",(uint8_t)pr->CheckSum);
    155          //                                                        printf("%x,%x,%x,%x,%x,%x,%x,%x,%x,%x\r\n",
    156          //                                                               pr->pi.head,
    157          //                                                               pr->pi.standby1,
    158          //                                                               pr->pi.plen,
    159          //                                                               pr->pi.module,
    160          //                                                               pr->pi.serial,
    161          //                                                               pr->pi.action,
    162          //                                                               pr->pi.protocol.AddrReport_P.para1,
    163          //                                                               pr->pi.protocol.AddrReport_P.para2,
    164          //                                                               pr->pi.checksum,
    165          //                                                               pr->pi.tail);
    166          							_clean_recv_buf(pr);
    167          							Log.error("协议校验和错误\r\n");
    168          							return -3;
    169          						}else{ 
    170          							pr->Recv_State++; 
    171          						} 
    172          						break;
    173          			case 8: //处理帧尾 帧类型和长度进行匹配 
    174          						if(data != 0xF8){
    175          							_clean_recv_buf(pr);
    176          							Log.error("帧尾位置非0xF8错误\r\n");
    177          							return -4;
    178          						}
    179          						pr->pi.tail = data;
    180          						src_board_action = pr->pi.module << 8 | pr->pi.action; 
    181          						for(j = 0; j < RECV_PROTOCOL_NUM; j++){
    182          							if(	src_board_action ==  Recv_Desc_P[j].ModuleAction &&//目标板匹配,动作匹配 
    183          									pr->pi.paralen == Recv_Desc_P[j].ProtocolSize)//帧长度匹配
    184          							{
    185          								pr->pi.handle = Recv_Desc_P[j].handle;
    186          								pr->pi.check = Recv_Desc_P[j].check;
    187          								pr->pi.Desc_T = &Recv_Desc_P[j];
    188          								break;
    189          							}
    190          						}
    191          						if(j == RECV_PROTOCOL_NUM){//校验不通过
    192          							_clean_recv_buf(pr);
    193          							Log.error("现有协议库无匹配当前协议\r\n");
    194          							return -5;
    195          						}else{
    196          							//Queue_Put(pr->Protocol_Queue, &pr->pi);//将协议信息放入协议缓冲队列
    197                                                                  pr->pi.handle(&pr->pi);
   \                     ??_Protocol_Put_1:
   \   000014                ; Setup parameters for indirect call
   \   000014   EE           MOV     A,R6
   \   000015   2404         ADD     A,#0x4
   \   000017   FA           MOV     R2,A
   \   000018   E4           CLR     A
   \   000019   3F           ADDC    A,R7
   \   00001A   FB           MOV     R3,A
   \   00001B   EE           MOV     A,R6
   \   00001C   2413         ADD     A,#0x13
   \   00001E   F582         MOV     DPL,A
   \   000020   E4           CLR     A
   \   000021   3F           ADDC    A,R7
   \   000022   F583         MOV     DPH,A
   \   000024   12....       LCALL   ??Subroutine20_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   000027   12....       LCALL   ?CALL_IND
    198          							_clean_recv_buf(pr); 
   \   00002A                ; Setup parameters for call to function _clean_recv_buf
   \   00002A   EE           MOV     A,R6
   \   00002B   FA           MOV     R2,A
   \   00002C   EF           MOV     A,R7
   \   00002D   FB           MOV     R3,A
   \   00002E   12....       LCALL   `??_clean_recv_buf::?relay`; Banked call to: _clean_recv_buf
    199          						}
    200          						break;
   \                     ??_Protocol_Put_2:
   \   000031   05..         INC     ?V0
   \                     ??_Protocol_Put_0:
   \   000033   E5..         MOV     A,?V0
   \   000035   C3           CLR     C
   \   000036   95..         SUBB    A,?V1
   \   000038   4003         JC      $+5
   \   00003A   02....       LJMP    ??_Protocol_Put_3 & 0xFFFF
   \   00003D   A8..         MOV     R0,?V0
   \   00003F   E5..         MOV     A,?V2
   \   000041   28           ADD     A,R0
   \   000042   F582         MOV     DPL,A
   \   000044   E4           CLR     A
   \   000045   35..         ADDC    A,?V3
   \   000047   F583         MOV     DPH,A
   \   000049   E0           MOVX    A,@DPTR
   \   00004A   F8           MOV     R0,A
   \   00004B   8E82         MOV     DPL,R6
   \   00004D   8F83         MOV     DPH,R7
   \   00004F   A3           INC     DPTR
   \   000050   A3           INC     DPTR
   \   000051   A3           INC     DPTR
   \   000052   A3           INC     DPTR
   \   000053   E0           MOVX    A,@DPTR
   \   000054   64FD         XRL     A,#0xfd
   \   000056   701B         JNZ     ??_Protocol_Put_4
   \   000058   74FD         MOV     A,#-0x3
   \   00005A   68           XRL     A,R0
   \   00005B   7016         JNZ     ??_Protocol_Put_4
   \   00005D                ; Setup parameters for call to function _clean_recv_buf
   \   00005D   EE           MOV     A,R6
   \   00005E   FA           MOV     R2,A
   \   00005F   EF           MOV     A,R7
   \   000060   FB           MOV     R3,A
   \   000061   12....       LCALL   `??_clean_recv_buf::?relay`; Banked call to: _clean_recv_buf
   \   000064                ; Setup parameters for indirect call
   \   000064   7A..         MOV     R2,#`?<Constant "\\320\\255\\322\\351\\326\\320\\315\\276\\2` & 0xff
   \   000066   7B..         MOV     R3,#(`?<Constant "\\320\\255\\322\\351\\326\\320\\315\\276\\2` >> 8) & 0xff
   \   000068   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   00006B   12....       LCALL   ?CALL_IND
   \   00006E   79FF         MOV     R1,#-0x1
   \   000070   02....       LJMP    ??_Protocol_Put_5 & 0xFFFF
   \                     ??_Protocol_Put_4:
   \   000073   74FE         MOV     A,#-0x2
   \   000075   68           XRL     A,R0
   \   000076   7008         JNZ     ??_Protocol_Put_6
   \   000078   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   00007B   7401         MOV     A,#0x1
   \                     ??_Protocol_Put_7:
   \   00007D   F0           MOVX    @DPTR,A
   \   00007E   80B1         SJMP    ??_Protocol_Put_2
   \                     ??_Protocol_Put_6:
   \   000080   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   000083   E0           MOVX    A,@DPTR
   \   000084   601A         JZ      ??_Protocol_Put_8
   \   000086   E8           MOV     A,R0
   \   000087   2488         ADD     A,#-0x78
   \   000089   600D         JZ      ??_Protocol_Put_9
   \   00008B   24FB         ADD     A,#-0x5
   \   00008D   6005         JZ      ??_Protocol_Put_10
   \   00008F   14           DEC     A
   \   000090   600A         JZ      ??_Protocol_Put_11
   \   000092   800A         SJMP    ??_Protocol_Put_12
   \                     ??_Protocol_Put_10:
   \   000094   78FD         MOV     R0,#-0x3
   \   000096   8006         SJMP    ??_Protocol_Put_12
   \                     ??_Protocol_Put_9:
   \   000098   78F8         MOV     R0,#-0x8
   \   00009A   8002         SJMP    ??_Protocol_Put_12
   \                     ??_Protocol_Put_11:
   \   00009C   78FE         MOV     R0,#-0x2
   \                     ??_Protocol_Put_12:
   \   00009E   E4           CLR     A
   \   00009F   F0           MOVX    @DPTR,A
   \                     ??_Protocol_Put_8:
   \   0000A0   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   0000A3   6044         JZ      ??_Protocol_Put_13
   \   0000A5   C3           CLR     C
   \   0000A6   9407         SUBB    A,#0x7
   \   0000A8   500D         JNC     ??_Protocol_Put_14
   \   0000AA   E8           MOV     A,R0
   \   0000AB   FA           MOV     R2,A
   \   0000AC   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   0000AF   E0           MOVX    A,@DPTR
   \   0000B0   2A           ADD     A,R2
   \   0000B1   F0           MOVX    @DPTR,A
   \   0000B2   A3           INC     DPTR
   \   0000B3   E0           MOVX    A,@DPTR
   \   0000B4   3400         ADDC    A,#0x0
   \   0000B6   F0           MOVX    @DPTR,A
   \                     ??_Protocol_Put_14:
   \   0000B7   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   0000BA   602D         JZ      ??_Protocol_Put_13
   \   0000BC   14           DEC     A
   \   0000BD   603A         JZ      ??_Protocol_Put_15
   \   0000BF   14           DEC     A
   \   0000C0   603F         JZ      ??_Protocol_Put_16
   \   0000C2   14           DEC     A
   \   0000C3   7003         JNZ     $+5
   \   0000C5   02....       LJMP    ??_Protocol_Put_17 & 0xFFFF
   \   0000C8   14           DEC     A
   \   0000C9   7003         JNZ     $+5
   \   0000CB   02....       LJMP    ??_Protocol_Put_18 & 0xFFFF
   \   0000CE   14           DEC     A
   \   0000CF   7003         JNZ     $+5
   \   0000D1   02....       LJMP    ??_Protocol_Put_19 & 0xFFFF
   \   0000D4   14           DEC     A
   \   0000D5   7003         JNZ     $+5
   \   0000D7   02....       LJMP    ??_Protocol_Put_20 & 0xFFFF
   \   0000DA   14           DEC     A
   \   0000DB   7003         JNZ     $+5
   \   0000DD   02....       LJMP    ??_Protocol_Put_21 & 0xFFFF
   \   0000E0   14           DEC     A
   \   0000E1   7003         JNZ     $+5
   \   0000E3   02....       LJMP    ??_Protocol_Put_22 & 0xFFFF
   \   0000E6   02....       LJMP    ??_Protocol_Put_2 & 0xFFFF
   \                     ??_Protocol_Put_13:
   \   0000E9   E8           MOV     A,R0
   \   0000EA   8E82         MOV     DPL,R6
   \   0000EC   8F83         MOV     DPH,R7
   \                     ??_Protocol_Put_23:
   \   0000EE   A3           INC     DPTR
   \   0000EF   A3           INC     DPTR
   \   0000F0   A3           INC     DPTR
   \   0000F1   A3           INC     DPTR
   \   0000F2   F0           MOVX    @DPTR,A
   \                     ??_Protocol_Put_24:
   \   0000F3   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   0000F6   04           INC     A
   \   0000F7   8084         SJMP    ??_Protocol_Put_7
   \                     ??_Protocol_Put_15:
   \   0000F9   E8           MOV     A,R0
   \   0000FA   8E82         MOV     DPL,R6
   \   0000FC   8F83         MOV     DPH,R7
   \                     ??_Protocol_Put_25:
   \   0000FE   A3           INC     DPTR
   \   0000FF   80ED         SJMP    ??_Protocol_Put_23
   \                     ??_Protocol_Put_16:
   \   000101   E0           MOVX    A,@DPTR
   \   000102   04           INC     A
   \   000103   F0           MOVX    @DPTR,A
   \   000104   E8           MOV     A,R0
   \   000105   8E82         MOV     DPL,R6
   \   000107   8F83         MOV     DPH,R7
   \   000109   A3           INC     DPTR
   \   00010A   A3           INC     DPTR
   \   00010B   A3           INC     DPTR
   \   00010C   A3           INC     DPTR
   \   00010D   A3           INC     DPTR
   \   00010E   A3           INC     DPTR
   \   00010F   F0           MOVX    @DPTR,A
   \   000110   C3           CLR     C
   \   000111   9404         SUBB    A,#0x4
   \   000113   5016         JNC     ??_Protocol_Put_26
   \   000115                ; Setup parameters for call to function _clean_recv_buf
   \   000115   EE           MOV     A,R6
   \   000116   FA           MOV     R2,A
   \   000117   EF           MOV     A,R7
   \   000118   FB           MOV     R3,A
   \   000119   12....       LCALL   `??_clean_recv_buf::?relay`; Banked call to: _clean_recv_buf
   \   00011C                ; Setup parameters for indirect call
   \   00011C   7A..         MOV     R2,#`?<Constant "\\264\\246\\300\\355\\326\\241\\263\\244\\2` & 0xff
   \   00011E   7B..         MOV     R3,#(`?<Constant "\\264\\246\\300\\355\\326\\241\\263\\244\\2` >> 8) & 0xff
   \   000120   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_39:
   \   000123   12....       LCALL   ?CALL_IND
   \   000126   79FE         MOV     R1,#-0x2
   \   000128   02....       LJMP    ??_Protocol_Put_5 & 0xFFFF
   \                     ??_Protocol_Put_26:
   \   00012B   74FD         MOV     A,#-0x3
   \   00012D   28           ADD     A,R0
   \   00012E   F9           MOV     R1,A
   \   00012F   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   000132   E9           MOV     A,R1
   \   000133   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   000136   E9           MOV     A,R1
   \   000137   F0           MOVX    @DPTR,A
   \   000138   7405         MOV     A,#0x5
   \   00013A   28           ADD     A,R0
   \   00013B   C0E0         PUSH    A
   \   00013D   EE           MOV     A,R6
   \   00013E   2410         ADD     A,#0x10
   \   000140   F582         MOV     DPL,A
   \   000142   E4           CLR     A
   \   000143   3F           ADDC    A,R7
   \   000144   F583         MOV     DPH,A
   \   000146   D0E0         POP     A
   \   000148   02....       LJMP    ??_Protocol_Put_7 & 0xFFFF
   \                     ??_Protocol_Put_17:
   \   00014B   E8           MOV     A,R0
   \   00014C   8E82         MOV     DPL,R6
   \   00014E   8F83         MOV     DPH,R7
   \                     ??_Protocol_Put_27:
   \   000150   A3           INC     DPTR
   \   000151   A3           INC     DPTR
   \   000152   80AA         SJMP    ??_Protocol_Put_25
   \                     ??_Protocol_Put_18:
   \   000154   E8           MOV     A,R0
   \   000155   8E82         MOV     DPL,R6
   \   000157   8F83         MOV     DPH,R7
   \                     ??_Protocol_Put_28:
   \   000159   A3           INC     DPTR
   \   00015A   80F4         SJMP    ??_Protocol_Put_27
   \                     ??_Protocol_Put_19:
   \   00015C   E8           MOV     A,R0
   \   00015D   8E82         MOV     DPL,R6
   \   00015F   8F83         MOV     DPH,R7
   \   000161   A3           INC     DPTR
   \   000162   80F5         SJMP    ??_Protocol_Put_28
   \                     ??_Protocol_Put_20:
   \   000164   EE           MOV     A,R6
   \   000165   2418         ADD     A,#0x18
   \   000167   FA           MOV     R2,A
   \   000168   E4           CLR     A
   \   000169   3F           ADDC    A,R7
   \   00016A   FB           MOV     R3,A
   \   00016B   E8           MOV     A,R0
   \   00016C   C0E0         PUSH    A
   \   00016E   8A82         MOV     DPL,R2
   \   000170   8B83         MOV     DPH,R3
   \   000172   E0           MOVX    A,@DPTR
   \   000173   F8           MOV     R0,A
   \   000174   EE           MOV     A,R6
   \   000175   28           ADD     A,R0
   \   000176   F582         MOV     DPL,A
   \   000178   E4           CLR     A
   \   000179   3F           ADDC    A,R7
   \   00017A   F583         MOV     DPH,A
   \   00017C   A3           INC     DPTR
   \   00017D   A3           INC     DPTR
   \   00017E   A3           INC     DPTR
   \   00017F   A3           INC     DPTR
   \   000180   A3           INC     DPTR
   \   000181   A3           INC     DPTR
   \   000182   A3           INC     DPTR
   \   000183   A3           INC     DPTR
   \   000184   A3           INC     DPTR
   \   000185   A3           INC     DPTR
   \   000186   D0E0         POP     A
   \   000188   F0           MOVX    @DPTR,A
   \   000189   8A82         MOV     DPL,R2
   \   00018B   8B83         MOV     DPH,R3
   \   00018D   E0           MOVX    A,@DPTR
   \   00018E   04           INC     A
   \   00018F   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   000192   E0           MOVX    A,@DPTR
   \   000193   14           DEC     A
   \   000194   F0           MOVX    @DPTR,A
   \   000195   6003         JZ      $+5
   \   000197   02....       LJMP    ??_Protocol_Put_2 & 0xFFFF
   \   00019A   02....       LJMP    ??_Protocol_Put_24 & 0xFFFF
   \                     ??_Protocol_Put_21:
   \   00019D   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   0001A0   E8           MOV     A,R0
   \   0001A1   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   0001A4   E0           MOVX    A,@DPTR
   \   0001A5   68           XRL     A,R0
   \   0001A6   7003         JNZ     $+5
   \   0001A8   02....       LJMP    ??_Protocol_Put_24 & 0xFFFF
   \   0001AB                ; Setup parameters for call to function _clean_recv_buf
   \   0001AB   EE           MOV     A,R6
   \   0001AC   FA           MOV     R2,A
   \   0001AD   EF           MOV     A,R7
   \   0001AE   FB           MOV     R3,A
   \   0001AF   12....       LCALL   `??_clean_recv_buf::?relay`; Banked call to: _clean_recv_buf
   \   0001B2                ; Setup parameters for indirect call
   \   0001B2   7A..         MOV     R2,#`?<Constant "\\320\\255\\322\\351\\320\\243\\321\\351\\2_1` & 0xff
   \   0001B4   7B..         MOV     R3,#(`?<Constant "\\320\\255\\322\\351\\320\\243\\321\\351\\2_1` >> 8) & 0xff
   \   0001B6   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_40:
   \   0001B9   12....       LCALL   ?CALL_IND
   \   0001BC   79FD         MOV     R1,#-0x3
   \   0001BE   02....       LJMP    ??_Protocol_Put_5 & 0xFFFF
   \                     ??_Protocol_Put_22:
   \   0001C1   74F8         MOV     A,#-0x8
   \   0001C3   68           XRL     A,R0
   \   0001C4   6016         JZ      ??_Protocol_Put_29
   \   0001C6                ; Setup parameters for call to function _clean_recv_buf
   \   0001C6   EE           MOV     A,R6
   \   0001C7   FA           MOV     R2,A
   \   0001C8   EF           MOV     A,R7
   \   0001C9   FB           MOV     R3,A
   \   0001CA   12....       LCALL   `??_clean_recv_buf::?relay`; Banked call to: _clean_recv_buf
   \   0001CD                ; Setup parameters for indirect call
   \   0001CD   7A..         MOV     R2,#`?<Constant "\\326\\241\\316\\262\\316\\273\\326\\303\\2` & 0xff
   \   0001CF   7B..         MOV     R3,#(`?<Constant "\\326\\241\\316\\262\\316\\273\\326\\303\\2` >> 8) & 0xff
   \   0001D1   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_41:
   \   0001D4   12....       LCALL   ?CALL_IND
   \   0001D7   79FC         MOV     R1,#-0x4
   \   0001D9   02....       LJMP    ??_Protocol_Put_5 & 0xFFFF
   \                     ??_Protocol_Put_29:
   \   0001DC   EE           MOV     A,R6
   \   0001DD   240E         ADD     A,#0xe
   \   0001DF   F582         MOV     DPL,A
   \   0001E1   E4           CLR     A
   \   0001E2   3F           ADDC    A,R7
   \   0001E3   F583         MOV     DPH,A
   \   0001E5   74F8         MOV     A,#-0x8
   \   0001E7   F0           MOVX    @DPTR,A
   \   0001E8   8E82         MOV     DPL,R6
   \   0001EA   8F83         MOV     DPH,R7
   \   0001EC   A3           INC     DPTR
   \   0001ED   A3           INC     DPTR
   \   0001EE   A3           INC     DPTR
   \   0001EF   A3           INC     DPTR
   \   0001F0   A3           INC     DPTR
   \   0001F1   A3           INC     DPTR
   \   0001F2   A3           INC     DPTR
   \   0001F3   E0           MOVX    A,@DPTR
   \   0001F4   F9           MOV     R1,A
   \   0001F5   8E82         MOV     DPL,R6
   \   0001F7   8F83         MOV     DPH,R7
   \   0001F9   A3           INC     DPTR
   \   0001FA   A3           INC     DPTR
   \   0001FB   A3           INC     DPTR
   \   0001FC   A3           INC     DPTR
   \   0001FD   A3           INC     DPTR
   \   0001FE   A3           INC     DPTR
   \   0001FF   A3           INC     DPTR
   \   000200   A3           INC     DPTR
   \   000201   A3           INC     DPTR
   \   000202   E0           MOVX    A,@DPTR
   \   000203   FC           MOV     R4,A
   \   000204   E9           MOV     A,R1
   \   000205   FD           MOV     R5,A
   \   000206   7A00         MOV     R2,#0x0
   \                     ??_Protocol_Put_30:
   \   000208   EA           MOV     A,R2
   \   000209   75F00C       MOV     B,#0xc
   \   00020C   A4           MUL     AB
   \   00020D   F8           MOV     R0,A
   \   00020E   A9F0         MOV     R1,B
   \   000210   74..         MOV     A,#Recv_Desc_P & 0xff
   \   000212   28           ADD     A,R0
   \   000213   F582         MOV     DPL,A
   \   000215   74..         MOV     A,#(Recv_Desc_P >> 8) & 0xff
   \   000217   39           ADDC    A,R1
   \   000218   F583         MOV     DPH,A
   \   00021A   E0           MOVX    A,@DPTR
   \   00021B   6C           XRL     A,R4
   \   00021C   7003         JNZ     ??_Protocol_Put_31
   \   00021E   A3           INC     DPTR
   \   00021F   E0           MOVX    A,@DPTR
   \   000220   6D           XRL     A,R5
   \                     ??_Protocol_Put_31:
   \   000221   705D         JNZ     ??_Protocol_Put_32
   \   000223   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   000226   E0           MOVX    A,@DPTR
   \   000227   F5..         MOV     ?V4,A
   \   000229   74..         MOV     A,#(Recv_Desc_P + 4) & 0xff
   \   00022B   28           ADD     A,R0
   \   00022C   F582         MOV     DPL,A
   \   00022E   74..         MOV     A,#((Recv_Desc_P + 4) >> 8) & 0xff
   \   000230   39           ADDC    A,R1
   \   000231   F583         MOV     DPH,A
   \   000233   E0           MOVX    A,@DPTR
   \   000234   65..         XRL     A,?V4
   \   000236   7048         JNZ     ??_Protocol_Put_32
   \   000238   74..         MOV     A,#Recv_Desc_P & 0xff
   \   00023A   28           ADD     A,R0
   \   00023B   F8           MOV     R0,A
   \   00023C   74..         MOV     A,#(Recv_Desc_P >> 8) & 0xff
   \   00023E   39           ADDC    A,R1
   \   00023F   F9           MOV     R1,A
   \   000240   8882         MOV     DPL,R0
   \   000242   8983         MOV     DPH,R1
   \   000244   A3           INC     DPTR
   \   000245   A3           INC     DPTR
   \   000246   A3           INC     DPTR
   \   000247   A3           INC     DPTR
   \   000248   A3           INC     DPTR
   \   000249   A3           INC     DPTR
   \   00024A   A3           INC     DPTR
   \   00024B   A3           INC     DPTR
   \   00024C   E0           MOVX    A,@DPTR
   \   00024D   FC           MOV     R4,A
   \   00024E   A3           INC     DPTR
   \   00024F   E0           MOVX    A,@DPTR
   \   000250   FD           MOV     R5,A
   \   000251   EE           MOV     A,R6
   \   000252   2413         ADD     A,#0x13
   \   000254   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   000257   8882         MOV     DPL,R0
   \   000259   8983         MOV     DPH,R1
   \   00025B   A3           INC     DPTR
   \   00025C   A3           INC     DPTR
   \   00025D   A3           INC     DPTR
   \   00025E   A3           INC     DPTR
   \   00025F   A3           INC     DPTR
   \   000260   A3           INC     DPTR
   \   000261   A3           INC     DPTR
   \   000262   A3           INC     DPTR
   \   000263   A3           INC     DPTR
   \   000264   A3           INC     DPTR
   \   000265   E0           MOVX    A,@DPTR
   \   000266   FC           MOV     R4,A
   \   000267   A3           INC     DPTR
   \   000268   E0           MOVX    A,@DPTR
   \   000269   FD           MOV     R5,A
   \   00026A   EE           MOV     A,R6
   \   00026B   2415         ADD     A,#0x15
   \   00026D   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   000270   EE           MOV     A,R6
   \   000271   2411         ADD     A,#0x11
   \   000273   F582         MOV     DPL,A
   \   000275   E4           CLR     A
   \   000276   3F           ADDC    A,R7
   \   000277   F583         MOV     DPH,A
   \   000279   E8           MOV     A,R0
   \   00027A   F0           MOVX    @DPTR,A
   \   00027B   A3           INC     DPTR
   \   00027C   E9           MOV     A,R1
   \   00027D   F0           MOVX    @DPTR,A
   \   00027E   8007         SJMP    ??_Protocol_Put_33
   \                     ??_Protocol_Put_32:
   \   000280   0A           INC     R2
   \   000281   EA           MOV     A,R2
   \   000282   C3           CLR     C
   \   000283   9403         SUBB    A,#0x3
   \   000285   4081         JC      ??_Protocol_Put_30
   \                     ??_Protocol_Put_33:
   \   000287   7403         MOV     A,#0x3
   \   000289   6A           XRL     A,R2
   \   00028A   6003         JZ      $+5
   \   00028C   02....       LJMP    ??_Protocol_Put_1 & 0xFFFF
   \   00028F                ; Setup parameters for call to function _clean_recv_buf
   \   00028F   EE           MOV     A,R6
   \   000290   FA           MOV     R2,A
   \   000291   EF           MOV     A,R7
   \   000292   FB           MOV     R3,A
   \   000293   12....       LCALL   `??_clean_recv_buf::?relay`; Banked call to: _clean_recv_buf
   \   000296                ; Setup parameters for indirect call
   \   000296   7A..         MOV     R2,#`?<Constant "\\317\\326\\323\\320\\320\\255\\322\\351\\2` & 0xff
   \   000298   7B..         MOV     R3,#(`?<Constant "\\317\\326\\323\\320\\320\\255\\322\\351\\2` >> 8) & 0xff
   \   00029A   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   00029D   12....       LCALL   ?CALL_IND
   \   0002A0   79FB         MOV     R1,#-0x5
   \   0002A2   8002         SJMP    ??_Protocol_Put_5
    201          		}
    202          	}; 
    203          	return 0;
   \                     ??_Protocol_Put_3:
   \   0002A4   7900         MOV     R1,#0x0
   \                     ??_Protocol_Put_5:
   \   0002A6   7F05         MOV     R7,#0x5
   \   0002A8   02....       LJMP    ?BANKED_LEAVE_XDATA
    204          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   EE           MOV     A,R6
   \   000001   240F         ADD     A,#0xf
   \   000003   F582         MOV     DPL,A
   \   000005   E4           CLR     A
   \   000006   3F           ADDC    A,R7
   \   000007   F583         MOV     DPH,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   F582         MOV     DPL,A
   \   000002   E4           CLR     A
   \   000003   3F           ADDC    A,R7
   \   000004   F583         MOV     DPH,A
   \   000006   EC           MOV     A,R4
   \   000007   F0           MOVX    @DPTR,A
   \   000008   A3           INC     DPTR
   \   000009   ED           MOV     A,R5
   \   00000A   F0           MOVX    @DPTR,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   EE           MOV     A,R6
   \   000001   240D         ADD     A,#0xd
   \   000003   F582         MOV     DPL,A
   \   000005   E4           CLR     A
   \   000006   3F           ADDC    A,R7
   \   000007   F583         MOV     DPH,A
   \   000009   22           RET
    205          /****************************************************
    206          	函数名:	char_special
    207          	参数:		原字符
    208          	功能: 	字符转义
    209          ****************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    210          uint16_t char_special(uint8_t num){
   \                     char_special:
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    211          	switch(num){
   \   000000   E9           MOV     A,R1
   \   000001   2408         ADD     A,#0x8
   \   000003   600D         JZ      ??char_special_0
   \   000005   24FB         ADD     A,#-0x5
   \   000007   6005         JZ      ??char_special_1
   \   000009   14           DEC     A
   \   00000A   600A         JZ      ??char_special_2
   \   00000C   800E         SJMP    ??char_special_3
    212          		case 0xFD:return 0xFE<<8 | 0x7D;
   \                     ??char_special_1:
   \   00000E   7A7D         MOV     R2,#0x7d
   \   000010   8006         SJMP    ??char_special_4
    213          		case 0xF8:return 0xFE<<8 | 0x78;
   \                     ??char_special_0:
   \   000012   7A78         MOV     R2,#0x78
   \   000014   8002         SJMP    ??char_special_4
    214          		case 0xFE:return 0xFE<<8 | 0x7E;
   \                     ??char_special_2:
   \   000016   7A7E         MOV     R2,#0x7e
   \                     ??char_special_4:
   \   000018   7BFE         MOV     R3,#-0x2
   \   00001A   8004         SJMP    ??char_special_5
    215          	}
    216          	return num;
   \                     ??char_special_3:
   \   00001C   E9           MOV     A,R1
   \   00001D   FA           MOV     R2,A
   \   00001E   7B00         MOV     R3,#0x0
   \                     ??char_special_5:
   \   000020   02....       LJMP    ?BRET
    217          }
    218          
    219          
    220          //###################################对外函数区###################################
    221          
    222          /****************************************************
    223          	函数名:	getCheckSum_ByProtocolInfo
    224          	功能:		根据协议信息获得校验和
    225          	参数:		PROTOCOL_INFO_T协议描述信息
    226          	返回值:	校验和结果
    227          	注意：	只返回低8位
    228          	作者:		liyao 2015年9月8日14:10:51
    229          ****************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    230          uint8_t getCheckSum_ByProtocolInfo(PROTOCOL_INFO_T* pi){
   \                     getCheckSum_ByProtocolInfo:
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    231          	uint8_t i, sum = 0; 
   \   000005   7E00         MOV     R6,#0x0
    232          	for(i = 1; i < pi->plen + 3;i++)
   \   000007   7F01         MOV     R7,#0x1
   \   000009   800C         SJMP    ??getCheckSum_ByProtocolInfo_0
    233          		sum+=((uint8_t*)pi)[i]; 
   \                     ??getCheckSum_ByProtocolInfo_1:
   \   00000B   EA           MOV     A,R2
   \   00000C   28           ADD     A,R0
   \   00000D   F582         MOV     DPL,A
   \   00000F   E4           CLR     A
   \   000010   3B           ADDC    A,R3
   \   000011   F583         MOV     DPH,A
   \   000013   E0           MOVX    A,@DPTR
   \   000014   2E           ADD     A,R6
   \   000015   FE           MOV     R6,A
   \   000016   0F           INC     R7
   \                     ??getCheckSum_ByProtocolInfo_0:
   \   000017   EF           MOV     A,R7
   \   000018   F8           MOV     R0,A
   \   000019   8A82         MOV     DPL,R2
   \   00001B   8B83         MOV     DPH,R3
   \   00001D   A3           INC     DPTR
   \   00001E   A3           INC     DPTR
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   7D00         MOV     R5,#0x0
   \   000022   2403         ADD     A,#0x3
   \   000024   FC           MOV     R4,A
   \   000025   5001         JNC     ??getCheckSum_ByProtocolInfo_2
   \   000027   0D           INC     R5
   \                     ??getCheckSum_ByProtocolInfo_2:
   \   000028   C3           CLR     C
   \   000029   E8           MOV     A,R0
   \   00002A   9C           SUBB    A,R4
   \   00002B   E4           CLR     A
   \   00002C   9D           SUBB    A,R5
   \   00002D   A2D2         MOV     C,0xD0 /* PSW */.2
   \   00002F   65D0         XRL     A,PSW
   \   000031   33           RLC     A
   \   000032   40D7         JC      ??getCheckSum_ByProtocolInfo_1
    234          	return (uint8_t)sum;
   \   000034   EE           MOV     A,R6
   \   000035   F9           MOV     R1,A
   \   000036                REQUIRE ?Subroutine1
   \   000036                ; // Fall through to label ?Subroutine1
    235          }
    236          
    237          /****************************************************
    238          	函数名:	Protocol_Register
    239          	功能:		协议注册
    240          	作者:		liyao 2016年9月18日16:12:16  
    241          ****************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    242          int8_t Protocol_Register(PROTOCOL_DESC_T* Desc_T,PROTOCOL_TYPE Protocol_Type){
   \                     Protocol_Register:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FC           MOV     R4,A
   \   000007   EB           MOV     A,R3
   \   000008   FD           MOV     R5,A
   \   000009   E9           MOV     A,R1
    243          	uint8_t i = 0, Max_Count;
   \   00000A   7A00         MOV     R2,#0x0
    244          	PROTOCOL_DESC_T* tmp_Desc_T;
    245          	switch((uint8_t)Protocol_Type){
   \   00000C   6008         JZ      ??Protocol_Register_0
   \   00000E   14           DEC     A
   \   00000F   600F         JZ      ??Protocol_Register_1
   \   000011   14           DEC     A
   \   000012   6016         JZ      ??Protocol_Register_2
   \   000014   8050         SJMP    ??Protocol_Register_3
    246          		case (uint8_t)SEND:
    247          			Max_Count = SEND_PROTOCOL_NUM;
   \                     ??Protocol_Register_0:
   \   000016   7B04         MOV     R3,#0x4
    248          			tmp_Desc_T = Send_Desc_P;
   \   000018   75....       MOV     ?V0,#Send_Desc_P & 0xff
   \   00001B   75....       MOV     ?V1,#(Send_Desc_P >> 8) & 0xff
    249          			break;
   \   00001E   8012         SJMP    ??Protocol_Register_4
    250          		case (uint8_t)RECEIVE:
    251          			Max_Count = RECV_PROTOCOL_NUM;
   \                     ??Protocol_Register_1:
   \   000020   7B03         MOV     R3,#0x3
    252          			tmp_Desc_T = Recv_Desc_P;
   \   000022   75....       MOV     ?V0,#Recv_Desc_P & 0xff
   \   000025   75....       MOV     ?V1,#(Recv_Desc_P >> 8) & 0xff
    253          			break;
   \   000028   8008         SJMP    ??Protocol_Register_4
    254          		case (uint8_t)TRANSPOND:
    255          			Max_Count = TRANSPOND_PROTOCOL_NUM;
   \                     ??Protocol_Register_2:
   \   00002A   7B01         MOV     R3,#0x1
    256          			tmp_Desc_T = Transpond_Desc_P;
   \   00002C   75....       MOV     ?V0,#Transpond_Desc_P & 0xff
   \   00002F   75....       MOV     ?V1,#(Transpond_Desc_P >> 8) & 0xff
    257          			break;  
    258          	}
    259          	for(i = 0; i < Max_Count; i++){
    260          		if(tmp_Desc_T[i].ModuleAction == 0){
   \                     ??Protocol_Register_4:
   \   000032   EA           MOV     A,R2
   \   000033   75F00C       MOV     B,#0xc
   \   000036   A4           MUL     AB
   \   000037   F8           MOV     R0,A
   \   000038   AFF0         MOV     R7,B
   \   00003A   EF           MOV     A,R7
   \   00003B   F9           MOV     R1,A
   \   00003C   E5..         MOV     A,?V0
   \   00003E   28           ADD     A,R0
   \   00003F   F582         MOV     DPL,A
   \   000041   E5..         MOV     A,?V1
   \   000043   39           ADDC    A,R1
   \   000044   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   000047   701C         JNZ     ??Protocol_Register_5
    261          			tmp_Desc_T[i] = *Desc_T;
   \   000049   8C82         MOV     DPL,R4
   \   00004B   8D83         MOV     DPH,R5
   \   00004D   EA           MOV     A,R2
   \   00004E   75F00C       MOV     B,#0xc
   \   000051   A4           MUL     AB
   \   000052   F8           MOV     R0,A
   \   000053   EF           MOV     A,R7
   \   000054   F9           MOV     R1,A
   \   000055   E5..         MOV     A,?V0
   \   000057   28           ADD     A,R0
   \   000058   FC           MOV     R4,A
   \   000059   E5..         MOV     A,?V1
   \   00005B   39           ADDC    A,R1
   \   00005C   FD           MOV     R5,A
   \   00005D   740C         MOV     A,#0xc
   \   00005F   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    262          			return 0;
   \   000062   F9           MOV     R1,A
   \   000063   8012         SJMP    ??Protocol_Register_6
    263          		}
    264          	}
   \                     ??Protocol_Register_5:
   \   000065   0A           INC     R2
   \                     ??Protocol_Register_3:
   \   000066   EA           MOV     A,R2
   \   000067   C3           CLR     C
   \   000068   9B           SUBB    A,R3
   \   000069   40C7         JC      ??Protocol_Register_4
    265          	Log.error("协议注册失败,数组满\r\n");
   \   00006B                ; Setup parameters for indirect call
   \   00006B   7A..         MOV     R2,#`?<Constant "\\320\\255\\322\\351\\327\\242\\262\\341\\3` & 0xff
   \   00006D   7B..         MOV     R3,#(`?<Constant "\\320\\255\\322\\351\\327\\242\\262\\341\\3` >> 8) & 0xff
   \   00006F   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_43:
   \   000072   12....       LCALL   ?CALL_IND
    266          	return -1;
   \   000075   79FF         MOV     R1,#-0x1
   \                     ??Protocol_Register_6:
   \   000077   80..         SJMP    ??Subroutine18_0
    267          	
    268          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   F583         MOV     DPH,A
   \   000002                REQUIRE ??Subroutine17_0
   \   000002                ; // Fall through to label ??Subroutine17_0
    269          
    270          /****************************************************
    271          	函数名:	Get_Protocol_Description
    272          	功能:		获取协议描述信息
    273          	作者:		liyao 2016年9月18日16:12:16  
    274          ****************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    275          PROTOCOL_DESC_T* Get_Protocol_Description(MODULE_ACTION ModuleAction,PROTOCOL_TYPE Protocol_Type){
   \                     Get_Protocol_Description:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
    276          	uint8_t i = 0, Max_Count;
   \   000006   7C00         MOV     R4,#0x0
    277          	PROTOCOL_DESC_T* tmp_Desc_T;
    278          	switch((uint8_t)Protocol_Type){
   \   000008   6008         JZ      ??Get_Protocol_Description_0
   \   00000A   14           DEC     A
   \   00000B   600F         JZ      ??Get_Protocol_Description_1
   \   00000D   14           DEC     A
   \   00000E   6016         JZ      ??Get_Protocol_Description_2
   \   000010   8042         SJMP    ??Get_Protocol_Description_3
    279          		case (uint8_t)SEND:
    280          			Max_Count = SEND_PROTOCOL_NUM;
   \                     ??Get_Protocol_Description_0:
   \   000012   7D04         MOV     R5,#0x4
    281          			tmp_Desc_T = Send_Desc_P;
   \   000014   75....       MOV     ?V0,#Send_Desc_P & 0xff
   \   000017   75....       MOV     ?V1,#(Send_Desc_P >> 8) & 0xff
    282          			break;
   \   00001A   8012         SJMP    ??Get_Protocol_Description_4
    283          		case (uint8_t)RECEIVE:
    284          			Max_Count = RECV_PROTOCOL_NUM;
   \                     ??Get_Protocol_Description_1:
   \   00001C   7D03         MOV     R5,#0x3
    285          			tmp_Desc_T = Recv_Desc_P;
   \   00001E   75....       MOV     ?V0,#Recv_Desc_P & 0xff
   \   000021   75....       MOV     ?V1,#(Recv_Desc_P >> 8) & 0xff
    286          			break;
   \   000024   8008         SJMP    ??Get_Protocol_Description_4
    287          		case (uint8_t)TRANSPOND:
    288          			Max_Count = TRANSPOND_PROTOCOL_NUM;
   \                     ??Get_Protocol_Description_2:
   \   000026   7D01         MOV     R5,#0x1
    289          			tmp_Desc_T = Transpond_Desc_P;
   \   000028   75....       MOV     ?V0,#Transpond_Desc_P & 0xff
   \   00002B   75....       MOV     ?V1,#(Transpond_Desc_P >> 8) & 0xff
    290          			break;  
    291          	}
    292          	for(i = 0; i < Max_Count; i++){
    293          		if(ModuleAction == tmp_Desc_T[i].ModuleAction)
   \                     ??Get_Protocol_Description_4:
   \   00002E   EC           MOV     A,R4
   \   00002F   75F00C       MOV     B,#0xc
   \   000032   A4           MUL     AB
   \   000033   F8           MOV     R0,A
   \   000034   A9F0         MOV     R1,B
   \   000036   E5..         MOV     A,?V0
   \   000038   28           ADD     A,R0
   \   000039   F582         MOV     DPL,A
   \   00003B   E5..         MOV     A,?V1
   \   00003D   39           ADDC    A,R1
   \   00003E   F583         MOV     DPH,A
   \   000040   E0           MOVX    A,@DPTR
   \   000041   6A           XRL     A,R2
   \   000042   7003         JNZ     ??Get_Protocol_Description_5
   \   000044   A3           INC     DPTR
   \   000045   E0           MOVX    A,@DPTR
   \   000046   6B           XRL     A,R3
   \                     ??Get_Protocol_Description_5:
   \   000047   700A         JNZ     ??Get_Protocol_Description_6
    294          			return &tmp_Desc_T[i];
   \   000049   E5..         MOV     A,?V0
   \   00004B   28           ADD     A,R0
   \   00004C   FA           MOV     R2,A
   \   00004D   E5..         MOV     A,?V1
   \   00004F   39           ADDC    A,R1
   \   000050   FB           MOV     R3,A
   \   000051   8014         SJMP    ??Get_Protocol_Description_7
    295          	}
   \                     ??Get_Protocol_Description_6:
   \   000053   0C           INC     R4
   \                     ??Get_Protocol_Description_3:
   \   000054   EC           MOV     A,R4
   \   000055   C3           CLR     C
   \   000056   9D           SUBB    A,R5
   \   000057   40D5         JC      ??Get_Protocol_Description_4
    296          	Log.error("Get_Protocol_Description未找到协议描述\r\n");
   \   000059                ; Setup parameters for indirect call
   \   000059   7A..         MOV     R2,#`?<Constant "Get_Protocol_Descript...">` & 0xff
   \   00005B   7B..         MOV     R3,#(`?<Constant "Get_Protocol_Descript...">` >> 8) & 0xff
   \   00005D   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_44:
   \   000060   12....       LCALL   ?CALL_IND
    297          	return NULL;
   \   000063   7A00         MOV     R2,#0x0
   \   000065   7B00         MOV     R3,#0x0
   \                     ??Get_Protocol_Description_7:
   \   000067   80..         SJMP    ??Subroutine18_0
    298          	
    299          }
    300          
    301          
    302          
    303          /****************************************************
    304          	函数名:	ProtocolFrame_Init
    305          	功能:		初始化全部协议和相关校验、执行函数
    306          	作者:		liyao 2015年9月8日14:10:51      
    307          ****************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    308          void ProtocolFrame_Init(SEND_INTERFACE SendHandle){
   \                     ProtocolFrame_Init:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    309          	memset(Send_Desc_P,0,sizeof(PROTOCOL_DESC_T) * SEND_PROTOCOL_NUM);
   \   000009                ; Setup parameters for call to function memset
   \   000009   75..30       MOV     ?V0,#0x30
   \   00000C   75..00       MOV     ?V1,#0x0
   \   00000F   78..         MOV     R0,#?V0
   \   000011   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000014   7C00         MOV     R4,#0x0
   \   000016   7D00         MOV     R5,#0x0
   \   000018   7A..         MOV     R2,#Send_Desc_P & 0xff
   \   00001A   7B..         MOV     R3,#(Send_Desc_P >> 8) & 0xff
   \   00001C   12....       LCALL   `??memset::?relay`   ; Banked call to: memset
   \   00001F   7402         MOV     A,#0x2
   \   000021   12....       LCALL   ?DEALLOC_XSTACK8
    310          	memset(Recv_Desc_P,0,sizeof(PROTOCOL_DESC_T) * RECV_PROTOCOL_NUM);
   \   000024                ; Setup parameters for call to function memset
   \   000024   75..24       MOV     ?V0,#0x24
   \   000027   78..         MOV     R0,#?V0
   \   000029   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002C   7C00         MOV     R4,#0x0
   \   00002E   7D00         MOV     R5,#0x0
   \   000030   7A..         MOV     R2,#Recv_Desc_P & 0xff
   \   000032   7B..         MOV     R3,#(Recv_Desc_P >> 8) & 0xff
   \   000034   12....       LCALL   `??memset::?relay`   ; Banked call to: memset
   \   000037   7402         MOV     A,#0x2
   \   000039   12....       LCALL   ?DEALLOC_XSTACK8
    311          	memset(Transpond_Desc_P,0,sizeof(PROTOCOL_DESC_T) * TRANSPOND_PROTOCOL_NUM);
   \   00003C                ; Setup parameters for call to function memset
   \   00003C   75..0C       MOV     ?V0,#0xc
   \   00003F   78..         MOV     R0,#?V0
   \   000041   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000044   7C00         MOV     R4,#0x0
   \   000046   7D00         MOV     R5,#0x0
   \   000048   7A..         MOV     R2,#Transpond_Desc_P & 0xff
   \   00004A   7B..         MOV     R3,#(Transpond_Desc_P >> 8) & 0xff
   \   00004C   12....       LCALL   `??memset::?relay`   ; Banked call to: memset
   \   00004F   7402         MOV     A,#0x2
   \   000051   12....       LCALL   ?DEALLOC_XSTACK8
    312          	//协议列表初始化
    313          	Protocol_Init(SendHandle);
   \   000054                ; Setup parameters for call to function Protocol_Init
   \   000054   EE           MOV     A,R6
   \   000055   FA           MOV     R2,A
   \   000056   EF           MOV     A,R7
   \   000057   FB           MOV     R3,A
   \   000058   12....       LCALL   `??Protocol_Init::?relay`; Banked call to: Protocol_Init
    314          	//发送数据队列初始化 
    315          #if UART1_PROTOCOL_RESOLVER
    316          	UART1_Resolver->Protocol_Queue = Queue_Init( _UART1_Protocol_QueueBuf,sizeof(PROTOCOL_INFO_T), UART1_RPQUEUE_SIZE);
   \   00005B                ; Setup parameters for call to function Queue_Init
   \   00005B   7C01         MOV     R4,#0x1
   \   00005D   7D00         MOV     R5,#0x0
   \   00005F   7913         MOV     R1,#0x13
   \   000061   7A..         MOV     R2,#_UART1_Protocol_QueueBuf & 0xff
   \   000063   7B..         MOV     R3,#(_UART1_Protocol_QueueBuf >> 8) & 0xff
   \   000065   12....       LCALL   `??Queue_Init::?relay`; Banked call to: Queue_Init
   \   000068   8A..         MOV     ?V0,R2
   \   00006A   90....       MOV     DPTR,#UART1_Resolver
   \   00006D   E0           MOVX    A,@DPTR
   \   00006E   FA           MOV     R2,A
   \   00006F   A3           INC     DPTR
   \   000070   E0           MOVX    A,@DPTR
   \   000071   F583         MOV     DPH,A
   \   000073   8A82         MOV     DPL,R2
   \   000075   E5..         MOV     A,?V0
   \   000077   F0           MOVX    @DPTR,A
   \   000078   A3           INC     DPTR
   \   000079   EB           MOV     A,R3
   \   00007A   F0           MOVX    @DPTR,A
    317          	UART1_Resolver->RPQueue_Size = UART1_RPQUEUE_SIZE; 
   \   00007B   90....       MOV     DPTR,#UART1_Resolver
   \   00007E   12....       LCALL   ??Subroutine20_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   000081   A3           INC     DPTR
   \   000082   A3           INC     DPTR
   \   000083   7401         MOV     A,#0x1
   \   000085   F0           MOVX    @DPTR,A
   \   000086   A3           INC     DPTR
   \   000087   E4           CLR     A
   \   000088   12....       LCALL   ?Subroutine7 & 0xFFFF
    318          	UART1_Resolver->Protocol_Put = _Protocol_Put;
   \                     ??CrossCallReturnLabel_11:
   \   00008B   241D         ADD     A,#0x1d
   \   00008D   F582         MOV     DPL,A
   \   00008F   E4           CLR     A
   \   000090   38           ADDC    A,R0
   \   000091   F583         MOV     DPH,A
   \   000093   74..         MOV     A,#`??_Protocol_Put::?relay` & 0xff
   \   000095   F0           MOVX    @DPTR,A
   \   000096   A3           INC     DPTR
   \   000097   74..         MOV     A,#(`??_Protocol_Put::?relay` >> 8) & 0xff
   \   000099   12....       LCALL   ?Subroutine7 & 0xFFFF
    319          	UART1_Resolver->Fetch_Protocol = _Fetch_Protocol;
   \                     ??CrossCallReturnLabel_12:
   \   00009C   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   00009F   74..         MOV     A,#`??_Fetch_Protocol::?relay` & 0xff
   \   0000A1   F0           MOVX    @DPTR,A
   \   0000A2   A3           INC     DPTR
   \   0000A3   74..         MOV     A,#(`??_Fetch_Protocol::?relay` >> 8) & 0xff
   \   0000A5   02....       LJMP    ?Subroutine0 & 0xFFFF
    320          #endif  
    321          
    322          #if UART2_PROTOCOL_RESOLVER
    323          	UART2_Resolver->Protocol_Queue = Queue_Init( _UART2_Protocol_QueueBuf,sizeof(PROTOCOL_INFO_T), UART2_RPQUEUE_SIZE);
    324          	UART2_Resolver->RPQueue_Size = UART2_RPQUEUE_SIZE; 
    325          	UART2_Resolver->Protocol_Put = _Protocol_Put;
    326          	UART2_Resolver->Fetch_Protocol = _Fetch_Protocol;
    327          #endif  
    328          	
    329          #if UART3_PROTOCOL_RESOLVER
    330          	UART3_Resolver->Protocol_Queue = Queue_Init( _UART3_Protocol_QueueBuf,sizeof(PROTOCOL_INFO_T), UART3_RPQUEUE_SIZE);
    331          	UART3_Resolver->RPQueue_Size = UART3_RPQUEUE_SIZE; 
    332          	UART3_Resolver->Protocol_Put = _Protocol_Put;
    333          	UART3_Resolver->Fetch_Protocol = _Fetch_Protocol;
    334          #endif 
    335          	
    336          #if UART4_PROTOCOL_RESOLVER
    337          	UART4_Resolver->Protocol_Queue = Queue_Init( _UART4_Protocol_QueueBuf,sizeof(PROTOCOL_INFO_T), UART4_RPQUEUE_SIZE);
    338          	UART4_Resolver->RPQueue_Size = UART4_RPQUEUE_SIZE; 
    339          	UART4_Resolver->Protocol_Put = _Protocol_Put;
    340          	UART4_Resolver->Fetch_Protocol = _Fetch_Protocol;
    341          #endif 
    342          	
    343          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   90....       MOV     DPTR,#UART1_Resolver
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F8           MOV     R0,A
   \   000006   A3           INC     DPTR
   \   000007   E0           MOVX    A,@DPTR
   \   000008   C8           XCH     A,R0
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   241F         ADD     A,#0x1f
   \   000002   F582         MOV     DPL,A
   \   000004   E4           CLR     A
   \   000005   38           ADDC    A,R0
   \   000006   F583         MOV     DPH,A
   \   000008   22           RET
    344          
    345          /****************************************************
    346          	函数名:	Protocol_To_Uart
    347          	功能:		向缓冲区写入待发送至串口
    348          	参数:		PROTOCOL_INFO_T协议描述信息
    349          	作者:		liyao 2015年9月8日14:10:51
    350          ****************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    351          int8_t Protocol_To_Uart(PROTOCOL_INFO_T* pi){ 
   \                     Protocol_To_Uart:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 100
   \   000005   749C         MOV     A,#-0x64
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    352          	uint8_t data[100] = {0};
   \   00000E   90....       MOV     DPTR,#`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0`
   \   000011   AC..         MOV     R4,?XSP + 0
   \   000013   AD..         MOV     R5,?XSP + 1
   \   000015   7464         MOV     A,#0x64
   \   000017   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    353          	uint8_t i = 0,special_H,special_L, index = 0,tmp_val;
    354          	uint16_t special_char; 
    355          	data[index++] = pi->head;
   \   00001A   8E82         MOV     DPL,R6
   \   00001C   8F83         MOV     DPH,R7
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   85..82       MOV     DPL,?XSP + 0
   \   000022   85..83       MOV     DPH,?XSP + 1
   \   000025   F0           MOVX    @DPTR,A
   \   000026   75..01       MOV     ?V0,#0x1
    356          	for(i = 1; i < pi->alen-1;i++){
   \   000029   75..01       MOV     ?V1,#0x1
   \   00002C   8009         SJMP    ??Protocol_To_Uart_0
    357                      if(i == pi->alen - 2)
    358                          tmp_val = pi->checksum;
    359                      else
    360          		tmp_val = ((uint8_t *)pi)[i];
    361          		if(tmp_val == 0xFD || tmp_val == 0xF8 || tmp_val == 0xFE){//转义
    362          			special_char = char_special(tmp_val); 
    363          			special_H =  special_char >> 8;
    364          			special_L =  special_char & 0x00ff;
    365          			data[index++] = special_H;
    366          			data[index++] = special_L;
    367          		}else{
    368          			data[index++] = tmp_val;
   \                     ??Protocol_To_Uart_1:
   \   00002E   12....       LCALL   ?Subroutine11 & 0xFFFF
    369          		}
   \                     ??CrossCallReturnLabel_30:
   \   000031   E9           MOV     A,R1
   \                     ??Protocol_To_Uart_2:
   \   000032   F0           MOVX    @DPTR,A
   \   000033   05..         INC     ?V0
   \   000035   05..         INC     ?V1
   \                     ??Protocol_To_Uart_0:
   \   000037   EE           MOV     A,R6
   \   000038   240C         ADD     A,#0xc
   \   00003A   F582         MOV     DPL,A
   \   00003C   E4           CLR     A
   \   00003D   3F           ADDC    A,R7
   \   00003E   F583         MOV     DPH,A
   \   000040   E0           MOVX    A,@DPTR
   \   000041   24FF         ADD     A,#-0x1
   \   000043   FA           MOV     R2,A
   \   000044   E4           CLR     A
   \   000045   34FF         ADDC    A,#-0x1
   \   000047   FB           MOV     R3,A
   \   000048   C3           CLR     C
   \   000049   E5..         MOV     A,?V1
   \   00004B   9A           SUBB    A,R2
   \   00004C   E4           CLR     A
   \   00004D   9B           SUBB    A,R3
   \   00004E   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000050   65D0         XRL     A,PSW
   \   000052   33           RLC     A
   \   000053   5048         JNC     ??Protocol_To_Uart_3
   \   000055   A8..         MOV     R0,?V1
   \   000057   E0           MOVX    A,@DPTR
   \   000058   24FE         ADD     A,#-0x2
   \   00005A   1A           DEC     R2
   \   00005B   E4           CLR     A
   \   00005C   34FF         ADDC    A,#-0x1
   \   00005E   FB           MOV     R3,A
   \   00005F   EA           MOV     A,R2
   \   000060   68           XRL     A,R0
   \   000061   4B           ORL     A,R3
   \   000062   700F         JNZ     ??Protocol_To_Uart_4
   \   000064   8E82         MOV     DPL,R6
   \   000066   8F83         MOV     DPH,R7
   \   000068   A3           INC     DPTR
   \   000069   A3           INC     DPTR
   \   00006A   A3           INC     DPTR
   \   00006B   A3           INC     DPTR
   \   00006C   A3           INC     DPTR
   \   00006D   A3           INC     DPTR
   \   00006E   A3           INC     DPTR
   \   00006F   A3           INC     DPTR
   \   000070   A3           INC     DPTR
   \   000071   8008         SJMP    ??Protocol_To_Uart_5
   \                     ??Protocol_To_Uart_4:
   \   000073   EE           MOV     A,R6
   \   000074   28           ADD     A,R0
   \   000075   F582         MOV     DPL,A
   \   000077   E4           CLR     A
   \   000078   3F           ADDC    A,R7
   \   000079   F583         MOV     DPH,A
   \                     ??Protocol_To_Uart_5:
   \   00007B   E0           MOVX    A,@DPTR
   \   00007C   F9           MOV     R1,A
   \   00007D   74FD         MOV     A,#-0x3
   \   00007F   69           XRL     A,R1
   \   000080   600A         JZ      ??Protocol_To_Uart_6
   \   000082   74F8         MOV     A,#-0x8
   \   000084   69           XRL     A,R1
   \   000085   6005         JZ      ??Protocol_To_Uart_6
   \   000087   74FE         MOV     A,#-0x2
   \   000089   69           XRL     A,R1
   \   00008A   70A2         JNZ     ??Protocol_To_Uart_1
   \                     ??Protocol_To_Uart_6:
   \   00008C                ; Setup parameters for call to function char_special
   \   00008C   12....       LCALL   `??char_special::?relay`; Banked call to: char_special
   \   00008F   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   000092   EB           MOV     A,R3
   \   000093   F0           MOVX    @DPTR,A
   \   000094   05..         INC     ?V0
   \   000096   08           INC     R0
   \   000097   12....       LCALL   ??Subroutine19_0 & 0xFFFF
    370          	}
   \                     ??CrossCallReturnLabel_29:
   \   00009A   EA           MOV     A,R2
   \   00009B   8095         SJMP    ??Protocol_To_Uart_2
    371          	//data[index++] = pi->checksum;
    372          	data[index++] = pi->tail;
   \                     ??Protocol_To_Uart_3:
   \   00009D   8E82         MOV     DPL,R6
   \   00009F   8F83         MOV     DPH,R7
   \   0000A1   A3           INC     DPTR
   \   0000A2   A3           INC     DPTR
   \   0000A3   A3           INC     DPTR
   \   0000A4   A3           INC     DPTR
   \   0000A5   A3           INC     DPTR
   \   0000A6   A3           INC     DPTR
   \   0000A7   A3           INC     DPTR
   \   0000A8   A3           INC     DPTR
   \   0000A9   A3           INC     DPTR
   \   0000AA   A3           INC     DPTR
   \   0000AB   E0           MOVX    A,@DPTR
   \   0000AC   C0E0         PUSH    A
   \   0000AE   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   0000B1   D0E0         POP     A
   \   0000B3   F0           MOVX    @DPTR,A
    373                  if(pi->Desc_T != NULL)
   \   0000B4   EE           MOV     A,R6
   \   0000B5   240D         ADD     A,#0xd
   \   0000B7   F582         MOV     DPL,A
   \   0000B9   E4           CLR     A
   \   0000BA   3F           ADDC    A,R7
   \   0000BB   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   0000BE   601D         JZ      ??Protocol_To_Uart_7
    374                      pi->Desc_T->send(data, index);
   \   0000C0                ; Setup parameters for indirect call
   \   0000C0   7401         MOV     A,#0x1
   \   0000C2   25..         ADD     A,?V0
   \   0000C4   F9           MOV     R1,A
   \   0000C5   AA..         MOV     R2,?XSP + 0
   \   0000C7   AB..         MOV     R3,?XSP + 1
   \   0000C9   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   0000CC   A3           INC     DPTR
   \   0000CD   E0           MOVX    A,@DPTR
   \   0000CE   C8           XCH     A,R0
   \   0000CF   2406         ADD     A,#0x6
   \   0000D1   F582         MOV     DPL,A
   \   0000D3   E4           CLR     A
   \   0000D4   38           ADDC    A,R0
   \   0000D5   F583         MOV     DPH,A
   \   0000D7   12....       LCALL   ??Subroutine20_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_35:
   \   0000DA   12....       LCALL   ?CALL_IND
    375          	return 0;
   \                     ??Protocol_To_Uart_7:
   \   0000DD   7900         MOV     R1,#0x0
   \   0000DF   7464         MOV     A,#0x64
   \   0000E1   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000E4   7F04         MOV     R7,#0x4
   \   0000E6   02....       LJMP    ?BANKED_LEAVE_XDATA
    376          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   A8..         MOV     R0,?V0
   \   000002                REQUIRE ??Subroutine19_0
   \   000002                ; // Fall through to label ??Subroutine19_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine19_0:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006   E582         MOV     A,DPL
   \   000008   28           ADD     A,R0
   \   000009   F582         MOV     DPL,A
   \   00000B   E4           CLR     A
   \   00000C   3583         ADDC    A,DPH
   \   00000E   F583         MOV     DPH,A
   \   000010   22           RET
    377          
    378          //###################################自定义扩展函数区###################################
    379          /****************************************************
    380          	函数名:	Protocol_Send
    381          	功能:		发送协议
    382          	参数:		目标板,参数结构体,参数结构体长度
    383          	注：协议历史编号统一处理
    384          	作者:		liyao 2016年9月18日11:50:55
    385          ****************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    386          void Protocol_Send(MODULE_ACTION ModuleAction,PROTOCOL_T* Protocol_t,u8 Len){ 
   \                     Protocol_Send:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 19
   \   000005   74ED         MOV     A,#-0x13
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   \   00000E   8C..         MOV     ?V2,R4
   \   000010   8D..         MOV     ?V3,R5
   \   000012   89..         MOV     ?V0,R1
    387          	PROTOCOL_INFO_T pi = {0}; 
   \   000014   90....       MOV     DPTR,#`?<Constant {0}>`
   \   000017   AC..         MOV     R4,?XSP + 0
   \   000019   AD..         MOV     R5,?XSP + 1
   \   00001B   7413         MOV     A,#0x13
   \   00001D   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    388          	PROTOCOL_DESC_T* Desc_T = Get_Protocol_Description(ModuleAction, SEND);
   \   000020                ; Setup parameters for call to function Get_Protocol_Description
   \   000020   F9           MOV     R1,A
   \   000021   12....       LCALL   `??Get_Protocol_Description::?relay`; Banked call to: Get_Protocol_Description
    389          	pi.Desc_T = Desc_T;
   \   000024   EA           MOV     A,R2
   \   000025   F8           MOV     R0,A
   \   000026   EB           MOV     A,R3
   \   000027   F9           MOV     R1,A
   \   000028   740D         MOV     A,#0xd
   \   00002A   12....       LCALL   ?XSTACK_DISP0_8
   \   00002D   E8           MOV     A,R0
   \   00002E   F0           MOVX    @DPTR,A
   \   00002F   A3           INC     DPTR
   \   000030   E9           MOV     A,R1
   \   000031   F0           MOVX    @DPTR,A
    390          	pi.head = 0xFD;
   \   000032   85..82       MOV     DPL,?XSP + 0
   \   000035   85..83       MOV     DPH,?XSP + 1
   \   000038   74FD         MOV     A,#-0x3
   \   00003A   F0           MOVX    @DPTR,A
    391          	pi.plen = Len + 3;//参数个数+3   帧长度
   \   00003B   7403         MOV     A,#0x3
   \   00003D   25..         ADD     A,?V0
   \   00003F   C0E0         PUSH    A
   \   000041   7402         MOV     A,#0x2
   \   000043   12....       LCALL   ?XSTACK_DISP0_8
   \   000046   D0E0         POP     A
   \   000048   F0           MOVX    @DPTR,A
    392          	pi.module = ModuleAction >> 8; 
   \   000049   8E..         MOV     ?V4,R6
   \   00004B   8F..         MOV     ?V5,R7
   \   00004D   7408         MOV     A,#0x8
   \   00004F   78..         MOV     R0,#?V4
   \   000051   12....       LCALL   ?SS_SHR
   \   000054   7403         MOV     A,#0x3
   \   000056   12....       LCALL   ?XSTACK_DISP0_8
   \   000059   E5..         MOV     A,?V4
   \   00005B   F0           MOVX    @DPTR,A
    393          	pi.serial = Desc_T->Serial++;
   \   00005C   EA           MOV     A,R2
   \   00005D   2405         ADD     A,#0x5
   \   00005F   F8           MOV     R0,A
   \   000060   E4           CLR     A
   \   000061   3B           ADDC    A,R3
   \   000062   F9           MOV     R1,A
   \   000063   8882         MOV     DPL,R0
   \   000065   8983         MOV     DPH,R1
   \   000067   E0           MOVX    A,@DPTR
   \   000068   C0E0         PUSH    A
   \   00006A   7404         MOV     A,#0x4
   \   00006C   12....       LCALL   ?XSTACK_DISP0_8
   \   00006F   D0E0         POP     A
   \   000071   F0           MOVX    @DPTR,A
   \   000072   8882         MOV     DPL,R0
   \   000074   8983         MOV     DPH,R1
   \   000076   E0           MOVX    A,@DPTR
   \   000077   04           INC     A
   \   000078   F0           MOVX    @DPTR,A
    394          	pi.action = ModuleAction & 0x00ff;
   \   000079   7405         MOV     A,#0x5
   \   00007B   12....       LCALL   ?XSTACK_DISP0_8
   \   00007E   EE           MOV     A,R6
   \   00007F   F0           MOVX    @DPTR,A
    395          	pi.protocol = *Protocol_t; 
   \   000080   85..82       MOV     DPL,?V2
   \   000083   85..83       MOV     DPH,?V3
   \   000086   C082         PUSH    DPL
   \   000088   C083         PUSH    DPH
   \   00008A   7406         MOV     A,#0x6
   \   00008C   12....       LCALL   ?XSTACK_DISP0_8
   \   00008F   AC82         MOV     R4,DPL
   \   000091   AD83         MOV     R5,DPH
   \   000093   D083         POP     DPH
   \   000095   D082         POP     DPL
   \   000097   7403         MOV     A,#0x3
   \   000099   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    396          	pi.checksum = getCheckSum_ByProtocolInfo(&pi);
   \   00009C                ; Setup parameters for call to function getCheckSum_ByProtocolInfo
   \   00009C   AA..         MOV     R2,?XSP + 0
   \   00009E   AB..         MOV     R3,?XSP + 1
   \   0000A0   12....       LCALL   `??getCheckSum_ByProtocolInfo::?relay`; Banked call to: getCheckSum_ByProtocolInfo
   \   0000A3   7409         MOV     A,#0x9
   \   0000A5   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A8   E9           MOV     A,R1
   \   0000A9   F0           MOVX    @DPTR,A
    397          	pi.tail = 0xF8;
   \   0000AA   740A         MOV     A,#0xa
   \   0000AC   12....       LCALL   ?XSTACK_DISP0_8
   \   0000AF   74F8         MOV     A,#-0x8
   \   0000B1   F0           MOVX    @DPTR,A
    398          	pi.paralen = Len;
   \   0000B2   740B         MOV     A,#0xb
   \   0000B4   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B7   E5..         MOV     A,?V0
   \   0000B9   F0           MOVX    @DPTR,A
    399          	pi.alen = pi.plen + 5; 
   \   0000BA   7402         MOV     A,#0x2
   \   0000BC   12....       LCALL   ?XSTACK_DISP0_8
   \   0000BF   E0           MOVX    A,@DPTR
   \   0000C0   2405         ADD     A,#0x5
   \   0000C2   C0E0         PUSH    A
   \   0000C4   740C         MOV     A,#0xc
   \   0000C6   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C9   D0E0         POP     A
   \   0000CB   F0           MOVX    @DPTR,A
    400          //         printf("%x,%x,%x,%x,%x,%x,%x,%x,%x,%x\r\n",
    401          //                                                               pi.head,
    402          //                                                               pi.standby1,
    403          //                                                               pi.plen,
    404          //                                                               pi.module,
    405          //                                                               pi.serial,
    406          //                                                               pi.action,
    407          //                                                               pi.protocol.AddrReport_P.para1,
    408          //                                                               pi.protocol.AddrReport_P.para2,
    409          //                                                               pi.checksum,
    410          //                                                               pi.tail);
    411          	Protocol_To_Uart(&pi);	
   \   0000CC                ; Setup parameters for call to function Protocol_To_Uart
   \   0000CC   AA..         MOV     R2,?XSP + 0
   \   0000CE   AB..         MOV     R3,?XSP + 1
   \   0000D0   12....       LCALL   `??Protocol_To_Uart::?relay`; Banked call to: Protocol_To_Uart
    412          }
   \   0000D3   7413         MOV     A,#0x13
   \   0000D5   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000D8   7F06         MOV     R7,#0x6
   \   0000DA   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0}>`:
   \   000000   00           DB 0
   \   000001   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000009   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000011   0000         DB 0, 0
    413          
    414          /****************************************************
    415          	函数名:	Protocol_Send_Transpond
    416          	功能:		转发协议
    417          	参数:		PROTOCOL_INFO_T结构体
    418          	作者:		liyao 2016年9月18日11:51:35
    419          ****************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    420          void Protocol_Send_Transpond(PROTOCOL_INFO_T* pi){  
   \                     Protocol_Send_Transpond:
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    421          	Protocol_To_Uart(pi);	
   \   000004                ; Setup parameters for call to function Protocol_To_Uart
   \   000004   12....       LCALL   `??Protocol_To_Uart::?relay`; Banked call to: Protocol_To_Uart
    422          }
   \   000007                REQUIRE ?Subroutine2
   \   000007                ; // Fall through to label ?Subroutine2

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    423          
    424          /*****************************************************************
    425          函数名:FetchProtocols
    426          备注: 处理上位机串口命令总函数
    427          ******************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    428          void FetchProtocols(void)
   \                     FetchProtocols:
    429          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    430          	#if UART1_PROTOCOL_RESOLVER
    431          		UART1_Resolver->Fetch_Protocol(UART1_Resolver);
   \   000004                ; Setup parameters for indirect call
   \   000004   90....       MOV     DPTR,#UART1_Resolver
   \   000007   E0           MOVX    A,@DPTR
   \   000008   FA           MOV     R2,A
   \   000009   A3           INC     DPTR
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   FB           MOV     R3,A
   \   00000C   90....       MOV     DPTR,#UART1_Resolver
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   F8           MOV     R0,A
   \   000011   A3           INC     DPTR
   \   000012   E0           MOVX    A,@DPTR
   \   000013   C8           XCH     A,R0
   \   000014   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   000017   12....       LCALL   ??Subroutine20_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_36:
   \   00001A   12....       LCALL   ?CALL_IND
    432          	#endif
    433          	#if UART2_PROTOCOL_RESOLVER
    434          		UART2_Resolver->Fetch_Protocol(UART2_Resolver);
    435          	#endif
    436          	#if UART3_PROTOCOL_RESOLVER
    437          		UART3_Resolver->Fetch_Protocol(UART3_Resolver);
    438          	#endif
    439          	#if UART4_PROTOCOL_RESOLVER
    440          		UART4_Resolver->Fetch_Protocol(UART4_Resolver);
    441          	#endif
    442          }
   \   00001D   80..         SJMP    ?Subroutine2

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for UART1_Resolver>`:
   \   000000   ....         DW _UART1_Resolver

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??_clean_recv_buf::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    _clean_recv_buf

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??_Fetch_Protocol::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    _Fetch_Protocol

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??_Protocol_Put::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    _Protocol_Put

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??char_special::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    char_special

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??getCheckSum_ByProtocolInfo::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    getCheckSum_ByProtocolInfo

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??Protocol_Register::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Protocol_Register

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??Get_Protocol_Description::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Get_Protocol_Description

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ProtocolFrame_Init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ProtocolFrame_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??Protocol_To_Uart::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Protocol_To_Uart

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??Protocol_Send::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Protocol_Send

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??Protocol_Send_Transpond::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Protocol_Send_Transpond

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??FetchProtocols::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    FetchProtocols

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\320\\255\\322\\351\\320\\243\\321\\351\\2`:
   \   000000   D0ADD2E9     DB "\320\255\322\351\320\243\321\351\262\273\315\250\271\375\015\012"
   \            D0A3D1E9
   \            B2BBCDA8
   \            B9FD0D0A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\312\\325\\265\\275\\320\\255\\322\\351\\2`:
   \   000000   CAD5B5BD     DB "\312\325\265\275\320\255\322\351\265\253\312\307\316\336\264\246\300\355\272\257\312\375\015\012"
   \            D0ADD2E9
   \            B5ABCAC7
   \            CEDEB4A6
   \            C0EDBAAF
   \            CAFD0D0A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\320\\255\\322\\351\\326\\320\\315\\276\\2`:
   \   000000   D0ADD2E9     DB "\320\255\322\351\326\320\315\276\263\366\317\3260xFD\015\012"
   \            D6D0CDBE
   \            B3F6CFD6
   \            30784644
   \            0D0A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\264\\246\\300\\355\\326\\241\\263\\244\\2`:
   \   000000   B4A6C0ED     DB "\264\246\300\355\326\241\263\244\264\355\316\363\015\012"
   \            D6A1B3A4
   \            B4EDCEF3
   \            0D0A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\320\\255\\322\\351\\320\\243\\321\\351\\2_1`:
   \   000000   D0ADD2E9     DB "\320\255\322\351\320\243\321\351\272\315\264\355\316\363\015\012"
   \            D0A3D1E9
   \            BACDB4ED
   \            CEF30D0A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\326\\241\\316\\262\\316\\273\\326\\303\\2`:
   \   000000   D6A1CEB2     DB "\326\241\316\262\316\273\326\303\267\3070xF8\264\355\316\363\015\012"
   \            CEBBD6C3
   \            B7C73078
   \            4638B4ED
   \            CEF30D0A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\317\\326\\323\\320\\320\\255\\322\\351\\2`:
   \   000000   CFD6D3D0     DB "\317\326\323\320\320\255\322\351\277\342\316\336\306\245\305\344\265\261\307\260\320\255\322\351\015\012"
   \            D0ADD2E9
   \            BFE2CEDE
   \            C6A5C5E4
   \            B5B1C7B0
   \            D0ADD2E9
   \            0D0A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\320\\255\\322\\351\\327\\242\\262\\341\\3`:
   \   000000   D0ADD2E9     DB "\320\255\322\351\327\242\262\341\312\247\260\334,\312\375\327\351\302\372\015\012"
   \            D7A2B2E1
   \            CAA7B0DC
   \            2CCAFDD7
   \            E9C2FA0D
   \            0A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Get_Protocol_Descript...">`:
   \   000000   4765745F     DB "Get_Protocol_Description\316\264\325\322\265\275\320\255\322\351\303\350\312\366\015\012"
   \            50726F74
   \            6F636F6C
   \            5F446573
   \            63726970
   \            74696F6E
   \            CEB4D5D2
   \            B5BDD0AD
   \            D2E9C3E8
   \            CAF60D0A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0`:
   \   000000   00           DB 0
   \   000001   00           DB 0
   \   000002   00           DB 0
   \   000003   00           DB 0
   \   000004   00           DB 0
   \   000005   00           DB 0
   \   000006   00           DB 0
   \   000007   00           DB 0
   \   000008   00           DB 0
   \   000009   00           DB 0
   \   00000A   00           DB 0
   \   00000B   00           DB 0
   \   00000C   00           DB 0
   \   00000D   00           DB 0
   \   00000E   00           DB 0
   \   00000F   00           DB 0
   \   000010   00           DB 0
   \   000011   00           DB 0
   \   000012   00           DB 0
   \   000013   00           DB 0
   \   000014   00           DB 0
   \   000015   00           DB 0
   \   000016   00           DB 0
   \   000017   00           DB 0
   \   000018   00           DB 0
   \   000019   00           DB 0
   \   00001A   00           DB 0
   \   00001B   00           DB 0
   \   00001C   00           DB 0
   \   00001D   00           DB 0
   \   00001E   00           DB 0
   \   00001F   00           DB 0
   \   000020   00           DB 0
   \   000021   00           DB 0
   \   000022   00           DB 0
   \   000023   00           DB 0
   \   000024   00           DB 0
   \   000025   00           DB 0
   \   000026   00           DB 0
   \   000027   00           DB 0
   \   000028   00           DB 0
   \   000029   00           DB 0
   \   00002A   00           DB 0
   \   00002B   00           DB 0
   \   00002C   00           DB 0
   \   00002D   00           DB 0
   \   00002E   00           DB 0
   \   00002F   00           DB 0
   \   000030   00           DB 0
   \   000031   00           DB 0
   \   000032   00           DB 0
   \   000033   00           DB 0
   \   000034   00           DB 0
   \   000035   00           DB 0
   \   000036   00           DB 0
   \   000037   00           DB 0
   \   000038   00           DB 0
   \   000039   00           DB 0
   \   00003A   00           DB 0
   \   00003B   00           DB 0
   \   00003C   00           DB 0
   \   00003D   00           DB 0
   \   00003E   00           DB 0
   \   00003F   00           DB 0
   \   000040   00           DB 0
   \   000041   00           DB 0
   \   000042   00           DB 0
   \   000043   00           DB 0
   \   000044   00           DB 0
   \   000045   00           DB 0
   \   000046   00           DB 0
   \   000047   00           DB 0
   \   000048   00           DB 0
   \   000049   00           DB 0
   \   00004A   00           DB 0
   \   00004B   00           DB 0
   \   00004C   00           DB 0
   \   00004D   00           DB 0
   \   00004E   00           DB 0
   \   00004F   00           DB 0
   \   000050   00           DB 0
   \   000051   00           DB 0
   \   000052   00           DB 0
   \   000053   00           DB 0
   \   000054   00           DB 0
   \   000055   00           DB 0
   \   000056   00           DB 0
   \   000057   00           DB 0
   \   000058   00           DB 0
   \   000059   00           DB 0
   \   00005A   00           DB 0
   \   00005B   00           DB 0
   \   00005C   00           DB 0
   \   00005D   00           DB 0
   \   00005E   00           DB 0
   \   00005F   00           DB 0
   \   000060   00           DB 0
   \   000061   00           DB 0
   \   000062   00           DB 0
   \   000063   00           DB 0

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      2      0   FetchProtocols
      0     43   Get_Protocol_Description
      0     12   ProtocolFrame_Init
        0     10   -> Protocol_Init
        0     10   -> Queue_Init
        0     12   -> memset
      0     10   Protocol_Register
      2     33   Protocol_Send
        0     33   -> Get_Protocol_Description
        0     33   -> Protocol_To_Uart
        0     33   -> getCheckSum_ByProtocolInfo
      2      0   Protocol_Send_Transpond
        2      0   -> Protocol_To_Uart
      1    145   Protocol_To_Uart
        0    112   -> char_special
      0     28   _Fetch_Protocol
        0     28   -> Queue_Get
      1     13   _Protocol_Put
        0     13   -> _clean_recv_buf
      0     25   _clean_recv_buf
        0     12   -> memset
      0    112   char_special
      0     42   getCheckSum_ByProtocolInfo


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      41  ?<Constant "Get_Protocol_Descript...">
      15  ?<Constant "\264\246\300\355\326\241\263\244\2
      25  ?<Constant "\312\325\265\275\320\255\322\351\2
      27  ?<Constant "\317\326\323\320\320\255\322\351\2
      17  ?<Constant "\320\255\322\351\320\243\321\351\2
      17  ?<Constant "\320\255\322\351\320\243\321\351\2_1
      19  ?<Constant "\320\255\322\351\326\320\315\276\2
      22  ?<Constant "\320\255\322\351\327\242\262\341\3
      21  ?<Constant "\326\241\316\262\316\273\326\303\2
     100  ?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
      19  ?<Constant {0}>
       2  ?<Initializer for UART1_Resolver>
       8  ??Subroutine17_0
       5  ??Subroutine18_0
      17  ??Subroutine19_0
       9  ??Subroutine20_0
       1  ?Subroutine0
       5  ?Subroutine1
       2  ?Subroutine10
       2  ?Subroutine11
      10  ?Subroutine12
      10  ?Subroutine13
       9  ?Subroutine14
      10  ?Subroutine15
      10  ?Subroutine16
       7  ?Subroutine2
      11  ?Subroutine3
       5  ?Subroutine4
      10  ?Subroutine5
       5  ?Subroutine6
      10  ?Subroutine7
      12  ?Subroutine8
       3  ?Subroutine9
      31  FetchProtocols
       6  FetchProtocols::?relay
     105  Get_Protocol_Description
       6  Get_Protocol_Description::?relay
     168  ProtocolFrame_Init
       6  ProtocolFrame_Init::?relay
     121  Protocol_Register
       6  Protocol_Register::?relay
     221  Protocol_Send
       6  Protocol_Send::?relay
       7  Protocol_Send_Transpond
       6  Protocol_Send_Transpond::?relay
     233  Protocol_To_Uart
       6  Protocol_To_Uart::?relay
      36  Recv_Desc_P
      48  Send_Desc_P
      12  Transpond_Desc_P
       2  UART1_Resolver
     131  _Fetch_Protocol
       6  _Fetch_Protocol::?relay
     683  _Protocol_Put
       6  _Protocol_Put::?relay
      19  _UART1_Protocol_QueueBuf
      33  _UART1_Resolver
      72  _clean_recv_buf
       6  _clean_recv_buf::?relay
      35  char_special
       6  char_special::?relay
      54  getCheckSum_ByProtocolInfo
       6  getCheckSum_ByProtocolInfo::?relay

 
 2 022 bytes in segment BANKED_CODE
    72 bytes in segment BANK_RELAYS
     2 bytes in segment XDATA_I
     2 bytes in segment XDATA_ID
   323 bytes in segment XDATA_ROM_C
   148 bytes in segment XDATA_Z
 
 2 096 bytes of CODE  memory
   323 bytes of CONST memory
   150 bytes of XDATA memory

Errors: none
Warnings: none
