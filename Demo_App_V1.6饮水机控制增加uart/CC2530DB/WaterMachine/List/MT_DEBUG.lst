###############################################################################
#
# IAR C/C++ Compiler V9.30.1.3056 for 8051                20/Oct/2016  09:33:51
# Copyright 2004-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        E:\×ÊÔ´(G£º)\#¸öÈËÏîÄ¿\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Components\mt\MT_DEBUG.c
#    Command line       =  
#        -f "E:\×ÊÔ´(G£º)\#¸öÈËÏîÄ¿\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.4ÒûË®»ú¿ØÖÆ -
#        ¸±±¾\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg" (-DCPU32MHZ
#        -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3 -DMAC_CFG_TX_MAX=6
#        -DMAC_CFG_RX_MAX=3) -f "E:\×ÊÔ´(G£º)\#¸öÈËÏîÄ¿\ZigbeeProject\Z-Stack
#        Mesh 1.0.0\Projects\zstack\Samples\Demo_App_V1.4ÒûË®»ú¿ØÖÆ -
#        ¸±±¾\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg" (-DZIGBEEPRO
#        -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=100 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
#        -DREJOIN_POLL_RATE=440 "E:\×ÊÔ´(G£º)\#¸öÈËÏîÄ¿\ZigbeeProject\Z-Stack
#        Mesh 1.0.0\Components\mt\MT_DEBUG.c" -D LOG_OUT -D
#        UART1_PROTOCOL_RESOLVER=1 -D xISQC -D NWK_AUTO_POLL -D ZTOOL_P1 -D
#        ISR_KEYINTERRUPT -D xMT_TASK -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D
#        xLCD_SUPPORTED=DEBUG -D xPOWER_SAVING -lC
#        "E:\×ÊÔ´(G£º)\#¸öÈËÏîÄ¿\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.4ÒûË®»ú¿ØÖÆ -
#        ¸±±¾\CC2530DB\WaterMachine\List" -lA
#        "E:\×ÊÔ´(G£º)\#¸öÈËÏîÄ¿\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.4ÒûË®»ú¿ØÖÆ -
#        ¸±±¾\CC2530DB\WaterMachine\List" --diag_suppress Pe001,Pa010 -o
#        "E:\×ÊÔ´(G£º)\#¸öÈËÏîÄ¿\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.4ÒûË®»ú¿ØÖÆ -
#        ¸±±¾\CC2530DB\WaterMachine\Obj" -e --no_code_motion --debug
#        --core=plain --dptr=16,1 --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 8 -I "E:\×ÊÔ´(G£º)\#¸öÈËÏîÄ¿\ZigbeeProject\Z-Stack
#        Mesh 1.0.0\Projects\zstack\Samples\Demo_App_V1.4ÒûË®»ú¿ØÖÆ -
#        ¸±±¾\CC2530DB\" -I "E:\×ÊÔ´(G£º)\#¸öÈËÏîÄ¿\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.4ÒûË®»ú¿ØÖÆ -
#        ¸±±¾\CC2530DB\..\Source\" -I
#        "E:\×ÊÔ´(G£º)\#¸öÈËÏîÄ¿\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.4ÒûË®»ú¿ØÖÆ -
#        ¸±±¾\CC2530DB\..\Frame\" -I
#        "E:\×ÊÔ´(G£º)\#¸öÈËÏîÄ¿\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.4ÒûË®»ú¿ØÖÆ -
#        ¸±±¾\CC2530DB\..\Module\WaterMachine\" -I
#        "E:\×ÊÔ´(G£º)\#¸öÈËÏîÄ¿\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.4ÒûË®»ú¿ØÖÆ -
#        ¸±±¾\CC2530DB\..\..\..\ZMain\TI2530DB\" -I
#        "E:\×ÊÔ´(G£º)\#¸öÈËÏîÄ¿\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.4ÒûË®»ú¿ØÖÆ -
#        ¸±±¾\CC2530DB\..\..\..\..\..\Components\hal\include\" -I
#        "E:\×ÊÔ´(G£º)\#¸öÈËÏîÄ¿\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.4ÒûË®»ú¿ØÖÆ -
#        ¸±±¾\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\" -I
#        "E:\×ÊÔ´(G£º)\#¸öÈËÏîÄ¿\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.4ÒûË®»ú¿ØÖÆ -
#        ¸±±¾\CC2530DB\..\..\..\..\..\Components\mac\include\" -I
#        "E:\×ÊÔ´(G£º)\#¸öÈËÏîÄ¿\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.4ÒûË®»ú¿ØÖÆ -
#        ¸±±¾\CC2530DB\..\..\..\..\..\Components\mac\high_level\" -I
#        "E:\×ÊÔ´(G£º)\#¸öÈËÏîÄ¿\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.4ÒûË®»ú¿ØÖÆ -
#        ¸±±¾\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\" -I
#        "E:\×ÊÔ´(G£º)\#¸öÈËÏîÄ¿\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.4ÒûË®»ú¿ØÖÆ -
#        ¸±±¾\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "E:\×ÊÔ´(G£º)\#¸öÈËÏîÄ¿\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.4ÒûË®»ú¿ØÖÆ -
#        ¸±±¾\CC2530DB\..\..\..\..\..\Components\mt\" -I
#        "E:\×ÊÔ´(G£º)\#¸öÈËÏîÄ¿\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.4ÒûË®»ú¿ØÖÆ -
#        ¸±±¾\CC2530DB\..\..\..\..\..\Components\osal\include\" -I
#        "E:\×ÊÔ´(G£º)\#¸öÈËÏîÄ¿\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.4ÒûË®»ú¿ØÖÆ -
#        ¸±±¾\CC2530DB\..\..\..\..\..\Components\services\saddr\" -I
#        "E:\×ÊÔ´(G£º)\#¸öÈËÏîÄ¿\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.4ÒûË®»ú¿ØÖÆ -
#        ¸±±¾\CC2530DB\..\..\..\..\..\Components\services\sdata\" -I
#        "E:\×ÊÔ´(G£º)\#¸öÈËÏîÄ¿\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.4ÒûË®»ú¿ØÖÆ -
#        ¸±±¾\CC2530DB\..\..\..\..\..\Components\stack\af\" -I
#        "E:\×ÊÔ´(G£º)\#¸öÈËÏîÄ¿\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.4ÒûË®»ú¿ØÖÆ -
#        ¸±±¾\CC2530DB\..\..\..\..\..\Components\stack\nwk\" -I
#        "E:\×ÊÔ´(G£º)\#¸öÈËÏîÄ¿\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.4ÒûË®»ú¿ØÖÆ -
#        ¸±±¾\CC2530DB\..\..\..\..\..\Components\stack\sapi\" -I
#        "E:\×ÊÔ´(G£º)\#¸öÈËÏîÄ¿\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.4ÒûË®»ú¿ØÖÆ -
#        ¸±±¾\CC2530DB\..\..\..\..\..\Components\stack\sec\" -I
#        "E:\×ÊÔ´(G£º)\#¸öÈËÏîÄ¿\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.4ÒûË®»ú¿ØÖÆ -
#        ¸±±¾\CC2530DB\..\..\..\..\..\Components\stack\sys\" -I
#        "E:\×ÊÔ´(G£º)\#¸öÈËÏîÄ¿\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.4ÒûË®»ú¿ØÖÆ -
#        ¸±±¾\CC2530DB\..\..\..\..\..\Components\stack\zdo\" -I
#        "E:\×ÊÔ´(G£º)\#¸öÈËÏîÄ¿\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.4ÒûË®»ú¿ØÖÆ -
#        ¸±±¾\CC2530DB\..\..\..\..\..\Components\zmac\" -I
#        "E:\×ÊÔ´(G£º)\#¸öÈËÏîÄ¿\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.4ÒûË®»ú¿ØÖÆ -
#        ¸±±¾\CC2530DB\..\..\..\..\..\Components\zmac\f8w\" -Ohz
#    List file          =  
#        E:\×ÊÔ´(G£º)\#¸öÈËÏîÄ¿\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.4ÒûË®»ú¿ØÖÆ -
#        ¸±±¾\CC2530DB\WaterMachine\List\MT_DEBUG.lst
#    Object file        =  
#        E:\×ÊÔ´(G£º)\#¸öÈËÏîÄ¿\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.4ÒûË®»ú¿ØÖÆ -
#        ¸±±¾\CC2530DB\WaterMachine\Obj\MT_DEBUG.r51
#
###############################################################################

E:\×ÊÔ´(G£º)\#¸öÈËÏîÄ¿\ZigbeeProject\Z-Stack Mesh 1.0.0\Components\mt\MT_DEBUG.c
      1          /***************************************************************************************************
      2            Filename:       MT_DEBUG.c
      3            Revised:        $Date: 2013-07-29 05:42:52 -0700 (Mon, 29 Jul 2013) $
      4            Revision:       $Revision: 34794 $
      5          
      6            Description:    MonitorTest functions for debug utilities.
      7          
      8            Copyright 2007-2013 Texas Instruments Incorporated. All rights reserved.
      9          
     10            IMPORTANT: Your use of this Software is limited to those specific rights
     11            granted under the terms of a software license agreement between the user
     12            who downloaded the software, his/her employer (which must be your employer)
     13            and Texas Instruments Incorporated (the "License"). You may not use this
     14            Software unless you agree to abide by the terms of the License. The License
     15            limits your use, and you acknowledge, that the Software may not be modified,
     16            copied or distributed unless embedded on a Texas Instruments microcontroller
     17            or used solely and exclusively in conjunction with a Texas Instruments radio
     18            frequency transceiver, which is integrated into your product. Other than for
     19            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     20            works of, modify, distribute, perform, display or sell this Software and/or
     21            its documentation for any purpose.
     22          
     23            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     24            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     25            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     26            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     27            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     28            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     29            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     30            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     31            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     32            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     33            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     34          
     35            Should you have any questions regarding your right to use this Software,
     36            contact Texas Instruments Incorporated at www.TI.com.
     37          
     38           ***************************************************************************************************/
     39          
     40          /***************************************************************************************************
     41           * INCLUDES
     42           ***************************************************************************************************/
     43          
     44          #include "ZComDef.h"
     45          #include "MT.h"
     46          #include "MT_DEBUG.h"
     47          #include "MT_UART.h"
     48          #include "mac_main.h"
     49          #include "mac_data.h"
     50          #include "mac_rx.h"
     51          #include "mac_tx.h"
     52          #include "nwk_globals.h"
     53          #include "mac_radio_defs.h"
     54          
     55          /***************************************************************************************************
     56           * LOCAL FUNCTIONs
     57           ***************************************************************************************************/
     58          
     59          #if defined (MT_DEBUG_FUNC)
     60          static void MT_DebugSetThreshold(uint8 *pBuf);
     61          static void MT_DebugMacDataDump(void);
     62          #endif
     63          
     64          #if defined (MT_DEBUG_FUNC)
     65          /***************************************************************************************************
     66           * @fn      MT_DebugProcessing
     67           *
     68           * @brief   Process all the DEBUG commands that are issued by test tool
     69           *
     70           * @param   pBuf - pointer to received buffer
     71           *
     72           * @return  status
     73           ***************************************************************************************************/
     74          uint8 MT_DebugCommandProcessing(uint8 *pBuf)
     75          {
     76            uint8 status = MT_RPC_SUCCESS;
     77          
     78            switch (pBuf[MT_RPC_POS_CMD1])
     79            {
     80              case MT_DEBUG_SET_THRESHOLD:
     81                MT_DebugSetThreshold(pBuf);
     82                break;
     83          
     84            case MT_DEBUG_MAC_DATA_DUMP:
     85                MT_DebugMacDataDump();
     86                break;
     87          
     88              default:
     89                status = MT_RPC_ERR_COMMAND_ID;
     90                break;
     91            }
     92          
     93            return status;
     94          }
     95          
     96          /***************************************************************************************************
     97           * @fn      MT_DebugSetThreshold
     98           *
     99           * @brief   Process Debug Set Threshold
    100           *
    101           * @param   pBuf - pointer to received buffer
    102           *
    103           * @return  void
    104           ***************************************************************************************************/
    105          static void MT_DebugSetThreshold(uint8 *pBuf)
    106          {
    107            uint8 retValue = ZSuccess;
    108            uint8 cmdId;
    109          
    110            /* parse header */
    111            cmdId = pBuf[MT_RPC_POS_CMD1];
    112            pBuf += MT_RPC_FRAME_HDR_SZ;
    113          
    114            /* Populate info */
    115            debugCompId = *pBuf++;
    116            debugThreshold = *pBuf;
    117          
    118            /* Build and send back the response */
    119            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_DBG), cmdId, 1, &retValue);
    120          }
    121          
    122          /***************************************************************************************************
    123           * @fn      MT_DebugMacDataDump
    124           *
    125           * @brief   Process the debug MAC Data Dump request.
    126           *
    127           * @param   pBuf - pointer to received buffer
    128           *
    129           * @return  void
    130           ***************************************************************************************************/
    131          static void MT_DebugMacDataDump(void)
    132          {
    133            uint8 buf[sizeof(mtDebugMacDataDump_t)];
    134            uint8 *pBuf = buf;
    135          
    136          #ifdef FEATURE_PACKET_FILTER_STATS
    137            *pBuf++ = BREAK_UINT32(nwkInvalidPackets, 0);
    138            *pBuf++ = BREAK_UINT32(nwkInvalidPackets, 1);
    139            *pBuf++ = BREAK_UINT32(nwkInvalidPackets, 2);
    140            *pBuf++ = BREAK_UINT32(nwkInvalidPackets, 3);
    141            *pBuf++ = BREAK_UINT32(rxCrcFailure, 0);
    142            *pBuf++ = BREAK_UINT32(rxCrcFailure, 1);
    143            *pBuf++ = BREAK_UINT32(rxCrcFailure, 2);
    144            *pBuf++ = BREAK_UINT32(rxCrcFailure, 3);
    145            *pBuf++ = BREAK_UINT32(rxCrcSuccess, 0);
    146            *pBuf++ = BREAK_UINT32(rxCrcSuccess, 1);
    147            *pBuf++ = BREAK_UINT32(rxCrcSuccess, 2);
    148            *pBuf++ = BREAK_UINT32(rxCrcSuccess, 3);
    149          #endif
    150          #if defined MAC_RADIO_CC2520
    151            *pBuf++ = macSpiReadReg(FSMSTAT0);
    152            *pBuf++ = macSpiReadReg(FSMSTAT1);
    153          #else
    154            *pBuf++ = FSMSTAT0;
    155            *pBuf++ = FSMSTAT1;
    156          #endif
    157            *pBuf++ = macData.rxCount;
    158            *pBuf++ = macData.directCount;
    159            *pBuf++ = macMain.state;
    160            *pBuf++ = macRxActive;
    161            *pBuf   = macTxActive;
    162          
    163            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_DBG),
    164                                                 MT_DEBUG_MAC_DATA_DUMP, sizeof(buf), buf);
    165          }
    166          #endif
    167          
    168          /***************************************************************************************************
    169           * @fn      MT_ProcessDebugMsg
    170           *
    171           * @brief   Build and send a debug message.
    172           *
    173           * @param   byte *data - pointer to the data portion of the debug message
    174           *
    175           * @return  void
    176           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    177          void MT_ProcessDebugMsg( mtDebugMsg_t *msg )
   \                     MT_ProcessDebugMsg:
    178          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 11
   \   000005   74F5         MOV     A,#-0xb
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    179            byte *msg_ptr;
    180            byte dataLen;
    181            uint8 buf[11];
    182            uint8 *pBuf;
    183          
    184            /* Calculate the data length based */
    185            dataLen = 5 + (msg->numParams * sizeof ( uint16 ));
   \   00000E   8E82         MOV     DPL,R6
   \   000010   8F83         MOV     DPH,R7
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   A3           INC     DPTR
   \   000016   E0           MOVX    A,@DPTR
   \   000017   C3           CLR     C
   \   000018   33           RLC     A
   \   000019   2405         ADD     A,#0x5
   \   00001B   F5..         MOV     ?V2,A
    186          
    187            /* Get a message buffer to build the debug message */
    188            msg_ptr = osal_msg_allocate( (byte)(SPI_0DATA_MSG_LEN + dataLen + 1) );
   \   00001D                ; Setup parameters for call to function osal_msg_allocate
   \   00001D   7406         MOV     A,#0x6
   \   00001F   25..         ADD     A,?V2
   \   000021   FA           MOV     R2,A
   \   000022   7B00         MOV     R3,#0x0
   \   000024   12....       LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   000027   8A..         MOV     ?V0,R2
   \   000029   8B..         MOV     ?V1,R3
    189            if ( msg_ptr )
   \   00002B   EA           MOV     A,R2
   \   00002C   45..         ORL     A,?V1
   \   00002E   7003         JNZ     $+5
   \   000030   02....       LJMP    ??MT_ProcessDebugMsg_0 & 0xFFFF
    190            {
    191              /* Build the message */
    192              pBuf = buf;
    193              *pBuf++ = msg->compID;
   \   000033   8E82         MOV     DPL,R6
   \   000035   8F83         MOV     DPH,R7
   \   000037   A3           INC     DPTR
   \   000038   A3           INC     DPTR
   \   000039   E0           MOVX    A,@DPTR
   \   00003A   85..82       MOV     DPL,?XSP + 0
   \   00003D   85..83       MOV     DPH,?XSP + 1
   \   000040   F0           MOVX    @DPTR,A
    194              *pBuf++ = msg->severity;
   \   000041   8E82         MOV     DPL,R6
   \   000043   8F83         MOV     DPH,R7
   \   000045   A3           INC     DPTR
   \   000046   A3           INC     DPTR
   \   000047   A3           INC     DPTR
   \   000048   E0           MOVX    A,@DPTR
   \   000049   C0E0         PUSH    A
   \   00004B   7401         MOV     A,#0x1
   \   00004D   12....       LCALL   ?XSTACK_DISP0_8
   \   000050   D0E0         POP     A
   \   000052   F0           MOVX    @DPTR,A
    195              *pBuf++ = msg->numParams;
   \   000053   EE           MOV     A,R6
   \   000054   2404         ADD     A,#0x4
   \   000056   F8           MOV     R0,A
   \   000057   E4           CLR     A
   \   000058   3F           ADDC    A,R7
   \   000059   F9           MOV     R1,A
   \   00005A   E8           MOV     A,R0
   \   00005B   FA           MOV     R2,A
   \   00005C   E9           MOV     A,R1
   \   00005D   FB           MOV     R3,A
   \   00005E   8A82         MOV     DPL,R2
   \   000060   8B83         MOV     DPH,R3
   \   000062   E0           MOVX    A,@DPTR
   \   000063   C0E0         PUSH    A
   \   000065   7402         MOV     A,#0x2
   \   000067   12....       LCALL   ?XSTACK_DISP0_8
   \   00006A   D0E0         POP     A
   \   00006C   F0           MOVX    @DPTR,A
   \   00006D   7403         MOV     A,#0x3
   \   00006F   12....       LCALL   ?XSTACK_DISP0_8
   \   000072   A882         MOV     R0,DPL
   \   000074   A983         MOV     R1,DPH
    196          
    197              if ( msg->numParams >= 1 )
   \   000076   8A82         MOV     DPL,R2
   \   000078   8B83         MOV     DPH,R3
   \   00007A   E0           MOVX    A,@DPTR
   \   00007B   7003         JNZ     $+5
   \   00007D   02....       LJMP    ??MT_ProcessDebugMsg_1 & 0xFFFF
    198              {
    199                *pBuf++ = LO_UINT16( msg->param1 );
   \   000080   EE           MOV     A,R6
   \   000081   2405         ADD     A,#0x5
   \   000083   F8           MOV     R0,A
   \   000084   E4           CLR     A
   \   000085   3F           ADDC    A,R7
   \   000086   F9           MOV     R1,A
   \   000087   8882         MOV     DPL,R0
   \   000089   8983         MOV     DPH,R1
   \   00008B   E0           MOVX    A,@DPTR
   \   00008C   C0E0         PUSH    A
   \   00008E   7403         MOV     A,#0x3
   \   000090   12....       LCALL   ?XSTACK_DISP0_8
   \   000093   D0E0         POP     A
   \   000095   F0           MOVX    @DPTR,A
    200                *pBuf++ = HI_UINT16( msg->param1 );
   \   000096   8882         MOV     DPL,R0
   \   000098   8983         MOV     DPH,R1
   \   00009A   A3           INC     DPTR
   \   00009B   E0           MOVX    A,@DPTR
   \   00009C   C0E0         PUSH    A
   \   00009E   7404         MOV     A,#0x4
   \   0000A0   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A3   D0E0         POP     A
   \   0000A5   F0           MOVX    @DPTR,A
   \   0000A6   7405         MOV     A,#0x5
   \   0000A8   12....       LCALL   ?XSTACK_DISP0_8
   \   0000AB   A882         MOV     R0,DPL
   \   0000AD   A983         MOV     R1,DPH
    201              }
    202          
    203              if ( msg->numParams >= 2 )
   \   0000AF   8E82         MOV     DPL,R6
   \   0000B1   8F83         MOV     DPH,R7
   \   0000B3   A3           INC     DPTR
   \   0000B4   A3           INC     DPTR
   \   0000B5   A3           INC     DPTR
   \   0000B6   A3           INC     DPTR
   \   0000B7   E0           MOVX    A,@DPTR
   \   0000B8   C3           CLR     C
   \   0000B9   9402         SUBB    A,#0x2
   \   0000BB   402F         JC      ??MT_ProcessDebugMsg_2
    204              {
    205                *pBuf++ = LO_UINT16( msg->param2 );
   \   0000BD   EE           MOV     A,R6
   \   0000BE   2407         ADD     A,#0x7
   \   0000C0   F8           MOV     R0,A
   \   0000C1   E4           CLR     A
   \   0000C2   3F           ADDC    A,R7
   \   0000C3   F9           MOV     R1,A
   \   0000C4   8882         MOV     DPL,R0
   \   0000C6   8983         MOV     DPH,R1
   \   0000C8   E0           MOVX    A,@DPTR
   \   0000C9   C0E0         PUSH    A
   \   0000CB   7405         MOV     A,#0x5
   \   0000CD   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D0   D0E0         POP     A
   \   0000D2   F0           MOVX    @DPTR,A
    206                *pBuf++ = HI_UINT16( msg->param2 );
   \   0000D3   8882         MOV     DPL,R0
   \   0000D5   8983         MOV     DPH,R1
   \   0000D7   A3           INC     DPTR
   \   0000D8   E0           MOVX    A,@DPTR
   \   0000D9   C0E0         PUSH    A
   \   0000DB   7406         MOV     A,#0x6
   \   0000DD   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E0   D0E0         POP     A
   \   0000E2   F0           MOVX    @DPTR,A
   \   0000E3   7407         MOV     A,#0x7
   \   0000E5   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E8   A882         MOV     R0,DPL
   \   0000EA   A983         MOV     R1,DPH
    207              }
    208          
    209              if ( msg->numParams == 3 )
   \                     ??MT_ProcessDebugMsg_2:
   \   0000EC   8E82         MOV     DPL,R6
   \   0000EE   8F83         MOV     DPH,R7
   \   0000F0   A3           INC     DPTR
   \   0000F1   A3           INC     DPTR
   \   0000F2   A3           INC     DPTR
   \   0000F3   A3           INC     DPTR
   \   0000F4   E0           MOVX    A,@DPTR
   \   0000F5   6403         XRL     A,#0x3
   \   0000F7   700D         JNZ     ??MT_ProcessDebugMsg_1
    210              {
    211                *pBuf++ = LO_UINT16( msg->param3 );
   \   0000F9   EE           MOV     A,R6
   \   0000FA   2409         ADD     A,#0x9
   \   0000FC   12....       LCALL   ?Subroutine0 & 0xFFFF
    212                *pBuf++ = HI_UINT16( msg->param3 );
    213              }
   \                     ??CrossCallReturnLabel_0:
   \   0000FF   E8           MOV     A,R0
   \   000100   2402         ADD     A,#0x2
   \   000102   F8           MOV     R0,A
   \   000103   5001         JNC     ??MT_ProcessDebugMsg_1
   \   000105   09           INC     R1
    214          
    215              *pBuf++ = LO_UINT16( msg->timestamp );
   \                     ??MT_ProcessDebugMsg_1:
   \   000106   EE           MOV     A,R6
   \   000107   240B         ADD     A,#0xb
   \   000109   12....       LCALL   ?Subroutine0 & 0xFFFF
    216              *pBuf = HI_UINT16( msg->timestamp );
    217          
    218          #ifdef MT_UART_DEFAULT_PORT
    219              /* Debug message is set to AREQ CMD 0x80 for now */
    220              /* Build and send back the response */
    221              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_DBG), 0x80, dataLen, buf);
   \                     ??CrossCallReturnLabel_1:
   \   00010C                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00010C   AC..         MOV     R4,?XSP + 0
   \   00010E   AD..         MOV     R5,?XSP + 1
   \   000110   AB..         MOV     R3,?V2
   \   000112   7A80         MOV     R2,#-0x80
   \   000114   7948         MOV     R1,#0x48
   \   000116   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    222          #endif
    223              osal_msg_deallocate( msg_ptr );
   \   000119                ; Setup parameters for call to function osal_msg_deallocate
   \   000119   AA..         MOV     R2,?V0
   \   00011B   AB..         MOV     R3,?V1
   \   00011D   12....       LCALL   `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
    224            }
    225          }
   \                     ??MT_ProcessDebugMsg_0:
   \   000120   740B         MOV     A,#0xb
   \   000122   12....       LCALL   ?DEALLOC_XSTACK8
   \   000125   7F06         MOV     R7,#0x6
   \   000127   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   FA           MOV     R2,A
   \   000001   E4           CLR     A
   \   000002   3F           ADDC    A,R7
   \   000003   FB           MOV     R3,A
   \   000004   8A82         MOV     DPL,R2
   \   000006   8B83         MOV     DPH,R3
   \   000008   E0           MOVX    A,@DPTR
   \   000009   8882         MOV     DPL,R0
   \   00000B   8983         MOV     DPH,R1
   \   00000D   F0           MOVX    @DPTR,A
   \   00000E   8A82         MOV     DPL,R2
   \   000010   8B83         MOV     DPH,R3
   \   000012   A3           INC     DPTR
   \   000013   E0           MOVX    A,@DPTR
   \   000014   8882         MOV     DPL,R0
   \   000016   8983         MOV     DPH,R1
   \   000018   A3           INC     DPTR
   \   000019   F0           MOVX    @DPTR,A
   \   00001A   22           RET
    226          
    227          /***************************************************************************************************
    228           * @fn      MT_ProcessDebugStr
    229           *
    230           * @brief   Build and send a debug string.
    231           *
    232           * @param   byte *dstr - pointer to the data portion of the debug message
    233           *
    234           * @return  void
    235           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    236          void MT_ProcessDebugStr(mtDebugStr_t *dstr)
   \                     MT_ProcessDebugStr:
    237          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    238            byte *msg_ptr;
    239          
    240            /* Get a message buffer to build the debug message */
    241            msg_ptr = osal_mem_alloc( (byte)(SPI_0DATA_MSG_LEN + dstr->strLen) );
   \   000009                ; Setup parameters for call to function osal_mem_alloc
   \   000009   8E82         MOV     DPL,R6
   \   00000B   8F83         MOV     DPH,R7
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   2405         ADD     A,#0x5
   \   000012   FA           MOV     R2,A
   \   000013   7B00         MOV     R3,#0x0
   \   000015   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000018   8A..         MOV     ?V0,R2
   \   00001A   8B..         MOV     ?V1,R3
    242            if ( msg_ptr )
   \   00001C   EA           MOV     A,R2
   \   00001D   45..         ORL     A,?V1
   \   00001F   6022         JZ      ??MT_ProcessDebugStr_0
    243            {
    244          #ifdef MT_UART_DEFAULT_PORT
    245              /* Debug message is set to AREQ CMD 0x80 for now */
    246              /* Build and send back the response */
    247              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_DBG), MT_DEBUG_MSG, dstr->strLen, dstr->pString);
   \   000021                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000021   8E82         MOV     DPL,R6
   \   000023   8F83         MOV     DPH,R7
   \   000025   A3           INC     DPTR
   \   000026   A3           INC     DPTR
   \   000027   A3           INC     DPTR
   \   000028   E0           MOVX    A,@DPTR
   \   000029   FC           MOV     R4,A
   \   00002A   A3           INC     DPTR
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   FD           MOV     R5,A
   \   00002D   8E82         MOV     DPL,R6
   \   00002F   8F83         MOV     DPH,R7
   \   000031   A3           INC     DPTR
   \   000032   A3           INC     DPTR
   \   000033   E0           MOVX    A,@DPTR
   \   000034   FB           MOV     R3,A
   \   000035   7A80         MOV     R2,#-0x80
   \   000037   7948         MOV     R1,#0x48
   \   000039   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    248          #endif
    249              osal_mem_free( msg_ptr );
   \   00003C                ; Setup parameters for call to function osal_mem_free
   \   00003C   AA..         MOV     R2,?V0
   \   00003E   AB..         MOV     R3,?V1
   \   000040   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    250            }
    251          }
   \                     ??MT_ProcessDebugStr_0:
   \   000043   7F04         MOV     R7,#0x4
   \   000045   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ProcessDebugMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ProcessDebugMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ProcessDebugStr::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ProcessDebugStr
    252          
    253          /**************************************************************************************************
    254           */

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      1     25   MT_ProcessDebugMsg
        0     25   -> MT_BuildAndSendZToolResponse
        0     25   -> osal_msg_allocate
        0     25   -> osal_msg_deallocate
      0     12   MT_ProcessDebugStr
        0     12   -> MT_BuildAndSendZToolResponse
        0     12   -> osal_mem_alloc
        0     12   -> osal_mem_free


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      27  ?Subroutine0
     298  MT_ProcessDebugMsg
       6  MT_ProcessDebugMsg::?relay
      72  MT_ProcessDebugStr
       6  MT_ProcessDebugStr::?relay

 
 397 bytes in segment BANKED_CODE
  12 bytes in segment BANK_RELAYS
 
 409 bytes of CODE memory

Errors: none
Warnings: none
