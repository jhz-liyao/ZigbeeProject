###############################################################################
#
# IAR C/C++ Compiler V9.30.1.3056 for 8051                25/Oct/2016  15:28:49
# Copyright 2004-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        E:\×ÊÔ´(G£º)\#¸öÈËÏîÄ¿\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Components\hal\target\CC2530EB\hal_uart.c
#    Command line       =  
#        -f "E:\×ÊÔ´(G£º)\#¸öÈËÏîÄ¿\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.8ÒûË®»ú¿ØÖÆÔö¼Óuart\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f
#        "E:\×ÊÔ´(G£º)\#¸öÈËÏîÄ¿\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.8ÒûË®»ú¿ØÖÆÔö¼Óuart\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=50 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
#        -DREJOIN_POLL_RATE=440 "E:\×ÊÔ´(G£º)\#¸öÈËÏîÄ¿\ZigbeeProject\Z-Stack
#        Mesh 1.0.0\Components\hal\target\CC2530EB\hal_uart.c" -D HAL_UART=TRUE
#        -D HAL_UART_ISR=1 -D HAL_UART_DMA=0 -D LOG_OUT -D
#        UART1_PROTOCOL_RESOLVER=1 -D xISQC -D NWK_AUTO_POLL -D xZTOOL_P1 -D
#        ISR_KEYINTERRUPT -D xMT_TASK -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D
#        xLCD_SUPPORTED=DEBUG -D xPOWER_SAVING -lC
#        "E:\×ÊÔ´(G£º)\#¸öÈËÏîÄ¿\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.8ÒûË®»ú¿ØÖÆÔö¼Óuart\CC2530DB\WaterMachine\List"
#        -lA "E:\×ÊÔ´(G£º)\#¸öÈËÏîÄ¿\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.8ÒûË®»ú¿ØÖÆÔö¼Óuart\CC2530DB\WaterMachine\List"
#        --diag_suppress Pe001,Pa010 -o
#        "E:\×ÊÔ´(G£º)\#¸öÈËÏîÄ¿\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.8ÒûË®»ú¿ØÖÆÔö¼Óuart\CC2530DB\WaterMachine\Obj"
#        -e --no_code_motion --debug --core=plain --dptr=16,1
#        --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 8 -I "E:\×ÊÔ´(G£º)\#¸öÈËÏîÄ¿\ZigbeeProject\Z-Stack
#        Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.8ÒûË®»ú¿ØÖÆÔö¼Óuart\CC2530DB\"
#        -I "E:\×ÊÔ´(G£º)\#¸öÈËÏîÄ¿\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.8ÒûË®»ú¿ØÖÆÔö¼Óuart\CC2530DB\..\Source\"
#        -I "E:\×ÊÔ´(G£º)\#¸öÈËÏîÄ¿\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.8ÒûË®»ú¿ØÖÆÔö¼Óuart\CC2530DB\..\Frame\"
#        -I "E:\×ÊÔ´(G£º)\#¸öÈËÏîÄ¿\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.8ÒûË®»ú¿ØÖÆÔö¼Óuart\CC2530DB\..\Module\WaterMachine\"
#        -I "E:\×ÊÔ´(G£º)\#¸öÈËÏîÄ¿\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.8ÒûË®»ú¿ØÖÆÔö¼Óuart\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "E:\×ÊÔ´(G£º)\#¸öÈËÏîÄ¿\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.8ÒûË®»ú¿ØÖÆÔö¼Óuart\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "E:\×ÊÔ´(G£º)\#¸öÈËÏîÄ¿\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.8ÒûË®»ú¿ØÖÆÔö¼Óuart\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "E:\×ÊÔ´(G£º)\#¸öÈËÏîÄ¿\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.8ÒûË®»ú¿ØÖÆÔö¼Óuart\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "E:\×ÊÔ´(G£º)\#¸öÈËÏîÄ¿\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.8ÒûË®»ú¿ØÖÆÔö¼Óuart\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "E:\×ÊÔ´(G£º)\#¸öÈËÏîÄ¿\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.8ÒûË®»ú¿ØÖÆÔö¼Óuart\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "E:\×ÊÔ´(G£º)\#¸öÈËÏîÄ¿\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.8ÒûË®»ú¿ØÖÆÔö¼Óuart\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "E:\×ÊÔ´(G£º)\#¸öÈËÏîÄ¿\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.8ÒûË®»ú¿ØÖÆÔö¼Óuart\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "E:\×ÊÔ´(G£º)\#¸öÈËÏîÄ¿\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.8ÒûË®»ú¿ØÖÆÔö¼Óuart\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "E:\×ÊÔ´(G£º)\#¸öÈËÏîÄ¿\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.8ÒûË®»ú¿ØÖÆÔö¼Óuart\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "E:\×ÊÔ´(G£º)\#¸öÈËÏîÄ¿\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.8ÒûË®»ú¿ØÖÆÔö¼Óuart\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "E:\×ÊÔ´(G£º)\#¸öÈËÏîÄ¿\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.8ÒûË®»ú¿ØÖÆÔö¼Óuart\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "E:\×ÊÔ´(G£º)\#¸öÈËÏîÄ¿\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.8ÒûË®»ú¿ØÖÆÔö¼Óuart\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "E:\×ÊÔ´(G£º)\#¸öÈËÏîÄ¿\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.8ÒûË®»ú¿ØÖÆÔö¼Óuart\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "E:\×ÊÔ´(G£º)\#¸öÈËÏîÄ¿\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.8ÒûË®»ú¿ØÖÆÔö¼Óuart\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "E:\×ÊÔ´(G£º)\#¸öÈËÏîÄ¿\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.8ÒûË®»ú¿ØÖÆÔö¼Óuart\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "E:\×ÊÔ´(G£º)\#¸öÈËÏîÄ¿\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.8ÒûË®»ú¿ØÖÆÔö¼Óuart\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "E:\×ÊÔ´(G£º)\#¸öÈËÏîÄ¿\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.8ÒûË®»ú¿ØÖÆÔö¼Óuart\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "E:\×ÊÔ´(G£º)\#¸öÈËÏîÄ¿\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.8ÒûË®»ú¿ØÖÆÔö¼Óuart\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -Ohz
#    List file          =  
#        E:\×ÊÔ´(G£º)\#¸öÈËÏîÄ¿\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.8ÒûË®»ú¿ØÖÆÔö¼Óuart\CC2530DB\WaterMachine\List\hal_uart.lst
#    Object file        =  
#        E:\×ÊÔ´(G£º)\#¸öÈËÏîÄ¿\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.8ÒûË®»ú¿ØÖÆÔö¼Óuart\CC2530DB\WaterMachine\Obj\hal_uart.r51
#
###############################################################################

E:\×ÊÔ´(G£º)\#¸öÈËÏîÄ¿\ZigbeeProject\Z-Stack Mesh 1.0.0\Components\hal\target\CC2530EB\hal_uart.c
      1          /**************************************************************************************************
      2            Filename:       _hal_uart.c
      3            Revised:        $Date: 2009-06-12 09:16:43 -0700 (Fri, 12 Jun 2009) $
      4            Revision:       $Revision: 20142 $
      5          
      6            Description: This file contains the interface to the H/W UART driver.
      7          
      8          
      9            Copyright 2006-2009 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          
     44          #include "hal_board_cfg.h"

   \                                 In  segment SFR_AN, at 0x86
   \   unsigned char volatile __sfr U0CSR
   \                     U0CSR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x95
   \   unsigned char volatile __sfr ST0
   \                     ST0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x9a
   \   unsigned char volatile __sfr IEN2
   \                     IEN2:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xa8
   \   union <unnamed> volatile __sfr _A_IEN0
   \                     _A_IEN0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc1
   \   unsigned char volatile __sfr U0DBUF
   \                     U0DBUF:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc2
   \   unsigned char volatile __sfr U0BAUD
   \                     U0BAUD:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc4
   \   unsigned char volatile __sfr U0UCR
   \                     U0UCR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc5
   \   unsigned char volatile __sfr U0GCR
   \                     U0GCR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xe8
   \   union <unnamed> volatile __sfr _A_IRCON2
   \                     _A_IRCON2:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf1
   \   unsigned char volatile __sfr PERCFG
   \                     PERCFG:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf2
   \   unsigned char volatile __sfr ADCCFG
   \                     ADCCFG:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf3
   \   unsigned char volatile __sfr P0SEL
   \                     P0SEL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xff
   \   unsigned char volatile __sfr P2DIR
   \                     P2DIR:
   \   000000                DS 1
     45          #include "hal_defs.h"
     46          #include "hal_types.h"
     47          #include "hal_uart.h"
     48          
     49          /*********************************************************************
     50           * MACROS
     51           */
     52          
     53          /*********************************************************************
     54           * TYPEDEFS
     55           */
     56          
     57          /*********************************************************************
     58           * CONSTANTS
     59           */
     60          
     61          /*********************************************************************
     62           * GLOBAL VARIABLES
     63           */
     64          
     65          /*********************************************************************
     66           * GLOBAL FUNCTIONS
     67           */
     68          
     69          /*********************************************************************
     70           * LOCAL VARIABLES
     71           */
     72          
     73          /*********************************************************************
     74           * LOCAL FUNCTIONS
     75           */
     76          
     77          #if HAL_UART_DMA
     78          #include "_hal_uart_dma.c"
     79          #endif
     80          #if HAL_UART_ISR
     81          #include "_hal_uart_isr.c"

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \   static uartISRCfg_t isrCfg
   \                     isrCfg:
   \   000000                DS 265
   \   000109                REQUIRE __INIT_XDATA_Z

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   __banked_func __xdata_reentrant uint16 HalUARTReadISR(uint8 *, uint16)
   \                     HalUARTReadISR:
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   7800         MOV     R0,#0x0
   \   000007   7900         MOV     R1,#0x0
   \   000009   8027         SJMP    ??HalUARTReadISR_0
   \                     ??HalUARTReadISR_1:
   \   00000B   74..         MOV     A,#isrCfg & 0xff
   \   00000D   2E           ADD     A,R6
   \   00000E   F582         MOV     DPL,A
   \   000010   E4           CLR     A
   \   000011   34..         ADDC    A,#(isrCfg >> 8) & 0xff
   \   000013   F583         MOV     DPH,A
   \   000015   E0           MOVX    A,@DPTR
   \   000016   8A82         MOV     DPL,R2
   \   000018   8B83         MOV     DPH,R3
   \   00001A   F0           MOVX    @DPTR,A
   \   00001B   90....       MOV     DPTR,#isrCfg + 128
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   04           INC     A
   \   000020   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   000023   C3           CLR     C
   \   000024   9480         SUBB    A,#-0x80
   \   000026   4005         JC      ??HalUARTReadISR_2
   \   000028   90....       MOV     DPTR,#isrCfg + 128
   \   00002B   E4           CLR     A
   \   00002C   F0           MOVX    @DPTR,A
   \                     ??HalUARTReadISR_2:
   \   00002D   08           INC     R0
   \   00002E   E8           MOV     A,R0
   \   00002F   7001         JNZ     ??HalUARTReadISR_0
   \   000031   09           INC     R1
   \                     ??HalUARTReadISR_0:
   \   000032   90....       MOV     DPTR,#isrCfg + 128
   \   000035   E0           MOVX    A,@DPTR
   \   000036   FE           MOV     R6,A
   \   000037   A3           INC     DPTR
   \   000038   E0           MOVX    A,@DPTR
   \   000039   6E           XRL     A,R6
   \   00003A   6007         JZ      ??HalUARTReadISR_3
   \   00003C   C3           CLR     C
   \   00003D   E8           MOV     A,R0
   \   00003E   9C           SUBB    A,R4
   \   00003F   E9           MOV     A,R1
   \   000040   9D           SUBB    A,R5
   \   000041   40C8         JC      ??HalUARTReadISR_1
   \                     ??HalUARTReadISR_3:
   \   000043   E8           MOV     A,R0
   \   000044   FA           MOV     R2,A
   \   000045   E9           MOV     A,R1
   \   000046   FB           MOV     R3,A
   \   000047   02....       LJMP    ?Subroutine0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   A3           INC     DPTR
   \   000006   AA82         MOV     R2,DPL
   \   000008   AB83         MOV     R3,DPH
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   __banked_func __xdata_reentrant uint16 HalUARTWriteISR(uint8 *, uint16)
   \                     HalUARTWriteISR:
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   90....       MOV     DPTR,#isrCfg + 260
   \   000008   E0           MOVX    A,@DPTR
   \   000009   F8           MOV     R0,A
   \   00000A   A3           INC     DPTR
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   C3           CLR     C
   \   00000D   98           SUBB    A,R0
   \   00000E   90....       MOV     DPTR,#isrCfg + 260
   \   000011   E0           MOVX    A,@DPTR
   \   000012   FE           MOV     R6,A
   \   000013   A3           INC     DPTR
   \   000014   E0           MOVX    A,@DPTR
   \   000015   F8           MOV     R0,A
   \   000016   EE           MOV     A,R6
   \   000017   5010         JNC     ??HalUARTWriteISR_0
   \   000019   C3           CLR     C
   \   00001A   98           SUBB    A,R0
   \   00001B   F8           MOV     R0,A
   \   00001C   95E0         SUBB    A,0xE0 /* A   */
   \   00001E   F9           MOV     R1,A
   \   00001F   E8           MOV     A,R0
   \   000020   24FF         ADD     A,#-0x1
   \   000022   18           DEC     R0
   \   000023   E9           MOV     A,R1
   \   000024   34FF         ADDC    A,#-0x1
   \   000026   F9           MOV     R1,A
   \   000027   800D         SJMP    ??HalUARTWriteISR_1
   \                     ??HalUARTWriteISR_0:
   \   000029   C3           CLR     C
   \   00002A   98           SUBB    A,R0
   \   00002B   F8           MOV     R0,A
   \   00002C   95E0         SUBB    A,0xE0 /* A   */
   \   00002E   F9           MOV     R1,A
   \   00002F   E8           MOV     A,R0
   \   000030   247F         ADD     A,#0x7f
   \   000032   F8           MOV     R0,A
   \   000033   5001         JNC     ??HalUARTWriteISR_1
   \   000035   09           INC     R1
   \                     ??HalUARTWriteISR_1:
   \   000036   C3           CLR     C
   \   000037   E8           MOV     A,R0
   \   000038   9C           SUBB    A,R4
   \   000039   E9           MOV     A,R1
   \   00003A   9D           SUBB    A,R5
   \   00003B   5006         JNC     ??HalUARTWriteISR_2
   \   00003D   7A00         MOV     R2,#0x0
   \   00003F   7B00         MOV     R3,#0x0
   \   000041   8048         SJMP    ??HalUARTWriteISR_3
   \                     ??HalUARTWriteISR_2:
   \   000043   7800         MOV     R0,#0x0
   \   000045   7900         MOV     R1,#0x0
   \   000047   800B         SJMP    ??HalUARTWriteISR_4
   \                     ??HalUARTWriteISR_5:
   \   000049   E0           MOVX    A,@DPTR
   \   00004A   04           INC     A
   \                     ??HalUARTWriteISR_6:
   \   00004B   F0           MOVX    @DPTR,A
   \   00004C   439A04       ORL     0x9a,#0x4
   \   00004F   08           INC     R0
   \   000050   E8           MOV     A,R0
   \   000051   7001         JNZ     ??HalUARTWriteISR_4
   \   000053   09           INC     R1
   \                     ??HalUARTWriteISR_4:
   \   000054   C3           CLR     C
   \   000055   E8           MOV     A,R0
   \   000056   9C           SUBB    A,R4
   \   000057   E9           MOV     A,R1
   \   000058   9D           SUBB    A,R5
   \   000059   502C         JNC     ??HalUARTWriteISR_7
   \   00005B   8A82         MOV     DPL,R2
   \   00005D   8B83         MOV     DPH,R3
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   C0E0         PUSH    A
   \   000062   90....       MOV     DPTR,#isrCfg + 261
   \   000065   E0           MOVX    A,@DPTR
   \   000066   FE           MOV     R6,A
   \   000067   74..         MOV     A,#(isrCfg + 132) & 0xff
   \   000069   2E           ADD     A,R6
   \   00006A   F582         MOV     DPL,A
   \   00006C   E4           CLR     A
   \   00006D   34..         ADDC    A,#((isrCfg + 132) >> 8) & 0xff
   \   00006F   F583         MOV     DPH,A
   \   000071   D0E0         POP     A
   \   000073   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   000076   90....       MOV     DPTR,#isrCfg + 262
   \   000079   E4           CLR     A
   \   00007A   F0           MOVX    @DPTR,A
   \   00007B   90....       MOV     DPTR,#isrCfg + 261
   \   00007E   E0           MOVX    A,@DPTR
   \   00007F   C3           CLR     C
   \   000080   947F         SUBB    A,#0x7f
   \   000082   40C5         JC      ??HalUARTWriteISR_5
   \   000084   E4           CLR     A
   \   000085   80C4         SJMP    ??HalUARTWriteISR_6
   \                     ??HalUARTWriteISR_7:
   \   000087   E8           MOV     A,R0
   \   000088   FA           MOV     R2,A
   \   000089   E9           MOV     A,R1
   \   00008A   FB           MOV     R3,A
   \                     ??HalUARTWriteISR_3:
   \   00008B   02....       LJMP    ?Subroutine0 & 0xFFFF
   \   00008E                REQUIRE IEN2

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   static __banked_func __xdata_reentrant void HalUARTPollISR(void)
   \                     HalUARTPollISR:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   90....       MOV     DPTR,#isrCfg + 263
   \   000008   E0           MOVX    A,@DPTR
   \   000009   F8           MOV     R0,A
   \   00000A   A3           INC     DPTR
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   F9           MOV     R1,A
   \   00000D   E8           MOV     A,R0
   \   00000E   49           ORL     A,R1
   \   00000F   6073         JZ      ??HalUARTPollISR_0
   \   000011                ; Setup parameters for call to function HalUARTRxAvailISR
   \   000011   12....       LCALL   `??HalUARTRxAvailISR::?relay`; Banked call to: HalUARTRxAvailISR
   \   000014   8A..         MOV     ?V0,R2
   \   000016   8B..         MOV     ?V1,R3
   \   000018   A8..         MOV     R0,?V0
   \   00001A   A9..         MOV     R1,?V1
   \   00001C   7A00         MOV     R2,#0x0
   \   00001E   90....       MOV     DPTR,#isrCfg + 130
   \   000021   E0           MOVX    A,@DPTR
   \   000022   6019         JZ      ??HalUARTPollISR_1
   \   000024   A3           INC     DPTR
   \   000025   E0           MOVX    A,@DPTR
   \   000026   FB           MOV     R3,A
   \   000027   E595         MOV     A,0x95
   \   000029   C3           CLR     C
   \   00002A   9B           SUBB    A,R3
   \   00002B   FB           MOV     R3,A
   \   00002C   90....       MOV     DPTR,#isrCfg + 130
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   FC           MOV     R4,A
   \   000031   EB           MOV     A,R3
   \   000032   C3           CLR     C
   \   000033   9C           SUBB    A,R4
   \   000034   5005         JNC     ??HalUARTPollISR_2
   \   000036   E0           MOVX    A,@DPTR
   \   000037   C3           CLR     C
   \   000038   9B           SUBB    A,R3
   \   000039   8001         SJMP    ??HalUARTPollISR_3
   \                     ??HalUARTPollISR_2:
   \   00003B   E4           CLR     A
   \                     ??HalUARTPollISR_3:
   \   00003C   F0           MOVX    @DPTR,A
   \                     ??HalUARTPollISR_1:
   \   00003D   E595         MOV     A,0x95
   \   00003F   A3           INC     DPTR
   \   000040   F0           MOVX    @DPTR,A
   \   000041   C3           CLR     C
   \   000042   E8           MOV     A,R0
   \   000043   947F         SUBB    A,#0x7f
   \   000045   E9           MOV     A,R1
   \   000046   9400         SUBB    A,#0x0
   \   000048   4004         JC      ??HalUARTPollISR_4
   \   00004A   7A01         MOV     R2,#0x1
   \   00004C   8019         SJMP    ??HalUARTPollISR_5
   \                     ??HalUARTPollISR_4:
   \   00004E   C3           CLR     C
   \   00004F   E8           MOV     A,R0
   \   000050   9430         SUBB    A,#0x30
   \   000052   E9           MOV     A,R1
   \   000053   9400         SUBB    A,#0x0
   \   000055   4004         JC      ??HalUARTPollISR_6
   \   000057   7A02         MOV     R2,#0x2
   \   000059   800C         SJMP    ??HalUARTPollISR_5
   \                     ??HalUARTPollISR_6:
   \   00005B   E8           MOV     A,R0
   \   00005C   49           ORL     A,R1
   \   00005D   6008         JZ      ??HalUARTPollISR_5
   \   00005F   90....       MOV     DPTR,#isrCfg + 130
   \   000062   E0           MOVX    A,@DPTR
   \   000063   7002         JNZ     ??HalUARTPollISR_5
   \   000065   7A04         MOV     R2,#0x4
   \                     ??HalUARTPollISR_5:
   \   000067   90....       MOV     DPTR,#isrCfg + 262
   \   00006A   E0           MOVX    A,@DPTR
   \   00006B   6006         JZ      ??HalUARTPollISR_7
   \   00006D   E4           CLR     A
   \   00006E   F0           MOVX    @DPTR,A
   \   00006F   EA           MOV     A,R2
   \   000070   D2E4         SETB    0xE0 /* A   */.4
   \   000072   FA           MOV     R2,A
   \                     ??HalUARTPollISR_7:
   \   000073   EA           MOV     A,R2
   \   000074   600E         JZ      ??HalUARTPollISR_0
   \   000076                ; Setup parameters for indirect call
   \   000076   7900         MOV     R1,#0x0
   \   000078   A3           INC     DPTR
   \   000079   E0           MOVX    A,@DPTR
   \   00007A   F8           MOV     R0,A
   \   00007B   A3           INC     DPTR
   \   00007C   E0           MOVX    A,@DPTR
   \   00007D   F583         MOV     DPH,A
   \   00007F   8882         MOV     DPL,R0
   \   000081   12....       LCALL   ?CALL_IND
   \                     ??HalUARTPollISR_0:
   \   000084   7F02         MOV     R7,#0x2
   \   000086   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   000089                REQUIRE ST0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   static __banked_func __xdata_reentrant uint16 HalUARTRxAvailISR(void)
   \                     HalUARTRxAvailISR:
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   90....       MOV     DPTR,#isrCfg + 129
   \   000007   E0           MOVX    A,@DPTR
   \   000008   F8           MOV     R0,A
   \   000009   90....       MOV     DPTR,#isrCfg + 128
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   F9           MOV     R1,A
   \   00000E   E8           MOV     A,R0
   \   00000F   C3           CLR     C
   \   000010   99           SUBB    A,R1
   \   000011   E0           MOVX    A,@DPTR
   \   000012   FA           MOV     R2,A
   \   000013   4008         JC      ??HalUARTRxAvailISR_0
   \   000015   E8           MOV     A,R0
   \   000016   C3           CLR     C
   \   000017   9A           SUBB    A,R2
   \   000018   FA           MOV     R2,A
   \   000019   95E0         SUBB    A,0xE0 /* A   */
   \   00001B   800D         SJMP    ??HalUARTRxAvailISR_1
   \                     ??HalUARTRxAvailISR_0:
   \   00001D   7480         MOV     A,#-0x80
   \   00001F   C3           CLR     C
   \   000020   9A           SUBB    A,R2
   \   000021   FA           MOV     R2,A
   \   000022   95E0         SUBB    A,0xE0 /* A   */
   \   000024   FB           MOV     R3,A
   \   000025   EA           MOV     A,R2
   \   000026   28           ADD     A,R0
   \   000027   FA           MOV     R2,A
   \   000028   E4           CLR     A
   \   000029   3B           ADDC    A,R3
   \                     ??HalUARTRxAvailISR_1:
   \   00002A   FB           MOV     R3,A
   \   00002B                REQUIRE ?Subroutine1
   \   00002B                ; // Fall through to label ?Subroutine1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \   __near_func __xdata_reentrant __interrupt void halUart0RxIsr(void)
   \                     halUart0RxIsr:
   \   000000   C0E0         PUSH    A
   \   000002   C0D0         PUSH    PSW
   \   000004   E8           MOV     A,R0
   \   000005   C0E0         PUSH    A
   \   000007   E9           MOV     A,R1
   \   000008   C0E0         PUSH    A
   \   00000A   C082         PUSH    DPL
   \   00000C   C083         PUSH    DPH
   \   00000E                ; Saved register size: 6
   \   00000E                ; Auto size: 0
   \   00000E   A8C1         MOV     R0,0xc1+0x0
   \   000010   E8           MOV     A,R0
   \   000011   C0E0         PUSH    A
   \   000013   90....       MOV     DPTR,#isrCfg + 129
   \   000016   E0           MOVX    A,@DPTR
   \   000017   F8           MOV     R0,A
   \   000018   74..         MOV     A,#isrCfg & 0xff
   \   00001A   28           ADD     A,R0
   \   00001B   F582         MOV     DPL,A
   \   00001D   E4           CLR     A
   \   00001E   34..         ADDC    A,#(isrCfg >> 8) & 0xff
   \   000020   F583         MOV     DPH,A
   \   000022   D0E0         POP     A
   \   000024   F0           MOVX    @DPTR,A
   \   000025   90....       MOV     DPTR,#isrCfg + 128
   \   000028   E0           MOVX    A,@DPTR
   \   000029   F8           MOV     R0,A
   \   00002A   A3           INC     DPTR
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   68           XRL     A,R0
   \   00002D   7006         JNZ     ??halUart0RxIsr_0
   \   00002F   E595         MOV     A,0x95
   \   000031   90....       MOV     DPTR,#isrCfg + 131
   \   000034   F0           MOVX    @DPTR,A
   \                     ??halUart0RxIsr_0:
   \   000035   90....       MOV     DPTR,#isrCfg + 129
   \   000038   E0           MOVX    A,@DPTR
   \   000039   04           INC     A
   \   00003A   F0           MOVX    @DPTR,A
   \   00003B   C3           CLR     C
   \   00003C   9480         SUBB    A,#-0x80
   \   00003E   4002         JC      ??halUart0RxIsr_1
   \   000040   E4           CLR     A
   \   000041   F0           MOVX    @DPTR,A
   \                     ??halUart0RxIsr_1:
   \   000042   A3           INC     DPTR
   \   000043   74C6         MOV     A,#-0x3a
   \   000045   F0           MOVX    @DPTR,A
   \   000046                REQUIRE ?Subroutine2
   \   000046                REQUIRE U0DBUF
   \   000046                REQUIRE ST0
   \   000046                ; // Fall through to label ?Subroutine2

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   D0E0         POP     A
   \   000006   F9           MOV     R1,A
   \   000007   D0E0         POP     A
   \   000009   F8           MOV     R0,A
   \   00000A   D0D0         POP     PSW
   \   00000C   D0E0         POP     A
   \   00000E   32           RETI

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \   __near_func __xdata_reentrant __interrupt void halUart0TxIsr(void)
   \                     halUart0TxIsr:
   \   000000   C0E0         PUSH    A
   \   000002   C0D0         PUSH    PSW
   \   000004   E8           MOV     A,R0
   \   000005   C0E0         PUSH    A
   \   000007   E9           MOV     A,R1
   \   000008   C0E0         PUSH    A
   \   00000A   C082         PUSH    DPL
   \   00000C   C083         PUSH    DPH
   \   00000E                ; Saved register size: 6
   \   00000E                ; Auto size: 0
   \   00000E   90....       MOV     DPTR,#isrCfg + 260
   \   000011   E0           MOVX    A,@DPTR
   \   000012   F8           MOV     R0,A
   \   000013   A3           INC     DPTR
   \   000014   E0           MOVX    A,@DPTR
   \   000015   68           XRL     A,R0
   \   000016   7008         JNZ     ??halUart0TxIsr_0
   \   000018   539AFB       ANL     0x9a,#0xfb
   \   00001B   A3           INC     DPTR
   \   00001C   7401         MOV     A,#0x1
   \   00001E   8022         SJMP    ??halUart0TxIsr_1
   \                     ??halUart0TxIsr_0:
   \   000020   C2E9         CLR     0xe8.1
   \   000022   90....       MOV     DPTR,#isrCfg + 260
   \   000025   E0           MOVX    A,@DPTR
   \   000026   F8           MOV     R0,A
   \   000027   7401         MOV     A,#0x1
   \   000029   28           ADD     A,R0
   \   00002A   F0           MOVX    @DPTR,A
   \   00002B   74..         MOV     A,#(isrCfg + 132) & 0xff
   \   00002D   28           ADD     A,R0
   \   00002E   F582         MOV     DPL,A
   \   000030   E4           CLR     A
   \   000031   34..         ADDC    A,#((isrCfg + 132) >> 8) & 0xff
   \   000033   F583         MOV     DPH,A
   \   000035   E0           MOVX    A,@DPTR
   \   000036   F5C1         MOV     0xc1,A
   \   000038   90....       MOV     DPTR,#isrCfg + 260
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   C3           CLR     C
   \   00003D   9480         SUBB    A,#-0x80
   \   00003F   4002         JC      ??halUart0TxIsr_2
   \   000041   E4           CLR     A
   \                     ??halUart0TxIsr_1:
   \   000042   F0           MOVX    @DPTR,A
   \                     ??halUart0TxIsr_2:
   \   000043   80..         SJMP    ?Subroutine2
   \   000045                REQUIRE IEN2
   \   000045                REQUIRE _A_IRCON2
   \   000045                REQUIRE U0DBUF
     82          #endif
     83          #if HAL_UART_USB
     84          #include "_hal_uart_usb.c"
     85          #endif
     86          
     87          /******************************************************************************
     88           * @fn      HalUARTInit
     89           *
     90           * @brief   Initialize the UART
     91           *
     92           * @param   none
     93           *
     94           * @return  none
     95           *****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     96          void HalUARTInit(void)
   \                     HalUARTInit:
     97          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
     98          #if HAL_UART_DMA
     99            HalUARTInitDMA();
    100          #endif
    101          #if HAL_UART_ISR
    102            HalUARTInitISR();
   \   000000   53FF3F       ANL     0xff,#0x3f
   \   000003   85FFFF       MOV     0xff,0xff
   \   000006   53F1FE       ANL     0xf1,#0xfe
   \   000009   43F30C       ORL     0xf3,#0xc
   \   00000C   53F2F3       ANL     0xf2,#0xf3
   \   00000F   758680       MOV     0x86,#-0x80
   \   000012   75C480       MOV     0xc4,#-0x80
    103          #endif
    104          #if HAL_UART_USB
    105            HalUARTInitUSB();
    106          #endif
    107          }
   \   000015   02....       LJMP    ?BRET
   \   000018                REQUIRE P2DIR
   \   000018                REQUIRE PERCFG
   \   000018                REQUIRE P0SEL
   \   000018                REQUIRE ADCCFG
   \   000018                REQUIRE U0CSR
   \   000018                REQUIRE U0UCR
    108          
    109          /******************************************************************************
    110           * @fn      HalUARTOpen
    111           *
    112           * @brief   Open a port according tp the configuration specified by parameter.
    113           *
    114           * @param   port   - UART port
    115           *          config - contains configuration information
    116           *
    117           * @return  Status of the function call
    118           *****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    119          uint8 HalUARTOpen(uint8 port, halUARTCfg_t *config)
   \                     HalUARTOpen:
    120          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   E9           MOV     A,R1
    121            (void)port;
    122            (void)config;
    123          
    124          #if (HAL_UART_DMA == 1)
    125            if (port == HAL_UART_PORT_0)  HalUARTOpenDMA(config);
    126          #endif
    127          #if (HAL_UART_DMA == 2)
    128            if (port == HAL_UART_PORT_1)  HalUARTOpenDMA(config);
    129          #endif
    130          #if (HAL_UART_ISR == 1)
    131            if (port == HAL_UART_PORT_0)  HalUARTOpenISR(config);
   \   000005   7070         JNZ     ??HalUARTOpen_0
   \   000007   EA           MOV     A,R2
   \   000008   241B         ADD     A,#0x1b
   \   00000A   F582         MOV     DPL,A
   \   00000C   E4           CLR     A
   \   00000D   3B           ADDC    A,R3
   \   00000E   F583         MOV     DPH,A
   \   000010   E0           MOVX    A,@DPTR
   \   000011   F8           MOV     R0,A
   \   000012   A3           INC     DPTR
   \   000013   E0           MOVX    A,@DPTR
   \   000014   F9           MOV     R1,A
   \   000015   90....       MOV     DPTR,#isrCfg + 263
   \   000018   E8           MOV     A,R0
   \   000019   F0           MOVX    @DPTR,A
   \   00001A   A3           INC     DPTR
   \   00001B   E9           MOV     A,R1
   \   00001C   F0           MOVX    @DPTR,A
   \   00001D   8A82         MOV     DPL,R2
   \   00001F   8B83         MOV     DPH,R3
   \   000021   A3           INC     DPTR
   \   000022   E0           MOVX    A,@DPTR
   \   000023   6403         XRL     A,#0x3
   \   000025   600F         JZ      ??HalUARTOpen_1
   \   000027   8A82         MOV     DPL,R2
   \   000029   8B83         MOV     DPH,R3
   \   00002B   A3           INC     DPTR
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   6404         XRL     A,#0x4
   \   00002F   6005         JZ      ??HalUARTOpen_1
   \   000031   75C23B       MOV     0xc2,#0x3b
   \   000034   8003         SJMP    ??HalUARTOpen_2
   \                     ??HalUARTOpen_1:
   \   000036   75C2D8       MOV     0xc2,#-0x28
   \                     ??HalUARTOpen_2:
   \   000039   8A82         MOV     DPL,R2
   \   00003B   8B83         MOV     DPH,R3
   \   00003D   A3           INC     DPTR
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   6013         JZ      ??HalUARTOpen_3
   \   000041   14           DEC     A
   \   000042   600B         JZ      ??HalUARTOpen_4
   \   000044   14           DEC     A
   \   000045   6003         JZ      ??HalUARTOpen_5
   \   000047   14           DEC     A
   \   000048   700F         JNZ     ??HalUARTOpen_6
   \                     ??HalUARTOpen_5:
   \   00004A   75C50A       MOV     0xc5,#0xa
   \   00004D   800D         SJMP    ??HalUARTOpen_7
   \                     ??HalUARTOpen_4:
   \   00004F   75C509       MOV     0xc5,#0x9
   \   000052   8008         SJMP    ??HalUARTOpen_7
   \                     ??HalUARTOpen_3:
   \   000054   75C508       MOV     0xc5,#0x8
   \   000057   8003         SJMP    ??HalUARTOpen_7
   \                     ??HalUARTOpen_6:
   \   000059   75C50B       MOV     0xc5,#0xb
   \                     ??HalUARTOpen_7:
   \   00005C   8A82         MOV     DPL,R2
   \   00005E   8B83         MOV     DPH,R3
   \   000060   A3           INC     DPTR
   \   000061   A3           INC     DPTR
   \   000062   E0           MOVX    A,@DPTR
   \   000063   6008         JZ      ??HalUARTOpen_8
   \   000065   75C442       MOV     0xc4,#0x42
   \   000068   43F330       ORL     0xf3,#0x30
   \   00006B   8003         SJMP    ??HalUARTOpen_9
   \                     ??HalUARTOpen_8:
   \   00006D   75C402       MOV     0xc4,#0x2
   \                     ??HalUARTOpen_9:
   \   000070   438640       ORL     0x86,#0x40
   \   000073   D2AA         SETB    0xa8.2
   \   000075   D2E9         SETB    0xe8.1
    132          #endif
    133          #if (HAL_UART_ISR == 2)
    134            if (port == HAL_UART_PORT_1)  HalUARTOpenISR(config);
    135          #endif
    136          #if (HAL_UART_USB)
    137            HalUARTOpenUSB(config);
    138          #endif
    139            
    140            return HAL_UART_SUCCESS;
   \                     ??HalUARTOpen_0:
   \   000077   7900         MOV     R1,#0x0
   \   000079   02....       LJMP    ?Subroutine1 & 0xFFFF
   \   00007C                REQUIRE U0BAUD
   \   00007C                REQUIRE U0GCR
   \   00007C                REQUIRE U0UCR
   \   00007C                REQUIRE P0SEL
   \   00007C                REQUIRE U0CSR
   \   00007C                REQUIRE _A_IEN0
   \   00007C                REQUIRE _A_IRCON2
    141          }
    142          
    143          /*****************************************************************************
    144           * @fn      HalUARTRead
    145           *
    146           * @brief   Read a buffer from the UART
    147           *
    148           * @param   port - USART module designation
    149           *          buf  - valid data buffer at least 'len' bytes in size
    150           *          len  - max length number of bytes to copy to 'buf'
    151           *
    152           * @return  length of buffer that was read
    153           *****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    154          uint16 HalUARTRead(uint8 port, uint8 *buf, uint16 len)
   \                     HalUARTRead:
    155          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
    156            (void)port;
    157            (void)buf;
    158            (void)len;
    159          
    160          #if (HAL_UART_DMA == 1)
    161            if (port == HAL_UART_PORT_0)  return HalUARTReadDMA(buf, len);
    162          #endif
    163          #if (HAL_UART_DMA == 2)
    164            if (port == HAL_UART_PORT_1)  return HalUARTReadDMA(buf, len);
    165          #endif
    166          #if (HAL_UART_ISR == 1)
    167            if (port == HAL_UART_PORT_0)  return HalUARTReadISR(buf, len);
   \   000006   7005         JNZ     ??HalUARTRead_0
   \   000008                ; Setup parameters for call to function HalUARTReadISR
   \   000008   12....       LCALL   `??HalUARTReadISR::?relay`; Banked call to: HalUARTReadISR
   \   00000B   8004         SJMP    ??HalUARTRead_1
    168          #endif
    169          #if (HAL_UART_ISR == 2)
    170            if (port == HAL_UART_PORT_1)  return HalUARTReadISR(buf, len);
    171          #endif
    172          
    173          #if HAL_UART_USB
    174            return HalUARTRx(buf, len);
    175          #else
    176            return 0;
   \                     ??HalUARTRead_0:
   \   00000D   7A00         MOV     R2,#0x0
   \   00000F   7B00         MOV     R3,#0x0
   \                     ??HalUARTRead_1:
   \   000011                REQUIRE ?Subroutine0
   \   000011                ; // Fall through to label ?Subroutine0
    177          #endif
    178          }
    179          
    180          /******************************************************************************
    181           * @fn      HalUARTWrite
    182           *
    183           * @brief   Write a buffer to the UART.
    184           *
    185           * @param   port - UART port
    186           *          buf  - pointer to the buffer that will be written, not freed
    187           *          len  - length of
    188           *
    189           * @return  length of the buffer that was sent
    190           *****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    191          uint16 HalUARTWrite(uint8 port, uint8 *buf, uint16 len)
   \                     HalUARTWrite:
    192          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
    193            (void)port;
    194            (void)buf;
    195            (void)len;
    196          
    197          #if (HAL_UART_DMA == 1)
    198            if (port == HAL_UART_PORT_0)  return HalUARTWriteDMA(buf, len);
    199          #endif
    200          #if (HAL_UART_DMA == 2)
    201            if (port == HAL_UART_PORT_1)  return HalUARTWriteDMA(buf, len);
    202          #endif
    203          #if (HAL_UART_ISR == 1)
    204            if (port == HAL_UART_PORT_0)  return HalUARTWriteISR(buf, len);
   \   000006   7005         JNZ     ??HalUARTWrite_0
   \   000008                ; Setup parameters for call to function HalUARTWriteISR
   \   000008   12....       LCALL   `??HalUARTWriteISR::?relay`; Banked call to: HalUARTWriteISR
   \   00000B   8004         SJMP    ??HalUARTWrite_1
    205          #endif
    206          #if (HAL_UART_ISR == 2)
    207            if (port == HAL_UART_PORT_1)  return HalUARTWriteISR(buf, len);
    208          #endif
    209          
    210          #if HAL_UART_USB
    211            HalUARTTx(buf, len);
    212            return len;
    213          #else
    214            return 0;
   \                     ??HalUARTWrite_0:
   \   00000D   7A00         MOV     R2,#0x0
   \   00000F   7B00         MOV     R3,#0x0
   \                     ??HalUARTWrite_1:
   \   000011   80..         SJMP    ?Subroutine0
    215          #endif
    216          }
    217          
    218          /******************************************************************************
    219           * @fn      HalUARTSuspend
    220           *
    221           * @brief   Suspend UART hardware before entering PM mode 1, 2 or 3.
    222           *
    223           * @param   None
    224           *
    225           * @return  None
    226           *****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    227          void HalUARTSuspend( void )
   \                     HalUARTSuspend:
    228          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    229          #if HAL_UART_DMA
    230            HalUARTSuspendDMA();
    231          #endif
    232          #if HAL_UART_ISR
    233            HalUARTSuspendISR();
   \   000000   5386BF       ANL     0x86,#0xbf
    234          #endif
    235          }
   \   000003   02....       LJMP    ?BRET
   \   000006                REQUIRE U0CSR
    236          
    237          /******************************************************************************
    238           * @fn      HalUARTResume
    239           *
    240           * @brief   Resume UART hardware after exiting PM mode 1, 2 or 3.
    241           *
    242           * @param   None
    243           *
    244           * @return  None
    245           *****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    246          void HalUARTResume( void )
   \                     HalUARTResume:
    247          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    248          #if HAL_UART_DMA
    249            HalUARTResumeDMA();
    250          #endif
    251          #if HAL_UART_ISR
    252            HalUARTResumeISR();
   \   000000   43C480       ORL     0xc4,#0x80
   \   000003   438640       ORL     0x86,#0x40
    253          #endif
    254          }
   \   000006   02....       LJMP    ?BRET
   \   000009                REQUIRE U0UCR
   \   000009                REQUIRE U0CSR
    255          
    256          /***************************************************************************************************
    257           * @fn      HalUARTPoll
    258           *
    259           * @brief   Poll the UART.
    260           *
    261           * @param   none
    262           *
    263           * @return  none
    264           *****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    265          void HalUARTPoll(void)
   \                     HalUARTPoll:
    266          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    267          #if HAL_UART_DMA
    268            HalUARTPollDMA();
    269          #endif
    270          #if HAL_UART_ISR
    271            HalUARTPollISR();
   \   000004                ; Setup parameters for call to function HalUARTPollISR
   \   000004   12....       LCALL   `??HalUARTPollISR::?relay`; Banked call to: HalUARTPollISR
    272          #endif
    273          #if HAL_UART_USB
    274            HalUARTPollUSB();
    275          #endif
    276          }
   \   000007   02....       LJMP    ?Subroutine1 & 0xFFFF
    277          
    278          /**************************************************************************************************
    279           * @fn      Hal_UART_RxBufLen()
    280           *
    281           * @brief   Calculate Rx Buffer length - the number of bytes in the buffer.
    282           *
    283           * @param   port - UART port
    284           *
    285           * @return  length of current Rx Buffer
    286           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    287          uint16 Hal_UART_RxBufLen( uint8 port )
   \                     Hal_UART_RxBufLen:
    288          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
    289            (void)port;
    290          
    291          #if (HAL_UART_DMA == 1)
    292            if (port == HAL_UART_PORT_0)  return HalUARTRxAvailDMA();
    293          #endif
    294          #if (HAL_UART_DMA == 2)
    295            if (port == HAL_UART_PORT_1)  return HalUARTRxAvailDMA();
    296          #endif
    297          #if (HAL_UART_ISR == 1)
    298            if (port == HAL_UART_PORT_0)  return HalUARTRxAvailISR();
   \   000006   7005         JNZ     ??Hal_UART_RxBufLen_0
   \   000008                ; Setup parameters for call to function HalUARTRxAvailISR
   \   000008   12....       LCALL   `??HalUARTRxAvailISR::?relay`; Banked call to: HalUARTRxAvailISR
   \   00000B   8004         SJMP    ??Hal_UART_RxBufLen_1
    299          #endif
    300          #if (HAL_UART_ISR == 2)
    301            if (port == HAL_UART_PORT_1)  return HalUARTRxAvailISR();
    302          #endif
    303          #if HAL_UART_USB
    304            return HalUARTRxAvailUSB();
    305          #else
    306            return 0;
   \                     ??Hal_UART_RxBufLen_0:
   \   00000D   7A00         MOV     R2,#0x0
   \   00000F   7B00         MOV     R3,#0x0
   \                     ??Hal_UART_RxBufLen_1:
   \   000011   80..         SJMP    ?Subroutine0
    307          #endif
    308          }

   \                                 In  segment INTVEC, offset 0x13, root
   \                     `??halUart0RxIsr::??INTVEC 19`:
   \   000013   02....       LJMP       (halUart0RxIsr)

   \                                 In  segment INTVEC, offset 0x3b, root
   \                     `??halUart0TxIsr::??INTVEC 59`:
   \   00003B   02....       LJMP       (halUart0TxIsr)

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalUARTReadISR::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTReadISR

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalUARTWriteISR::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTWriteISR

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalUARTPollISR::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTPollISR

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalUARTRxAvailISR::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTRxAvailISR

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalUARTInit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalUARTOpen::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTOpen

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalUARTRead::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTRead

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalUARTWrite::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTWrite

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalUARTSuspend::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTSuspend

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalUARTResume::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTResume

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalUARTPoll::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTPoll

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??Hal_UART_RxBufLen::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Hal_UART_RxBufLen
    309          
    310          /******************************************************************************
    311          ******************************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0      0   HalUARTInit
      2      0   HalUARTOpen
      2      0   HalUARTPoll
        2      0   -> HalUARTPollISR
      0     10   HalUARTPollISR
        0     10   -> HalUARTRxAvailISR
      0      9   HalUARTRead
        0      9   -> HalUARTReadISR
      1     18   HalUARTReadISR
      0      0   HalUARTResume
      2     10   HalUARTRxAvailISR
      0      0   HalUARTSuspend
      0      9   HalUARTWrite
        0      9   -> HalUARTWriteISR
      1     18   HalUARTWriteISR
      0      9   Hal_UART_RxBufLen
        0      9   -> HalUARTRxAvailISR
      7      0   halUart0RxIsr
      6      0   halUart0TxIsr


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       5  ?Subroutine0
       7  ?Subroutine1
      15  ?Subroutine2
      11  ?Subroutine3
       1  ADCCFG
      24  HalUARTInit
       6  HalUARTInit::?relay
     124  HalUARTOpen
       6  HalUARTOpen::?relay
      10  HalUARTPoll
       6  HalUARTPoll::?relay
     137  HalUARTPollISR
       6  HalUARTPollISR::?relay
      17  HalUARTRead
       6  HalUARTRead::?relay
      74  HalUARTReadISR
       6  HalUARTReadISR::?relay
       9  HalUARTResume
       6  HalUARTResume::?relay
      43  HalUARTRxAvailISR
       6  HalUARTRxAvailISR::?relay
       6  HalUARTSuspend
       6  HalUARTSuspend::?relay
      19  HalUARTWrite
       6  HalUARTWrite::?relay
     142  HalUARTWriteISR
       6  HalUARTWriteISR::?relay
      19  Hal_UART_RxBufLen
       6  Hal_UART_RxBufLen::?relay
       1  IEN2
       1  P0SEL
       1  P2DIR
       1  PERCFG
       1  ST0
       1  U0BAUD
       1  U0CSR
       1  U0DBUF
       1  U0GCR
       1  U0UCR
       1  _A_IEN0
       1  _A_IRCON2
      70  halUart0RxIsr
       3  halUart0RxIsr::??INTVEC 19
      69  halUart0TxIsr
       3  halUart0TxIsr::??INTVEC 59
     265  isrCfg

 
 647 bytes in segment BANKED_CODE
  72 bytes in segment BANK_RELAYS
   6 bytes in segment INTVEC
 154 bytes in segment NEAR_CODE
  13 bytes in segment SFR_AN
 265 bytes in segment XDATA_Z
 
 873 bytes of CODE  memory (+  6 bytes shared)
   0 bytes of DATA  memory (+ 13 bytes shared)
 265 bytes of XDATA memory

Errors: none
Warnings: none
