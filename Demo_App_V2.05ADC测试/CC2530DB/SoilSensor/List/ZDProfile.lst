###############################################################################
#
# IAR C/C++ Compiler V9.30.1.3056 for 8051                24/Nov/2016  11:19:10
# Copyright 2004-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Components\stack\zdo\ZDProfile.c
#    Command line       =  
#        -f "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f
#        "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=50 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
#        -DREJOIN_POLL_RATE=440 "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Components\stack\zdo\ZDProfile.c" -D HAL_UART=TRUE -D
#        HAL_UART_ISR=1 -D HAL_UART_DMA=2 -D HOLD_AUTO_START -D LOG_OUT -D
#        UART1_PROTOCOL_RESOLVER=1 -D xISQC -D NWK_AUTO_POLL -D xZTOOL_P1 -D
#        ISR_KEYINTERRUPT -D xMT_TASK -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D
#        xLCD_SUPPORTED=DEBUG -D xPOWER_SAVING -lC
#        "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\SoilSensor\List"
#        -lA "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\SoilSensor\List"
#        --diag_suppress Pe001,Pa010 -o "E:\LiyaoProject\Zigbee_Project\Z-Stack
#        Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\SoilSensor\Obj"
#        -e --no_code_motion --debug --core=plain --dptr=16,1
#        --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 8 -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\" -I
#        "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\Source\"
#        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\Frame\"
#        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\Module\SoilSensor\"
#        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -Ohz
#    List file          =  
#        E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\SoilSensor\List\ZDProfile.lst
#    Object file        =  
#        E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\SoilSensor\Obj\ZDProfile.r51
#
###############################################################################

E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh 1.0.0\Components\stack\zdo\ZDProfile.c
      1          /**************************************************************************************************
      2            Filename:       ZDProfile.c
      3            Revised:        $Date: 2013-10-02 15:57:50 -0700 (Wed, 02 Oct 2013) $
      4            Revision:       $Revision: 35529 $
      5          
      6            Description:    This is the Zigbee Device Profile.
      7          
      8          
      9            Copyright 2004-2013 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          #include "ZComDef.h"
     44          #include "OSAL.h"
     45          #include "AF.h"
     46          #include "NLMEDE.h"
     47          #include "nwk_util.h"
     48          #include "APS.h"
     49          
     50          #include "AddrMgr.h"
     51          #include "ZDConfig.h"
     52          #include "ZDProfile.h"
     53          #include "ZDObject.h"
     54          #include "ZDNwkMgr.h"
     55          
     56          #if defined( LCD_SUPPORTED )
     57            #include "OnBoard.h"
     58          #endif
     59          
     60          #include "nwk_util.h"
     61          
     62          #if defined( MT_ZDO_FUNC )
     63            #include "MT_ZDO.h"
     64          #endif
     65          
     66          /*********************************************************************
     67           * MACROS
     68           */
     69          
     70          #define ZADDR_TO_AFADDR( pZADDR, AFADDR ) {                            \
     71            (AFADDR).endPoint = ZDP_AF_ENDPOINT;                                 \
     72            (AFADDR).addrMode = (afAddrMode_t)(pZADDR)->addrMode;                \
     73            (AFADDR).addr.shortAddr = (pZADDR)->addr.shortAddr;                  \
     74          }
     75          
     76          #define FillAndSendBuffer( TRANSSEQ, ADDR, ID, LEN, BUF ) {     \
     77            afStatus_t stat;                                    \
     78            ZDP_TmpBuf = (BUF)+1;                               \
     79            stat = fillAndSend( (TRANSSEQ), (ADDR), (ID), (LEN) );          \
     80            osal_mem_free( (BUF) );                             \
     81            ZDP_TmpBuf = ZDP_Buf+1;                             \
     82            return stat;                                        \
     83          }
     84          
     85          #define FillAndSendTxOptions( TRANSSEQ, ADDR, ID, LEN, TxO ) {  \
     86            afStatus_t stat;                                    \
     87            ZDP_TxOptions = (TxO);                              \
     88            stat = fillAndSend( (TRANSSEQ), (ADDR), (ID), (LEN) );          \
     89            ZDP_TxOptions = AF_TX_OPTIONS_NONE;                 \
     90            return stat;                                        \
     91          }
     92          
     93          #define FillAndSendBufferTxOptions( TRANSSEQ, ADDR, ID, LEN, BUF, TxO ) { \
     94            afStatus_t stat;                                    \
     95            ZDP_TmpBuf = (BUF)+1;                               \
     96            ZDP_TxOptions = (TxO);                              \
     97            stat = fillAndSend( (TRANSSEQ), (ADDR), (ID), (LEN) );          \
     98            osal_mem_free( (BUF) );                             \
     99            ZDP_TmpBuf = ZDP_Buf+1;                             \
    100            ZDP_TxOptions = AF_TX_OPTIONS_NONE;                 \
    101            return stat;                                        \
    102          }
    103          
    104          /*********************************************************************
    105           * CONSTANTS
    106           */
    107          
    108          #define ZDP_BUF_SZ          80
    109          

   \                                 In  segment CODE_C, align 1
    110          CONST byte ZDP_AF_ENDPOINT = 0;
   \                     ZDP_AF_ENDPOINT:
   \   000000   00           DB 0
    111          
    112          // Routing table options
    113          #define ZP_RTG_RECORD       0x04       // Routing table indication that a route record is needed
    114          #define ZP_MTO_ROUTE_RC     0x08       // Concentrator with routing cache
    115          #define ZP_MTO_ROUTE_NRC    0x10       // Concentrator with limited cache
    116          
    117          
    118          /*********************************************************************
    119           * TYPEDEFS
    120           */
    121          typedef struct
    122          {
    123            void *next;
    124            uint8 taskID;
    125            uint16 clusterID;
    126          } ZDO_MsgCB_t;
    127          
    128          
    129          /*********************************************************************
    130           * GLOBAL VARIABLES
    131           */
    132          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    133          byte ZDP_TransID = 0;
   \                     ZDP_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    134          
    135          /*********************************************************************
    136           * EXTERNAL VARIABLES
    137           */
    138          
    139          extern endPointDesc_t ZDApp_epDesc;
    140          
    141          /*********************************************************************
    142           * EXTERNAL FUNCTIONS
    143           */
    144          
    145          /*********************************************************************
    146           * LOCAL FUNCTIONS
    147           */
    148          
    149          static afStatus_t fillAndSend( uint8 *transSeq, zAddrType_t *addr, cId_t clusterID, byte len );
    150          uint8 ZDO_SendMsgCBs( zdoIncomingMsg_t *inMsg );
    151          void zdpProcessAddrReq( zdoIncomingMsg_t *inMsg );
    152          
    153          /*********************************************************************
    154           * LOCAL VARIABLES
    155           */
    156          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    157          static uint8  ZDP_Buf[ ZDP_BUF_SZ ];
   \                     ZDP_Buf:
   \   000000                DS 80
   \   000050                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_I, align 1, keep-with-next
    158          static uint8 *ZDP_TmpBuf = ZDP_Buf+1;
   \                     ZDP_TmpBuf:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for ZDP_TmpBuf>`
   \   000002                REQUIRE __INIT_XDATA_I
    159          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    160          byte ZDP_TxOptions = AF_TX_OPTIONS_NONE;
   \                     ZDP_TxOptions:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    161          ZDO_MsgCB_t *zdoMsgCBs = (ZDO_MsgCB_t *)NULL;
   \                     zdoMsgCBs:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    162          
    163          /*********************************************************************
    164           * ZDO Message Processing table
    165           */
    166          
    167          typedef void (*pfnZDPMsgProcessor)( zdoIncomingMsg_t *inMsg );
    168          
    169          typedef struct
    170          {
    171            uint16                clusterID;
    172            pfnZDPMsgProcessor    pFn;
    173          } zdpMsgProcItem_t;
    174          

   \                                 In  segment CODE_C, align 1
    175          CONST zdpMsgProcItem_t zdpMsgProcs[] =
   \                     zdpMsgProcs:
   \   000000   0100         DW 1
   \   000002   ....         DW `??zdpProcessAddrReq::?relay`
   \   000004   0200         DW 2
   \   000006   ....         DW `??ZDO_ProcessNodeDescReq::?relay`
   \   000008   0300         DW 3
   \   00000A   ....         DW `??ZDO_ProcessPowerDescReq::?relay`
   \   00000C   0400         DW 4
   \   00000E   ....         DW `??ZDO_ProcessSimpleDescReq::?relay`
   \   000010   0500         DW 5
   \   000012   ....         DW `??ZDO_ProcessActiveEPReq::?relay`
   \   000014   0600         DW 6
   \   000016   ....         DW `??ZDO_ProcessMatchDescReq::?relay`
   \   000018   FFFF         DW 65535
   \   00001A   0000         DW 0H
    176          {
    177          #if ( RFD_RCVC_ALWAYS_ON==TRUE ) || ( ZG_BUILD_RTR_TYPE )
    178            // These aren't processed by sleeping end devices.
    179            { NWK_addr_req,           zdpProcessAddrReq },
    180            { Device_annce,           ZDO_ProcessDeviceAnnce },
    181          #endif
    182            { IEEE_addr_req,          zdpProcessAddrReq },
    183            { Node_Desc_req,          ZDO_ProcessNodeDescReq },
    184            { Power_Desc_req,         ZDO_ProcessPowerDescReq },
    185            { Simple_Desc_req,        ZDO_ProcessSimpleDescReq },
    186            { Active_EP_req,          ZDO_ProcessActiveEPReq },
    187            { Match_Desc_req,         ZDO_ProcessMatchDescReq },
    188          #if defined ( ZDO_MGMT_NWKDISC_RESPONSE )
    189            { Mgmt_NWK_Disc_req,      ZDO_ProcessMgmtNwkDiscReq },
    190          #endif
    191          #if defined ( ZDO_MGMT_LQI_RESPONSE ) && ( ZG_BUILD_RTR_TYPE )
    192            { Mgmt_Lqi_req,           ZDO_ProcessMgmtLqiReq },
    193          #endif
    194          #if defined ( ZDO_MGMT_RTG_RESPONSE ) && ( ZG_BUILD_RTR_TYPE )
    195            { Mgmt_Rtg_req,           ZDO_ProcessMgmtRtgReq },
    196          #endif
    197          #if defined ( ZDO_MGMT_BIND_RESPONSE ) && defined ( REFLECTOR )
    198            { Mgmt_Bind_req,          ZDO_ProcessMgmtBindReq },
    199          #endif
    200          #if defined ( ZDO_MGMT_JOINDIRECT_RESPONSE ) && ( ZG_BUILD_RTR_TYPE )
    201            { Mgmt_Direct_Join_req,   ZDO_ProcessMgmtDirectJoinReq },
    202          #endif
    203          #if defined ( ZDO_MGMT_LEAVE_RESPONSE )
    204            { Mgmt_Leave_req,         ZDO_ProcessMgmtLeaveReq },
    205          #endif
    206          #if defined ( ZDO_MGMT_PERMIT_JOIN_RESPONSE )  && ( ZG_BUILD_RTR_TYPE )
    207            { Mgmt_Permit_Join_req,   ZDO_ProcessMgmtPermitJoinReq },
    208          #endif
    209          #if defined ( ZDO_USERDESC_RESPONSE )
    210            { User_Desc_req,          ZDO_ProcessUserDescReq },
    211          #endif
    212          #if defined ( ZDO_USERDESCSET_RESPONSE )
    213            { User_Desc_set,          ZDO_ProcessUserDescSet },
    214          #endif
    215          #if defined ( ZDO_SERVERDISC_RESPONSE )
    216            { Server_Discovery_req,   ZDO_ProcessServerDiscReq },
    217          #endif
    218          #if defined ( ZIGBEE_CHILD_AGING )
    219          #if defined ( ZDO_ENDDEVICETIMEOUT_REQUEST )
    220            { End_Device_Timeout_req, ZDO_ProcessEndDeviceTimeoutReq },
    221          #endif
    222          #endif // ZIGBEE_CHILD_AGING
    223            {0xFFFF, NULL} // Last
    224          };
    225          
    226          /*********************************************************************
    227           * @fn          fillAndSend
    228           *
    229           * @brief       Combined to reduce space
    230           *
    231           * @param
    232           * @param
    233           *
    234           * @return      afStatus_t
    235           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    236          static afStatus_t fillAndSend( uint8 *transSeq, zAddrType_t *addr, cId_t clusterID, byte len )
   \                     fillAndSend:
    237          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000   74F3         MOV     A,#-0xd
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 13
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV     A,#-0xc
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V2,R2
   \   00000C   8B..         MOV     ?V3,R3
   \   00000E   8C..         MOV     ?V0,R4
   \   000010   8D..         MOV     ?V1,R5
   \   000012   E9           MOV     A,R1
   \   000013   FE           MOV     R6,A
    238            afAddrType_t afAddr;
    239          
    240            osal_memset( &afAddr, 0, sizeof(afAddrType_t) );
   \   000014                ; Setup parameters for call to function osal_memset
   \   000014   7C0C         MOV     R4,#0xc
   \   000016   7D00         MOV     R5,#0x0
   \   000018   7900         MOV     R1,#0x0
   \   00001A   AA..         MOV     R2,?XSP + 0
   \   00001C   AB..         MOV     R3,?XSP + 1
   \   00001E   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
    241            ZADDR_TO_AFADDR( addr, afAddr );
   \   000021   7409         MOV     A,#0x9
   \   000023   12....       LCALL   ?XSTACK_DISP0_8
   \   000026   E4           CLR     A
   \   000027   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   00002A   A3           INC     DPTR
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   C0E0         PUSH    A
   \   00002E   7408         MOV     A,#0x8
   \   000030   12....       LCALL   ?XSTACK_DISP0_8
   \   000033   D0E0         POP     A
   \   000035   F0           MOVX    @DPTR,A
   \   000036   85..82       MOV     DPL,?V0
   \   000039   85..83       MOV     DPH,?V1
   \   00003C   12....       LCALL   ?Subroutine49 & 0xFFFF
   \                     ??CrossCallReturnLabel_83:
   \   00003F   12....       LCALL   ??Subroutine127_0 & 0xFFFF
    242          
    243            *(ZDP_TmpBuf-1) = *transSeq;
   \                     ??CrossCallReturnLabel_257:
   \   000042   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000045   E0           MOVX    A,@DPTR
   \   000046   24FF         ADD     A,#-0x1
   \   000048   F5..         MOV     ?V0,A
   \   00004A   A3           INC     DPTR
   \   00004B   E0           MOVX    A,@DPTR
   \   00004C   34FF         ADDC    A,#-0x1
   \   00004E   F5..         MOV     ?V1,A
   \   000050   85..82       MOV     DPL,?V2
   \   000053   85..83       MOV     DPH,?V3
   \   000056   12....       LCALL   ?Subroutine60 & 0xFFFF
    244          
    245            return AF_DataRequest( &afAddr, &ZDApp_epDesc, clusterID,
    246                                     (uint16)(len+1), (uint8*)(ZDP_TmpBuf-1),
    247                                     transSeq, ZDP_TxOptions,  AF_DEFAULT_RADIUS );
   \                     ??CrossCallReturnLabel_109:
   \   000059                ; Setup parameters for call to function AF_DataRequest
   \   000059   75..1E       MOV     ?V4,#0x1e
   \   00005C   78..         MOV     R0,#?V4
   \   00005E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000061   78..         MOV     R0,#?V2
   \   000063   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000066   78..         MOV     R0,#?V0
   \   000068   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00006B   EE           MOV     A,R6
   \   00006C   2401         ADD     A,#0x1
   \   00006E   F5..         MOV     ?V0,A
   \   000070   E4           CLR     A
   \   000071   3400         ADDC    A,#0x0
   \   000073   F5..         MOV     ?V1,A
   \   000075   78..         MOV     R0,#?V0
   \   000077   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00007A   7420         MOV     A,#0x20
   \   00007C   12....       LCALL   ?XSTACK_DISP0_8
   \   00007F   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000082   90....       MOV     DPTR,#ZDP_TxOptions
   \   000085   E0           MOVX    A,@DPTR
   \   000086   F9           MOV     R1,A
   \   000087   7C..         MOV     R4,#ZDApp_epDesc & 0xff
   \   000089   7D..         MOV     R5,#(ZDApp_epDesc >> 8) & 0xff
   \   00008B   7409         MOV     A,#0x9
   \   00008D   12....       LCALL   ?XSTACK_DISP101_8
   \   000090   12....       LCALL   `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
   \   000093   7409         MOV     A,#0x9
   \   000095   12....       LCALL   ?DEALLOC_XSTACK8
   \   000098   740C         MOV     A,#0xc
   \   00009A   12....       LCALL   ?DEALLOC_XSTACK8
   \   00009D                REQUIRE ?Subroutine0
   \   00009D                ; // Fall through to label ?Subroutine0
    248          
    249          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F05         MOV     R7,#0x5
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine49:
   \   000000   12....       LCALL   ?Subroutine79 & 0xFFFF
   \                     ??CrossCallReturnLabel_301:
   \   000003   85..82       MOV     DPL,?XSP + 0
   \   000006   85..83       MOV     DPH,?XSP + 1
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine102:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   85..82       MOV     DPL,?V0
   \   000004   85..83       MOV     DPH,?V1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine60:
   \   000000   12....       LCALL   ?Subroutine86 & 0xFFFF
   \                     ??CrossCallReturnLabel_158:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine86:
   \   000000   12....       LCALL   ?Subroutine102 & 0xFFFF
   \                     ??CrossCallReturnLabel_188:
   \   000003   F0           MOVX    @DPTR,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   12....       LCALL   ?Subroutine88 & 0xFFFF
   \                     ??CrossCallReturnLabel_161:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine88:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   85..82       MOV     DPL,?V0
   \   000004   85..83       MOV     DPH,?V1
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine127_0:
   \   000000   E8           MOV     A,R0
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   E9           MOV     A,R1
   \   000004   F0           MOVX    @DPTR,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine79:
   \   000000   12....       LCALL   ??Subroutine134_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_309:
   \   000003   F9           MOV     R1,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine134_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET
    250          
    251          /*********************************************************************
    252           * @fn          ZDP_SendData
    253           *
    254           * @brief       This builds and send a request message that has
    255           *              NWKAddrOfInterest as its only parameter.
    256           *
    257           * @param       dstAddr - destination address
    258           * @param       cmd - clusterID
    259           * @param       dataLen - number of bytes of data
    260           * @param       data - pointer to the data
    261           * @param       SecurityEnable - Security Options
    262           *
    263           * @return      afStatus_t
    264           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    265          afStatus_t ZDP_SendData( uint8 *TransSeq, zAddrType_t *dstAddr, uint16 cmd,
   \                     ZDP_SendData:
    266                                  byte len, uint8 *buf, byte SecurityEnable )
    267          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0,R1
    268            uint8 *pBuf = ZDP_TmpBuf;
   \   000007   90....       MOV     DPTR,#ZDP_TmpBuf
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   F5..         MOV     ?V2,A
   \   00000D   A3           INC     DPTR
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   F5..         MOV     ?V3,A
    269            byte cnt = len;
   \   000011   AE..         MOV     R6,?V0
   \   000013   740E         MOV     A,#0xe
   \   000015   12....       LCALL   ?XSTACK_DISP0_8
   \   000018   12....       LCALL   ??Subroutine133_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_293:
   \   00001B   801F         SJMP    ??ZDP_SendData_0
    270          
    271            while ( cnt-- )
    272            {
    273              *pBuf++ = *buf++;
   \                     ??ZDP_SendData_1:
   \   00001D   8882         MOV     DPL,R0
   \   00001F   8983         MOV     DPH,R1
   \   000021   E0           MOVX    A,@DPTR
   \   000022   85..82       MOV     DPL,?V2
   \   000025   85..83       MOV     DPH,?V3
   \   000028   12....       LCALL   ??Subroutine115_0 & 0xFFFF
    274            }
   \                     ??CrossCallReturnLabel_202:
   \   00002B   A882         MOV     R0,DPL
   \   00002D   A983         MOV     R1,DPH
   \   00002F   85..82       MOV     DPL,?V2
   \   000032   85..83       MOV     DPH,?V3
   \   000035   A3           INC     DPTR
   \   000036   8582..       MOV     ?V2,DPL
   \   000039   8583..       MOV     ?V3,DPH
   \                     ??ZDP_SendData_0:
   \   00003C   EE           MOV     A,R6
   \   00003D   FF           MOV     R7,A
   \   00003E   74FF         MOV     A,#-0x1
   \   000040   2F           ADD     A,R7
   \   000041   FE           MOV     R6,A
   \   000042   04           INC     A
   \   000043   70D8         JNZ     ??ZDP_SendData_1
    275          
    276            FillAndSendTxOptions( TransSeq, dstAddr, cmd, len, ((SecurityEnable) ? AF_EN_SECURITY : 0) );
   \   000045   7410         MOV     A,#0x10
   \   000047   12....       LCALL   ?XSTACK_DISP0_8
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   90....       MOV     DPTR,#ZDP_TxOptions
   \   00004E   6004         JZ      ??ZDP_SendData_2
   \   000050   7440         MOV     A,#0x40
   \   000052   8001         SJMP    ??ZDP_SendData_3
   \                     ??ZDP_SendData_2:
   \   000054   E4           CLR     A
   \                     ??ZDP_SendData_3:
   \   000055   F0           MOVX    @DPTR,A
   \   000056                ; Setup parameters for call to function fillAndSend
   \   000056   740C         MOV     A,#0xc
   \   000058   12....       LCALL   ?XSTACK_DISP0_8
   \   00005B   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00005E   A9..         MOV     R1,?V0
   \   000060   12....       LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   000063   7402         MOV     A,#0x2
   \   000065   12....       LCALL   ?DEALLOC_XSTACK8
   \   000068   E9           MOV     A,R1
   \   000069   F9           MOV     R1,A
   \   00006A   90....       MOV     DPTR,#ZDP_TxOptions
   \   00006D   E4           CLR     A
   \   00006E   F0           MOVX    @DPTR,A
   \   00006F   02....       LJMP    ??Subroutine108_0 & 0xFFFF
    277          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine108_0:
   \   000000   7F04         MOV     R7,#0x4
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine115_0:
   \   000000   12....       LCALL   ?Subroutine93 & 0xFFFF
   \                     ??CrossCallReturnLabel_203:
   \   000003   A3           INC     DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine93:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function osal_memcpy
   \   000001   8882         MOV     DPL,R0
   \   000003   8983         MOV     DPH,R1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine133_0:
   \   000000   12....       LCALL   ?Subroutine79 & 0xFFFF
   \                     ??CrossCallReturnLabel_303:
   \   000003   22           RET
    278          
    279          /*********************************************************************
    280           * @fn          ZDP_NWKAddrOfInterestReq
    281           *
    282           * @brief       This builds and send a request message that has
    283           *              NWKAddrOfInterest as its only parameter.
    284           *
    285           * @param       dstAddr - destination address
    286           * @param       nwkAddr - 16 bit address
    287           * @param       SecurityEnable - Security Options
    288           *
    289           * @return      afStatus_t
    290           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    291          afStatus_t ZDP_NWKAddrOfInterestReq( zAddrType_t *dstAddr, uint16 nwkAddr,
   \                     ZDP_NWKAddrOfInterestReq:
    292                                               byte cmd, byte SecurityEnable )
    293          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    294            (void)SecurityEnable;  // Intentionally unreferenced parameter
    295          
    296            ZDP_TmpBuf[0] = LO_UINT16( nwkAddr );
   \   000007   12....       LCALL   ?Subroutine16 & 0xFFFF
    297            ZDP_TmpBuf[1] = HI_UINT16( nwkAddr );
   \                     ??CrossCallReturnLabel_18:
   \   00000A   F0           MOVX    @DPTR,A
    298          
    299            return fillAndSend( &ZDP_TransID, dstAddr, cmd, 2 );
   \   00000B                ; Setup parameters for call to function fillAndSend
   \   00000B   8E..         MOV     ?V0,R6
   \   00000D   02....       LJMP    ?Subroutine2 & 0xFFFF
    300          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   75..00       MOV     ?V1,#0x0
   \   000003   78..         MOV     R0,#?V0
   \   000005   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000008   7902         MOV     R1,#0x2
   \   00000A                REQUIRE ??Subroutine109_0
   \   00000A                ; // Fall through to label ??Subroutine109_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine109_0:
   \   000000   EA           MOV     A,R2
   \   000001   FC           MOV     R4,A
   \   000002   EB           MOV     A,R3
   \   000003   FD           MOV     R5,A
   \   000004   7A..         MOV     R2,#ZDP_TransID & 0xff
   \   000006   7B..         MOV     R3,#(ZDP_TransID >> 8) & 0xff
   \   000008                REQUIRE ??Subroutine110_0
   \   000008                ; // Fall through to label ??Subroutine110_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine110_0:
   \   000000   12....       LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   000003   7402         MOV     A,#0x2
   \   000005                REQUIRE ??Subroutine111_0
   \   000005                ; // Fall through to label ??Subroutine111_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine111_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F02         MOV     R7,#0x2
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000003   12....       LCALL   ?Subroutine85 & 0xFFFF
   \                     ??CrossCallReturnLabel_237:
   \   000006   EC           MOV     A,R4
   \   000007   12....       LCALL   ?Subroutine74 & 0xFFFF
   \                     ??CrossCallReturnLabel_137:
   \   00000A   ED           MOV     A,R5
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine85:
   \   000000   12....       LCALL   ?Subroutine103 & 0xFFFF
   \                     ??CrossCallReturnLabel_240:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine103:
   \   000000   12....       LCALL   ??Subroutine134_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_308:
   \   000003   F583         MOV     DPH,A
   \   000005   8882         MOV     DPL,R0
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine74:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000004   12....       LCALL   ?Subroutine103 & 0xFFFF
   \                     ??CrossCallReturnLabel_239:
   \   000007   A3           INC     DPTR
   \   000008   22           RET
    301          
    302          /*********************************************************************
    303           * Address Requests
    304           */
    305          
    306          /*********************************************************************
    307           * @fn          ZDP_NwkAddrReq
    308           *
    309           * @brief       This builds and send a NWK_addr_req message.  This
    310           *              function sends a broadcast message looking for a 16
    311           *              bit address with a 64 bit address as bait.
    312           *
    313           * @param       IEEEAddress - looking for this device
    314           * @param       SecurityEnable - Security Options
    315           *
    316           * @return      afStatus_t
    317           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    318          afStatus_t ZDP_NwkAddrReq( uint8 *IEEEAddress, byte ReqType,
   \                     ZDP_NwkAddrReq:
    319                                     byte StartIndex, byte SecurityEnable )
    320          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV     A,#-0x9
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   \   00000E   89..         MOV     ?V1,R1
   \   000010   8C..         MOV     ?V0,R4
    321            uint8 *pBuf = ZDP_TmpBuf;
   \   000012   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000015   E0           MOVX    A,@DPTR
   \   000016   F5..         MOV     ?V2,A
   \   000018   A3           INC     DPTR
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   F5..         MOV     ?V3,A
    322            byte len = Z_EXTADDR_LEN + 1 + 1;  // IEEEAddress + ReqType + StartIndex.
    323            zAddrType_t dstAddr;
    324          
    325            (void)SecurityEnable;  // Intentionally unreferenced parameter
    326          
    327            if ( osal_ExtAddrEqual( saveExtAddr, IEEEAddress ) == FALSE )
   \   00001C                ; Setup parameters for call to function sAddrExtCmp
   \   00001C   EE           MOV     A,R6
   \   00001D   FC           MOV     R4,A
   \   00001E   EF           MOV     A,R7
   \   00001F   FD           MOV     R5,A
   \   000020   7A..         MOV     R2,#saveExtAddr & 0xff
   \   000022   7B..         MOV     R3,#(saveExtAddr >> 8) & 0xff
   \   000024   12....       LCALL   `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   000027   E9           MOV     A,R1
   \   000028   700A         JNZ     ??ZDP_NwkAddrReq_0
    328            {
    329              dstAddr.addrMode = AddrBroadcast;
   \   00002A   7408         MOV     A,#0x8
   \   00002C   12....       LCALL   ?XSTACK_DISP0_8
   \   00002F   12....       LCALL   ?Subroutine87 & 0xFFFF
    330              dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVRXON;
    331            }
   \                     ??CrossCallReturnLabel_159:
   \   000032   8012         SJMP    ??ZDP_NwkAddrReq_1
    332            else
    333            {
    334              dstAddr.addrMode = Addr16Bit;
   \                     ??ZDP_NwkAddrReq_0:
   \   000034   7408         MOV     A,#0x8
   \   000036   12....       LCALL   ?XSTACK_DISP0_8
   \   000039   7402         MOV     A,#0x2
   \   00003B   F0           MOVX    @DPTR,A
    335              dstAddr.addr.shortAddr = ZDAppNwkAddr.addr.shortAddr;
   \   00003C   90....       MOV     DPTR,#ZDAppNwkAddr
   \   00003F   12....       LCALL   ?Subroutine49 & 0xFFFF
    336            }
   \                     ??CrossCallReturnLabel_84:
   \   000042   E8           MOV     A,R0
   \   000043   F0           MOVX    @DPTR,A
   \   000044   A3           INC     DPTR
   \   000045   E9           MOV     A,R1
   \                     ??ZDP_NwkAddrReq_1:
   \   000046   F0           MOVX    @DPTR,A
    337          
    338            pBuf = osal_cpyExtAddr( pBuf, IEEEAddress );
   \   000047                ; Setup parameters for call to function sAddrExtCpy
   \   000047   EE           MOV     A,R6
   \   000048   FC           MOV     R4,A
   \   000049   EF           MOV     A,R7
   \   00004A   FD           MOV     R5,A
   \   00004B   AA..         MOV     R2,?V2
   \   00004D   AB..         MOV     R3,?V3
   \   00004F   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   000052   8A82         MOV     DPL,R2
   \   000054   8B83         MOV     DPH,R3
    339          
    340            *pBuf++ = ReqType;
   \   000056   E5..         MOV     A,?V1
   \   000058   F0           MOVX    @DPTR,A
    341            *pBuf++ = StartIndex;
   \   000059   A3           INC     DPTR
   \   00005A   E5..         MOV     A,?V0
   \   00005C   F0           MOVX    @DPTR,A
    342          
    343            return fillAndSend( &ZDP_TransID, &dstAddr, NWK_addr_req, len );
   \   00005D                ; Setup parameters for call to function fillAndSend
   \   00005D   E4           CLR     A
   \   00005E   F5..         MOV     ?V2,A
   \   000060   F5..         MOV     ?V3,A
   \   000062   78..         MOV     R0,#?V2
   \   000064   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000067   790A         MOV     R1,#0xa
   \   000069   7402         MOV     A,#0x2
   \   00006B   12....       LCALL   ?XSTACK_DISP102_8
   \   00006E   7A..         MOV     R2,#ZDP_TransID & 0xff
   \   000070   7B..         MOV     R3,#(ZDP_TransID >> 8) & 0xff
   \   000072   12....       LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   000075   7402         MOV     A,#0x2
   \   000077   12....       LCALL   ?DEALLOC_XSTACK8
   \   00007A   7409         MOV     A,#0x9
   \   00007C   80..         SJMP    ??Subroutine107_0
    344          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine107_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine108_0
   \   000003                ; // Fall through to label ??Subroutine108_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine87:
   \   000000   740F         MOV     A,#0xf
   \   000002   F0           MOVX    @DPTR,A
   \   000003   85..82       MOV     DPL,?XSP + 0
   \   000006   85..83       MOV     DPH,?XSP + 1
   \   000009   74FD         MOV     A,#-0x3
   \   00000B   F0           MOVX    @DPTR,A
   \   00000C   A3           INC     DPTR
   \   00000D   74FF         MOV     A,#-0x1
   \   00000F   22           RET
    345          
    346          /*********************************************************************
    347           * @fn          ZDP_IEEEAddrReq
    348           *
    349           * @brief       This builds and send a IEEE_addr_req message.  This
    350           *              function sends a unicast message looking for a 64
    351           *              bit IEEE address with a 16 bit address as bait.
    352           *
    353           * @param       ReqType - ZDP_IEEEADDR_REQTYPE_SINGLE or
    354           *                        ZDP_IEEEADDR_REQTYPE_EXTENDED
    355           * @param       SecurityEnable - Security Options
    356           *
    357           * @return      afStatus_t
    358           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    359          afStatus_t ZDP_IEEEAddrReq( uint16 shortAddr, byte ReqType,
   \                     ZDP_IEEEAddrReq:
    360                                      byte StartIndex, byte SecurityEnable )
    361          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV     A,#-0x9
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FF           MOV     R7,A
   \   00000C   EC           MOV     A,R4
   \   00000D   12....       LCALL   ??Subroutine132_0 & 0xFFFF
    362            uint8 *pBuf = ZDP_TmpBuf;
    363            byte len = 2 + 1 + 1;  // shortAddr + ReqType + StartIndex.
    364            zAddrType_t dstAddr;
    365          
    366            (void)SecurityEnable;  // Intentionally unreferenced parameter
    367          
    368            dstAddr.addrMode = (afAddrMode_t)Addr16Bit;
   \                     ??CrossCallReturnLabel_292:
   \   000010   7408         MOV     A,#0x8
   \   000012   12....       LCALL   ?XSTACK_DISP0_8
   \   000015   12....       LCALL   ?Subroutine24 & 0xFFFF
    369            dstAddr.addr.shortAddr = shortAddr;
    370          
    371            *pBuf++ = LO_UINT16( shortAddr );
   \                     ??CrossCallReturnLabel_34:
   \   000018   EA           MOV     A,R2
   \   000019   8882         MOV     DPL,R0
   \   00001B   8983         MOV     DPH,R1
   \   00001D   F0           MOVX    @DPTR,A
    372            *pBuf++ = HI_UINT16( shortAddr );
   \   00001E   EB           MOV     A,R3
   \   00001F   A3           INC     DPTR
   \   000020   F0           MOVX    @DPTR,A
    373          
    374            *pBuf++ = ReqType;
   \   000021   EF           MOV     A,R7
   \   000022   8882         MOV     DPL,R0
   \   000024   8983         MOV     DPH,R1
   \   000026   12....       LCALL   ?Subroutine31 & 0xFFFF
    375            *pBuf++ = StartIndex;
   \                     ??CrossCallReturnLabel_47:
   \   000029   F0           MOVX    @DPTR,A
    376          
    377            return fillAndSend( &ZDP_TransID, &dstAddr, IEEE_addr_req, len );
   \   00002A                ; Setup parameters for call to function fillAndSend
   \   00002A   75..01       MOV     ?V0,#0x1
   \   00002D   75..00       MOV     ?V1,#0x0
   \   000030   78..         MOV     R0,#?V0
   \   000032   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000035   7904         MOV     R1,#0x4
   \   000037   02....       LJMP    ?Subroutine6 & 0xFFFF
    378          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   F0           MOVX    @DPTR,A
   \   000003   EE           MOV     A,R6
   \   000004   8882         MOV     DPL,R0
   \   000006   8983         MOV     DPH,R1
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   7402         MOV     A,#0x2
   \   000002   12....       LCALL   ?XSTACK_DISP102_8
   \   000005   7A..         MOV     R2,#ZDP_TransID & 0xff
   \   000007   7B..         MOV     R3,#(ZDP_TransID >> 8) & 0xff
   \   000009   12....       LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   00000C   7402         MOV     A,#0x2
   \   00000E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000011                REQUIRE ??Subroutine116_0
   \   000011                ; // Fall through to label ??Subroutine116_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine116_0:
   \   000000   7409         MOV     A,#0x9
   \   000002   02....       LJMP    ??Subroutine111_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   7402         MOV     A,#0x2
   \   000002   F0           MOVX    @DPTR,A
   \   000003   12....       LCALL   ?Subroutine91 & 0xFFFF
   \                     ??CrossCallReturnLabel_212:
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine91:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine117_0
   \   000006                ; // Fall through to label ??Subroutine117_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine117_0:
   \   000000   EA           MOV     A,R2
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   EB           MOV     A,R3
   \   000004   F0           MOVX    @DPTR,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine132_0:
   \   000000   FE           MOV     R6,A
   \   000001   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000004                REQUIRE ??Subroutine133_0
   \   000004                ; // Fall through to label ??Subroutine133_0
    379          
    380          /*********************************************************************
    381           * @fn          ZDP_MatchDescReq
    382           *
    383           * @brief       This builds and send a Match_Desc_req message.  This
    384           *              function sends a broadcast or unicast message
    385           *              requesting the list of endpoint/interfaces that
    386           *              match profile ID and cluster IDs.
    387           *
    388           * @param       dstAddr - destination address
    389           * @param       nwkAddr - network address of interest
    390           * @param       ProfileID - Profile ID
    391           * @param       NumInClusters - number of input clusters
    392           * @param       InClusterList - input cluster ID list
    393           * @param       NumOutClusters - number of output clusters
    394           * @param       OutClusterList - output cluster ID list
    395           * @param       SecurityEnable - Security Options
    396           *
    397           * @return      afStatus_t
    398           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    399          afStatus_t ZDP_MatchDescReq( zAddrType_t *dstAddr, uint16 nwkAddr,
   \                     ZDP_MatchDescReq:
    400                                          uint16 ProfileID,
    401                                          byte NumInClusters, cId_t *InClusterList,
    402                                          byte NumOutClusters, cId_t *OutClusterList,
    403                                          byte SecurityEnable )
    404          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8C..         MOV     ?V0,R4
   \   000007   8D..         MOV     ?V1,R5
   \   000009   12....       LCALL   ?Subroutine50 & 0xFFFF
    405            uint8 *pBuf = ZDP_TmpBuf;
   \                     ??CrossCallReturnLabel_290:
   \   00000C   7412         MOV     A,#0x12
   \   00000E   12....       LCALL   ?XSTACK_DISP0_8
   \   000011   E0           MOVX    A,@DPTR
   \   000012   FD           MOV     R5,A
    406            // nwkAddr+ProfileID+NumInClusters+NumOutClusters.
    407            byte i, len = 2 + 2 + 1 + 1;  // nwkAddr+ProfileID+NumInClusters+NumOutClusters.
    408          
    409            (void)SecurityEnable;  // Intentionally unreferenced parameter
    410          
    411            len += (NumInClusters + NumOutClusters) * sizeof(uint16);
   \   000013   EE           MOV     A,R6
   \   000014   2D           ADD     A,R5
   \   000015   C3           CLR     C
   \   000016   33           RLC     A
   \   000017   2406         ADD     A,#0x6
   \   000019   FF           MOV     R7,A
    412          
    413            if ( len >= ZDP_BUF_SZ-1 )
   \   00001A   C3           CLR     C
   \   00001B   944F         SUBB    A,#0x4f
   \   00001D   4005         JC      ??ZDP_MatchDescReq_0
    414            {
    415              return afStatus_MEM_FAIL;
   \   00001F   7910         MOV     R1,#0x10
   \   000021   02....       LJMP    ??ZDP_MatchDescReq_1 & 0xFFFF
    416            }
    417          
    418            // The spec changed in Zigbee 2007 (2.4.3.1.7.1) to not allow sending
    419            // this command to 0xFFFF.  So, here we will filter this and replace
    420            // with 0xFFFD to only send to devices with RX ON.  This includes the
    421            // network address of interest.
    422            if ( ((dstAddr->addrMode == AddrBroadcast) || (dstAddr->addrMode == Addr16Bit))
    423                && (dstAddr->addr.shortAddr == NWK_BROADCAST_SHORTADDR_DEVALL) )
   \                     ??ZDP_MatchDescReq_0:
   \   000024   8A82         MOV     DPL,R2
   \   000026   8B83         MOV     DPH,R3
   \   000028   A3           INC     DPTR
   \   000029   A3           INC     DPTR
   \   00002A   A3           INC     DPTR
   \   00002B   A3           INC     DPTR
   \   00002C   A3           INC     DPTR
   \   00002D   A3           INC     DPTR
   \   00002E   A3           INC     DPTR
   \   00002F   A3           INC     DPTR
   \   000030   E0           MOVX    A,@DPTR
   \   000031   640F         XRL     A,#0xf
   \   000033   6011         JZ      ??ZDP_MatchDescReq_2
   \   000035   8A82         MOV     DPL,R2
   \   000037   8B83         MOV     DPH,R3
   \   000039   A3           INC     DPTR
   \   00003A   A3           INC     DPTR
   \   00003B   A3           INC     DPTR
   \   00003C   A3           INC     DPTR
   \   00003D   A3           INC     DPTR
   \   00003E   A3           INC     DPTR
   \   00003F   A3           INC     DPTR
   \   000040   A3           INC     DPTR
   \   000041   E0           MOVX    A,@DPTR
   \   000042   6402         XRL     A,#0x2
   \   000044   7018         JNZ     ??ZDP_MatchDescReq_3
   \                     ??ZDP_MatchDescReq_2:
   \   000046   8A82         MOV     DPL,R2
   \   000048   8B83         MOV     DPH,R3
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   F4           CPL     A
   \   00004C   7003         JNZ     ??ZDP_MatchDescReq_4
   \   00004E   A3           INC     DPTR
   \   00004F   E0           MOVX    A,@DPTR
   \   000050   F4           CPL     A
   \                     ??ZDP_MatchDescReq_4:
   \   000051   700B         JNZ     ??ZDP_MatchDescReq_3
    424            {
    425              dstAddr->addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVRXON;
   \   000053   8A82         MOV     DPL,R2
   \   000055   8B83         MOV     DPH,R3
   \   000057   74FD         MOV     A,#-0x3
   \   000059   F0           MOVX    @DPTR,A
   \   00005A   A3           INC     DPTR
   \   00005B   74FF         MOV     A,#-0x1
   \   00005D   F0           MOVX    @DPTR,A
    426            }
    427            if ( nwkAddr == NWK_BROADCAST_SHORTADDR_DEVALL )
   \                     ??ZDP_MatchDescReq_3:
   \   00005E   74FF         MOV     A,#-0x1
   \   000060   65..         XRL     A,?V0
   \   000062   7004         JNZ     ??ZDP_MatchDescReq_5
   \   000064   74FF         MOV     A,#-0x1
   \   000066   65..         XRL     A,?V1
   \                     ??ZDP_MatchDescReq_5:
   \   000068   7006         JNZ     ??ZDP_MatchDescReq_6
    428            {
    429              nwkAddr = NWK_BROADCAST_SHORTADDR_DEVRXON;
   \   00006A   75..FD       MOV     ?V0,#-0x3
   \   00006D   75..FF       MOV     ?V1,#-0x1
    430            }
    431          
    432            *pBuf++ = LO_UINT16( nwkAddr );   // NWKAddrOfInterest
   \                     ??ZDP_MatchDescReq_6:
   \   000070   8882         MOV     DPL,R0
   \   000072   8983         MOV     DPH,R1
   \   000074   E5..         MOV     A,?V0
   \   000076   F0           MOVX    @DPTR,A
    433            *pBuf++ = HI_UINT16( nwkAddr );
   \   000077   E5..         MOV     A,?V1
   \   000079   A3           INC     DPTR
   \   00007A   F0           MOVX    @DPTR,A
   \   00007B   740E         MOV     A,#0xe
   \   00007D   12....       LCALL   ?XSTACK_DISP0_8
   \   000080   12....       LCALL   ??Subroutine122_0 & 0xFFFF
    434          
    435            *pBuf++ = LO_UINT16( ProfileID );   // Profile ID
   \                     ??CrossCallReturnLabel_241:
   \   000083   8882         MOV     DPL,R0
   \   000085   8983         MOV     DPH,R1
   \   000087   A3           INC     DPTR
   \   000088   A3           INC     DPTR
   \   000089   E5..         MOV     A,?V0
   \   00008B   F0           MOVX    @DPTR,A
    436            *pBuf++ = HI_UINT16( ProfileID );
   \   00008C   E5..         MOV     A,?V1
   \   00008E   8882         MOV     DPL,R0
   \   000090   8983         MOV     DPH,R1
   \   000092   A3           INC     DPTR
   \   000093   12....       LCALL   ?Subroutine31 & 0xFFFF
    437          
    438            *pBuf++ = NumInClusters; // Input cluster list
   \                     ??CrossCallReturnLabel_48:
   \   000096   A3           INC     DPTR
   \   000097   F0           MOVX    @DPTR,A
   \   000098   E8           MOV     A,R0
   \   000099   2405         ADD     A,#0x5
   \   00009B   F8           MOV     R0,A
   \   00009C   5001         JNC     ??ZDP_MatchDescReq_7
   \   00009E   09           INC     R1
    439            if ( NumInClusters )
   \                     ??ZDP_MatchDescReq_7:
   \   00009F   EE           MOV     A,R6
   \   0000A0   6016         JZ      ??ZDP_MatchDescReq_8
    440            {
    441              for (i=0; i<NumInClusters; ++i)  {
   \   0000A2   7C00         MOV     R4,#0x0
   \   0000A4   7410         MOV     A,#0x10
   \   0000A6   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A9   12....       LCALL   ??Subroutine122_0 & 0xFFFF
    442                *pBuf++ = LO_UINT16( InClusterList[i] );
   \                     ??CrossCallReturnLabel_242:
   \   0000AC   12....       LCALL   ?Subroutine9 & 0xFFFF
    443                *pBuf++ = HI_UINT16( InClusterList[i] );
    444              }
   \                     ??CrossCallReturnLabel_2:
   \   0000AF   5001         JNC     ??ZDP_MatchDescReq_9
   \   0000B1   09           INC     R1
   \                     ??ZDP_MatchDescReq_9:
   \   0000B2   0C           INC     R4
   \   0000B3   EC           MOV     A,R4
   \   0000B4   C3           CLR     C
   \   0000B5   9E           SUBB    A,R6
   \   0000B6   40F4         JC      ??CrossCallReturnLabel_242
    445            }
    446          
    447            *pBuf++ = NumOutClusters; // Output cluster list
   \                     ??ZDP_MatchDescReq_8:
   \   0000B8   ED           MOV     A,R5
   \   0000B9   8882         MOV     DPL,R0
   \   0000BB   8983         MOV     DPH,R1
   \   0000BD   F0           MOVX    @DPTR,A
   \   0000BE   A3           INC     DPTR
   \   0000BF   A882         MOV     R0,DPL
   \   0000C1   A983         MOV     R1,DPH
    448            if ( NumOutClusters )
   \   0000C3   6016         JZ      ??ZDP_MatchDescReq_10
    449            {
    450              for (i=0; i<NumOutClusters; ++i)  {
   \   0000C5   7C00         MOV     R4,#0x0
   \   0000C7   7413         MOV     A,#0x13
   \   0000C9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000CC   12....       LCALL   ??Subroutine122_0 & 0xFFFF
    451                *pBuf++ = LO_UINT16( OutClusterList[i] );
   \                     ??CrossCallReturnLabel_243:
   \   0000CF   12....       LCALL   ?Subroutine9 & 0xFFFF
    452                *pBuf++ = HI_UINT16( OutClusterList[i] );
    453              }
   \                     ??CrossCallReturnLabel_3:
   \   0000D2   5001         JNC     ??ZDP_MatchDescReq_11
   \   0000D4   09           INC     R1
   \                     ??ZDP_MatchDescReq_11:
   \   0000D5   0C           INC     R4
   \   0000D6   EC           MOV     A,R4
   \   0000D7   C3           CLR     C
   \   0000D8   9D           SUBB    A,R5
   \   0000D9   40F4         JC      ??CrossCallReturnLabel_243
    454            }
    455          
    456            return fillAndSend( &ZDP_TransID, dstAddr, Match_Desc_req, len );
   \                     ??ZDP_MatchDescReq_10:
   \   0000DB                ; Setup parameters for call to function fillAndSend
   \   0000DB   75..06       MOV     ?V0,#0x6
   \   0000DE   75..00       MOV     ?V1,#0x0
   \   0000E1   78..         MOV     R0,#?V0
   \   0000E3   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000E6   EF           MOV     A,R7
   \   0000E7   F9           MOV     R1,A
   \   0000E8   EA           MOV     A,R2
   \   0000E9   FC           MOV     R4,A
   \   0000EA   EB           MOV     A,R3
   \   0000EB   FD           MOV     R5,A
   \   0000EC   7A..         MOV     R2,#ZDP_TransID & 0xff
   \   0000EE   7B..         MOV     R3,#(ZDP_TransID >> 8) & 0xff
   \   0000F0   12....       LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   0000F3   7402         MOV     A,#0x2
   \   0000F5   12....       LCALL   ?DEALLOC_XSTACK8
   \                     ??ZDP_MatchDescReq_1:
   \   0000F8   80..         SJMP    ??Subroutine113_0
    457          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   8C..         MOV     ?V2,R4
   \   000002   E5..         MOV     A,?V2
   \   000004   25E0         ADD     A,0xE0 /* A   */
   \   000006   F5..         MOV     ?V2,A
   \   000008   E4           CLR     A
   \   000009   33           RLC     A
   \   00000A   F5..         MOV     ?V3,A
   \   00000C   E5..         MOV     A,?V0
   \   00000E   25..         ADD     A,?V2
   \   000010   F5..         MOV     ?V4,A
   \   000012   E5..         MOV     A,?V1
   \   000014   35..         ADDC    A,?V3
   \   000016   F5..         MOV     ?V5,A
   \   000018   85..82       MOV     DPL,?V4
   \   00001B   F583         MOV     DPH,A
   \   00001D   12....       LCALL   ?Subroutine80 & 0xFFFF
   \                     ??CrossCallReturnLabel_147:
   \   000020   85..82       MOV     DPL,?V4
   \   000023   85..83       MOV     DPH,?V5
   \   000026   12....       LCALL   ?Subroutine84 & 0xFFFF
   \                     ??CrossCallReturnLabel_192:
   \   000029   F0           MOVX    @DPTR,A
   \   00002A   E8           MOV     A,R0
   \   00002B   2402         ADD     A,#0x2
   \   00002D   F8           MOV     R0,A
   \   00002E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine84:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine112_0
   \   000001                ; // Fall through to label ??Subroutine112_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine112_0:
   \   000000   12....       LCALL   ?Subroutine100 & 0xFFFF
   \                     ??CrossCallReturnLabel_198:
   \   000003   A3           INC     DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine113_0:
   \   000000   7F06         MOV     R7,#0x6
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine122_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V1,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine100:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8882         MOV     DPL,R0
   \   000003   8983         MOV     DPH,R1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine80:
   \   000000   12....       LCALL   ?Subroutine100 & 0xFFFF
   \                     ??CrossCallReturnLabel_196:
   \   000003   F0           MOVX    @DPTR,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine50:
   \   000000   E9           MOV     A,R1
   \   000001                REQUIRE ??Subroutine132_0
   \   000001                ; // Fall through to label ??Subroutine132_0
    458          
    459          /*********************************************************************
    460           * @fn          ZDP_SimpleDescReq
    461           *
    462           * @brief       This builds and send a NWK_Simple_Desc_req
    463           *              message.  This function sends unicast message to the
    464           *              destination device.
    465           *
    466           * @param       dstAddr - destination address
    467           * @param       nwkAddr - 16 bit address
    468           * @param       epIntf - endpoint/interface
    469           * @param       SecurityEnable - Security Options
    470           *
    471           * @return      afStatus_t
    472           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    473          afStatus_t ZDP_SimpleDescReq( zAddrType_t *dstAddr, uint16 nwkAddr,
   \                     ZDP_SimpleDescReq:
    474                                              byte endPoint, byte SecurityEnable )
    475          
    476          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    477            (void)SecurityEnable;  // Intentionally unreferenced parameter
    478          
    479            ZDP_TmpBuf[0] = LO_UINT16( nwkAddr );
   \   000005   12....       LCALL   ?Subroutine16 & 0xFFFF
    480            ZDP_TmpBuf[1] = HI_UINT16( nwkAddr );
   \                     ??CrossCallReturnLabel_19:
   \   000008   12....       LCALL   ?Subroutine12 & 0xFFFF
    481            ZDP_TmpBuf[2] = endPoint;
    482          
    483            return fillAndSend( &ZDP_TransID, dstAddr, Simple_Desc_req, 3 );
   \                     ??CrossCallReturnLabel_8:
   \   00000B                ; Setup parameters for call to function fillAndSend
   \   00000B   75..04       MOV     ?V0,#0x4
   \   00000E   75..00       MOV     ?V1,#0x0
   \   000011   78..         MOV     R0,#?V0
   \   000013   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000016   7903         MOV     R1,#0x3
   \   000018   02....       LJMP    ??Subroutine109_0 & 0xFFFF
    484          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   12....       LCALL   ?Subroutine74 & 0xFFFF
   \                     ??CrossCallReturnLabel_138:
   \   000003   A3           INC     DPTR
   \   000004   E9           MOV     A,R1
   \   000005   F0           MOVX    @DPTR,A
   \   000006   22           RET
    485          
    486          /*********************************************************************
    487           * @fn          ZDP_UserDescSet
    488           *
    489           * @brief       This builds and send a User_Desc_set message to set
    490           *              the user descriptor.  This function sends unicast
    491           *              message to the destination device.
    492           *
    493           * @param       dstAddr - destination address
    494           * @param       nwkAddr - 16 bit address
    495           * @param       UserDescriptor - user descriptor
    496           * @param       SecurityEnable - Security Options
    497           *
    498           * @return      afStatus_t
    499           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   AC..         MOV     R4,?V4
   \   000002   AD..         MOV     R5,?V5
   \   000004   7A..         MOV     R2,#ZDP_TransID & 0xff
   \   000006   7B..         MOV     R3,#(ZDP_TransID >> 8) & 0xff
   \   000008   12....       LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   00000B   7402         MOV     A,#0x2
   \   00000D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000010                REQUIRE ??Subroutine113_0
   \   000010                ; // Fall through to label ??Subroutine113_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    500          afStatus_t ZDP_UserDescSet( zAddrType_t *dstAddr, uint16 nwkAddr,
   \                     ZDP_UserDescSet:
    501                                    UserDescriptorFormat_t *UserDescriptor,
    502                                    byte SecurityEnable )
    503          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V4,R2
   \   000007   8B..         MOV     ?V5,R3
    504            uint8 *pBuf = ZDP_TmpBuf;
   \   000009   12....       LCALL   ??Subroutine119_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_223:
   \   00000C   740E         MOV     A,#0xe
   \   00000E   12....       LCALL   ?XSTACK_DISP0_8
   \   000011   12....       LCALL   ?Subroutine40 & 0xFFFF
    505            byte len = (UserDescriptor->len < AF_MAX_USER_DESCRIPTOR_LEN) ?
    506                        UserDescriptor->len : AF_MAX_USER_DESCRIPTOR_LEN;
   \                     ??CrossCallReturnLabel_63:
   \   000014   C3           CLR     C
   \   000015   9410         SUBB    A,#0x10
   \   000017   5004         JNC     ??ZDP_UserDescSet_0
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   FF           MOV     R7,A
   \   00001B   8002         SJMP    ??ZDP_UserDescSet_1
   \                     ??ZDP_UserDescSet_0:
   \   00001D   7F10         MOV     R7,#0x10
    507            byte addrLen = 2;
    508          
    509            (void)SecurityEnable;  // Intentionally unreferenced parameter
    510          
    511            *pBuf++ = LO_UINT16( nwkAddr );
   \                     ??ZDP_UserDescSet_1:
   \   00001F   EC           MOV     A,R4
   \   000020   8A82         MOV     DPL,R2
   \   000022   8B83         MOV     DPH,R3
   \   000024   F0           MOVX    @DPTR,A
    512            *pBuf++ = HI_UINT16( nwkAddr );
   \   000025   ED           MOV     A,R5
   \   000026   A3           INC     DPTR
   \   000027   F0           MOVX    @DPTR,A
    513          
    514            *pBuf++ = len;
   \   000028   EF           MOV     A,R7
   \   000029   8A82         MOV     DPL,R2
   \   00002B   8B83         MOV     DPH,R3
   \   00002D   12....       LCALL   ??Subroutine114_0 & 0xFFFF
    515            addrLen = 3;
    516          
    517            pBuf = osal_memcpy( pBuf, UserDescriptor->desc, len );
   \                     ??CrossCallReturnLabel_201:
   \   000030   AC82         MOV     R4,DPL
   \   000032   AD83         MOV     R5,DPH
   \   000034   8C..         MOV     ?V0,R4
   \   000036   8D..         MOV     ?V1,R5
   \   000038   75..00       MOV     ?V2,#0x0
   \   00003B   78..         MOV     R0,#?V0
   \   00003D   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000040   EF           MOV     A,R7
   \   000041   FC           MOV     R4,A
   \   000042   7D00         MOV     R5,#0x0
   \   000044   EA           MOV     A,R2
   \   000045   2403         ADD     A,#0x3
   \   000047   FA           MOV     R2,A
   \   000048   5001         JNC     ??ZDP_UserDescSet_2
   \   00004A   0B           INC     R3
   \                     ??ZDP_UserDescSet_2:
   \   00004B   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00004E   7403         MOV     A,#0x3
   \   000050   12....       LCALL   ?DEALLOC_XSTACK8
    518            osal_memset( pBuf, AF_USER_DESCRIPTOR_FILL, AF_MAX_USER_DESCRIPTOR_LEN-len );
   \   000053                ; Setup parameters for call to function osal_memset
   \   000053   EF           MOV     A,R7
   \   000054   F8           MOV     R0,A
   \   000055   7410         MOV     A,#0x10
   \   000057   C3           CLR     C
   \   000058   98           SUBB    A,R0
   \   000059   FC           MOV     R4,A
   \   00005A   95E0         SUBB    A,0xE0 /* A   */
   \   00005C   FD           MOV     R5,A
   \   00005D   7920         MOV     R1,#0x20
   \   00005F   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
    519          
    520            return fillAndSend( &ZDP_TransID, dstAddr, User_Desc_set, (AF_MAX_USER_DESCRIPTOR_LEN + addrLen) );
   \   000062                ; Setup parameters for call to function fillAndSend
   \   000062   75..14       MOV     ?V0,#0x14
   \   000065   75..00       MOV     ?V1,#0x0
   \   000068   78..         MOV     R0,#?V0
   \   00006A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00006D   7913         MOV     R1,#0x13
   \   00006F   02....       LJMP    ?Subroutine3 & 0xFFFF
    521          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine114_0:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002                REQUIRE ??Subroutine115_0
   \   000002                ; // Fall through to label ??Subroutine115_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000   12....       LCALL   ?Subroutine79 & 0xFFFF
   \                     ??CrossCallReturnLabel_300:
   \   000003   8882         MOV     DPL,R0
   \   000005   8983         MOV     DPH,R1
   \   000007   E0           MOVX    A,@DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine119_0:
   \   000000   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000003                REQUIRE ??Subroutine120_0
   \   000003                ; // Fall through to label ??Subroutine120_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine120_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FB           MOV     R3,A
   \   000005   22           RET
    522          
    523          /*********************************************************************
    524           * @fn          ZDP_ServerDiscReq
    525           *
    526           * @brief       Build and send a Server_Discovery_req request message.
    527           *
    528           * @param       serverMask - 16-bit bit-mask of server services being sought.
    529           * @param       SecurityEnable - Security Options
    530           *
    531           * @return      afStatus_t
    532           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    533          afStatus_t ZDP_ServerDiscReq( uint16 serverMask, byte SecurityEnable )
   \                     ZDP_ServerDiscReq:
    534          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV     A,#-0x9
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   12....       LCALL   ?Subroutine50 & 0xFFFF
    535            uint8 *pBuf = ZDP_TmpBuf;
    536            zAddrType_t dstAddr;
    537          
    538            dstAddr.addrMode = AddrBroadcast;
   \                     ??CrossCallReturnLabel_291:
   \   00000D   7408         MOV     A,#0x8
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   12....       LCALL   ?Subroutine17 & 0xFFFF
    539            dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVRXON;
    540          
    541            *pBuf++ = LO_UINT16( serverMask );
   \                     ??CrossCallReturnLabel_20:
   \   000015   EA           MOV     A,R2
   \   000016   8882         MOV     DPL,R0
   \   000018   8983         MOV     DPH,R1
   \   00001A   F0           MOVX    @DPTR,A
    542            *pBuf = HI_UINT16( serverMask );
   \   00001B   EB           MOV     A,R3
   \   00001C   A3           INC     DPTR
   \   00001D   F0           MOVX    @DPTR,A
    543          
    544            FillAndSendTxOptions( &ZDP_TransID, &dstAddr, Server_Discovery_req, 2,
    545                       ((SecurityEnable) ? AF_EN_SECURITY : AF_TX_OPTIONS_NONE) );
   \   00001E   EE           MOV     A,R6
   \   00001F   90....       MOV     DPTR,#ZDP_TxOptions
   \   000022   6004         JZ      ??ZDP_ServerDiscReq_0
   \   000024   7440         MOV     A,#0x40
   \   000026   8001         SJMP    ??ZDP_ServerDiscReq_1
   \                     ??ZDP_ServerDiscReq_0:
   \   000028   E4           CLR     A
   \                     ??ZDP_ServerDiscReq_1:
   \   000029   F0           MOVX    @DPTR,A
   \   00002A                ; Setup parameters for call to function fillAndSend
   \   00002A   75..15       MOV     ?V0,#0x15
   \   00002D   75..00       MOV     ?V1,#0x0
   \   000030   78..         MOV     R0,#?V0
   \   000032   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000035   7902         MOV     R1,#0x2
   \   000037   E9           MOV     A,R1
   \   000038   12....       LCALL   ?XSTACK_DISP102_8
   \   00003B   7A..         MOV     R2,#ZDP_TransID & 0xff
   \   00003D   7B..         MOV     R3,#(ZDP_TransID >> 8) & 0xff
   \   00003F   12....       LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   000042   7402         MOV     A,#0x2
   \   000044   12....       LCALL   ?DEALLOC_XSTACK8
   \   000047   E9           MOV     A,R1
   \   000048   F9           MOV     R1,A
   \   000049   90....       MOV     DPTR,#ZDP_TxOptions
   \   00004C   E4           CLR     A
   \   00004D   F0           MOVX    @DPTR,A
   \   00004E   02....       LJMP    ??Subroutine116_0 & 0xFFFF
    546          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   12....       LCALL   ?Subroutine87 & 0xFFFF
   \                     ??CrossCallReturnLabel_160:
   \   000003   F0           MOVX    @DPTR,A
   \   000004   22           RET
    547          
    548          /*********************************************************************
    549           * @fn          ZDP_DeviceAnnce
    550           *
    551           * @brief       This builds and send a Device_Annce message.  This
    552           *              function sends a broadcast message.
    553           *
    554           * @param       nwkAddr - 16 bit address of the device
    555           * @param       IEEEAddr - 64 bit address of the device
    556           * @param       capabilities - device capabilities.  This field is only
    557           *                 sent for v1.1 networks.
    558           * @param       SecurityEnable - Security Options
    559           *
    560           * @return      afStatus_t
    561           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    562          afStatus_t ZDP_DeviceAnnce( uint16 nwkAddr, uint8 *IEEEAddr,
   \                     ZDP_DeviceAnnce:
    563                                        byte capabilities, byte SecurityEnable )
    564          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV     A,#-0x9
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
    565            zAddrType_t dstAddr;
    566            uint8 len;
    567          
    568            (void)SecurityEnable;  // Intentionally unreferenced parameter
    569          
    570            dstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
   \   00000C   7408         MOV     A,#0x8
   \   00000E   12....       LCALL   ?XSTACK_DISP0_8
   \   000011   12....       LCALL   ?Subroutine17 & 0xFFFF
    571            dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVRXON;
    572          
    573            ZDP_TmpBuf[0] = LO_UINT16( nwkAddr );
   \                     ??CrossCallReturnLabel_21:
   \   000014   12....       LCALL   ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_232:
   \   000017   EA           MOV     A,R2
   \   000018   12....       LCALL   ?Subroutine20 & 0xFFFF
    574            ZDP_TmpBuf[1] = HI_UINT16( nwkAddr );
   \                     ??CrossCallReturnLabel_24:
   \   00001B   EB           MOV     A,R3
   \   00001C   F0           MOVX    @DPTR,A
    575            osal_cpyExtAddr( &ZDP_TmpBuf[2], IEEEAddr );
   \   00001D                ; Setup parameters for call to function sAddrExtCpy
   \   00001D   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000020   E0           MOVX    A,@DPTR
   \   000021   2402         ADD     A,#0x2
   \   000023   FA           MOV     R2,A
   \   000024   A3           INC     DPTR
   \   000025   E0           MOVX    A,@DPTR
   \   000026   3400         ADDC    A,#0x0
   \   000028   FB           MOV     R3,A
   \   000029   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
    576            len = 2 + Z_EXTADDR_LEN;
    577          
    578            ZDP_TmpBuf[10] = capabilities;
   \   00002C   12....       LCALL   ?Subroutine105 & 0xFFFF
   \                     ??CrossCallReturnLabel_306:
   \   00002F   C8           XCH     A,R0
   \   000030   240A         ADD     A,#0xa
   \   000032   F582         MOV     DPL,A
   \   000034   E4           CLR     A
   \   000035   38           ADDC    A,R0
   \   000036   F583         MOV     DPH,A
   \   000038   EE           MOV     A,R6
   \   000039   F0           MOVX    @DPTR,A
    579            len++;
    580          
    581            return fillAndSend( &ZDP_TransID, &dstAddr, Device_annce, len );
   \   00003A                ; Setup parameters for call to function fillAndSend
   \   00003A   75..13       MOV     ?V0,#0x13
   \   00003D   75..00       MOV     ?V1,#0x0
   \   000040   78..         MOV     R0,#?V0
   \   000042   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000045   790B         MOV     R1,#0xb
   \   000047   80..         SJMP    ?Subroutine6
    582          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine45:
   \   000000   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000003                REQUIRE ??Subroutine121_0
   \   000003                ; // Fall through to label ??Subroutine121_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine121_0:
   \   000000   12....       LCALL   ?Subroutine85 & 0xFFFF
   \                     ??CrossCallReturnLabel_238:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   12....       LCALL   ?Subroutine74 & 0xFFFF
   \                     ??CrossCallReturnLabel_139:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine105:
   \   000000   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000003                REQUIRE ??Subroutine134_0
   \   000003                ; // Fall through to label ??Subroutine134_0
    583          
    584          #if defined ( ZIGBEE_CHILD_AGING )
    585          /*********************************************************************
    586           * @fn          ZDP_EndDeviceTimeoutReq
    587           *
    588           * @brief       This builds and send an End_Device_Timeout_req message.
    589           *
    590           * @param       parentAddr - destination address
    591           * @param       reqTimeout - Timeout value the device is requesting
    592           * @param       SecurityEnable - Security Options
    593           *
    594           * @return      afStatus_t
    595           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    596          afStatus_t ZDP_EndDeviceTimeoutReq( uint16 parentAddr, uint16 reqTimeout,
   \                     ZDP_EndDeviceTimeoutReq:
    597                                              uint8 SecurityEnable )
    598          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV     A,#-0x9
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EC           MOV     A,R4
   \   00000B   FE           MOV     R6,A
   \   00000C   ED           MOV     A,R5
   \   00000D   FF           MOV     R7,A
    599            uint8 *pBuf = ZDP_TmpBuf;
    600            uint8 len = Z_EXTADDR_LEN + 2;  // Device_IEEEAddress + reqTimeout.
    601            zAddrType_t dstAddr;
    602          
    603            (void)SecurityEnable;  // Intentionally unreferenced parameter
    604          
    605            dstAddr.addrMode = Addr16Bit;
   \   00000E   7408         MOV     A,#0x8
   \   000010   12....       LCALL   ?XSTACK_DISP0_8
   \   000013   12....       LCALL   ?Subroutine24 & 0xFFFF
    606            dstAddr.addr.shortAddr = parentAddr;
    607          
    608            pBuf = osal_cpyExtAddr( pBuf, saveExtAddr );
   \                     ??CrossCallReturnLabel_35:
   \   000016                ; Setup parameters for call to function sAddrExtCpy
   \   000016   7C..         MOV     R4,#saveExtAddr & 0xff
   \   000018   7D..         MOV     R5,#(saveExtAddr >> 8) & 0xff
   \   00001A   12....       LCALL   ??Subroutine119_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_224:
   \   00001D   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   000020   8A82         MOV     DPL,R2
   \   000022   8B83         MOV     DPH,R3
    609          
    610            *pBuf++ = LO_UINT16( reqTimeout );
   \   000024   EE           MOV     A,R6
   \   000025   F0           MOVX    @DPTR,A
    611            *pBuf++ = HI_UINT16( reqTimeout );
   \   000026   EF           MOV     A,R7
   \   000027   A3           INC     DPTR
   \   000028   F0           MOVX    @DPTR,A
    612          
    613            return fillAndSend( &ZDP_TransID, &dstAddr, End_Device_Timeout_req, len );
   \   000029                ; Setup parameters for call to function fillAndSend
   \   000029   75..1F       MOV     ?V0,#0x1f
   \   00002C   75..00       MOV     ?V1,#0x0
   \   00002F   78..         MOV     R0,#?V0
   \   000031   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000034   790A         MOV     R1,#0xa
   \   000036                REQUIRE ?Subroutine6
   \   000036                ; // Fall through to label ?Subroutine6
    614          }
    615          #endif // ZIGBEE_CHILD_AGING
    616          
    617          /*********************************************************************
    618           * Address Responses
    619           */
    620          
    621          /*********************************************************************
    622           * @fn      zdpProcessAddrReq
    623           *
    624           * @brief   Process an incoming NWK_addr_req or IEEE_addr_req message and then
    625           *          build and send a corresponding NWK_addr_rsp or IEEE_addr_rsp msg.
    626           *
    627           * @param   inMsg - incoming message
    628           *
    629           * @return  none
    630           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    631          void zdpProcessAddrReq( zdoIncomingMsg_t *inMsg )
   \                     zdpProcessAddrReq:
    632          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000   74F3         MOV     A,#-0xd
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 13
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V2,R2
   \   000007   8B..         MOV     ?V3,R3
    633            associated_devices_t *pAssoc;
    634            uint8 reqType;
    635            uint16 aoi = INVALID_NODE_ADDR;
   \   000009   7EFE         MOV     R6,#-0x2
   \   00000B   7FFF         MOV     R7,#-0x1
    636            uint8 *ieee = NULL;
   \   00000D   75..00       MOV     ?V0,#0x0
   \   000010   75..00       MOV     ?V1,#0x0
    637          
    638            reqType = inMsg->asdu[(inMsg->clusterID == NWK_addr_req) ? Z_EXTADDR_LEN : sizeof( uint16 ) ];
   \   000013   EA           MOV     A,R2
   \   000014   12....       LCALL   ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_118:
   \   000017   12....       LCALL   ??Subroutine130_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_282:
   \   00001A   49           ORL     A,R1
   \   00001B   7004         JNZ     ??zdpProcessAddrReq_0
   \   00001D   7808         MOV     R0,#0x8
   \   00001F   8002         SJMP    ??zdpProcessAddrReq_1
   \                     ??zdpProcessAddrReq_0:
   \   000021   7802         MOV     R0,#0x2
   \                     ??zdpProcessAddrReq_1:
   \   000023   EA           MOV     A,R2
   \   000024   12....       LCALL   ?Subroutine70 & 0xFFFF
   \                     ??CrossCallReturnLabel_129:
   \   000027   E0           MOVX    A,@DPTR
   \   000028   28           ADD     A,R0
   \   000029   FA           MOV     R2,A
   \   00002A   A3           INC     DPTR
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   3400         ADDC    A,#0x0
   \   00002E   8A82         MOV     DPL,R2
   \   000030   F583         MOV     DPH,A
   \   000032   E0           MOVX    A,@DPTR
   \   000033   F5..         MOV     ?V4,A
    639          
    640            if ( inMsg->clusterID == NWK_addr_req )
   \   000035   12....       LCALL   ?Subroutine64 & 0xFFFF
   \                     ??CrossCallReturnLabel_116:
   \   000038   49           ORL     A,R1
   \   000039   701C         JNZ     ??zdpProcessAddrReq_2
    641          
    642            {
    643              ieee = inMsg->asdu;
   \   00003B   E5..         MOV     A,?V2
   \   00003D   12....       LCALL   ?Subroutine96 & 0xFFFF
   \                     ??CrossCallReturnLabel_174:
   \   000040   35..         ADDC    A,?V3
   \   000042   12....       LCALL   ?Subroutine47 & 0xFFFF
    644          
    645              if ( osal_ExtAddrEqual( saveExtAddr, ieee ) )
   \                     ??CrossCallReturnLabel_249:
   \   000045                ; Setup parameters for call to function sAddrExtCmp
   \   000045   AC..         MOV     R4,?V0
   \   000047   FD           MOV     R5,A
   \   000048   7A..         MOV     R2,#saveExtAddr & 0xff
   \   00004A   7B..         MOV     R3,#(saveExtAddr >> 8) & 0xff
   \   00004C   12....       LCALL   `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   00004F   E9           MOV     A,R1
   \   000050   603C         JZ      ??zdpProcessAddrReq_3
    646              {
    647                aoi = ZDAppNwkAddr.addr.shortAddr;
   \   000052   12....       LCALL   ?Subroutine53 & 0xFFFF
    648              }
    649              // Handle response for sleeping end devices
    650              else if ( (ZSTACK_ROUTER_BUILD)
    651                && (((pAssoc = AssocGetWithExt( ieee )) != NULL)
    652                       && (pAssoc->nodeRelation == CHILD_RFD)) )
    653              {
    654                aoi = pAssoc->shortAddr;
    655                if ( reqType != ZDP_ADDR_REQTYPE_SINGLE )
    656                  reqType = 0xFF; // Force Invalid
    657              }
    658            }
   \                     ??CrossCallReturnLabel_288:
   \   000055   8027         SJMP    ??zdpProcessAddrReq_4
    659            else  // if ( inMsg->clusterID == IEEE_addr_req )
    660            {
    661              aoi = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
   \                     ??zdpProcessAddrReq_2:
   \   000057   E5..         MOV     A,?V2
   \   000059   12....       LCALL   ?Subroutine70 & 0xFFFF
   \                     ??CrossCallReturnLabel_130:
   \   00005C   12....       LCALL   ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_66:
   \   00005F   FA           MOV     R2,A
   \   000060   A3           INC     DPTR
   \   000061   E0           MOVX    A,@DPTR
   \   000062   F8           MOV     R0,A
   \   000063   E4           CLR     A
   \   000064   C8           XCH     A,R0
   \   000065   F9           MOV     R1,A
   \   000066   EA           MOV     A,R2
   \   000067   28           ADD     A,R0
   \   000068   FE           MOV     R6,A
   \   000069   E4           CLR     A
   \   00006A   39           ADDC    A,R1
   \   00006B   FF           MOV     R7,A
    662          
    663              if ( aoi == ZDAppNwkAddr.addr.shortAddr )
   \   00006C   90....       MOV     DPTR,#ZDAppNwkAddr
   \   00006F   E0           MOVX    A,@DPTR
   \   000070   6E           XRL     A,R6
   \   000071   7003         JNZ     ??zdpProcessAddrReq_5
   \   000073   A3           INC     DPTR
   \   000074   E0           MOVX    A,@DPTR
   \   000075   6F           XRL     A,R7
   \                     ??zdpProcessAddrReq_5:
   \   000076   7016         JNZ     ??zdpProcessAddrReq_3
    664              {
    665                ieee = saveExtAddr;
   \   000078   75....       MOV     ?V0,#saveExtAddr & 0xff
   \   00007B   75....       MOV     ?V1,#(saveExtAddr >> 8) & 0xff
    666              }
    667              else if ( (ZSTACK_ROUTER_BUILD)
    668                && (((pAssoc = AssocGetWithShort( aoi )) != NULL)
    669                       && (pAssoc->nodeRelation == CHILD_RFD)) )
    670              {
    671                AddrMgrEntry_t addrEntry;
    672                addrEntry.user = ADDRMGR_USER_DEFAULT;
    673                addrEntry.index = pAssoc->addrIdx;
    674                if ( AddrMgrEntryGet( &addrEntry ) )
    675                {
    676                  ieee = addrEntry.extAddr;
    677                }
    678          
    679                if ( reqType != ZDP_ADDR_REQTYPE_SINGLE )
    680                  reqType = 0xFF; // Force Invalid
    681              }
    682            }
    683          
    684            if ( ((aoi != INVALID_NODE_ADDR) && (ieee != NULL)) || (inMsg->wasBroadcast == FALSE) )
   \                     ??zdpProcessAddrReq_4:
   \   00007E   74FE         MOV     A,#-0x2
   \   000080   6E           XRL     A,R6
   \   000081   7003         JNZ     ??zdpProcessAddrReq_6
   \   000083   74FF         MOV     A,#-0x1
   \   000085   6F           XRL     A,R7
   \                     ??zdpProcessAddrReq_6:
   \   000086   6006         JZ      ??zdpProcessAddrReq_3
   \   000088   E5..         MOV     A,?V0
   \   00008A   45..         ORL     A,?V1
   \   00008C   7011         JNZ     ??zdpProcessAddrReq_7
   \                     ??zdpProcessAddrReq_3:
   \   00008E   E5..         MOV     A,?V2
   \   000090   240B         ADD     A,#0xb
   \   000092   F582         MOV     DPL,A
   \   000094   E4           CLR     A
   \   000095   35..         ADDC    A,?V3
   \   000097   F583         MOV     DPH,A
   \   000099   E0           MOVX    A,@DPTR
   \   00009A   6003         JZ      $+5
   \   00009C   02....       LJMP    ??zdpProcessAddrReq_8 & 0xFFFF
    685            {
    686              uint8 stat;
    687              uint8 *pBuf = ZDP_TmpBuf;
   \                     ??zdpProcessAddrReq_7:
   \   00009F   12....       LCALL   ??Subroutine119_0 & 0xFFFF
    688              // Status + IEEE-Addr + Nwk-Addr.
    689              uint8 len = 1 + Z_EXTADDR_LEN + 2;
    690          
    691              // If aoi and iee are both setup, we found results
    692              if ( (aoi != INVALID_NODE_ADDR) && (ieee != NULL) )
   \                     ??CrossCallReturnLabel_225:
   \   0000A2   74FE         MOV     A,#-0x2
   \   0000A4   6E           XRL     A,R6
   \   0000A5   7003         JNZ     ??zdpProcessAddrReq_9
   \   0000A7   74FF         MOV     A,#-0x1
   \   0000A9   6F           XRL     A,R7
   \                     ??zdpProcessAddrReq_9:
   \   0000AA   6018         JZ      ??zdpProcessAddrReq_10
   \   0000AC   E5..         MOV     A,?V0
   \   0000AE   45..         ORL     A,?V1
   \   0000B0   6012         JZ      ??zdpProcessAddrReq_10
    693              {
    694                stat = ((reqType == ZDP_ADDR_REQTYPE_SINGLE) || (reqType == ZDP_ADDR_REQTYPE_EXTENDED))
    695                              ? ZDP_SUCCESS : ZDP_INVALID_REQTYPE;
   \   0000B2   E5..         MOV     A,?V4
   \   0000B4   6006         JZ      ??zdpProcessAddrReq_11
   \   0000B6   7401         MOV     A,#0x1
   \   0000B8   65..         XRL     A,?V4
   \   0000BA   7004         JNZ     ??zdpProcessAddrReq_12
   \                     ??zdpProcessAddrReq_11:
   \   0000BC   7800         MOV     R0,#0x0
   \   0000BE   801D         SJMP    ??zdpProcessAddrReq_13
   \                     ??zdpProcessAddrReq_12:
   \   0000C0   7880         MOV     R0,#-0x80
   \   0000C2   8019         SJMP    ??zdpProcessAddrReq_13
    696              }
    697              else
    698              {
    699                // not found and the req was unicast to this device
    700                stat = ZDP_DEVICE_NOT_FOUND;
   \                     ??zdpProcessAddrReq_10:
   \   0000C4   7881         MOV     R0,#-0x7f
    701          
    702                // Fill in the missing field with this device's address
    703                if ( inMsg->clusterID == NWK_addr_req )
   \   0000C6   E5..         MOV     A,?V2
   \   0000C8   12....       LCALL   ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_119:
   \   0000CB   12....       LCALL   ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_93:
   \   0000CE   EC           MOV     A,R4
   \   0000CF   4D           ORL     A,R5
   \   0000D0   7005         JNZ     ??zdpProcessAddrReq_14
    704                {
    705                  aoi = ZDAppNwkAddr.addr.shortAddr;
   \   0000D2   12....       LCALL   ?Subroutine53 & 0xFFFF
    706                }
   \                     ??CrossCallReturnLabel_289:
   \   0000D5   8006         SJMP    ??zdpProcessAddrReq_13
    707                else
    708                {
    709                  ieee = saveExtAddr;
   \                     ??zdpProcessAddrReq_14:
   \   0000D7   75....       MOV     ?V0,#saveExtAddr & 0xff
   \   0000DA   75....       MOV     ?V1,#(saveExtAddr >> 8) & 0xff
    710                }
    711              }
    712          
    713              *pBuf++ = stat;
   \                     ??zdpProcessAddrReq_13:
   \   0000DD   E8           MOV     A,R0
   \   0000DE   12....       LCALL   ?Subroutine30 & 0xFFFF
    714          
    715              pBuf = osal_cpyExtAddr( pBuf, ieee );
   \                     ??CrossCallReturnLabel_214:
   \   0000E1                ; Setup parameters for call to function sAddrExtCpy
   \   0000E1   AC..         MOV     R4,?V0
   \   0000E3   AD..         MOV     R5,?V1
   \   0000E5   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   0000E8   8A82         MOV     DPL,R2
   \   0000EA   8B83         MOV     DPH,R3
    716          
    717              *pBuf++ = LO_UINT16( aoi );
   \   0000EC   EE           MOV     A,R6
   \   0000ED   F0           MOVX    @DPTR,A
    718              *pBuf++ = HI_UINT16( aoi );
   \   0000EE   EF           MOV     A,R7
   \   0000EF   A3           INC     DPTR
   \   0000F0   F0           MOVX    @DPTR,A
    719          
    720              if ( ZSTACK_ROUTER_BUILD )
    721              {
    722                if ( (reqType == ZDP_ADDR_REQTYPE_EXTENDED) && (aoi == ZDAppNwkAddr.addr.shortAddr)
    723                     && (stat == ZDP_SUCCESS) )
    724                {
    725                  uint8  cnt = 0;
    726                  uint16 *list = AssocMakeList( &cnt );
    727          
    728                  if ( list != NULL )
    729                  {
    730                    byte idx = inMsg->asdu[(((inMsg->clusterID == NWK_addr_req) ? Z_EXTADDR_LEN : sizeof( uint16 )) + 1)];
    731                    uint16 *pList = list + idx;
    732          
    733                    // NumAssocDev field is only present on success.
    734                    if ( cnt > idx )
    735                    {
    736                      cnt -= idx;
    737                      len += (cnt * sizeof( uint16 ));
    738                    }
    739                    else
    740                    {
    741                      cnt = 0;
    742                    }
    743                    *pBuf++ = cnt;
    744                    len++;
    745          
    746                    // StartIndex field is only present if NumAssocDev field is non-zero.
    747                    *pBuf++ = idx;
    748                    len++;
    749          
    750                    while ( cnt != 0 )
    751                    {
    752                      *pBuf++ = LO_UINT16( *pList );
    753                      *pBuf++ = HI_UINT16( *pList );
    754                      pList++;
    755                      cnt--;
    756                    }
    757          
    758                    osal_mem_free( (uint8 *)list );
    759                  }
    760                  else
    761                  {
    762                    // NumAssocDev field is only present on success.
    763                    *pBuf++ = 0;
    764                    len++;
    765                  }
    766                }
    767              }
    768          
    769              ZDP_TxOptions = AF_MSG_ACK_REQUEST;
   \   0000F1   90....       MOV     DPTR,#ZDP_TxOptions
   \   0000F4   7410         MOV     A,#0x10
   \   0000F6   F0           MOVX    @DPTR,A
    770              fillAndSend( &(inMsg->TransSeq), &(inMsg->srcAddr), (cId_t)(inMsg->clusterID | ZDO_RESPONSE_BIT), len );
   \   0000F7                ; Setup parameters for call to function fillAndSend
   \   0000F7   12....       LCALL   ?Subroutine64 & 0xFFFF
   \                     ??CrossCallReturnLabel_117:
   \   0000FA   F5..         MOV     ?V0,A
   \   0000FC   A3           INC     DPTR
   \   0000FD   E0           MOVX    A,@DPTR
   \   0000FE   4480         ORL     A,#0x80
   \   000100   F5..         MOV     ?V1,A
   \   000102   78..         MOV     R0,#?V0
   \   000104   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000107   790B         MOV     R1,#0xb
   \   000109   E5..         MOV     A,?V2
   \   00010B   2402         ADD     A,#0x2
   \   00010D   FC           MOV     R4,A
   \   00010E   E4           CLR     A
   \   00010F   35..         ADDC    A,?V3
   \   000111   FD           MOV     R5,A
   \   000112   E5..         MOV     A,?V2
   \   000114   240F         ADD     A,#0xf
   \   000116   FA           MOV     R2,A
   \   000117   E4           CLR     A
   \   000118   35..         ADDC    A,?V3
   \   00011A   FB           MOV     R3,A
   \   00011B   12....       LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   00011E   7402         MOV     A,#0x2
   \   000120   12....       LCALL   ?DEALLOC_XSTACK8
    771              ZDP_TxOptions = AF_TX_OPTIONS_NONE;
   \   000123   90....       MOV     DPTR,#ZDP_TxOptions
   \   000126   E4           CLR     A
   \   000127   F0           MOVX    @DPTR,A
    772            }
    773          }
   \                     ??zdpProcessAddrReq_8:
   \   000128   02....       LJMP    ?Subroutine0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine70:
   \   000000   12....       LCALL   ?Subroutine96 & 0xFFFF
   \                     ??CrossCallReturnLabel_177:
   \   000003   35..         ADDC    A,?V3
   \   000005   F583         MOV     DPH,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine96:
   \   000000   2413         ADD     A,#0x13
   \   000002   F582         MOV     DPL,A
   \   000004   E4           CLR     A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine65:
   \   000000   12....       LCALL   ?Subroutine97 & 0xFFFF
   \                     ??CrossCallReturnLabel_179:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine97:
   \   000000   240C         ADD     A,#0xc
   \   000002   F582         MOV     DPL,A
   \   000004   E4           CLR     A
   \   000005   35..         ADDC    A,?V3
   \   000007   F583         MOV     DPH,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine64:
   \   000000   E5..         MOV     A,?V2
   \   000002   12....       LCALL   ?Subroutine97 & 0xFFFF
   \                     ??CrossCallReturnLabel_178:
   \   000005   E0           MOVX    A,@DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004                REQUIRE ??Subroutine118_0
   \   000004                ; // Fall through to label ??Subroutine118_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine118_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   AA82         MOV     R2,DPL
   \   000004   AB83         MOV     R3,DPH
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine47:
   \   000000   F583         MOV     DPH,A
   \   000002                REQUIRE ??Subroutine122_0
   \   000002                ; // Fall through to label ??Subroutine122_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine55:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FC           MOV     R4,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FD           MOV     R5,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine130_0:
   \   000000   12....       LCALL   ?Subroutine79 & 0xFFFF
   \                     ??CrossCallReturnLabel_302:
   \   000003   E8           MOV     A,R0
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine53:
   \   000000   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000003                REQUIRE ??Subroutine131_0
   \   000003                ; // Fall through to label ??Subroutine131_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine131_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FE           MOV     R6,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FF           MOV     R7,A
   \   000005   22           RET
    774          
    775          /*********************************************************************
    776           * @fn          ZDP_NodeDescMsg
    777           *
    778           * @brief       Builds and sends a Node Descriptor message, unicast to the
    779           *              specified device.
    780           *
    781           * @param       inMsg - incoming message
    782           * @param       nwkAddr - 16 bit network address for device
    783           * @param       pNodeDesc - pointer to the node descriptor
    784           *
    785           * @return      afStatus_t
    786           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine114_0
   \   000001                ; // Fall through to label ??Subroutine114_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    787          afStatus_t ZDP_NodeDescMsg( zdoIncomingMsg_t *inMsg,
   \                     ZDP_NodeDescMsg:
    788                                     uint16 nwkAddr, NodeDescriptorFormat_t *pNodeDesc )
    789          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    790            uint8 *pBuf = ZDP_TmpBuf;
   \   000005   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000008   E0           MOVX    A,@DPTR
   \   000009   FE           MOV     R6,A
   \   00000A   A3           INC     DPTR
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   12....       LCALL   ?Subroutine18 & 0xFFFF
    791            byte len;
    792          
    793            len = 1 + 2 + 13;  // Status + nwkAddr + Node descriptor
    794          
    795            *pBuf++ = ZDP_SUCCESS;
    796          
    797            *pBuf++ = LO_UINT16( nwkAddr );
    798            *pBuf++ = HI_UINT16( nwkAddr );
   \                     ??CrossCallReturnLabel_22:
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   12....       LCALL   ?Subroutine40 & 0xFFFF
    799          
    800            *pBuf++ = (byte)((pNodeDesc->ComplexDescAvail << 3) |
    801                               (pNodeDesc->UserDescAvail << 4) |
    802                               (pNodeDesc->LogicalType & 0x07));
   \                     ??CrossCallReturnLabel_64:
   \   000015   541F         ANL     A,#0x1f
   \   000017   8E82         MOV     DPL,R6
   \   000019   8F83         MOV     DPH,R7
   \   00001B   12....       LCALL   ?Subroutine34 & 0xFFFF
    803          
    804            *pBuf++ = (byte)((pNodeDesc->FrequencyBand << 3) | (pNodeDesc->APSFlags & 0x07));
   \                     ??CrossCallReturnLabel_199:
   \   00001E   12....       LCALL   ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_72:
   \   000021   12....       LCALL   ?Subroutine34 & 0xFFFF
    805            *pBuf++ = pNodeDesc->CapabilityFlags;
   \                     ??CrossCallReturnLabel_200:
   \   000024   12....       LCALL   ?Subroutine77 & 0xFFFF
   \                     ??CrossCallReturnLabel_255:
   \   000027   12....       LCALL   ?Subroutine33 & 0xFFFF
    806            *pBuf++ = pNodeDesc->ManufacturerCode[0];
   \                     ??CrossCallReturnLabel_51:
   \   00002A   12....       LCALL   ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_73:
   \   00002D   12....       LCALL   ?Subroutine33 & 0xFFFF
    807            *pBuf++ = pNodeDesc->ManufacturerCode[1];
   \                     ??CrossCallReturnLabel_52:
   \   000030   12....       LCALL   ?Subroutine77 & 0xFFFF
   \                     ??CrossCallReturnLabel_256:
   \   000033   12....       LCALL   ?Subroutine28 & 0xFFFF
    808            *pBuf++ = pNodeDesc->MaxBufferSize;
   \                     ??CrossCallReturnLabel_43:
   \   000036   12....       LCALL   ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_74:
   \   000039   12....       LCALL   ?Subroutine28 & 0xFFFF
    809            *pBuf++ = pNodeDesc->MaxInTransferSize[0];
   \                     ??CrossCallReturnLabel_44:
   \   00003C   A3           INC     DPTR
   \   00003D   12....       LCALL   ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_70:
   \   000040   12....       LCALL   ?Subroutine23 & 0xFFFF
    810            *pBuf++ = pNodeDesc->MaxInTransferSize[1];
   \                     ??CrossCallReturnLabel_32:
   \   000043   12....       LCALL   ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_71:
   \   000046   A3           INC     DPTR
   \   000047   F0           MOVX    @DPTR,A
    811          
    812            *pBuf++ = LO_UINT16( pNodeDesc->ServerMask );
   \   000048   E8           MOV     A,R0
   \   000049   2408         ADD     A,#0x8
   \   00004B   FC           MOV     R4,A
   \   00004C   E4           CLR     A
   \   00004D   39           ADDC    A,R1
   \   00004E   FD           MOV     R5,A
   \   00004F   8C82         MOV     DPL,R4
   \   000051   8D83         MOV     DPH,R5
   \   000053   E0           MOVX    A,@DPTR
   \   000054   F5..         MOV     ?V0,A
   \   000056   12....       LCALL   ?Subroutine69 & 0xFFFF
   \                     ??CrossCallReturnLabel_126:
   \   000059   E5..         MOV     A,?V0
   \   00005B   12....       LCALL   ?Subroutine22 & 0xFFFF
    813            *pBuf++ = HI_UINT16( pNodeDesc->ServerMask );
   \                     ??CrossCallReturnLabel_28:
   \   00005E   C0E0         PUSH    A
   \   000060   12....       LCALL   ?Subroutine68 & 0xFFFF
   \                     ??CrossCallReturnLabel_124:
   \   000063   D0E0         POP     A
   \   000065   12....       LCALL   ?Subroutine23 & 0xFFFF
    814            *pBuf++ = pNodeDesc->MaxOutTransferSize[0];
   \                     ??CrossCallReturnLabel_33:
   \   000068   A3           INC     DPTR
   \   000069   A3           INC     DPTR
   \   00006A   A3           INC     DPTR
   \   00006B   E0           MOVX    A,@DPTR
   \   00006C   C0E0         PUSH    A
   \   00006E   EE           MOV     A,R6
   \   00006F   240D         ADD     A,#0xd
   \   000071   F582         MOV     DPL,A
   \   000073   E4           CLR     A
   \   000074   3F           ADDC    A,R7
   \   000075   F583         MOV     DPH,A
   \   000077   D0E0         POP     A
   \   000079   F0           MOVX    @DPTR,A
    815            *pBuf++ = pNodeDesc->MaxOutTransferSize[1];
   \   00007A   E8           MOV     A,R0
   \   00007B   240B         ADD     A,#0xb
   \   00007D   F582         MOV     DPL,A
   \   00007F   E4           CLR     A
   \   000080   39           ADDC    A,R1
   \   000081   F583         MOV     DPH,A
   \   000083   E0           MOVX    A,@DPTR
   \   000084   C0E0         PUSH    A
   \   000086   EE           MOV     A,R6
   \   000087   240E         ADD     A,#0xe
   \   000089   F582         MOV     DPL,A
   \   00008B   E4           CLR     A
   \   00008C   3F           ADDC    A,R7
   \   00008D   F583         MOV     DPH,A
   \   00008F   D0E0         POP     A
   \   000091   F0           MOVX    @DPTR,A
    816            *pBuf = pNodeDesc->DescriptorCapability;
   \   000092   E8           MOV     A,R0
   \   000093   240C         ADD     A,#0xc
   \   000095   F582         MOV     DPL,A
   \   000097   E4           CLR     A
   \   000098   39           ADDC    A,R1
   \   000099   F583         MOV     DPH,A
   \   00009B   E0           MOVX    A,@DPTR
   \   00009C   C0E0         PUSH    A
   \   00009E   EE           MOV     A,R6
   \   00009F   240F         ADD     A,#0xf
   \   0000A1   F582         MOV     DPL,A
   \   0000A3   E4           CLR     A
   \   0000A4   3F           ADDC    A,R7
   \   0000A5   F583         MOV     DPH,A
   \   0000A7   D0E0         POP     A
   \   0000A9   F0           MOVX    @DPTR,A
    817          
    818            return fillAndSend( &(inMsg->TransSeq), &(inMsg->srcAddr), Node_Desc_rsp, len );
   \   0000AA                ; Setup parameters for call to function fillAndSend
   \   0000AA   75..02       MOV     ?V0,#0x2
   \   0000AD   75..80       MOV     ?V1,#-0x80
   \   0000B0   78..         MOV     R0,#?V0
   \   0000B2   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000B5   7910         MOV     R1,#0x10
   \   0000B7   12....       LCALL   ?Subroutine63 & 0xFFFF
   \                     ??CrossCallReturnLabel_114:
   \   0000BA   5001         JNC     ??ZDP_NodeDescMsg_0
   \   0000BC   0B           INC     R3
   \                     ??ZDP_NodeDescMsg_0:
   \   0000BD   02....       LJMP    ??Subroutine110_0 & 0xFFFF
    819          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine43:
   \   000000   12....       LCALL   ??Subroutine123_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_253:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   12....       LCALL   ?Subroutine92 & 0xFFFF
   \                     ??CrossCallReturnLabel_168:
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine92:
   \   000000   12....       LCALL   ?Subroutine104 & 0xFFFF
   \                     ??CrossCallReturnLabel_189:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine104:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8882         MOV     DPL,R0
   \   000003   8983         MOV     DPH,R1
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   12....       LCALL   ?Subroutine89 & 0xFFFF
   \                     ??CrossCallReturnLabel_163:
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine89:
   \   000000   12....       LCALL   ?Subroutine104 & 0xFFFF
   \                     ??CrossCallReturnLabel_190:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   12....       LCALL   ?Subroutine89 & 0xFFFF
   \                     ??CrossCallReturnLabel_164:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine63:
   \   000000   EA           MOV     A,R2
   \   000001   2402         ADD     A,#0x2
   \   000003   FC           MOV     R4,A
   \   000004   E4           CLR     A
   \   000005   3B           ADDC    A,R3
   \   000006   FD           MOV     R5,A
   \   000007   EA           MOV     A,R2
   \   000008   240F         ADD     A,#0xf
   \   00000A   FA           MOV     R2,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   FF           MOV     R7,A
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   E4           CLR     A
   \   000006   F0           MOVX    @DPTR,A
   \   000007   EC           MOV     A,R4
   \   000008   A3           INC     DPTR
   \   000009   F0           MOVX    @DPTR,A
   \   00000A   ED           MOV     A,R5
   \   00000B   8E82         MOV     DPL,R6
   \   00000D   8F83         MOV     DPH,R7
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   F0           MOVX    @DPTR,A
   \   000012   740A         MOV     A,#0xa
   \   000014   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   12....       LCALL   ?Subroutine90 & 0xFFFF
   \                     ??CrossCallReturnLabel_166:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine90:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8C82         MOV     DPL,R4
   \   000003   8D83         MOV     DPH,R5
   \   000005   A3           INC     DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine69:
   \   000000   EE           MOV     A,R6
   \   000001   240B         ADD     A,#0xb
   \   000003   F582         MOV     DPL,A
   \   000005   E4           CLR     A
   \   000006   3F           ADDC    A,R7
   \   000007   F583         MOV     DPH,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine44:
   \   000000   12....       LCALL   ??Subroutine123_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_254:
   \   000003   A3           INC     DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine77:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine123_0
   \   000001                ; // Fall through to label ??Subroutine123_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine123_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine68:
   \   000000   12....       LCALL   ?Subroutine98 & 0xFFFF
   \                     ??CrossCallReturnLabel_181:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine98:
   \   000000   EE           MOV     A,R6
   \   000001   240C         ADD     A,#0xc
   \   000003   F582         MOV     DPL,A
   \   000005   E4           CLR     A
   \   000006   3F           ADDC    A,R7
   \   000007   F583         MOV     DPH,A
   \   000009   22           RET
    820          
    821          /*********************************************************************
    822           * @fn          ZDP_PowerDescMsg
    823           *
    824           * @brief       Builds and sends a Power Descriptor message, unicast to the
    825           *              specified device.
    826           *
    827           * @param       inMsg - incoming message (request)
    828           * @param       nwkAddr - 16 bit network address for device
    829           * @param       pPowerDesc - pointer to the node descriptor
    830           *
    831           * @return      afStatus_t
    832           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    833          afStatus_t ZDP_PowerDescMsg( zdoIncomingMsg_t *inMsg,
   \                     ZDP_PowerDescMsg:
    834                               uint16 nwkAddr, NodePowerDescriptorFormat_t *pPowerDesc )
    835          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    836            uint8 *pBuf = ZDP_TmpBuf;
   \   000005   12....       LCALL   ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_283:
   \   000008   FE           MOV     R6,A
   \   000009   E9           MOV     A,R1
   \   00000A   12....       LCALL   ?Subroutine18 & 0xFFFF
    837            byte len = 1 + 2 + 2;  // Status + nwkAddr + Node Power descriptor.
    838          
    839            *pBuf++ = ZDP_SUCCESS;
    840          
    841            *pBuf++ = LO_UINT16( nwkAddr );
    842            *pBuf++ = HI_UINT16( nwkAddr );
   \                     ??CrossCallReturnLabel_23:
   \   00000D   12....       LCALL   ?XSTACK_DISP0_8
   \   000010   12....       LCALL   ?Subroutine40 & 0xFFFF
    843          
    844            *pBuf++ = (byte)((pPowerDesc->AvailablePowerSources << 4)
    845                              | (pPowerDesc->PowerMode & 0x0F));
   \                     ??CrossCallReturnLabel_65:
   \   000013   8E82         MOV     DPL,R6
   \   000015   8F83         MOV     DPH,R7
   \   000017   A3           INC     DPTR
   \   000018   A3           INC     DPTR
   \   000019   A3           INC     DPTR
   \   00001A   12....       LCALL   ?Subroutine93 & 0xFFFF
    846            *pBuf++ = (byte)((pPowerDesc->CurrentPowerSourceLevel << 4)
    847                              | (pPowerDesc->CurrentPowerSource & 0x0F));
   \                     ??CrossCallReturnLabel_204:
   \   00001D   12....       LCALL   ??Subroutine122_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_244:
   \   000020   540F         ANL     A,#0xf
   \   000022   F9           MOV     R1,A
   \   000023   740C         MOV     A,#0xc
   \   000025   78..         MOV     R0,#?V0
   \   000027   12....       LCALL   ?US_SHR
   \   00002A   E5..         MOV     A,?V0
   \   00002C   C4           SWAP    A
   \   00002D   49           ORL     A,R1
   \   00002E   8E82         MOV     DPL,R6
   \   000030   8F83         MOV     DPH,R7
   \   000032   A3           INC     DPTR
   \   000033   A3           INC     DPTR
   \   000034   A3           INC     DPTR
   \   000035   A3           INC     DPTR
   \   000036   F0           MOVX    @DPTR,A
    848          
    849            return fillAndSend( &(inMsg->TransSeq), &(inMsg->srcAddr), Power_Desc_rsp, len );
   \   000037                ; Setup parameters for call to function fillAndSend
   \   000037   75..03       MOV     ?V0,#0x3
   \   00003A   75..80       MOV     ?V1,#-0x80
   \   00003D   78..         MOV     R0,#?V0
   \   00003F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000042   7905         MOV     R1,#0x5
   \   000044   12....       LCALL   ?Subroutine63 & 0xFFFF
   \                     ??CrossCallReturnLabel_115:
   \   000047   5001         JNC     ??ZDP_PowerDescMsg_0
   \   000049   0B           INC     R3
   \                     ??ZDP_PowerDescMsg_0:
   \   00004A   02....       LJMP    ??Subroutine110_0 & 0xFFFF
    850          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine41:
   \   000000   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000003                REQUIRE ??Subroutine130_0
   \   000003                ; // Fall through to label ??Subroutine130_0
    851          
    852          /*********************************************************************
    853           * @fn          ZDP_SimpleDescMsg
    854           *
    855           * @brief       Builds and sends a Simple Descriptor message, unicast to the
    856           *              specified device.
    857           *
    858           * @param       inMsg - incoming message (request)
    859           * @param       Status - message status (ZDP_SUCCESS or other)
    860           * @param       pSimpleDesc - pointer to the node descriptor
    861           *
    862           * @return      afStatus_t
    863           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    864          afStatus_t ZDP_SimpleDescMsg( zdoIncomingMsg_t *inMsg, byte Status,
   \                     ZDP_SimpleDescMsg:
    865                                        SimpleDescriptionFormat_t *pSimpleDesc )
    866          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   89..         MOV     ?V6,R1
    867            uint8 *pBuf = ZDP_TmpBuf;
   \   00000B   90....       MOV     DPTR,#ZDP_TmpBuf
   \   00000E   12....       LCALL   ??Subroutine122_0 & 0xFFFF
    868            uint8 i, len;
    869          
    870            if ( Status == ZDP_SUCCESS && pSimpleDesc )
   \                     ??CrossCallReturnLabel_245:
   \   000011   E9           MOV     A,R1
   \   000012   702E         JNZ     ??ZDP_SimpleDescMsg_0
   \   000014   EC           MOV     A,R4
   \   000015   4D           ORL     A,R5
   \   000016   602A         JZ      ??ZDP_SimpleDescMsg_0
    871            {
    872              // Status + NWKAddrOfInterest + desc length + empty simple descriptor.
    873              len = 1 + 2 + 1 + 8;
    874              len += (pSimpleDesc->AppNumInClusters + pSimpleDesc->AppNumOutClusters) * sizeof ( uint16 );
   \   000018   8C82         MOV     DPL,R4
   \   00001A   8D83         MOV     DPH,R5
   \   00001C   A3           INC     DPTR
   \   00001D   A3           INC     DPTR
   \   00001E   A3           INC     DPTR
   \   00001F   A3           INC     DPTR
   \   000020   A3           INC     DPTR
   \   000021   A3           INC     DPTR
   \   000022   A3           INC     DPTR
   \   000023   A3           INC     DPTR
   \   000024   A3           INC     DPTR
   \   000025   E0           MOVX    A,@DPTR
   \   000026   F8           MOV     R0,A
   \   000027   8C82         MOV     DPL,R4
   \   000029   8D83         MOV     DPH,R5
   \   00002B   A3           INC     DPTR
   \   00002C   A3           INC     DPTR
   \   00002D   A3           INC     DPTR
   \   00002E   A3           INC     DPTR
   \   00002F   A3           INC     DPTR
   \   000030   A3           INC     DPTR
   \   000031   E0           MOVX    A,@DPTR
   \   000032   28           ADD     A,R0
   \   000033   C3           CLR     C
   \   000034   33           RLC     A
   \   000035   240C         ADD     A,#0xc
   \   000037   F9           MOV     R1,A
    875            }
    876            else
    877            {
    878              len = 1 + 2 + 1; // Status + desc length
    879            }
    880            if ( len >= ZDP_BUF_SZ-1 )
   \   000038   C3           CLR     C
   \   000039   944F         SUBB    A,#0x4f
   \   00003B   4007         JC      ??ZDP_SimpleDescMsg_1
    881            {
    882              return afStatus_MEM_FAIL;
   \   00003D   7910         MOV     R1,#0x10
   \   00003F   02....       LJMP    ??ZDP_SimpleDescMsg_2 & 0xFFFF
    883            }
   \                     ??ZDP_SimpleDescMsg_0:
   \   000042   7904         MOV     R1,#0x4
    884          
    885            *pBuf++ = Status;
   \                     ??ZDP_SimpleDescMsg_1:
   \   000044   85..82       MOV     DPL,?V0
   \   000047   85..83       MOV     DPH,?V1
   \   00004A   E5..         MOV     A,?V6
   \   00004C   F0           MOVX    @DPTR,A
    886          
    887            *pBuf++ = LO_UINT16( ZDAppNwkAddr.addr.shortAddr );
   \   00004D   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000050   12....       LCALL   ?Subroutine42 & 0xFFFF
    888            *pBuf++ = HI_UINT16( ZDAppNwkAddr.addr.shortAddr );
   \                     ??CrossCallReturnLabel_67:
   \   000053   90....       MOV     DPTR,#ZDAppNwkAddr + 1
   \   000056   12....       LCALL   ?Subroutine52 & 0xFFFF
   \                     ??CrossCallReturnLabel_87:
   \   000059   F0           MOVX    @DPTR,A
    889          
    890            if ( len > 4 )
   \   00005A   E9           MOV     A,R1
   \   00005B   C3           CLR     C
   \   00005C   9405         SUBB    A,#0x5
   \   00005E   5003         JNC     $+5
   \   000060   02....       LJMP    ??ZDP_SimpleDescMsg_3 & 0xFFFF
    891            {
    892              *pBuf++ = len - 4;   // Simple descriptor length
   \   000063   74FC         MOV     A,#-0x4
   \   000065   29           ADD     A,R1
   \   000066   85..82       MOV     DPL,?V0
   \   000069   85..83       MOV     DPH,?V1
   \   00006C   A3           INC     DPTR
   \   00006D   A3           INC     DPTR
   \   00006E   A3           INC     DPTR
   \   00006F   F0           MOVX    @DPTR,A
    893          
    894              *pBuf++ = pSimpleDesc->EndPoint;
   \   000070   8C82         MOV     DPL,R4
   \   000072   8D83         MOV     DPH,R5
   \   000074   12....       LCALL   ?Subroutine51 & 0xFFFF
   \                     ??CrossCallReturnLabel_85:
   \   000077   12....       LCALL   ?Subroutine90 & 0xFFFF
    895              *pBuf++ = LO_UINT16( pSimpleDesc->AppProfId );
   \                     ??CrossCallReturnLabel_165:
   \   00007A   AA82         MOV     R2,DPL
   \   00007C   AB83         MOV     R3,DPH
   \   00007E   12....       LCALL   ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_111:
   \   000081   12....       LCALL   ?Subroutine10 & 0xFFFF
    896              *pBuf++ = HI_UINT16( pSimpleDesc->AppProfId );
   \                     ??CrossCallReturnLabel_4:
   \   000084   F0           MOVX    @DPTR,A
    897              *pBuf++ = LO_UINT16( pSimpleDesc->AppDeviceId );
   \   000085   EC           MOV     A,R4
   \   000086   2403         ADD     A,#0x3
   \   000088   12....       LCALL   ?Subroutine73 & 0xFFFF
   \                     ??CrossCallReturnLabel_134:
   \   00008B   12....       LCALL   ?Subroutine52 & 0xFFFF
   \                     ??CrossCallReturnLabel_88:
   \   00008E   12....       LCALL   ?Subroutine10 & 0xFFFF
    898              *pBuf++ = HI_UINT16( pSimpleDesc->AppDeviceId );
   \                     ??CrossCallReturnLabel_5:
   \   000091   12....       LCALL   ?Subroutine29 & 0xFFFF
    899          
    900              *pBuf++ = (byte)(pSimpleDesc->AppDevVer & 0x0F);
   \                     ??CrossCallReturnLabel_45:
   \   000094   E0           MOVX    A,@DPTR
   \   000095   540F         ANL     A,#0xf
   \   000097   85..82       MOV     DPL,?V0
   \   00009A   85..83       MOV     DPH,?V1
   \   00009D   A3           INC     DPTR
   \   00009E   A3           INC     DPTR
   \   00009F   A3           INC     DPTR
   \   0000A0   A3           INC     DPTR
   \   0000A1   A3           INC     DPTR
   \   0000A2   A3           INC     DPTR
   \   0000A3   A3           INC     DPTR
   \   0000A4   A3           INC     DPTR
   \   0000A5   A3           INC     DPTR
   \   0000A6   F0           MOVX    @DPTR,A
    901          
    902              *pBuf++ = pSimpleDesc->AppNumInClusters;
   \   0000A7   EC           MOV     A,R4
   \   0000A8   2406         ADD     A,#0x6
   \   0000AA   12....       LCALL   ?Subroutine73 & 0xFFFF
   \                     ??CrossCallReturnLabel_135:
   \   0000AD   12....       LCALL   ?Subroutine51 & 0xFFFF
   \                     ??CrossCallReturnLabel_86:
   \   0000B0   A3           INC     DPTR
   \   0000B1   A3           INC     DPTR
   \   0000B2   A3           INC     DPTR
   \   0000B3   A3           INC     DPTR
   \   0000B4   A3           INC     DPTR
   \   0000B5   A3           INC     DPTR
   \   0000B6   F0           MOVX    @DPTR,A
   \   0000B7   E5..         MOV     A,?V0
   \   0000B9   240B         ADD     A,#0xb
   \   0000BB   F5..         MOV     ?V0,A
   \   0000BD   5002         JNC     ??ZDP_SimpleDescMsg_4
   \   0000BF   05..         INC     ?V1
    903              if ( pSimpleDesc->AppNumInClusters )
   \                     ??ZDP_SimpleDescMsg_4:
   \   0000C1   8A82         MOV     DPL,R2
   \   0000C3   8B83         MOV     DPH,R3
   \   0000C5   E0           MOVX    A,@DPTR
   \   0000C6   6027         JZ      ??ZDP_SimpleDescMsg_5
    904              {
    905                for (i=0; i<pSimpleDesc->AppNumInClusters; ++i)
   \   0000C8   7800         MOV     R0,#0x0
   \   0000CA   8012         SJMP    ??ZDP_SimpleDescMsg_6
    906                {
    907                  *pBuf++ = LO_UINT16( pSimpleDesc->pAppInClusterList[i] );
   \                     ??ZDP_SimpleDescMsg_7:
   \   0000CC   E8           MOV     A,R0
   \   0000CD   25E0         ADD     A,0xE0 /* A   */
   \   0000CF   FA           MOV     R2,A
   \   0000D0   E4           CLR     A
   \   0000D1   33           RLC     A
   \   0000D2   FB           MOV     R3,A
   \   0000D3   EC           MOV     A,R4
   \   0000D4   2407         ADD     A,#0x7
   \   0000D6   12....       LCALL   ?Subroutine8 & 0xFFFF
    908                  *pBuf++ = HI_UINT16( pSimpleDesc->pAppInClusterList[i] );
    909                }
   \                     ??CrossCallReturnLabel_0:
   \   0000D9   5002         JNC     ??ZDP_SimpleDescMsg_8
   \   0000DB   05..         INC     ?V1
   \                     ??ZDP_SimpleDescMsg_8:
   \   0000DD   08           INC     R0
   \                     ??ZDP_SimpleDescMsg_6:
   \   0000DE   8C82         MOV     DPL,R4
   \   0000E0   8D83         MOV     DPH,R5
   \   0000E2   A3           INC     DPTR
   \   0000E3   A3           INC     DPTR
   \   0000E4   A3           INC     DPTR
   \   0000E5   A3           INC     DPTR
   \   0000E6   A3           INC     DPTR
   \   0000E7   A3           INC     DPTR
   \   0000E8   E0           MOVX    A,@DPTR
   \   0000E9   FA           MOV     R2,A
   \   0000EA   E8           MOV     A,R0
   \   0000EB   C3           CLR     C
   \   0000EC   9A           SUBB    A,R2
   \   0000ED   40DD         JC      ??ZDP_SimpleDescMsg_7
    910              }
    911          
    912              *pBuf++ = pSimpleDesc->AppNumOutClusters;
   \                     ??ZDP_SimpleDescMsg_5:
   \   0000EF   EC           MOV     A,R4
   \   0000F0   2409         ADD     A,#0x9
   \   0000F2   12....       LCALL   ?Subroutine73 & 0xFFFF
   \                     ??CrossCallReturnLabel_136:
   \   0000F5   12....       LCALL   ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_112:
   \   0000F8   12....       LCALL   ?Subroutine35 & 0xFFFF
    913              if ( pSimpleDesc->AppNumOutClusters )
   \                     ??CrossCallReturnLabel_53:
   \   0000FB   8A82         MOV     DPL,R2
   \   0000FD   8B83         MOV     DPH,R3
   \   0000FF   E0           MOVX    A,@DPTR
   \   000100   6035         JZ      ??ZDP_SimpleDescMsg_9
    914              {
    915                for (i=0; i<pSimpleDesc->AppNumOutClusters; ++i)
   \   000102   7800         MOV     R0,#0x0
   \                     ??ZDP_SimpleDescMsg_10:
   \   000104   8C82         MOV     DPL,R4
   \   000106   8D83         MOV     DPH,R5
   \   000108   A3           INC     DPTR
   \   000109   A3           INC     DPTR
   \   00010A   A3           INC     DPTR
   \   00010B   A3           INC     DPTR
   \   00010C   A3           INC     DPTR
   \   00010D   A3           INC     DPTR
   \   00010E   A3           INC     DPTR
   \   00010F   A3           INC     DPTR
   \   000110   A3           INC     DPTR
   \   000111   E0           MOVX    A,@DPTR
   \   000112   FA           MOV     R2,A
   \   000113   E8           MOV     A,R0
   \   000114   C3           CLR     C
   \   000115   9A           SUBB    A,R2
   \   000116   501F         JNC     ??ZDP_SimpleDescMsg_9
    916                {
    917                  *pBuf++ = LO_UINT16( pSimpleDesc->pAppOutClusterList[i] );
   \   000118   E8           MOV     A,R0
   \   000119   25E0         ADD     A,0xE0 /* A   */
   \   00011B   FA           MOV     R2,A
   \   00011C   E4           CLR     A
   \   00011D   33           RLC     A
   \   00011E   FB           MOV     R3,A
   \   00011F   EC           MOV     A,R4
   \   000120   240A         ADD     A,#0xa
   \   000122   12....       LCALL   ?Subroutine8 & 0xFFFF
    918                  *pBuf++ = HI_UINT16( pSimpleDesc->pAppOutClusterList[i] );
    919                }
   \                     ??CrossCallReturnLabel_1:
   \   000125   5002         JNC     ??ZDP_SimpleDescMsg_11
   \   000127   05..         INC     ?V1
   \                     ??ZDP_SimpleDescMsg_11:
   \   000129   08           INC     R0
   \   00012A   80D8         SJMP    ??ZDP_SimpleDescMsg_10
    920              }
    921            }
    922          
    923            else
    924            {
    925              *pBuf = 0; // Description Length = 0;
   \                     ??ZDP_SimpleDescMsg_3:
   \   00012C   85..82       MOV     DPL,?V0
   \   00012F   85..83       MOV     DPH,?V1
   \   000132   A3           INC     DPTR
   \   000133   A3           INC     DPTR
   \   000134   A3           INC     DPTR
   \   000135   E4           CLR     A
   \   000136   F0           MOVX    @DPTR,A
    926            }
    927          
    928            return fillAndSend( &(inMsg->TransSeq), &(inMsg->srcAddr), Simple_Desc_rsp, len );
   \                     ??ZDP_SimpleDescMsg_9:
   \   000137                ; Setup parameters for call to function fillAndSend
   \   000137   75..04       MOV     ?V0,#0x4
   \   00013A   75..80       MOV     ?V1,#-0x80
   \   00013D   78..         MOV     R0,#?V0
   \   00013F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000142   EE           MOV     A,R6
   \   000143   2402         ADD     A,#0x2
   \   000145   FC           MOV     R4,A
   \   000146   E4           CLR     A
   \   000147   3F           ADDC    A,R7
   \   000148   FD           MOV     R5,A
   \   000149   EE           MOV     A,R6
   \   00014A   240F         ADD     A,#0xf
   \   00014C   FA           MOV     R2,A
   \   00014D   E4           CLR     A
   \   00014E   3F           ADDC    A,R7
   \   00014F   FB           MOV     R3,A
   \   000150   12....       LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   000153   7402         MOV     A,#0x2
   \   000155   12....       LCALL   ?DEALLOC_XSTACK8
   \                     ??ZDP_SimpleDescMsg_2:
   \   000158   7F07         MOV     R7,#0x7
   \   00015A   02....       LJMP    ?BANKED_LEAVE_XDATA
    929          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine73:
   \   000000   FA           MOV     R2,A
   \   000001   E4           CLR     A
   \   000002   3D           ADDC    A,R5
   \   000003   FB           MOV     R3,A
   \   000004   8A82         MOV     DPL,R2
   \   000006   8B83         MOV     DPH,R3
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine51:
   \   000000   12....       LCALL   ?Subroutine78 & 0xFFFF
   \                     ??CrossCallReturnLabel_145:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine78:
   \   000000   12....       LCALL   ?Subroutine101 & 0xFFFF
   \                     ??CrossCallReturnLabel_185:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   F0           MOVX    @DPTR,A
   \   000006   8A82         MOV     DPL,R2
   \   000008   8B83         MOV     DPH,R3
   \   00000A   A3           INC     DPTR
   \   00000B   12....       LCALL   ?Subroutine78 & 0xFFFF
   \                     ??CrossCallReturnLabel_144:
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   12....       LCALL   ?Subroutine99 & 0xFFFF
   \                     ??CrossCallReturnLabel_183:
   \   000003   12....       LCALL   ?Subroutine75 & 0xFFFF
   \                     ??CrossCallReturnLabel_140:
   \   000006   12....       LCALL   ?Subroutine86 & 0xFFFF
   \                     ??CrossCallReturnLabel_157:
   \   000009   85..82       MOV     DPL,?V4
   \   00000C   85..83       MOV     DPH,?V5
   \   00000F   12....       LCALL   ?Subroutine75 & 0xFFFF
   \                     ??CrossCallReturnLabel_141:
   \   000012   A3           INC     DPTR
   \   000013   12....       LCALL   ?Subroutine81 & 0xFFFF
   \                     ??CrossCallReturnLabel_149:
   \   000016   E5..         MOV     A,?V0
   \   000018   2402         ADD     A,#0x2
   \   00001A   F5..         MOV     ?V0,A
   \   00001C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine75:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   2A           ADD     A,R2
   \   000002   F5..         MOV     ?V2,A
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   3B           ADDC    A,R3
   \   000007   85..82       MOV     DPL,?V2
   \   00000A   F583         MOV     DPH,A
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine61:
   \   000000   12....       LCALL   ?Subroutine102 & 0xFFFF
   \                     ??CrossCallReturnLabel_186:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine42:
   \   000000   12....       LCALL   ?Subroutine81 & 0xFFFF
   \                     ??CrossCallReturnLabel_150:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine81:
   \   000000   12....       LCALL   ?Subroutine102 & 0xFFFF
   \                     ??CrossCallReturnLabel_187:
   \   000003   A3           INC     DPTR
   \   000004   F0           MOVX    @DPTR,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   8582..       MOV     ?V0,DPL
   \   000005   8583..       MOV     ?V1,DPH
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine52:
   \   000000   12....       LCALL   ?Subroutine101 & 0xFFFF
   \                     ??CrossCallReturnLabel_184:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine101:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   85..82       MOV     DPL,?V0
   \   000004   85..83       MOV     DPH,?V1
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine99:
   \   000000   F5..         MOV     ?V4,A
   \   000002   E4           CLR     A
   \   000003   3D           ADDC    A,R5
   \   000004   F5..         MOV     ?V5,A
   \   000006   85..82       MOV     DPL,?V4
   \   000009   F583         MOV     DPH,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   12....       LCALL   ?Subroutine90 & 0xFFFF
   \                     ??CrossCallReturnLabel_167:
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   22           RET
    930          
    931          /*********************************************************************
    932           * @fn          ZDP_EPRsp
    933           *
    934           * @brief       This builds and send an endpoint list. Used in
    935           *              Active_EP_rsp and Match_Desc_Rsp
    936           *              message.  This function sends unicast message to the
    937           *              requesting device.
    938           *
    939           * @param       MsgType - either Active_EP_rsp or Match_Desc_Rsp
    940           * @param       dstAddr - destination address
    941           * @param       Status - message status (ZDP_SUCCESS or other)
    942           * @param       nwkAddr - Device's short address that this response describes
    943           * @param       Count - number of endpoint/interfaces in list
    944           * @param       pEPIntfList - Array of Endpoint/Interfaces
    945           * @param       SecurityEnable - Security Options
    946           *
    947           * @return      afStatus_t
    948           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    949          afStatus_t ZDP_EPRsp( uint16 MsgType, byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_EPRsp:
    950                                  byte Status, uint16 nwkAddr, byte Count,
    951                                  uint8 *pEPList,
    952                                  byte SecurityEnable )
    953          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   85..82       MOV     DPL,?XSP + 0
   \   00000E   85..83       MOV     DPH,?XSP + 1
   \   000011   F0           MOVX    @DPTR,A
   \   000012   EA           MOV     A,R2
   \   000013   FE           MOV     R6,A
   \   000014   EB           MOV     A,R3
   \   000015   FF           MOV     R7,A
   \   000016   8C..         MOV     ?V6,R4
   \   000018   8D..         MOV     ?V7,R5
    954            uint8 *pBuf = ZDP_TmpBuf;
   \   00001A   12....       LCALL   ??Subroutine119_0 & 0xFFFF
    955            byte len = 1 + 2 + 1;  // Status + nwkAddr + endpoint/interface count.
   \                     ??CrossCallReturnLabel_226:
   \   00001D   75..04       MOV     ?V4,#0x4
    956            byte txOptions;
    957          
    958            (void)SecurityEnable;  // Intentionally unreferenced parameter
    959          
    960            if ( MsgType == Match_Desc_rsp )
   \   000020   7406         MOV     A,#0x6
   \   000022   6E           XRL     A,R6
   \   000023   7003         JNZ     ??ZDP_EPRsp_0
   \   000025   7480         MOV     A,#-0x80
   \   000027   6F           XRL     A,R7
   \                     ??ZDP_EPRsp_0:
   \   000028   7005         JNZ     ??ZDP_EPRsp_1
    961              txOptions = AF_MSG_ACK_REQUEST;
   \   00002A   75..10       MOV     ?V3,#0x10
   \   00002D   8003         SJMP    ??ZDP_EPRsp_2
    962            else
    963              txOptions = 0;
   \                     ??ZDP_EPRsp_1:
   \   00002F   75..00       MOV     ?V3,#0x0
    964          
    965              *pBuf++ = Status;
   \                     ??ZDP_EPRsp_2:
   \   000032   7411         MOV     A,#0x11
   \   000034   12....       LCALL   ?XSTACK_DISP0_8
   \   000037   12....       LCALL   ?Subroutine48 & 0xFFFF
   \                     ??CrossCallReturnLabel_79:
   \   00003A   7412         MOV     A,#0x12
   \   00003C   12....       LCALL   ?XSTACK_DISP0_8
   \   00003F   12....       LCALL   ?Subroutine13 & 0xFFFF
    966            *pBuf++ = LO_UINT16( nwkAddr );
    967            *pBuf++ = HI_UINT16( nwkAddr );
   \                     ??CrossCallReturnLabel_10:
   \   000042   7414         MOV     A,#0x14
   \   000044   12....       LCALL   ?XSTACK_DISP0_8
   \   000047   E0           MOVX    A,@DPTR
   \   000048   FC           MOV     R4,A
    968          
    969            *pBuf++ = Count;   // Endpoint/Interface count
   \   000049   8A82         MOV     DPL,R2
   \   00004B   8B83         MOV     DPH,R3
   \   00004D   A3           INC     DPTR
   \   00004E   A3           INC     DPTR
   \   00004F   A3           INC     DPTR
   \   000050   F0           MOVX    @DPTR,A
    970          
    971            if ( Count )
   \   000051   6021         JZ      ??ZDP_EPRsp_3
    972            {
    973              len += Count;
   \   000053   7404         MOV     A,#0x4
   \   000055   2C           ADD     A,R4
   \   000056   F5..         MOV     ?V4,A
    974              osal_memcpy( pBuf, pEPList, Count );
   \   000058                ; Setup parameters for call to function osal_memcpy
   \   000058   7415         MOV     A,#0x15
   \   00005A   12....       LCALL   ?XSTACK_DISP0_8
   \   00005D   12....       LCALL   ?Subroutine46 & 0xFFFF
    975            }
   \                     ??CrossCallReturnLabel_77:
   \   000060   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000063   7D00         MOV     R5,#0x0
   \   000065   EA           MOV     A,R2
   \   000066   2404         ADD     A,#0x4
   \   000068   FA           MOV     R2,A
   \   000069   5001         JNC     ??ZDP_EPRsp_4
   \   00006B   0B           INC     R3
   \                     ??ZDP_EPRsp_4:
   \   00006C   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00006F   7403         MOV     A,#0x3
   \   000071   12....       LCALL   ?DEALLOC_XSTACK8
    976          
    977            FillAndSendTxOptions( &TransSeq, dstAddr, MsgType, len, txOptions );
   \                     ??ZDP_EPRsp_3:
   \   000074   E5..         MOV     A,?V3
   \   000076   90....       MOV     DPTR,#ZDP_TxOptions
   \   000079   F0           MOVX    @DPTR,A
   \   00007A                ; Setup parameters for call to function fillAndSend
   \   00007A   8E..         MOV     ?V0,R6
   \   00007C   8F..         MOV     ?V1,R7
   \   00007E   78..         MOV     R0,#?V0
   \   000080   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000083   A9..         MOV     R1,?V4
   \   000085   AC..         MOV     R4,?V6
   \   000087   AD..         MOV     R5,?V7
   \   000089   7402         MOV     A,#0x2
   \   00008B   12....       LCALL   ?XSTACK_DISP101_8
   \   00008E   12....       LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   000091   7402         MOV     A,#0x2
   \   000093   12....       LCALL   ?DEALLOC_XSTACK8
   \   000096   E9           MOV     A,R1
   \   000097   F9           MOV     R1,A
   \   000098   90....       MOV     DPTR,#ZDP_TxOptions
   \   00009B   E4           CLR     A
   \   00009C   F0           MOVX    @DPTR,A
   \   00009D   04           INC     A
   \   00009E   02....       LJMP    ??Subroutine124_0 & 0xFFFF
    978          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   12....       LCALL   ?Subroutine76 & 0xFFFF
   \                     ??CrossCallReturnLabel_142:
   \   000003   12....       LCALL   ?Subroutine94 & 0xFFFF
   \                     ??CrossCallReturnLabel_170:
   \   000006   F0           MOVX    @DPTR,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine48:
   \   000000   12....       LCALL   ?Subroutine82 & 0xFFFF
   \                     ??CrossCallReturnLabel_153:
   \   000003   F0           MOVX    @DPTR,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine124_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine125_0
   \   000003                ; // Fall through to label ??Subroutine125_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine125_0:
   \   000000   7F08         MOV     R7,#0x8
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine82:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine46:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V1,A
   \   000007   75..00       MOV     ?V2,#0x0
   \   00000A   78..         MOV     R0,#?V0
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine94:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   E9           MOV     A,R1
   \   000002   8A82         MOV     DPL,R2
   \   000004   8B83         MOV     DPH,R3
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine76:
   \   000000   12....       LCALL   ??Subroutine134_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_305:
   \   000003   F9           MOV     R1,A
   \   000004   E8           MOV     A,R0
   \   000005   8A82         MOV     DPL,R2
   \   000007   8B83         MOV     DPH,R3
   \   000009   A3           INC     DPTR
   \   00000A   22           RET
    979          
    980          /*********************************************************************
    981           * @fn          ZDP_UserDescRsp
    982           *
    983           * @brief       Build and send the User Decriptor Response.
    984           *
    985           *
    986           * @param       dstAddr - destination address
    987           * @param       nwkAddrOfInterest -
    988           * @param       userDesc -
    989           * @param       SecurityEnable - Security Options
    990           *
    991           * @return      ZStatus_t
    992           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    993          ZStatus_t ZDP_UserDescRsp( byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_UserDescRsp:
    994                          uint16 nwkAddrOfInterest, UserDescriptorFormat_t *userDesc,
    995                          byte SecurityEnable )
    996          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   85..82       MOV     DPL,?XSP + 0
   \   00000E   85..83       MOV     DPH,?XSP + 1
   \   000011   F0           MOVX    @DPTR,A
   \   000012   8A..         MOV     ?V6,R2
   \   000014   8B..         MOV     ?V7,R3
    997            uint8 *pBuf = ZDP_TmpBuf;
   \   000016   12....       LCALL   ??Subroutine119_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_227:
   \   000019   7411         MOV     A,#0x11
   \   00001B   12....       LCALL   ?XSTACK_DISP0_8
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   F5..         MOV     ?V4,A
   \   000021   A3           INC     DPTR
   \   000022   E0           MOVX    A,@DPTR
   \   000023   F5..         MOV     ?V5,A
    998            byte len = 1 + 2 + 1;  // Status + nwkAddr + descriptor length.
    999          
   1000            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1001          
   1002            len += userDesc->len;
   \   000025   85..82       MOV     DPL,?V4
   \   000028   F583         MOV     DPH,A
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   2404         ADD     A,#0x4
   \   00002D   FF           MOV     R7,A
   1003          
   1004            *pBuf++ = ZSUCCESS;
   \   00002E   8A82         MOV     DPL,R2
   \   000030   8B83         MOV     DPH,R3
   \   000032   E4           CLR     A
   \   000033   F0           MOVX    @DPTR,A
   1005          
   1006            *pBuf++ = LO_UINT16( nwkAddrOfInterest );
   \   000034   EC           MOV     A,R4
   \   000035   A3           INC     DPTR
   \   000036   F0           MOVX    @DPTR,A
   1007            *pBuf++ = HI_UINT16( nwkAddrOfInterest );
   \   000037   ED           MOV     A,R5
   \   000038   8A82         MOV     DPL,R2
   \   00003A   8B83         MOV     DPH,R3
   \   00003C   A3           INC     DPTR
   \   00003D   A3           INC     DPTR
   \   00003E   F0           MOVX    @DPTR,A
   1008          
   1009            *pBuf++ = userDesc->len;
   \   00003F   85..82       MOV     DPL,?V4
   \   000042   85..83       MOV     DPH,?V5
   \   000045   12....       LCALL   ?Subroutine82 & 0xFFFF
   \                     ??CrossCallReturnLabel_151:
   \   000048   12....       LCALL   ?Subroutine36 & 0xFFFF
   1010            osal_memcpy( pBuf, userDesc->desc, userDesc->len );
   \                     ??CrossCallReturnLabel_55:
   \   00004B   AC82         MOV     R4,DPL
   \   00004D   AD83         MOV     R5,DPH
   \   00004F   8C..         MOV     ?V0,R4
   \   000051   8D..         MOV     ?V1,R5
   \   000053   75..00       MOV     ?V2,#0x0
   \   000056   78..         MOV     R0,#?V0
   \   000058   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00005B   85..82       MOV     DPL,?V4
   \   00005E   85..83       MOV     DPH,?V5
   \   000061   E0           MOVX    A,@DPTR
   \   000062   FC           MOV     R4,A
   \   000063   7D00         MOV     R5,#0x0
   \   000065   EA           MOV     A,R2
   \   000066   2404         ADD     A,#0x4
   \   000068   FA           MOV     R2,A
   \   000069   5001         JNC     ??ZDP_UserDescRsp_0
   \   00006B   0B           INC     R3
   \                     ??ZDP_UserDescRsp_0:
   \   00006C   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00006F   7403         MOV     A,#0x3
   \   000071   12....       LCALL   ?DEALLOC_XSTACK8
   1011          
   1012            return (ZStatus_t)fillAndSend( &TransSeq, dstAddr, User_Desc_rsp, len );
   \   000074                ; Setup parameters for call to function fillAndSend
   \   000074   75..11       MOV     ?V0,#0x11
   \   000077   75..80       MOV     ?V1,#-0x80
   \   00007A   78..         MOV     R0,#?V0
   \   00007C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00007F   EF           MOV     A,R7
   \   000080   F9           MOV     R1,A
   \   000081   AC..         MOV     R4,?V6
   \   000083   AD..         MOV     R5,?V7
   \   000085   7402         MOV     A,#0x2
   \   000087   12....       LCALL   ?XSTACK_DISP101_8
   \   00008A   12....       LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   00008D   7402         MOV     A,#0x2
   \   00008F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000092   02....       LJMP    ?Subroutine4 & 0xFFFF
   1013          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   7401         MOV     A,#0x1
   \   000002                REQUIRE ??Subroutine124_0
   \   000002                ; // Fall through to label ??Subroutine124_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   F0           MOVX    @DPTR,A
   \   000004                ; Setup parameters for call to function osal_memcpy
   \   000004   85..82       MOV     DPL,?V4
   \   000007   85..83       MOV     DPH,?V5
   \   00000A   A3           INC     DPTR
   \   00000B   22           RET
   1014          
   1015          /*********************************************************************
   1016           * @fn          ZDP_ServerDiscRsp
   1017           *
   1018           * @brief       Build and send the Server_Discovery_rsp response.
   1019           *
   1020           * @param       transID - Transaction sequence number of request.
   1021           * @param       dstAddr - Network Destination Address.
   1022           * @param       status - Status of response to request.
   1023           * @param       aoi - Network Address of Interest of request.
   1024           * @param       serverMask - Bit map of service(s) being sought.
   1025           * @param       SecurityEnable - Security Options
   1026           *
   1027           * @return      ZStatus_t
   1028           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1029          ZStatus_t ZDP_ServerDiscRsp( byte transID, zAddrType_t *dstAddr, byte status,
   \                     ZDP_ServerDiscRsp:
   1030                                     uint16 aoi, uint16 serverMask, byte SecurityEnable )
   1031          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   85..82       MOV     DPL,?XSP + 0
   \   00000E   85..83       MOV     DPH,?XSP + 1
   \   000011   F0           MOVX    @DPTR,A
   \   000012   EC           MOV     A,R4
   \   000013   FE           MOV     R6,A
   1032            const byte len = 1  + 2;  // status + aoi + mask.
   1033            uint8 *pBuf = ZDP_TmpBuf;
   \   000014   12....       LCALL   ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_284:
   \   000017   FC           MOV     R4,A
   \   000018   E9           MOV     A,R1
   \   000019   FD           MOV     R5,A
   1034            ZStatus_t stat;
   1035          
   1036            // Intentionally unreferenced parameters
   1037            (void)aoi;
   1038            (void)SecurityEnable;
   1039          
   1040            *pBuf++ = status;
   \   00001A   EE           MOV     A,R6
   \   00001B   8C82         MOV     DPL,R4
   \   00001D   8D83         MOV     DPH,R5
   \   00001F   F0           MOVX    @DPTR,A
   \   000020   740D         MOV     A,#0xd
   \   000022   12....       LCALL   ?XSTACK_DISP0_8
   \   000025   12....       LCALL   ??Subroutine130_0 & 0xFFFF
   1041          
   1042            *pBuf++ = LO_UINT16( serverMask );
   \                     ??CrossCallReturnLabel_279:
   \   000028   8C82         MOV     DPL,R4
   \   00002A   8D83         MOV     DPH,R5
   \   00002C   A3           INC     DPTR
   \   00002D   F0           MOVX    @DPTR,A
   1043            *pBuf++ = HI_UINT16( serverMask );
   \   00002E   E9           MOV     A,R1
   \   00002F   8C82         MOV     DPL,R4
   \   000031   8D83         MOV     DPH,R5
   \   000033   A3           INC     DPTR
   \   000034   A3           INC     DPTR
   \   000035   F0           MOVX    @DPTR,A
   1044          
   1045            ZDP_TxOptions = AF_MSG_ACK_REQUEST;
   \   000036   90....       MOV     DPTR,#ZDP_TxOptions
   \   000039   7410         MOV     A,#0x10
   \   00003B   F0           MOVX    @DPTR,A
   1046            stat = fillAndSend( &transID, dstAddr, Server_Discovery_rsp, len );
   \   00003C                ; Setup parameters for call to function fillAndSend
   \   00003C   75..15       MOV     ?V0,#0x15
   \   00003F   75..80       MOV     ?V1,#-0x80
   \   000042   78..         MOV     R0,#?V0
   \   000044   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000047   7903         MOV     R1,#0x3
   \   000049   EA           MOV     A,R2
   \   00004A   FC           MOV     R4,A
   \   00004B   EB           MOV     A,R3
   \   00004C   FD           MOV     R5,A
   \   00004D   7402         MOV     A,#0x2
   \   00004F   12....       LCALL   ?XSTACK_DISP101_8
   \   000052   12....       LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   000055   7402         MOV     A,#0x2
   \   000057   12....       LCALL   ?DEALLOC_XSTACK8
   \   00005A   E9           MOV     A,R1
   \   00005B   F9           MOV     R1,A
   1047            ZDP_TxOptions = AF_TX_OPTIONS_NONE;
   \   00005C   90....       MOV     DPTR,#ZDP_TxOptions
   \   00005F   E4           CLR     A
   \   000060   F0           MOVX    @DPTR,A
   1048          
   1049            return ( stat );
   \   000061   04           INC     A
   \   000062   02....       LJMP    ??Subroutine111_0 & 0xFFFF
   1050          }
   1051          
   1052          /*********************************************************************
   1053           * @fn          ZDP_GenericRsp
   1054           *
   1055           * @brief       Sends a response message with only the parameter status
   1056           *              byte and the addr of interest for data.
   1057           *              This function sends unicast message to the
   1058           *              requesting device.
   1059           *
   1060           * @param       dstAddr - destination address
   1061           * @param       status  - generic status for response
   1062           * @param       aoi     - address of interest
   1063           * @param       dstAddr - destination address
   1064           * @param       rspId   - response cluster ID
   1065           * @param       SecurityEnable - Security Options
   1066           *
   1067           * @return      afStatus_t
   1068           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1069          afStatus_t ZDP_GenericRsp( byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_GenericRsp:
   1070                               byte status, uint16 aoi, uint16 rspID, byte SecurityEnable )
   1071          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   85..82       MOV     DPL,?XSP + 0
   \   00000E   85..83       MOV     DPH,?XSP + 1
   \   000011   F0           MOVX    @DPTR,A
   1072            uint8 len;
   1073          
   1074            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1075          
   1076            ZDP_TmpBuf[0] = status;
   \   000012   12....       LCALL   ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_233:
   \   000015   EC           MOV     A,R4
   \   000016   F0           MOVX    @DPTR,A
   \   000017   740A         MOV     A,#0xa
   \   000019   12....       LCALL   ?XSTACK_DISP0_8
   \   00001C   12....       LCALL   ??Subroutine133_0 & 0xFFFF
   1077            ZDP_TmpBuf[1] = LO_UINT16( aoi );
   \                     ??CrossCallReturnLabel_294:
   \   00001F   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000022   E0           MOVX    A,@DPTR
   \   000023   FC           MOV     R4,A
   \   000024   A3           INC     DPTR
   \   000025   E0           MOVX    A,@DPTR
   \   000026   F583         MOV     DPH,A
   \   000028   8C82         MOV     DPL,R4
   \   00002A   A3           INC     DPTR
   \   00002B   E8           MOV     A,R0
   \   00002C   12....       LCALL   ?Subroutine12 & 0xFFFF
   1078            ZDP_TmpBuf[2] = HI_UINT16( aoi );
   1079          
   1080            // Length byte
   1081            ZDP_TmpBuf[3] = 0;
   \                     ??CrossCallReturnLabel_9:
   \   00002F   12....       LCALL   ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_234:
   \   000032   A3           INC     DPTR
   \   000033   A3           INC     DPTR
   \   000034   A3           INC     DPTR
   \   000035   E4           CLR     A
   \   000036   F0           MOVX    @DPTR,A
   1082            len = 4;
   1083          
   1084            return fillAndSend( &TransSeq, dstAddr, rspID, len );
   \   000037                ; Setup parameters for call to function fillAndSend
   \   000037   740C         MOV     A,#0xc
   \   000039   12....       LCALL   ?XSTACK_DISP0_8
   \   00003C   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00003F   7904         MOV     R1,#0x4
   \   000041   EA           MOV     A,R2
   \   000042   FC           MOV     R4,A
   \   000043   EB           MOV     A,R3
   \   000044   FD           MOV     R5,A
   \   000045   7402         MOV     A,#0x2
   \   000047   12....       LCALL   ?XSTACK_DISP101_8
   \   00004A   12....       LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   00004D   7402         MOV     A,#0x2
   \   00004F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000052   7401         MOV     A,#0x1
   \   000054   12....       LCALL   ?DEALLOC_XSTACK8
   \   000057                REQUIRE ?Subroutine5
   \   000057                ; // Fall through to label ?Subroutine5
   1085          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
   1086          
   1087          /*********************************************************************
   1088           * Binding
   1089           */
   1090          /*********************************************************************
   1091           * @fn          ZDP_EndDeviceBindReq
   1092           *
   1093           * @brief       This builds and sends a End_Device_Bind_req message.
   1094           *              This function sends a unicast message.
   1095           *
   1096           * @param       dstAddr - destination address
   1097           * @param       LocalCoordinator - short address of local coordinator
   1098           * @param       epIntf - Endpoint/Interface of Simple Desc
   1099           * @param       ProfileID - Profile ID
   1100           *
   1101           *   The Input cluster list is the opposite of what you would think.
   1102           *   This is the output cluster list of this device
   1103           * @param       NumInClusters - number of input clusters
   1104           * @param       InClusterList - input cluster ID list
   1105           *
   1106           *   The Output cluster list is the opposite of what you would think.
   1107           *   This is the input cluster list of this device
   1108           * @param       NumOutClusters - number of output clusters
   1109           * @param       OutClusterList - output cluster ID list
   1110           *
   1111           * @param       SecurityEnable - Security Options
   1112           *
   1113           * @return      afStatus_t
   1114           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1115          afStatus_t ZDP_EndDeviceBindReq( zAddrType_t *dstAddr,
   \                     ZDP_EndDeviceBindReq:
   1116                                           uint16 LocalCoordinator,
   1117                                           byte endPoint,
   1118                                           uint16 ProfileID,
   1119                                           byte NumInClusters, cId_t *InClusterList,
   1120                                           byte NumOutClusters, cId_t *OutClusterList,
   1121                                           byte SecurityEnable )
   1122          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   12....       LCALL   ?Subroutine91 & 0xFFFF
   \                     ??CrossCallReturnLabel_211:
   \   00000D   EC           MOV     A,R4
   \   00000E   FE           MOV     R6,A
   \   00000F   ED           MOV     A,R5
   \   000010   FF           MOV     R7,A
   \   000011   89..         MOV     ?V7,R1
   1123            uint8 *pBuf = ZDP_TmpBuf;
   \   000013   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000016   12....       LCALL   ??Subroutine122_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_246:
   \   000019   7414         MOV     A,#0x14
   \   00001B   12....       LCALL   ?XSTACK_DISP0_8
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   F5..         MOV     ?V2,A
   \   000021   7417         MOV     A,#0x17
   \   000023   12....       LCALL   ?XSTACK_DISP0_8
   \   000026   E0           MOVX    A,@DPTR
   \   000027   F5..         MOV     ?V3,A
   1124            uint8 i, len;
   1125            uint8 *ieeeAddr;
   1126          
   1127            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1128          
   1129            // LocalCoordinator + SrcExtAddr + ep + ProfileID +  NumInClusters + NumOutClusters.
   1130            len = 2 + Z_EXTADDR_LEN + 1 + 2 + 1 + 1;
   1131            len += (NumInClusters + NumOutClusters) * sizeof ( uint16 );
   \   000029   E5..         MOV     A,?V2
   \   00002B   25..         ADD     A,?V3
   \   00002D   C3           CLR     C
   \   00002E   33           RLC     A
   \   00002F   240F         ADD     A,#0xf
   \   000031   F5..         MOV     ?V6,A
   1132          
   1133            if ( len >= ZDP_BUF_SZ-1 )
   \   000033   C3           CLR     C
   \   000034   944F         SUBB    A,#0x4f
   \   000036   4005         JC      ??ZDP_EndDeviceBindReq_0
   1134            {
   1135              return afStatus_MEM_FAIL;
   \   000038   7910         MOV     R1,#0x10
   \   00003A   02....       LJMP    ??ZDP_EndDeviceBindReq_1 & 0xFFFF
   1136            }
   1137          
   1138            if ( LocalCoordinator != NLME_GetShortAddr() )
   \                     ??ZDP_EndDeviceBindReq_0:
   \   00003D                ; Setup parameters for call to function NLME_GetShortAddr
   \   00003D   12....       LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   000040   EA           MOV     A,R2
   \   000041   6E           XRL     A,R6
   \   000042   7002         JNZ     ??ZDP_EndDeviceBindReq_2
   \   000044   EB           MOV     A,R3
   \   000045   6F           XRL     A,R7
   \                     ??ZDP_EndDeviceBindReq_2:
   \   000046   6005         JZ      ??ZDP_EndDeviceBindReq_3
   1139            {
   1140              return afStatus_INVALID_PARAMETER;
   \   000048   7902         MOV     R1,#0x2
   \   00004A   02....       LJMP    ??ZDP_EndDeviceBindReq_1 & 0xFFFF
   1141            }
   1142          
   1143            *pBuf++ = LO_UINT16( LocalCoordinator );
   \                     ??ZDP_EndDeviceBindReq_3:
   \   00004D   EE           MOV     A,R6
   \   00004E   85..82       MOV     DPL,?V0
   \   000051   85..83       MOV     DPH,?V1
   \   000054   F0           MOVX    @DPTR,A
   1144            *pBuf++ = HI_UINT16( LocalCoordinator );
   \   000055   EF           MOV     A,R7
   \   000056   A3           INC     DPTR
   \   000057   F0           MOVX    @DPTR,A
   1145          
   1146            ieeeAddr = NLME_GetExtAddr();
   \   000058                ; Setup parameters for call to function NLME_GetExtAddr
   \   000058   12....       LCALL   `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
   \   00005B   8A..         MOV     ?V4,R2
   \   00005D   8B..         MOV     ?V5,R3
   \   00005F   AC..         MOV     R4,?V4
   \   000061   AD..         MOV     R5,?V5
   1147            pBuf = osal_cpyExtAddr( pBuf, ieeeAddr );
   \   000063                ; Setup parameters for call to function sAddrExtCpy
   \   000063   E5..         MOV     A,?V0
   \   000065   2402         ADD     A,#0x2
   \   000067   FA           MOV     R2,A
   \   000068   E4           CLR     A
   \   000069   35..         ADDC    A,?V1
   \   00006B   FB           MOV     R3,A
   \   00006C   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   1148          
   1149            *pBuf++ = endPoint;
   \   00006F   8A82         MOV     DPL,R2
   \   000071   8B83         MOV     DPH,R3
   \   000073   E5..         MOV     A,?V7
   \   000075   F0           MOVX    @DPTR,A
   \   000076   7412         MOV     A,#0x12
   \   000078   12....       LCALL   ?XSTACK_DISP0_8
   \   00007B   12....       LCALL   ?Subroutine13 & 0xFFFF
   1150          
   1151            *pBuf++ = LO_UINT16( ProfileID );   // Profile ID
   1152            *pBuf++ = HI_UINT16( ProfileID );
   1153          
   1154            *pBuf++ = NumInClusters; // Input cluster list
   \                     ??CrossCallReturnLabel_11:
   \   00007E   8A82         MOV     DPL,R2
   \   000080   8B83         MOV     DPH,R3
   \   000082   A3           INC     DPTR
   \   000083   A3           INC     DPTR
   \   000084   A3           INC     DPTR
   \   000085   E5..         MOV     A,?V2
   \   000087   F0           MOVX    @DPTR,A
   \   000088   EA           MOV     A,R2
   \   000089   2404         ADD     A,#0x4
   \   00008B   F5..         MOV     ?V0,A
   \   00008D   E4           CLR     A
   \   00008E   3B           ADDC    A,R3
   \   00008F   F5..         MOV     ?V1,A
   1155            for ( i = 0; i < NumInClusters; ++i )
   \   000091   7800         MOV     R0,#0x0
   \   000093   7415         MOV     A,#0x15
   \   000095   12....       LCALL   ?XSTACK_DISP0_8
   \   000098   12....       LCALL   ??Subroutine120_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_218:
   \   00009B   8021         SJMP    ??ZDP_EndDeviceBindReq_4
   1156            {
   1157              *pBuf++ = LO_UINT16(InClusterList[i]);
   \                     ??ZDP_EndDeviceBindReq_5:
   \   00009D   12....       LCALL   ?Subroutine67 & 0xFFFF
   \                     ??CrossCallReturnLabel_122:
   \   0000A0   FE           MOV     R6,A
   \   0000A1   EB           MOV     A,R3
   \   0000A2   3D           ADDC    A,R5
   \   0000A3   FF           MOV     R7,A
   \   0000A4   8E82         MOV     DPL,R6
   \   0000A6   8F83         MOV     DPH,R7
   \   0000A8   12....       LCALL   ?Subroutine60 & 0xFFFF
   1158              *pBuf++ = HI_UINT16(InClusterList[i]);
   \                     ??CrossCallReturnLabel_110:
   \   0000AB   8E82         MOV     DPL,R6
   \   0000AD   8F83         MOV     DPH,R7
   \   0000AF   A3           INC     DPTR
   \   0000B0   12....       LCALL   ?Subroutine42 & 0xFFFF
   1159            }
   \                     ??CrossCallReturnLabel_68:
   \   0000B3   E5..         MOV     A,?V0
   \   0000B5   2402         ADD     A,#0x2
   \   0000B7   F5..         MOV     ?V0,A
   \   0000B9   5002         JNC     ??ZDP_EndDeviceBindReq_6
   \   0000BB   05..         INC     ?V1
   \                     ??ZDP_EndDeviceBindReq_6:
   \   0000BD   08           INC     R0
   \                     ??ZDP_EndDeviceBindReq_4:
   \   0000BE   E8           MOV     A,R0
   \   0000BF   C3           CLR     C
   \   0000C0   95..         SUBB    A,?V2
   \   0000C2   40D9         JC      ??ZDP_EndDeviceBindReq_5
   1160          
   1161            *pBuf++ = NumOutClusters; // Output cluster list
   \   0000C4   85..82       MOV     DPL,?V0
   \   0000C7   85..83       MOV     DPH,?V1
   \   0000CA   E5..         MOV     A,?V3
   \   0000CC   12....       LCALL   ?Subroutine35 & 0xFFFF
   1162            for ( i = 0; i < NumOutClusters; ++i )
   \                     ??CrossCallReturnLabel_54:
   \   0000CF   7800         MOV     R0,#0x0
   \   0000D1   7418         MOV     A,#0x18
   \   0000D3   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D6   12....       LCALL   ??Subroutine120_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_219:
   \   0000D9   8024         SJMP    ??ZDP_EndDeviceBindReq_7
   1163            {
   1164              *pBuf++ = LO_UINT16(OutClusterList[i]);
   \                     ??ZDP_EndDeviceBindReq_8:
   \   0000DB   12....       LCALL   ?Subroutine67 & 0xFFFF
   1165              *pBuf++ = HI_UINT16(OutClusterList[i]);
   1166            }
   \                     ??CrossCallReturnLabel_123:
   \   0000DE   FC           MOV     R4,A
   \   0000DF   EB           MOV     A,R3
   \   0000E0   3D           ADDC    A,R5
   \   0000E1   FD           MOV     R5,A
   \   0000E2   8C82         MOV     DPL,R4
   \   0000E4   8D83         MOV     DPH,R5
   \   0000E6   12....       LCALL   ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_113:
   \   0000E9   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   0000EC   85..82       MOV     DPL,?V0
   \   0000EF   85..83       MOV     DPH,?V1
   \   0000F2   A3           INC     DPTR
   \   0000F3   F0           MOVX    @DPTR,A
   \   0000F4   E5..         MOV     A,?V0
   \   0000F6   2402         ADD     A,#0x2
   \   0000F8   F5..         MOV     ?V0,A
   \   0000FA   5002         JNC     ??ZDP_EndDeviceBindReq_9
   \   0000FC   05..         INC     ?V1
   \                     ??ZDP_EndDeviceBindReq_9:
   \   0000FE   08           INC     R0
   \                     ??ZDP_EndDeviceBindReq_7:
   \   0000FF   E8           MOV     A,R0
   \   000100   C3           CLR     C
   \   000101   95..         SUBB    A,?V3
   \   000103   40D6         JC      ??ZDP_EndDeviceBindReq_8
   1167          
   1168            return fillAndSend( &ZDP_TransID, dstAddr, End_Device_Bind_req, len );
   \   000105                ; Setup parameters for call to function fillAndSend
   \   000105   75..20       MOV     ?V0,#0x20
   \   000108   75..00       MOV     ?V1,#0x0
   \   00010B   78..         MOV     R0,#?V0
   \   00010D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000110   A9..         MOV     R1,?V6
   \   000112   7402         MOV     A,#0x2
   \   000114   12....       LCALL   ?XSTACK_DISP0_8
   \   000117   12....       LCALL   ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_94:
   \   00011A   7A..         MOV     R2,#ZDP_TransID & 0xff
   \   00011C   7B..         MOV     R3,#(ZDP_TransID >> 8) & 0xff
   \   00011E   12....       LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   000121   7402         MOV     A,#0x2
   \   000123   12....       LCALL   ?DEALLOC_XSTACK8
   \                     ??ZDP_EndDeviceBindReq_1:
   \   000126   7402         MOV     A,#0x2
   \   000128   02....       LJMP    ??Subroutine124_0 & 0xFFFF
   1169          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine67:
   \   000000   E8           MOV     A,R0
   \   000001   25E0         ADD     A,0xE0 /* A   */
   \   000003   FC           MOV     R4,A
   \   000004   E4           CLR     A
   \   000005   33           RLC     A
   \   000006   FD           MOV     R5,A
   \   000007   EA           MOV     A,R2
   \   000008   2C           ADD     A,R4
   \   000009   22           RET
   1170          
   1171          /*********************************************************************
   1172           * @fn          ZDP_BindUnbindReq
   1173           *
   1174           * @brief       This builds and send a Bind_req or Unbind_req message
   1175           *              Depending on the ClusterID. This function
   1176           *              sends a unicast message to the local coordinator.
   1177           *
   1178           * @param       BindOrUnbind - either Bind_req or Unbind_req
   1179           * @param       dstAddr - destination address of the message
   1180           * @param       SourceAddr - source 64 bit address of the binding
   1181           * @param       SrcEPIntf - Source endpoint/interface
   1182           * @param       ClusterID - Binding cluster ID
   1183           * @param       DestinationAddr - destination 64 bit addr of binding
   1184           * @param       DstEPIntf - destination endpoint/interface
   1185           * @param       SecurityEnable - Security Options
   1186           *
   1187           * @return      afStatus_t
   1188           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1189          afStatus_t ZDP_BindUnbindReq( uint16 BindOrUnbind, zAddrType_t *dstAddr,
   \                     ZDP_BindUnbindReq:
   1190                                        uint8 *SourceAddr, byte SrcEndPoint,
   1191                                        cId_t ClusterID,
   1192                                        zAddrType_t *destinationAddr, byte DstEndPoint,
   1193                                        byte SecurityEnable )
   1194          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   8C..         MOV     ?V6,R4
   \   00000B   8D..         MOV     ?V7,R5
   \   00000D   89..         MOV     ?V3,R1
   1195            uint8 *pBuf = ZDP_TmpBuf;
   \   00000F   12....       LCALL   ??Subroutine119_0 & 0xFFFF
   1196            byte len;
   1197          
   1198            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1199          
   1200            // SourceAddr + SrcEPIntf + ClusterID +  addrMode.
   1201            len = Z_EXTADDR_LEN + 1 + sizeof( cId_t ) + sizeof( uint8 );
   \                     ??CrossCallReturnLabel_228:
   \   000012   75..0C       MOV     ?V2,#0xc
   \   000015   7414         MOV     A,#0x14
   \   000017   12....       LCALL   ?XSTACK_DISP0_8
   \   00001A   12....       LCALL   ??Subroutine122_0 & 0xFFFF
   1202            if ( destinationAddr->addrMode == Addr64Bit )
   \                     ??CrossCallReturnLabel_247:
   \   00001D   85..82       MOV     DPL,?V0
   \   000020   F583         MOV     DPH,A
   \   000022   A3           INC     DPTR
   \   000023   A3           INC     DPTR
   \   000024   A3           INC     DPTR
   \   000025   A3           INC     DPTR
   \   000026   A3           INC     DPTR
   \   000027   A3           INC     DPTR
   \   000028   A3           INC     DPTR
   \   000029   A3           INC     DPTR
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   6403         XRL     A,#0x3
   \   00002D   7005         JNZ     ??ZDP_BindUnbindReq_0
   1203              len += Z_EXTADDR_LEN + 1;     // +1 for DstEPIntf
   \   00002F   75..15       MOV     ?V2,#0x15
   \   000032   8016         SJMP    ??ZDP_BindUnbindReq_1
   1204            else if ( destinationAddr->addrMode == AddrGroup )
   \                     ??ZDP_BindUnbindReq_0:
   \   000034   85..82       MOV     DPL,?V0
   \   000037   85..83       MOV     DPH,?V1
   \   00003A   A3           INC     DPTR
   \   00003B   A3           INC     DPTR
   \   00003C   A3           INC     DPTR
   \   00003D   A3           INC     DPTR
   \   00003E   A3           INC     DPTR
   \   00003F   A3           INC     DPTR
   \   000040   A3           INC     DPTR
   \   000041   A3           INC     DPTR
   \   000042   E0           MOVX    A,@DPTR
   \   000043   6401         XRL     A,#0x1
   \   000045   7003         JNZ     ??ZDP_BindUnbindReq_1
   1205              len += sizeof ( uint16 );
   \   000047   75..0E       MOV     ?V2,#0xe
   1206          
   1207            pBuf = osal_cpyExtAddr( pBuf, SourceAddr );
   \                     ??ZDP_BindUnbindReq_1:
   \   00004A                ; Setup parameters for call to function sAddrExtCpy
   \   00004A   7410         MOV     A,#0x10
   \   00004C   12....       LCALL   ?XSTACK_DISP0_8
   \   00004F   12....       LCALL   ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_95:
   \   000052   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   1208            *pBuf++ = SrcEndPoint;
   \   000055   8A82         MOV     DPL,R2
   \   000057   8B83         MOV     DPH,R3
   \   000059   E5..         MOV     A,?V3
   \   00005B   F0           MOVX    @DPTR,A
   \   00005C   7412         MOV     A,#0x12
   \   00005E   12....       LCALL   ?XSTACK_DISP0_8
   \   000061   12....       LCALL   ?Subroutine13 & 0xFFFF
   1209          
   1210            *pBuf++ = LO_UINT16( ClusterID );
   1211          
   1212            *pBuf++ = HI_UINT16( ClusterID );
   1213            *pBuf++ = destinationAddr->addrMode;
   \                     ??CrossCallReturnLabel_12:
   \   000064   E5..         MOV     A,?V0
   \   000066   2408         ADD     A,#0x8
   \   000068   F8           MOV     R0,A
   \   000069   E4           CLR     A
   \   00006A   35..         ADDC    A,?V1
   \   00006C   F9           MOV     R1,A
   \   00006D   8882         MOV     DPL,R0
   \   00006F   8983         MOV     DPH,R1
   \   000071   12....       LCALL   ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_101:
   \   000074   A3           INC     DPTR
   \   000075   A3           INC     DPTR
   \   000076   F0           MOVX    @DPTR,A
   \   000077   EA           MOV     A,R2
   \   000078   2404         ADD     A,#0x4
   \   00007A   FA           MOV     R2,A
   \   00007B   5001         JNC     ??ZDP_BindUnbindReq_2
   \   00007D   0B           INC     R3
   1214            if ( destinationAddr->addrMode == Addr64Bit )
   \                     ??ZDP_BindUnbindReq_2:
   \   00007E   8882         MOV     DPL,R0
   \   000080   8983         MOV     DPH,R1
   \   000082   E0           MOVX    A,@DPTR
   \   000083   6403         XRL     A,#0x3
   \   000085   7017         JNZ     ??ZDP_BindUnbindReq_3
   1215            {
   1216              pBuf = osal_cpyExtAddr( pBuf, destinationAddr->addr.extAddr );
   1217              *pBuf = DstEndPoint;
   \   000087   7416         MOV     A,#0x16
   \   000089   12....       LCALL   ?XSTACK_DISP0_8
   \   00008C   E0           MOVX    A,@DPTR
   \   00008D   C0E0         PUSH    A
   \   00008F                ; Setup parameters for call to function sAddrExtCpy
   \   00008F   AC..         MOV     R4,?V0
   \   000091   AD..         MOV     R5,?V1
   \   000093   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   000096   8A82         MOV     DPL,R2
   \   000098   8B83         MOV     DPH,R3
   \   00009A   D0E0         POP     A
   \   00009C   8026         SJMP    ??CrossCallReturnLabel_102
   1218            }
   1219            else if ( destinationAddr->addrMode == AddrGroup )
   \                     ??ZDP_BindUnbindReq_3:
   \   00009E   85..82       MOV     DPL,?V0
   \   0000A1   85..83       MOV     DPH,?V1
   \   0000A4   A3           INC     DPTR
   \   0000A5   A3           INC     DPTR
   \   0000A6   A3           INC     DPTR
   \   0000A7   A3           INC     DPTR
   \   0000A8   A3           INC     DPTR
   \   0000A9   A3           INC     DPTR
   \   0000AA   A3           INC     DPTR
   \   0000AB   A3           INC     DPTR
   \   0000AC   E0           MOVX    A,@DPTR
   \   0000AD   6401         XRL     A,#0x1
   \   0000AF   7014         JNZ     ??ZDP_BindUnbindReq_4
   1220            {
   1221              *pBuf++ = LO_UINT16( destinationAddr->addr.shortAddr );
   \   0000B1   85..82       MOV     DPL,?V0
   \   0000B4   85..83       MOV     DPH,?V1
   \   0000B7   12....       LCALL   ?Subroutine48 & 0xFFFF
   1222              *pBuf++ = HI_UINT16( destinationAddr->addr.shortAddr );
   \                     ??CrossCallReturnLabel_80:
   \   0000BA   85..82       MOV     DPL,?V0
   \   0000BD   85..83       MOV     DPH,?V1
   \   0000C0   A3           INC     DPTR
   \   0000C1   12....       LCALL   ?Subroutine57 & 0xFFFF
   1223            }
   \                     ??CrossCallReturnLabel_102:
   \   0000C4   F0           MOVX    @DPTR,A
   1224          
   1225            FillAndSendTxOptions( &ZDP_TransID, dstAddr, BindOrUnbind, len, AF_MSG_ACK_REQUEST );
   \                     ??ZDP_BindUnbindReq_4:
   \   0000C5   90....       MOV     DPTR,#ZDP_TxOptions
   \   0000C8   7410         MOV     A,#0x10
   \   0000CA   F0           MOVX    @DPTR,A
   \   0000CB                ; Setup parameters for call to function fillAndSend
   \   0000CB   8E..         MOV     ?V0,R6
   \   0000CD   8F..         MOV     ?V1,R7
   \   0000CF   78..         MOV     R0,#?V0
   \   0000D1   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000D4   A9..         MOV     R1,?V2
   \   0000D6   AC..         MOV     R4,?V6
   \   0000D8   AD..         MOV     R5,?V7
   \   0000DA   7A..         MOV     R2,#ZDP_TransID & 0xff
   \   0000DC   7B..         MOV     R3,#(ZDP_TransID >> 8) & 0xff
   \   0000DE   12....       LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   0000E1   7402         MOV     A,#0x2
   \   0000E3   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000E6   E9           MOV     A,R1
   \   0000E7   F9           MOV     R1,A
   \   0000E8   90....       MOV     DPTR,#ZDP_TxOptions
   \   0000EB   E4           CLR     A
   \   0000EC   F0           MOVX    @DPTR,A
   \   0000ED   02....       LJMP    ??Subroutine125_0 & 0xFFFF
   1226          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine57:
   \   000000   12....       LCALL   ?Subroutine82 & 0xFFFF
   \                     ??CrossCallReturnLabel_154:
   \   000003   A3           INC     DPTR
   \   000004   22           RET
   1227          
   1228          /*********************************************************************
   1229           * Network Management
   1230           */
   1231          
   1232          /*********************************************************************
   1233           * @fn          ZDP_MgmtNwkDiscReq
   1234           *
   1235           * @brief       This builds and send a Mgmt_NWK_Disc_req message. This
   1236           *              function sends a unicast message.
   1237           *
   1238           * @param       dstAddr - destination address of the message
   1239           * @param       ScanChannels - 32 bit address bit map
   1240           * @param       StartIndex - Starting index within the reporting network
   1241           *                           list
   1242           * @param       SecurityEnable - Security Options
   1243           *
   1244           * @return      afStatus_t
   1245           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine106_0:
   \   000000   7A..         MOV     R2,#ZDP_TransID & 0xff
   \   000002   7B..         MOV     R3,#(ZDP_TransID >> 8) & 0xff
   \   000004   12....       LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   000007   7402         MOV     A,#0x2
   \   000009                REQUIRE ??Subroutine107_0
   \   000009                ; // Fall through to label ??Subroutine107_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1246          afStatus_t ZDP_MgmtNwkDiscReq( zAddrType_t *dstAddr,
   \                     ZDP_MgmtNwkDiscReq:
   1247                                         uint32 ScanChannels,
   1248                                         byte ScanDuration,
   1249                                         byte StartIndex,
   1250                                         byte SecurityEnable )
   1251          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0,R2
   \   000007   8B..         MOV     ?V1,R3
   \   000009   E9           MOV     A,R1
   \   00000A   FE           MOV     R6,A
   \   00000B   EC           MOV     A,R4
   \   00000C   FF           MOV     R7,A
   1252            uint8 *pBuf = ZDP_TmpBuf;
   1253            byte len = sizeof( uint32 )+1+1;  // ScanChannels + ScanDuration + StartIndex.
   1254          
   1255            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1256          
   1257            pBuf = osal_buffer_uint32( pBuf, ScanChannels );
   \   00000D                ; Setup parameters for call to function osal_buffer_uint32
   \   00000D   740C         MOV     A,#0xc
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   000015   12....       LCALL   ??Subroutine119_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_229:
   \   000018   12....       LCALL   `??osal_buffer_uint32::?relay`; Banked call to: osal_buffer_uint32
   \   00001B   7404         MOV     A,#0x4
   \   00001D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000020   8A82         MOV     DPL,R2
   \   000022   8B83         MOV     DPH,R3
   1258          
   1259            *pBuf++ = ScanDuration;
   \   000024   EE           MOV     A,R6
   \   000025   F0           MOVX    @DPTR,A
   1260            *pBuf = StartIndex;
   \   000026   EF           MOV     A,R7
   \   000027   A3           INC     DPTR
   \   000028   F0           MOVX    @DPTR,A
   1261          
   1262            return fillAndSend( &ZDP_TransID, dstAddr, Mgmt_NWK_Disc_req, len );
   \   000029                ; Setup parameters for call to function fillAndSend
   \   000029   75..30       MOV     ?V2,#0x30
   \   00002C   75..00       MOV     ?V3,#0x0
   \   00002F   78..         MOV     R0,#?V2
   \   000031   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000034   7906         MOV     R1,#0x6
   \   000036   AC..         MOV     R4,?V0
   \   000038   AD..         MOV     R5,?V1
   \   00003A   02....       LJMP    ??Subroutine106_0 & 0xFFFF
   1263          }
   1264          
   1265          /*********************************************************************
   1266           * @fn          ZDP_MgmtDirectJoinReq
   1267           *
   1268           * @brief       This builds and send a Mgmt_Direct_Join_req message. This
   1269           *              function sends a unicast message.
   1270           *
   1271           * @param       dstAddr - destination address of the message
   1272           * @param       deviceAddr - 64 bit IEEE Address
   1273           * @param       SecurityEnable - Security Options
   1274           *
   1275           * @return      afStatus_t
   1276           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   75..00       MOV     ?V3,#0x0
   \   000003   78..         MOV     R0,#?V2
   \   000005   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000008   7909         MOV     R1,#0x9
   \   00000A   EE           MOV     A,R6
   \   00000B   FC           MOV     R4,A
   \   00000C   EF           MOV     A,R7
   \   00000D   FD           MOV     R5,A
   \   00000E                REQUIRE ??Subroutine106_0
   \   00000E                ; // Fall through to label ??Subroutine106_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000   EA           MOV     A,R2
   \   000001   FE           MOV     R6,A
   \   000002   EB           MOV     A,R3
   \   000003   FF           MOV     R7,A
   \   000004   89..         MOV     ?V0,R1
   \   000006                ; Setup parameters for call to function sAddrExtCpy
   \   000006                ; Setup parameters for call to function sAddrExtCpy
   \   000006                REQUIRE ??Subroutine119_0
   \   000006                ; // Fall through to label ??Subroutine119_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1277          afStatus_t ZDP_MgmtDirectJoinReq( zAddrType_t *dstAddr,
   \                     ZDP_MgmtDirectJoinReq:
   1278                                         uint8 *deviceAddr,
   1279                                         byte capInfo,
   1280                                         byte SecurityEnable )
   1281          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL   ?Subroutine39 & 0xFFFF
   1282            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1283          
   1284            osal_cpyExtAddr( ZDP_TmpBuf, deviceAddr );
   \                     ??CrossCallReturnLabel_216:
   \   000008   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   1285            ZDP_TmpBuf[Z_EXTADDR_LEN] = capInfo;
   \   00000B   12....       LCALL   ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_59:
   \   00000E   E5..         MOV     A,?V0
   \   000010   F0           MOVX    @DPTR,A
   1286          
   1287            return fillAndSend( &ZDP_TransID, dstAddr, Mgmt_Direct_Join_req, (Z_EXTADDR_LEN + 1) );
   \   000011                ; Setup parameters for call to function fillAndSend
   \   000011   75..35       MOV     ?V2,#0x35
   \   000014   02....       LJMP    ?Subroutine1 & 0xFFFF
   1288          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   12....       LCALL   ?Subroutine105 & 0xFFFF
   \                     ??CrossCallReturnLabel_307:
   \   000003   C8           XCH     A,R0
   \   000004   2408         ADD     A,#0x8
   \   000006   F582         MOV     DPL,A
   \   000008   E4           CLR     A
   \   000009   38           ADDC    A,R0
   \   00000A   F583         MOV     DPH,A
   \   00000C   22           RET
   1289          
   1290          /*********************************************************************
   1291           * @fn          ZDP_MgmtPermitJoinReq
   1292           *
   1293           * @brief       This builds and send a Mgmt_Permit_Join_req message.
   1294           *
   1295           * @param       dstAddr - destination address of the message
   1296           * @param       duration - Permit duration
   1297           * @param       TcSignificance - Trust Center Significance
   1298           *
   1299           * @return      afStatus_t
   1300           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1301          afStatus_t ZDP_MgmtPermitJoinReq( zAddrType_t *dstAddr, byte duration,
   \                     ZDP_MgmtPermitJoinReq:
   1302                                            byte TcSignificance, byte SecurityEnable )
   1303          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1304            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1305          
   1306            // Build buffer
   1307            ZDP_TmpBuf[ZDP_MGMT_PERMIT_JOIN_REQ_DURATION] = duration;
   \   000005   12....       LCALL   ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_235:
   \   000008   E9           MOV     A,R1
   \   000009   12....       LCALL   ?Subroutine20 & 0xFFFF
   1308            ZDP_TmpBuf[ZDP_MGMT_PERMIT_JOIN_REQ_TC_SIG]   = TcSignificance;
   \                     ??CrossCallReturnLabel_25:
   \   00000C   EC           MOV     A,R4
   \   00000D   F0           MOVX    @DPTR,A
   1309          
   1310            // Send the message
   1311            return fillAndSend( &ZDP_TransID, dstAddr, Mgmt_Permit_Join_req,
   1312                                ZDP_MGMT_PERMIT_JOIN_REQ_SIZE );
   \   00000E                ; Setup parameters for call to function fillAndSend
   \   00000E   75..36       MOV     ?V0,#0x36
   \   000011   02....       LJMP    ?Subroutine2 & 0xFFFF
   1313          }
   1314          
   1315          /*********************************************************************
   1316           * @fn          ZDP_MgmtLeaveReq
   1317           *
   1318           * @brief       This builds and send a Mgmt_Leave_req message.
   1319           *
   1320           * @param       dstAddr - destination address of the message
   1321           *              IEEEAddr - IEEE adddress of device that is removed
   1322           *              RemoveChildren - set to 1 to remove the children of the
   1323           *                                device as well. 0 otherwise.
   1324           *              Rejoin - set to 1 if the removed device should rejoin
   1325                                   afterwards. 0 otherwise.
   1326           *
   1327           * @return      afStatus_t
   1328           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1329          afStatus_t ZDP_MgmtLeaveReq( zAddrType_t *dstAddr, uint8 *IEEEAddr, uint8 RemoveChildren,
   \                     ZDP_MgmtLeaveReq:
   1330                           uint8 Rejoin, uint8 SecurityEnable )
   1331          
   1332          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL   ?Subroutine39 & 0xFFFF
   1333            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1334          
   1335            osal_cpyExtAddr( ZDP_TmpBuf, IEEEAddr );
   \                     ??CrossCallReturnLabel_217:
   \   000008   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   1336            ZDP_TmpBuf[Z_EXTADDR_LEN] = 0;
   \   00000B   12....       LCALL   ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_60:
   \   00000E   E4           CLR     A
   \   00000F   F0           MOVX    @DPTR,A
   1337          
   1338            if ( RemoveChildren == TRUE )
   \   000010   04           INC     A
   \   000011   65..         XRL     A,?V0
   \   000013   7006         JNZ     ??ZDP_MgmtLeaveReq_0
   1339            {
   1340              ZDP_TmpBuf[Z_EXTADDR_LEN] |= ZDP_MGMT_LEAVE_REQ_RC;
   \   000015   12....       LCALL   ?Subroutine38 & 0xFFFF
   1341            }
   \                     ??CrossCallReturnLabel_61:
   \   000018   7440         MOV     A,#0x40
   \   00001A   F0           MOVX    @DPTR,A
   1342            if ( Rejoin == TRUE )
   \                     ??ZDP_MgmtLeaveReq_0:
   \   00001B   740C         MOV     A,#0xc
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   E0           MOVX    A,@DPTR
   \   000021   6401         XRL     A,#0x1
   \   000023   7007         JNZ     ??ZDP_MgmtLeaveReq_1
   1343            {
   1344              ZDP_TmpBuf[Z_EXTADDR_LEN] |= ZDP_MGMT_LEAVE_REQ_REJOIN;
   \   000025   12....       LCALL   ?Subroutine38 & 0xFFFF
   1345            }
   \                     ??CrossCallReturnLabel_62:
   \   000028   E0           MOVX    A,@DPTR
   \   000029   D2E7         SETB    0xE0 /* A   */.7
   \   00002B   F0           MOVX    @DPTR,A
   1346          
   1347            return fillAndSend( &ZDP_TransID, dstAddr, Mgmt_Leave_req, (Z_EXTADDR_LEN + 1) );
   \                     ??ZDP_MgmtLeaveReq_1:
   \   00002C                ; Setup parameters for call to function fillAndSend
   \   00002C   75..34       MOV     ?V2,#0x34
   \   00002F   02....       LJMP    ?Subroutine1 & 0xFFFF
   1348          }
   1349          
   1350          /*********************************************************************
   1351           * @fn          ZDP_MgmtNwkUpdateReq
   1352           *
   1353           * @brief       This builds and send a Mgmt_NWK_Update_req message. This
   1354           *              function sends a unicast or broadcast message.
   1355           *
   1356           * @param       dstAddr - destination address of the message
   1357           * @param       ChannelMask - 32 bit address bit map
   1358           * @param       ScanDuration - length of time to spend scanning each channel
   1359           * @param       ScanCount - number of energy scans to be conducted
   1360           * @param       NwkUpdateId - NWk Update Id value
   1361           * @param       NwkManagerAddr - NWK address for device with Network Manager
   1362           *                               bit set in its Node Descriptor
   1363           *
   1364           * @return      afStatus_t
   1365           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1366          afStatus_t ZDP_MgmtNwkUpdateReq( zAddrType_t *dstAddr,
   \                     ZDP_MgmtNwkUpdateReq:
   1367                                           uint32 ChannelMask,
   1368                                           uint8 ScanDuration,
   1369                                           uint8 ScanCount,
   1370                                           uint8 NwkUpdateId,
   1371                                           uint16 NwkManagerAddr )
   1372          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V4,R2
   \   000007   8B..         MOV     ?V5,R3
   \   000009   E9           MOV     A,R1
   \   00000A   FE           MOV     R6,A
   \   00000B   8C..         MOV     ?V1,R4
   \   00000D   ED           MOV     A,R5
   \   00000E   FF           MOV     R7,A
   1373            uint8 *pBuf = ZDP_TmpBuf;
   1374            byte len = sizeof( uint32 ) + 1;  // ChannelMask + ScanDuration
   \   00000F   75..05       MOV     ?V0,#0x5
   1375          
   1376            pBuf = osal_buffer_uint32( pBuf, ChannelMask );
   \   000012                ; Setup parameters for call to function osal_buffer_uint32
   \   000012   740E         MOV     A,#0xe
   \   000014   12....       LCALL   ?XSTACK_DISP0_8
   \   000017   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   00001A   12....       LCALL   ??Subroutine119_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_230:
   \   00001D   12....       LCALL   `??osal_buffer_uint32::?relay`; Banked call to: osal_buffer_uint32
   \   000020   7404         MOV     A,#0x4
   \   000022   12....       LCALL   ?DEALLOC_XSTACK8
   1377          
   1378            *pBuf++ = ScanDuration;
   \   000025   EE           MOV     A,R6
   \   000026   8A82         MOV     DPL,R2
   \   000028   8B83         MOV     DPH,R3
   \   00002A   F0           MOVX    @DPTR,A
   1379          
   1380            if ( ScanDuration <= 0x05 )
   \   00002B   C3           CLR     C
   \   00002C   9406         SUBB    A,#0x6
   \   00002E   500E         JNC     ??ZDP_MgmtNwkUpdateReq_0
   1381            {
   1382              // Request is to scan over channelMask
   1383              len += sizeof( uint8 );
   \   000030   75..06       MOV     ?V0,#0x6
   1384          
   1385              *pBuf++ = ScanCount;
   \   000033   A3           INC     DPTR
   \   000034   E5..         MOV     A,?V1
   \   000036   F0           MOVX    @DPTR,A
   \   000037   EA           MOV     A,R2
   \   000038   2402         ADD     A,#0x2
   \   00003A   5026         JNC     ??ZDP_MgmtNwkUpdateReq_1
   \   00003C   8024         SJMP    ??ZDP_MgmtNwkUpdateReq_1
   1386            }
   1387            else if ( ( ScanDuration == 0xFE ) || ( ScanDuration == 0xFF ) )
   \                     ??ZDP_MgmtNwkUpdateReq_0:
   \   00003E   74FE         MOV     A,#-0x2
   \   000040   6E           XRL     A,R6
   \   000041   6005         JZ      ??ZDP_MgmtNwkUpdateReq_2
   \   000043   74FF         MOV     A,#-0x1
   \   000045   6E           XRL     A,R6
   \   000046   701A         JNZ     ??ZDP_MgmtNwkUpdateReq_1
   1388            {
   1389              // Request is to change Channel (0xFE) or apsChannelMask and NwkManagerAddr (0xFF)
   1390              len += sizeof( uint8 );
   \                     ??ZDP_MgmtNwkUpdateReq_2:
   \   000048   75..06       MOV     ?V0,#0x6
   1391          
   1392              *pBuf++ = NwkUpdateId;
   \   00004B   EF           MOV     A,R7
   \   00004C   A3           INC     DPTR
   \   00004D   F0           MOVX    @DPTR,A
   1393          
   1394              if ( ScanDuration == 0xFF )
   \   00004E   74FF         MOV     A,#-0x1
   \   000050   6E           XRL     A,R6
   \   000051   700F         JNZ     ??ZDP_MgmtNwkUpdateReq_1
   1395              {
   1396                len += sizeof( uint16 );
   \   000053   75..08       MOV     ?V0,#0x8
   \   000056   7412         MOV     A,#0x12
   \   000058   12....       LCALL   ?XSTACK_DISP0_8
   \   00005B   12....       LCALL   ?Subroutine32 & 0xFFFF
   1397          
   1398                *pBuf++  = LO_UINT16( NwkManagerAddr );
   1399                *pBuf++  = HI_UINT16( NwkManagerAddr );
   1400              }
   1401            }
   \                     ??CrossCallReturnLabel_49:
   \   00005E   F0           MOVX    @DPTR,A
   \   00005F   EA           MOV     A,R2
   \   000060   2404         ADD     A,#0x4
   1402          
   1403            return fillAndSend( &ZDP_TransID, dstAddr, Mgmt_NWK_Update_req, len );
   \                     ??ZDP_MgmtNwkUpdateReq_1:
   \   000062                ; Setup parameters for call to function fillAndSend
   \   000062   75..38       MOV     ?V2,#0x38
   \   000065   75..00       MOV     ?V3,#0x0
   \   000068   78..         MOV     R0,#?V2
   \   00006A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00006D   A9..         MOV     R1,?V0
   \   00006F   02....       LJMP    ?Subroutine3 & 0xFFFF
   1404          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   12....       LCALL   ?Subroutine76 & 0xFFFF
   \                     ??CrossCallReturnLabel_143:
   \   000003   A3           INC     DPTR
   \   000004   12....       LCALL   ?Subroutine94 & 0xFFFF
   \                     ??CrossCallReturnLabel_171:
   \   000007   A3           INC     DPTR
   \   000008   22           RET
   1405          
   1406          
   1407          /*********************************************************************
   1408           * Network Management Responses
   1409           */
   1410          
   1411          /*********************************************************************
   1412           * @fn          ZDP_MgmtNwkDiscRsp
   1413           *
   1414           * @brief       This builds and send a Mgmt_NWK_Disc_rsp message. This
   1415           *              function sends a unicast message.
   1416           *
   1417           * @param       dstAddr - destination address of the message
   1418           * @param       Status - message status (ZDP_SUCCESS or other)
   1419           * @param       NetworkCount - Total number of networks found
   1420           * @param       StartIndex - Starting index within the reporting network
   1421           *                           list
   1422           * @param       NetworkListCount - number of network lists included
   1423           *                                 in this message
   1424           * @param       NetworkList - List of network descriptors
   1425           * @param       SecurityEnable - Security Options
   1426           *
   1427           * @return      afStatus_t
   1428           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1429          afStatus_t ZDP_MgmtNwkDiscRsp( byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_MgmtNwkDiscRsp:
   1430                                      byte Status,
   1431                                      byte NetworkCount,
   1432                                      byte StartIndex,
   1433                                      byte NetworkListCount,
   1434                                      networkDesc_t *NetworkList,
   1435                                      byte SecurityEnable )
   1436          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   7401         MOV     A,#0x1
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   E9           MOV     A,R1
   \   000010   F0           MOVX    @DPTR,A
   \   000011   7402         MOV     A,#0x2
   \   000013   12....       LCALL   ?XSTACK_DISP0_8
   \   000016   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   000019   12....       LCALL   ?XSTACK_DISP0_8
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   F5..         MOV     ?V3,A
   1437            uint8 *buf;
   1438            uint8 *pBuf;
   1439            byte len = 1+1+1+1;  // Status + NetworkCount + StartIndex + NetworkCountList.
   1440            byte idx;
   1441          
   1442            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1443          
   1444            len += (NetworkListCount * ( ZDP_NETWORK_EXTENDED_DISCRIPTOR_SIZE - 2 ));
   \   00001F   75F00C       MOV     B,#0xc
   \   000022   12....       LCALL   ?Subroutine62 & 0xFFFF
   1445          
   1446            buf = osal_mem_alloc( len+1 );
   \                     ??CrossCallReturnLabel_274:
   \   000025   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000028   8A..         MOV     ?V4,R2
   \   00002A   8B..         MOV     ?V5,R3
   1447            if ( buf == NULL )
   \   00002C   EA           MOV     A,R2
   \   00002D   45..         ORL     A,?V5
   \   00002F   7005         JNZ     ??ZDP_MgmtNwkDiscRsp_0
   1448            {
   1449              return afStatus_MEM_FAIL;
   \   000031   7910         MOV     R1,#0x10
   \   000033   02....       LJMP    ??CrossCallReturnLabel_38 & 0xFFFF
   1450            }
   1451          
   1452            pBuf = buf+1;
   \                     ??ZDP_MgmtNwkDiscRsp_0:
   \   000036   8A82         MOV     DPL,R2
   \   000038   8B83         MOV     DPH,R3
   \   00003A   A3           INC     DPTR
   \   00003B   AE82         MOV     R6,DPL
   \   00003D   AF83         MOV     R7,DPH
   1453          
   1454            *pBuf++ = Status;
   \   00003F   85..82       MOV     DPL,?XSP + 0
   \   000042   85..83       MOV     DPH,?XSP + 1
   \   000045   12....       LCALL   ??Subroutine123_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_252:
   \   000048   F0           MOVX    @DPTR,A
   1455            *pBuf++ = NetworkCount;
   \   000049   A3           INC     DPTR
   \   00004A   E5..         MOV     A,?V7
   \   00004C   F0           MOVX    @DPTR,A
   1456            *pBuf++ = StartIndex;
   \   00004D   7414         MOV     A,#0x14
   \   00004F   12....       LCALL   ?XSTACK_DISP0_8
   \   000052   12....       LCALL   ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_75:
   \   000055   A3           INC     DPTR
   \   000056   12....       LCALL   ?Subroutine37 & 0xFFFF
   1457            *pBuf++ = NetworkListCount;
   \                     ??CrossCallReturnLabel_57:
   \   000059   E5..         MOV     A,?V3
   \   00005B   F0           MOVX    @DPTR,A
   \   00005C   EE           MOV     A,R6
   \   00005D   2404         ADD     A,#0x4
   \   00005F   FE           MOV     R6,A
   \   000060   5001         JNC     ??ZDP_MgmtNwkDiscRsp_1
   \   000062   0F           INC     R7
   1458          
   1459            for ( idx = 0; idx < NetworkListCount; idx++ )
   \                     ??ZDP_MgmtNwkDiscRsp_1:
   \   000063   75..00       MOV     ?V2,#0x0
   \   000066   7416         MOV     A,#0x16
   \   000068   12....       LCALL   ?XSTACK_DISP0_8
   \   00006B   12....       LCALL   ??Subroutine122_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_248:
   \   00006E   801A         SJMP    ??ZDP_MgmtNwkDiscRsp_2
   1460            {
   1461              osal_cpyExtAddr( pBuf, NetworkList->extendedPANID);
   1462              pBuf += Z_EXTADDR_LEN;
   1463          
   1464              *pBuf++  = NetworkList->logicalChannel;                // LogicalChannel
   1465              *pBuf    = NetworkList->stackProfile;                  // Stack profile
   1466              *pBuf++ |= (byte)(NetworkList->version << 4);          // ZigBee Version
   1467              *pBuf    = BEACON_ORDER_NO_BEACONS;                    // Beacon Order
   1468              *pBuf++ |= (uint8)(BEACON_ORDER_NO_BEACONS << 4);      // Superframe Order
   1469          
   1470              if ( NetworkList->chosenRouter != INVALID_NODE_ADDR )
   1471              {
   1472                *pBuf++ = TRUE;                         // Permit Joining
   1473              }
   1474              else
   1475              {
   1476                *pBuf++ = FALSE;
   \                     ??ZDP_MgmtNwkDiscRsp_3:
   \   000070   12....       LCALL   ?Subroutine69 & 0xFFFF
   1477              }
   \                     ??CrossCallReturnLabel_127:
   \   000073   E4           CLR     A
   \   000074   F0           MOVX    @DPTR,A
   \   000075   EE           MOV     A,R6
   \   000076   240C         ADD     A,#0xc
   \   000078   FE           MOV     R6,A
   \   000079   5001         JNC     ??ZDP_MgmtNwkDiscRsp_4
   \   00007B   0F           INC     R7
   1478          
   1479              NetworkList = NetworkList->nextDesc;    // Move to next list entry
   \                     ??ZDP_MgmtNwkDiscRsp_4:
   \   00007C   E5..         MOV     A,?V0
   \   00007E   2414         ADD     A,#0x14
   \   000080   F582         MOV     DPL,A
   \   000082   E4           CLR     A
   \   000083   35..         ADDC    A,?V1
   \   000085   12....       LCALL   ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_250:
   \   000088   05..         INC     ?V2
   \                     ??ZDP_MgmtNwkDiscRsp_2:
   \   00008A   E5..         MOV     A,?V2
   \   00008C   C3           CLR     C
   \   00008D   95..         SUBB    A,?V3
   \   00008F   5075         JNC     ??ZDP_MgmtNwkDiscRsp_5
   \   000091                ; Setup parameters for call to function sAddrExtCpy
   \   000091   E5..         MOV     A,?V0
   \   000093   240B         ADD     A,#0xb
   \   000095   FC           MOV     R4,A
   \   000096   E4           CLR     A
   \   000097   35..         ADDC    A,?V1
   \   000099   FD           MOV     R5,A
   \   00009A   EE           MOV     A,R6
   \   00009B   FA           MOV     R2,A
   \   00009C   EF           MOV     A,R7
   \   00009D   FB           MOV     R3,A
   \   00009E   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   0000A1   85..82       MOV     DPL,?V0
   \   0000A4   85..83       MOV     DPH,?V1
   \   0000A7   A3           INC     DPTR
   \   0000A8   A3           INC     DPTR
   \   0000A9   12....       LCALL   ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_76:
   \   0000AC   A3           INC     DPTR
   \   0000AD   A3           INC     DPTR
   \   0000AE   A3           INC     DPTR
   \   0000AF   A3           INC     DPTR
   \   0000B0   A3           INC     DPTR
   \   0000B1   A3           INC     DPTR
   \   0000B2   A3           INC     DPTR
   \   0000B3   F0           MOVX    @DPTR,A
   \   0000B4   EE           MOV     A,R6
   \   0000B5   2409         ADD     A,#0x9
   \   0000B7   F8           MOV     R0,A
   \   0000B8   E4           CLR     A
   \   0000B9   3F           ADDC    A,R7
   \   0000BA   F9           MOV     R1,A
   \   0000BB   85..82       MOV     DPL,?V0
   \   0000BE   85..83       MOV     DPH,?V1
   \   0000C1   A3           INC     DPTR
   \   0000C2   A3           INC     DPTR
   \   0000C3   A3           INC     DPTR
   \   0000C4   A3           INC     DPTR
   \   0000C5   A3           INC     DPTR
   \   0000C6   A3           INC     DPTR
   \   0000C7   12....       LCALL   ?Subroutine100 & 0xFFFF
   \                     ??CrossCallReturnLabel_194:
   \   0000CA   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_41:
   \   0000CD   A3           INC     DPTR
   \   0000CE   A3           INC     DPTR
   \   0000CF   E0           MOVX    A,@DPTR
   \   0000D0   C4           SWAP    A
   \   0000D1   54F0         ANL     A,#0xf0
   \   0000D3   FA           MOV     R2,A
   \   0000D4   8882         MOV     DPL,R0
   \   0000D6   8983         MOV     DPH,R1
   \   0000D8   E0           MOVX    A,@DPTR
   \   0000D9   4A           ORL     A,R2
   \   0000DA   12....       LCALL   ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   0000DD   A3           INC     DPTR
   \   0000DE   A3           INC     DPTR
   \   0000DF   A3           INC     DPTR
   \   0000E0   A3           INC     DPTR
   \   0000E1   A3           INC     DPTR
   \   0000E2   A3           INC     DPTR
   \   0000E3   A3           INC     DPTR
   \   0000E4   74FF         MOV     A,#-0x1
   \   0000E6   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   0000E9   E0           MOVX    A,@DPTR
   \   0000EA   64FE         XRL     A,#0xfe
   \   0000EC   7003         JNZ     ??ZDP_MgmtNwkDiscRsp_6
   \   0000EE   A3           INC     DPTR
   \   0000EF   E0           MOVX    A,@DPTR
   \   0000F0   F4           CPL     A
   \                     ??ZDP_MgmtNwkDiscRsp_6:
   \   0000F1   7003         JNZ     $+5
   \   0000F3   02....       LJMP    ??ZDP_MgmtNwkDiscRsp_3 & 0xFFFF
   \   0000F6   12....       LCALL   ?Subroutine69 & 0xFFFF
   1480            }
   \                     ??CrossCallReturnLabel_128:
   \   0000F9   7401         MOV     A,#0x1
   \   0000FB   F0           MOVX    @DPTR,A
   \   0000FC   EE           MOV     A,R6
   \   0000FD   240C         ADD     A,#0xc
   \   0000FF   FE           MOV     R6,A
   \   000100   5001         JNC     ??ZDP_MgmtNwkDiscRsp_7
   \   000102   0F           INC     R7
   \                     ??ZDP_MgmtNwkDiscRsp_7:
   \   000103   02....       LJMP    ??ZDP_MgmtNwkDiscRsp_4 & 0xFFFF
   1481          
   1482            FillAndSendBuffer( &TransSeq, dstAddr, Mgmt_NWK_Disc_rsp, len, buf );
   \                     ??ZDP_MgmtNwkDiscRsp_5:
   \   000106   85..82       MOV     DPL,?V4
   \   000109   85..83       MOV     DPH,?V5
   \   00010C   12....       LCALL   ??Subroutine126_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_263:
   \   00010F                ; Setup parameters for call to function fillAndSend
   \   00010F   75..30       MOV     ?V0,#0x30
   \   000112   75..80       MOV     ?V1,#-0x80
   \   000115   78..         MOV     R0,#?V0
   \   000117   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00011A   A9..         MOV     R1,?V6
   \   00011C   7404         MOV     A,#0x4
   \   00011E   12....       LCALL   ?XSTACK_DISP0_8
   \   000121   12....       LCALL   ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_96:
   \   000124   7403         MOV     A,#0x3
   \   000126   12....       LCALL   ?XSTACK_DISP101_8
   \   000129   12....       LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   00012C   7402         MOV     A,#0x2
   \   00012E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000131   E9           MOV     A,R1
   \   000132   FE           MOV     R6,A
   \   000133                ; Setup parameters for call to function osal_mem_free
   \   000133   AA..         MOV     R2,?V4
   \   000135   AB..         MOV     R3,?V5
   \   000137   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   00013A   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   00013D                REQUIRE ?Subroutine7
   \   00013D                ; // Fall through to label ?Subroutine7
   1483          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   7404         MOV     A,#0x4
   \   000002   02....       LJMP    ??Subroutine124_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   12....       LCALL   ?Subroutine88 & 0xFFFF
   \                     ??CrossCallReturnLabel_162:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000003   74..         MOV     A,#(ZDP_Buf + 1) & 0xff
   \   000005   F0           MOVX    @DPTR,A
   \   000006   A3           INC     DPTR
   \   000007   74..         MOV     A,#((ZDP_Buf + 1) >> 8) & 0xff
   \   000009   F0           MOVX    @DPTR,A
   \   00000A   EE           MOV     A,R6
   \   00000B   F9           MOV     R1,A
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine126_0:
   \   000000   A3           INC     DPTR
   \   000001   A882         MOV     R0,DPL
   \   000003   A983         MOV     R1,DPH
   \   000005   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000008                REQUIRE ??Subroutine127_0
   \   000008                ; // Fall through to label ??Subroutine127_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   12....       LCALL   ??Subroutine117_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_210:
   \   000003   EC           MOV     A,R4
   \   000004   85..82       MOV     DPL,?XSP + 0
   \   000007   85..83       MOV     DPH,?XSP + 1
   \   00000A   F0           MOVX    @DPTR,A
   \   00000B   8D..         MOV     ?V7,R5
   \   00000D   7415         MOV     A,#0x15
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine62:
   \   000000   A4           MUL     AB
   \   000001   2404         ADD     A,#0x4
   \   000003   F5..         MOV     ?V6,A
   \   000005                ; Setup parameters for call to function osal_mem_alloc
   \   000005                ; Setup parameters for call to function osal_mem_alloc
   \   000005                REQUIRE ??Subroutine129_0
   \   000005                ; // Fall through to label ??Subroutine129_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine129_0:
   \   000000   2401         ADD     A,#0x1
   \   000002   FA           MOV     R2,A
   \   000003   E4           CLR     A
   \   000004   3400         ADDC    A,#0x0
   \   000006   FB           MOV     R3,A
   \   000007   22           RET
   1484          
   1485          /*********************************************************************
   1486           * @fn          ZDP_MgmtLqiRsp
   1487           *
   1488           * @brief       This builds and send a Mgmt_Lqi_rsp message. This
   1489           *              function sends a unicast message.
   1490           *
   1491           * @param       dstAddr - destination address of the message
   1492           * @param       Status - message status (ZDP_SUCCESS or other)
   1493           * @param       NeighborLqiEntries - Total number of entries found
   1494           * @param       StartIndex - Starting index within the reporting list
   1495           * @param       NeighborLqiCount - number of lists included
   1496           *                                 in this message
   1497           * @param       NeighborLqiList - List of NeighborLqiItems.  This list
   1498           *                is the list to be sent, not the entire list
   1499           * @param       SecurityEnable - true if secure
   1500           *
   1501           * @return      ZStatus_t
   1502           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1503          ZStatus_t ZDP_MgmtLqiRsp( byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_MgmtLqiRsp:
   1504                                    byte Status,
   1505                                    byte NeighborLqiEntries,
   1506                                    byte StartIndex,
   1507                                    byte NeighborLqiCount,
   1508                                    ZDP_MgmtLqiItem_t* NeighborList,
   1509                                    byte SecurityEnable )
   1510          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   85..82       MOV     DPL,?XSP + 0
   \   00000E   85..83       MOV     DPH,?XSP + 1
   \   000011   F0           MOVX    @DPTR,A
   \   000012   7402         MOV     A,#0x2
   \   000014   12....       LCALL   ?XSTACK_DISP0_8
   \   000017   12....       LCALL   ??Subroutine117_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_207:
   \   00001A   7401         MOV     A,#0x1
   \   00001C   12....       LCALL   ?XSTACK_DISP0_8
   \   00001F   ED           MOV     A,R5
   \   000020   F0           MOVX    @DPTR,A
   1511            ZDP_MgmtLqiItem_t* list = NeighborList;
   \   000021   7416         MOV     A,#0x16
   \   000023   12....       LCALL   ?XSTACK_DISP0_8
   \   000026   12....       LCALL   ??Subroutine131_0 & 0xFFFF
   1512            uint8 *buf, *pBuf;
   1513            byte len, x;
   1514          
   1515            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1516          
   1517            if ( ZSuccess != Status )
   \                     ??CrossCallReturnLabel_285:
   \   000029   EC           MOV     A,R4
   \   00002A   6028         JZ      ??ZDP_MgmtLqiRsp_0
   1518            {
   1519              ZDP_TmpBuf[0] = Status;
   \   00002C   12....       LCALL   ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_236:
   \   00002F   EC           MOV     A,R4
   \   000030   F0           MOVX    @DPTR,A
   1520              return fillAndSend( &TransSeq, dstAddr, Mgmt_Lqi_rsp, 1 );
   \   000031                ; Setup parameters for call to function fillAndSend
   \   000031   75..31       MOV     ?V0,#0x31
   \   000034   75..80       MOV     ?V1,#-0x80
   \   000037   78..         MOV     R0,#?V0
   \   000039   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003C   7901         MOV     R1,#0x1
   \   00003E   7404         MOV     A,#0x4
   \   000040   12....       LCALL   ?XSTACK_DISP0_8
   \   000043   12....       LCALL   ?Subroutine54 & 0xFFFF
   1521            }
   \                     ??CrossCallReturnLabel_90:
   \   000046   12....       LCALL   ?XSTACK_DISP101_8
   \   000049   12....       LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   00004C   7402         MOV     A,#0x2
   \   00004E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000051   02....       LJMP    ??CrossCallReturnLabel_39 & 0xFFFF
   \                     ??ZDP_MgmtLqiRsp_0:
   \   000054   7415         MOV     A,#0x15
   \   000056   12....       LCALL   ?XSTACK_DISP0_8
   \   000059   E0           MOVX    A,@DPTR
   \   00005A   F5..         MOV     ?V5,A
   1522          
   1523            // (Status + NeighborLqiEntries + StartIndex + NeighborLqiCount) +
   1524            //  neighbor LQI data.
   1525            len = (1 + 1 + 1 + 1) + (NeighborLqiCount * ZDP_MGMTLQI_EXTENDED_SIZE);
   \   00005C   75F016       MOV     B,#0x16
   \   00005F   12....       LCALL   ?Subroutine62 & 0xFFFF
   1526          
   1527            buf = osal_mem_alloc( len+1 );
   \                     ??CrossCallReturnLabel_275:
   \   000062   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000065   8A..         MOV     ?V2,R2
   \   000067   8B..         MOV     ?V3,R3
   1528            if ( buf == NULL )
   \   000069   EA           MOV     A,R2
   \   00006A   45..         ORL     A,?V3
   \   00006C   7005         JNZ     ??ZDP_MgmtLqiRsp_1
   1529            {
   1530              return afStatus_MEM_FAIL;
   \   00006E   7910         MOV     R1,#0x10
   \   000070   02....       LJMP    ??CrossCallReturnLabel_39 & 0xFFFF
   1531            }
   1532          
   1533            pBuf = buf+1;
   \                     ??ZDP_MgmtLqiRsp_1:
   \   000073   8A82         MOV     DPL,R2
   \   000075   8B83         MOV     DPH,R3
   \   000077   A3           INC     DPTR
   \   000078   8582..       MOV     ?V0,DPL
   \   00007B   8583..       MOV     ?V1,DPH
   1534          
   1535            *pBuf++ = Status;
   \   00007E   E4           CLR     A
   \   00007F   F0           MOVX    @DPTR,A
   1536            *pBuf++ = NeighborLqiEntries;
   \   000080   04           INC     A
   \   000081   12....       LCALL   ?XSTACK_DISP0_8
   \   000084   12....       LCALL   ?Subroutine42 & 0xFFFF
   1537            *pBuf++ = StartIndex;
   \                     ??CrossCallReturnLabel_69:
   \   000087   7414         MOV     A,#0x14
   \   000089   12....       LCALL   ?XSTACK_DISP0_8
   \   00008C   12....       LCALL   ?Subroutine52 & 0xFFFF
   \                     ??CrossCallReturnLabel_89:
   \   00008F   12....       LCALL   ?Subroutine27 & 0xFFFF
   1538            *pBuf++ = NeighborLqiCount;
   \                     ??CrossCallReturnLabel_42:
   \   000092   E5..         MOV     A,?V5
   \   000094   F0           MOVX    @DPTR,A
   \   000095   E5..         MOV     A,?V0
   \   000097   2404         ADD     A,#0x4
   \   000099   F5..         MOV     ?V0,A
   \   00009B   5002         JNC     ??ZDP_MgmtLqiRsp_2
   \   00009D   05..         INC     ?V1
   1539          
   1540            for ( x = 0; x < NeighborLqiCount; x++ )
   \                     ??ZDP_MgmtLqiRsp_2:
   \   00009F   75..00       MOV     ?V4,#0x0
   \   0000A2   02....       LJMP    ??ZDP_MgmtLqiRsp_3 & 0xFFFF
   1541            {
   1542              osal_cpyExtAddr( pBuf, list->extPanID);         // Extended PanID
   \                     ??ZDP_MgmtLqiRsp_4:
   \   0000A5                ; Setup parameters for call to function sAddrExtCpy
   \   0000A5   EE           MOV     A,R6
   \   0000A6   2402         ADD     A,#0x2
   \   0000A8   FC           MOV     R4,A
   \   0000A9   E4           CLR     A
   \   0000AA   3F           ADDC    A,R7
   \   0000AB   FD           MOV     R5,A
   \   0000AC   AA..         MOV     R2,?V0
   \   0000AE   AB..         MOV     R3,?V1
   \   0000B0   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   1543              pBuf += Z_EXTADDR_LEN;
   1544          
   1545              // EXTADDR
   1546              pBuf = osal_cpyExtAddr( pBuf, list->extAddr );
   \   0000B3                ; Setup parameters for call to function sAddrExtCpy
   \   0000B3   EE           MOV     A,R6
   \   0000B4   240A         ADD     A,#0xa
   \   0000B6   FC           MOV     R4,A
   \   0000B7   E4           CLR     A
   \   0000B8   3F           ADDC    A,R7
   \   0000B9   FD           MOV     R5,A
   \   0000BA   E5..         MOV     A,?V0
   \   0000BC   2408         ADD     A,#0x8
   \   0000BE   FA           MOV     R2,A
   \   0000BF   E4           CLR     A
   \   0000C0   35..         ADDC    A,?V1
   \   0000C2   FB           MOV     R3,A
   \   0000C3   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   0000C6   8A..         MOV     ?V0,R2
   \   0000C8   8B..         MOV     ?V1,R3
   \   0000CA   A8..         MOV     R0,?V0
   \   0000CC   A9..         MOV     R1,?V1
   1547          
   1548              // NWKADDR
   1549              *pBuf++ = LO_UINT16( list->nwkAddr );
   \   0000CE   EE           MOV     A,R6
   \   0000CF   2412         ADD     A,#0x12
   \   0000D1   FC           MOV     R4,A
   \   0000D2   E4           CLR     A
   \   0000D3   3F           ADDC    A,R7
   \   0000D4   FD           MOV     R5,A
   \   0000D5   12....       LCALL   ?Subroutine21 & 0xFFFF
   1550              *pBuf++ = HI_UINT16( list->nwkAddr );
   1551          
   1552              // DEVICETYPE
   1553              *pBuf = list->devType;
   \                     ??CrossCallReturnLabel_26:
   \   0000D8   E8           MOV     A,R0
   \   0000D9   2402         ADD     A,#0x2
   \   0000DB   FA           MOV     R2,A
   \   0000DC   E4           CLR     A
   \   0000DD   39           ADDC    A,R1
   \   0000DE   FB           MOV     R3,A
   \   0000DF   EE           MOV     A,R6
   \   0000E0   2414         ADD     A,#0x14
   \   0000E2   F582         MOV     DPL,A
   \   0000E4   E4           CLR     A
   \   0000E5   3F           ADDC    A,R7
   \   0000E6   F583         MOV     DPH,A
   \   0000E8   12....       LCALL   ?Subroutine48 & 0xFFFF
   1554          
   1555              // RXONIDLE
   1556              *pBuf |= (uint8)(list->rxOnIdle << 2);
   \                     ??CrossCallReturnLabel_81:
   \   0000EB   EE           MOV     A,R6
   \   0000EC   2415         ADD     A,#0x15
   \   0000EE   12....       LCALL   ??Subroutine128_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_268:
   \   0000F1   33           RLC     A
   \   0000F2   33           RLC     A
   \   0000F3   54FC         ANL     A,#0xfc
   \   0000F5   FC           MOV     R4,A
   \   0000F6   8A82         MOV     DPL,R2
   \   0000F8   8B83         MOV     DPH,R3
   \   0000FA   E0           MOVX    A,@DPTR
   \   0000FB   4C           ORL     A,R4
   \   0000FC   F0           MOVX    @DPTR,A
   1557          
   1558              // RELATIONSHIP
   1559              *pBuf++ |= (uint8)(list->relation << 4);
   \   0000FD   EE           MOV     A,R6
   \   0000FE   2416         ADD     A,#0x16
   \   000100   12....       LCALL   ??Subroutine128_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_269:
   \   000103   C4           SWAP    A
   \   000104   54F0         ANL     A,#0xf0
   \   000106   FC           MOV     R4,A
   \   000107   8A82         MOV     DPL,R2
   \   000109   8B83         MOV     DPH,R3
   \   00010B   E0           MOVX    A,@DPTR
   \   00010C   4C           ORL     A,R4
   \   00010D   F0           MOVX    @DPTR,A
   1560          
   1561              // PERMITJOINING
   1562              *pBuf++ = (uint8)(list->permit);
   \   00010E   EE           MOV     A,R6
   \   00010F   2417         ADD     A,#0x17
   \   000111   F582         MOV     DPL,A
   \   000113   E4           CLR     A
   \   000114   3F           ADDC    A,R7
   \   000115   F583         MOV     DPH,A
   \   000117   12....       LCALL   ?Subroutine58 & 0xFFFF
   1563          
   1564              // DEPTH
   1565              *pBuf++ = list->depth;
   \                     ??CrossCallReturnLabel_104:
   \   00011A   EE           MOV     A,R6
   \   00011B   2418         ADD     A,#0x18
   \   00011D   F582         MOV     DPL,A
   \   00011F   E4           CLR     A
   \   000120   3F           ADDC    A,R7
   \   000121   F583         MOV     DPH,A
   \   000123   12....       LCALL   ?Subroutine56 & 0xFFFF
   1566          
   1567              // LQI
   1568              *pBuf++ = list->lqi;
   \                     ??CrossCallReturnLabel_99:
   \   000126   EE           MOV     A,R6
   \   000127   2419         ADD     A,#0x19
   \   000129   F582         MOV     DPL,A
   \   00012B   E4           CLR     A
   \   00012C   3F           ADDC    A,R7
   \   00012D   F583         MOV     DPH,A
   \   00012F   12....       LCALL   ?Subroutine59 & 0xFFFF
   \                     ??CrossCallReturnLabel_106:
   \   000132   A3           INC     DPTR
   \   000133   A3           INC     DPTR
   \   000134   A3           INC     DPTR
   \   000135   A3           INC     DPTR
   \   000136   F0           MOVX    @DPTR,A
   \   000137   E8           MOV     A,R0
   \   000138   2406         ADD     A,#0x6
   \   00013A   F5..         MOV     ?V0,A
   \   00013C   E4           CLR     A
   \   00013D   39           ADDC    A,R1
   \   00013E   F5..         MOV     ?V1,A
   1569          
   1570              list++; // next list entry
   \   000140   EE           MOV     A,R6
   \   000141   241A         ADD     A,#0x1a
   \   000143   FE           MOV     R6,A
   \   000144   5001         JNC     ??ZDP_MgmtLqiRsp_5
   \   000146   0F           INC     R7
   1571            }
   \                     ??ZDP_MgmtLqiRsp_5:
   \   000147   05..         INC     ?V4
   \                     ??ZDP_MgmtLqiRsp_3:
   \   000149   E5..         MOV     A,?V4
   \   00014B   C3           CLR     C
   \   00014C   95..         SUBB    A,?V5
   \   00014E   5003         JNC     $+5
   \   000150   02....       LJMP    ??ZDP_MgmtLqiRsp_4 & 0xFFFF
   1572          
   1573            FillAndSendBuffer( &TransSeq, dstAddr, Mgmt_Lqi_rsp, len, buf );
   \   000153   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_266:
   \   000156                ; Setup parameters for call to function fillAndSend
   \   000156   75..31       MOV     ?V0,#0x31
   \   000159   75..80       MOV     ?V1,#-0x80
   \   00015C   78..         MOV     R0,#?V0
   \   00015E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000161   A9..         MOV     R1,?V6
   \   000163   7404         MOV     A,#0x4
   \   000165   12....       LCALL   ?XSTACK_DISP0_8
   \   000168   12....       LCALL   ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_91:
   \   00016B   12....       LCALL   ?XSTACK_DISP101_8
   \   00016E   12....       LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   000171   7402         MOV     A,#0x2
   \   000173   12....       LCALL   ?DEALLOC_XSTACK8
   \   000176   E9           MOV     A,R1
   \   000177   FE           MOV     R6,A
   \   000178                ; Setup parameters for call to function osal_mem_free
   \   000178   AA..         MOV     R2,?V2
   \   00017A   AB..         MOV     R3,?V3
   \   00017C   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   00017F   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_39:
   \   000182   02....       LJMP    ?Subroutine7 & 0xFFFF
   1574          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine59:
   \   000000   12....       LCALL   ??Subroutine112_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_191:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine56:
   \   000000   12....       LCALL   ?Subroutine83 & 0xFFFF
   \                     ??CrossCallReturnLabel_155:
   \   000003   A3           INC     DPTR
   \   000004   F0           MOVX    @DPTR,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine54:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FC           MOV     R4,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FD           MOV     R5,A
   \   000005   7402         MOV     A,#0x2
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   8C82         MOV     DPL,R4
   \   000002   8D83         MOV     DPH,R5
   \   000004   12....       LCALL   ?Subroutine80 & 0xFFFF
   \                     ??CrossCallReturnLabel_148:
   \   000007   8C82         MOV     DPL,R4
   \   000009   8D83         MOV     DPH,R5
   \   00000B   12....       LCALL   ?Subroutine84 & 0xFFFF
   \                     ??CrossCallReturnLabel_193:
   \   00000E   F0           MOVX    @DPTR,A
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   85..82       MOV     DPL,?V2
   \   000003   85..83       MOV     DPH,?V3
   \   000006                REQUIRE ??Subroutine126_0
   \   000006                ; // Fall through to label ??Subroutine126_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine128_0:
   \   000000   F582         MOV     DPL,A
   \   000002   E4           CLR     A
   \   000003   3F           ADDC    A,R7
   \   000004   F583         MOV     DPH,A
   \   000006   E0           MOVX    A,@DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine58:
   \   000000   12....       LCALL   ?Subroutine83 & 0xFFFF
   \                     ??CrossCallReturnLabel_156:
   \   000003   F0           MOVX    @DPTR,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine83:
   \   000000   12....       LCALL   ?Subroutine100 & 0xFFFF
   \                     ??CrossCallReturnLabel_197:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   22           RET
   1575          
   1576          /*********************************************************************
   1577           * @fn          ZDP_MgmtRtgRsp
   1578           *
   1579           * @brief       This builds and send a Mgmt_Rtg_rsp message. This
   1580           *              function sends a unicast message.
   1581           *
   1582           * @param       dstAddr - destination address of the message
   1583           * @param       Status - message status (ZDP_SUCCESS or other)
   1584           * @param       RoutingTableEntries - Total number of entries
   1585           * @param       StartIndex - Starting index within the reporting list
   1586           * @param       RoutingTableListCount - number of entries included
   1587           *                                      in this message
   1588           * @param       RoutingTableList - List of Routing Table entries
   1589           * @param       SecurityEnable - true to enable security for this message
   1590           *
   1591           * @return      ZStatus_t
   1592           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1593          ZStatus_t ZDP_MgmtRtgRsp( byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_MgmtRtgRsp:
   1594                                      byte Status,
   1595                                      byte RoutingTableEntries,
   1596                                      byte StartIndex,
   1597                                      byte RoutingListCount,
   1598                                      rtgItem_t *RoutingTableList,
   1599                                      byte SecurityEnable )
   1600          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   85..82       MOV     DPL,?XSP + 0
   \   00000E   85..83       MOV     DPH,?XSP + 1
   \   000011   F0           MOVX    @DPTR,A
   \   000012   7401         MOV     A,#0x1
   \   000014   12....       LCALL   ?XSTACK_DISP0_8
   \   000017   12....       LCALL   ??Subroutine117_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_208:
   \   00001A   8C..         MOV     ?V7,R4
   \   00001C   8D..         MOV     ?V6,R5
   \   00001E   7414         MOV     A,#0x14
   \   000020   12....       LCALL   ?XSTACK_DISP0_8
   \   000023   E0           MOVX    A,@DPTR
   \   000024   F5..         MOV     ?V0,A
   1601            uint8 *buf;
   1602            uint8 *pBuf;
   1603            // Status + RoutingTableEntries + StartIndex + RoutingListCount.
   1604            byte len = 1 + 1 + 1 + 1;
   1605            byte x;
   1606          
   1607            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1608          
   1609            // Add an array for Routing List data
   1610            len += (RoutingListCount * ZDP_ROUTINGENTRY_SIZE);
   \   000026   75F005       MOV     B,#0x5
   \   000029   A4           MUL     AB
   \   00002A   2404         ADD     A,#0x4
   \   00002C   F5..         MOV     ?V1,A
   1611          
   1612            buf = osal_mem_alloc( (short)(len+1) );
   \   00002E                ; Setup parameters for call to function osal_mem_alloc
   \   00002E   12....       LCALL   ??Subroutine129_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_276:
   \   000031   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000034   8A..         MOV     ?V2,R2
   \   000036   8B..         MOV     ?V3,R3
   \   000038   AE..         MOV     R6,?V2
   \   00003A   AF..         MOV     R7,?V3
   1613            if ( buf == NULL )
   \   00003C   EE           MOV     A,R6
   \   00003D   4F           ORL     A,R7
   \   00003E   7005         JNZ     ??ZDP_MgmtRtgRsp_0
   1614            {
   1615              return afStatus_MEM_FAIL;
   \   000040   7910         MOV     R1,#0x10
   \   000042   02....       LJMP    ??ZDP_MgmtRtgRsp_1 & 0xFFFF
   1616            }
   1617          
   1618            pBuf = buf+1;
   \                     ??ZDP_MgmtRtgRsp_0:
   \   000045   8E82         MOV     DPL,R6
   \   000047   8F83         MOV     DPH,R7
   \   000049   A3           INC     DPTR
   \   00004A   A882         MOV     R0,DPL
   \   00004C   A983         MOV     R1,DPH
   1619          
   1620            *pBuf++ = Status;
   \   00004E   E5..         MOV     A,?V7
   \   000050   F0           MOVX    @DPTR,A
   1621            *pBuf++ = RoutingTableEntries;
   \   000051   A3           INC     DPTR
   \   000052   E5..         MOV     A,?V6
   \   000054   F0           MOVX    @DPTR,A
   1622            *pBuf++ = StartIndex;
   \   000055   7413         MOV     A,#0x13
   \   000057   12....       LCALL   ?XSTACK_DISP0_8
   \   00005A   12....       LCALL   ?Subroutine59 & 0xFFFF
   \                     ??CrossCallReturnLabel_107:
   \   00005D   A3           INC     DPTR
   \   00005E   12....       LCALL   ?Subroutine25 & 0xFFFF
   1623            *pBuf++ = RoutingListCount;
   \                     ??CrossCallReturnLabel_36:
   \   000061   E8           MOV     A,R0
   \   000062   2404         ADD     A,#0x4
   \   000064   F8           MOV     R0,A
   \   000065   5001         JNC     ??ZDP_MgmtRtgRsp_2
   \   000067   09           INC     R1
   1624          
   1625            for ( x = 0; x < RoutingListCount; x++ )
   \                     ??ZDP_MgmtRtgRsp_2:
   \   000068   7A00         MOV     R2,#0x0
   \   00006A   7415         MOV     A,#0x15
   \   00006C   12....       LCALL   ?XSTACK_DISP0_8
   \   00006F   12....       LCALL   ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_97:
   \   000072   8066         SJMP    ??ZDP_MgmtRtgRsp_3
   1626            {
   1627              *pBuf++ = LO_UINT16( RoutingTableList->dstAddress );  // Destination Address
   \                     ??ZDP_MgmtRtgRsp_4:
   \   000074   12....       LCALL   ?Subroutine21 & 0xFFFF
   1628              *pBuf++ = HI_UINT16( RoutingTableList->dstAddress );
   1629          
   1630              *pBuf = (RoutingTableList->status & 0x07);
   \                     ??CrossCallReturnLabel_27:
   \   000077   8C82         MOV     DPL,R4
   \   000079   8D83         MOV     DPH,R5
   \   00007B   A3           INC     DPTR
   \   00007C   A3           INC     DPTR
   \   00007D   A3           INC     DPTR
   \   00007E   A3           INC     DPTR
   \   00007F   A3           INC     DPTR
   \   000080   E0           MOVX    A,@DPTR
   \   000081   5407         ANL     A,#0x7
   \   000083   8882         MOV     DPL,R0
   \   000085   8983         MOV     DPH,R1
   \   000087   12....       LCALL   ?Subroutine29 & 0xFFFF
   1631              if ( RoutingTableList->options & (ZP_MTO_ROUTE_RC | ZP_MTO_ROUTE_NRC) )
   \                     ??CrossCallReturnLabel_46:
   \   00008A   A3           INC     DPTR
   \   00008B   E0           MOVX    A,@DPTR
   \   00008C   5418         ANL     A,#0x18
   \   00008E   602C         JZ      ??ZDP_MgmtRtgRsp_5
   1632              {
   1633                uint8 options = 0;
   1634                options |= ZDO_MGMT_RTG_ENTRY_MANYTOONE;
   \   000090   7B02         MOV     R3,#0x2
   1635          
   1636                if ( RoutingTableList->options & ZP_RTG_RECORD )
   \   000092   8C82         MOV     DPL,R4
   \   000094   8D83         MOV     DPH,R5
   \   000096   A3           INC     DPTR
   \   000097   A3           INC     DPTR
   \   000098   A3           INC     DPTR
   \   000099   A3           INC     DPTR
   \   00009A   A3           INC     DPTR
   \   00009B   A3           INC     DPTR
   \   00009C   E0           MOVX    A,@DPTR
   \   00009D   A2E2         MOV     C,0xE0 /* A   */.2
   \   00009F   5002         JNC     ??ZDP_MgmtRtgRsp_6
   1637                {
   1638                  options |= ZDO_MGMT_RTG_ENTRY_ROUTE_RECORD_REQUIRED;
   \   0000A1   7B06         MOV     R3,#0x6
   1639                }
   1640          
   1641                if ( RoutingTableList->options & ZP_MTO_ROUTE_NRC )
   \                     ??ZDP_MgmtRtgRsp_6:
   \   0000A3   A2E4         MOV     C,0xE0 /* A   */.4
   \   0000A5   5005         JNC     ??ZDP_MgmtRtgRsp_7
   1642                {
   1643                  options |= ZDO_MGMT_RTG_ENTRY_MEMORY_CONSTRAINED;
   \   0000A7   D3           SETB    C
   \   0000A8   EB           MOV     A,R3
   \   0000A9   D2E0         SETB    0xE0 /* A   */.0
   \   0000AB   FB           MOV     R3,A
   1644                }
   1645          
   1646                *pBuf |= (options << 3);
   \                     ??ZDP_MgmtRtgRsp_7:
   \   0000AC   EB           MOV     A,R3
   \   0000AD   33           RLC     A
   \   0000AE   33           RLC     A
   \   0000AF   33           RLC     A
   \   0000B0   54F8         ANL     A,#0xf8
   \   0000B2   FB           MOV     R3,A
   \   0000B3   8882         MOV     DPL,R0
   \   0000B5   8983         MOV     DPH,R1
   \   0000B7   A3           INC     DPTR
   \   0000B8   A3           INC     DPTR
   \   0000B9   E0           MOVX    A,@DPTR
   \   0000BA   4B           ORL     A,R3
   \   0000BB   F0           MOVX    @DPTR,A
   1647              }
   1648              pBuf++;
   1649          
   1650              *pBuf++ = LO_UINT16( RoutingTableList->nextHopAddress );  // Next hop
   \                     ??ZDP_MgmtRtgRsp_5:
   \   0000BC   EC           MOV     A,R4
   \   0000BD   2402         ADD     A,#0x2
   \   0000BF   12....       LCALL   ?Subroutine99 & 0xFFFF
   \                     ??CrossCallReturnLabel_182:
   \   0000C2   12....       LCALL   ?Subroutine100 & 0xFFFF
   \                     ??CrossCallReturnLabel_195:
   \   0000C5   12....       LCALL   ?Subroutine36 & 0xFFFF
   1651              *pBuf++ = HI_UINT16( RoutingTableList->nextHopAddress );
   \                     ??CrossCallReturnLabel_56:
   \   0000C8   12....       LCALL   ?Subroutine56 & 0xFFFF
   \                     ??CrossCallReturnLabel_100:
   \   0000CB   E8           MOV     A,R0
   \   0000CC   2405         ADD     A,#0x5
   \   0000CE   F8           MOV     R0,A
   \   0000CF   5001         JNC     ??ZDP_MgmtRtgRsp_8
   \   0000D1   09           INC     R1
   1652              RoutingTableList++;    // Move to next list entry
   \                     ??ZDP_MgmtRtgRsp_8:
   \   0000D2   EC           MOV     A,R4
   \   0000D3   2407         ADD     A,#0x7
   \   0000D5   FC           MOV     R4,A
   \   0000D6   5001         JNC     ??ZDP_MgmtRtgRsp_9
   \   0000D8   0D           INC     R5
   1653            }
   \                     ??ZDP_MgmtRtgRsp_9:
   \   0000D9   0A           INC     R2
   \                     ??ZDP_MgmtRtgRsp_3:
   \   0000DA   EA           MOV     A,R2
   \   0000DB   C3           CLR     C
   \   0000DC   95..         SUBB    A,?V0
   \   0000DE   4094         JC      ??ZDP_MgmtRtgRsp_4
   1654          
   1655            FillAndSendBuffer( &TransSeq, dstAddr, Mgmt_Rtg_rsp, len, buf );
   \   0000E0   8E82         MOV     DPL,R6
   \   0000E2   8F83         MOV     DPH,R7
   \   0000E4   12....       LCALL   ??Subroutine126_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_264:
   \   0000E7                ; Setup parameters for call to function fillAndSend
   \   0000E7   75..32       MOV     ?V2,#0x32
   \   0000EA   75..80       MOV     ?V3,#-0x80
   \   0000ED   78..         MOV     R0,#?V2
   \   0000EF   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000F2   A9..         MOV     R1,?V1
   \   0000F4   7403         MOV     A,#0x3
   \   0000F6   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F9   12....       LCALL   ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_92:
   \   0000FC   12....       LCALL   ?XSTACK_DISP101_8
   \   0000FF   12....       LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   000102   7402         MOV     A,#0x2
   \   000104   12....       LCALL   ?DEALLOC_XSTACK8
   \   000107   E9           MOV     A,R1
   \   000108   F5..         MOV     ?V0,A
   \   00010A                ; Setup parameters for call to function osal_mem_free
   \   00010A   EE           MOV     A,R6
   \   00010B   FA           MOV     R2,A
   \   00010C   EF           MOV     A,R7
   \   00010D   FB           MOV     R3,A
   \   00010E   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000111   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000114   74..         MOV     A,#(ZDP_Buf + 1) & 0xff
   \   000116   F0           MOVX    @DPTR,A
   \   000117   A3           INC     DPTR
   \   000118   74..         MOV     A,#((ZDP_Buf + 1) >> 8) & 0xff
   \   00011A   F0           MOVX    @DPTR,A
   \   00011B   A9..         MOV     R1,?V0
   \                     ??ZDP_MgmtRtgRsp_1:
   \   00011D   7403         MOV     A,#0x3
   \   00011F   02....       LJMP    ??Subroutine124_0 & 0xFFFF
   1656          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   12....       LCALL   ?Subroutine92 & 0xFFFF
   \                     ??CrossCallReturnLabel_169:
   \   000003   E5..         MOV     A,?V0
   \   000005   F0           MOVX    @DPTR,A
   \   000006   22           RET
   1657          
   1658          /*********************************************************************
   1659           * @fn          ZDP_MgmtBindRsp
   1660           *
   1661           * @brief       This builds and send a Mgmt_Bind_rsp message. This
   1662           *              function sends a unicast message.
   1663           *
   1664           * @param       dstAddr - destination address of the message
   1665           * @param       Status - message status (ZDP_SUCCESS or other)
   1666           * @param       BindingTableEntries - Total number of entries
   1667           * @param       StartIndex - Starting index within the reporting list
   1668           * @param       BindingTableListCount - number of entries included
   1669           *                                 in this message
   1670           * @param       BindingTableList - List of Binding Table entries
   1671           * @param       SecurityEnable - Security Options
   1672           *
   1673           * @return      ZStatus_t
   1674           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1675          ZStatus_t ZDP_MgmtBindRsp( byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_MgmtBindRsp:
   1676                                      byte Status,
   1677                                      byte BindingTableEntries,
   1678                                      byte StartIndex,
   1679                                      byte BindingTableListCount,
   1680                                      apsBindingItem_t *BindingTableList,
   1681                                      byte SecurityEnable )
   1682          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   7401         MOV     A,#0x1
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   E9           MOV     A,R1
   \   000010   F0           MOVX    @DPTR,A
   \   000011   7402         MOV     A,#0x2
   \   000013   12....       LCALL   ?XSTACK_DISP0_8
   \   000016   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   000019   12....       LCALL   ?XSTACK_DISP0_8
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   F5..         MOV     ?V6,A
   1683            uint8 *buf;
   1684            uint8 *pBuf;
   1685            uint8 maxLen; // maxLen is the maximum packet length to allocate enough memory space
   1686            uint8 len;    // Actual length varies due to different addrMode
   1687            uint8 x;
   1688            byte extZdpBindEntrySize = ZDP_BINDINGENTRY_SIZE + 1 + 1; // One more byte for cluserID and DstAddrMode
   1689            byte shortZdpBindEntrySize = ZDP_BINDINGENTRY_SIZE + 1 + 1 + 2 - 8 - 1; // clusterID + DstAddrMode + shortAddr - ExtAddr - DstEndpoint
   1690          
   1691            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1692          
   1693            // Status + BindingTableEntries + StartIndex + BindingTableListCount.
   1694            maxLen = 1 + 1 + 1 + 1;
   1695            maxLen += (BindingTableListCount * extZdpBindEntrySize );  //max length
   1696            buf = osal_mem_alloc( maxLen + 1 );  // +1 for transaction ID
   \   00001F                ; Setup parameters for call to function osal_mem_alloc
   \   00001F   75F015       MOV     B,#0x15
   \   000022   A4           MUL     AB
   \   000023   2404         ADD     A,#0x4
   \   000025   12....       LCALL   ??Subroutine129_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_277:
   \   000028   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00002B   8A..         MOV     ?V2,R2
   \   00002D   8B..         MOV     ?V3,R3
   1697          
   1698            if ( buf == NULL )
   \   00002F   EA           MOV     A,R2
   \   000030   45..         ORL     A,?V3
   \   000032   7005         JNZ     ??ZDP_MgmtBindRsp_0
   1699            {
   1700              return afStatus_MEM_FAIL;
   \   000034   7910         MOV     R1,#0x10
   \   000036   02....       LJMP    ??CrossCallReturnLabel_40 & 0xFFFF
   1701            }
   1702          
   1703            pBuf = buf+1;
   \                     ??ZDP_MgmtBindRsp_0:
   \   000039   8A82         MOV     DPL,R2
   \   00003B   8B83         MOV     DPH,R3
   \   00003D   A3           INC     DPTR
   \   00003E   AA82         MOV     R2,DPL
   \   000040   AB83         MOV     R3,DPH
   1704          
   1705            *pBuf++ = Status;
   \   000042   85..82       MOV     DPL,?XSP + 0
   \   000045   85..83       MOV     DPH,?XSP + 1
   \   000048   12....       LCALL   ?Subroutine48 & 0xFFFF
   1706            *pBuf++ = BindingTableEntries;
   \                     ??CrossCallReturnLabel_82:
   \   00004B   A3           INC     DPTR
   \   00004C   E5..         MOV     A,?V7
   \   00004E   F0           MOVX    @DPTR,A
   1707            *pBuf++ = StartIndex;
   \   00004F   7414         MOV     A,#0x14
   \   000051   12....       LCALL   ?XSTACK_DISP0_8
   \   000054   12....       LCALL   ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_103:
   \   000057   A3           INC     DPTR
   \   000058   12....       LCALL   ?Subroutine95 & 0xFFFF
   1708            *pBuf++ = BindingTableListCount;
   \                     ??CrossCallReturnLabel_172:
   \   00005B   E5..         MOV     A,?V6
   \   00005D   F0           MOVX    @DPTR,A
   \   00005E   EA           MOV     A,R2
   \   00005F   2404         ADD     A,#0x4
   \   000061   FA           MOV     R2,A
   \   000062   5001         JNC     ??ZDP_MgmtBindRsp_1
   \   000064   0B           INC     R3
   1709          
   1710            // Initial length = Status + BindingTableEntries + StartIndex + BindingTableListCount.
   1711            // length += ZDP_BINDINGENTRY_SIZE   -- Version 1.0
   1712            //           extZdpBindEntrySize     -- Version 1.1 extended address mode
   1713            //           shortZdpBindEntrySize   -- Version 1.1 group address mode
   1714          
   1715            len = 1 + 1 + 1 + 1;
   \                     ??ZDP_MgmtBindRsp_1:
   \   000065   75..04       MOV     ?V0,#0x4
   1716            for ( x = 0; x < BindingTableListCount; x++ )
   \   000068   75..00       MOV     ?V1,#0x0
   \   00006B   7416         MOV     A,#0x16
   \   00006D   12....       LCALL   ?XSTACK_DISP0_8
   \   000070   12....       LCALL   ??Subroutine131_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_286:
   \   000073   8028         SJMP    ??ZDP_MgmtBindRsp_2
   1717            {
   1718              pBuf = osal_cpyExtAddr( pBuf, BindingTableList->srcAddr );
   1719              *pBuf++ = BindingTableList->srcEP;
   1720          
   1721              // Cluster ID
   1722              *pBuf++ = LO_UINT16( BindingTableList->clusterID );
   1723              *pBuf++ = HI_UINT16( BindingTableList->clusterID );
   1724          
   1725              *pBuf++ = BindingTableList->dstAddr.addrMode;
   1726              if ( BindingTableList->dstAddr.addrMode == Addr64Bit )
   1727              {
   1728                len += extZdpBindEntrySize;
   1729                pBuf = osal_cpyExtAddr( pBuf, BindingTableList->dstAddr.addr.extAddr );
   1730                *pBuf++ = BindingTableList->dstEP;
   1731              }
   1732              else
   1733              {
   1734                len += shortZdpBindEntrySize;
   \                     ??ZDP_MgmtBindRsp_3:
   \   000075   740E         MOV     A,#0xe
   \   000077   25..         ADD     A,?V0
   \   000079   F5..         MOV     ?V0,A
   1735                *pBuf++ = LO_UINT16( BindingTableList->dstAddr.addr.shortAddr );
   \   00007B   EE           MOV     A,R6
   \   00007C   240B         ADD     A,#0xb
   \   00007E   12....       LCALL   ?Subroutine71 & 0xFFFF
   1736                *pBuf++ = HI_UINT16( BindingTableList->dstAddr.addr.shortAddr );
   1737              }
   \                     ??CrossCallReturnLabel_131:
   \   000081   12....       LCALL   ?Subroutine82 & 0xFFFF
   \                     ??CrossCallReturnLabel_152:
   \   000084   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   000087   8A82         MOV     DPL,R2
   \   000089   8B83         MOV     DPH,R3
   \   00008B   A3           INC     DPTR
   \   00008C   F0           MOVX    @DPTR,A
   \   00008D   EA           MOV     A,R2
   \   00008E   2402         ADD     A,#0x2
   \   000090   FA           MOV     R2,A
   \   000091   5001         JNC     ??ZDP_MgmtBindRsp_4
   \   000093   0B           INC     R3
   1738              BindingTableList++;    // Move to next list entry
   \                     ??ZDP_MgmtBindRsp_4:
   \   000094   EE           MOV     A,R6
   \   000095   2415         ADD     A,#0x15
   \   000097   FE           MOV     R6,A
   \   000098   5001         JNC     ??ZDP_MgmtBindRsp_5
   \   00009A   0F           INC     R7
   \                     ??ZDP_MgmtBindRsp_5:
   \   00009B   05..         INC     ?V1
   \                     ??ZDP_MgmtBindRsp_2:
   \   00009D   E5..         MOV     A,?V1
   \   00009F   C3           CLR     C
   \   0000A0   95..         SUBB    A,?V6
   \   0000A2   5065         JNC     ??ZDP_MgmtBindRsp_6
   \   0000A4                ; Setup parameters for call to function sAddrExtCpy
   \   0000A4   EE           MOV     A,R6
   \   0000A5   FC           MOV     R4,A
   \   0000A6   EF           MOV     A,R7
   \   0000A7   FD           MOV     R5,A
   \   0000A8   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   0000AB   8A..         MOV     ?V4,R2
   \   0000AD   8B..         MOV     ?V5,R3
   \   0000AF   A8..         MOV     R0,?V4
   \   0000B1   A9..         MOV     R1,?V5
   \   0000B3   8E82         MOV     DPL,R6
   \   0000B5   8F83         MOV     DPH,R7
   \   0000B7   A3           INC     DPTR
   \   0000B8   A3           INC     DPTR
   \   0000B9   A3           INC     DPTR
   \   0000BA   A3           INC     DPTR
   \   0000BB   A3           INC     DPTR
   \   0000BC   A3           INC     DPTR
   \   0000BD   A3           INC     DPTR
   \   0000BE   A3           INC     DPTR
   \   0000BF   12....       LCALL   ?Subroutine80 & 0xFFFF
   \                     ??CrossCallReturnLabel_146:
   \   0000C2   EE           MOV     A,R6
   \   0000C3   2409         ADD     A,#0x9
   \   0000C5   12....       LCALL   ?Subroutine71 & 0xFFFF
   \                     ??CrossCallReturnLabel_132:
   \   0000C8   12....       LCALL   ?Subroutine59 & 0xFFFF
   \                     ??CrossCallReturnLabel_108:
   \   0000CB   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   0000CE   8882         MOV     DPL,R0
   \   0000D0   8983         MOV     DPH,R1
   \   0000D2   A3           INC     DPTR
   \   0000D3   A3           INC     DPTR
   \   0000D4   F0           MOVX    @DPTR,A
   \   0000D5   EE           MOV     A,R6
   \   0000D6   2413         ADD     A,#0x13
   \   0000D8   12....       LCALL   ?Subroutine71 & 0xFFFF
   \                     ??CrossCallReturnLabel_133:
   \   0000DB   12....       LCALL   ?Subroutine58 & 0xFFFF
   \                     ??CrossCallReturnLabel_105:
   \   0000DE   E8           MOV     A,R0
   \   0000DF   2404         ADD     A,#0x4
   \   0000E1   FA           MOV     R2,A
   \   0000E2   E4           CLR     A
   \   0000E3   39           ADDC    A,R1
   \   0000E4   FB           MOV     R3,A
   \   0000E5   8C82         MOV     DPL,R4
   \   0000E7   8D83         MOV     DPH,R5
   \   0000E9   E0           MOVX    A,@DPTR
   \   0000EA   6403         XRL     A,#0x3
   \   0000EC   7087         JNZ     ??ZDP_MgmtBindRsp_3
   \   0000EE   7415         MOV     A,#0x15
   \   0000F0   25..         ADD     A,?V0
   \   0000F2   F5..         MOV     ?V0,A
   \   0000F4                ; Setup parameters for call to function sAddrExtCpy
   \   0000F4   EE           MOV     A,R6
   \   0000F5   240B         ADD     A,#0xb
   \   0000F7   FC           MOV     R4,A
   \   0000F8   E4           CLR     A
   \   0000F9   3F           ADDC    A,R7
   \   0000FA   FD           MOV     R5,A
   \   0000FB   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   0000FE   EE           MOV     A,R6
   \   0000FF   2414         ADD     A,#0x14
   \   000101   12....       LCALL   ??Subroutine128_0 & 0xFFFF
   1739            }
   \                     ??CrossCallReturnLabel_270:
   \   000104   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_215:
   \   000107   808B         SJMP    ??ZDP_MgmtBindRsp_4
   1740          
   1741            FillAndSendBuffer( &TransSeq, dstAddr, Mgmt_Bind_rsp, len, buf );
   \                     ??ZDP_MgmtBindRsp_6:
   \   000109   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_267:
   \   00010C                ; Setup parameters for call to function fillAndSend
   \   00010C   75..33       MOV     ?V4,#0x33
   \   00010F   75..80       MOV     ?V5,#-0x80
   \   000112   78..         MOV     R0,#?V4
   \   000114   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000117   A9..         MOV     R1,?V0
   \   000119   7404         MOV     A,#0x4
   \   00011B   12....       LCALL   ?XSTACK_DISP0_8
   \   00011E   12....       LCALL   ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_98:
   \   000121   7403         MOV     A,#0x3
   \   000123   12....       LCALL   ?XSTACK_DISP101_8
   \   000126   12....       LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   000129   7402         MOV     A,#0x2
   \   00012B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00012E   E9           MOV     A,R1
   \   00012F   FE           MOV     R6,A
   \   000130                ; Setup parameters for call to function osal_mem_free
   \   000130   AA..         MOV     R2,?V2
   \   000132   AB..         MOV     R3,?V3
   \   000134   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000137   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_40:
   \   00013A   02....       LJMP    ?Subroutine7 & 0xFFFF
   1742          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine71:
   \   000000   FC           MOV     R4,A
   \   000001   E4           CLR     A
   \   000002   3F           ADDC    A,R7
   \   000003   FD           MOV     R5,A
   \   000004   8C82         MOV     DPL,R4
   \   000006   8D83         MOV     DPH,R5
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine95:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   22           RET
   1743          
   1744          /*********************************************************************
   1745           * @fn          ZDP_MgmtNwkUpdateNotify
   1746           *
   1747           * @brief       This builds and send a Mgmt_NWK_Update_notify message. This
   1748           *              function sends a unicast message.
   1749           *
   1750           * @param       dstAddr - destination address of the message
   1751           * @param       status - message status (ZDP_SUCCESS or other)
   1752           * @param       scannedChannels - List of channels scanned by the request
   1753           * @param       totalTransmissions - Total transmissions
   1754           * @param       transmissionFailures - Sum of transmission failures
   1755           * @param       listCount - Number of records contained in the energyValues list
   1756           * @param       energyValues - List of descriptors, one for each of ListCount,
   1757           *                             of the enegry detect descriptors
   1758           * @param       txOptions - Transmit options
   1759           * @param       securityEnable - Security options
   1760           *
   1761           * @return      afStatus_t
   1762           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1763          afStatus_t ZDP_MgmtNwkUpdateNotify( uint8 TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_MgmtNwkUpdateNotify:
   1764                                              uint8 status, uint32 scannedChannels,
   1765                                              uint16 totalTransmissions, uint16 transmissionFailures,
   1766                                              uint8 listCount, uint8 *energyValues, uint8 txOptions,
   1767                                              uint8 securityEnable )
   1768          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   85..82       MOV     DPL,?XSP + 0
   \   00000E   85..83       MOV     DPH,?XSP + 1
   \   000011   F0           MOVX    @DPTR,A
   \   000012   8A..         MOV     ?V6,R2
   \   000014   8B..         MOV     ?V7,R3
   \   000016   8C..         MOV     ?V5,R4
   \   000018   8D..         MOV     ?V3,R5
   1769            uint8 *buf;
   1770            uint8 *pBuf;
   1771            uint8 len;
   1772          
   1773            (void)securityEnable;  // Intentionally unreferenced parameter
   1774          
   1775            // Status + ScannedChannels + totalTransmissions + transmissionFailures + ListCount + energyValues
   1776            len = 1 + 4 + 2 + 2 + 1 + listCount;
   \   00001A   740A         MOV     A,#0xa
   \   00001C   2D           ADD     A,R5
   \   00001D   F5..         MOV     ?V4,A
   1777          
   1778            buf = osal_mem_alloc( len+1 ); // +1 for transaction ID
   \   00001F                ; Setup parameters for call to function osal_mem_alloc
   \   00001F   12....       LCALL   ??Subroutine129_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_278:
   \   000022   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000025   8A..         MOV     ?V0,R2
   \   000027   8B..         MOV     ?V1,R3
   \   000029   AE..         MOV     R6,?V0
   \   00002B   AF..         MOV     R7,?V1
   1779            if ( buf == NULL )
   \   00002D   EE           MOV     A,R6
   \   00002E   4F           ORL     A,R7
   \   00002F   7005         JNZ     ??ZDP_MgmtNwkUpdateNotify_0
   1780            {
   1781              return afStatus_MEM_FAIL;
   \   000031   7910         MOV     R1,#0x10
   \   000033   02....       LJMP    ??ZDP_MgmtNwkUpdateNotify_1 & 0xFFFF
   1782            }
   1783          
   1784            pBuf = buf+1;
   \                     ??ZDP_MgmtNwkUpdateNotify_0:
   \   000036   8E82         MOV     DPL,R6
   \   000038   8F83         MOV     DPH,R7
   \   00003A   A3           INC     DPTR
   1785          
   1786            *pBuf++ = status;
   \   00003B   E5..         MOV     A,?V5
   \   00003D   12....       LCALL   ??Subroutine118_0 & 0xFFFF
   1787          
   1788            pBuf = osal_buffer_uint32( pBuf, scannedChannels );
   \                     ??CrossCallReturnLabel_213:
   \   000040                ; Setup parameters for call to function osal_buffer_uint32
   \   000040   7411         MOV     A,#0x11
   \   000042   12....       LCALL   ?XSTACK_DISP0_8
   \   000045   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   000048   12....       LCALL   `??osal_buffer_uint32::?relay`; Banked call to: osal_buffer_uint32
   \   00004B   7404         MOV     A,#0x4
   \   00004D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000050   7415         MOV     A,#0x15
   \   000052   12....       LCALL   ?XSTACK_DISP0_8
   \   000055   12....       LCALL   ??Subroutine130_0 & 0xFFFF
   1789          
   1790            *pBuf++ = LO_UINT16( totalTransmissions );
   \                     ??CrossCallReturnLabel_280:
   \   000058   8A82         MOV     DPL,R2
   \   00005A   8B83         MOV     DPH,R3
   \   00005C   F0           MOVX    @DPTR,A
   1791            *pBuf++ = HI_UINT16( totalTransmissions );
   \   00005D   E9           MOV     A,R1
   \   00005E   A3           INC     DPTR
   \   00005F   F0           MOVX    @DPTR,A
   \   000060   7417         MOV     A,#0x17
   \   000062   12....       LCALL   ?XSTACK_DISP0_8
   \   000065   12....       LCALL   ?Subroutine32 & 0xFFFF
   1792          
   1793            *pBuf++ = LO_UINT16( transmissionFailures );
   1794            *pBuf++ = HI_UINT16( transmissionFailures );
   \                     ??CrossCallReturnLabel_50:
   \   000068   12....       LCALL   ?Subroutine14 & 0xFFFF
   1795          
   1796            *pBuf++ = listCount;
   \                     ??CrossCallReturnLabel_13:
   \   00006B   E5..         MOV     A,?V3
   \   00006D   F0           MOVX    @DPTR,A
   1797          
   1798            if ( listCount > 0 )
   \   00006E   601E         JZ      ??ZDP_MgmtNwkUpdateNotify_2
   1799              osal_memcpy( pBuf, energyValues, listCount );
   \   000070                ; Setup parameters for call to function osal_memcpy
   \   000070   7419         MOV     A,#0x19
   \   000072   12....       LCALL   ?XSTACK_DISP0_8
   \   000075   12....       LCALL   ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_78:
   \   000078   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00007B   AC..         MOV     R4,?V3
   \   00007D   7D00         MOV     R5,#0x0
   \   00007F   EA           MOV     A,R2
   \   000080   2405         ADD     A,#0x5
   \   000082   FA           MOV     R2,A
   \   000083   5001         JNC     ??ZDP_MgmtNwkUpdateNotify_3
   \   000085   0B           INC     R3
   \                     ??ZDP_MgmtNwkUpdateNotify_3:
   \   000086   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000089   7403         MOV     A,#0x3
   \   00008B   12....       LCALL   ?DEALLOC_XSTACK8
   1800          
   1801            FillAndSendBufferTxOptions( &TransSeq, dstAddr, Mgmt_NWK_Update_notify, len, buf, txOptions );
   \                     ??ZDP_MgmtNwkUpdateNotify_2:
   \   00008E   8E82         MOV     DPL,R6
   \   000090   8F83         MOV     DPH,R7
   \   000092   12....       LCALL   ??Subroutine126_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_265:
   \   000095   741B         MOV     A,#0x1b
   \   000097   12....       LCALL   ?XSTACK_DISP0_8
   \   00009A   E0           MOVX    A,@DPTR
   \   00009B   90....       MOV     DPTR,#ZDP_TxOptions
   \   00009E   F0           MOVX    @DPTR,A
   \   00009F                ; Setup parameters for call to function fillAndSend
   \   00009F   75..38       MOV     ?V0,#0x38
   \   0000A2   75..80       MOV     ?V1,#-0x80
   \   0000A5   78..         MOV     R0,#?V0
   \   0000A7   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000AA   A9..         MOV     R1,?V4
   \   0000AC   AC..         MOV     R4,?V6
   \   0000AE   AD..         MOV     R5,?V7
   \   0000B0   7402         MOV     A,#0x2
   \   0000B2   12....       LCALL   ?XSTACK_DISP101_8
   \   0000B5   12....       LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   0000B8   7402         MOV     A,#0x2
   \   0000BA   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000BD   E9           MOV     A,R1
   \   0000BE   F5..         MOV     ?V0,A
   \   0000C0                ; Setup parameters for call to function osal_mem_free
   \   0000C0   EE           MOV     A,R6
   \   0000C1   FA           MOV     R2,A
   \   0000C2   EF           MOV     A,R7
   \   0000C3   FB           MOV     R3,A
   \   0000C4   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0000C7   90....       MOV     DPTR,#ZDP_TmpBuf
   \   0000CA   74..         MOV     A,#(ZDP_Buf + 1) & 0xff
   \   0000CC   F0           MOVX    @DPTR,A
   \   0000CD   A3           INC     DPTR
   \   0000CE   74..         MOV     A,#((ZDP_Buf + 1) >> 8) & 0xff
   \   0000D0   F0           MOVX    @DPTR,A
   \   0000D1   90....       MOV     DPTR,#ZDP_TxOptions
   \   0000D4   E4           CLR     A
   \   0000D5   F0           MOVX    @DPTR,A
   \   0000D6   A9..         MOV     R1,?V0
   \                     ??ZDP_MgmtNwkUpdateNotify_1:
   \   0000D8   02....       LJMP    ?Subroutine4 & 0xFFFF
   1802          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   12....       LCALL   ?Subroutine95 & 0xFFFF
   \                     ??CrossCallReturnLabel_173:
   \   000003   A3           INC     DPTR
   \   000004   22           RET
   1803          
   1804          /*********************************************************************
   1805           * Functions to register for ZDO Over-the-air messages
   1806           */
   1807          
   1808          /*********************************************************************
   1809           * @fn          ZDO_RegisterForZDOMsg
   1810           *
   1811           * @brief       Call this function to register of an incoming over
   1812           *              the air ZDO message - probably a response message
   1813           *              but requests can also be received.
   1814           *              Messages are delivered to the task with ZDO_CB_MSG
   1815           *              as the message ID.
   1816           *
   1817           * @param       taskID - Where you would like the message delivered
   1818           * @param       clusterID - What message?
   1819           *                          ZDO_ALL_MSGS_CLUSTERID - all responses
   1820           *                          and device announce
   1821           *
   1822           * @return      ZSuccess - successful, ZMemError if not
   1823           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1824          ZStatus_t ZDO_RegisterForZDOMsg( uint8 taskID, uint16 clusterID )
   \                     ZDO_RegisterForZDOMsg:
   1825          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V2,R1
   \   000007   8A..         MOV     ?V0,R2
   \   000009   8B..         MOV     ?V1,R3
   1826            ZDO_MsgCB_t *pList;
   1827            ZDO_MsgCB_t *pLast;
   1828            ZDO_MsgCB_t *pNew;
   1829          
   1830            // Look for duplicate
   1831            pList = pLast = zdoMsgCBs;
   \   00000B   90....       MOV     DPTR,#zdoMsgCBs
   \   00000E   12....       LCALL   ??Subroutine131_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_287:
   \   000011   EE           MOV     A,R6
   \   000012   F8           MOV     R0,A
   \   000013   EF           MOV     A,R7
   \   000014   8028         SJMP    ??CrossCallReturnLabel_304
   1832            while ( pList )
   1833            {
   1834              if ( pList->taskID == taskID && pList->clusterID == clusterID )
   \                     ??ZDO_RegisterForZDOMsg_0:
   \   000016   8882         MOV     DPL,R0
   \   000018   8983         MOV     DPH,R1
   \   00001A   A3           INC     DPTR
   \   00001B   A3           INC     DPTR
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   65..         XRL     A,?V2
   \   00001F   7012         JNZ     ??ZDO_RegisterForZDOMsg_1
   \   000021   8882         MOV     DPL,R0
   \   000023   8983         MOV     DPH,R1
   \   000025   A3           INC     DPTR
   \   000026   A3           INC     DPTR
   \   000027   A3           INC     DPTR
   \   000028   E0           MOVX    A,@DPTR
   \   000029   65..         XRL     A,?V0
   \   00002B   7004         JNZ     ??ZDO_RegisterForZDOMsg_2
   \   00002D   A3           INC     DPTR
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   65..         XRL     A,?V1
   \                     ??ZDO_RegisterForZDOMsg_2:
   \   000031   604E         JZ      ??CrossCallReturnLabel_258
   1835                return ( ZSuccess );
   1836              pLast = pList;
   \                     ??ZDO_RegisterForZDOMsg_1:
   \   000033   E8           MOV     A,R0
   \   000034   FE           MOV     R6,A
   \   000035   E9           MOV     A,R1
   \   000036   FF           MOV     R7,A
   1837              pList = (ZDO_MsgCB_t *)pList->next;
   \   000037   8882         MOV     DPL,R0
   \   000039   8983         MOV     DPH,R1
   \   00003B   12....       LCALL   ??Subroutine134_0 & 0xFFFF
   1838            }
   \                     ??CrossCallReturnLabel_304:
   \   00003E   F9           MOV     R1,A
   \   00003F   E8           MOV     A,R0
   \   000040   49           ORL     A,R1
   \   000041   70D3         JNZ     ??ZDO_RegisterForZDOMsg_0
   1839          
   1840            // Add to the list
   1841            pNew = (ZDO_MsgCB_t *)osal_mem_alloc( sizeof ( ZDO_MsgCB_t ) );
   \   000043                ; Setup parameters for call to function osal_mem_alloc
   \   000043   7A05         MOV     R2,#0x5
   \   000045   7B00         MOV     R3,#0x0
   \   000047   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00004A   8A..         MOV     ?V4,R2
   \   00004C   8B..         MOV     ?V5,R3
   \   00004E   A8..         MOV     R0,?V4
   \   000050   A9..         MOV     R1,?V5
   1842            if ( pNew )
   \   000052   E8           MOV     A,R0
   \   000053   49           ORL     A,R1
   \   000054   602F         JZ      ??ZDO_RegisterForZDOMsg_3
   1843            {
   1844              pNew->taskID = taskID;
   \   000056   8882         MOV     DPL,R0
   \   000058   8983         MOV     DPH,R1
   \   00005A   A3           INC     DPTR
   \   00005B   A3           INC     DPTR
   \   00005C   E5..         MOV     A,?V2
   \   00005E   12....       LCALL   ?Subroutine25 & 0xFFFF
   1845              pNew->clusterID = clusterID;
   \                     ??CrossCallReturnLabel_37:
   \   000061   A3           INC     DPTR
   \   000062   E5..         MOV     A,?V1
   \   000064   12....       LCALL   ?Subroutine93 & 0xFFFF
   1846              pNew->next = NULL;
   \                     ??CrossCallReturnLabel_205:
   \   000067   E4           CLR     A
   \   000068   F0           MOVX    @DPTR,A
   \   000069   A3           INC     DPTR
   \   00006A   F0           MOVX    @DPTR,A
   1847              if ( zdoMsgCBs )
   \   00006B   90....       MOV     DPTR,#zdoMsgCBs
   \   00006E   12....       LCALL   ??Subroutine120_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_220:
   \   000071   EA           MOV     A,R2
   \   000072   4B           ORL     A,R3
   \   000073   6006         JZ      ??ZDO_RegisterForZDOMsg_4
   1848              {
   1849                pLast->next = pNew;
   \   000075   8E82         MOV     DPL,R6
   \   000077   8F83         MOV     DPH,R7
   \   000079   8003         SJMP    ??ZDO_RegisterForZDOMsg_5
   1850              }
   1851              else
   1852                zdoMsgCBs = pNew;
   \                     ??ZDO_RegisterForZDOMsg_4:
   \   00007B   90....       MOV     DPTR,#zdoMsgCBs
   \                     ??ZDO_RegisterForZDOMsg_5:
   \   00007E   12....       LCALL   ??Subroutine127_0 & 0xFFFF
   1853              return ( ZSuccess );
   \                     ??CrossCallReturnLabel_258:
   \   000081   7900         MOV     R1,#0x0
   \   000083   8002         SJMP    ??ZDO_RegisterForZDOMsg_6
   1854            }
   1855            else
   1856              return ( ZMemError );
   \                     ??ZDO_RegisterForZDOMsg_3:
   \   000085   7910         MOV     R1,#0x10
   \                     ??ZDO_RegisterForZDOMsg_6:
   \   000087   02....       LJMP    ??Subroutine113_0 & 0xFFFF
   1857          }
   1858          
   1859          /*********************************************************************
   1860           * @fn          ZDO_RemoveRegisteredCB
   1861           *
   1862           * @brief       Call this function if you don't want to receive the
   1863           *              incoming message.
   1864           *
   1865           * @param       taskID - Where the messages are being delivered.
   1866           * @param       clusterID - What message?
   1867           *
   1868           * @return      ZSuccess - successful, ZFailure if not found
   1869           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1870          ZStatus_t ZDO_RemoveRegisteredCB( uint8 taskID, uint16 clusterID )
   \                     ZDO_RemoveRegisteredCB:
   1871          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   1872            ZDO_MsgCB_t *pList;
   1873            ZDO_MsgCB_t *pLast = NULL;
   \   000007   7C00         MOV     R4,#0x0
   \   000009   7D00         MOV     R5,#0x0
   1874          
   1875            pList = zdoMsgCBs;
   \   00000B   90....       MOV     DPTR,#zdoMsgCBs
   \   00000E   8008         SJMP    ??ZDO_RemoveRegisteredCB_0
   1876            while ( pList )
   1877            {
   1878              if ( pList->taskID == taskID && pList->clusterID == clusterID )
   1879              {
   1880                if ( pLast )
   1881                {
   1882                  // remove this one from the linked list
   1883                  pLast->next = pList->next;
   1884                }
   1885                else if ( pList->next )
   1886                {
   1887                  // remove the first one from the linked list
   1888                  zdoMsgCBs = pList->next;
   1889                }
   1890                else
   1891                {
   1892                  // remove the only item from the list
   1893                  zdoMsgCBs = (ZDO_MsgCB_t *)NULL;
   1894                }
   1895                osal_mem_free( pList );
   1896                return ( ZSuccess );
   1897              }
   1898              pLast = pList;
   \                     ??ZDO_RemoveRegisteredCB_1:
   \   000010   E8           MOV     A,R0
   \   000011   FC           MOV     R4,A
   \   000012   E9           MOV     A,R1
   \   000013   FD           MOV     R5,A
   1899              pList = pList->next;
   \   000014   8882         MOV     DPL,R0
   \   000016   8983         MOV     DPH,R1
   \                     ??ZDO_RemoveRegisteredCB_0:
   \   000018   12....       LCALL   ??Subroutine130_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_281:
   \   00001B   49           ORL     A,R1
   \   00001C   604A         JZ      ??ZDO_RemoveRegisteredCB_2
   \   00001E   8882         MOV     DPL,R0
   \   000020   8983         MOV     DPH,R1
   \   000022   A3           INC     DPTR
   \   000023   A3           INC     DPTR
   \   000024   E0           MOVX    A,@DPTR
   \   000025   6E           XRL     A,R6
   \   000026   70E8         JNZ     ??ZDO_RemoveRegisteredCB_1
   \   000028   8882         MOV     DPL,R0
   \   00002A   8983         MOV     DPH,R1
   \   00002C   A3           INC     DPTR
   \   00002D   A3           INC     DPTR
   \   00002E   A3           INC     DPTR
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   6A           XRL     A,R2
   \   000031   7003         JNZ     ??ZDO_RemoveRegisteredCB_3
   \   000033   A3           INC     DPTR
   \   000034   E0           MOVX    A,@DPTR
   \   000035   6B           XRL     A,R3
   \                     ??ZDO_RemoveRegisteredCB_3:
   \   000036   70D8         JNZ     ??ZDO_RemoveRegisteredCB_1
   \   000038   EC           MOV     A,R4
   \   000039   4D           ORL     A,R5
   \   00003A   8882         MOV     DPL,R0
   \   00003C   8983         MOV     DPH,R1
   \   00003E   6009         JZ      ??ZDO_RemoveRegisteredCB_4
   \   000040   12....       LCALL   ??Subroutine120_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_221:
   \   000043   8C82         MOV     DPL,R4
   \   000045   8D83         MOV     DPH,R5
   \   000047   800A         SJMP    ??ZDO_RemoveRegisteredCB_5
   \                     ??ZDO_RemoveRegisteredCB_4:
   \   000049   12....       LCALL   ??Subroutine120_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_222:
   \   00004C   EA           MOV     A,R2
   \   00004D   4B           ORL     A,R3
   \   00004E   90....       MOV     DPTR,#zdoMsgCBs
   \   000051   6006         JZ      ??ZDO_RemoveRegisteredCB_6
   \                     ??ZDO_RemoveRegisteredCB_5:
   \   000053   EA           MOV     A,R2
   \   000054   F0           MOVX    @DPTR,A
   \   000055   A3           INC     DPTR
   \   000056   EB           MOV     A,R3
   \   000057   8003         SJMP    ??ZDO_RemoveRegisteredCB_7
   \                     ??ZDO_RemoveRegisteredCB_6:
   \   000059   E4           CLR     A
   \   00005A   F0           MOVX    @DPTR,A
   \   00005B   A3           INC     DPTR
   \                     ??ZDO_RemoveRegisteredCB_7:
   \   00005C   F0           MOVX    @DPTR,A
   \   00005D                ; Setup parameters for call to function osal_mem_free
   \   00005D   E8           MOV     A,R0
   \   00005E   FA           MOV     R2,A
   \   00005F   E9           MOV     A,R1
   \   000060   FB           MOV     R3,A
   \   000061   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000064   7900         MOV     R1,#0x0
   \   000066   8002         SJMP    ??ZDO_RemoveRegisteredCB_8
   1900            }
   1901          
   1902            return ( ZFailure );
   \                     ??ZDO_RemoveRegisteredCB_2:
   \   000068   7901         MOV     R1,#0x1
   \                     ??ZDO_RemoveRegisteredCB_8:
   \   00006A   02....       LJMP    ?Subroutine5 & 0xFFFF
   1903          }
   1904          
   1905          /*********************************************************************
   1906           * @fn          ZDO_SendMsgCBs
   1907           *
   1908           * @brief       This function sends messages to registered tasks.
   1909           *              Local to ZDO and shouldn't be called outside of ZDO.
   1910           *
   1911           * @param       inMsg - incoming message
   1912           *
   1913           * @return      TRUE if sent to at least 1 task, FALSE if not
   1914           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine72:
   \   000000   EE           MOV     A,R6
   \   000001   2410         ADD     A,#0x10
   \   000003                REQUIRE ??Subroutine128_0
   \   000003                ; // Fall through to label ??Subroutine128_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1915          uint8 ZDO_SendMsgCBs( zdoIncomingMsg_t *inMsg )
   \                     ZDO_SendMsgCBs:
   1916          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   1917            uint8 ret = FALSE;
   \   000009   75..00       MOV     ?V0,#0x0
   1918            ZDO_MsgCB_t *pList = zdoMsgCBs;
   \   00000C   90....       MOV     DPTR,#zdoMsgCBs
   \   00000F   02....       LJMP    ??ZDO_SendMsgCBs_0 & 0xFFFF
   1919            while ( pList )
   1920            {
   1921              if ( (pList->clusterID == inMsg->clusterID)
   1922                 || ((pList->clusterID == ZDO_ALL_MSGS_CLUSTERID)
   1923                     && ((inMsg->clusterID & ZDO_RESPONSE_BIT) || (inMsg->clusterID == Device_annce))) )
   \                     ??ZDO_SendMsgCBs_1:
   \   000012   85..82       MOV     DPL,?V4
   \   000015   85..83       MOV     DPH,?V5
   \   000018   A3           INC     DPTR
   \   000019   A3           INC     DPTR
   \   00001A   A3           INC     DPTR
   \   00001B   12....       LCALL   ??Subroutine133_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_295:
   \   00001E   12....       LCALL   ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_120:
   \   000021   68           XRL     A,R0
   \   000022   7003         JNZ     ??ZDO_SendMsgCBs_2
   \   000024   A3           INC     DPTR
   \   000025   E0           MOVX    A,@DPTR
   \   000026   69           XRL     A,R1
   \                     ??ZDO_SendMsgCBs_2:
   \   000027   602C         JZ      ??ZDO_SendMsgCBs_3
   \   000029   85..82       MOV     DPL,?V4
   \   00002C   85..83       MOV     DPH,?V5
   \   00002F   A3           INC     DPTR
   \   000030   A3           INC     DPTR
   \   000031   A3           INC     DPTR
   \   000032   E0           MOVX    A,@DPTR
   \   000033   F4           CPL     A
   \   000034   7003         JNZ     ??ZDO_SendMsgCBs_4
   \   000036   A3           INC     DPTR
   \   000037   E0           MOVX    A,@DPTR
   \   000038   F4           CPL     A
   \                     ??ZDO_SendMsgCBs_4:
   \   000039   6003         JZ      $+5
   \   00003B   02....       LJMP    ??ZDO_SendMsgCBs_5 & 0xFFFF
   \   00003E   12....       LCALL   ?Subroutine68 & 0xFFFF
   \                     ??CrossCallReturnLabel_125:
   \   000041   A3           INC     DPTR
   \   000042   E0           MOVX    A,@DPTR
   \   000043   5480         ANL     A,#0x80
   \   000045   700E         JNZ     ??ZDO_SendMsgCBs_3
   \   000047   12....       LCALL   ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_121:
   \   00004A   6413         XRL     A,#0x13
   \   00004C   7002         JNZ     ??ZDO_SendMsgCBs_6
   \   00004E   A3           INC     DPTR
   \   00004F   E0           MOVX    A,@DPTR
   \                     ??ZDO_SendMsgCBs_6:
   \   000050   6003         JZ      $+5
   \   000052   02....       LJMP    ??ZDO_SendMsgCBs_5 & 0xFFFF
   1924              {
   1925                zdoIncomingMsg_t *msgPtr;
   1926          
   1927                // Send the address to the task
   1928                msgPtr = (zdoIncomingMsg_t *)osal_msg_allocate( sizeof( zdoIncomingMsg_t ) + inMsg->asduLen );
   \                     ??ZDO_SendMsgCBs_3:
   \   000055                ; Setup parameters for call to function osal_msg_allocate
   \   000055   12....       LCALL   ?Subroutine72 & 0xFFFF
   \                     ??CrossCallReturnLabel_271:
   \   000058   2417         ADD     A,#0x17
   \   00005A   FA           MOV     R2,A
   \   00005B   E4           CLR     A
   \   00005C   3400         ADDC    A,#0x0
   \   00005E   FB           MOV     R3,A
   \   00005F   12....       LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   000062   8A..         MOV     ?V6,R2
   \   000064   8B..         MOV     ?V7,R3
   1929                if ( msgPtr )
   \   000066   EA           MOV     A,R2
   \   000067   45..         ORL     A,?V7
   \   000069   606A         JZ      ??ZDO_SendMsgCBs_5
   1930                {
   1931                  // copy struct
   1932                  osal_memcpy( msgPtr, inMsg, sizeof( zdoIncomingMsg_t ));
   \   00006B                ; Setup parameters for call to function osal_memcpy
   \   00006B   8E..         MOV     ?V0,R6
   \   00006D   8F..         MOV     ?V1,R7
   \   00006F   75..00       MOV     ?V2,#0x0
   \   000072   78..         MOV     R0,#?V0
   \   000074   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000077   7C17         MOV     R4,#0x17
   \   000079   7D00         MOV     R5,#0x0
   \   00007B   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00007E   7403         MOV     A,#0x3
   \   000080   12....       LCALL   ?DEALLOC_XSTACK8
   1933          
   1934                  if ( inMsg->asduLen )
   \   000083   12....       LCALL   ?Subroutine72 & 0xFFFF
   \                     ??CrossCallReturnLabel_272:
   \   000086   6030         JZ      ??ZDO_SendMsgCBs_7
   1935                  {
   1936                    msgPtr->asdu = (byte*)(((byte*)msgPtr) + sizeof( zdoIncomingMsg_t ));
   \   000088   E5..         MOV     A,?V6
   \   00008A   2417         ADD     A,#0x17
   \   00008C   FA           MOV     R2,A
   \   00008D   E4           CLR     A
   \   00008E   35..         ADDC    A,?V7
   \   000090   FB           MOV     R3,A
   \   000091   E5..         MOV     A,?V6
   \   000093   12....       LCALL   ?Subroutine96 & 0xFFFF
   \                     ??CrossCallReturnLabel_175:
   \   000096   35..         ADDC    A,?V7
   \   000098   F583         MOV     DPH,A
   \   00009A   12....       LCALL   ??Subroutine117_0 & 0xFFFF
   1937                    osal_memcpy( msgPtr->asdu, inMsg->asdu, inMsg->asduLen );
   \                     ??CrossCallReturnLabel_209:
   \   00009D                ; Setup parameters for call to function osal_memcpy
   \   00009D   EE           MOV     A,R6
   \   00009E   12....       LCALL   ?Subroutine96 & 0xFFFF
   1938                  }
   \                     ??CrossCallReturnLabel_176:
   \   0000A1   3F           ADDC    A,R7
   \   0000A2   12....       LCALL   ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_251:
   \   0000A5   78..         MOV     R0,#?V0
   \   0000A7   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000AA   12....       LCALL   ?Subroutine72 & 0xFFFF
   \                     ??CrossCallReturnLabel_273:
   \   0000AD   FC           MOV     R4,A
   \   0000AE   7D00         MOV     R5,#0x0
   \   0000B0   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000B3   7403         MOV     A,#0x3
   \   0000B5   12....       LCALL   ?DEALLOC_XSTACK8
   1939          
   1940                  msgPtr->hdr.event = ZDO_CB_MSG;
   \                     ??ZDO_SendMsgCBs_7:
   \   0000B8   85..82       MOV     DPL,?V6
   \   0000BB   85..83       MOV     DPH,?V7
   \   0000BE   74D3         MOV     A,#-0x2d
   \   0000C0   F0           MOVX    @DPTR,A
   1941                  osal_msg_send( pList->taskID, (uint8 *)msgPtr );
   \   0000C1                ; Setup parameters for call to function osal_msg_send
   \   0000C1   AA..         MOV     R2,?V6
   \   0000C3   AB..         MOV     R3,?V7
   \   0000C5   85..82       MOV     DPL,?V4
   \   0000C8   85..83       MOV     DPH,?V5
   \   0000CB   A3           INC     DPTR
   \   0000CC   A3           INC     DPTR
   \   0000CD   E0           MOVX    A,@DPTR
   \   0000CE   F9           MOV     R1,A
   \   0000CF   12....       LCALL   `??osal_msg_send::?relay`; Banked call to: osal_msg_send
   1942                  ret = TRUE;
   \   0000D2   75..01       MOV     ?V0,#0x1
   1943                }
   1944              }
   1945              pList = (ZDO_MsgCB_t *)pList->next;
   \                     ??ZDO_SendMsgCBs_5:
   \   0000D5   85..82       MOV     DPL,?V4
   \   0000D8   85..83       MOV     DPH,?V5
   \                     ??ZDO_SendMsgCBs_0:
   \   0000DB   E0           MOVX    A,@DPTR
   \   0000DC   F5..         MOV     ?V4,A
   \   0000DE   A3           INC     DPTR
   \   0000DF   E0           MOVX    A,@DPTR
   \   0000E0   F5..         MOV     ?V5,A
   1946            }
   \   0000E2   E5..         MOV     A,?V4
   \   0000E4   45..         ORL     A,?V5
   \   0000E6   6003         JZ      $+5
   \   0000E8   02....       LJMP    ??ZDO_SendMsgCBs_1 & 0xFFFF
   1947            return ( ret );
   \   0000EB   A9..         MOV     R1,?V0
   \   0000ED   02....       LJMP    ??Subroutine125_0 & 0xFFFF
   1948          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine66:
   \   000000   12....       LCALL   ?Subroutine98 & 0xFFFF
   \                     ??CrossCallReturnLabel_180:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET
   1949          
   1950          /*********************************************************************
   1951           * Incoming message processor
   1952           */
   1953          
   1954          /*********************************************************************
   1955           * @fn          ZDP_IncomingData
   1956           *
   1957           * @brief       This function indicates the transfer of a data PDU (ASDU)
   1958           *              from the APS sub-layer to the ZDO.
   1959           *
   1960           * @param       pData - Incoming Message
   1961           *
   1962           * @return      none
   1963           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1964          void ZDP_IncomingData( afIncomingMSGPacket_t *pData )
   \                     ZDP_IncomingData:
   1965          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 23
   \   000005   74E9         MOV     A,#-0x17
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1966            uint8 x = 0;
   \   00000A   75..00       MOV     ?V0,#0x0
   1967            uint8 handled;
   1968            zdoIncomingMsg_t inMsg;
   1969          
   1970            inMsg.srcAddr.addrMode = Addr16Bit;
   \   00000D   740A         MOV     A,#0xa
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   7402         MOV     A,#0x2
   \   000014   12....       LCALL   ?Subroutine14 & 0xFFFF
   1971            inMsg.srcAddr.addr.shortAddr = pData->srcAddr.addr.shortAddr;
   \                     ??CrossCallReturnLabel_14:
   \   000017   A3           INC     DPTR
   \   000018   A3           INC     DPTR
   \   000019   12....       LCALL   ??Subroutine133_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_296:
   \   00001C   7402         MOV     A,#0x2
   \   00001E   12....       LCALL   ?XSTACK_DISP0_8
   \   000021   12....       LCALL   ??Subroutine127_0 & 0xFFFF
   1972            inMsg.wasBroadcast = pData->wasBroadcast;
   \                     ??CrossCallReturnLabel_259:
   \   000024   EA           MOV     A,R2
   \   000025   2415         ADD     A,#0x15
   \   000027   F582         MOV     DPL,A
   \   000029   E4           CLR     A
   \   00002A   3B           ADDC    A,R3
   \   00002B   F583         MOV     DPH,A
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   C0E0         PUSH    A
   \   000030   740B         MOV     A,#0xb
   \   000032   12....       LCALL   ?XSTACK_DISP0_8
   \   000035   D0E0         POP     A
   \   000037   12....       LCALL   ?Subroutine14 & 0xFFFF
   1973            inMsg.clusterID = pData->clusterId;
   \                     ??CrossCallReturnLabel_15:
   \   00003A   12....       LCALL   ??Subroutine133_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_297:
   \   00003D   740C         MOV     A,#0xc
   \   00003F   12....       LCALL   ?XSTACK_DISP0_8
   \   000042   12....       LCALL   ??Subroutine127_0 & 0xFFFF
   1974            inMsg.SecurityUse = pData->SecurityUse;
   \                     ??CrossCallReturnLabel_260:
   \   000045   EA           MOV     A,R2
   \   000046   2419         ADD     A,#0x19
   \   000048   F582         MOV     DPL,A
   \   00004A   E4           CLR     A
   \   00004B   3B           ADDC    A,R3
   \   00004C   F583         MOV     DPH,A
   \   00004E   E0           MOVX    A,@DPTR
   \   00004F   C0E0         PUSH    A
   \   000051   740E         MOV     A,#0xe
   \   000053   12....       LCALL   ?XSTACK_DISP0_8
   \   000056   D0E0         POP     A
   \   000058   F0           MOVX    @DPTR,A
   1975          
   1976            inMsg.asduLen = pData->cmd.DataLength-1;
   \   000059   EA           MOV     A,R2
   \   00005A   2420         ADD     A,#0x20
   \   00005C   F582         MOV     DPL,A
   \   00005E   E4           CLR     A
   \   00005F   3B           ADDC    A,R3
   \   000060   F583         MOV     DPH,A
   \   000062   E0           MOVX    A,@DPTR
   \   000063   14           DEC     A
   \   000064   C0E0         PUSH    A
   \   000066   7410         MOV     A,#0x10
   \   000068   12....       LCALL   ?XSTACK_DISP0_8
   \   00006B   D0E0         POP     A
   \   00006D   F0           MOVX    @DPTR,A
   1977            inMsg.asdu = pData->cmd.Data+1;
   \   00006E   EA           MOV     A,R2
   \   00006F   2422         ADD     A,#0x22
   \   000071   F8           MOV     R0,A
   \   000072   E4           CLR     A
   \   000073   3B           ADDC    A,R3
   \   000074   F9           MOV     R1,A
   \   000075   8882         MOV     DPL,R0
   \   000077   8983         MOV     DPH,R1
   \   000079   E0           MOVX    A,@DPTR
   \   00007A   2401         ADD     A,#0x1
   \   00007C   FC           MOV     R4,A
   \   00007D   A3           INC     DPTR
   \   00007E   E0           MOVX    A,@DPTR
   \   00007F   3400         ADDC    A,#0x0
   \   000081   FD           MOV     R5,A
   \   000082   7413         MOV     A,#0x13
   \   000084   12....       LCALL   ?XSTACK_DISP0_8
   \   000087   EC           MOV     A,R4
   \   000088   F0           MOVX    @DPTR,A
   \   000089   A3           INC     DPTR
   \   00008A   ED           MOV     A,R5
   \   00008B   12....       LCALL   ?Subroutine93 & 0xFFFF
   1978            inMsg.TransSeq = pData->cmd.Data[0];
   \                     ??CrossCallReturnLabel_206:
   \   00008E   12....       LCALL   ??Subroutine121_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_231:
   \   000091   E0           MOVX    A,@DPTR
   \   000092   C0E0         PUSH    A
   \   000094   740F         MOV     A,#0xf
   \   000096   12....       LCALL   ?XSTACK_DISP0_8
   \   000099   D0E0         POP     A
   \   00009B   F0           MOVX    @DPTR,A
   1979            inMsg.macDestAddr = pData->macDestAddr;
   \   00009C   EA           MOV     A,R2
   \   00009D   2412         ADD     A,#0x12
   \   00009F   F582         MOV     DPL,A
   \   0000A1   E4           CLR     A
   \   0000A2   3B           ADDC    A,R3
   \   0000A3   F583         MOV     DPH,A
   \   0000A5   12....       LCALL   ??Subroutine133_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_298:
   \   0000A8   7411         MOV     A,#0x11
   \   0000AA   12....       LCALL   ?XSTACK_DISP0_8
   \   0000AD   12....       LCALL   ??Subroutine127_0 & 0xFFFF
   1980            inMsg.macSrcAddr = pData->macSrcAddr;
   \                     ??CrossCallReturnLabel_261:
   \   0000B0   EA           MOV     A,R2
   \   0000B1   2424         ADD     A,#0x24
   \   0000B3   F582         MOV     DPL,A
   \   0000B5   E4           CLR     A
   \   0000B6   3B           ADDC    A,R3
   \   0000B7   F583         MOV     DPH,A
   \   0000B9   12....       LCALL   ??Subroutine133_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_299:
   \   0000BC   7415         MOV     A,#0x15
   \   0000BE   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C1   12....       LCALL   ??Subroutine127_0 & 0xFFFF
   1981          
   1982            handled = ZDO_SendMsgCBs( &inMsg );
   \                     ??CrossCallReturnLabel_262:
   \   0000C4                ; Setup parameters for call to function ZDO_SendMsgCBs
   \   0000C4   AA..         MOV     R2,?XSP + 0
   \   0000C6   AB..         MOV     R3,?XSP + 1
   \   0000C8   12....       LCALL   `??ZDO_SendMsgCBs::?relay`; Banked call to: ZDO_SendMsgCBs
   \   0000CB   E9           MOV     A,R1
   \   0000CC   FA           MOV     R2,A
   \   0000CD   8002         SJMP    ??ZDP_IncomingData_0
   1983          
   1984          #if (defined MT_ZDO_CB_FUNC)
   1985          #if !defined MT_TASK
   1986            if (zgZdoDirectCB)
   1987          #endif
   1988            {
   1989              MT_ZdoDirectCB( pData, &inMsg );
   1990            }
   1991          #endif
   1992          
   1993            while ( zdpMsgProcs[x].clusterID != 0xFFFF )
   1994            {
   1995              if ( zdpMsgProcs[x].clusterID == inMsg.clusterID )
   1996              {
   1997                zdpMsgProcs[x].pFn( &inMsg );
   1998                return;
   1999              }
   2000              x++;
   \                     ??ZDP_IncomingData_1:
   \   0000CF   05..         INC     ?V0
   \                     ??ZDP_IncomingData_0:
   \   0000D1   85....       MOV     ?V2,?V0
   \   0000D4   75..00       MOV     ?V3,#0x0
   \   0000D7   7402         MOV     A,#0x2
   \   0000D9   78..         MOV     R0,#?V2
   \   0000DB   12....       LCALL   ?S_SHL
   \   0000DE   74..         MOV     A,#zdpMsgProcs & 0xff
   \   0000E0   25..         ADD     A,?V2
   \   0000E2   F582         MOV     DPL,A
   \   0000E4   74..         MOV     A,#(zdpMsgProcs >> 8) & 0xff
   \   0000E6   35..         ADDC    A,?V3
   \   0000E8   F583         MOV     DPH,A
   \   0000EA   E4           CLR     A
   \   0000EB   93           MOVC    A,@A+DPTR
   \   0000EC   F8           MOV     R0,A
   \   0000ED   7401         MOV     A,#0x1
   \   0000EF   93           MOVC    A,@A+DPTR
   \   0000F0   F9           MOV     R1,A
   \   0000F1   74FF         MOV     A,#-0x1
   \   0000F3   68           XRL     A,R0
   \   0000F4   7003         JNZ     ??ZDP_IncomingData_2
   \   0000F6   74FF         MOV     A,#-0x1
   \   0000F8   69           XRL     A,R1
   \                     ??ZDP_IncomingData_2:
   \   0000F9   603F         JZ      ??ZDP_IncomingData_3
   \   0000FB   E4           CLR     A
   \   0000FC   93           MOVC    A,@A+DPTR
   \   0000FD   F8           MOV     R0,A
   \   0000FE   7401         MOV     A,#0x1
   \   000100   93           MOVC    A,@A+DPTR
   \   000101   F9           MOV     R1,A
   \   000102   740C         MOV     A,#0xc
   \   000104   12....       LCALL   ?XSTACK_DISP0_8
   \   000107   E0           MOVX    A,@DPTR
   \   000108   68           XRL     A,R0
   \   000109   7003         JNZ     ??ZDP_IncomingData_4
   \   00010B   A3           INC     DPTR
   \   00010C   E0           MOVX    A,@DPTR
   \   00010D   69           XRL     A,R1
   \                     ??ZDP_IncomingData_4:
   \   00010E   70BF         JNZ     ??ZDP_IncomingData_1
   \   000110                ; Setup parameters for indirect call
   \   000110   AA..         MOV     R2,?XSP + 0
   \   000112   AB..         MOV     R3,?XSP + 1
   \   000114   75..00       MOV     ?V1,#0x0
   \   000117   7402         MOV     A,#0x2
   \   000119   78..         MOV     R0,#?V0
   \   00011B   12....       LCALL   ?S_SHL
   \   00011E   74..         MOV     A,#(zdpMsgProcs + 2) & 0xff
   \   000120   25..         ADD     A,?V0
   \   000122   F582         MOV     DPL,A
   \   000124   74..         MOV     A,#((zdpMsgProcs + 2) >> 8) & 0xff
   \   000126   35..         ADDC    A,?V1
   \   000128   F583         MOV     DPH,A
   \   00012A   E4           CLR     A
   \   00012B   93           MOVC    A,@A+DPTR
   \   00012C   C0E0         PUSH    A
   \   00012E   7401         MOV     A,#0x1
   \   000130   93           MOVC    A,@A+DPTR
   \   000131   F583         MOV     DPH,A
   \   000133   D082         POP     DPL
   \   000135   12....       LCALL   ?CALL_IND
   \   000138   800A         SJMP    ??ZDP_IncomingData_5
   2001            }
   2002          
   2003            // Handle unhandled messages
   2004            if ( !handled )
   \                     ??ZDP_IncomingData_3:
   \   00013A   EA           MOV     A,R2
   \   00013B   7007         JNZ     ??ZDP_IncomingData_5
   2005              ZDApp_InMsgCB( &inMsg );
   \   00013D                ; Setup parameters for call to function ZDApp_InMsgCB
   \   00013D   AA..         MOV     R2,?XSP + 0
   \   00013F   AB..         MOV     R3,?XSP + 1
   \   000141   12....       LCALL   `??ZDApp_InMsgCB::?relay`; Banked call to: ZDApp_InMsgCB
   2006          }
   \                     ??ZDP_IncomingData_5:
   \   000144   7417         MOV     A,#0x17
   \   000146   02....       LJMP    ??Subroutine107_0 & 0xFFFF

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for ZDP_TmpBuf>`:
   \   000000   ....         DW ZDP_Buf + 1H

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??fillAndSend::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    fillAndSend

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_SendData::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_SendData

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_NWKAddrOfInterestReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_NWKAddrOfInterestReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_NwkAddrReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_NwkAddrReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_IEEEAddrReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_IEEEAddrReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_MatchDescReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MatchDescReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_SimpleDescReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_SimpleDescReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_UserDescSet::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_UserDescSet

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_ServerDiscReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_ServerDiscReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_DeviceAnnce::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_DeviceAnnce

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_EndDeviceTimeoutReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_EndDeviceTimeoutReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zdpProcessAddrReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zdpProcessAddrReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_NodeDescMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_NodeDescMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_PowerDescMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_PowerDescMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_SimpleDescMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_SimpleDescMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_EPRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_EPRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_UserDescRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_UserDescRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_ServerDiscRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_ServerDiscRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_GenericRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_GenericRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_EndDeviceBindReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_EndDeviceBindReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_BindUnbindReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_BindUnbindReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_MgmtNwkDiscReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtNwkDiscReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_MgmtDirectJoinReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtDirectJoinReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_MgmtPermitJoinReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtPermitJoinReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_MgmtLeaveReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtLeaveReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_MgmtNwkUpdateReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtNwkUpdateReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_MgmtNwkDiscRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtNwkDiscRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_MgmtLqiRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtLqiRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_MgmtRtgRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtRtgRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_MgmtBindRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtBindRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_MgmtNwkUpdateNotify::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtNwkUpdateNotify

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_RegisterForZDOMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_RegisterForZDOMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_RemoveRegisteredCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_RemoveRegisteredCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_SendMsgCBs::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_SendMsgCBs

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_IncomingData::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_IncomingData
   2007          
   2008          /*********************************************************************
   2009          *********************************************************************/
   2010          

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      1     14   ZDO_RegisterForZDOMsg
        0     14   -> osal_mem_alloc
      0      9   ZDO_RemoveRegisteredCB
        0      9   -> osal_mem_free
      0     54   ZDO_SendMsgCBs
        0     19   -> osal_memcpy
        0     16   -> osal_msg_allocate
        0     16   -> osal_msg_send
      1     26   ZDP_BindUnbindReq
        0     18   -> fillAndSend
        0     16   -> sAddrExtCpy
        1     16   -> sAddrExtCpy
      1     22   ZDP_DeviceAnnce
        0     21   -> fillAndSend
        0     19   -> sAddrExtCpy
      1     27   ZDP_EPRsp
        0     19   -> fillAndSend
        0     20   -> osal_memcpy
      1     29   ZDP_EndDeviceBindReq
        0     18   -> NLME_GetExtAddr
        0     18   -> NLME_GetShortAddr
        0     20   -> fillAndSend
        0     18   -> sAddrExtCpy
      1     21   ZDP_EndDeviceTimeoutReq
        0     21   -> fillAndSend
        0     19   -> sAddrExtCpy
      1     16   ZDP_GenericRsp
        0     12   -> fillAndSend
      1     21   ZDP_IEEEAddrReq
        0     21   -> fillAndSend
      1     35   ZDP_IncomingData
        0     35   -> ZDApp_InMsgCB
        0     35   -> ZDO_SendMsgCBs
      1     24   ZDP_MatchDescReq
        0     16   -> fillAndSend
      1     27   ZDP_MgmtBindRsp
        0     22   -> fillAndSend
        0     20   -> osal_mem_alloc
        0     20   -> osal_mem_free
        0     20   -> sAddrExtCpy
      1     15   ZDP_MgmtDirectJoinReq
        0     14   -> fillAndSend
        0     12   -> sAddrExtCpy
      0     16   ZDP_MgmtLeaveReq
        0     14   -> fillAndSend
        0     12   -> sAddrExtCpy
      1     27   ZDP_MgmtLqiRsp
        0     22   -> fillAndSend
        0     20   -> osal_mem_alloc
        0     20   -> osal_mem_free
        0     20   -> sAddrExtCpy
      1     20   ZDP_MgmtNwkDiscReq
        0     14   -> fillAndSend
        0     16   -> osal_buffer_uint32
      1     27   ZDP_MgmtNwkDiscRsp
        0     22   -> fillAndSend
        0     20   -> osal_mem_alloc
        0     20   -> osal_mem_free
        0     20   -> sAddrExtCpy
      1     33   ZDP_MgmtNwkUpdateNotify
        0     19   -> fillAndSend
        0     21   -> osal_buffer_uint32
        0     17   -> osal_mem_alloc
        0     17   -> osal_mem_free
        0     20   -> osal_memcpy
      1     24   ZDP_MgmtNwkUpdateReq
        0     16   -> fillAndSend
        0     18   -> osal_buffer_uint32
      1     12   ZDP_MgmtPermitJoinReq
        0     12   -> fillAndSend
      1     26   ZDP_MgmtRtgRsp
        0     21   -> fillAndSend
        0     19   -> osal_mem_alloc
        0     19   -> osal_mem_free
      1     13   ZDP_NWKAddrOfInterestReq
        0     12   -> fillAndSend
      1     14   ZDP_NodeDescMsg
        0     12   -> fillAndSend
      1     23   ZDP_NwkAddrReq
        0     23   -> fillAndSend
        0     21   -> sAddrExtCmp
        0     21   -> sAddrExtCpy
      1     14   ZDP_PowerDescMsg
        0     12   -> fillAndSend
      1     19   ZDP_SendData
        0     14   -> fillAndSend
      1     21   ZDP_ServerDiscReq
        0     21   -> fillAndSend
      1     17   ZDP_ServerDiscRsp
        0     13   -> fillAndSend
      1     17   ZDP_SimpleDescMsg
        0     17   -> fillAndSend
      1     13   ZDP_SimpleDescReq
        0     12   -> fillAndSend
      1     23   ZDP_UserDescRsp
        0     19   -> fillAndSend
        0     20   -> osal_memcpy
      1     19   ZDP_UserDescSet
        0     16   -> fillAndSend
        0     17   -> osal_memcpy
        0     14   -> osal_memset
      1     57   fillAndSend
        0     34   -> AF_DataRequest
        0     25   -> osal_memset
      1     15   zdpProcessAddrReq
        0     15   -> fillAndSend
        0     13   -> sAddrExtCmp
        0     13   -> sAddrExtCpy


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       2  ?<Initializer for ZDP_TmpBuf>
       9  ??Subroutine106_0
       3  ??Subroutine107_0
       5  ??Subroutine108_0
       8  ??Subroutine109_0
       5  ??Subroutine110_0
       8  ??Subroutine111_0
       5  ??Subroutine112_0
       5  ??Subroutine113_0
       2  ??Subroutine114_0
       5  ??Subroutine115_0
       5  ??Subroutine116_0
       6  ??Subroutine117_0
       7  ??Subroutine118_0
       3  ??Subroutine119_0
       6  ??Subroutine120_0
       4  ??Subroutine121_0
       8  ??Subroutine122_0
       6  ??Subroutine123_0
       3  ??Subroutine124_0
       5  ??Subroutine125_0
       8  ??Subroutine126_0
       6  ??Subroutine127_0
       8  ??Subroutine128_0
       8  ??Subroutine129_0
       5  ??Subroutine130_0
       6  ??Subroutine131_0
       4  ??Subroutine132_0
       4  ??Subroutine133_0
       5  ??Subroutine134_0
       5  ?Subroutine0
      14  ?Subroutine1
      17  ?Subroutine10
       6  ?Subroutine100
      10  ?Subroutine101
       8  ?Subroutine102
       8  ?Subroutine103
       9  ?Subroutine104
       3  ?Subroutine105
      16  ?Subroutine11
       7  ?Subroutine12
       8  ?Subroutine13
       5  ?Subroutine14
       8  ?Subroutine15
      12  ?Subroutine16
       5  ?Subroutine17
      21  ?Subroutine18
       6  ?Subroutine19
      10  ?Subroutine2
       4  ?Subroutine20
      16  ?Subroutine21
       5  ?Subroutine22
       6  ?Subroutine23
       7  ?Subroutine24
       7  ?Subroutine25
      13  ?Subroutine26
       4  ?Subroutine27
      11  ?Subroutine28
      10  ?Subroutine29
      16  ?Subroutine3
       4  ?Subroutine30
      12  ?Subroutine31
       9  ?Subroutine32
       9  ?Subroutine33
       1  ?Subroutine34
       9  ?Subroutine35
      12  ?Subroutine36
       9  ?Subroutine37
      13  ?Subroutine38
       6  ?Subroutine39
       2  ?Subroutine4
       9  ?Subroutine40
       3  ?Subroutine41
       4  ?Subroutine42
      13  ?Subroutine43
       5  ?Subroutine44
       3  ?Subroutine45
      13  ?Subroutine46
       2  ?Subroutine47
       5  ?Subroutine48
      10  ?Subroutine49
       5  ?Subroutine5
       1  ?Subroutine50
       4  ?Subroutine51
       4  ?Subroutine52
       3  ?Subroutine53
       8  ?Subroutine54
       6  ?Subroutine55
       6  ?Subroutine56
       5  ?Subroutine57
       5  ?Subroutine58
       4  ?Subroutine59
      17  ?Subroutine6
       4  ?Subroutine60
       4  ?Subroutine61
       5  ?Subroutine62
      12  ?Subroutine63
       7  ?Subroutine64
       4  ?Subroutine65
       5  ?Subroutine66
      10  ?Subroutine67
       4  ?Subroutine68
      10  ?Subroutine69
       5  ?Subroutine7
       8  ?Subroutine70
       9  ?Subroutine71
       3  ?Subroutine72
       9  ?Subroutine73
       9  ?Subroutine74
      13  ?Subroutine75
      11  ?Subroutine76
       1  ?Subroutine77
       6  ?Subroutine78
       5  ?Subroutine79
      29  ?Subroutine8
       5  ?Subroutine80
       6  ?Subroutine81
       6  ?Subroutine82
       7  ?Subroutine83
       1  ?Subroutine84
       4  ?Subroutine85
       5  ?Subroutine86
      16  ?Subroutine87
      11  ?Subroutine88
       6  ?Subroutine89
      47  ?Subroutine9
       7  ?Subroutine90
       6  ?Subroutine91
       4  ?Subroutine92
       6  ?Subroutine93
       9  ?Subroutine94
       9  ?Subroutine95
       6  ?Subroutine96
      10  ?Subroutine97
      10  ?Subroutine98
      12  ?Subroutine99
     138  ZDO_RegisterForZDOMsg
       6  ZDO_RegisterForZDOMsg::?relay
     109  ZDO_RemoveRegisteredCB
       6  ZDO_RemoveRegisteredCB::?relay
     240  ZDO_SendMsgCBs
       6  ZDO_SendMsgCBs::?relay
       1  ZDP_AF_ENDPOINT
     240  ZDP_BindUnbindReq
       6  ZDP_BindUnbindReq::?relay
      80  ZDP_Buf
      73  ZDP_DeviceAnnce
       6  ZDP_DeviceAnnce::?relay
     161  ZDP_EPRsp
       6  ZDP_EPRsp::?relay
     299  ZDP_EndDeviceBindReq
       6  ZDP_EndDeviceBindReq::?relay
      54  ZDP_EndDeviceTimeoutReq
       6  ZDP_EndDeviceTimeoutReq::?relay
      87  ZDP_GenericRsp
       6  ZDP_GenericRsp::?relay
      58  ZDP_IEEEAddrReq
       6  ZDP_IEEEAddrReq::?relay
     329  ZDP_IncomingData
       6  ZDP_IncomingData::?relay
     250  ZDP_MatchDescReq
       6  ZDP_MatchDescReq::?relay
     317  ZDP_MgmtBindRsp
       6  ZDP_MgmtBindRsp::?relay
      23  ZDP_MgmtDirectJoinReq
       6  ZDP_MgmtDirectJoinReq::?relay
      50  ZDP_MgmtLeaveReq
       6  ZDP_MgmtLeaveReq::?relay
     389  ZDP_MgmtLqiRsp
       6  ZDP_MgmtLqiRsp::?relay
      61  ZDP_MgmtNwkDiscReq
       6  ZDP_MgmtNwkDiscReq::?relay
     317  ZDP_MgmtNwkDiscRsp
       6  ZDP_MgmtNwkDiscRsp::?relay
     219  ZDP_MgmtNwkUpdateNotify
       6  ZDP_MgmtNwkUpdateNotify::?relay
     114  ZDP_MgmtNwkUpdateReq
       6  ZDP_MgmtNwkUpdateReq::?relay
      20  ZDP_MgmtPermitJoinReq
       6  ZDP_MgmtPermitJoinReq::?relay
     290  ZDP_MgmtRtgRsp
       6  ZDP_MgmtRtgRsp::?relay
      16  ZDP_NWKAddrOfInterestReq
       6  ZDP_NWKAddrOfInterestReq::?relay
     192  ZDP_NodeDescMsg
       6  ZDP_NodeDescMsg::?relay
     126  ZDP_NwkAddrReq
       6  ZDP_NwkAddrReq::?relay
      77  ZDP_PowerDescMsg
       6  ZDP_PowerDescMsg::?relay
     114  ZDP_SendData
       6  ZDP_SendData::?relay
      81  ZDP_ServerDiscReq
       6  ZDP_ServerDiscReq::?relay
     101  ZDP_ServerDiscRsp
       6  ZDP_ServerDiscRsp::?relay
     349  ZDP_SimpleDescMsg
       6  ZDP_SimpleDescMsg::?relay
      27  ZDP_SimpleDescReq
       6  ZDP_SimpleDescReq::?relay
       2  ZDP_TmpBuf
       1  ZDP_TransID
       1  ZDP_TxOptions
     149  ZDP_UserDescRsp
       6  ZDP_UserDescRsp::?relay
     114  ZDP_UserDescSet
       6  ZDP_UserDescSet::?relay
     157  fillAndSend
       6  fillAndSend::?relay
       2  zdoMsgCBs
      28  zdpMsgProcs
     299  zdpProcessAddrReq
       6  zdpProcessAddrReq::?relay

 
 6 666 bytes in segment BANKED_CODE
   210 bytes in segment BANK_RELAYS
    29 bytes in segment CODE_C
     2 bytes in segment XDATA_I
     2 bytes in segment XDATA_ID
    84 bytes in segment XDATA_Z
 
 6 907 bytes of CODE  memory
    86 bytes of XDATA memory

Errors: none
Warnings: none
