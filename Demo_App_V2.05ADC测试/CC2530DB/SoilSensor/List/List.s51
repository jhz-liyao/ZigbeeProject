///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V9.30.1.3056 for 8051               24/Nov/2016  11:19:04
// Copyright 2004-2015 IAR Systems AB.
// Standalone license - IAR Embedded Workbench for 8051
//
//    Core               =  plain
//    Code model         =  banked
//    Data model         =  large
//    Calling convention =  xdata reentrant
//    Constant location  =  data_rom
//    Dptr setup         =  1,16
//                          
//    Source file        =  
//        E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\Frame\List.c
//    Command line       =  
//        -f "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"
//        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
//        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f
//        "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
//        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
//        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
//        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
//        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
//        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
//        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
//        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
//        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
//        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
//        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
//        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
//        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
//        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
//        -DPOLL_RATE=50 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
//        -DREJOIN_POLL_RATE=440 "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\Frame\List.c" -D
//        HAL_UART=TRUE -D HAL_UART_ISR=1 -D HAL_UART_DMA=2 -D HOLD_AUTO_START
//        -D LOG_OUT -D UART1_PROTOCOL_RESOLVER=1 -D xISQC -D NWK_AUTO_POLL -D
//        xZTOOL_P1 -D ISR_KEYINTERRUPT -D xMT_TASK -D xMT_SYS_FUNC -D
//        xMT_ZDO_FUNC -D xLCD_SUPPORTED=DEBUG -D xPOWER_SAVING -lC
//        "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\SoilSensor\List"
//        -lA "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\SoilSensor\List"
//        --diag_suppress Pe001,Pa010 -o
//        "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\SoilSensor\Obj"
//        -e --no_code_motion --debug --core=plain --dptr=16,1
//        --data_model=large --code_model=banked
//        --calling_convention=xdata_reentrant --place_constants=data_rom
//        --nr_virtual_regs 8 -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\" -I
//        "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\Source\"
//        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\Frame\"
//        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\Module\SoilSensor\"
//        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\ZMain\TI2530DB\"
//        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\..\..\Components\hal\include\"
//        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
//        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\..\..\Components\mac\include\"
//        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
//        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
//        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
//        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\..\..\Components\mt\"
//        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\..\..\Components\osal\include\"
//        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\..\..\Components\services\saddr\"
//        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\..\..\Components\services\sdata\"
//        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\..\..\Components\stack\af\"
//        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
//        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
//        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\..\..\Components\stack\sec\"
//        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\..\..\Components\stack\sys\"
//        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
//        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\..\..\Components\zmac\"
//        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
//        -Ohz
//    List file          =  
//        E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\SoilSensor\List\List.s51
//
///////////////////////////////////////////////////////////////////////////////

        NAME List

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?V0
        EXTERN ?V1
        EXTERN ?V2
        EXTERN ?V3
        EXTERN ?V4
        EXTERN ?V5
        EXTERN ?V6
        EXTERN ?V7
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?CALL_IND
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?XSTACK_DISP0_8

        PUBLIC `??List_Add::?relay`
        FUNCTION `??List_Add::?relay`,0203H
        PUBLIC `??List_Add_Tail::?relay`
        FUNCTION `??List_Add_Tail::?relay`,0203H
        PUBLIC `??List_Free::?relay`
        FUNCTION `??List_Free::?relay`,0203H
        PUBLIC `??List_Init::?relay`
        FUNCTION `??List_Init::?relay`,0203H
        PUBLIC `??List_Remove::?relay`
        FUNCTION `??List_Remove::?relay`,0203H
        PUBLIC List_Add
        FUNCTION List_Add,0a1203H
        ARGFRAME XSTACK, 2, STACK
        LOCFRAME XSTACK, 18, STACK
        PUBLIC List_Add_Tail
        FUNCTION List_Add_Tail,0a1203H
        ARGFRAME XSTACK, 2, STACK
        LOCFRAME XSTACK, 18, STACK
        PUBLIC List_Free
        FUNCTION List_Free,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC List_Init
        FUNCTION List_Init,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC List_Remove
        FUNCTION List_Remove,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource SP:8, PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B SameValue
          CFI A SameValue
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT SameValue
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon1
        
memcpy              SYMBOL "memcpy"
`??memcpy::?relay`  SYMBOL "?relay", memcpy
memset              SYMBOL "memset"
`??memset::?relay`  SYMBOL "?relay", memset
osal_mem_alloc      SYMBOL "osal_mem_alloc"
`??osal_mem_alloc::?relay` SYMBOL "?relay", osal_mem_alloc
osal_mem_free       SYMBOL "osal_mem_free"
`??osal_mem_free::?relay` SYMBOL "?relay", osal_mem_free
List_Add            SYMBOL "List_Add"
`??List_Add::?relay` SYMBOL "?relay", List_Add
List_Add_Tail       SYMBOL "List_Add_Tail"
`??List_Add_Tail::?relay` SYMBOL "?relay", List_Add_Tail
List_Free           SYMBOL "List_Free"
`??List_Free::?relay` SYMBOL "?relay", List_Free
List_Init           SYMBOL "List_Init"
`??List_Init::?relay` SYMBOL "?relay", List_Init
List_Remove         SYMBOL "List_Remove"
`??List_Remove::?relay` SYMBOL "?relay", List_Remove

        EXTERN `??memcpy::?relay`
        FUNCTION `??memcpy::?relay`,00H
        EXTERN `??memset::?relay`
        FUNCTION `??memset::?relay`,00H
        EXTERN `??osal_mem_alloc::?relay`
        FUNCTION `??osal_mem_alloc::?relay`,00H
        EXTERN `??osal_mem_free::?relay`
        FUNCTION `??osal_mem_free::?relay`,00H
        EXTERN Log
        EXTERN memcpy
        FUNCTION memcpy,010202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN memset
        FUNCTION memset,010202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_alloc
        FUNCTION osal_mem_alloc,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_free
        FUNCTION osal_mem_free,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC

// E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh 1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\Frame\List.c
//    1 #include "List.h" 
//    2 #include <string.h>
//    3 #include "LOG.h" 
//    4 
//    5 /*√ø∏ˆΩ⁄µ„12◊÷Ω⁄ø™œ˙*/
//    6 /****************************************************
//    7 	∫Ø ˝√˚:List_Init
//    8 	π¶ƒ‹:	ªÒ»°“ª∏ˆ¡¥±ÌÕ∑
//    9 	◊˜’ﬂ:	liyao 2016ƒÍ10‘¬26»’11:47:26
//   10 ****************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   11 List_Head_T* List_Init(uint16_t Size){
List_Init:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function List_Init
        CODE
        FUNCALL List_Init, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL List_Init, memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     ?V0,R2
        MOV     ?V1,R3
//   12 	List_Head_T* ListHead = MALLOC(sizeof(List_Head_T));
        ; Setup parameters for call to function osal_mem_alloc
        MOV     R2,#0x8
        MOV     R3,#0x0
        LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV     ?V2,R2
        MOV     ?V3,R3
        MOV     R6,?V2
        MOV     R7,?V3
//   13 	MALLOC_CHECK(ListHead, "List_Init"); 
        MOV     A,R6
        ORL     A,R7
        JNZ     ??List_Init_0
        ; Setup parameters for indirect call
        MOV     R2,#`?<Constant "\\"List_Init\\"\\277\\325\\274\\344\\267\\` & 0xff
        MOV     R3,#(`?<Constant "\\"List_Init\\"\\277\\325\\274\\344\\267\\` >> 8) & 0xff
        LCALL   ??Subroutine13_0 & 0xFFFF
??CrossCallReturnLabel_17:
        LCALL   ?CALL_IND
//   14 	memset(ListHead, 0, sizeof(List_Head_T));
??List_Init_0:
        ; Setup parameters for call to function memset
        MOV     ?V2,#0x8
        MOV     ?V3,#0x0
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??memset::?relay`   ; Banked call to: memset
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
//   15 	ListHead->Size = Size;
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,?V0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V1
        MOVX    @DPTR,A
//   16 	return ListHead;
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
          CFI EndBlock cfiBlock0
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0
//   17 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock1
//   18 
//   19 /****************************************************
//   20 	∫Ø ˝√˚:List_Add
//   21 	π¶ƒ‹:	œÚ¡¥±ÌÕ∑≤øÃÌº”“ª∏ˆ‘™Àÿ
//   22 	◊˜’ﬂ:	liyao 2016ƒÍ10‘¬26»’
//   23 ****************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
          CFI Block cfiCond2 Using cfiCommon0
          CFI Function List_Add
          CFI Conditional ??CrossCallReturnLabel_22
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond3 Using cfiCommon0
          CFI (cfiCond3) Function List_Add_Tail
          CFI (cfiCond3) Conditional ??CrossCallReturnLabel_23
          CFI (cfiCond3) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond3) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond3) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond3) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond3) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond3) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond3) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond3) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond3) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond3) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond3) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond3) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond3) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond3) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond3) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond3) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond3) CFA_SP SP+-2
          CFI (cfiCond3) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker4 Using cfiCommon1
          CFI (cfiPicker4) NoFunction
          CFI (cfiPicker4) Picker
        MOV     R2,#`?<Constant "\\301\\264\\261\\355\\302\\372\\r\\n">` & 0xff
        MOV     R3,#(`?<Constant "\\301\\264\\261\\355\\302\\372\\r\\n">` >> 8) & 0xff
          CFI EndBlock cfiCond2
          CFI EndBlock cfiCond3
          CFI EndBlock cfiPicker4
        REQUIRE ??Subroutine13_0
        ; // Fall through to label ??Subroutine13_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine13_0:
          CFI Block cfiCond5 Using cfiCommon0
          CFI Function List_Init
          CFI Conditional ??CrossCallReturnLabel_17
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond6 Using cfiCommon0
          CFI (cfiCond6) Function List_Add
          CFI (cfiCond6) Conditional ??CrossCallReturnLabel_18
          CFI (cfiCond6) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond6) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond6) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond6) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond6) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond6) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond6) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond6) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond6) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond6) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond6) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond6) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond6) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond6) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond6) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond6) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond6) CFA_SP SP+-2
          CFI (cfiCond6) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond7 Using cfiCommon0
          CFI (cfiCond7) Function List_Add
          CFI (cfiCond7) Conditional ??CrossCallReturnLabel_19
          CFI (cfiCond7) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond7) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond7) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond7) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond7) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond7) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond7) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond7) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond7) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond7) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond7) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond7) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond7) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond7) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond7) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond7) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond7) CFA_SP SP+-2
          CFI (cfiCond7) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond8 Using cfiCommon0
          CFI (cfiCond8) Function List_Add_Tail
          CFI (cfiCond8) Conditional ??CrossCallReturnLabel_20
          CFI (cfiCond8) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond8) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond8) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond8) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond8) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond8) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond8) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond8) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond8) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond8) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond8) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond8) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond8) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond8) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond8) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond8) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond8) CFA_SP SP+-2
          CFI (cfiCond8) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond9 Using cfiCommon0
          CFI (cfiCond9) Function List_Add_Tail
          CFI (cfiCond9) Conditional ??CrossCallReturnLabel_21
          CFI (cfiCond9) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond9) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond9) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond9) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond9) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond9) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond9) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond9) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond9) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond9) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond9) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond9) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond9) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond9) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond9) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond9) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond9) CFA_SP SP+-2
          CFI (cfiCond9) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond10 Using cfiCommon0
          CFI (cfiCond10) Function List_Add
          CFI (cfiCond10) Conditional ??CrossCallReturnLabel_22
          CFI (cfiCond10) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond10) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond10) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond10) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond10) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond10) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond10) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond10) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond10) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond10) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond10) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond10) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond10) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond10) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond10) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond10) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond10) CFA_SP SP+-2
          CFI (cfiCond10) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond11 Using cfiCommon0
          CFI (cfiCond11) Function List_Add_Tail
          CFI (cfiCond11) Conditional ??CrossCallReturnLabel_23
          CFI (cfiCond11) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond11) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond11) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond11) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond11) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond11) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond11) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond11) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond11) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond11) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond11) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond11) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond11) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond11) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond11) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond11) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond11) CFA_SP SP+-2
          CFI (cfiCond11) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker12 Using cfiCommon1
          CFI (cfiPicker12) NoFunction
          CFI (cfiPicker12) Picker
        MOV     DPTR,#Log + 4
          CFI EndBlock cfiCond5
          CFI EndBlock cfiCond6
          CFI EndBlock cfiCond7
          CFI EndBlock cfiCond8
          CFI EndBlock cfiCond9
          CFI EndBlock cfiCond10
          CFI EndBlock cfiCond11
          CFI EndBlock cfiPicker12
        REQUIRE ??Subroutine14_0
        ; // Fall through to label ??Subroutine14_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine14_0:
          CFI Block cfiCond13 Using cfiCommon0
          CFI Function List_Add_Tail
          CFI Conditional ??CrossCallReturnLabel_15
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond14 Using cfiCommon0
          CFI (cfiCond14) Function List_Remove
          CFI (cfiCond14) Conditional ??CrossCallReturnLabel_16
          CFI (cfiCond14) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond14) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond14) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond14) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond14) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond14) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond14) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond14) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond14) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond14) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond14) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond14) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond14) CFA_SP SP+-2
          CFI (cfiCond14) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond15 Using cfiCommon0
          CFI (cfiCond15) Function List_Init
          CFI (cfiCond15) Conditional ??CrossCallReturnLabel_17
          CFI (cfiCond15) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond15) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond15) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond15) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond15) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond15) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond15) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond15) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond15) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond15) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond15) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond15) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond15) CFA_SP SP+-2
          CFI (cfiCond15) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond16 Using cfiCommon0
          CFI (cfiCond16) Function List_Add
          CFI (cfiCond16) Conditional ??CrossCallReturnLabel_18
          CFI (cfiCond16) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond16) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond16) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond16) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond16) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond16) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond16) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond16) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond16) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond16) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond16) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond16) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond16) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond16) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond16) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond16) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond16) CFA_SP SP+-2
          CFI (cfiCond16) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond17 Using cfiCommon0
          CFI (cfiCond17) Function List_Add
          CFI (cfiCond17) Conditional ??CrossCallReturnLabel_19
          CFI (cfiCond17) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond17) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond17) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond17) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond17) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond17) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond17) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond17) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond17) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond17) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond17) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond17) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond17) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond17) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond17) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond17) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond17) CFA_SP SP+-2
          CFI (cfiCond17) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond18 Using cfiCommon0
          CFI (cfiCond18) Function List_Add_Tail
          CFI (cfiCond18) Conditional ??CrossCallReturnLabel_20
          CFI (cfiCond18) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond18) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond18) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond18) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond18) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond18) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond18) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond18) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond18) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond18) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond18) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond18) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond18) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond18) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond18) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond18) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond18) CFA_SP SP+-2
          CFI (cfiCond18) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond19 Using cfiCommon0
          CFI (cfiCond19) Function List_Add_Tail
          CFI (cfiCond19) Conditional ??CrossCallReturnLabel_21
          CFI (cfiCond19) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond19) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond19) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond19) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond19) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond19) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond19) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond19) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond19) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond19) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond19) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond19) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond19) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond19) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond19) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond19) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond19) CFA_SP SP+-2
          CFI (cfiCond19) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond20 Using cfiCommon0
          CFI (cfiCond20) Function List_Add
          CFI (cfiCond20) Conditional ??CrossCallReturnLabel_22
          CFI (cfiCond20) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond20) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond20) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond20) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond20) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond20) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond20) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond20) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond20) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond20) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond20) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond20) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond20) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond20) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond20) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond20) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond20) CFA_SP SP+-2
          CFI (cfiCond20) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond21 Using cfiCommon0
          CFI (cfiCond21) Function List_Add_Tail
          CFI (cfiCond21) Conditional ??CrossCallReturnLabel_23
          CFI (cfiCond21) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond21) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond21) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond21) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond21) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond21) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond21) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond21) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond21) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond21) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond21) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond21) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond21) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond21) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond21) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond21) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond21) CFA_SP SP+-2
          CFI (cfiCond21) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker22 Using cfiCommon1
          CFI (cfiPicker22) NoFunction
          CFI (cfiPicker22) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        RET
          CFI EndBlock cfiCond13
          CFI EndBlock cfiCond14
          CFI EndBlock cfiCond15
          CFI EndBlock cfiCond16
          CFI EndBlock cfiCond17
          CFI EndBlock cfiCond18
          CFI EndBlock cfiCond19
          CFI EndBlock cfiCond20
          CFI EndBlock cfiCond21
          CFI EndBlock cfiPicker22

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   24 int8_t List_Add(List_Head_T* List_Head, void* Data, uint16_t Len){
List_Add:
          CFI Block cfiBlock23 Using cfiCommon0
          CFI Function List_Add
        CODE
        FUNCALL List_Add, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL List_Add, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL List_Add, memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
        MOV     ?V0,R2
        MOV     ?V1,R3
        LCALL   ?Subroutine4 & 0xFFFF
//   25 	List_Node_T* ListNode = NULL;
//   26 	if(List_Head->Size > 0 && List_Head->Count == List_Head->Size){
??CrossCallReturnLabel_24:
        JZ      ??List_Add_0
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_2:
        JNZ     ??List_Add_1
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R1
??List_Add_1:
        JNZ     ??List_Add_0
//   27 		Log.error("¡¥±Ì¬˙\r\n");
        ; Setup parameters for indirect call
        LCALL   ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_22:
        LCALL   ?CALL_IND
//   28 		return -1;
        MOV     R1,#-0x1
        LJMP    ??CrossCallReturnLabel_4 & 0xFFFF
//   29 	}
//   30 	//∑÷≈‰ListNode_T
//   31 	ListNode = MALLOC(sizeof(List_Node_T)); 
??List_Add_0:
        ; Setup parameters for call to function osal_mem_alloc
        MOV     R2,#0x6
        MOV     R3,#0x0
        LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV     ?V2,R2
        MOV     ?V3,R3
//   32 	MALLOC_CHECK(ListNode, "List_Add"); 
        MOV     A,R2
        ORL     A,?V3
        JNZ     ??List_Add_2
        ; Setup parameters for indirect call
        MOV     R2,#`?<Constant "\\"List_Add\\"\\277\\325\\274\\344\\267\\3` & 0xff
        MOV     R3,#(`?<Constant "\\"List_Add\\"\\277\\325\\274\\344\\267\\3` >> 8) & 0xff
        LCALL   ??Subroutine13_0 & 0xFFFF
??CrossCallReturnLabel_18:
        LCALL   ?CALL_IND
??List_Add_2:
        MOV     A,#0x10
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine7 & 0xFFFF
//   33 	ListNode->Data = MALLOC(sizeof(uint8_t) * Len);
??CrossCallReturnLabel_6:
        LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV     ?V4,R2
        MOV     ?V5,R3
        MOV     R0,?V4
        MOV     R1,?V5
        MOV     DPL,?V2
        MOV     DPH,?V3
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//   34 	MALLOC_CHECK(ListNode->Data, "List_Add"); 
        MOV     A,R0
        ORL     A,R1
        JNZ     ??List_Add_3
        ; Setup parameters for indirect call
        MOV     R2,#`?<Constant "\\"List_Add\\"\\277\\325\\274\\344\\267\\3` & 0xff
        MOV     R3,#(`?<Constant "\\"List_Add\\"\\277\\325\\274\\344\\267\\3` >> 8) & 0xff
        LCALL   ??Subroutine13_0 & 0xFFFF
??CrossCallReturnLabel_19:
        LCALL   ?CALL_IND
//   35 	//∏≥÷µListNode_T 
//   36 	ListNode->Next = NULL;
??List_Add_3:
        MOV     DPL,?V2
        MOV     DPH,?V3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//   37 	ListNode->Len	 = Len;
        MOV     DPL,?V2
        MOV     DPH,?V3
        LCALL   ?Subroutine9 & 0xFFFF
//   38 	memcpy(ListNode->Data, Data, Len); 
??CrossCallReturnLabel_11:
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 18)
        MOV     R4,?V6
        MOV     R5,?V7
        MOV     DPL,?V2
        MOV     DPH,?V3
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   `??memcpy::?relay`   ; Banked call to: memcpy
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
//   39 	//º”»Î¡¥±Ì
//   40 	if(List_Head->Head == NULL){// ◊¥Œº”»Î
        MOV     DPL,?V0
        MOV     DPH,?V1
        LCALL   ??Subroutine15_0 & 0xFFFF
??CrossCallReturnLabel_26:
        JNZ     ??List_Add_4
//   41 		List_Head->Head = List_Head->Tail = ListNode;
        MOV     A,?V0
        ADD     A,#0x2
        MOV     R0,A
        CLR     A
        ADDC    A,?V1
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
        MOV     A,?V2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V3
        MOVX    @DPTR,A
        MOV     DPL,R0
        MOV     DPH,R1
        LCALL   ?Subroutine11 & 0xFFFF
//   42 	}else{//“—”– ˝æ›º”»Î 
??CrossCallReturnLabel_28:
        MOV     DPL,?V0
        MOV     DPH,?V1
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        SJMP    ??List_Add_5
//   43 		ListNode->Next = List_Head->Head; 
??List_Add_4:
        MOV     DPL,?V2
        MOV     DPH,?V3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        LCALL   ?Subroutine8 & 0xFFFF
//   44 		List_Head->Head = ListNode;
//   45 	}
??CrossCallReturnLabel_8:
        MOV     A,?V2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V3
??List_Add_5:
        LCALL   ?Subroutine8 & 0xFFFF
//   46 	List_Head->Count++;
??CrossCallReturnLabel_9:
        LCALL   ?Subroutine6 & 0xFFFF
//   47 	return 0;
??CrossCallReturnLabel_4:
          CFI EndBlock cfiBlock23
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1
//   48 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
          CFI Block cfiBlock24 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x8
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock24
//   49 
//   50 /****************************************************
//   51 	∫Ø ˝√˚:List_Add_Tail
//   52 	π¶ƒ‹:	œÚ¡¥±ÌŒ≤≤øÃÌº”“ª∏ˆ‘™Àÿ
//   53 	◊˜’ﬂ:	liyao 2016ƒÍ10‘¬26»’
//   54 ****************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   55 int8_t List_Add_Tail(List_Head_T* List_Head, void* Data, uint16_t Len){
List_Add_Tail:
          CFI Block cfiBlock25 Using cfiCommon0
          CFI Function List_Add_Tail
        CODE
        FUNCALL List_Add_Tail, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL List_Add_Tail, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL List_Add_Tail, memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
        MOV     ?V2,R2
        MOV     ?V3,R3
        LCALL   ?Subroutine4 & 0xFFFF
//   56 List_Node_T* ListNode = NULL;
//   57 	if(List_Head->Size > 0 && List_Head->Count == List_Head->Size){
??CrossCallReturnLabel_25:
        JZ      ??List_Add_Tail_0
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_3:
        JNZ     ??List_Add_Tail_1
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R1
??List_Add_Tail_1:
        JNZ     ??List_Add_Tail_0
//   58 		Log.error("¡¥±Ì¬˙\r\n");
        ; Setup parameters for indirect call
        LCALL   ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_23:
        LCALL   ?CALL_IND
//   59 		return -1;
        MOV     R1,#-0x1
        LJMP    ??CrossCallReturnLabel_5 & 0xFFFF
//   60 	}
//   61 	//∑÷≈‰ListNode_T
//   62 	ListNode = MALLOC(sizeof(List_Node_T)); 
??List_Add_Tail_0:
        ; Setup parameters for call to function osal_mem_alloc
        MOV     R2,#0x6
        MOV     R3,#0x0
        LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV     ?V0,R2
        MOV     ?V1,R3
//   63 	MALLOC_CHECK(ListNode, "List_Add_Tail"); 
        MOV     A,R2
        ORL     A,?V1
        JNZ     ??List_Add_Tail_2
        ; Setup parameters for indirect call
        MOV     R2,#`?<Constant "\\"List_Add_Tail\\"\\277\\325\\274\\344\\` & 0xff
        MOV     R3,#(`?<Constant "\\"List_Add_Tail\\"\\277\\325\\274\\344\\` >> 8) & 0xff
        LCALL   ??Subroutine13_0 & 0xFFFF
??CrossCallReturnLabel_20:
        LCALL   ?CALL_IND
??List_Add_Tail_2:
        MOV     A,#0x10
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine7 & 0xFFFF
//   64 	ListNode->Data = MALLOC(sizeof(uint8_t) * Len);
??CrossCallReturnLabel_7:
        LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV     ?V4,R2
        MOV     ?V5,R3
        MOV     R0,?V4
        MOV     R1,?V5
        MOV     DPL,?V0
        MOV     DPH,?V1
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//   65 	MALLOC_CHECK(ListNode->Data, "List_Add_Tail"); 
        MOV     A,R0
        ORL     A,R1
        JNZ     ??List_Add_Tail_3
        ; Setup parameters for indirect call
        MOV     R2,#`?<Constant "\\"List_Add_Tail\\"\\277\\325\\274\\344\\` & 0xff
        MOV     R3,#(`?<Constant "\\"List_Add_Tail\\"\\277\\325\\274\\344\\` >> 8) & 0xff
        LCALL   ??Subroutine13_0 & 0xFFFF
??CrossCallReturnLabel_21:
        LCALL   ?CALL_IND
//   66 	//∏≥÷µListNode_T 
//   67 	ListNode->Next = NULL;
??List_Add_Tail_3:
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        LCALL   ?Subroutine8 & 0xFFFF
//   68 	ListNode->Len	 = Len;
??CrossCallReturnLabel_10:
        LCALL   ?Subroutine9 & 0xFFFF
//   69 	memcpy(ListNode->Data, Data, Len); 
??CrossCallReturnLabel_12:
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 18)
        MOV     R4,?V6
        MOV     R5,?V7
        MOV     DPL,?V0
        MOV     DPH,?V1
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   `??memcpy::?relay`   ; Banked call to: memcpy
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
//   70 	//º”»Î¡¥±Ì
//   71 	if(List_Head->Head == NULL){// ◊¥Œº”»Î
        MOV     DPL,?V2
        MOV     DPH,?V3
        LCALL   ??Subroutine15_0 & 0xFFFF
??CrossCallReturnLabel_27:
        JNZ     ??List_Add_Tail_4
//   72 		List_Head->Head = List_Head->Tail = ListNode;
        MOV     A,?V2
        ADD     A,#0x2
        MOV     R2,A
        CLR     A
        ADDC    A,?V3
        MOV     R3,A
        MOV     DPL,R2
        MOV     DPH,R3
        LCALL   ?Subroutine10 & 0xFFFF
//   73 	}else{//“—”– ˝æ›º”»Î 
??CrossCallReturnLabel_14:
        LCALL   ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_29:
        MOV     DPL,?V2
        MOV     DPH,?V3
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        SJMP    ??List_Add_Tail_5
//   74 		List_Head->Tail->Next = ListNode;
??List_Add_Tail_4:
        MOV     A,?V2
        ADD     A,#0x2
        MOV     R0,A
        CLR     A
        ADDC    A,?V3
        MOV     R1,A
        MOV     A,R0
        MOV     R2,A
        MOV     A,R1
        MOV     R3,A
        MOV     DPL,R2
        MOV     DPH,R3
        LCALL   ??Subroutine14_0 & 0xFFFF
//   75 		List_Head->Tail = ListNode;
//   76 	}
??CrossCallReturnLabel_15:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_13:
        MOV     A,?V0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V1
??List_Add_Tail_5:
        MOVX    @DPTR,A
//   77 	List_Head->Count++;
        MOV     DPL,?V2
        MOV     DPH,?V3
        LCALL   ?Subroutine6 & 0xFFFF
//   78 	return 0;
??CrossCallReturnLabel_5:
        LJMP    ?Subroutine1 & 0xFFFF
//   79 }
          CFI EndBlock cfiBlock25

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine10:
          CFI Block cfiCond26 Using cfiCommon0
          CFI Function List_Add_Tail
          CFI Conditional ??CrossCallReturnLabel_14
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond27 Using cfiCommon0
          CFI (cfiCond27) Function List_Add_Tail
          CFI (cfiCond27) Conditional ??CrossCallReturnLabel_13
          CFI (cfiCond27) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond27) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond27) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond27) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond27) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond27) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond27) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond27) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond27) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond27) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond27) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond27) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond27) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond27) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond27) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond27) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond27) CFA_SP SP+-2
          CFI (cfiCond27) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker28 Using cfiCommon1
          CFI (cfiPicker28) NoFunction
          CFI (cfiPicker28) Picker
        MOV     A,?V0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V1
        MOVX    @DPTR,A
        MOV     DPL,R2
        MOV     DPH,R3
        RET
          CFI EndBlock cfiCond26
          CFI EndBlock cfiCond27
          CFI EndBlock cfiPicker28

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine9:
          CFI Block cfiCond29 Using cfiCommon0
          CFI Function List_Add
          CFI Conditional ??CrossCallReturnLabel_11
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond30 Using cfiCommon0
          CFI (cfiCond30) Function List_Add_Tail
          CFI (cfiCond30) Conditional ??CrossCallReturnLabel_12
          CFI (cfiCond30) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond30) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond30) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond30) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond30) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond30) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond30) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond30) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond30) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond30) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond30) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond30) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond30) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond30) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond30) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond30) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond30) CFA_SP SP+-2
          CFI (cfiCond30) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker31 Using cfiCommon1
          CFI (cfiPicker31) NoFunction
          CFI (cfiPicker31) Picker
        INC     DPTR
        INC     DPTR
        MOV     A,R6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R7
        MOVX    @DPTR,A
        ; Setup parameters for call to function memcpy
        ; Setup parameters for call to function memcpy
        MOV     ?V4,R6
        MOV     ?V5,R7
        MOV     R0,#?V4
        RET
          CFI EndBlock cfiCond29
          CFI EndBlock cfiCond30
          CFI EndBlock cfiPicker31

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine8:
          CFI Block cfiCond32 Using cfiCommon0
          CFI Function List_Add
          CFI Conditional ??CrossCallReturnLabel_8
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond33 Using cfiCommon0
          CFI (cfiCond33) Function List_Add
          CFI (cfiCond33) Conditional ??CrossCallReturnLabel_9
          CFI (cfiCond33) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond33) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond33) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond33) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond33) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond33) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond33) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond33) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond33) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond33) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond33) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond33) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond33) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond33) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond33) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond33) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond33) CFA_SP SP+-2
          CFI (cfiCond33) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond34 Using cfiCommon0
          CFI (cfiCond34) Function List_Add_Tail
          CFI (cfiCond34) Conditional ??CrossCallReturnLabel_10
          CFI (cfiCond34) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond34) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond34) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond34) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond34) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond34) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond34) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond34) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond34) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond34) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond34) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond34) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond34) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond34) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond34) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond34) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond34) CFA_SP SP+-2
          CFI (cfiCond34) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker35 Using cfiCommon1
          CFI (cfiPicker35) NoFunction
          CFI (cfiPicker35) Picker
        MOVX    @DPTR,A
        MOV     DPL,?V0
        MOV     DPH,?V1
        RET
          CFI EndBlock cfiCond32
          CFI EndBlock cfiCond33
          CFI EndBlock cfiCond34
          CFI EndBlock cfiPicker35

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
          CFI Block cfiCond36 Using cfiCommon0
          CFI Function List_Add
          CFI Conditional ??CrossCallReturnLabel_6
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond37 Using cfiCommon0
          CFI (cfiCond37) Function List_Add_Tail
          CFI (cfiCond37) Conditional ??CrossCallReturnLabel_7
          CFI (cfiCond37) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond37) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond37) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond37) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond37) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond37) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond37) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond37) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond37) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond37) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond37) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond37) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond37) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond37) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond37) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond37) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond37) CFA_SP SP+-2
          CFI (cfiCond37) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker38 Using cfiCommon1
          CFI (cfiPicker38) NoFunction
          CFI (cfiPicker38) Picker
        LCALL   ??Subroutine16_0 & 0xFFFF
??CrossCallReturnLabel_34:
        ; Setup parameters for call to function osal_mem_alloc
        ; Setup parameters for call to function osal_mem_alloc
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        RET
          CFI EndBlock cfiCond36
          CFI EndBlock cfiCond37
          CFI EndBlock cfiPicker38

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
          CFI Block cfiCond39 Using cfiCommon0
          CFI Function List_Add
          CFI Conditional ??CrossCallReturnLabel_4
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond40 Using cfiCommon0
          CFI (cfiCond40) Function List_Add_Tail
          CFI (cfiCond40) Conditional ??CrossCallReturnLabel_5
          CFI (cfiCond40) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond40) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond40) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond40) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond40) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond40) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond40) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond40) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond40) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond40) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond40) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond40) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond40) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond40) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond40) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond40) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond40) CFA_SP SP+-2
          CFI (cfiCond40) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker41 Using cfiCommon1
          CFI (cfiPicker41) NoFunction
          CFI (cfiPicker41) Picker
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        ADD     A,#0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOVX    @DPTR,A
        MOV     R1,#0x0
        RET
          CFI EndBlock cfiCond39
          CFI EndBlock cfiCond40
          CFI EndBlock cfiPicker41

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
          CFI Block cfiCond42 Using cfiCommon0
          CFI Function List_Add
          CFI Conditional ??CrossCallReturnLabel_2
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond43 Using cfiCommon0
          CFI (cfiCond43) Function List_Add_Tail
          CFI (cfiCond43) Conditional ??CrossCallReturnLabel_3
          CFI (cfiCond43) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond43) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond43) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond43) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond43) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond43) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond43) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond43) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond43) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond43) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond43) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond43) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond43) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond43) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond43) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond43) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond43) CFA_SP SP+-2
          CFI (cfiCond43) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker44 Using cfiCommon1
          CFI (cfiPicker44) NoFunction
          CFI (cfiPicker44) Picker
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_30:
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R0
        RET
          CFI EndBlock cfiCond42
          CFI EndBlock cfiCond43
          CFI EndBlock cfiPicker44

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine11:
          CFI Block cfiCond45 Using cfiCommon0
          CFI Function List_Add
          CFI Conditional ??CrossCallReturnLabel_28
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond46 Using cfiCommon0
          CFI (cfiCond46) Function List_Add_Tail
          CFI (cfiCond46) Conditional ??CrossCallReturnLabel_29
          CFI (cfiCond46) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond46) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond46) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond46) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond46) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond46) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond46) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond46) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond46) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond46) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond46) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond46) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond46) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond46) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond46) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond46) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond46) CFA_SP SP+-2
          CFI (cfiCond46) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond47 Using cfiCommon0
          CFI (cfiCond47) Function List_Add
          CFI (cfiCond47) Conditional ??CrossCallReturnLabel_30, ??CrossCallReturnLabel_2
          CFI (cfiCond47) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond47) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond47) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond47) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond47) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond47) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond47) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond47) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond47) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond47) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond47) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond47) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond47) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond47) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond47) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond47) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond47) CFA_SP SP+-4
          CFI (cfiCond47) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond48 Using cfiCommon0
          CFI (cfiCond48) Function List_Add_Tail
          CFI (cfiCond48) Conditional ??CrossCallReturnLabel_30, ??CrossCallReturnLabel_3
          CFI (cfiCond48) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond48) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond48) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond48) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond48) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond48) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond48) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond48) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond48) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond48) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond48) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond48) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond48) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond48) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond48) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond48) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond48) CFA_SP SP+-4
          CFI (cfiCond48) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond49 Using cfiCommon0
          CFI (cfiCond49) Function List_Add
          CFI (cfiCond49) Conditional ??CrossCallReturnLabel_31, ??CrossCallReturnLabel_24
          CFI (cfiCond49) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond49) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond49) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond49) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond49) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond49) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond49) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond49) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond49) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond49) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond49) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond49) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond49) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond49) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond49) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond49) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond49) CFA_SP SP+-4
          CFI (cfiCond49) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond50 Using cfiCommon0
          CFI (cfiCond50) Function List_Add_Tail
          CFI (cfiCond50) Conditional ??CrossCallReturnLabel_31, ??CrossCallReturnLabel_25
          CFI (cfiCond50) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond50) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond50) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond50) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond50) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond50) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond50) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond50) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond50) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond50) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond50) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond50) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond50) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond50) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond50) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond50) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond50) CFA_SP SP+-4
          CFI (cfiCond50) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond51 Using cfiCommon0
          CFI (cfiCond51) Function List_Add
          CFI (cfiCond51) Conditional ??CrossCallReturnLabel_31, ??CrossCallReturnLabel_26
          CFI (cfiCond51) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond51) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond51) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond51) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond51) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond51) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond51) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond51) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond51) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond51) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond51) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond51) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond51) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond51) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond51) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond51) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond51) CFA_SP SP+-4
          CFI (cfiCond51) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond52 Using cfiCommon0
          CFI (cfiCond52) Function List_Add_Tail
          CFI (cfiCond52) Conditional ??CrossCallReturnLabel_31, ??CrossCallReturnLabel_27
          CFI (cfiCond52) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond52) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond52) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond52) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond52) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond52) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond52) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond52) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond52) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond52) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond52) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond52) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond52) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond52) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond52) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond52) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond52) CFA_SP SP+-4
          CFI (cfiCond52) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker53 Using cfiCommon1
          CFI (cfiPicker53) NoFunction
          CFI (cfiPicker53) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        RET
          CFI EndBlock cfiCond45
          CFI EndBlock cfiCond46
          CFI EndBlock cfiCond47
          CFI EndBlock cfiCond48
          CFI EndBlock cfiCond49
          CFI EndBlock cfiCond50
          CFI EndBlock cfiCond51
          CFI EndBlock cfiCond52
          CFI EndBlock cfiPicker53

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
          CFI Block cfiCond54 Using cfiCommon0
          CFI Function List_Add
          CFI Conditional ??CrossCallReturnLabel_24
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond55 Using cfiCommon0
          CFI (cfiCond55) Function List_Add_Tail
          CFI (cfiCond55) Conditional ??CrossCallReturnLabel_25
          CFI (cfiCond55) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond55) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond55) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond55) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond55) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond55) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond55) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond55) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond55) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond55) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond55) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond55) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond55) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond55) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond55) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond55) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond55) CFA_SP SP+-2
          CFI (cfiCond55) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker56 Using cfiCommon1
          CFI (cfiPicker56) NoFunction
          CFI (cfiPicker56) Picker
        MOV     ?V6,R4
        MOV     ?V7,R5
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
          CFI EndBlock cfiCond54
          CFI EndBlock cfiCond55
          CFI EndBlock cfiPicker56
        REQUIRE ??Subroutine15_0
        ; // Fall through to label ??Subroutine15_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine15_0:
          CFI Block cfiCond57 Using cfiCommon0
          CFI Function List_Add
          CFI Conditional ??CrossCallReturnLabel_26
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond58 Using cfiCommon0
          CFI (cfiCond58) Function List_Add_Tail
          CFI (cfiCond58) Conditional ??CrossCallReturnLabel_27
          CFI (cfiCond58) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond58) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond58) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond58) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond58) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond58) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond58) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond58) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond58) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond58) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond58) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond58) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond58) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond58) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond58) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond58) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond58) CFA_SP SP+-2
          CFI (cfiCond58) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond59 Using cfiCommon0
          CFI (cfiCond59) Function List_Add
          CFI (cfiCond59) Conditional ??CrossCallReturnLabel_24
          CFI (cfiCond59) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond59) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond59) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond59) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond59) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond59) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond59) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond59) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond59) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond59) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond59) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond59) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond59) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond59) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond59) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond59) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond59) CFA_SP SP+-2
          CFI (cfiCond59) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond60 Using cfiCommon0
          CFI (cfiCond60) Function List_Add_Tail
          CFI (cfiCond60) Conditional ??CrossCallReturnLabel_25
          CFI (cfiCond60) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond60) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond60) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond60) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond60) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond60) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond60) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond60) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond60) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond60) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond60) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond60) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond60) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond60) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond60) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond60) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond60) CFA_SP SP+-2
          CFI (cfiCond60) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker61 Using cfiCommon1
          CFI (cfiPicker61) NoFunction
          CFI (cfiPicker61) Picker
        LCALL   ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_31:
        MOV     A,R0
        ORL     A,R1
        RET
          CFI EndBlock cfiCond57
          CFI EndBlock cfiCond58
          CFI EndBlock cfiCond59
          CFI EndBlock cfiCond60
          CFI EndBlock cfiPicker61
//   80 
//   81 /****************************************************
//   82 	∫Ø ˝√˚:List_Remove
//   83 	π¶ƒ‹: “∆≥˝¡¥±ÌΩ⁄µ„
//   84 	◊˜’ﬂ:	liyao 2016ƒÍ10‘¬26»’
//   85 ****************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   86 int8_t List_Remove(List_Head_T* List_Head, List_Node_T* List_Node){
List_Remove:
          CFI Block cfiBlock62 Using cfiCommon0
          CFI Function List_Remove
        CODE
        FUNCALL List_Remove, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL List_Remove, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        LCALL   ?Subroutine12 & 0xFFFF
//   87 	List_Node_T* cur = List_Head->Head;
//   88 	List_Node_T* last = NULL;
??CrossCallReturnLabel_32:
        MOV     ?V0,#0x0
        MOV     ?V1,#0x0
//   89 	List_Node_T* next = NULL;
        SJMP    ??CrossCallReturnLabel_33
//   90 	while(cur != NULL){
//   91 		if(cur == List_Node){
//   92 			next = List_Node->Next;
//   93 			FREE(cur->Data);
//   94 			FREE(cur); 
//   95 			if(last != NULL)
//   96 				last->Next = next;
//   97 			return 0;
//   98 			
//   99 		}
//  100 		last = cur;
??List_Remove_0:
        MOV     ?V0,R6
        MOV     ?V1,R7
//  101 		cur = cur->Next;
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ??Subroutine16_0 & 0xFFFF
??CrossCallReturnLabel_33:
        MOV     A,R6
        ORL     A,R7
        JZ      ??List_Remove_1
        MOV     A,R4
        XRL     A,R6
        JNZ     ??List_Remove_2
        MOV     A,R5
        XRL     A,R7
??List_Remove_2:
        JNZ     ??List_Remove_0
        MOV     DPL,R4
        MOV     DPH,R5
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_0:
        LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
        ; Setup parameters for call to function osal_mem_free
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
        MOV     A,?V0
        ORL     A,?V1
        JZ      ??List_Remove_3
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,?V2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V3
        MOVX    @DPTR,A
??List_Remove_3:
        MOV     R1,#0x0
        SJMP    ??List_Remove_4
//  102 	}
//  103 	Log.waring("List_RemoveŒ¥’“µΩΩ⁄µ„\r\n");
??List_Remove_1:
        ; Setup parameters for indirect call
        MOV     R2,#`?<Constant "List_Remove\\316\\264\\325\\322\\265\\27` & 0xff
        MOV     R3,#(`?<Constant "List_Remove\\316\\264\\325\\322\\265\\27` >> 8) & 0xff
        MOV     DPTR,#Log + 2
        LCALL   ??Subroutine14_0 & 0xFFFF
??CrossCallReturnLabel_16:
        LCALL   ?CALL_IND
//  104 	return -1;
        MOV     R1,#-0x1
??List_Remove_4:
        LJMP    ?Subroutine0 & 0xFFFF
//  105 }
          CFI EndBlock cfiBlock62

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine12:
          CFI Block cfiCond63 Using cfiCommon0
          CFI Function List_Remove
          CFI Conditional ??CrossCallReturnLabel_32
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond64 Using cfiCommon0
          CFI (cfiCond64) Function List_Free
          CFI (cfiCond64) Conditional ??CrossCallReturnLabel_35
          CFI (cfiCond64) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond64) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond64) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond64) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond64) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond64) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond64) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond64) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond64) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond64) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond64) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond64) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond64) CFA_SP SP+-2
          CFI (cfiCond64) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker65 Using cfiCommon1
          CFI (cfiPicker65) NoFunction
          CFI (cfiPicker65) Picker
        MOV     DPL,R2
        MOV     DPH,R3
          CFI EndBlock cfiCond63
          CFI EndBlock cfiCond64
          CFI EndBlock cfiPicker65
        REQUIRE ??Subroutine16_0
        ; // Fall through to label ??Subroutine16_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine16_0:
          CFI Block cfiCond66 Using cfiCommon0
          CFI Function List_Add
          CFI Conditional ??CrossCallReturnLabel_34, ??CrossCallReturnLabel_6
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond67 Using cfiCommon0
          CFI (cfiCond67) Function List_Add_Tail
          CFI (cfiCond67) Conditional ??CrossCallReturnLabel_34, ??CrossCallReturnLabel_7
          CFI (cfiCond67) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond67) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond67) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond67) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond67) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond67) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond67) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond67) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond67) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond67) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond67) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond67) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond67) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond67) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond67) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond67) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond67) CFA_SP SP+-4
          CFI (cfiCond67) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond68 Using cfiCommon0
          CFI (cfiCond68) Function List_Remove
          CFI (cfiCond68) Conditional ??CrossCallReturnLabel_33
          CFI (cfiCond68) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond68) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond68) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond68) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond68) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond68) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond68) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond68) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond68) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond68) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond68) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond68) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond68) CFA_SP SP+-2
          CFI (cfiCond68) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond69 Using cfiCommon0
          CFI (cfiCond69) Function List_Remove
          CFI (cfiCond69) Conditional ??CrossCallReturnLabel_32
          CFI (cfiCond69) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond69) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond69) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond69) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond69) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond69) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond69) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond69) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond69) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond69) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond69) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond69) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond69) CFA_SP SP+-2
          CFI (cfiCond69) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond70 Using cfiCommon0
          CFI (cfiCond70) Function List_Free
          CFI (cfiCond70) Conditional ??CrossCallReturnLabel_35
          CFI (cfiCond70) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond70) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond70) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond70) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond70) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond70) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond70) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond70) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond70) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond70) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond70) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond70) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond70) CFA_SP SP+-2
          CFI (cfiCond70) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker71 Using cfiCommon1
          CFI (cfiPicker71) NoFunction
          CFI (cfiPicker71) Picker
        MOVX    A,@DPTR
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
        RET
          CFI EndBlock cfiCond66
          CFI EndBlock cfiCond67
          CFI EndBlock cfiCond68
          CFI EndBlock cfiCond69
          CFI EndBlock cfiCond70
          CFI EndBlock cfiPicker71
//  106 
//  107 /****************************************************
//  108 	∫Ø ˝√˚:List_Free
//  109 	π¶ƒ‹:	 Õ∑≈¡¥±Ì
//  110 	◊˜’ﬂ:	liyao 2016ƒÍ10‘¬26»’
//  111 ****************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  112 int8_t List_Free(List_Head_T* List_Head){
List_Free:
          CFI Block cfiBlock72 Using cfiCommon0
          CFI Function List_Free
        CODE
        FUNCALL List_Free, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL List_Free, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL List_Free, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     ?V0,R2
        MOV     ?V1,R3
//  113 	List_Node_T* cur = List_Head->Head;
        LCALL   ?Subroutine12 & 0xFFFF
//  114 	List_Node_T* next = NULL;
??CrossCallReturnLabel_35:
        SJMP    ??List_Free_0
//  115 	while(cur != NULL){
//  116 		next = cur->Next;
??List_Free_1:
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ?Subroutine3 & 0xFFFF
//  117 		FREE(cur->Data);
??CrossCallReturnLabel_1:
        LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
//  118 		FREE(cur);
        ; Setup parameters for call to function osal_mem_free
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
//  119 		cur = next;
        MOV     R6,?V2
        MOV     R7,?V3
//  120 	}
??List_Free_0:
        MOV     A,R6
        ORL     A,R7
        JNZ     ??List_Free_1
//  121 	if(List_Head != NULL)
        MOV     A,?V0
        ORL     A,?V1
        JZ      ??List_Free_2
//  122 		FREE(List_Head);
        ; Setup parameters for call to function osal_mem_free
        MOV     R2,?V0
        MOV     R3,?V1
        LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
//  123 	return 0;
??List_Free_2:
        MOV     R1,#0x0
        LJMP    ?Subroutine0 & 0xFFFF
//  124 }
          CFI EndBlock cfiBlock72

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
          CFI Block cfiCond73 Using cfiCommon0
          CFI Function List_Remove
          CFI Conditional ??CrossCallReturnLabel_0
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond74 Using cfiCommon0
          CFI (cfiCond74) Function List_Free
          CFI (cfiCond74) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond74) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond74) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond74) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond74) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond74) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond74) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond74) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond74) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond74) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond74) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond74) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond74) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond74) CFA_SP SP+-2
          CFI (cfiCond74) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker75 Using cfiCommon1
          CFI (cfiPicker75) NoFunction
          CFI (cfiPicker75) Picker
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V3,A
        ; Setup parameters for call to function osal_mem_free
        ; Setup parameters for call to function osal_mem_free
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        RET
          CFI EndBlock cfiCond73
          CFI EndBlock cfiCond74
          CFI EndBlock cfiPicker75

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??List_Init::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    List_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??List_Add::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    List_Add

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??List_Add_Tail::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    List_Add_Tail

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??List_Remove::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    List_Remove

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??List_Free::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    List_Free

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "\\"List_Init\\"\\277\\325\\274\\344\\267\\`:
        DB "\"List_Init\"\277\325\274\344\267\326\305\344\312\247\260\334"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "\\301\\264\\261\\355\\302\\372\\r\\n">`:
        DB "\301\264\261\355\302\372\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "\\"List_Add\\"\\277\\325\\274\\344\\267\\3`:
        DB "\"List_Add\"\277\325\274\344\267\326\305\344\312\247\260\334"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "\\"List_Add_Tail\\"\\277\\325\\274\\344\\`:
        DB "\"List_Add_Tail\"\277\325\274\344\267\326\305\344\312\247\260\334"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "List_Remove\\316\\264\\325\\322\\265\\27`:
        DB "List_Remove\316\264\325\322\265\275\275\332\265\343\015\012"

        END
//  125 
//  126 
// 
// 882 bytes in segment BANKED_CODE
//  30 bytes in segment BANK_RELAYS
// 108 bytes in segment XDATA_ROM_C
// 
// 912 bytes of CODE  memory
// 108 bytes of CONST memory
//
//Errors: none
//Warnings: none
