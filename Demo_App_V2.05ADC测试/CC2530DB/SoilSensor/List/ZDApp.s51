///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V9.30.1.3056 for 8051               24/Nov/2016  11:19:09
// Copyright 2004-2015 IAR Systems AB.
// Standalone license - IAR Embedded Workbench for 8051
//
//    Core               =  plain
//    Code model         =  banked
//    Data model         =  large
//    Calling convention =  xdata reentrant
//    Constant location  =  data_rom
//    Dptr setup         =  1,16
//                          
//    Source file        =  
//        E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
//        1.0.0\Components\stack\zdo\ZDApp.c
//    Command line       =  
//        -f "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"
//        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
//        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f
//        "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
//        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
//        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
//        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
//        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
//        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
//        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
//        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
//        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
//        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
//        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
//        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
//        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
//        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
//        -DPOLL_RATE=50 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
//        -DREJOIN_POLL_RATE=440 "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
//        1.0.0\Components\stack\zdo\ZDApp.c" -D HAL_UART=TRUE -D
//        HAL_UART_ISR=1 -D HAL_UART_DMA=2 -D HOLD_AUTO_START -D LOG_OUT -D
//        UART1_PROTOCOL_RESOLVER=1 -D xISQC -D NWK_AUTO_POLL -D xZTOOL_P1 -D
//        ISR_KEYINTERRUPT -D xMT_TASK -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D
//        xLCD_SUPPORTED=DEBUG -D xPOWER_SAVING -lC
//        "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\SoilSensor\List"
//        -lA "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\SoilSensor\List"
//        --diag_suppress Pe001,Pa010 -o
//        "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\SoilSensor\Obj"
//        -e --no_code_motion --debug --core=plain --dptr=16,1
//        --data_model=large --code_model=banked
//        --calling_convention=xdata_reentrant --place_constants=data_rom
//        --nr_virtual_regs 8 -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\" -I
//        "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\Source\"
//        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\Frame\"
//        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\Module\SoilSensor\"
//        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\ZMain\TI2530DB\"
//        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\..\..\Components\hal\include\"
//        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
//        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\..\..\Components\mac\include\"
//        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
//        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
//        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
//        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\..\..\Components\mt\"
//        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\..\..\Components\osal\include\"
//        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\..\..\Components\services\saddr\"
//        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\..\..\Components\services\sdata\"
//        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\..\..\Components\stack\af\"
//        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
//        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
//        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\..\..\Components\stack\sec\"
//        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\..\..\Components\stack\sys\"
//        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
//        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\..\..\Components\zmac\"
//        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
//        -Ohz
//    List file          =  
//        E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\SoilSensor\List\ZDApp.s51
//
///////////////////////////////////////////////////////////////////////////////

        NAME ZDApp

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?V0
        EXTERN ?V1
        EXTERN ?V2
        EXTERN ?V4
        EXTERN ?V5
        EXTERN ?V3
        EXTERN ?V6
        EXTERN ?V7
        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?CALL_IND
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?L_ADD_TO_X
        EXTERN ?L_MOV_X
        EXTERN ?PUSH_XSTACK8_X_FOUR
        EXTERN ?PUSH_XSTACK8_X_TWO
        EXTERN ?PUSH_XSTACK_I_FOUR
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?S_DIV_MOD
        EXTERN ?US_SWITCH_SPARSE
        EXTERN ?XLOAD_R0123
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN ?XSTACK_DISP100_8
        EXTERN ?XSTACK_DISP101_8
        EXTERN ?XSTACK_DISP102_8
        EXTERN ?XSTORE_R0123
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        PUBLIC `??AddrMgrWriteNVRequest::?relay`
        FUNCTION `??AddrMgrWriteNVRequest::?relay`,0203H
        PUBLIC `??ZDAppCheckForHoldKey::?relay`
        FUNCTION `??ZDAppCheckForHoldKey::?relay`,0203H
        PUBLIC `??ZDAppDetermineDeviceType::?relay`
        FUNCTION `??ZDAppDetermineDeviceType::?relay`,0203H
        PUBLIC `??ZDApp_AgeOutPendingBindEntry::?relay`
        FUNCTION `??ZDApp_AgeOutPendingBindEntry::?relay`,0203H
        PUBLIC `??ZDApp_AnnounceNewAddress::?relay`
        FUNCTION `??ZDApp_AnnounceNewAddress::?relay`,0203H
        PUBLIC `??ZDApp_ChangeMatchDescRespPermission::?relay`
        FUNCTION `??ZDApp_ChangeMatchDescRespPermission::?relay`,0203H
        PUBLIC `??ZDApp_CoordStartPANIDConflictCB::?relay`
        FUNCTION `??ZDApp_CoordStartPANIDConflictCB::?relay`,0203H
        PUBLIC `??ZDApp_DeviceAuthEvt::?relay`
        FUNCTION `??ZDApp_DeviceAuthEvt::?relay`,0203H
        PUBLIC `??ZDApp_DeviceConfigured::?relay`
        FUNCTION `??ZDApp_DeviceConfigured::?relay`,0203H
        PUBLIC `??ZDApp_ForceConcentratorChange::?relay`
        FUNCTION `??ZDApp_ForceConcentratorChange::?relay`,0203H
        PUBLIC `??ZDApp_GetEmptyPendingBindReq::?relay`
        FUNCTION `??ZDApp_GetEmptyPendingBindReq::?relay`,0203H
        PUBLIC `??ZDApp_InMsgCB::?relay`
        FUNCTION `??ZDApp_InMsgCB::?relay`,0203H
        PUBLIC `??ZDApp_Init::?relay`
        FUNCTION `??ZDApp_Init::?relay`,0203H
        PUBLIC `??ZDApp_InitPendingBind::?relay`
        FUNCTION `??ZDApp_InitPendingBind::?relay`,0203H
        PUBLIC `??ZDApp_InitUserDesc::?relay`
        FUNCTION `??ZDApp_InitUserDesc::?relay`,0203H
        PUBLIC `??ZDApp_InitZdoCBFunc::?relay`
        FUNCTION `??ZDApp_InitZdoCBFunc::?relay`,0203H
        PUBLIC `??ZDApp_JoinReq::?relay`
        FUNCTION `??ZDApp_JoinReq::?relay`,0203H
        PUBLIC `??ZDApp_LeaveCtrlBypass::?relay`
        FUNCTION `??ZDApp_LeaveCtrlBypass::?relay`,0203H
        PUBLIC `??ZDApp_LeaveCtrlInit::?relay`
        FUNCTION `??ZDApp_LeaveCtrlInit::?relay`,0203H
        PUBLIC `??ZDApp_LeaveCtrlReset::?relay`
        FUNCTION `??ZDApp_LeaveCtrlReset::?relay`,0203H
        PUBLIC `??ZDApp_LeaveCtrlSet::?relay`
        FUNCTION `??ZDApp_LeaveCtrlSet::?relay`,0203H
        PUBLIC `??ZDApp_LeaveCtrlStartup::?relay`
        FUNCTION `??ZDApp_LeaveCtrlStartup::?relay`,0203H
        PUBLIC `??ZDApp_LeaveReset::?relay`
        FUNCTION `??ZDApp_LeaveReset::?relay`,0203H
        PUBLIC `??ZDApp_LeaveUpdate::?relay`
        FUNCTION `??ZDApp_LeaveUpdate::?relay`,0203H
        PUBLIC `??ZDApp_NVUpdate::?relay`
        FUNCTION `??ZDApp_NVUpdate::?relay`,0203H
        PUBLIC `??ZDApp_NetworkDiscoveryReq::?relay`
        FUNCTION `??ZDApp_NetworkDiscoveryReq::?relay`,0203H
        PUBLIC `??ZDApp_NetworkInit::?relay`
        FUNCTION `??ZDApp_NetworkInit::?relay`,0203H
        PUBLIC `??ZDApp_NetworkStartEvt::?relay`
        FUNCTION `??ZDApp_NetworkStartEvt::?relay`,0203H
        PUBLIC `??ZDApp_NodeProfileSync::?relay`
        FUNCTION `??ZDApp_NodeProfileSync::?relay`,0203H
        PUBLIC `??ZDApp_NwkDescListProcessing::?relay`
        FUNCTION `??ZDApp_NwkDescListProcessing::?relay`,0203H
        PUBLIC `??ZDApp_NwkStateUpdateCB::?relay`
        FUNCTION `??ZDApp_NwkStateUpdateCB::?relay`,0203H
        PUBLIC `??ZDApp_ProcessMsgCBs::?relay`
        FUNCTION `??ZDApp_ProcessMsgCBs::?relay`,0203H
        PUBLIC `??ZDApp_ProcessNetworkJoin::?relay`
        FUNCTION `??ZDApp_ProcessNetworkJoin::?relay`,0203H
        PUBLIC `??ZDApp_ProcessOSALMsg::?relay`
        FUNCTION `??ZDApp_ProcessOSALMsg::?relay`,0203H
        PUBLIC `??ZDApp_ProcessPendingBindReq::?relay`
        FUNCTION `??ZDApp_ProcessPendingBindReq::?relay`,0203H
        PUBLIC `??ZDApp_ProcessSecEvent::?relay`
        FUNCTION `??ZDApp_ProcessSecEvent::?relay`,0203H
        PUBLIC `??ZDApp_ProcessSecMsg::?relay`
        FUNCTION `??ZDApp_ProcessSecMsg::?relay`,0203H
        PUBLIC `??ZDApp_ReadNetworkRestoreState::?relay`
        FUNCTION `??ZDApp_ReadNetworkRestoreState::?relay`,0203H
        PUBLIC `??ZDApp_RegisterCBs::?relay`
        FUNCTION `??ZDApp_RegisterCBs::?relay`,0203H
        PUBLIC `??ZDApp_ResetNwkKey::?relay`
        FUNCTION `??ZDApp_ResetNwkKey::?relay`,0203H
        PUBLIC `??ZDApp_ResetTimerCancel::?relay`
        FUNCTION `??ZDApp_ResetTimerCancel::?relay`,0203H
        PUBLIC `??ZDApp_ResetTimerStart::?relay`
        FUNCTION `??ZDApp_ResetTimerStart::?relay`,0203H
        PUBLIC `??ZDApp_RestoreNwkKey::?relay`
        FUNCTION `??ZDApp_RestoreNwkKey::?relay`,0203H
        PUBLIC `??ZDApp_SaveNetworkStateEvt::?relay`
        FUNCTION `??ZDApp_SaveNetworkStateEvt::?relay`,0203H
        PUBLIC `??ZDApp_SaveNwkKey::?relay`
        FUNCTION `??ZDApp_SaveNwkKey::?relay`,0203H
        PUBLIC `??ZDApp_SecInit::?relay`
        FUNCTION `??ZDApp_SecInit::?relay`,0203H
        PUBLIC `??ZDApp_SendEventMsg::?relay`
        FUNCTION `??ZDApp_SendEventMsg::?relay`,0203H
        PUBLIC `??ZDApp_SendMsg::?relay`
        FUNCTION `??ZDApp_SendMsg::?relay`,0203H
        PUBLIC `??ZDApp_SetPendingBindDefault::?relay`
        FUNCTION `??ZDApp_SetPendingBindDefault::?relay`,0203H
        PUBLIC `??ZDApp_StartJoiningCycle::?relay`
        FUNCTION `??ZDApp_StartJoiningCycle::?relay`,0203H
        PUBLIC `??ZDApp_StopJoiningCycle::?relay`
        FUNCTION `??ZDApp_StopJoiningCycle::?relay`,0203H
        PUBLIC `??ZDApp_event_loop::?relay`
        FUNCTION `??ZDApp_event_loop::?relay`,0203H
        PUBLIC `??ZDOInitDevice::?relay`
        FUNCTION `??ZDOInitDevice::?relay`,0203H
        PUBLIC `??ZDO_AddrChangeIndicationCB::?relay`
        FUNCTION `??ZDO_AddrChangeIndicationCB::?relay`,0203H
        PUBLIC `??ZDO_ConcentratorIndicationCB::?relay`
        FUNCTION `??ZDO_ConcentratorIndicationCB::?relay`,0203H
        PUBLIC `??ZDO_DeregisterForZdoCB::?relay`
        FUNCTION `??ZDO_DeregisterForZdoCB::?relay`,0203H
        PUBLIC `??ZDO_JoinConfirmCB::?relay`
        FUNCTION `??ZDO_JoinConfirmCB::?relay`,0203H
        PUBLIC `??ZDO_JoinIndicationCB::?relay`
        FUNCTION `??ZDO_JoinIndicationCB::?relay`,0203H
        PUBLIC `??ZDO_LeaveCnf::?relay`
        FUNCTION `??ZDO_LeaveCnf::?relay`,0203H
        PUBLIC `??ZDO_LeaveInd::?relay`
        FUNCTION `??ZDO_LeaveInd::?relay`,0203H
        PUBLIC `??ZDO_ManytoOneFailureIndicationCB::?relay`
        FUNCTION `??ZDO_ManytoOneFailureIndicationCB::?relay`,0203H
        PUBLIC `??ZDO_NetworkDiscoveryConfirmCB::?relay`
        FUNCTION `??ZDO_NetworkDiscoveryConfirmCB::?relay`,0203H
        PUBLIC `??ZDO_NetworkFormationConfirmCB::?relay`
        FUNCTION `??ZDO_NetworkFormationConfirmCB::?relay`,0203H
        PUBLIC `??ZDO_NetworkStatusCB::?relay`
        FUNCTION `??ZDO_NetworkStatusCB::?relay`,0203H
        PUBLIC `??ZDO_PermitJoinCB::?relay`
        FUNCTION `??ZDO_PermitJoinCB::?relay`,0203H
        PUBLIC `??ZDO_PollConfirmCB::?relay`
        FUNCTION `??ZDO_PollConfirmCB::?relay`,0203H
        PUBLIC `??ZDO_RegisterForZdoCB::?relay`
        FUNCTION `??ZDO_RegisterForZdoCB::?relay`,0203H
        PUBLIC `??ZDO_SrcRtgIndCB::?relay`
        FUNCTION `??ZDO_SrcRtgIndCB::?relay`,0203H
        PUBLIC `??ZDO_StartRouterConfirmCB::?relay`
        FUNCTION `??ZDO_StartRouterConfirmCB::?relay`,0203H
        PUBLIC `??ZDO_SyncIndicationCB::?relay`
        FUNCTION `??ZDO_SyncIndicationCB::?relay`,0203H
        PUBLIC `??ZDO_UpdateDeviceIndication::?relay`
        FUNCTION `??ZDO_UpdateDeviceIndication::?relay`,0203H
        PUBLIC `??ZDO_beaconNotifyIndCB::?relay`
        FUNCTION `??ZDO_beaconNotifyIndCB::?relay`,0203H
        PUBLIC AddrMgrWriteNVRequest
        FUNCTION AddrMgrWriteNVRequest,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC ZDAppCheckForHoldKey
        FUNCTION ZDAppCheckForHoldKey,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDAppDetermineDeviceType
        FUNCTION ZDAppDetermineDeviceType,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDAppNwkAddr
        PUBLIC ZDAppPendingBindReq
        PUBLIC ZDAppTaskID
        PUBLIC ZDApp_AgeOutPendingBindEntry
        FUNCTION ZDApp_AgeOutPendingBindEntry,0a1203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 31, STACK
        PUBLIC ZDApp_AnnounceNewAddress
        FUNCTION ZDApp_AnnounceNewAddress,0a1203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 11, STACK
        PUBLIC ZDApp_AutoFindMode_epDesc
        PUBLIC ZDApp_ChangeMatchDescRespPermission
        FUNCTION ZDApp_ChangeMatchDescRespPermission,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZDApp_CoordStartPANIDConflictCB
        FUNCTION ZDApp_CoordStartPANIDConflictCB,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC ZDApp_DeviceAuthEvt
        FUNCTION ZDApp_DeviceAuthEvt,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_DeviceConfigured
        FUNCTION ZDApp_DeviceConfigured,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        PUBLIC ZDApp_ForceConcentratorChange
        FUNCTION ZDApp_ForceConcentratorChange,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC ZDApp_GetEmptyPendingBindReq
        FUNCTION ZDApp_GetEmptyPendingBindReq,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_InMsgCB
        FUNCTION ZDApp_InMsgCB,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC ZDApp_Init
        FUNCTION ZDApp_Init,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZDApp_InitPendingBind
        FUNCTION ZDApp_InitPendingBind,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZDApp_InitUserDesc
        FUNCTION ZDApp_InitUserDesc,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        PUBLIC ZDApp_InitZdoCBFunc
        FUNCTION ZDApp_InitZdoCBFunc,0203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_JoinReq
        FUNCTION ZDApp_JoinReq,0a1203H
        ARGFRAME XSTACK, 4, STACK
        LOCFRAME XSTACK, 16, STACK
        PUBLIC ZDApp_LeaveCtrl
        PUBLIC ZDApp_LeaveCtrlBypass
        FUNCTION ZDApp_LeaveCtrlBypass,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_LeaveCtrlInit
        FUNCTION ZDApp_LeaveCtrlInit,0a1203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 14, STACK
        PUBLIC ZDApp_LeaveCtrlReset
        FUNCTION ZDApp_LeaveCtrlReset,0a1203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 14, STACK
        PUBLIC ZDApp_LeaveCtrlSet
        FUNCTION ZDApp_LeaveCtrlSet,0a1203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 14, STACK
        PUBLIC ZDApp_LeaveCtrlStartup
        FUNCTION ZDApp_LeaveCtrlStartup,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_LeaveReset
        FUNCTION ZDApp_LeaveReset,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZDApp_LeaveUpdate
        FUNCTION ZDApp_LeaveUpdate,0a1203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 23, STACK
        PUBLIC ZDApp_NVUpdate
        FUNCTION ZDApp_NVUpdate,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC ZDApp_NetworkDiscoveryReq
        FUNCTION ZDApp_NetworkDiscoveryReq,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC ZDApp_NetworkInit
        FUNCTION ZDApp_NetworkInit,0a1203H
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 16, STACK
        PUBLIC ZDApp_NetworkStartEvt
        FUNCTION ZDApp_NetworkStartEvt,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_NewDeviceList
        PUBLIC ZDApp_NodeProfileSync
        FUNCTION ZDApp_NodeProfileSync,021203H
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZDApp_NwkDescListProcessing
        FUNCTION ZDApp_NwkDescListProcessing,0a1203H
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 14, STACK
        PUBLIC ZDApp_NwkStateUpdateCB
        FUNCTION ZDApp_NwkStateUpdateCB,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_ProcessMsgCBs
        FUNCTION ZDApp_ProcessMsgCBs,0a1203H
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 33, STACK
        PUBLIC ZDApp_ProcessNetworkJoin
        FUNCTION ZDApp_ProcessNetworkJoin,0a1203H
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 12, STACK
        PUBLIC ZDApp_ProcessOSALMsg
        FUNCTION ZDApp_ProcessOSALMsg,0a1203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 17, STACK
        PUBLIC ZDApp_ProcessPendingBindReq
        FUNCTION ZDApp_ProcessPendingBindReq,0a1203H
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 23, STACK
        PUBLIC ZDApp_ProcessSecEvent
        FUNCTION ZDApp_ProcessSecEvent,021203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZDApp_ProcessSecMsg
        FUNCTION ZDApp_ProcessSecMsg,021203H
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_ReadNetworkRestoreState
        FUNCTION ZDApp_ReadNetworkRestoreState,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZDApp_RegisterCBs
        FUNCTION ZDApp_RegisterCBs,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_ResetNwkKey
        FUNCTION ZDApp_ResetNwkKey,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        PUBLIC ZDApp_ResetTimerCancel
        FUNCTION ZDApp_ResetTimerCancel,021203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_ResetTimerStart
        FUNCTION ZDApp_ResetTimerStart,0a1203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 16, STACK
        PUBLIC ZDApp_RestoreNwkKey
        FUNCTION ZDApp_RestoreNwkKey,0a1203H
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 53, STACK
        PUBLIC ZDApp_SaveNetworkStateEvt
        FUNCTION ZDApp_SaveNetworkStateEvt,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC ZDApp_SaveNwkKey
        FUNCTION ZDApp_SaveNwkKey,0a1203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 35, STACK
        PUBLIC ZDApp_SavedPollRate
        PUBLIC ZDApp_SecInit
        FUNCTION ZDApp_SecInit,0a1203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 25, STACK
        PUBLIC ZDApp_SendEventMsg
        FUNCTION ZDApp_SendEventMsg,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZDApp_SendMsg
        FUNCTION ZDApp_SendMsg,0a1203H
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 19, STACK
        PUBLIC ZDApp_SetPendingBindDefault
        FUNCTION ZDApp_SetPendingBindDefault,021203H
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZDApp_StartJoiningCycle
        FUNCTION ZDApp_StartJoiningCycle,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_StopJoiningCycle
        FUNCTION ZDApp_StopJoiningCycle,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDApp_epDesc
        PUBLIC ZDApp_event_loop
        FUNCTION ZDApp_event_loop,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        PUBLIC ZDOInitDevice
        FUNCTION ZDOInitDevice,0a1203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 12, STACK
        PUBLIC ZDO_AddrChangeIndicationCB
        FUNCTION ZDO_AddrChangeIndicationCB,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC ZDO_ConcentratorIndicationCB
        FUNCTION ZDO_ConcentratorIndicationCB,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC ZDO_DeregisterForZdoCB
        FUNCTION ZDO_DeregisterForZdoCB,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDO_JoinConfirmCB
        FUNCTION ZDO_JoinConfirmCB,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 17, STACK
        PUBLIC ZDO_JoinIndicationCB
        FUNCTION ZDO_JoinIndicationCB,0a1203H
        ARGFRAME XSTACK, 1, STACK
        LOCFRAME XSTACK, 18, STACK
        PUBLIC ZDO_LeaveCnf
        FUNCTION ZDO_LeaveCnf,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC ZDO_LeaveInd
        FUNCTION ZDO_LeaveInd,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC ZDO_ManytoOneFailureIndicationCB
        FUNCTION ZDO_ManytoOneFailureIndicationCB,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDO_NetworkDiscoveryConfirmCB
        FUNCTION ZDO_NetworkDiscoveryConfirmCB,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 3, STACK
        LOCFRAME XSTACK, 3, STACK
        PUBLIC ZDO_NetworkFormationConfirmCB
        FUNCTION ZDO_NetworkFormationConfirmCB,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZDO_NetworkStatusCB
        FUNCTION ZDO_NetworkStatusCB,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDO_PermitJoinCB
        FUNCTION ZDO_PermitJoinCB,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 3, STACK
        LOCFRAME XSTACK, 1, STACK
        PUBLIC ZDO_PollConfirmCB
        FUNCTION ZDO_PollConfirmCB,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC ZDO_RegisterForZdoCB
        FUNCTION ZDO_RegisterForZdoCB,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDO_SrcRtgIndCB
        FUNCTION ZDO_SrcRtgIndCB,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC ZDO_StartRouterConfirmCB
        FUNCTION ZDO_StartRouterConfirmCB,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZDO_SyncIndicationCB
        FUNCTION ZDO_SyncIndicationCB,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZDO_UpdateDeviceIndication
        FUNCTION ZDO_UpdateDeviceIndication,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC ZDO_UseExtendedPANID
        PUBLIC ZDO_beaconNotifyIndCB
        FUNCTION ZDO_beaconNotifyIndCB,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBWEAK __Constant_258
        PUBWEAK __Constant_3e8
        PUBWEAK __Constant_4e2
        PUBWEAK __Constant_64
        PUBLIC _tmpRejoinState
        PUBLIC continueJoining
        PUBLIC devStartMode
        PUBLIC devState
        PUBLIC nwkStatus
        PUBLIC retryCnt
        PUBLIC zdappMgmtNwkDiscReqInProgress
        PUBLIC zdappMgmtNwkDiscRspAddr
        PUBLIC zdappMgmtNwkDiscRspTransSeq
        PUBLIC zdappMgmtNwkDiscStartIndex
        PUBLIC zdappMgmtSavedNwkState
        PUBLIC zdoCBFunc
        PUBLIC zdoDiscCounter
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource SP:8, PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B SameValue
          CFI A SameValue
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT SameValue
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon1
        
APSME_BindRequest   SYMBOL "APSME_BindRequest"
`??APSME_BindRequest::?relay` SYMBOL "?relay", APSME_BindRequest
APSME_HoldDataRequests SYMBOL "APSME_HoldDataRequests"
`??APSME_HoldDataRequests::?relay` SYMBOL "?relay", APSME_HoldDataRequests
AddrMgrEntryLookupExt SYMBOL "AddrMgrEntryLookupExt"
`??AddrMgrEntryLookupExt::?relay` SYMBOL "?relay", AddrMgrEntryLookupExt
AddrMgrEntryRelease SYMBOL "AddrMgrEntryRelease"
`??AddrMgrEntryRelease::?relay` SYMBOL "?relay", AddrMgrEntryRelease
AddrMgrExtAddrSet   SYMBOL "AddrMgrExtAddrSet"
`??AddrMgrExtAddrSet::?relay` SYMBOL "?relay", AddrMgrExtAddrSet
HalKeyRead          SYMBOL "HalKeyRead"
`??HalKeyRead::?relay` SYMBOL "?relay", HalKeyRead
HalLedBlink         SYMBOL "HalLedBlink"
`??HalLedBlink::?relay` SYMBOL "?relay", HalLedBlink
HalLedSet           SYMBOL "HalLedSet"
`??HalLedSet::?relay` SYMBOL "?relay", HalLedSet
NLME_GetCoordShortAddr SYMBOL "NLME_GetCoordShortAddr"
`??NLME_GetCoordShortAddr::?relay` SYMBOL "?relay", NLME_GetCoordShortAddr
NLME_GetEnergyThreshold SYMBOL "NLME_GetEnergyThreshold"
`??NLME_GetEnergyThreshold::?relay` SYMBOL "?relay", NLME_GetEnergyThreshold
NLME_GetExtAddr     SYMBOL "NLME_GetExtAddr"
`??NLME_GetExtAddr::?relay` SYMBOL "?relay", NLME_GetExtAddr
NLME_GetShortAddr   SYMBOL "NLME_GetShortAddr"
`??NLME_GetShortAddr::?relay` SYMBOL "?relay", NLME_GetShortAddr
NLME_JoinRequest    SYMBOL "NLME_JoinRequest"
`??NLME_JoinRequest::?relay` SYMBOL "?relay", NLME_JoinRequest
NLME_LeaveRsp       SYMBOL "NLME_LeaveRsp"
`??NLME_LeaveRsp::?relay` SYMBOL "?relay", NLME_LeaveRsp
NLME_NetworkDiscoveryRequest SYMBOL "NLME_NetworkDiscoveryRequest"
`??NLME_NetworkDiscoveryRequest::?relay` SYMBOL "?relay", NLME_NetworkDiscoveryRequest
NLME_NwkDiscTerm    SYMBOL "NLME_NwkDiscTerm"
`??NLME_NwkDiscTerm::?relay` SYMBOL "?relay", NLME_NwkDiscTerm
NLME_ReJoinRequest  SYMBOL "NLME_ReJoinRequest"
`??NLME_ReJoinRequest::?relay` SYMBOL "?relay", NLME_ReJoinRequest
NLME_ReJoinRequestUnsecure SYMBOL "NLME_ReJoinRequestUnsecure"
`??NLME_ReJoinRequestUnsecure::?relay` SYMBOL "?relay", NLME_ReJoinRequestUnsecure
NLME_SetBroadcastFilter SYMBOL "NLME_SetBroadcastFilter"
`??NLME_SetBroadcastFilter::?relay` SYMBOL "?relay", NLME_SetBroadcastFilter
NLME_SetEnergyThreshold SYMBOL "NLME_SetEnergyThreshold"
`??NLME_SetEnergyThreshold::?relay` SYMBOL "?relay", NLME_SetEnergyThreshold
NLME_SetPollRate    SYMBOL "NLME_SetPollRate"
`??NLME_SetPollRate::?relay` SYMBOL "?relay", NLME_SetPollRate
NLME_SetQueuedPollRate SYMBOL "NLME_SetQueuedPollRate"
`??NLME_SetQueuedPollRate::?relay` SYMBOL "?relay", NLME_SetQueuedPollRate
NLME_SetResponseRate SYMBOL "NLME_SetResponseRate"
`??NLME_SetResponseRate::?relay` SYMBOL "?relay", NLME_SetResponseRate
RTG_MTORouteReq     SYMBOL "RTG_MTORouteReq"
`??RTG_MTORouteReq::?relay` SYMBOL "?relay", RTG_MTORouteReq
RTG_RemoveRtgEntry  SYMBOL "RTG_RemoveRtgEntry"
`??RTG_RemoveRtgEntry::?relay` SYMBOL "?relay", RTG_RemoveRtgEntry
SSP_ReadNwkActiveKey SYMBOL "SSP_ReadNwkActiveKey"
`??SSP_ReadNwkActiveKey::?relay` SYMBOL "?relay", SSP_ReadNwkActiveKey
SSP_SwitchNwkKey    SYMBOL "SSP_SwitchNwkKey"
`??SSP_SwitchNwkKey::?relay` SYMBOL "?relay", SSP_SwitchNwkKey
SSP_UpdateNwkKey    SYMBOL "SSP_UpdateNwkKey"
`??SSP_UpdateNwkKey::?relay` SYMBOL "?relay", SSP_UpdateNwkKey
ZDConfig_InitDescriptors SYMBOL "ZDConfig_InitDescriptors"
`??ZDConfig_InitDescriptors::?relay` SYMBOL "?relay", ZDConfig_InitDescriptors
ZDO_Init            SYMBOL "ZDO_Init"
`??ZDO_Init::?relay` SYMBOL "?relay", ZDO_Init
ZDO_ParseAddrRsp    SYMBOL "ZDO_ParseAddrRsp"
`??ZDO_ParseAddrRsp::?relay` SYMBOL "?relay", ZDO_ParseAddrRsp
ZDO_ParseBindUnbindReq SYMBOL "ZDO_ParseBindUnbindReq"
`??ZDO_ParseBindUnbindReq::?relay` SYMBOL "?relay", ZDO_ParseBindUnbindReq
ZDO_ProcessBindUnbindReq SYMBOL "ZDO_ProcessBindUnbindReq"
`??ZDO_ProcessBindUnbindReq::?relay` SYMBOL "?relay", ZDO_ProcessBindUnbindReq
ZDO_RegisterForZDOMsg SYMBOL "ZDO_RegisterForZDOMsg"
`??ZDO_RegisterForZDOMsg::?relay` SYMBOL "?relay", ZDO_RegisterForZDOMsg
ZDO_StartDevice     SYMBOL "ZDO_StartDevice"
`??ZDO_StartDevice::?relay` SYMBOL "?relay", ZDO_StartDevice
ZDO_UpdateAddrManager SYMBOL "ZDO_UpdateAddrManager"
`??ZDO_UpdateAddrManager::?relay` SYMBOL "?relay", ZDO_UpdateAddrManager
ZDO_UpdateNwkStatus SYMBOL "ZDO_UpdateNwkStatus"
`??ZDO_UpdateNwkStatus::?relay` SYMBOL "?relay", ZDO_UpdateNwkStatus
ZDP_DeviceAnnce     SYMBOL "ZDP_DeviceAnnce"
`??ZDP_DeviceAnnce::?relay` SYMBOL "?relay", ZDP_DeviceAnnce
ZDP_GenericRsp      SYMBOL "ZDP_GenericRsp"
`??ZDP_GenericRsp::?relay` SYMBOL "?relay", ZDP_GenericRsp
ZDP_IncomingData    SYMBOL "ZDP_IncomingData"
`??ZDP_IncomingData::?relay` SYMBOL "?relay", ZDP_IncomingData
ZDP_SendData        SYMBOL "ZDP_SendData"
`??ZDP_SendData::?relay` SYMBOL "?relay", ZDP_SendData
ZDSecMgrAddrClear   SYMBOL "ZDSecMgrAddrClear"
`??ZDSecMgrAddrClear::?relay` SYMBOL "?relay", ZDSecMgrAddrClear
ZDSecMgrDeviceRemoveByExtAddr SYMBOL "ZDSecMgrDeviceRemoveByExtAddr"
`??ZDSecMgrDeviceRemoveByExtAddr::?relay` SYMBOL "?relay", ZDSecMgrDeviceRemoveByExtAddr
ZDSecMgrInit        SYMBOL "ZDSecMgrInit"
`??ZDSecMgrInit::?relay` SYMBOL "?relay", ZDSecMgrInit
ZDSecMgrReadKeyFromNv SYMBOL "ZDSecMgrReadKeyFromNv"
`??ZDSecMgrReadKeyFromNv::?relay` SYMBOL "?relay", ZDSecMgrReadKeyFromNv
ZDSecMgrSaveTCLinkKey SYMBOL "ZDSecMgrSaveTCLinkKey"
`??ZDSecMgrSaveTCLinkKey::?relay` SYMBOL "?relay", ZDSecMgrSaveTCLinkKey
ZDSecMgrSwitchKeyInd SYMBOL "ZDSecMgrSwitchKeyInd"
`??ZDSecMgrSwitchKeyInd::?relay` SYMBOL "?relay", ZDSecMgrSwitchKeyInd
ZDSecMgrTransportKeyInd SYMBOL "ZDSecMgrTransportKeyInd"
`??ZDSecMgrTransportKeyInd::?relay` SYMBOL "?relay", ZDSecMgrTransportKeyInd
ZMacSetReq          SYMBOL "ZMacSetReq"
`??ZMacSetReq::?relay` SYMBOL "?relay", ZMacSetReq
afRegister          SYMBOL "afRegister"
`??afRegister::?relay` SYMBOL "?relay", afRegister
afSetMatch          SYMBOL "afSetMatch"
`??afSetMatch::?relay` SYMBOL "?relay", afSetMatch
nwkNeighborFindEmptySlot SYMBOL "nwkNeighborFindEmptySlot"
`??nwkNeighborFindEmptySlot::?relay` SYMBOL "?relay", nwkNeighborFindEmptySlot
nwkNeighborInitTable SYMBOL "nwkNeighborInitTable"
`??nwkNeighborInitTable::?relay` SYMBOL "?relay", nwkNeighborInitTable
nwkNeighborRemove   SYMBOL "nwkNeighborRemove"
`??nwkNeighborRemove::?relay` SYMBOL "?relay", nwkNeighborRemove
nwk_ExtPANIDValid   SYMBOL "nwk_ExtPANIDValid"
`??nwk_ExtPANIDValid::?relay` SYMBOL "?relay", nwk_ExtPANIDValid
nwk_getNwkDescList  SYMBOL "nwk_getNwkDescList"
`??nwk_getNwkDescList::?relay` SYMBOL "?relay", nwk_getNwkDescList
osal_clear_event    SYMBOL "osal_clear_event"
`??osal_clear_event::?relay` SYMBOL "?relay", osal_clear_event
osal_get_timeoutEx  SYMBOL "osal_get_timeoutEx"
`??osal_get_timeoutEx::?relay` SYMBOL "?relay", osal_get_timeoutEx
osal_mem_alloc      SYMBOL "osal_mem_alloc"
`??osal_mem_alloc::?relay` SYMBOL "?relay", osal_mem_alloc
osal_mem_free       SYMBOL "osal_mem_free"
`??osal_mem_free::?relay` SYMBOL "?relay", osal_mem_free
osal_memcmp         SYMBOL "osal_memcmp"
`??osal_memcmp::?relay` SYMBOL "?relay", osal_memcmp
osal_memcpy         SYMBOL "osal_memcpy"
`??osal_memcpy::?relay` SYMBOL "?relay", osal_memcpy
osal_memset         SYMBOL "osal_memset"
`??osal_memset::?relay` SYMBOL "?relay", osal_memset
osal_msg_allocate   SYMBOL "osal_msg_allocate"
`??osal_msg_allocate::?relay` SYMBOL "?relay", osal_msg_allocate
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
`??osal_msg_deallocate::?relay` SYMBOL "?relay", osal_msg_deallocate
osal_msg_receive    SYMBOL "osal_msg_receive"
`??osal_msg_receive::?relay` SYMBOL "?relay", osal_msg_receive
osal_msg_send       SYMBOL "osal_msg_send"
`??osal_msg_send::?relay` SYMBOL "?relay", osal_msg_send
osal_nv_item_init   SYMBOL "osal_nv_item_init"
`??osal_nv_item_init::?relay` SYMBOL "?relay", osal_nv_item_init
osal_nv_read        SYMBOL "osal_nv_read"
`??osal_nv_read::?relay` SYMBOL "?relay", osal_nv_read
osal_nv_write       SYMBOL "osal_nv_write"
`??osal_nv_write::?relay` SYMBOL "?relay", osal_nv_write
osal_pwrmgr_device  SYMBOL "osal_pwrmgr_device"
`??osal_pwrmgr_device::?relay` SYMBOL "?relay", osal_pwrmgr_device
osal_rand           SYMBOL "osal_rand"
`??osal_rand::?relay` SYMBOL "?relay", osal_rand
osal_set_event      SYMBOL "osal_set_event"
`??osal_set_event::?relay` SYMBOL "?relay", osal_set_event
osal_start_timerEx  SYMBOL "osal_start_timerEx"
`??osal_start_timerEx::?relay` SYMBOL "?relay", osal_start_timerEx
osal_stop_timerEx   SYMBOL "osal_stop_timerEx"
`??osal_stop_timerEx::?relay` SYMBOL "?relay", osal_stop_timerEx
sAddrExtCmp         SYMBOL "sAddrExtCmp"
`??sAddrExtCmp::?relay` SYMBOL "?relay", sAddrExtCmp
sAddrExtCpy         SYMBOL "sAddrExtCpy"
`??sAddrExtCpy::?relay` SYMBOL "?relay", sAddrExtCpy
zgInitItems         SYMBOL "zgInitItems"
`??zgInitItems::?relay` SYMBOL "?relay", zgInitItems
zgReadStartupOptions SYMBOL "zgReadStartupOptions"
`??zgReadStartupOptions::?relay` SYMBOL "?relay", zgReadStartupOptions
zgWriteStartupOptions SYMBOL "zgWriteStartupOptions"
`??zgWriteStartupOptions::?relay` SYMBOL "?relay", zgWriteStartupOptions
AddrMgrWriteNVRequest SYMBOL "AddrMgrWriteNVRequest"
`??AddrMgrWriteNVRequest::?relay` SYMBOL "?relay", AddrMgrWriteNVRequest
ZDAppCheckForHoldKey SYMBOL "ZDAppCheckForHoldKey"
`??ZDAppCheckForHoldKey::?relay` SYMBOL "?relay", ZDAppCheckForHoldKey
ZDAppDetermineDeviceType SYMBOL "ZDAppDetermineDeviceType"
`??ZDAppDetermineDeviceType::?relay` SYMBOL "?relay", ZDAppDetermineDeviceType
ZDApp_AgeOutPendingBindEntry SYMBOL "ZDApp_AgeOutPendingBindEntry"
`??ZDApp_AgeOutPendingBindEntry::?relay` SYMBOL "?relay", ZDApp_AgeOutPendingBindEntry
ZDApp_AnnounceNewAddress SYMBOL "ZDApp_AnnounceNewAddress"
`??ZDApp_AnnounceNewAddress::?relay` SYMBOL "?relay", ZDApp_AnnounceNewAddress
ZDApp_ChangeMatchDescRespPermission SYMBOL "ZDApp_ChangeMatchDescRespPermission"
`??ZDApp_ChangeMatchDescRespPermission::?relay` SYMBOL "?relay", ZDApp_ChangeMatchDescRespPermission
ZDApp_CoordStartPANIDConflictCB SYMBOL "ZDApp_CoordStartPANIDConflictCB"
`??ZDApp_CoordStartPANIDConflictCB::?relay` SYMBOL "?relay", ZDApp_CoordStartPANIDConflictCB
ZDApp_DeviceAuthEvt SYMBOL "ZDApp_DeviceAuthEvt"
`??ZDApp_DeviceAuthEvt::?relay` SYMBOL "?relay", ZDApp_DeviceAuthEvt
ZDApp_DeviceConfigured SYMBOL "ZDApp_DeviceConfigured"
`??ZDApp_DeviceConfigured::?relay` SYMBOL "?relay", ZDApp_DeviceConfigured
ZDApp_ForceConcentratorChange SYMBOL "ZDApp_ForceConcentratorChange"
`??ZDApp_ForceConcentratorChange::?relay` SYMBOL "?relay", ZDApp_ForceConcentratorChange
ZDApp_GetEmptyPendingBindReq SYMBOL "ZDApp_GetEmptyPendingBindReq"
`??ZDApp_GetEmptyPendingBindReq::?relay` SYMBOL "?relay", ZDApp_GetEmptyPendingBindReq
ZDApp_InMsgCB       SYMBOL "ZDApp_InMsgCB"
`??ZDApp_InMsgCB::?relay` SYMBOL "?relay", ZDApp_InMsgCB
ZDApp_Init          SYMBOL "ZDApp_Init"
`??ZDApp_Init::?relay` SYMBOL "?relay", ZDApp_Init
ZDApp_InitPendingBind SYMBOL "ZDApp_InitPendingBind"
`??ZDApp_InitPendingBind::?relay` SYMBOL "?relay", ZDApp_InitPendingBind
ZDApp_InitUserDesc  SYMBOL "ZDApp_InitUserDesc"
`??ZDApp_InitUserDesc::?relay` SYMBOL "?relay", ZDApp_InitUserDesc
ZDApp_InitZdoCBFunc SYMBOL "ZDApp_InitZdoCBFunc"
`??ZDApp_InitZdoCBFunc::?relay` SYMBOL "?relay", ZDApp_InitZdoCBFunc
ZDApp_JoinReq       SYMBOL "ZDApp_JoinReq"
`??ZDApp_JoinReq::?relay` SYMBOL "?relay", ZDApp_JoinReq
ZDApp_LeaveCtrlBypass SYMBOL "ZDApp_LeaveCtrlBypass"
`??ZDApp_LeaveCtrlBypass::?relay` SYMBOL "?relay", ZDApp_LeaveCtrlBypass
ZDApp_LeaveCtrlInit SYMBOL "ZDApp_LeaveCtrlInit"
`??ZDApp_LeaveCtrlInit::?relay` SYMBOL "?relay", ZDApp_LeaveCtrlInit
ZDApp_LeaveCtrlReset SYMBOL "ZDApp_LeaveCtrlReset"
`??ZDApp_LeaveCtrlReset::?relay` SYMBOL "?relay", ZDApp_LeaveCtrlReset
ZDApp_LeaveCtrlSet  SYMBOL "ZDApp_LeaveCtrlSet"
`??ZDApp_LeaveCtrlSet::?relay` SYMBOL "?relay", ZDApp_LeaveCtrlSet
ZDApp_LeaveCtrlStartup SYMBOL "ZDApp_LeaveCtrlStartup"
`??ZDApp_LeaveCtrlStartup::?relay` SYMBOL "?relay", ZDApp_LeaveCtrlStartup
ZDApp_LeaveReset    SYMBOL "ZDApp_LeaveReset"
`??ZDApp_LeaveReset::?relay` SYMBOL "?relay", ZDApp_LeaveReset
ZDApp_LeaveUpdate   SYMBOL "ZDApp_LeaveUpdate"
`??ZDApp_LeaveUpdate::?relay` SYMBOL "?relay", ZDApp_LeaveUpdate
ZDApp_NVUpdate      SYMBOL "ZDApp_NVUpdate"
`??ZDApp_NVUpdate::?relay` SYMBOL "?relay", ZDApp_NVUpdate
ZDApp_NetworkDiscoveryReq SYMBOL "ZDApp_NetworkDiscoveryReq"
`??ZDApp_NetworkDiscoveryReq::?relay` SYMBOL "?relay", ZDApp_NetworkDiscoveryReq
ZDApp_NetworkInit   SYMBOL "ZDApp_NetworkInit"
`??ZDApp_NetworkInit::?relay` SYMBOL "?relay", ZDApp_NetworkInit
ZDApp_NetworkStartEvt SYMBOL "ZDApp_NetworkStartEvt"
`??ZDApp_NetworkStartEvt::?relay` SYMBOL "?relay", ZDApp_NetworkStartEvt
ZDApp_NodeProfileSync SYMBOL "ZDApp_NodeProfileSync"
`??ZDApp_NodeProfileSync::?relay` SYMBOL "?relay", ZDApp_NodeProfileSync
ZDApp_NwkDescListProcessing SYMBOL "ZDApp_NwkDescListProcessing"
`??ZDApp_NwkDescListProcessing::?relay` SYMBOL "?relay", ZDApp_NwkDescListProcessing
ZDApp_NwkStateUpdateCB SYMBOL "ZDApp_NwkStateUpdateCB"
`??ZDApp_NwkStateUpdateCB::?relay` SYMBOL "?relay", ZDApp_NwkStateUpdateCB
ZDApp_ProcessMsgCBs SYMBOL "ZDApp_ProcessMsgCBs"
`??ZDApp_ProcessMsgCBs::?relay` SYMBOL "?relay", ZDApp_ProcessMsgCBs
ZDApp_ProcessNetworkJoin SYMBOL "ZDApp_ProcessNetworkJoin"
`??ZDApp_ProcessNetworkJoin::?relay` SYMBOL "?relay", ZDApp_ProcessNetworkJoin
ZDApp_ProcessOSALMsg SYMBOL "ZDApp_ProcessOSALMsg"
`??ZDApp_ProcessOSALMsg::?relay` SYMBOL "?relay", ZDApp_ProcessOSALMsg
ZDApp_ProcessPendingBindReq SYMBOL "ZDApp_ProcessPendingBindReq"
`??ZDApp_ProcessPendingBindReq::?relay` SYMBOL "?relay", ZDApp_ProcessPendingBindReq
ZDApp_ProcessSecEvent SYMBOL "ZDApp_ProcessSecEvent"
`??ZDApp_ProcessSecEvent::?relay` SYMBOL "?relay", ZDApp_ProcessSecEvent
ZDApp_ProcessSecMsg SYMBOL "ZDApp_ProcessSecMsg"
`??ZDApp_ProcessSecMsg::?relay` SYMBOL "?relay", ZDApp_ProcessSecMsg
ZDApp_ReadNetworkRestoreState SYMBOL "ZDApp_ReadNetworkRestoreState"
`??ZDApp_ReadNetworkRestoreState::?relay` SYMBOL "?relay", ZDApp_ReadNetworkRestoreState
ZDApp_RegisterCBs   SYMBOL "ZDApp_RegisterCBs"
`??ZDApp_RegisterCBs::?relay` SYMBOL "?relay", ZDApp_RegisterCBs
ZDApp_ResetNwkKey   SYMBOL "ZDApp_ResetNwkKey"
`??ZDApp_ResetNwkKey::?relay` SYMBOL "?relay", ZDApp_ResetNwkKey
ZDApp_ResetTimerCancel SYMBOL "ZDApp_ResetTimerCancel"
`??ZDApp_ResetTimerCancel::?relay` SYMBOL "?relay", ZDApp_ResetTimerCancel
ZDApp_ResetTimerStart SYMBOL "ZDApp_ResetTimerStart"
`??ZDApp_ResetTimerStart::?relay` SYMBOL "?relay", ZDApp_ResetTimerStart
ZDApp_RestoreNwkKey SYMBOL "ZDApp_RestoreNwkKey"
`??ZDApp_RestoreNwkKey::?relay` SYMBOL "?relay", ZDApp_RestoreNwkKey
ZDApp_SaveNetworkStateEvt SYMBOL "ZDApp_SaveNetworkStateEvt"
`??ZDApp_SaveNetworkStateEvt::?relay` SYMBOL "?relay", ZDApp_SaveNetworkStateEvt
ZDApp_SaveNwkKey    SYMBOL "ZDApp_SaveNwkKey"
`??ZDApp_SaveNwkKey::?relay` SYMBOL "?relay", ZDApp_SaveNwkKey
ZDApp_SecInit       SYMBOL "ZDApp_SecInit"
`??ZDApp_SecInit::?relay` SYMBOL "?relay", ZDApp_SecInit
ZDApp_SendEventMsg  SYMBOL "ZDApp_SendEventMsg"
`??ZDApp_SendEventMsg::?relay` SYMBOL "?relay", ZDApp_SendEventMsg
ZDApp_SendMsg       SYMBOL "ZDApp_SendMsg"
`??ZDApp_SendMsg::?relay` SYMBOL "?relay", ZDApp_SendMsg
ZDApp_SetPendingBindDefault SYMBOL "ZDApp_SetPendingBindDefault"
`??ZDApp_SetPendingBindDefault::?relay` SYMBOL "?relay", ZDApp_SetPendingBindDefault
ZDApp_StartJoiningCycle SYMBOL "ZDApp_StartJoiningCycle"
`??ZDApp_StartJoiningCycle::?relay` SYMBOL "?relay", ZDApp_StartJoiningCycle
ZDApp_StopJoiningCycle SYMBOL "ZDApp_StopJoiningCycle"
`??ZDApp_StopJoiningCycle::?relay` SYMBOL "?relay", ZDApp_StopJoiningCycle
ZDApp_event_loop    SYMBOL "ZDApp_event_loop"
`??ZDApp_event_loop::?relay` SYMBOL "?relay", ZDApp_event_loop
ZDOInitDevice       SYMBOL "ZDOInitDevice"
`??ZDOInitDevice::?relay` SYMBOL "?relay", ZDOInitDevice
ZDO_AddrChangeIndicationCB SYMBOL "ZDO_AddrChangeIndicationCB"
`??ZDO_AddrChangeIndicationCB::?relay` SYMBOL "?relay", ZDO_AddrChangeIndicationCB
ZDO_ConcentratorIndicationCB SYMBOL "ZDO_ConcentratorIndicationCB"
`??ZDO_ConcentratorIndicationCB::?relay` SYMBOL "?relay", ZDO_ConcentratorIndicationCB
ZDO_DeregisterForZdoCB SYMBOL "ZDO_DeregisterForZdoCB"
`??ZDO_DeregisterForZdoCB::?relay` SYMBOL "?relay", ZDO_DeregisterForZdoCB
ZDO_JoinConfirmCB   SYMBOL "ZDO_JoinConfirmCB"
`??ZDO_JoinConfirmCB::?relay` SYMBOL "?relay", ZDO_JoinConfirmCB
ZDO_JoinIndicationCB SYMBOL "ZDO_JoinIndicationCB"
`??ZDO_JoinIndicationCB::?relay` SYMBOL "?relay", ZDO_JoinIndicationCB
ZDO_LeaveCnf        SYMBOL "ZDO_LeaveCnf"
`??ZDO_LeaveCnf::?relay` SYMBOL "?relay", ZDO_LeaveCnf
ZDO_LeaveInd        SYMBOL "ZDO_LeaveInd"
`??ZDO_LeaveInd::?relay` SYMBOL "?relay", ZDO_LeaveInd
ZDO_ManytoOneFailureIndicationCB SYMBOL "ZDO_ManytoOneFailureIndicationCB"
`??ZDO_ManytoOneFailureIndicationCB::?relay` SYMBOL "?relay", ZDO_ManytoOneFailureIndicationCB
ZDO_NetworkDiscoveryConfirmCB SYMBOL "ZDO_NetworkDiscoveryConfirmCB"
`??ZDO_NetworkDiscoveryConfirmCB::?relay` SYMBOL "?relay", ZDO_NetworkDiscoveryConfirmCB
ZDO_NetworkFormationConfirmCB SYMBOL "ZDO_NetworkFormationConfirmCB"
`??ZDO_NetworkFormationConfirmCB::?relay` SYMBOL "?relay", ZDO_NetworkFormationConfirmCB
ZDO_NetworkStatusCB SYMBOL "ZDO_NetworkStatusCB"
`??ZDO_NetworkStatusCB::?relay` SYMBOL "?relay", ZDO_NetworkStatusCB
ZDO_PermitJoinCB    SYMBOL "ZDO_PermitJoinCB"
`??ZDO_PermitJoinCB::?relay` SYMBOL "?relay", ZDO_PermitJoinCB
ZDO_PollConfirmCB   SYMBOL "ZDO_PollConfirmCB"
`??ZDO_PollConfirmCB::?relay` SYMBOL "?relay", ZDO_PollConfirmCB
ZDO_RegisterForZdoCB SYMBOL "ZDO_RegisterForZdoCB"
`??ZDO_RegisterForZdoCB::?relay` SYMBOL "?relay", ZDO_RegisterForZdoCB
ZDO_SrcRtgIndCB     SYMBOL "ZDO_SrcRtgIndCB"
`??ZDO_SrcRtgIndCB::?relay` SYMBOL "?relay", ZDO_SrcRtgIndCB
ZDO_StartRouterConfirmCB SYMBOL "ZDO_StartRouterConfirmCB"
`??ZDO_StartRouterConfirmCB::?relay` SYMBOL "?relay", ZDO_StartRouterConfirmCB
ZDO_SyncIndicationCB SYMBOL "ZDO_SyncIndicationCB"
`??ZDO_SyncIndicationCB::?relay` SYMBOL "?relay", ZDO_SyncIndicationCB
ZDO_UpdateDeviceIndication SYMBOL "ZDO_UpdateDeviceIndication"
`??ZDO_UpdateDeviceIndication::?relay` SYMBOL "?relay", ZDO_UpdateDeviceIndication
ZDO_beaconNotifyIndCB SYMBOL "ZDO_beaconNotifyIndCB"
`??ZDO_beaconNotifyIndCB::?relay` SYMBOL "?relay", ZDO_beaconNotifyIndCB

        EXTERN `??APSME_BindRequest::?relay`
        FUNCTION `??APSME_BindRequest::?relay`,00H
        EXTERN `??APSME_HoldDataRequests::?relay`
        FUNCTION `??APSME_HoldDataRequests::?relay`,00H
        EXTERN `??AddrMgrEntryLookupExt::?relay`
        FUNCTION `??AddrMgrEntryLookupExt::?relay`,00H
        EXTERN `??AddrMgrEntryRelease::?relay`
        FUNCTION `??AddrMgrEntryRelease::?relay`,00H
        EXTERN `??AddrMgrExtAddrSet::?relay`
        FUNCTION `??AddrMgrExtAddrSet::?relay`,00H
        EXTERN `??HalKeyRead::?relay`
        FUNCTION `??HalKeyRead::?relay`,00H
        EXTERN `??HalLedBlink::?relay`
        FUNCTION `??HalLedBlink::?relay`,00H
        EXTERN `??HalLedSet::?relay`
        FUNCTION `??HalLedSet::?relay`,00H
        EXTERN `??NLME_GetCoordShortAddr::?relay`
        FUNCTION `??NLME_GetCoordShortAddr::?relay`,00H
        EXTERN `??NLME_GetEnergyThreshold::?relay`
        FUNCTION `??NLME_GetEnergyThreshold::?relay`,00H
        EXTERN `??NLME_GetExtAddr::?relay`
        FUNCTION `??NLME_GetExtAddr::?relay`,00H
        EXTERN `??NLME_GetShortAddr::?relay`
        FUNCTION `??NLME_GetShortAddr::?relay`,00H
        EXTERN `??NLME_JoinRequest::?relay`
        FUNCTION `??NLME_JoinRequest::?relay`,00H
        EXTERN `??NLME_LeaveRsp::?relay`
        FUNCTION `??NLME_LeaveRsp::?relay`,00H
        EXTERN `??NLME_NetworkDiscoveryRequest::?relay`
        FUNCTION `??NLME_NetworkDiscoveryRequest::?relay`,00H
        EXTERN `??NLME_NwkDiscTerm::?relay`
        FUNCTION `??NLME_NwkDiscTerm::?relay`,00H
        EXTERN `??NLME_ReJoinRequest::?relay`
        FUNCTION `??NLME_ReJoinRequest::?relay`,00H
        EXTERN `??NLME_ReJoinRequestUnsecure::?relay`
        FUNCTION `??NLME_ReJoinRequestUnsecure::?relay`,00H
        EXTERN `??NLME_SetBroadcastFilter::?relay`
        FUNCTION `??NLME_SetBroadcastFilter::?relay`,00H
        EXTERN `??NLME_SetEnergyThreshold::?relay`
        FUNCTION `??NLME_SetEnergyThreshold::?relay`,00H
        EXTERN `??NLME_SetPollRate::?relay`
        FUNCTION `??NLME_SetPollRate::?relay`,00H
        EXTERN `??NLME_SetQueuedPollRate::?relay`
        FUNCTION `??NLME_SetQueuedPollRate::?relay`,00H
        EXTERN `??NLME_SetResponseRate::?relay`
        FUNCTION `??NLME_SetResponseRate::?relay`,00H
        EXTERN `??RTG_MTORouteReq::?relay`
        FUNCTION `??RTG_MTORouteReq::?relay`,00H
        EXTERN `??RTG_RemoveRtgEntry::?relay`
        FUNCTION `??RTG_RemoveRtgEntry::?relay`,00H
        EXTERN `??SSP_ReadNwkActiveKey::?relay`
        FUNCTION `??SSP_ReadNwkActiveKey::?relay`,00H
        EXTERN `??SSP_SwitchNwkKey::?relay`
        FUNCTION `??SSP_SwitchNwkKey::?relay`,00H
        EXTERN `??SSP_UpdateNwkKey::?relay`
        FUNCTION `??SSP_UpdateNwkKey::?relay`,00H
        EXTERN `??ZDConfig_InitDescriptors::?relay`
        FUNCTION `??ZDConfig_InitDescriptors::?relay`,00H
        EXTERN `??ZDO_Init::?relay`
        FUNCTION `??ZDO_Init::?relay`,00H
        EXTERN `??ZDO_ParseAddrRsp::?relay`
        FUNCTION `??ZDO_ParseAddrRsp::?relay`,00H
        EXTERN `??ZDO_ParseBindUnbindReq::?relay`
        FUNCTION `??ZDO_ParseBindUnbindReq::?relay`,00H
        EXTERN `??ZDO_ProcessBindUnbindReq::?relay`
        FUNCTION `??ZDO_ProcessBindUnbindReq::?relay`,00H
        EXTERN `??ZDO_RegisterForZDOMsg::?relay`
        FUNCTION `??ZDO_RegisterForZDOMsg::?relay`,00H
        EXTERN `??ZDO_StartDevice::?relay`
        FUNCTION `??ZDO_StartDevice::?relay`,00H
        EXTERN `??ZDO_UpdateAddrManager::?relay`
        FUNCTION `??ZDO_UpdateAddrManager::?relay`,00H
        EXTERN `??ZDO_UpdateNwkStatus::?relay`
        FUNCTION `??ZDO_UpdateNwkStatus::?relay`,00H
        EXTERN `??ZDP_DeviceAnnce::?relay`
        FUNCTION `??ZDP_DeviceAnnce::?relay`,00H
        EXTERN `??ZDP_GenericRsp::?relay`
        FUNCTION `??ZDP_GenericRsp::?relay`,00H
        EXTERN `??ZDP_IncomingData::?relay`
        FUNCTION `??ZDP_IncomingData::?relay`,00H
        EXTERN `??ZDP_SendData::?relay`
        FUNCTION `??ZDP_SendData::?relay`,00H
        EXTERN `??ZDSecMgrAddrClear::?relay`
        FUNCTION `??ZDSecMgrAddrClear::?relay`,00H
        EXTERN `??ZDSecMgrDeviceRemoveByExtAddr::?relay`
        FUNCTION `??ZDSecMgrDeviceRemoveByExtAddr::?relay`,00H
        EXTERN `??ZDSecMgrInit::?relay`
        FUNCTION `??ZDSecMgrInit::?relay`,00H
        EXTERN `??ZDSecMgrReadKeyFromNv::?relay`
        FUNCTION `??ZDSecMgrReadKeyFromNv::?relay`,00H
        EXTERN `??ZDSecMgrSaveTCLinkKey::?relay`
        FUNCTION `??ZDSecMgrSaveTCLinkKey::?relay`,00H
        EXTERN `??ZDSecMgrSwitchKeyInd::?relay`
        FUNCTION `??ZDSecMgrSwitchKeyInd::?relay`,00H
        EXTERN `??ZDSecMgrTransportKeyInd::?relay`
        FUNCTION `??ZDSecMgrTransportKeyInd::?relay`,00H
        EXTERN `??ZMacSetReq::?relay`
        FUNCTION `??ZMacSetReq::?relay`,00H
        EXTERN `??afRegister::?relay`
        FUNCTION `??afRegister::?relay`,00H
        EXTERN `??afSetMatch::?relay`
        FUNCTION `??afSetMatch::?relay`,00H
        EXTERN `??nwkNeighborFindEmptySlot::?relay`
        FUNCTION `??nwkNeighborFindEmptySlot::?relay`,00H
        EXTERN `??nwkNeighborInitTable::?relay`
        FUNCTION `??nwkNeighborInitTable::?relay`,00H
        EXTERN `??nwkNeighborRemove::?relay`
        FUNCTION `??nwkNeighborRemove::?relay`,00H
        EXTERN `??nwk_ExtPANIDValid::?relay`
        FUNCTION `??nwk_ExtPANIDValid::?relay`,00H
        EXTERN `??nwk_getNwkDescList::?relay`
        FUNCTION `??nwk_getNwkDescList::?relay`,00H
        EXTERN `??osal_clear_event::?relay`
        FUNCTION `??osal_clear_event::?relay`,00H
        EXTERN `??osal_get_timeoutEx::?relay`
        FUNCTION `??osal_get_timeoutEx::?relay`,00H
        EXTERN `??osal_mem_alloc::?relay`
        FUNCTION `??osal_mem_alloc::?relay`,00H
        EXTERN `??osal_mem_free::?relay`
        FUNCTION `??osal_mem_free::?relay`,00H
        EXTERN `??osal_memcmp::?relay`
        FUNCTION `??osal_memcmp::?relay`,00H
        EXTERN `??osal_memcpy::?relay`
        FUNCTION `??osal_memcpy::?relay`,00H
        EXTERN `??osal_memset::?relay`
        FUNCTION `??osal_memset::?relay`,00H
        EXTERN `??osal_msg_allocate::?relay`
        FUNCTION `??osal_msg_allocate::?relay`,00H
        EXTERN `??osal_msg_deallocate::?relay`
        FUNCTION `??osal_msg_deallocate::?relay`,00H
        EXTERN `??osal_msg_receive::?relay`
        FUNCTION `??osal_msg_receive::?relay`,00H
        EXTERN `??osal_msg_send::?relay`
        FUNCTION `??osal_msg_send::?relay`,00H
        EXTERN `??osal_nv_item_init::?relay`
        FUNCTION `??osal_nv_item_init::?relay`,00H
        EXTERN `??osal_nv_read::?relay`
        FUNCTION `??osal_nv_read::?relay`,00H
        EXTERN `??osal_nv_write::?relay`
        FUNCTION `??osal_nv_write::?relay`,00H
        EXTERN `??osal_pwrmgr_device::?relay`
        FUNCTION `??osal_pwrmgr_device::?relay`,00H
        EXTERN `??osal_rand::?relay`
        FUNCTION `??osal_rand::?relay`,00H
        EXTERN `??osal_set_event::?relay`
        FUNCTION `??osal_set_event::?relay`,00H
        EXTERN `??osal_start_timerEx::?relay`
        FUNCTION `??osal_start_timerEx::?relay`,00H
        EXTERN `??osal_stop_timerEx::?relay`
        FUNCTION `??osal_stop_timerEx::?relay`,00H
        EXTERN `??sAddrExtCmp::?relay`
        FUNCTION `??sAddrExtCmp::?relay`,00H
        EXTERN `??sAddrExtCpy::?relay`
        FUNCTION `??sAddrExtCpy::?relay`,00H
        EXTERN `??zgInitItems::?relay`
        FUNCTION `??zgInitItems::?relay`,00H
        EXTERN `??zgReadStartupOptions::?relay`
        FUNCTION `??zgReadStartupOptions::?relay`,00H
        EXTERN `??zgWriteStartupOptions::?relay`
        FUNCTION `??zgWriteStartupOptions::?relay`,00H
        EXTERN AIB_apsUseExtendedPANID
        EXTERN AIB_apsUseInsecureJoin
        EXTERN APSME_BindRequest
        FUNCTION APSME_BindRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN APSME_HoldDataRequests
        FUNCTION APSME_HoldDataRequests,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AddrMgrEntryLookupExt
        FUNCTION AddrMgrEntryLookupExt,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AddrMgrEntryRelease
        FUNCTION AddrMgrEntryRelease,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AddrMgrExtAddrSet
        FUNCTION AddrMgrExtAddrSet,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalKeyRead
        FUNCTION HalKeyRead,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLedBlink
        FUNCTION HalLedBlink,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLedSet
        FUNCTION HalLedSet,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetCoordShortAddr
        FUNCTION NLME_GetCoordShortAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetEnergyThreshold
        FUNCTION NLME_GetEnergyThreshold,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetExtAddr
        FUNCTION NLME_GetExtAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetShortAddr
        FUNCTION NLME_GetShortAddr,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_JoinRequest
        FUNCTION NLME_JoinRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_LeaveRsp
        FUNCTION NLME_LeaveRsp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_NetworkDiscoveryRequest
        FUNCTION NLME_NetworkDiscoveryRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_NwkDiscTerm
        FUNCTION NLME_NwkDiscTerm,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_ReJoinRequest
        FUNCTION NLME_ReJoinRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_ReJoinRequestUnsecure
        FUNCTION NLME_ReJoinRequestUnsecure,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_SetBroadcastFilter
        FUNCTION NLME_SetBroadcastFilter,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_SetEnergyThreshold
        FUNCTION NLME_SetEnergyThreshold,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_SetPollRate
        FUNCTION NLME_SetPollRate,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_SetQueuedPollRate
        FUNCTION NLME_SetQueuedPollRate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_SetResponseRate
        FUNCTION NLME_SetResponseRate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NWK_TaskID
        EXTERN NwkDescList
        EXTERN Onboard_soft_reset
        FUNCTION Onboard_soft_reset,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN RTG_MTORouteReq
        FUNCTION RTG_MTORouteReq,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN RTG_RemoveRtgEntry
        FUNCTION RTG_RemoveRtgEntry,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN SSP_ReadNwkActiveKey
        FUNCTION SSP_ReadNwkActiveKey,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN SSP_SwitchNwkKey
        FUNCTION SSP_SwitchNwkKey,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN SSP_UpdateNwkKey
        FUNCTION SSP_UpdateNwkKey,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDConfig_InitDescriptors
        FUNCTION ZDConfig_InitDescriptors,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_Config_Node_Descriptor
        EXTERN ZDO_Init
        FUNCTION ZDO_Init,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_ParseAddrRsp
        FUNCTION ZDO_ParseAddrRsp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_ParseBindUnbindReq
        FUNCTION ZDO_ParseBindUnbindReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_ProcessBindUnbindReq
        FUNCTION ZDO_ProcessBindUnbindReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_RegisterForZDOMsg
        FUNCTION ZDO_RegisterForZDOMsg,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_StartDevice
        FUNCTION ZDO_StartDevice,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_UpdateAddrManager
        FUNCTION ZDO_UpdateAddrManager,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_UpdateNwkStatus
        FUNCTION ZDO_UpdateNwkStatus,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_DeviceAnnce
        FUNCTION ZDP_DeviceAnnce,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_GenericRsp
        FUNCTION ZDP_GenericRsp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_IncomingData
        FUNCTION ZDP_IncomingData,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_SendData
        FUNCTION ZDP_SendData,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDSecMgrAddrClear
        FUNCTION ZDSecMgrAddrClear,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDSecMgrDeviceRemoveByExtAddr
        FUNCTION ZDSecMgrDeviceRemoveByExtAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDSecMgrInit
        FUNCTION ZDSecMgrInit,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDSecMgrReadKeyFromNv
        FUNCTION ZDSecMgrReadKeyFromNv,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDSecMgrSaveTCLinkKey
        FUNCTION ZDSecMgrSaveTCLinkKey,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDSecMgrSwitchKeyInd
        FUNCTION ZDSecMgrSwitchKeyInd,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDSecMgrTransportKeyInd
        FUNCTION ZDSecMgrTransportKeyInd,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZMacSetReq
        FUNCTION ZMacSetReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN _NIB
        EXTERN afRegister
        FUNCTION afRegister,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN afSetMatch
        FUNCTION afSetMatch,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN epList
        EXTERN gLINK_DOWN_TRIGGER
        EXTERN gMIN_TREE_LQI
        EXTERN nwkFrameCounter
        EXTERN nwkFrameCounterChanges
        EXTERN nwkNeighborFindEmptySlot
        FUNCTION nwkNeighborFindEmptySlot,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN nwkNeighborInitTable
        FUNCTION nwkNeighborInitTable,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN nwkNeighborRemove
        FUNCTION nwkNeighborRemove,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN nwk_ExtPANIDValid
        FUNCTION nwk_ExtPANIDValid,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN nwk_getNwkDescList
        FUNCTION nwk_getNwkDescList,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_clear_event
        FUNCTION osal_clear_event,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_get_timeoutEx
        FUNCTION osal_get_timeoutEx,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_alloc
        FUNCTION osal_mem_alloc,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_free
        FUNCTION osal_mem_free,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcmp
        FUNCTION osal_memcmp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 52, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memset
        FUNCTION osal_memset,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 49, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_allocate
        FUNCTION osal_msg_allocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_receive
        FUNCTION osal_msg_receive,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_send
        FUNCTION osal_msg_send,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_item_init
        FUNCTION osal_nv_item_init,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_read
        FUNCTION osal_nv_read,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 53, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_write
        FUNCTION osal_nv_write,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 53, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_pwrmgr_device
        FUNCTION osal_pwrmgr_device,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_rand
        FUNCTION osal_rand,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_set_event
        FUNCTION osal_set_event,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_stop_timerEx
        FUNCTION osal_stop_timerEx,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN pbindRemoveDev
        EXTERN sAddrExtCmp
        FUNCTION sAddrExtCmp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN sAddrExtCpy
        FUNCTION sAddrExtCpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zgChildAgingEnable
        EXTERN zgConcentratorDiscoveryTime
        EXTERN zgConcentratorEnable
        EXTERN zgConfigPANID
        EXTERN zgDefaultStartingScanDuration
        EXTERN zgDeviceLogicalType
        EXTERN zgInitItems
        FUNCTION zgInitItems,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zgPollRate
        EXTERN zgPreConfigKeys
        EXTERN zgReadStartupOptions
        FUNCTION zgReadStartupOptions,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zgRejoinPollRate
        EXTERN zgSecurityMode
        EXTERN zgStackProfile
        EXTERN zgWriteStartupOptions
        FUNCTION zgWriteStartupOptions,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC

// E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh 1.0.0\Components\stack\zdo\ZDApp.c
//    1 /**************************************************************************************************
//    2   Filename:       ZDApp.c
//    3   Revised:        $Date: 2014-06-03 18:29:46 -0700 (Tue, 03 Jun 2014) $
//    4   Revision:       $Revision: 38789 $
//    5 
//    6   Description:    This file contains the interface to the Zigbee Device Application. This is the
//    7                   Application part that the user can change. This also contains the Task functions.
//    8 
//    9 
//   10   Copyright 2004-2014 Texas Instruments Incorporated. All rights reserved.
//   11 
//   12   IMPORTANT: Your use of this Software is limited to those specific rights
//   13   granted under the terms of a software license agreement between the user
//   14   who downloaded the software, his/her employer (which must be your employer)
//   15   and Texas Instruments Incorporated (the "License"). You may not use this
//   16   Software unless you agree to abide by the terms of the License. The License
//   17   limits your use, and you acknowledge, that the Software may not be modified,
//   18   copied or distributed unless embedded on a Texas Instruments microcontroller
//   19   or used solely and exclusively in conjunction with a Texas Instruments radio
//   20   frequency transceiver, which is integrated into your product. Other than for
//   21   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   22   works of, modify, distribute, perform, display or sell this Software and/or
//   23   its documentation for any purpose.
//   24 
//   25   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   26   PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   27   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   28   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   29   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   30   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   31   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   32   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   33   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   34   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   35   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   36 
//   37   Should you have any questions regarding your right to use this Software,
//   38   contact Texas Instruments Incorporated at www.TI.com.
//   39 **************************************************************************************************/
//   40 
//   41 /*********************************************************************
//   42  * INCLUDES
//   43  */
//   44 
//   45 #include "ZComDef.h"
//   46 #include "ZMAC.h"
//   47 #include "OSAL.h"
//   48 #include "OSAL_Tasks.h"
//   49 #include "OSAL_PwrMgr.h"
//   50 #include "OSAL_Nv.h"
//   51 #include "AF.h"
//   52 #include "APSMEDE.h"
//   53 #include "NLMEDE.h"
//   54 #include "AddrMgr.h"
//   55 #include "ZDProfile.h"
//   56 #include "ZDObject.h"
//   57 #include "ZDConfig.h"
//   58 #include "ZDSecMgr.h"
//   59 #include "ZDApp.h"
//   60 #include "DebugTrace.h"
//   61 #include "nwk_util.h"
//   62 #include "OnBoard.h"
//   63 #include "ZGlobals.h"
//   64 #include "ZDNwkMgr.h"
//   65 #include "rtg.h"
//   66 
//   67 #include "ssp.h"
//   68 
//   69 /* HAL */
//   70 #include "hal_led.h"
//   71 #include "hal_lcd.h"
//   72 #include "hal_key.h"
//   73 
//   74 #if defined( MT_MAC_FUNC ) || defined( MT_MAC_CB_FUNC )
//   75   #error "ERROR! MT_MAC functionalities should be disabled on ZDO devices"
//   76 #endif
//   77 
//   78 /*********************************************************************
//   79  * CONSTANTS
//   80  */
//   81 
//   82 #if !defined( NWK_START_DELAY )
//   83   #define NWK_START_DELAY             100   // in milliseconds
//   84 #endif
//   85 
//   86 #if !defined( LEAVE_RESET_DELAY )
//   87   #define LEAVE_RESET_DELAY           5000  // in milliseconds
//   88 #endif
//   89 
//   90 // Init ZDO, but hold and wait for application to start the joining or
//   91 // forming network
//   92 #define ZDO_INIT_HOLD_NWK_START       0xFFFF
//   93 
//   94 #if !defined( EXTENDED_JOINING_RANDOM_MASK )
//   95   #define EXTENDED_JOINING_RANDOM_MASK 0x007F
//   96 #endif
//   97 
//   98 #if !defined( BEACON_REQUEST_DELAY )
//   99   #define BEACON_REQUEST_DELAY        100   // in milliseconds
//  100 #endif
//  101 
//  102 #if !defined( BEACON_REQ_DELAY_MASK )
//  103   #define BEACON_REQ_DELAY_MASK       0x007F
//  104 #endif
//  105 
//  106 #define MAX_RESUME_RETRY            3
//  107 
//  108 #define MAX_DEVICE_UNAUTH_TIMEOUT   10000  // 10 seconds
//  109 
//  110 // Beacon Order Settings (see NLMEDE.h)
//  111 #define DEFAULT_BEACON_ORDER        BEACON_ORDER_NO_BEACONS
//  112 #define DEFAULT_SUPERFRAME_ORDER    DEFAULT_BEACON_ORDER
//  113 
//  114 #if !defined( NWK_FRAMECOUNTER_CHANGES_RESTORE_DELTA )
//  115 // Additional counts to add to the frame counter when restoring from NV
//  116 // This amount is in addition to MAX_NWK_FRAMECOUNTER_CHANGES
//  117 #define NWK_FRAMECOUNTER_CHANGES_RESTORE_DELTA    250
//  118 #endif
//  119 
//  120 // Leave control bits
//  121 #define ZDAPP_LEAVE_CTRL_INIT 0
//  122 #define ZDAPP_LEAVE_CTRL_SET  1
//  123 #define ZDAPP_LEAVE_CTRL_RA   2
//  124 
//  125 // Address Manager Stub Implementation
//  126 #define ZDApp_NwkWriteNVRequest AddrMgrWriteNVRequest
//  127 
//  128 
//  129 #if !defined ZDO_NV_SAVE_RFDs
//  130 #define ZDO_NV_SAVE_RFDs  TRUE
//  131 #endif
//  132 
//  133 // Delay time before updating NWK NV data to force fewer writes during high activity.
//  134 #if ZDO_NV_SAVE_RFDs
//  135 #define ZDAPP_UPDATE_NWK_NV_TIME 700
//  136 #else
//  137 #define ZDAPP_UPDATE_NWK_NV_TIME 65000
//  138 #endif
//  139 
//  140 // Timeout value to process New Devices
//  141 #define ZDAPP_NEW_DEVICE_TIME     600   // in ms
//  142 
//  143 #if !defined ( ZDP_BIND_SKIP_VALIDATION )
//  144 #if !defined MAX_PENDING_BIND_REQ
//  145 #define MAX_PENDING_BIND_REQ 3
//  146 #endif
//  147 #endif
//  148 
//  149 /******************************************************************************
//  150  * TYPEDEFS
//  151  */
//  152 typedef struct
//  153 {
//  154   void   *next;
//  155   uint16 shortAddr;
//  156   uint16 timeDelta;
//  157 } ZDAppNewDevice_t;
//  158 
//  159 /*********************************************************************
//  160  * GLOBAL VARIABLES
//  161  */
//  162 
//  163 #if defined( LCD_SUPPORTED )
//  164   uint8 MatchRsps = 0;
//  165 #endif
//  166 

        RSEG XDATA_I:XDATA:NOROOT(0)
//  167 uint8 zdoDiscCounter = 1;
zdoDiscCounter:
        DATA8
        DS 1
        REQUIRE `?<Initializer for zdoDiscCounter>`
        REQUIRE __INIT_XDATA_I
//  168 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  169 zAddrType_t ZDAppNwkAddr;
ZDAppNwkAddr:
        DS 9
        REQUIRE __INIT_XDATA_Z
//  170 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  171 uint8 zdappMgmtNwkDiscRspTransSeq;
zdappMgmtNwkDiscRspTransSeq:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  172 uint8 zdappMgmtNwkDiscReqInProgress = FALSE;
zdappMgmtNwkDiscReqInProgress:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  173 zAddrType_t zdappMgmtNwkDiscRspAddr;
zdappMgmtNwkDiscRspAddr:
        DS 9
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  174 uint8 zdappMgmtNwkDiscStartIndex;
zdappMgmtNwkDiscStartIndex:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  175 uint8 zdappMgmtSavedNwkState;
zdappMgmtSavedNwkState:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  176 

        RSEG XDATA_I:XDATA:NOROOT(0)
//  177 uint8 continueJoining = TRUE;
continueJoining:
        DATA8
        DS 1
        REQUIRE `?<Initializer for continueJoining>`
        REQUIRE __INIT_XDATA_I
//  178 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  179 uint8  _tmpRejoinState;
_tmpRejoinState:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  180 
//  181 // The extended PanID used in ZDO layer for rejoin.

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  182 uint8 ZDO_UseExtendedPANID[Z_EXTADDR_LEN];
ZDO_UseExtendedPANID:
        DS 8
        REQUIRE __INIT_XDATA_Z
//  183 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  184 pfnZdoCb zdoCBFunc[MAX_ZDO_CB_FUNC];
zdoCBFunc:
        DS 18
        REQUIRE __INIT_XDATA_Z
//  185 
//  186 #if !defined ( ZDP_BIND_SKIP_VALIDATION )

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  187 ZDO_PendingBindReq_t *ZDAppPendingBindReq = NULL;
ZDAppPendingBindReq:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  188 #endif
//  189 
//  190 /*********************************************************************
//  191  * EXTERNAL VARIABLES
//  192  */
//  193 
//  194 /*********************************************************************
//  195  * EXTERNAL FUNCTIONS
//  196  */
//  197 
//  198 /*********************************************************************
//  199  * LOCAL FUNCTIONS
//  200  */
//  201 
//  202 void ZDApp_NetworkStartEvt( void );
//  203 void ZDApp_DeviceAuthEvt( void );
//  204 void ZDApp_SaveNetworkStateEvt( void );
//  205 
//  206 uint8 ZDApp_ReadNetworkRestoreState( void );
//  207 uint8 ZDApp_RestoreNetworkState( void );
//  208 void ZDAppDetermineDeviceType( void );
//  209 void ZDApp_InitUserDesc( void );
//  210 void ZDAppCheckForHoldKey( void );
//  211 void ZDApp_ProcessOSALMsg( osal_event_hdr_t *msgPtr );
//  212 void ZDApp_ProcessNetworkJoin( void );
//  213 void ZDApp_SetCoordAddress( uint8 endPoint, uint8 dstEP );
//  214 uint8 ZDApp_RestoreNwkKey( void );
//  215 networkDesc_t* ZDApp_NwkDescListProcessing(void);
//  216 
//  217 void ZDApp_SecInit( uint8 state );
//  218 UINT16 ZDApp_ProcessSecEvent( uint8 task_id, UINT16 events );
//  219 void ZDApp_ProcessSecMsg( osal_event_hdr_t *msgPtr );
//  220 
//  221 void ZDApp_SendMsg( uint8 taskID, uint8 cmd, uint8 len, uint8 *buf );
//  222 
//  223 void ZDApp_ResetTimerStart( uint16 delay );
//  224 void ZDApp_ResetTimerCancel( void );
//  225 void ZDApp_LeaveCtrlInit( void );
//  226 void ZDApp_LeaveCtrlSet( uint8 ra );
//  227 uint8 ZDApp_LeaveCtrlBypass( void );
//  228 void ZDApp_LeaveCtrlStartup( devStates_t* state, uint16* startDelay );
//  229 void ZDApp_LeaveUpdate( uint16 nwkAddr, uint8* extAddr,
//  230                         uint8 removeChildren );
//  231 void ZDApp_NodeProfileSync( uint8 stackProfile );
//  232 void ZDApp_ProcessMsgCBs( zdoIncomingMsg_t *inMsg );
//  233 void ZDApp_RegisterCBs( void );
//  234 void ZDApp_InitZdoCBFunc(void);
//  235 #if !defined ( ZDP_BIND_SKIP_VALIDATION )
//  236 void ZDApp_SetPendingBindDefault( ZDO_PendingBindReq_t *pendBindReq );
//  237 void ZDApp_InitPendingBind( void );
//  238 void ZDApp_ProcessPendingBindReq( uint8 *extAddr );
//  239 void ZDApp_AgeOutPendingBindEntry( void );
//  240 #endif
//  241 
//  242 /*********************************************************************
//  243  * LOCAL VARIABLES
//  244  */
//  245 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  246 uint8 ZDAppTaskID;
ZDAppTaskID:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  247 uint8 nwkStatus;
nwkStatus:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  248 endPointDesc_t *ZDApp_AutoFindMode_epDesc = (endPointDesc_t *)NULL;
ZDApp_AutoFindMode_epDesc:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  249 uint8 ZDApp_LeaveCtrl;
ZDApp_LeaveCtrl:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  250 
//  251 #if defined( HOLD_AUTO_START )

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  252   devStates_t devState = DEV_HOLD;
devState:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  253 #else
//  254   devStates_t devState = DEV_INIT;
//  255 #endif
//  256 
//  257 #if ( ZG_BUILD_RTRONLY_TYPE ) || ( ZG_BUILD_ENDDEVICE_TYPE )

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  258   devStartModes_t devStartMode = MODE_JOIN;     // Assume joining
devStartMode:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  259   //devStartModes_t devStartMode = MODE_RESUME; // if already "directly joined"
//  260                         // to parent. Set to make the device do an Orphan scan.
//  261 #else
//  262   // Set the default to coodinator
//  263   devStartModes_t devStartMode = MODE_HARD;
//  264 #endif
//  265 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  266 uint8 retryCnt;
retryCnt:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  267 

        RSEG XDATA_I:XDATA:NOROOT(0)
//  268 endPointDesc_t ZDApp_epDesc =
ZDApp_epDesc:
        DATA8
        DS 6
        REQUIRE `?<Initializer for ZDApp_epDesc>`
        REQUIRE __INIT_XDATA_I
//  269 {
//  270   ZDO_EP,
//  271   &ZDAppTaskID,
//  272   (SimpleDescriptionFormat_t *)NULL,  // No Simple description for ZDO
//  273   (afNetworkLatencyReq_t)0            // No Network Latency req
//  274 };
//  275 

        RSEG XDATA_I:XDATA:NOROOT(0)
//  276 uint16 ZDApp_SavedPollRate = POLL_RATE;
ZDApp_SavedPollRate:
        DATA16
        DS 2
        REQUIRE `?<Initializer for ZDApp_SavedPollRate>`
        REQUIRE __INIT_XDATA_I
//  277 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  278 ZDAppNewDevice_t *ZDApp_NewDeviceList = NULL;
ZDApp_NewDeviceList:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  279 
//  280 /* "Hold Key" status saved during ZDAppCheckForHoldKey() */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  281 static uint8 zdappHoldKeys;
zdappHoldKeys:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  282 
//  283 /*********************************************************************
//  284  * @fn      ZDApp_Init
//  285  *
//  286  * @brief   ZDApp Initialization function.
//  287  *
//  288  * @param   task_id - ZDApp Task ID
//  289  *
//  290  * @return  None
//  291  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  292 void ZDApp_Init( uint8 task_id )
ZDApp_Init:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function ZDApp_Init
        CODE
//  293 {
        FUNCALL ZDApp_Init, NLME_GetExtAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_Init, ZDAppCheckForHoldKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_Init, ZDO_Init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_Init, afRegister
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_Init, ZDOInitDevice
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_Init, ZDOInitDevice
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_Init, HalLedBlink
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_Init, ZDApp_InitZdoCBFunc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_Init, ZDApp_RegisterCBs
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_Init, ZDApp_InitPendingBind
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
//  294   // Save the task ID
//  295   ZDAppTaskID = task_id;
        MOV     DPTR,#ZDAppTaskID
        MOVX    @DPTR,A
//  296 
//  297   // Initialize the ZDO global device short address storage
//  298   ZDAppNwkAddr.addrMode = Addr16Bit;
        MOV     DPTR,#ZDAppNwkAddr + 8
        MOV     A,#0x2
        MOVX    @DPTR,A
//  299   ZDAppNwkAddr.addr.shortAddr = INVALID_NODE_ADDR;
        MOV     DPTR,#ZDAppNwkAddr
        MOV     A,#-0x2
        MOVX    @DPTR,A
        INC     DPTR
        INC     A
        MOVX    @DPTR,A
//  300   (void)NLME_GetExtAddr();  // Load the saveExtAddr pointer.
        ; Setup parameters for call to function NLME_GetExtAddr
        LCALL   `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
//  301 
//  302   // Check for manual "Hold Auto Start"
//  303   ZDAppCheckForHoldKey();
        ; Setup parameters for call to function ZDAppCheckForHoldKey
        LCALL   `??ZDAppCheckForHoldKey::?relay`; Banked call to: ZDAppCheckForHoldKey
//  304 
//  305   // Initialize ZDO items and setup the device - type of device to create.
//  306   ZDO_Init();
        ; Setup parameters for call to function ZDO_Init
        LCALL   `??ZDO_Init::?relay` ; Banked call to: ZDO_Init
//  307 
//  308   // Register the endpoint description with the AF
//  309   // This task doesn't have a Simple description, but we still need
//  310   // to register the endpoint.
//  311   afRegister( (endPointDesc_t *)&ZDApp_epDesc );
        ; Setup parameters for call to function afRegister
        MOV     R2,#ZDApp_epDesc & 0xff
        MOV     R3,#(ZDApp_epDesc >> 8) & 0xff
        LCALL   `??afRegister::?relay`; Banked call to: afRegister
//  312 
//  313 #if defined( ZDO_USERDESC_RESPONSE )
//  314   ZDApp_InitUserDesc();
//  315 #endif // ZDO_USERDESC_RESPONSE
//  316 
//  317   // Start the device?
//  318   if ( devState != DEV_HOLD )
        MOV     DPTR,#devState
        MOVX    A,@DPTR
        JZ      ??ZDApp_Init_0
//  319   {
//  320     ZDOInitDevice( 0 );
        ; Setup parameters for call to function ZDOInitDevice
        MOV     R2,#0x0
        MOV     R3,#0x0
        LCALL   `??ZDOInitDevice::?relay`; Banked call to: ZDOInitDevice
        SJMP    ??ZDApp_Init_1
//  321   }
//  322   else
//  323   {
//  324     ZDOInitDevice( ZDO_INIT_HOLD_NWK_START );
??ZDApp_Init_0:
        ; Setup parameters for call to function ZDOInitDevice
        MOV     R2,#-0x1
        MOV     R3,#-0x1
        LCALL   `??ZDOInitDevice::?relay`; Banked call to: ZDOInitDevice
//  325     // Blink LED to indicate HOLD_START
//  326     HalLedBlink ( HAL_LED_4, 0, 50, 500 );
        ; Setup parameters for call to function HalLedBlink
        MOV     R4,#-0xc
        MOV     R5,#0x1
        MOV     R3,#0x32
        MOV     R2,#0x0
        MOV     R1,#0x8
        LCALL   `??HalLedBlink::?relay`; Banked call to: HalLedBlink
//  327   }
//  328 
//  329   // Initialize the ZDO callback function pointers zdoCBFunc[]
//  330   ZDApp_InitZdoCBFunc();
??ZDApp_Init_1:
        ; Setup parameters for call to function ZDApp_InitZdoCBFunc
        LCALL   `??ZDApp_InitZdoCBFunc::?relay`; Banked call to: ZDApp_InitZdoCBFunc
//  331 
//  332   ZDApp_RegisterCBs();
        ; Setup parameters for call to function ZDApp_RegisterCBs
        LCALL   `??ZDApp_RegisterCBs::?relay`; Banked call to: ZDApp_RegisterCBs
//  333 
//  334 #if !defined ( ZDP_BIND_SKIP_VALIDATION )
//  335 #if defined ( REFLECTOR )
//  336   ZDApp_InitPendingBind();
        ; Setup parameters for call to function ZDApp_InitPendingBind
        LCALL   `??ZDApp_InitPendingBind::?relay`; Banked call to: ZDApp_InitPendingBind
//  337 #endif
//  338 #endif
//  339 } /* ZDApp_Init() */
        LJMP    ??Subroutine55_0 & 0xFFFF
          CFI EndBlock cfiBlock0
//  340 
//  341 /*********************************************************************
//  342  * @fn          ZDApp_SecInit
//  343  *
//  344  * @brief       ZDApp initialize security.
//  345  *
//  346  * @param       state - device initialization state
//  347  *
//  348  * @return      none
//  349  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  350 void ZDApp_SecInit( uint8 state )
ZDApp_SecInit:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function ZDApp_SecInit
        CODE
//  351 {
        FUNCALL ZDApp_SecInit, ZDSecMgrInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_SecInit, ZDSecMgrReadKeyFromNv
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_SecInit, SSP_UpdateNwkKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_SecInit, SSP_SwitchNwkKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_SecInit, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_SecInit, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 16
        MOV     A,#-0x10
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 25)
        MOV     ?V0,R1
//  352   uint8 zgPreConfigKey[SEC_KEY_LEN];
//  353 
//  354   if ( ZG_SECURE_ENABLED && ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
//  355   {
//  356     // Set the Trust Center bit
//  357     ZDO_Config_Node_Descriptor.ServerMask |= PRIM_TRUST_CENTER;
//  358   }
//  359 
//  360   // Initialize ZigBee Device Security Manager
//  361   ZDSecMgrInit(state);
        ; Setup parameters for call to function ZDSecMgrInit
        LCALL   `??ZDSecMgrInit::?relay`; Banked call to: ZDSecMgrInit
//  362 
//  363   if ( ZG_SECURE_ENABLED )
//  364   {
//  365     if ( state != ZDO_INITDEV_RESTORED_NETWORK_STATE )
        MOV     A,?V0
        JZ      ??ZDApp_SecInit_0
//  366     {
//  367       nwkFrameCounter = 0;
        MOV     DPTR,#nwkFrameCounter
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  368 
//  369       if( _NIB.nwkKeyLoaded == FALSE )
        MOV     DPTR,#_NIB + 61
        MOVX    A,@DPTR
        JNZ     ??ZDApp_SecInit_0
//  370       {
//  371         if ( ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE          ) ||
//  372              ( ( zgSecurityMode == ZG_SECURITY_RESIDENTIAL ) && zgPreConfigKeys )    )
        MOV     DPTR,#zgSecurityMode
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??ZDApp_SecInit_0
        MOV     DPTR,#zgPreConfigKeys
        MOVX    A,@DPTR
        JZ      ??ZDApp_SecInit_0
//  373         {
//  374             ZDSecMgrReadKeyFromNv(ZCD_NV_PRECFGKEY, zgPreConfigKey);
        ; Setup parameters for call to function ZDSecMgrReadKeyFromNv
        MOV     R4,?XSP + 0
        MOV     R5,?XSP + 1
        MOV     R2,#0x62
        MOV     R3,#0x0
        LCALL   `??ZDSecMgrReadKeyFromNv::?relay`; Banked call to: ZDSecMgrReadKeyFromNv
//  375             SSP_UpdateNwkKey( zgPreConfigKey, 0);
        ; Setup parameters for call to function SSP_UpdateNwkKey
        MOV     R1,#0x0
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??SSP_UpdateNwkKey::?relay`; Banked call to: SSP_UpdateNwkKey
//  376             SSP_SwitchNwkKey( 0 );
        ; Setup parameters for call to function SSP_SwitchNwkKey
        MOV     R1,#0x0
        LCALL   `??SSP_SwitchNwkKey::?relay`; Banked call to: SSP_SwitchNwkKey
//  377 
//  378             // clear local copy of key
//  379             osal_memset(zgPreConfigKey, 0x00, SEC_KEY_LEN);
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x10
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
//  380         }
//  381       }
//  382     }
//  383 
//  384     // clean the new devices list when Security module is initialized
//  385     if ( ZDApp_NewDeviceList != NULL )
??ZDApp_SecInit_0:
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_131:
        JZ      ??ZDApp_SecInit_1
//  386     {
//  387       ZDAppNewDevice_t *pNewDeviceNext;
//  388 
//  389       while ( ZDApp_NewDeviceList )
//  390       {
//  391         pNewDeviceNext = (ZDAppNewDevice_t *) ZDApp_NewDeviceList->next;
??ZDApp_SecInit_2:
        MOV     DPTR,#ZDApp_NewDeviceList
        LCALL   ??Subroutine58_0 & 0xFFFF
??CrossCallReturnLabel_88:
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
//  392         osal_mem_free( ZDApp_NewDeviceList );
        ; Setup parameters for call to function osal_mem_free
        MOV     DPTR,#ZDApp_NewDeviceList
        LCALL   ?Subroutine24 & 0xFFFF
??CrossCallReturnLabel_17:
        LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
//  393         ZDApp_NewDeviceList = pNewDeviceNext;
        MOV     DPTR,#ZDApp_NewDeviceList
        MOV     A,R6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R7
        MOVX    @DPTR,A
//  394       }
        LCALL   ?Subroutine13 & 0xFFFF
//  395     }
//  396   }
??CrossCallReturnLabel_132:
        JNZ     ??ZDApp_SecInit_2
//  397 }
??ZDApp_SecInit_1:
        MOV     A,#0x10
        LJMP    ??Subroutine62_0 & 0xFFFF
          CFI EndBlock cfiBlock1
//  398 
//  399 /*********************************************************************
//  400  * @fn      ZDApp_event_loop()
//  401  *
//  402  * @brief   Main event loop for Zigbee device objects task. This function
//  403  *          should be called at periodic intervals.
//  404  *
//  405  * @param   task_id - Task ID
//  406  * @param   events  - Bitmap of events
//  407  *
//  408  * @return  none
//  409  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  410 UINT16 ZDApp_event_loop( uint8 task_id, UINT16 events )
ZDApp_event_loop:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI Function ZDApp_event_loop
        CODE
//  411 {
        FUNCALL ZDApp_event_loop, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_event_loop, ZDO_StartDevice
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_event_loop, ZDApp_ProcessOSALMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_event_loop, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_event_loop, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_event_loop, ZDO_UpdateNwkStatus
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_event_loop, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_event_loop, zgWriteStartupOptions
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_event_loop, Onboard_soft_reset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_event_loop, ZDApp_AgeOutPendingBindEntry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_event_loop, ZDApp_ProcessSecEvent
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V4
        REQUIRE ?V5
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV     ?V2,R1
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  412   uint8 *msg_ptr;
//  413 
//  414   if ( events & SYS_EVENT_MSG )
        ANL     A,#0x80
        JNZ     ??ZDApp_event_loop_0
//  415   {
//  416     while ( (msg_ptr = osal_msg_receive( ZDAppTaskID )) )
//  417     {
//  418       ZDApp_ProcessOSALMsg( (osal_event_hdr_t *)msg_ptr );
//  419 
//  420       // Release the memory
//  421       osal_msg_deallocate( msg_ptr );
//  422     }
//  423 
//  424     // Return unprocessed events
//  425     return (events ^ SYS_EVENT_MSG);
//  426   }
//  427 
//  428   if ( events & ZDO_NETWORK_INIT )
        MOV     A,R6
        MOV     C,0xE0 /* A   */.0
        JNC     ??ZDApp_event_loop_1
//  429   {
//  430     // Initialize apps and start the network
//  431     devState = DEV_INIT;
        MOV     DPTR,#devState
        MOV     A,#0x1
        LCALL   ??Subroutine49_0 & 0xFFFF
//  432     osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
??CrossCallReturnLabel_72:
        LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
//  433 
//  434     ZDO_StartDevice( (uint8)ZDO_Config_Node_Descriptor.LogicalType, devStartMode,
//  435                      DEFAULT_BEACON_ORDER, DEFAULT_SUPERFRAME_ORDER );
        ; Setup parameters for call to function ZDO_StartDevice
        MOV     R4,#0xf
        MOV     R3,#0xf
        MOV     DPTR,#devStartMode
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     DPTR,#ZDO_Config_Node_Descriptor
        MOVX    A,@DPTR
        ANL     A,#0x7
        MOV     R1,A
        LCALL   `??ZDO_StartDevice::?relay`; Banked call to: ZDO_StartDevice
//  436 
//  437     // Return unprocessed events
//  438     return (events ^ ZDO_NETWORK_INIT);
        MOV     A,R6
        XRL     A,#0x1
        SJMP    ??ZDApp_event_loop_2
//  439   }
??ZDApp_event_loop_3:
        ; Setup parameters for call to function ZDApp_ProcessOSALMsg
        LCALL   `??ZDApp_ProcessOSALMsg::?relay`; Banked call to: ZDApp_ProcessOSALMsg
        ; Setup parameters for call to function osal_msg_deallocate
        MOV     R2,?V0
        MOV     R3,?V1
        LCALL   `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
??ZDApp_event_loop_0:
        ; Setup parameters for call to function osal_msg_receive
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     A,R2
        ORL     A,?V1
        JNZ     ??ZDApp_event_loop_3
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        XRL     A,#0x80
        SJMP    ??ZDApp_event_loop_4
//  440 
//  441   if ( ZSTACK_ROUTER_BUILD )
//  442   {
//  443     if ( events & ZDO_NETWORK_START )
//  444     {
//  445       ZDApp_NetworkStartEvt();
//  446 
//  447       // Return unprocessed events
//  448       return (events ^ ZDO_NETWORK_START);
//  449     }
//  450 
//  451     if ( events & ZDO_ROUTER_START )
//  452     {
//  453       if ( nwkStatus == ZSuccess )
//  454       {
//  455         if ( devState == DEV_END_DEVICE )
//  456           devState = DEV_ROUTER;
//  457 
//  458         osal_pwrmgr_device( PWRMGR_ALWAYS_ON );
//  459       }
//  460       else
//  461       {
//  462         // remain as end device
//  463       }
//  464       osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
//  465 
//  466       // Return unprocessed events
//  467       return (events ^ ZDO_ROUTER_START);
//  468     }
//  469   }
//  470 
//  471   if ( events & ZDO_STATE_CHANGE_EVT )
??ZDApp_event_loop_1:
        ANL     A,#0x10
        JZ      ??ZDApp_event_loop_5
//  472   {
//  473     ZDO_UpdateNwkStatus( devState );
        ; Setup parameters for call to function ZDO_UpdateNwkStatus
        MOV     DPTR,#devState
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??ZDO_UpdateNwkStatus::?relay`; Banked call to: ZDO_UpdateNwkStatus
//  474 
//  475     // At start up, do one MTO route discovery if the device is a concentrator
//  476     if ( zgConcentratorEnable == TRUE )
        MOV     DPTR,#zgConcentratorEnable
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??ZDApp_event_loop_6
//  477     {
//  478       // Start next event
//  479       osal_start_timerEx( NWK_TaskID, NWK_MTO_RTG_REQ_EVT, 100 );
        ; Setup parameters for call to function osal_start_timerEx
        MOV     DPTR,#__Constant_64
        LCALL   ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 18)
        MOV     R2,#0x0
        MOV     R3,#0x8
        MOV     DPTR,#NWK_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
//  480     }
//  481 
//  482     // Return unprocessed events
//  483     return (events ^ ZDO_STATE_CHANGE_EVT);
??ZDApp_event_loop_6:
        MOV     A,R6
        XRL     A,#0x10
??ZDApp_event_loop_2:
        MOV     R2,A
        MOV     A,R7
        SJMP    ??ZDApp_event_loop_4
//  484   }
//  485 
//  486   if ( events & ZDO_COMMAND_CNF )
??ZDApp_event_loop_5:
        MOV     A,R6
        ANL     A,#0x8
        JZ      ??ZDApp_event_loop_7
//  487   {
//  488     // User defined logic
//  489 
//  490     // Return unprocessed events
//  491     return (events ^ ZDO_COMMAND_CNF);
        MOV     A,R6
        XRL     A,#0x8
        MOV     R2,A
        SJMP    ??ZDApp_event_loop_8
//  492   }
//  493 
//  494   if ( events & ZDO_NWK_UPDATE_NV )
??ZDApp_event_loop_7:
        MOV     A,R7
        ANL     A,#0x1
        JZ      ??ZDApp_event_loop_9
//  495   {
//  496     ZDApp_SaveNetworkStateEvt();
//  497 
//  498     // Return unprocessed events
//  499     return (events ^ ZDO_NWK_UPDATE_NV);
        MOV     A,R7
        XRL     A,#0x1
        SJMP    ??ZDApp_event_loop_4
//  500   }
//  501 
//  502   if ( events & ZDO_DEVICE_RESET )
??ZDApp_event_loop_9:
        MOV     A,R6
        ANL     A,#0x4
        JZ      ??ZDApp_event_loop_10
//  503   {
//  504 #ifdef ZBA_FALLBACK_NWKKEY
//  505     if ( devState == DEV_END_DEVICE_UNAUTH )
//  506     {
//  507       ZDSecMgrFallbackNwkKey();
//  508     }
//  509     else
//  510 #endif
//  511     {
//  512       // Set the NV startup option to force a "new" join.
//  513       zgWriteStartupOptions( ZG_STARTUP_SET, ZCD_STARTOPT_DEFAULT_NETWORK_STATE );
        ; Setup parameters for call to function zgWriteStartupOptions
        MOV     R2,#0x2
        MOV     R1,#-0x1
        LCALL   `??zgWriteStartupOptions::?relay`; Banked call to: zgWriteStartupOptions
//  514 
//  515       // The device has been in the UNAUTH state, so reset
//  516       // Note: there will be no return from this call
//  517       SystemResetSoft();
        ; Setup parameters for call to function Onboard_soft_reset
        LCALL   Onboard_soft_reset & 0xFFFF
//  518     }
//  519   }
//  520 
//  521 #if !defined ( ZDP_BIND_SKIP_VALIDATION )
//  522   if ( events & ZDO_PENDING_BIND_REQ_EVT )
??ZDApp_event_loop_10:
        MOV     A,R7
        ANL     A,#0x10
        JZ      ??ZDApp_event_loop_11
//  523   {
//  524 #if defined ( REFLECTOR )
//  525     ZDApp_AgeOutPendingBindEntry();
        ; Setup parameters for call to function ZDApp_AgeOutPendingBindEntry
        LCALL   `??ZDApp_AgeOutPendingBindEntry::?relay`; Banked call to: ZDApp_AgeOutPendingBindEntry
//  526 #endif
//  527     // Return unprocessed events
//  528     return (events ^ ZDO_PENDING_BIND_REQ_EVT);
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        XRL     A,#0x10
??ZDApp_event_loop_4:
        MOV     R3,A
        SJMP    ??ZDApp_event_loop_8
//  529   }
//  530 #endif
//  531 
//  532   if ( ZG_SECURE_ENABLED )
//  533   {
//  534     return ( ZDApp_ProcessSecEvent( task_id, events ) );
??ZDApp_event_loop_11:
        ; Setup parameters for call to function ZDApp_ProcessSecEvent
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        MOV     R1,?V2
        LCALL   `??ZDApp_ProcessSecEvent::?relay`; Banked call to: ZDApp_ProcessSecEvent
//  535   }
??ZDApp_event_loop_8:
        LJMP    ?Subroutine1 & 0xFFFF
//  536   else
//  537   {
//  538     // Discard or make more handlers
//  539     return 0;
//  540   }
//  541 }
          CFI EndBlock cfiBlock2
//  542 
//  543 /*********************************************************************
//  544  * @fn      ZDApp_ProcessSecEvent()
//  545  *
//  546  * @brief   Process incoming security events.
//  547  *
//  548  * @param   task_id - Task ID
//  549  * @param   events  - Bitmap of events
//  550  *
//  551  * @return  none
//  552  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  553 UINT16 ZDApp_ProcessSecEvent( uint8 task_id, UINT16 events )
ZDApp_ProcessSecEvent:
          CFI Block cfiBlock3 Using cfiCommon0
          CFI Function ZDApp_ProcessSecEvent
        CODE
//  554 {
        FUNCALL ZDApp_ProcessSecEvent, ZDApp_DeviceAuthEvt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessSecEvent, ZDApp_SaveNwkKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessSecEvent, ZDSecMgrSaveTCLinkKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  555   (void)task_id;  // Intentionally unreferenced parameter
//  556 
//  557   if ( ZSTACK_ROUTER_BUILD )
//  558   {
//  559     if ( events & ZDO_NEW_DEVICE )
//  560     {
//  561       // process the new device event
//  562       if ( ZDApp_NewDeviceList )
//  563       {
//  564         ZDAppNewDevice_t *pNewDevice;
//  565         uint16 timeDelta;
//  566 
//  567         (void) ZDSecMgrNewDeviceEvent( ZDApp_NewDeviceList->shortAddr );
//  568 
//  569         pNewDevice = (ZDAppNewDevice_t *) ZDApp_NewDeviceList->next;
//  570         osal_mem_free( ZDApp_NewDeviceList );
//  571         ZDApp_NewDeviceList = pNewDevice;
//  572 
//  573         if ( pNewDevice )
//  574         {
//  575           timeDelta = pNewDevice->timeDelta;
//  576           pNewDevice = pNewDevice->next;
//  577 
//  578           while ( pNewDevice )
//  579           {
//  580             pNewDevice->timeDelta -= timeDelta;
//  581             pNewDevice = pNewDevice->next;
//  582           }
//  583 
//  584           osal_start_timerEx( ZDAppTaskID, ZDO_NEW_DEVICE, timeDelta );
//  585         }
//  586       }
//  587 
//  588       // Return unprocessed events
//  589       return (events ^ ZDO_NEW_DEVICE);
//  590     }
//  591   }
//  592 
//  593   if ( events & ZDO_DEVICE_AUTH )
        MOV     A,R6
        ANL     A,#0x80
        JZ      ??ZDApp_ProcessSecEvent_0
//  594   {
//  595     ZDApp_DeviceAuthEvt();
        ; Setup parameters for call to function ZDApp_DeviceAuthEvt
        LCALL   `??ZDApp_DeviceAuthEvt::?relay`; Banked call to: ZDApp_DeviceAuthEvt
//  596 
//  597     // Return unprocessed events
//  598     return (events ^ ZDO_DEVICE_AUTH);
        MOV     A,R6
        XRL     A,#0x80
        MOV     R2,A
        MOV     A,R7
        SJMP    ??ZDApp_ProcessSecEvent_1
//  599   }
//  600 
//  601   if ( events & ZDO_FRAMECOUNTER_CHANGE )
??ZDApp_ProcessSecEvent_0:
        MOV     A,R7
        ANL     A,#0x2
        JZ      ??ZDApp_ProcessSecEvent_2
//  602   {
//  603     ZDApp_SaveNwkKey();
        ; Setup parameters for call to function ZDApp_SaveNwkKey
        LCALL   `??ZDApp_SaveNwkKey::?relay`; Banked call to: ZDApp_SaveNwkKey
//  604 
//  605     // Return unprocessed events
//  606     return (events ^ ZDO_FRAMECOUNTER_CHANGE);
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        XRL     A,#0x2
        SJMP    ??ZDApp_ProcessSecEvent_1
//  607   }
//  608 
//  609   if ( events & ZDO_APS_FRAMECOUNTER_CHANGE )
??ZDApp_ProcessSecEvent_2:
        MOV     A,R7
        ANL     A,#0x8
        JZ      ??ZDApp_ProcessSecEvent_3
//  610   {
//  611 #if defined (NV_RESTORE)
//  612     ZDSecMgrSaveApsLinkKey();
//  613 #endif // (NV_RESTORE)
//  614 
//  615     // Return unprocessed events
//  616     return (events ^ ZDO_APS_FRAMECOUNTER_CHANGE);
        MOV     A,R7
        XRL     A,#0x8
        SJMP    ??ZDApp_ProcessSecEvent_1
//  617   }
//  618 
//  619   if ( events & ZDO_TCLK_FRAMECOUNTER_CHANGE )
??ZDApp_ProcessSecEvent_3:
        MOV     A,R7
        ANL     A,#0x4
        JZ      ??ZDApp_ProcessSecEvent_4
//  620   {
//  621     ZDSecMgrSaveTCLinkKey();
        ; Setup parameters for call to function ZDSecMgrSaveTCLinkKey
        LCALL   `??ZDSecMgrSaveTCLinkKey::?relay`; Banked call to: ZDSecMgrSaveTCLinkKey
//  622 
//  623     // Return unprocessed events
//  624     return (events ^ ZDO_TCLK_FRAMECOUNTER_CHANGE);
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        XRL     A,#0x4
??ZDApp_ProcessSecEvent_1:
        MOV     R3,A
        SJMP    ??ZDApp_ProcessSecEvent_5
//  625   }
//  626 
//  627   // Discard or make more handlers
//  628   return 0;
??ZDApp_ProcessSecEvent_4:
        MOV     R2,#0x0
        MOV     R3,#0x0
??ZDApp_ProcessSecEvent_5:
        LJMP    ??Subroutine55_0 & 0xFFFF
//  629 }
          CFI EndBlock cfiBlock3
//  630 
//  631 /*********************************************************************
//  632  * Application Functions
//  633  */
//  634 
//  635 /*********************************************************************
//  636  * @fn      ZDOInitDevice
//  637  *
//  638  * @brief   Start the device in the network.  This function will read
//  639  *   ZCD_NV_STARTUP_OPTION (NV item) to determine whether or not to
//  640  *   restore the network state of the device.
//  641  *
//  642  * @param   startDelay - timeDelay to start device (in milliseconds).
//  643  *                       There is a jitter added to this delay:
//  644  *                       ((NWK_START_DELAY + startDelay)
//  645  *                       + (osal_rand() & EXTENDED_JOINING_RANDOM_MASK))
//  646  *                       When startDelay is set to ZDO_INIT_HOLD_NWK_START
//  647  *                       this function will hold the network init. Application
//  648  *                       can start the device.
//  649  *
//  650  * NOTE:    If the application would like to force a "new" join, the
//  651  *          application should set the ZCD_STARTOPT_DEFAULT_NETWORK_STATE
//  652  *          bit in the ZCD_NV_STARTUP_OPTION NV item before calling
//  653  *          this function. "new" join means to not restore the network
//  654  *          state of the device. Use zgWriteStartupOptions() to set these
//  655  *          options.
//  656  *
//  657  * @return
//  658  *    ZDO_INITDEV_RESTORED_NETWORK_STATE  - The device's network state was
//  659  *          restored.
//  660  *    ZDO_INITDEV_NEW_NETWORK_STATE - The network state was initialized.
//  661  *          This could mean that ZCD_NV_STARTUP_OPTION said to not restore, or
//  662  *          it could mean that there was no network state to restore.
//  663  *    ZDO_INITDEV_LEAVE_NOT_STARTED - Before the reset, a network leave was issued
//  664  *          with the rejoin option set to TRUE.  So, the device was not
//  665  *          started in the network (one time only).  The next time this
//  666  *          function is called it will start.
//  667  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  668 uint8 ZDOInitDevice( uint16 startDelay )
ZDOInitDevice:
          CFI Block cfiBlock4 Using cfiCommon0
          CFI Function ZDOInitDevice
        CODE
//  669 {
        FUNCALL ZDOInitDevice, zgInitItems
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDOInitDevice, ZDConfig_InitDescriptors
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDOInitDevice, ZDAppDetermineDeviceType
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDOInitDevice, osal_rand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDOInitDevice, ZDApp_SecInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDOInitDevice, ZDApp_LeaveCtrlInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDOInitDevice, ZDApp_LeaveCtrlStartup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDOInitDevice, zgWriteStartupOptions
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDOInitDevice, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDOInitDevice, ZDApp_NetworkInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDOInitDevice, NLME_SetBroadcastFilter
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
        LCALL   ?Subroutine38 & 0xFFFF
//  670   uint8 networkStateNV = ZDO_INITDEV_NEW_NETWORK_STATE;
//  671   uint16 extendedDelay = 0;
//  672 
//  673   if ( devState == DEV_HOLD )
??CrossCallReturnLabel_67:
        MOV     DPTR,#devState
        MOVX    A,@DPTR
        JNZ     ??ZDOInitDevice_0
//  674   {
//  675     // Initialize the RAM items table, in case an NV item has been updated.
//  676     zgInitItems( FALSE );
        ; Setup parameters for call to function zgInitItems
        MOV     R1,#0x0
        LCALL   `??zgInitItems::?relay`; Banked call to: zgInitItems
//  677   }
//  678 
//  679   ZDConfig_InitDescriptors();
??ZDOInitDevice_0:
        ; Setup parameters for call to function ZDConfig_InitDescriptors
        LCALL   `??ZDConfig_InitDescriptors::?relay`; Banked call to: ZDConfig_InitDescriptors
//  680   //devtag.071807.todo - fix this temporary solution
//  681   _NIB.CapabilityFlags = ZDO_Config_Node_Descriptor.CapabilityFlags;
        MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
        MOVX    A,@DPTR
        MOV     DPTR,#_NIB + 14
        MOVX    @DPTR,A
//  682 
//  683 #if defined ( NV_RESTORE )
//  684   // Hold down the SW_BYPASS_NV key (defined in OnBoard.h)
//  685   // while booting to skip past NV Restore.
//  686   if ( zdappHoldKeys == SW_BYPASS_NV )
//  687   {
//  688     zdappHoldKeys = 0;   // Only once
//  689     networkStateNV = ZDO_INITDEV_NEW_NETWORK_STATE;
//  690   }
//  691   else
//  692   {
//  693     // Determine if NV should be restored
//  694     networkStateNV = ZDApp_ReadNetworkRestoreState();
//  695   }
//  696 
//  697   if ( networkStateNV == ZDO_INITDEV_RESTORED_NETWORK_STATE )
//  698   {
//  699     networkStateNV = ZDApp_RestoreNetworkState();
//  700   }
//  701   else
//  702   {
//  703     // Wipe out the network state in NV
//  704     NLME_InitNV();
//  705     NLME_SetDefaultNV();
//  706     // clear NWK key values
//  707     ZDSecMgrClearNVKeyValues();
//  708   }
//  709 #endif
//  710 
//  711   if ( networkStateNV == ZDO_INITDEV_NEW_NETWORK_STATE )
//  712   {
//  713     ZDAppDetermineDeviceType();
        ; Setup parameters for call to function ZDAppDetermineDeviceType
        LCALL   `??ZDAppDetermineDeviceType::?relay`; Banked call to: ZDAppDetermineDeviceType
//  714 
//  715     // Only delay if joining network - not restoring network state
//  716     extendedDelay = (uint16)((NWK_START_DELAY + startDelay)
//  717               + (osal_rand() & EXTENDED_JOINING_RANDOM_MASK));
        ; Setup parameters for call to function osal_rand
        LCALL   `??osal_rand::?relay`; Banked call to: osal_rand
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,R2
        ANL     A,#0x7f
        MOV     R0,A
        MOVX    A,@DPTR
        ADD     A,R0
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     R1,A
        MOV     A,R0
        ADD     A,#0x64
        MOV     R6,A
        CLR     A
        ADDC    A,R1
        MOV     R7,A
//  718   }
//  719 
//  720   // Initialize the security for type of device
//  721   ZDApp_SecInit( networkStateNV );
        ; Setup parameters for call to function ZDApp_SecInit
        MOV     R1,#0x1
        LCALL   `??ZDApp_SecInit::?relay`; Banked call to: ZDApp_SecInit
//  722 
//  723   if( ZDO_INIT_HOLD_NWK_START != startDelay )
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        CPL     A
        JNZ     ??ZDOInitDevice_1
        INC     DPTR
        MOVX    A,@DPTR
        CPL     A
??ZDOInitDevice_1:
        JZ      ??ZDOInitDevice_2
//  724   {
//  725     devState = DEV_INIT;    // Remove the Hold state
        MOV     DPTR,#devState
        MOV     A,#0x1
        MOVX    @DPTR,A
//  726 
//  727     // Initialize leave control logic
//  728     ZDApp_LeaveCtrlInit();
        ; Setup parameters for call to function ZDApp_LeaveCtrlInit
        LCALL   `??ZDApp_LeaveCtrlInit::?relay`; Banked call to: ZDApp_LeaveCtrlInit
//  729 
//  730     // Check leave control reset settings
//  731     ZDApp_LeaveCtrlStartup( &devState, &startDelay );
        ; Setup parameters for call to function ZDApp_LeaveCtrlStartup
        MOV     R4,?XSP + 0
        MOV     R5,?XSP + 1
        MOV     R2,#devState & 0xff
        MOV     R3,#(devState >> 8) & 0xff
        LCALL   `??ZDApp_LeaveCtrlStartup::?relay`; Banked call to: ZDApp_LeaveCtrlStartup
//  732 
//  733     // Leave may make the hold state come back
//  734     if ( devState == DEV_HOLD )
        MOV     DPTR,#devState
        MOVX    A,@DPTR
        JNZ     ??ZDOInitDevice_3
//  735     {
//  736       // Set the NV startup option to force a "new" join.
//  737       zgWriteStartupOptions( ZG_STARTUP_SET, ZCD_STARTOPT_DEFAULT_NETWORK_STATE );
        ; Setup parameters for call to function zgWriteStartupOptions
        MOV     R2,#0x2
        MOV     R1,#-0x1
        LCALL   `??zgWriteStartupOptions::?relay`; Banked call to: zgWriteStartupOptions
//  738 
//  739       // Notify the applications
//  740       osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
        ; Setup parameters for call to function osal_set_event
        MOV     R2,#0x10
        MOV     R3,#0x0
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
//  741 
//  742       return ( ZDO_INITDEV_LEAVE_NOT_STARTED );   // Don't join - (one time).
        MOV     R1,#0x2
        SJMP    ??ZDOInitDevice_4
//  743     }
//  744 
//  745     // Trigger the network start
//  746     ZDApp_NetworkInit( extendedDelay );
??ZDOInitDevice_3:
        ; Setup parameters for call to function ZDApp_NetworkInit
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??ZDApp_NetworkInit::?relay`; Banked call to: ZDApp_NetworkInit
//  747   }
//  748 
//  749   // set broadcast address mask to support broadcast filtering
//  750   NLME_SetBroadcastFilter( ZDO_Config_Node_Descriptor.CapabilityFlags );
??ZDOInitDevice_2:
        ; Setup parameters for call to function NLME_SetBroadcastFilter
        MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??NLME_SetBroadcastFilter::?relay`; Banked call to: NLME_SetBroadcastFilter
//  751 
//  752   return ( networkStateNV );
        MOV     R1,#0x1
??ZDOInitDevice_4:
        LJMP    ?Subroutine6 & 0xFFFF
//  753 }
          CFI EndBlock cfiBlock4

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine38:
          CFI Block cfiCond5 Using cfiCommon0
          CFI Function ZDOInitDevice
          CFI Conditional ??CrossCallReturnLabel_67
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond6 Using cfiCommon0
          CFI (cfiCond6) Function ZDO_ConcentratorIndicationCB
          CFI (cfiCond6) Conditional ??CrossCallReturnLabel_68
          CFI (cfiCond6) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond6) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond6) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond6) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond6) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond6) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond6) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond6) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond6) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond6) CFA_SP SP+-2
          CFI (cfiCond6) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond7 Using cfiCommon0
          CFI (cfiCond7) Function ZDO_SrcRtgIndCB
          CFI (cfiCond7) Conditional ??CrossCallReturnLabel_69
          CFI (cfiCond7) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond7) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond7) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond7) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond7) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond7) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond7) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond7) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond7) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond7) CFA_SP SP+-2
          CFI (cfiCond7) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker8 Using cfiCommon1
          CFI (cfiPicker8) NoFunction
          CFI (cfiPicker8) Picker
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
          CFI EndBlock cfiCond5
          CFI EndBlock cfiCond6
          CFI EndBlock cfiCond7
          CFI EndBlock cfiPicker8
        REQUIRE ??Subroutine48_0
        ; // Fall through to label ??Subroutine48_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine48_0:
          CFI Block cfiCond9 Using cfiCommon0
          CFI Function ZDO_beaconNotifyIndCB
          CFI Conditional ??CrossCallReturnLabel_64
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond10 Using cfiCommon0
          CFI (cfiCond10) Function ZDO_RegisterForZdoCB
          CFI (cfiCond10) Conditional ??CrossCallReturnLabel_65
          CFI (cfiCond10) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond10) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond10) CFA_SP SP+-7
          CFI Block cfiCond11 Using cfiCommon0
          CFI (cfiCond11) Function ZDApp_InitPendingBind
          CFI (cfiCond11) Conditional ??CrossCallReturnLabel_66, ??CrossCallReturnLabel_1
          CFI (cfiCond11) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond11) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond11) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond11) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond11) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond11) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond11) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond11) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond11) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond11) CFA_SP SP+-4
          CFI (cfiCond11) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond12 Using cfiCommon0
          CFI (cfiCond12) Function ZDApp_ProcessPendingBindReq
          CFI (cfiCond12) Conditional ??CrossCallReturnLabel_66, ??CrossCallReturnLabel_0
          CFI (cfiCond12) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond12) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond12) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond12) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond12) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond12) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond12) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond12) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond12) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond12) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond12) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond12) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond12) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond12) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond12) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond12) CFA_SP SP+-4
          CFI (cfiCond12) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond13 Using cfiCommon0
          CFI (cfiCond13) Function ZDOInitDevice
          CFI (cfiCond13) Conditional ??CrossCallReturnLabel_67
          CFI (cfiCond13) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond13) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond13) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond13) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond13) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond13) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond13) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond13) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond13) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond13) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond13) CFA_SP SP+-2
          CFI (cfiCond13) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond14 Using cfiCommon0
          CFI (cfiCond14) Function ZDO_ConcentratorIndicationCB
          CFI (cfiCond14) Conditional ??CrossCallReturnLabel_68
          CFI (cfiCond14) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond14) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond14) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond14) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond14) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond14) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond14) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond14) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond14) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond14) CFA_SP SP+-2
          CFI (cfiCond14) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond15 Using cfiCommon0
          CFI (cfiCond15) Function ZDO_SrcRtgIndCB
          CFI (cfiCond15) Conditional ??CrossCallReturnLabel_69
          CFI (cfiCond15) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond15) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond15) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond15) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond15) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond15) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond15) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond15) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond15) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond15) CFA_SP SP+-2
          CFI (cfiCond15) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker16 Using cfiCommon1
          CFI (cfiPicker16) NoFunction
          CFI (cfiPicker16) Picker
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
        RET
          CFI EndBlock cfiCond9
          CFI EndBlock cfiCond10
          CFI EndBlock cfiCond11
          CFI EndBlock cfiCond12
          CFI EndBlock cfiCond13
          CFI EndBlock cfiCond14
          CFI EndBlock cfiCond15
          CFI EndBlock cfiPicker16
//  754 
//  755 /*********************************************************************
//  756  * @fn      ZDApp_ReadNetworkRestoreState
//  757  *
//  758  * @brief   Read the ZCD_NV_STARTUP_OPTION NV Item to state whether
//  759  *          or not to restore the network state.
//  760  *          If the read value has the ZCD_STARTOPT_DEFAULT_NETWORK_STATE
//  761  *          bit set return the ZDO_INITDEV_NEW_NETWORK_STATE.
//  762  *
//  763  * @param   none
//  764  *
//  765  * @return  ZDO_INITDEV_NEW_NETWORK_STATE
//  766  *          or ZDO_INITDEV_RESTORED_NETWORK_STATE based on whether or
//  767  *          not ZCD_STARTOPT_DEFAULT_NETWORK_STATE bit is set in
//  768  *          ZCD_NV_STARTUP_OPTION
//  769  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  770 uint8 ZDApp_ReadNetworkRestoreState( void )
ZDApp_ReadNetworkRestoreState:
          CFI Block cfiBlock17 Using cfiCommon0
          CFI Function ZDApp_ReadNetworkRestoreState
        CODE
//  771 {
        FUNCALL ZDApp_ReadNetworkRestoreState, zgReadStartupOptions
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  772   uint8 networkStateNV = ZDO_INITDEV_RESTORED_NETWORK_STATE;
        MOV     R6,#0x0
//  773 
//  774   // Look for the New Network State option.
//  775   if ( zgReadStartupOptions() & ZCD_STARTOPT_DEFAULT_NETWORK_STATE )
        ; Setup parameters for call to function zgReadStartupOptions
        LCALL   `??zgReadStartupOptions::?relay`; Banked call to: zgReadStartupOptions
        MOV     A,R1
        MOV     R0,A
        MOV     C,0xE0 /* A   */.1
        JNC     ??ZDApp_ReadNetworkRestoreState_0
//  776   {
//  777     networkStateNV = ZDO_INITDEV_NEW_NETWORK_STATE;
        MOV     R6,#0x1
//  778   }
//  779 
//  780   return ( networkStateNV );
??ZDApp_ReadNetworkRestoreState_0:
        MOV     A,R6
        MOV     R1,A
        LJMP    ??Subroutine55_0 & 0xFFFF
//  781 }
          CFI EndBlock cfiBlock17
//  782 
//  783 /*********************************************************************
//  784  * @fn      ZDAppDetermineDeviceType()
//  785  *
//  786  * @brief   Determines the type of device to start.
//  787  *
//  788  *          Looks at zgDeviceLogicalType and determines what type of
//  789  *          device to start.  The types are:
//  790  *            ZG_DEVICETYPE_COORDINATOR
//  791  *            ZG_DEVICETYPE_ROUTER
//  792  *            ZG_DEVICETYPE_ENDDEVICE
//  793  *
//  794  * @param   none
//  795  *
//  796  * @return  none
//  797  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  798 void ZDAppDetermineDeviceType( void )
ZDAppDetermineDeviceType:
          CFI Block cfiBlock18 Using cfiCommon0
          CFI Function ZDAppDetermineDeviceType
        CODE
//  799 {
        FUNCALL ZDAppDetermineDeviceType, nwk_ExtPANIDValid
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  800   if ( zgDeviceLogicalType == ZG_DEVICETYPE_COORDINATOR )
        MOV     DPTR,#zgDeviceLogicalType
        MOVX    A,@DPTR
        JNZ     ??ZDAppDetermineDeviceType_0
//  801   {
//  802     devStartMode = MODE_HARD;     // Start as a coordinator
        MOV     DPTR,#devStartMode
        MOV     A,#0x2
        MOVX    @DPTR,A
//  803     ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_COORDINATOR;
        MOV     DPTR,#ZDO_Config_Node_Descriptor
        MOVX    A,@DPTR
        ANL     A,#0xf8
        SJMP    ??ZDAppDetermineDeviceType_1
//  804   }
//  805   else
//  806   {
//  807     if ( zgDeviceLogicalType == ZG_DEVICETYPE_ROUTER  )
??ZDAppDetermineDeviceType_0:
        XRL     A,#0x1
        JNZ     ??ZDAppDetermineDeviceType_2
//  808       ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_ROUTER;
        MOV     DPTR,#ZDO_Config_Node_Descriptor
        MOVX    A,@DPTR
        ANL     A,#0xf8
        MOVX    @DPTR,A
        ORL     A,#0x1
        SJMP    ??ZDAppDetermineDeviceType_3
//  809     else if ( zgDeviceLogicalType == ZG_DEVICETYPE_ENDDEVICE )
??ZDAppDetermineDeviceType_2:
        MOVX    A,@DPTR
        XRL     A,#0x2
        JNZ     ??ZDAppDetermineDeviceType_4
//  810       ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_DEVICE;
        MOV     DPTR,#ZDO_Config_Node_Descriptor
        MOVX    A,@DPTR
        ANL     A,#0xf8
        MOVX    @DPTR,A
        ORL     A,#0x2
??ZDAppDetermineDeviceType_3:
        MOVX    @DPTR,A
//  811 
//  812     // If AIB_apsUseExtendedPANID is set to a non-zero value by commissioning
//  813     // The device shall do rejoin the network. Otherwise, do normal join
//  814     if ( nwk_ExtPANIDValid( AIB_apsUseExtendedPANID ) == false )
??ZDAppDetermineDeviceType_4:
        ; Setup parameters for call to function nwk_ExtPANIDValid
        MOV     R2,#AIB_apsUseExtendedPANID & 0xff
        MOV     R3,#(AIB_apsUseExtendedPANID >> 8) & 0xff
        LCALL   `??nwk_ExtPANIDValid::?relay`; Banked call to: nwk_ExtPANIDValid
        MOV     A,R1
        MOV     DPTR,#devStartMode
        JNZ     ??ZDAppDetermineDeviceType_5
//  815     {
//  816       devStartMode = MODE_JOIN;     // Assume joining
        CLR     A
        SJMP    ??ZDAppDetermineDeviceType_1
//  817     }
//  818     else
//  819     {
//  820       devStartMode = MODE_REJOIN;
??ZDAppDetermineDeviceType_5:
        MOV     A,#0x3
??ZDAppDetermineDeviceType_1:
        MOVX    @DPTR,A
//  821     }
//  822   }
//  823 }
        LJMP    ??Subroutine54_0 & 0xFFFF
          CFI EndBlock cfiBlock18
//  824 
//  825 /*********************************************************************
//  826  * @fn      ZDApp_NetworkStartEvt()
//  827  *
//  828  * @brief   Process the Network Start Event
//  829  *
//  830  * @param   none
//  831  *
//  832  * @return  none
//  833  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  834 void ZDApp_NetworkStartEvt( void )
ZDApp_NetworkStartEvt:
          CFI Block cfiBlock19 Using cfiCommon0
          CFI Function ZDApp_NetworkStartEvt
        CODE
//  835 {
        FUNCALL ZDApp_NetworkStartEvt, osal_pwrmgr_device
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_NetworkStartEvt, osal_set_event
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_NetworkStartEvt, NLME_GetEnergyThreshold
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_NetworkStartEvt, NLME_GetEnergyThreshold
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_NetworkStartEvt, NLME_SetEnergyThreshold
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_NetworkStartEvt, osal_set_event
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_NetworkStartEvt, osal_set_event
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  836   if ( nwkStatus == ZSuccess )
        MOV     DPTR,#nwkStatus
        MOVX    A,@DPTR
        JNZ     ??ZDApp_NetworkStartEvt_0
//  837   {
//  838     // Successfully started a ZigBee network
//  839     if ( devState == DEV_COORD_STARTING )
        MOV     DPTR,#devState
        MOVX    A,@DPTR
        XRL     A,#0x8
        JNZ     ??ZDApp_NetworkStartEvt_1
//  840     {
//  841       devState = DEV_ZB_COORD;
        MOV     A,#0x9
        MOVX    @DPTR,A
//  842     }
//  843 
//  844     osal_pwrmgr_device( PWRMGR_ALWAYS_ON );
??ZDApp_NetworkStartEvt_1:
        ; Setup parameters for call to function osal_pwrmgr_device
        MOV     R1,#0x0
        LCALL   `??osal_pwrmgr_device::?relay`; Banked call to: osal_pwrmgr_device
//  845     osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
        ; Setup parameters for call to function osal_set_event
        SJMP    ??ZDApp_NetworkStartEvt_2
//  846   }
//  847   else
//  848   {
//  849     // Try again with a higher energy threshold
//  850     if ( ( NLME_GetEnergyThreshold() + ENERGY_SCAN_INCREMENT ) < 0xff )
??ZDApp_NetworkStartEvt_0:
        ; Setup parameters for call to function NLME_GetEnergyThreshold
        LCALL   `??NLME_GetEnergyThreshold::?relay`; Banked call to: NLME_GetEnergyThreshold
        MOV     A,R1
        MOV     R1,#0x0
        ADD     A,#0x10
        JNC     ??ZDApp_NetworkStartEvt_3
        INC     R1
??ZDApp_NetworkStartEvt_3:
        CLR     C
        SUBB    A,#-0x1
        MOV     A,R1
        SUBB    A,#0x0
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JNC     ??ZDApp_NetworkStartEvt_4
//  851     {
//  852       NLME_SetEnergyThreshold( (uint8)(NLME_GetEnergyThreshold() + ENERGY_SCAN_INCREMENT) );
        ; Setup parameters for call to function NLME_GetEnergyThreshold
        LCALL   `??NLME_GetEnergyThreshold::?relay`; Banked call to: NLME_GetEnergyThreshold
        MOV     A,R1
        MOV     R0,A
        ; Setup parameters for call to function NLME_SetEnergyThreshold
        MOV     A,#0x10
        ADD     A,R1
        MOV     R1,A
        LCALL   `??NLME_SetEnergyThreshold::?relay`; Banked call to: NLME_SetEnergyThreshold
//  853       osal_set_event( ZDAppTaskID, ZDO_NETWORK_INIT );
        ; Setup parameters for call to function osal_set_event
        MOV     R2,#0x1
        SJMP    ??ZDApp_NetworkStartEvt_5
//  854     }
//  855     else
//  856     {
//  857       // Failed to start network. Enter a dormant state (until user intervenes)
//  858       devState = DEV_INIT;
??ZDApp_NetworkStartEvt_4:
        MOV     DPTR,#devState
        MOV     A,#0x1
        MOVX    @DPTR,A
//  859       osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
        ; Setup parameters for call to function osal_set_event
??ZDApp_NetworkStartEvt_2:
        MOV     R2,#0x10
??ZDApp_NetworkStartEvt_5:
        MOV     R3,#0x0
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
//  860     }
//  861   }
//  862 }
        LJMP    ??Subroutine54_0 & 0xFFFF
          CFI EndBlock cfiBlock19
//  863 
//  864 /*********************************************************************
//  865  * @fn      ZDApp_DeviceAuthEvt()
//  866  *
//  867  * @brief   Process the Device Authentic Event
//  868  *
//  869  * @param   none
//  870  *
//  871  * @return  none
//  872  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  873 void ZDApp_DeviceAuthEvt( void )
ZDApp_DeviceAuthEvt:
          CFI Block cfiBlock20 Using cfiCommon0
          CFI Function ZDApp_DeviceAuthEvt
        CODE
//  874 {
        FUNCALL ZDApp_DeviceAuthEvt, ZDApp_ResetTimerCancel
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_DeviceAuthEvt, osal_set_event
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_DeviceAuthEvt, ZDApp_SaveNwkKey
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_DeviceAuthEvt, ZDApp_AnnounceNewAddress
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_DeviceAuthEvt, NLME_SetPollRate
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  875   // received authentication from trust center
//  876   if ( devState == DEV_END_DEVICE_UNAUTH )
        MOV     DPTR,#devState
        MOVX    A,@DPTR
        XRL     A,#0x5
        JNZ     ??ZDApp_DeviceAuthEvt_0
//  877   {
//  878     // Stop the reset timer so it doesn't reset
//  879     ZDApp_ResetTimerCancel();
        ; Setup parameters for call to function ZDApp_ResetTimerCancel
        LCALL   `??ZDApp_ResetTimerCancel::?relay`; Banked call to: ZDApp_ResetTimerCancel
//  880 
//  881     devState = DEV_END_DEVICE;
        LCALL   ?Subroutine8 & 0xFFFF
//  882     osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
??CrossCallReturnLabel_70:
        LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
//  883 
//  884     // Set the Power Manager Device
//  885 #if defined ( POWER_SAVING )
//  886     osal_pwrmgr_device( PWRMGR_BATTERY );
//  887 #endif
//  888 
//  889     if ( ZSTACK_ROUTER_BUILD )
//  890     {
//  891       if ( ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
//  892       {
//  893         // NOTE: first two parameters are not used, see NLMEDE.h for details
//  894         NLME_StartRouterRequest( 0, 0, false );
//  895       }
//  896     }
//  897 
//  898     // Notify to save info into NV
//  899     ZDApp_NVUpdate();
//  900 
//  901     // Save off the security
//  902     ZDApp_SaveNwkKey();
        ; Setup parameters for call to function ZDApp_SaveNwkKey
        LCALL   `??ZDApp_SaveNwkKey::?relay`; Banked call to: ZDApp_SaveNwkKey
//  903 
//  904     ZDApp_AnnounceNewAddress();
        ; Setup parameters for call to function ZDApp_AnnounceNewAddress
        LCALL   `??ZDApp_AnnounceNewAddress::?relay`; Banked call to: ZDApp_AnnounceNewAddress
//  905 
//  906     if ( ( (ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE) == 0 )
//  907         || ( (ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE)
//  908 #if defined ( ZIGBEE_CHILD_AGING )
//  909           && (zgChildAgingEnable == TRUE)
//  910 #endif // ZIGBEE_CHILD_AGING
//  911              ) )
        MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.3
        JNC     ??ZDApp_DeviceAuthEvt_1
        MOV     DPTR,#zgChildAgingEnable
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??ZDApp_DeviceAuthEvt_0
//  912     {
//  913       NLME_SetPollRate( ZDApp_SavedPollRate );
??ZDApp_DeviceAuthEvt_1:
        ; Setup parameters for call to function NLME_SetPollRate
        MOV     DPTR,#ZDApp_SavedPollRate
        LCALL   ?Subroutine24 & 0xFFFF
//  914     }
//  915   }
??CrossCallReturnLabel_18:
        LCALL   `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
//  916   else
//  917   {
//  918     ZDApp_NVUpdate();
//  919   }
//  920 }
??ZDApp_DeviceAuthEvt_0:
        LJMP    ??Subroutine54_0 & 0xFFFF
          CFI EndBlock cfiBlock20

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine8:
          CFI Block cfiCond21 Using cfiCommon0
          CFI Function ZDApp_DeviceAuthEvt
          CFI Conditional ??CrossCallReturnLabel_70
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI Block cfiCond22 Using cfiCommon0
          CFI (cfiCond22) Function ZDApp_ProcessNetworkJoin
          CFI (cfiCond22) Conditional ??CrossCallReturnLabel_71
          CFI (cfiCond22) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond22) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond22) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond22) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond22) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond22) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond22) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond22) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond22) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond22) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond22) CFA_SP SP+-2
          CFI (cfiCond22) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker23 Using cfiCommon1
          CFI (cfiPicker23) NoFunction
          CFI (cfiPicker23) Picker
        MOV     DPTR,#devState
        MOV     A,#0x6
          CFI EndBlock cfiCond21
          CFI EndBlock cfiCond22
          CFI EndBlock cfiPicker23
        REQUIRE ??Subroutine49_0
        ; // Fall through to label ??Subroutine49_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine49_0:
          CFI Block cfiCond24 Using cfiCommon0
          CFI Function ZDApp_event_loop
          CFI Conditional ??CrossCallReturnLabel_72
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond25 Using cfiCommon0
          CFI (cfiCond25) Function ZDApp_DeviceAuthEvt
          CFI (cfiCond25) Conditional ??CrossCallReturnLabel_70
          CFI (cfiCond25) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond25) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond25) CFA_SP SP+-7
          CFI Block cfiCond26 Using cfiCommon0
          CFI (cfiCond26) Function ZDApp_ProcessNetworkJoin
          CFI (cfiCond26) Conditional ??CrossCallReturnLabel_71
          CFI (cfiCond26) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond26) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond26) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond26) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond26) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond26) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond26) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond26) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond26) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond26) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond26) CFA_SP SP+-2
          CFI (cfiCond26) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker27 Using cfiCommon1
          CFI (cfiPicker27) NoFunction
          CFI (cfiPicker27) Picker
        MOVX    @DPTR,A
        ; Setup parameters for call to function osal_set_event
        ; Setup parameters for call to function osal_set_event
        ; Setup parameters for call to function osal_set_event
        MOV     R2,#0x10
        MOV     R3,#0x0
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        RET
          CFI EndBlock cfiCond24
          CFI EndBlock cfiCond25
          CFI EndBlock cfiCond26
          CFI EndBlock cfiPicker27
//  921 
//  922 /*********************************************************************
//  923  * @fn      ZDApp_SaveNetworkStateEvt()
//  924  *
//  925  * @brief   Process the Save the Network State Event
//  926  *
//  927  * @param   none
//  928  *
//  929  * @return  none
//  930  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  931 void ZDApp_SaveNetworkStateEvt( void )
ZDApp_SaveNetworkStateEvt:
          CFI Block cfiBlock28 Using cfiCommon0
          CFI Function ZDApp_SaveNetworkStateEvt
        CODE
//  932 {
        ; Saved register size: 0
        ; Auto size: 0
//  933 #if defined ( NV_RESTORE )
//  934  #if defined ( NV_TURN_OFF_RADIO )
//  935   // Turn off the radio's receiver during an NV update
//  936   uint8 RxOnIdle;
//  937   uint8 x = false;
//  938   ZMacGetReq( ZMacRxOnIdle, &RxOnIdle );
//  939   ZMacSetReq( ZMacRxOnIdle, &x );
//  940  #endif
//  941 
//  942   // Update the Network State in NV
//  943   NLME_UpdateNV( NWK_NV_NIB_ENABLE        |
//  944                  NWK_NV_DEVICELIST_ENABLE |
//  945                  NWK_NV_BINDING_ENABLE    |
//  946                  NWK_NV_ADDRMGR_ENABLE );
//  947 
//  948   // Reset the NV startup option to resume from NV by
//  949   // clearing the "New" join option.
//  950   zgWriteStartupOptions( FALSE, ZCD_STARTOPT_DEFAULT_NETWORK_STATE );
//  951 
//  952  #if defined ( NV_TURN_OFF_RADIO )
//  953   ZMacSetReq( ZMacRxOnIdle, &RxOnIdle );
//  954  #endif
//  955 #endif // NV_RESTORE
//  956 }
        LJMP    ?BRET
          CFI EndBlock cfiBlock28
//  957 
//  958 #if defined ( NV_RESTORE )
//  959 /*********************************************************************
//  960  * @fn      ZDApp_RestoreNetworkState()
//  961  *
//  962  * @brief   This function will restore the network state of the
//  963  *          device if the network state is stored in NV.
//  964  *
//  965  * @param   none
//  966  *
//  967  * @return
//  968  *    ZDO_INITDEV_RESTORED_NETWORK_STATE  - The device's network state was
//  969  *          restored.
//  970  *    ZDO_INITDEV_NEW_NETWORK_STATE - The network state was not used.
//  971  *          This could mean that zgStartupOption said to not restore, or
//  972  *          it could mean that there was no network state to restore.
//  973  *
//  974  */
//  975 uint8 ZDApp_RestoreNetworkState( void )
//  976 {
//  977   uint8 nvStat;
//  978 
//  979   // Initialize NWK NV items
//  980   nvStat = NLME_InitNV();
//  981 
//  982   if ( nvStat != NV_OPER_FAILED )
//  983   {
//  984     if ( NLME_RestoreFromNV() )
//  985     {
//  986       // Are we a coordinator
//  987       ZDAppNwkAddr.addr.shortAddr = NLME_GetShortAddr();
//  988       if ( ZDAppNwkAddr.addr.shortAddr == 0 )
//  989         ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_COORDINATOR;
//  990       devStartMode = MODE_RESUME;
//  991       osal_cpyExtAddr( ZDO_UseExtendedPANID, _NIB.extendedPANID );
//  992     }
//  993     else
//  994       nvStat = NV_ITEM_UNINIT;
//  995 
//  996     if ( ZG_SECURE_ENABLED )
//  997     {
//  998       nwkFrameCounterChanges = 0;
//  999 
// 1000       if ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
// 1001       {
// 1002         ZDApp_RestoreNwkKey();
// 1003       }
// 1004     }
// 1005 
// 1006     // The default for RxOnWhenIdle is true for Routers and false for end devices
// 1007     // [setup in the NLME_RestoreFromNV()].  Change it here if you want something
// 1008     // other than default.
// 1009   }
// 1010 
// 1011   if ( nvStat == ZSUCCESS )
// 1012     return ( ZDO_INITDEV_RESTORED_NETWORK_STATE );
// 1013   else
// 1014     return ( ZDO_INITDEV_NEW_NETWORK_STATE );
// 1015 }
// 1016 #endif // NV_RESTORE
// 1017 
// 1018 /*********************************************************************
// 1019  * @fn      ZDApp_InitUserDesc()
// 1020  *
// 1021  * @brief   Initialize the User Descriptor, the descriptor is read from NV
// 1022  *          when needed.  If you want to initialize the User descriptor to
// 1023  *          something other than all zero, do it here.
// 1024  *
// 1025  * @param   none
// 1026  *
// 1027  * @return  none
// 1028  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1029 void ZDApp_InitUserDesc( void )
ZDApp_InitUserDesc:
          CFI Block cfiBlock29 Using cfiCommon0
          CFI Function ZDApp_InitUserDesc
        CODE
// 1030 {
        FUNCALL ZDApp_InitUserDesc, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_InitUserDesc, osal_nv_item_init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_InitUserDesc, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 17
        MOV     A,#-0x11
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 27)
// 1031   UserDescriptorFormat_t ZDO_DefaultUserDescriptor;
// 1032 
// 1033   // Initialize the User Descriptor, the descriptor is read from NV
// 1034   // when needed.  If you want to initialize the User descriptor to something
// 1035   // other than all zero, do it here.
// 1036   osal_memset( &ZDO_DefaultUserDescriptor, 0, sizeof( UserDescriptorFormat_t ) );
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x11
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
// 1037   if ( ZSUCCESS == osal_nv_item_init( ZCD_NV_USERDESC,
// 1038          sizeof(UserDescriptorFormat_t), (void*)&ZDO_DefaultUserDescriptor ) )
        ; Setup parameters for call to function osal_nv_item_init
        MOV     R0,?XSP + 0
        MOV     R1,?XSP + 1
        MOV     ?V0,R0
        MOV     ?V1,R1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 29)
        MOV     R4,#0x11
        MOV     R5,#0x0
        MOV     R2,#-0x7f
        MOV     R3,#0x0
        LCALL   `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 27)
        MOV     A,R1
        JNZ     ??ZDApp_InitUserDesc_0
// 1039   {
// 1040     if ( ZSUCCESS == osal_nv_read( ZCD_NV_USERDESC, 0,
// 1041          sizeof(UserDescriptorFormat_t), (void*)&ZDO_DefaultUserDescriptor ) )
        ; Setup parameters for call to function osal_nv_read
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 29)
        MOV     ?V0,#0x11
        MOV     ?V1,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 31)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#-0x7f
        MOV     R3,#0x0
        LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 27)
        MOV     A,R1
        JNZ     ??ZDApp_InitUserDesc_0
// 1042     {
// 1043       if ( ZDO_DefaultUserDescriptor.len != 0 )
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        JZ      ??ZDApp_InitUserDesc_0
// 1044       {
// 1045         ZDO_Config_Node_Descriptor.UserDescAvail = TRUE;
        MOV     DPTR,#ZDO_Config_Node_Descriptor
        MOVX    A,@DPTR
        SETB    0xE0 /* A   */.4
        MOVX    @DPTR,A
// 1046       }
// 1047     }
// 1048   }
// 1049 }
??ZDApp_InitUserDesc_0:
        MOV     A,#0x11
        LJMP    ??Subroutine52_0 & 0xFFFF
          CFI EndBlock cfiBlock29
// 1050 
// 1051 /*********************************************************************
// 1052  * @fn      ZDAppCheckForHoldKey()
// 1053  *
// 1054  * @brief   Check for key to set the device into Hold Auto Start
// 1055  *
// 1056  * @param   none
// 1057  *
// 1058  * @return  none
// 1059  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1060 void ZDAppCheckForHoldKey( void )
ZDAppCheckForHoldKey:
          CFI Block cfiBlock30 Using cfiCommon0
          CFI Function ZDAppCheckForHoldKey
        CODE
// 1061 {
        FUNCALL ZDAppCheckForHoldKey, HalKeyRead
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1062 #if (defined HAL_KEY) && (HAL_KEY == TRUE)
// 1063   
// 1064   // Get Keypad directly to see if a HOLD is needed
// 1065   zdappHoldKeys = HalKeyRead();
        ; Setup parameters for call to function HalKeyRead
        LCALL   `??HalKeyRead::?relay`; Banked call to: HalKeyRead
        MOV     A,R1
        MOV     DPTR,#zdappHoldKeys
        MOVX    @DPTR,A
// 1066   
// 1067   // Hold down the SW_BYPASS_START key (see OnBoard.h)
// 1068   // while booting to avoid starting up the device.
// 1069   if ( zdappHoldKeys == SW_BYPASS_START )
        XRL     A,#0x1
        JNZ     ??ZDAppCheckForHoldKey_0
// 1070   {
// 1071     // Change the device state to HOLD on start up
// 1072     devState = DEV_HOLD;
        MOV     DPTR,#devState
        CLR     A
        MOVX    @DPTR,A
// 1073   }
// 1074 #endif // HAL_KEY
// 1075 }
??ZDAppCheckForHoldKey_0:
        LJMP    ??Subroutine54_0 & 0xFFFF
          CFI EndBlock cfiBlock30
// 1076 
// 1077 /*********************************************************************
// 1078  * @fn      ZDApp_ProcessOSALMsg()
// 1079  *
// 1080  * @brief   Process the incoming task message.
// 1081  *
// 1082  * @param   msgPtr - message to process
// 1083  *
// 1084  * @return  none
// 1085  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1086 void ZDApp_ProcessOSALMsg( osal_event_hdr_t *msgPtr )
ZDApp_ProcessOSALMsg:
          CFI Block cfiBlock31 Using cfiCommon0
          CFI Function ZDApp_ProcessOSALMsg
        CODE
// 1087 {
        FUNCALL ZDApp_ProcessOSALMsg, ZDP_IncomingData
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessOSALMsg, ZDApp_ProcessMsgCBs
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessOSALMsg, ZDApp_NwkDescListProcessing
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessOSALMsg, ZDApp_NodeProfileSync
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessOSALMsg, NLME_JoinRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessOSALMsg, osal_rand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessOSALMsg, ZDApp_NetworkInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessOSALMsg, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessOSALMsg, osal_rand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessOSALMsg, ZMacSetReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessOSALMsg, ZMacSetReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessOSALMsg, ZMacSetReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessOSALMsg, ZDApp_RestoreNwkKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessOSALMsg, NLME_ReJoinRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessOSALMsg, NLME_ReJoinRequestUnsecure
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessOSALMsg, osal_rand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessOSALMsg, ZDApp_NetworkInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessOSALMsg, NLME_SetPollRate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessOSALMsg, NLME_SetQueuedPollRate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessOSALMsg, NLME_SetResponseRate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessOSALMsg, NLME_SetPollRate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessOSALMsg, osal_rand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessOSALMsg, ZDApp_NetworkInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessOSALMsg, ZDApp_ProcessNetworkJoin
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessOSALMsg, sAddrExtCpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessOSALMsg, ZDApp_NetworkInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessOSALMsg, ZDApp_ProcessSecMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 3
        MOV     A,#-0x3
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 13)
// 1088   // Data Confirmation message fields
// 1089   uint8 sentEP;       // This should always be 0
// 1090   uint8 sentStatus;
// 1091   afDataConfirm_t *afDataConfirm;
// 1092   uint8 tmp;
// 1093 
// 1094   switch ( msgPtr->event )
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        DEC     A
        JZ      ??ZDApp_ProcessOSALMsg_0
        DEC     A
        JNZ     $+5
        LJMP    ??ZDApp_ProcessOSALMsg_1 & 0xFFFF
        DEC     A
        JNZ     $+5
        LJMP    ??ZDApp_ProcessOSALMsg_2 & 0xFFFF
        ADD     A,#-0x17
        JZ      ??ZDApp_ProcessOSALMsg_3
        ADD     A,#0x47
        JZ      ??ZDApp_ProcessOSALMsg_4
        ADD     A,#-0x2a
        JNZ     $+5
        LJMP    ??ZDApp_ProcessOSALMsg_5 & 0xFFFF
        LJMP    ??ZDApp_ProcessOSALMsg_6 & 0xFFFF
// 1095   {
// 1096     // Incoming ZDO Message
// 1097     case AF_INCOMING_MSG_CMD:
// 1098       ZDP_IncomingData( (afIncomingMSGPacket_t *)msgPtr );
??ZDApp_ProcessOSALMsg_3:
        ; Setup parameters for call to function ZDP_IncomingData
        LCALL   `??ZDP_IncomingData::?relay`; Banked call to: ZDP_IncomingData
// 1099       break;
        LJMP    ??ZDApp_ProcessOSALMsg_5 & 0xFFFF
// 1100 
// 1101     case ZDO_CB_MSG:
// 1102       ZDApp_ProcessMsgCBs( (zdoIncomingMsg_t *)msgPtr );
??ZDApp_ProcessOSALMsg_4:
        ; Setup parameters for call to function ZDApp_ProcessMsgCBs
        LCALL   `??ZDApp_ProcessMsgCBs::?relay`; Banked call to: ZDApp_ProcessMsgCBs
// 1103       break;
        LJMP    ??ZDApp_ProcessOSALMsg_5 & 0xFFFF
// 1104 
// 1105     case AF_DATA_CONFIRM_CMD:
// 1106       // This message is received as a confirmation of a data packet sent.
// 1107       // The status is of ZStatus_t type [defined in NLMEDE.h]
// 1108       // The message fields are defined in AF.h
// 1109       afDataConfirm = (afDataConfirm_t *)msgPtr;
// 1110       sentEP = afDataConfirm->endpoint;
// 1111       sentStatus = afDataConfirm->hdr.status;
// 1112 
// 1113       // Action taken when confirmation is received.
// 1114 #if defined ( ZIGBEE_FREQ_AGILITY )
// 1115       if ( pZDNwkMgr_ProcessDataConfirm )
// 1116         pZDNwkMgr_ProcessDataConfirm( afDataConfirm );
// 1117 #endif
// 1118       (void)sentEP;
// 1119       (void)sentStatus;
// 1120       break;
// 1121 
// 1122     case ZDO_NWK_DISC_CNF:
// 1123       if (devState != DEV_NWK_DISC)
??ZDApp_ProcessOSALMsg_0:
        MOV     DPTR,#devState
        MOVX    A,@DPTR
        XRL     A,#0x2
        JZ      $+5
        LJMP    ??ZDApp_ProcessOSALMsg_5 & 0xFFFF
// 1124         break;
// 1125 
// 1126       if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
        MOV     DPTR,#zgDeviceLogicalType
        MOVX    A,@DPTR
        XRL     A,#0x1
        JZ      ??ZDApp_ProcessOSALMsg_7
        MOVX    A,@DPTR
        XRL     A,#0x2
        JZ      $+5
        LJMP    ??ZDApp_ProcessOSALMsg_5 & 0xFFFF
// 1127       {
// 1128         // Process the network discovery scan results and choose a parent
// 1129         // device to join/rejoin itself
// 1130         networkDesc_t *pChosenNwk;
// 1131         if ( ( (pChosenNwk = ZDApp_NwkDescListProcessing()) != NULL ) && (zdoDiscCounter > NUM_DISC_ATTEMPTS) )
??ZDApp_ProcessOSALMsg_7:
        ; Setup parameters for call to function ZDApp_NwkDescListProcessing
        LCALL   `??ZDApp_NwkDescListProcessing::?relay`; Banked call to: ZDApp_NwkDescListProcessing
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     R6,?V0
        MOV     R7,?V1
        MOV     A,R6
        ORL     A,R7
        JNZ     $+5
        LJMP    ??ZDApp_ProcessOSALMsg_8 & 0xFFFF
        MOV     DPTR,#zdoDiscCounter
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,#0x3
        JNC     $+5
        LJMP    ??ZDApp_ProcessOSALMsg_8 & 0xFFFF
// 1132         {
// 1133           if ( devStartMode == MODE_JOIN )
        MOV     DPTR,#devStartMode
        MOVX    A,@DPTR
        JNZ     ??ZDApp_ProcessOSALMsg_9
// 1134           {
// 1135             devState = DEV_NWK_JOINING;
        MOV     DPTR,#devState
        MOV     A,#0x3
        LCALL   ?Subroutine11 & 0xFFFF
// 1136 
// 1137             ZDApp_NodeProfileSync( pChosenNwk->stackProfile);
??CrossCallReturnLabel_2:
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??ZDApp_NodeProfileSync::?relay`; Banked call to: ZDApp_NodeProfileSync
// 1138 
// 1139             if ( NLME_JoinRequest( pChosenNwk->extendedPANID, pChosenNwk->panId,
// 1140                                   pChosenNwk->logicalChannel,
// 1141                                   ZDO_Config_Node_Descriptor.CapabilityFlags,
// 1142                                   pChosenNwk->chosenRouter, pChosenNwk->chosenRouterDepth ) != ZSuccess )
        ; Setup parameters for call to function NLME_JoinRequest
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0,A
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 16)
        MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
        MOVX    A,@DPTR
        MOV     ?V0,A
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 17)
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ?Subroutine40 & 0xFFFF
// 1143             {
// 1144               ZDApp_NetworkInit( (uint16)(NWK_START_DELAY
// 1145                                           + ((uint16)(osal_rand()& EXTENDED_JOINING_RANDOM_MASK))) );
// 1146             }
// 1147           } // if ( devStartMode == MODE_JOIN )
??CrossCallReturnLabel_74:
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        LCALL   ?Subroutine29 & 0xFFFF
??CrossCallReturnLabel_77:
        LCALL   `??NLME_JoinRequest::?relay`; Banked call to: NLME_JoinRequest
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 13)
        LJMP    ??ZDApp_ProcessOSALMsg_10 & 0xFFFF
// 1148           else if ( devStartMode == MODE_REJOIN )
??ZDApp_ProcessOSALMsg_9:
        XRL     A,#0x3
        JZ      $+5
        LJMP    ??ZDApp_ProcessOSALMsg_11 & 0xFFFF
// 1149           {
// 1150             ZStatus_t rejoinStatus;
// 1151 
// 1152             devState = DEV_NWK_REJOIN;
        MOV     DPTR,#devState
        MOV     A,#0x4
        MOVX    @DPTR,A
// 1153 
// 1154             // Before trying to do rejoin, check if the device has a valid short address
// 1155             // If not, generate a random short address for itself
// 1156             if ( _NIB.nwkDevAddress == INVALID_NODE_ADDR )
        MOV     DPTR,#_NIB + 20
        MOVX    A,@DPTR
        XRL     A,#0xfe
        JNZ     ??ZDApp_ProcessOSALMsg_12
        INC     DPTR
        MOVX    A,@DPTR
        CPL     A
??ZDApp_ProcessOSALMsg_12:
        JNZ     ??ZDApp_ProcessOSALMsg_13
// 1157             {
// 1158               uint16 commNwkAddr;
// 1159 
// 1160               // Verify if the Network address has been commissioned by external tool
// 1161               if ( ( osal_nv_read( ZCD_NV_COMMISSIONED_NWK_ADDR, 0,
// 1162                                  sizeof(commNwkAddr),
// 1163                                  (void*)&commNwkAddr ) == ZSUCCESS )   &&
// 1164                    ( commNwkAddr != INVALID_NODE_ADDR ) )
        ; Setup parameters for call to function osal_nv_read
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP100_8
        MOV     ?V0,R0
        MOV     ?V1,R1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 15)
        MOV     ?V0,#0x2
        MOV     ?V1,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 17)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x49
        MOV     R3,#0x0
        LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 13)
        MOV     A,R1
        JNZ     ??ZDApp_ProcessOSALMsg_14
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        XRL     A,#0xfe
        JNZ     ??ZDApp_ProcessOSALMsg_15
        INC     DPTR
        MOVX    A,@DPTR
        CPL     A
??ZDApp_ProcessOSALMsg_15:
        JZ      ??ZDApp_ProcessOSALMsg_14
// 1165               {
// 1166                 _NIB.nwkDevAddress = commNwkAddr;
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine59_0 & 0xFFFF
??CrossCallReturnLabel_91:
        MOV     DPTR,#_NIB + 20
        LCALL   ??Subroutine61_0 & 0xFFFF
// 1167 
// 1168                 // clear Allocate address bit because device has a commissioned address
// 1169                 _NIB.CapabilityFlags &= ~CAPINFO_ALLOC_ADDR;
??CrossCallReturnLabel_99:
        MOV     DPTR,#_NIB + 14
        MOVX    A,@DPTR
        CLR     0xE0 /* A   */.7
        SJMP    ??ZDApp_ProcessOSALMsg_16
// 1170               }
// 1171               else
// 1172               {
// 1173                 _NIB.nwkDevAddress = osal_rand();
??ZDApp_ProcessOSALMsg_14:
        ; Setup parameters for call to function osal_rand
        LCALL   `??osal_rand::?relay`; Banked call to: osal_rand
        MOV     DPTR,#_NIB + 20
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
??ZDApp_ProcessOSALMsg_16:
        MOVX    @DPTR,A
// 1174               }
// 1175 
// 1176               ZMacSetReq( ZMacShortAddress, (byte*)&_NIB.nwkDevAddress );
        ; Setup parameters for call to function ZMacSetReq
        MOV     R2,#(_NIB + 20) & 0xff
        MOV     R3,#((_NIB + 20) >> 8) & 0xff
        MOV     R1,#0x53
        LCALL   `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
// 1177             }
// 1178 
// 1179             // Check if the device has a valid PanID, if not, set it to the discovered Pan
// 1180             if ( _NIB.nwkPanId == INVALID_PAN_ID )
??ZDApp_ProcessOSALMsg_13:
        MOV     DPTR,#_NIB + 33
        MOVX    A,@DPTR
        XRL     A,#0xfe
        JNZ     ??ZDApp_ProcessOSALMsg_17
        INC     DPTR
        MOVX    A,@DPTR
        CPL     A
??ZDApp_ProcessOSALMsg_17:
        JNZ     ??ZDApp_ProcessOSALMsg_18
// 1181             {
// 1182               _NIB.nwkPanId = pChosenNwk->panId;
        LCALL   ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_96:
        MOV     DPTR,#_NIB + 33
        LCALL   ??Subroutine61_0 & 0xFFFF
// 1183               ZMacSetReq( ZMacPanId, (byte*)&(_NIB.nwkPanId) );
??CrossCallReturnLabel_100:
        ; Setup parameters for call to function ZMacSetReq
        MOV     R2,#(_NIB + 33) & 0xff
        MOV     R3,#((_NIB + 33) >> 8) & 0xff
        MOV     R1,#0x50
        LCALL   `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
// 1184             }
// 1185 
// 1186             tmp = true;
??ZDApp_ProcessOSALMsg_18:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x1
        MOVX    @DPTR,A
// 1187             ZMacSetReq( ZMacRxOnIdle, &tmp ); // Set receiver always on during rejoin
        ; Setup parameters for call to function ZMacSetReq
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        MOV     R1,#0x52
        LCALL   `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
// 1188 
// 1189             // Perform Secure or Unsecure Rejoin depending on available configuration
// 1190             if ( ZG_SECURE_ENABLED && ( ZDApp_RestoreNwkKey() == TRUE ) )
        ; Setup parameters for call to function ZDApp_RestoreNwkKey
        LCALL   `??ZDApp_RestoreNwkKey::?relay`; Banked call to: ZDApp_RestoreNwkKey
        MOV     A,R1
        XRL     A,#0x1
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        JNZ     ??ZDApp_ProcessOSALMsg_19
// 1191             {
// 1192               rejoinStatus = NLME_ReJoinRequest( ZDO_UseExtendedPANID, pChosenNwk->logicalChannel);
        ; Setup parameters for call to function NLME_ReJoinRequest
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     R2,#ZDO_UseExtendedPANID & 0xff
        MOV     R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
        LCALL   `??NLME_ReJoinRequest::?relay`; Banked call to: NLME_ReJoinRequest
        SJMP    ??ZDApp_ProcessOSALMsg_10
// 1193             }
// 1194             else
// 1195             {
// 1196               rejoinStatus = NLME_ReJoinRequestUnsecure( ZDO_UseExtendedPANID, pChosenNwk->logicalChannel);
??ZDApp_ProcessOSALMsg_19:
        ; Setup parameters for call to function NLME_ReJoinRequestUnsecure
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     R2,#ZDO_UseExtendedPANID & 0xff
        MOV     R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
        LCALL   `??NLME_ReJoinRequestUnsecure::?relay`; Banked call to: NLME_ReJoinRequestUnsecure
??ZDApp_ProcessOSALMsg_10:
        MOV     A,R1
// 1197             }
// 1198 
// 1199             if ( rejoinStatus != ZSuccess )
        JZ      ??ZDApp_ProcessOSALMsg_11
// 1200             {
// 1201               ZDApp_NetworkInit( (uint16)(NWK_START_DELAY
// 1202                                           + ((uint16)(osal_rand()& EXTENDED_JOINING_RANDOM_MASK))) );
        ; Setup parameters for call to function osal_rand
        LCALL   `??osal_rand::?relay`; Banked call to: osal_rand
        ; Setup parameters for call to function ZDApp_NetworkInit
        MOV     A,R2
        ANL     A,#0x7f
        ADD     A,#0x64
        MOV     R2,A
        MOV     R3,#0x0
        LCALL   `??ZDApp_NetworkInit::?relay`; Banked call to: ZDApp_NetworkInit
// 1203             }
// 1204           } // else if ( devStartMode == MODE_REJOIN )
// 1205 
// 1206           // The receiver is on, turn network layer polling off.
// 1207           if ( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE )
??ZDApp_ProcessOSALMsg_11:
        MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.3
        JNC     ??ZDApp_ProcessOSALMsg_20
// 1208           {
// 1209             // for an End Device with NO Child Table Management process or for a Router
// 1210             if ( ( ZG_DEVICE_RTR_TYPE )  ||
// 1211 #if defined ( ZIGBEE_CHILD_AGING )
// 1212                  ( (ZG_DEVICE_ENDDEVICE_TYPE) && ( zgChildAgingEnable == FALSE ) ) )
        MOV     DPTR,#zgDeviceLogicalType
        MOVX    A,@DPTR
        JZ      ??ZDApp_ProcessOSALMsg_21
        XRL     A,#0x1
        JZ      ??ZDApp_ProcessOSALMsg_21
        MOV     DPTR,#zgChildAgingEnable
        MOVX    A,@DPTR
        JZ      $+5
        LJMP    ??ZDApp_ProcessOSALMsg_5 & 0xFFFF
// 1213 #else
// 1214                  (ZG_DEVICE_ENDDEVICE_TYPE) )
// 1215 #endif // ZIGBEE_CHILD_AGING
// 1216             {
// 1217               NLME_SetPollRate( 0 );
??ZDApp_ProcessOSALMsg_21:
        ; Setup parameters for call to function NLME_SetPollRate
        MOV     R2,#0x0
        MOV     R3,#0x0
        LCALL   `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
// 1218               NLME_SetQueuedPollRate( 0 );
        ; Setup parameters for call to function NLME_SetQueuedPollRate
        MOV     R2,#0x0
        MOV     R3,#0x0
        LCALL   `??NLME_SetQueuedPollRate::?relay`; Banked call to: NLME_SetQueuedPollRate
// 1219               NLME_SetResponseRate( 0 );
        ; Setup parameters for call to function NLME_SetResponseRate
        MOV     R2,#0x0
        MOV     R3,#0x0
        LCALL   `??NLME_SetResponseRate::?relay`; Banked call to: NLME_SetResponseRate
        LJMP    ??ZDApp_ProcessOSALMsg_5 & 0xFFFF
// 1220             }
// 1221           }
// 1222           else
// 1223           {
// 1224             if ( (ZG_SECURE_ENABLED) && (devStartMode == MODE_JOIN) )
??ZDApp_ProcessOSALMsg_20:
        MOV     DPTR,#devStartMode
        MOVX    A,@DPTR
        JNZ     ??ZDApp_ProcessOSALMsg_5
// 1225             {
// 1226               ZDApp_SavedPollRate = zgPollRate;
        MOV     DPTR,#zgPollRate
        LCALL   ??Subroutine59_0 & 0xFFFF
??CrossCallReturnLabel_92:
        MOV     DPTR,#ZDApp_SavedPollRate
        LCALL   ??Subroutine61_0 & 0xFFFF
// 1227               NLME_SetPollRate( zgRejoinPollRate );
??CrossCallReturnLabel_101:
        ; Setup parameters for call to function NLME_SetPollRate
        MOV     DPTR,#zgRejoinPollRate
        LCALL   ?Subroutine24 & 0xFFFF
// 1228             }
// 1229           }
// 1230         }
??CrossCallReturnLabel_19:
        LCALL   `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
        SJMP    ??ZDApp_ProcessOSALMsg_5
// 1231         else
// 1232         {
// 1233           if ( continueJoining )
??ZDApp_ProcessOSALMsg_8:
        MOV     DPTR,#continueJoining
        MOVX    A,@DPTR
        JZ      ??ZDApp_ProcessOSALMsg_5
// 1234           {
// 1235     #if defined ( MANAGED_SCAN )
// 1236             ZDApp_NetworkInit( MANAGEDSCAN_DELAY_BETWEEN_SCANS );
// 1237     #else
// 1238             zdoDiscCounter++;
        MOV     DPTR,#zdoDiscCounter
        MOVX    A,@DPTR
        INC     A
        MOVX    @DPTR,A
// 1239             ZDApp_NetworkInit( (uint16)(BEACON_REQUEST_DELAY
// 1240                   + ((uint16)(osal_rand()& BEACON_REQ_DELAY_MASK))) );
        ; Setup parameters for call to function osal_rand
        LCALL   `??osal_rand::?relay`; Banked call to: osal_rand
        ; Setup parameters for call to function ZDApp_NetworkInit
        MOV     A,R2
        ADD     A,#0x64
        MOV     R2,A
        CLR     A
        ADDC    A,#0x0
        MOV     R3,A
        SJMP    ??ZDApp_ProcessOSALMsg_22
// 1241     #endif
// 1242           }
// 1243         }
// 1244       }
// 1245       break;
// 1246 
// 1247     case ZDO_NWK_JOIN_IND:
// 1248       if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
??ZDApp_ProcessOSALMsg_1:
        MOV     DPTR,#zgDeviceLogicalType
        MOVX    A,@DPTR
        XRL     A,#0x1
        JZ      ??ZDApp_ProcessOSALMsg_23
        MOVX    A,@DPTR
        XRL     A,#0x2
        JNZ     ??ZDApp_ProcessOSALMsg_5
// 1249       {
// 1250         ZDApp_ProcessNetworkJoin();
??ZDApp_ProcessOSALMsg_23:
        ; Setup parameters for call to function ZDApp_ProcessNetworkJoin
        LCALL   `??ZDApp_ProcessNetworkJoin::?relay`; Banked call to: ZDApp_ProcessNetworkJoin
        SJMP    ??ZDApp_ProcessOSALMsg_5
// 1251       }
// 1252       break;
// 1253 
// 1254     case ZDO_NWK_JOIN_REQ:
// 1255       if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
??ZDApp_ProcessOSALMsg_2:
        MOV     DPTR,#zgDeviceLogicalType
        MOVX    A,@DPTR
        XRL     A,#0x1
        JZ      ??ZDApp_ProcessOSALMsg_24
        MOVX    A,@DPTR
        XRL     A,#0x2
        JNZ     ??ZDApp_ProcessOSALMsg_5
// 1256       {
// 1257         retryCnt = 0;
??ZDApp_ProcessOSALMsg_24:
        MOV     DPTR,#retryCnt
        CLR     A
        MOVX    @DPTR,A
// 1258         devStartMode = MODE_RESUME;
        MOV     DPTR,#devStartMode
        INC     A
        MOVX    @DPTR,A
// 1259         _tmpRejoinState = true;
        MOV     DPTR,#_tmpRejoinState
        MOVX    @DPTR,A
// 1260         osal_cpyExtAddr( ZDO_UseExtendedPANID, _NIB.extendedPANID );
        ; Setup parameters for call to function sAddrExtCpy
        MOV     R4,#(_NIB + 53) & 0xff
        MOV     R5,#((_NIB + 53) >> 8) & 0xff
        MOV     R2,#ZDO_UseExtendedPANID & 0xff
        MOV     R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
        LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
// 1261         zgDefaultStartingScanDuration = BEACON_ORDER_60_MSEC;
        MOV     DPTR,#zgDefaultStartingScanDuration
        MOV     A,#0x2
        MOVX    @DPTR,A
// 1262         ZDApp_NetworkInit( 0 );
        ; Setup parameters for call to function ZDApp_NetworkInit
        MOV     R2,#0x0
        MOV     R3,#0x0
??ZDApp_ProcessOSALMsg_22:
        LCALL   `??ZDApp_NetworkInit::?relay`; Banked call to: ZDApp_NetworkInit
        SJMP    ??ZDApp_ProcessOSALMsg_5
// 1263       }
// 1264       break;
// 1265 
// 1266     default:
// 1267       if ( ZG_SECURE_ENABLED )
// 1268         ZDApp_ProcessSecMsg( msgPtr );
??ZDApp_ProcessOSALMsg_6:
        ; Setup parameters for call to function ZDApp_ProcessSecMsg
        LCALL   `??ZDApp_ProcessSecMsg::?relay`; Banked call to: ZDApp_ProcessSecMsg
// 1269       break;
// 1270   }
// 1271 
// 1272 }
??ZDApp_ProcessOSALMsg_5:
        MOV     A,#0x3
        LJMP    ??Subroutine52_0 & 0xFFFF
          CFI EndBlock cfiBlock31

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine40:
          CFI Block cfiCond32 Using cfiCommon0
          CFI Function ZDApp_ProcessOSALMsg
          CFI Conditional ??CrossCallReturnLabel_74
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond33 Using cfiCommon0
          CFI (cfiCond33) Function ZDO_beaconNotifyIndCB
          CFI (cfiCond33) Conditional ??CrossCallReturnLabel_75
          CFI (cfiCond33) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond33) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond33) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond33) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond33) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond33) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond33) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond33) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond33) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond33) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond33) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond33) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond33) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond33) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond33) CFA_SP SP+-2
          CFI (cfiCond33) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker34 Using cfiCommon1
          CFI (cfiPicker34) NoFunction
          CFI (cfiPicker34) Picker
        INC     DPTR
          CFI EndBlock cfiCond32
          CFI EndBlock cfiCond33
          CFI EndBlock cfiPicker34
        REQUIRE ??Subroutine50_0
        ; // Fall through to label ??Subroutine50_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine50_0:
          CFI Block cfiCond35 Using cfiCommon0
          CFI Function ZDO_beaconNotifyIndCB
          CFI Conditional ??CrossCallReturnLabel_73, ??CrossCallReturnLabel_8
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond36 Using cfiCommon0
          CFI (cfiCond36) Function ZDO_JoinConfirmCB
          CFI (cfiCond36) Conditional ??CrossCallReturnLabel_73, ??CrossCallReturnLabel_9
          CFI (cfiCond36) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond36) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond36) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond36) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond36) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond36) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond36) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond36) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond36) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond36) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond36) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond36) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond36) CFA_SP SP+-4
          CFI (cfiCond36) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond37 Using cfiCommon0
          CFI (cfiCond37) Function ZDO_JoinConfirmCB
          CFI (cfiCond37) Conditional ??CrossCallReturnLabel_73, ??CrossCallReturnLabel_10
          CFI (cfiCond37) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond37) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond37) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond37) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond37) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond37) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond37) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond37) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond37) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond37) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond37) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond37) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond37) CFA_SP SP+-4
          CFI (cfiCond37) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond38 Using cfiCommon0
          CFI (cfiCond38) Function ZDApp_ProcessOSALMsg
          CFI (cfiCond38) Conditional ??CrossCallReturnLabel_74
          CFI (cfiCond38) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond38) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond38) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond38) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond38) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond38) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond38) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond38) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond38) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond38) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond38) CFA_SP SP+-2
          CFI (cfiCond38) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond39 Using cfiCommon0
          CFI (cfiCond39) Function ZDO_beaconNotifyIndCB
          CFI (cfiCond39) Conditional ??CrossCallReturnLabel_75
          CFI (cfiCond39) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond39) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond39) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond39) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond39) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond39) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond39) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond39) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond39) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond39) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond39) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond39) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond39) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond39) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond39) CFA_SP SP+-2
          CFI (cfiCond39) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker40 Using cfiCommon1
          CFI (cfiPicker40) NoFunction
          CFI (cfiPicker40) Picker
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPL,R6
        MOV     DPH,R7
        RET
          CFI EndBlock cfiCond35
          CFI EndBlock cfiCond36
          CFI EndBlock cfiCond37
          CFI EndBlock cfiCond38
          CFI EndBlock cfiCond39
          CFI EndBlock cfiPicker40

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine29:
          CFI Block cfiCond41 Using cfiCommon0
          CFI Function ZDApp_ProcessOSALMsg
          CFI Conditional ??CrossCallReturnLabel_77
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond42 Using cfiCommon0
          CFI (cfiCond42) Function ZDO_beaconNotifyIndCB
          CFI (cfiCond42) Conditional ??CrossCallReturnLabel_78
          CFI (cfiCond42) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond42) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond42) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond42) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond42) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond42) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond42) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond42) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond42) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond42) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond42) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond42) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond42) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond42) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond42) CFA_SP SP+-2
          CFI (cfiCond42) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker43 Using cfiCommon1
          CFI (cfiPicker43) NoFunction
          CFI (cfiPicker43) Picker
        MOV     R5,A
          CFI EndBlock cfiCond41
          CFI EndBlock cfiCond42
          CFI EndBlock cfiPicker43
        REQUIRE ??Subroutine51_0
        ; // Fall through to label ??Subroutine51_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine51_0:
          CFI Block cfiCond44 Using cfiCommon0
          CFI Function ZDO_beaconNotifyIndCB
          CFI Conditional ??CrossCallReturnLabel_76
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond45 Using cfiCommon0
          CFI (cfiCond45) Function ZDApp_ProcessOSALMsg
          CFI (cfiCond45) Conditional ??CrossCallReturnLabel_77
          CFI (cfiCond45) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond45) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond45) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond45) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond45) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond45) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond45) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond45) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond45) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond45) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond45) CFA_SP SP+-2
          CFI (cfiCond45) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond46 Using cfiCommon0
          CFI (cfiCond46) Function ZDO_beaconNotifyIndCB
          CFI (cfiCond46) Conditional ??CrossCallReturnLabel_78
          CFI (cfiCond46) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond46) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond46) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond46) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond46) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond46) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond46) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond46) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond46) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond46) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond46) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond46) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond46) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond46) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond46) CFA_SP SP+-2
          CFI (cfiCond46) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker47 Using cfiCommon1
          CFI (cfiPicker47) NoFunction
          CFI (cfiPicker47) Picker
        MOV     A,R6
        ADD     A,#0xb
        MOV     R2,A
        CLR     A
        ADDC    A,R7
        MOV     R3,A
        RET
          CFI EndBlock cfiCond44
          CFI EndBlock cfiCond45
          CFI EndBlock cfiCond46
          CFI EndBlock cfiPicker47
// 1273 
// 1274 /*********************************************************************
// 1275  * @fn      ZDApp_ProcessMsgCBs()
// 1276  *
// 1277  * @brief   Process response messages
// 1278  *
// 1279  * @param   none
// 1280  *
// 1281  * @return  none
// 1282  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1283 void ZDApp_ProcessMsgCBs( zdoIncomingMsg_t *inMsg )
ZDApp_ProcessMsgCBs:
          CFI Block cfiBlock48 Using cfiCommon0
          CFI Function ZDApp_ProcessMsgCBs
        CODE
// 1284 {
        FUNCALL ZDApp_ProcessMsgCBs, ZDO_ParseAddrRsp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessMsgCBs, ZDO_UpdateAddrManager
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessMsgCBs, ZDApp_ProcessPendingBindReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessMsgCBs, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessMsgCBs, ZDO_ParseBindUnbindReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessMsgCBs, ZDO_ProcessBindUnbindReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 21
        MOV     A,#-0x15
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 33)
        MOV     ?V0,R2
        MOV     ?V1,R3
// 1285   switch ( inMsg->clusterID )
        MOV     A,R2
        LCALL   ??Subroutine56_0 & 0xFFFF
??CrossCallReturnLabel_79:
        MOV     ?V2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V3,A
        MOV     R0,#?V2
        LCALL   ?US_SWITCH_SPARSE
`?<Jumptable for ZDApp_ProcessMsgCBs>_0`:
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        2
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        33
        DATA
        DATA16
        DATA
        DATA16
        DW        34
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??ZDApp_ProcessMsgCBs_0
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        32768
        DATA
        DATA16
        DATA
        DATA16
        DW        32769
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??ZDApp_ProcessMsgCBs_1
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        0
        DATA
        DATA16
        DATA
        DATA16
        DW        ??ZDApp_ProcessMsgCBs_2
        CODE
// 1286   {
// 1287 #if defined ( ZDO_NWKADDR_REQUEST ) || defined ( ZDO_IEEEADDR_REQUEST ) || defined ( REFLECTOR )
// 1288     case NWK_addr_rsp:
// 1289     case IEEE_addr_rsp:
// 1290       {
// 1291         ZDO_NwkIEEEAddrResp_t *pAddrRsp;
// 1292 
// 1293         pAddrRsp = ZDO_ParseAddrRsp( inMsg );
??ZDApp_ProcessMsgCBs_1:
        ; Setup parameters for call to function ZDO_ParseAddrRsp
        LCALL   `??ZDO_ParseAddrRsp::?relay`; Banked call to: ZDO_ParseAddrRsp
        MOV     ?V2,R2
        MOV     ?V3,R3
        MOV     R6,?V2
        MOV     R7,?V3
// 1294         if ( pAddrRsp )
        MOV     A,R6
        ORL     A,R7
        JZ      ??ZDApp_ProcessMsgCBs_2
// 1295         {
// 1296           if ( pAddrRsp->status == ZSuccess )
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        JNZ     ??ZDApp_ProcessMsgCBs_3
// 1297           {
// 1298             ZDO_UpdateAddrManager( pAddrRsp->nwkAddr, pAddrRsp->extAddr );
        ; Setup parameters for call to function ZDO_UpdateAddrManager
        MOV     A,R6
        ADD     A,#0x3
        MOV     R4,A
        CLR     A
        ADDC    A,R7
        MOV     R5,A
        INC     DPTR
        LCALL   ?Subroutine24 & 0xFFFF
// 1299           }
??CrossCallReturnLabel_20:
        LCALL   `??ZDO_UpdateAddrManager::?relay`; Banked call to: ZDO_UpdateAddrManager
// 1300 
// 1301 #if !defined ( ZDP_BIND_SKIP_VALIDATION )
// 1302           // look for pending bind entry for NWK_addr_rsp Only
// 1303           if ( inMsg->clusterID == NWK_addr_rsp )
??ZDApp_ProcessMsgCBs_3:
        LCALL   ?Subroutine32 & 0xFFFF
??CrossCallReturnLabel_80:
        JNZ     ??ZDApp_ProcessMsgCBs_4
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x80
??ZDApp_ProcessMsgCBs_4:
        JNZ     ??ZDApp_ProcessMsgCBs_5
// 1304           {
// 1305 #if defined ( REFLECTOR )
// 1306             ZDApp_ProcessPendingBindReq( pAddrRsp->extAddr );
        ; Setup parameters for call to function ZDApp_ProcessPendingBindReq
        MOV     A,R6
        ADD     A,#0x3
        MOV     R2,A
        CLR     A
        ADDC    A,R7
        MOV     R3,A
        LCALL   `??ZDApp_ProcessPendingBindReq::?relay`; Banked call to: ZDApp_ProcessPendingBindReq
// 1307 #endif
// 1308           }
// 1309 #endif
// 1310 
// 1311           osal_mem_free( pAddrRsp );
??ZDApp_ProcessMsgCBs_5:
        ; Setup parameters for call to function osal_mem_free
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
        SJMP    ??ZDApp_ProcessMsgCBs_2
// 1312         }
// 1313       }
// 1314       break;
// 1315 #endif
// 1316 
// 1317 #if defined ( REFLECTOR )
// 1318     case Bind_req:
// 1319     case Unbind_req:
// 1320       {
// 1321         ZDO_BindUnbindReq_t bindReq;
// 1322         ZDO_ParseBindUnbindReq( inMsg, &bindReq );
??ZDApp_ProcessMsgCBs_0:
        ; Setup parameters for call to function ZDO_ParseBindUnbindReq
        MOV     R4,?XSP + 0
        MOV     R5,?XSP + 1
        LCALL   `??ZDO_ParseBindUnbindReq::?relay`; Banked call to: ZDO_ParseBindUnbindReq
// 1323         ZDO_ProcessBindUnbindReq( inMsg, &bindReq );
        ; Setup parameters for call to function ZDO_ProcessBindUnbindReq
        MOV     R4,?XSP + 0
        MOV     R5,?XSP + 1
        MOV     R2,?V0
        MOV     R3,?V1
        LCALL   `??ZDO_ProcessBindUnbindReq::?relay`; Banked call to: ZDO_ProcessBindUnbindReq
// 1324       }
// 1325       break;
// 1326 #endif
// 1327 
// 1328 #if ( ZG_BUILD_COORDINATOR_TYPE )
// 1329     case Bind_rsp:
// 1330     case Unbind_rsp:
// 1331       if (ZG_DEVICE_COORDINATOR_TYPE && matchED)
// 1332       {
// 1333         ZDMatchSendState(
// 1334              (uint8)((inMsg->clusterID == Bind_rsp) ? ZDMATCH_REASON_BIND_RSP : ZDMATCH_REASON_UNBIND_RSP),
// 1335              ZDO_ParseBindRsp(inMsg), inMsg->TransSeq );
// 1336       }
// 1337       break;
// 1338 
// 1339     case End_Device_Bind_req:
// 1340       if (ZG_DEVICE_COORDINATOR_TYPE)
// 1341       {
// 1342         ZDEndDeviceBind_t bindReq;
// 1343         ZDO_ParseEndDeviceBindReq( inMsg, &bindReq );
// 1344         ZDO_MatchEndDeviceBind( &bindReq );
// 1345 
// 1346         // Freeing the cluster lists - if allocated.
// 1347         if ( bindReq.numInClusters )
// 1348           osal_mem_free( bindReq.inClusters );
// 1349         if ( bindReq.numOutClusters )
// 1350           osal_mem_free( bindReq.outClusters );
// 1351       }
// 1352       break;
// 1353 #endif
// 1354   }
// 1355 }
??ZDApp_ProcessMsgCBs_2:
        MOV     A,#0x15
        LJMP    ?Subroutine4 & 0xFFFF
          CFI EndBlock cfiBlock48

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine24:
          CFI Block cfiCond49 Using cfiCommon0
          CFI Function ZDApp_SecInit
          CFI Conditional ??CrossCallReturnLabel_17
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond50 Using cfiCommon0
          CFI (cfiCond50) Function ZDApp_DeviceAuthEvt
          CFI (cfiCond50) Conditional ??CrossCallReturnLabel_18
          CFI (cfiCond50) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond50) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond50) CFA_SP SP+-7
          CFI Block cfiCond51 Using cfiCommon0
          CFI (cfiCond51) Function ZDApp_ProcessOSALMsg
          CFI (cfiCond51) Conditional ??CrossCallReturnLabel_19
          CFI (cfiCond51) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond51) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond51) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond51) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond51) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond51) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond51) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond51) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond51) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond51) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond51) CFA_SP SP+-2
          CFI (cfiCond51) CFA_XSP16 add(XSP16, 13)
          CFI Block cfiCond52 Using cfiCommon0
          CFI (cfiCond52) Function ZDApp_ProcessMsgCBs
          CFI (cfiCond52) Conditional ??CrossCallReturnLabel_20
          CFI (cfiCond52) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond52) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond52) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond52) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond52) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond52) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond52) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond52) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond52) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond52) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond52) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond52) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond52) CFA_SP SP+-2
          CFI (cfiCond52) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond53 Using cfiCommon0
          CFI (cfiCond53) Function ZDO_JoinIndicationCB
          CFI (cfiCond53) Conditional ??CrossCallReturnLabel_21
          CFI (cfiCond53) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond53) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond53) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond53) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond53) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond53) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond53) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond53) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond53) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond53) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond53) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond53) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond53) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond53) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond53) CFA_SP SP+-2
          CFI (cfiCond53) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond54 Using cfiCommon0
          CFI (cfiCond54) Function ZDO_LeaveInd
          CFI (cfiCond54) Conditional ??CrossCallReturnLabel_22
          CFI (cfiCond54) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond54) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond54) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond54) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond54) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond54) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond54) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond54) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond54) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond54) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond54) CFA_SP SP+-2
          CFI (cfiCond54) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker55 Using cfiCommon1
          CFI (cfiPicker55) NoFunction
          CFI (cfiPicker55) Picker
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        RET
          CFI EndBlock cfiCond49
          CFI EndBlock cfiCond50
          CFI EndBlock cfiCond51
          CFI EndBlock cfiCond52
          CFI EndBlock cfiCond53
          CFI EndBlock cfiCond54
          CFI EndBlock cfiPicker55
// 1356 
// 1357 /*********************************************************************
// 1358  * @fn      ZDApp_RegisterCBs()
// 1359  *
// 1360  * @brief   Process response messages
// 1361  *
// 1362  * @param   none
// 1363  *
// 1364  * @return  none
// 1365  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1366 void ZDApp_RegisterCBs( void )
ZDApp_RegisterCBs:
          CFI Block cfiBlock56 Using cfiCommon0
          CFI Function ZDApp_RegisterCBs
        CODE
// 1367 {
        FUNCALL ZDApp_RegisterCBs, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_RegisterCBs, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_RegisterCBs, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_RegisterCBs, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1368 #if defined ( ZDO_IEEEADDR_REQUEST ) || defined ( REFLECTOR )
// 1369   ZDO_RegisterForZDOMsg( ZDAppTaskID, IEEE_addr_rsp );
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV     R2,#0x1
        MOV     R3,#-0x80
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
// 1370 #endif
// 1371 #if defined ( ZDO_NWKADDR_REQUEST ) || defined ( REFLECTOR )
// 1372   ZDO_RegisterForZDOMsg( ZDAppTaskID, NWK_addr_rsp );
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV     R2,#0x0
        MOV     R3,#-0x80
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
// 1373 #endif
// 1374 #if ZG_BUILD_COORDINATOR_TYPE
// 1375   ZDO_RegisterForZDOMsg( ZDAppTaskID, Bind_rsp );
// 1376   ZDO_RegisterForZDOMsg( ZDAppTaskID, Unbind_rsp );
// 1377   ZDO_RegisterForZDOMsg( ZDAppTaskID, End_Device_Bind_req );
// 1378 #endif
// 1379 #if defined ( REFLECTOR )
// 1380   ZDO_RegisterForZDOMsg( ZDAppTaskID, Bind_req );
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV     R2,#0x21
        MOV     R3,#0x0
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
// 1381   ZDO_RegisterForZDOMsg( ZDAppTaskID, Unbind_req );
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV     R2,#0x22
        MOV     R3,#0x0
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
// 1382 #endif
// 1383 }
        LJMP    ??Subroutine54_0 & 0xFFFF
          CFI EndBlock cfiBlock56
// 1384 
// 1385 /*********************************************************************
// 1386  * @fn      ZDApp_ProcessSecMsg()
// 1387  *
// 1388  * @brief   Process the incoming security message.
// 1389  *
// 1390  * @param   msgPtr - message to process
// 1391  *
// 1392  * @return  none
// 1393  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1394 void ZDApp_ProcessSecMsg( osal_event_hdr_t *msgPtr )
ZDApp_ProcessSecMsg:
          CFI Block cfiBlock57 Using cfiCommon0
          CFI Function ZDApp_ProcessSecMsg
        CODE
// 1395 {
        FUNCALL ZDApp_ProcessSecMsg, ZDSecMgrTransportKeyInd
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessSecMsg, ZDSecMgrSwitchKeyInd
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1396   switch ( msgPtr->event )
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        ADD     A,#-0x4
        JZ      ??ZDApp_ProcessSecMsg_0
        ADD     A,#-0x4
        JZ      ??ZDApp_ProcessSecMsg_1
        SJMP    ??ZDApp_ProcessSecMsg_2
// 1397   {
// 1398     case ZDO_TRANSPORT_KEY_IND:
// 1399       if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
??ZDApp_ProcessSecMsg_0:
        MOV     DPTR,#zgDeviceLogicalType
        MOVX    A,@DPTR
        XRL     A,#0x1
        JZ      ??ZDApp_ProcessSecMsg_3
        MOVX    A,@DPTR
        XRL     A,#0x2
        JNZ     ??ZDApp_ProcessSecMsg_2
// 1400       {
// 1401         ZDSecMgrTransportKeyInd( (ZDO_TransportKeyInd_t*)msgPtr );
??ZDApp_ProcessSecMsg_3:
        ; Setup parameters for call to function ZDSecMgrTransportKeyInd
        LCALL   `??ZDSecMgrTransportKeyInd::?relay`; Banked call to: ZDSecMgrTransportKeyInd
        SJMP    ??ZDApp_ProcessSecMsg_2
// 1402       }
// 1403       break;
// 1404 
// 1405     case ZDO_UPDATE_DEVICE_IND:
// 1406       if ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
// 1407       {
// 1408         ZDSecMgrUpdateDeviceInd( (ZDO_UpdateDeviceInd_t*)msgPtr );
// 1409       }
// 1410       break;
// 1411 
// 1412     case ZDO_REMOVE_DEVICE_IND:
// 1413       if ( ZG_BUILD_RTRONLY_TYPE && ( zgDeviceLogicalType == ZG_DEVICETYPE_ROUTER ) )
// 1414       {
// 1415         ZDSecMgrRemoveDeviceInd( (ZDO_RemoveDeviceInd_t*)msgPtr );
// 1416       }
// 1417       break;
// 1418 
// 1419     case ZDO_REQUEST_KEY_IND:
// 1420       if ( ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD ) )
// 1421       {
// 1422         if ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
// 1423         {
// 1424           ZDSecMgrRequestKeyInd( (ZDO_RequestKeyInd_t*)msgPtr );
// 1425         }
// 1426       }
// 1427       break;
// 1428 
// 1429     case ZDO_SWITCH_KEY_IND:
// 1430       if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
??ZDApp_ProcessSecMsg_1:
        MOV     DPTR,#zgDeviceLogicalType
        MOVX    A,@DPTR
        XRL     A,#0x1
        JZ      ??ZDApp_ProcessSecMsg_4
        MOVX    A,@DPTR
        XRL     A,#0x2
        JNZ     ??ZDApp_ProcessSecMsg_2
// 1431       {
// 1432         ZDSecMgrSwitchKeyInd( (ZDO_SwitchKeyInd_t*)msgPtr );
??ZDApp_ProcessSecMsg_4:
        ; Setup parameters for call to function ZDSecMgrSwitchKeyInd
        LCALL   `??ZDSecMgrSwitchKeyInd::?relay`; Banked call to: ZDSecMgrSwitchKeyInd
// 1433       }
// 1434       break;
// 1435 
// 1436     default:
// 1437       // Unsupported messages
// 1438       break;
// 1439   }
// 1440 }
??ZDApp_ProcessSecMsg_2:
        LJMP    ??Subroutine54_0 & 0xFFFF
          CFI EndBlock cfiBlock57
// 1441 
// 1442 /*********************************************************************
// 1443  * @fn      ZDApp_ProcessNetworkJoin()
// 1444  *
// 1445  * @brief
// 1446  *
// 1447  *   Save off the Network key information.
// 1448  *
// 1449  * @param   none
// 1450  *
// 1451  * @return  none
// 1452  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1453 void ZDApp_ProcessNetworkJoin( void )
ZDApp_ProcessNetworkJoin:
          CFI Block cfiBlock58 Using cfiCommon0
          CFI Function ZDApp_ProcessNetworkJoin
        CODE
// 1454 {
        FUNCALL ZDApp_ProcessNetworkJoin, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, ZDApp_RestoreNwkKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, ZDApp_ResetTimerStart
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, ZDApp_AnnounceNewAddress
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, ZMacSetReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, nwkNeighborInitTable
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, NLME_NwkDiscTerm
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, osal_rand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, ZDApp_NetworkInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, ZDApp_RestoreNwkKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, ZDApp_ResetTimerStart
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, NLME_SetPollRate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, NLME_SetQueuedPollRate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, NLME_SetResponseRate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, ZDApp_AnnounceNewAddress
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, nwkNeighborInitTable
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, NLME_NwkDiscTerm
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, osal_rand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, ZDApp_NetworkInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, ZDApp_AnnounceNewAddress
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessNetworkJoin, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
// 1455   if ( (devState == DEV_NWK_JOINING) ||
// 1456       ((devState == DEV_NWK_ORPHAN)  &&
// 1457        (ZDO_Config_Node_Descriptor.LogicalType == NODETYPE_ROUTER)) )
        MOV     DPTR,#devState
        MOVX    A,@DPTR
        XRL     A,#0x3
        JZ      ??ZDApp_ProcessNetworkJoin_0
        MOVX    A,@DPTR
        XRL     A,#0xa
        JZ      $+5
        LJMP    ??ZDApp_ProcessNetworkJoin_1 & 0xFFFF
        MOV     DPTR,#ZDO_Config_Node_Descriptor
        MOVX    A,@DPTR
        ANL     A,#0x7
        XRL     A,#0x1
        JZ      $+5
        LJMP    ??ZDApp_ProcessNetworkJoin_2 & 0xFFFF
// 1458   {
// 1459     // Result of a Join attempt by this device.
// 1460     if ( nwkStatus == ZSuccess )
??ZDApp_ProcessNetworkJoin_0:
        MOV     DPTR,#nwkStatus
        MOVX    A,@DPTR
        JNZ     ??ZDApp_ProcessNetworkJoin_3
// 1461     {
// 1462       osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
        ; Setup parameters for call to function osal_set_event
        MOV     R2,#0x10
        MOV     R3,#0x0
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
// 1463 
// 1464 #if defined ( POWER_SAVING )
// 1465       osal_pwrmgr_device( PWRMGR_BATTERY );
// 1466 #endif
// 1467 
// 1468       if ( ZG_SECURE_ENABLED && ( ZDApp_RestoreNwkKey() == false ) )
        ; Setup parameters for call to function ZDApp_RestoreNwkKey
        LCALL   `??ZDApp_RestoreNwkKey::?relay`; Banked call to: ZDApp_RestoreNwkKey
        MOV     A,R1
        JNZ     $+5
        LJMP    ??ZDApp_ProcessNetworkJoin_4 & 0xFFFF
// 1469       {
// 1470         // wait for auth from trust center
// 1471         devState = DEV_END_DEVICE_UNAUTH;
// 1472 
// 1473         // Start the reset timer for MAX UNAUTH time
// 1474         ZDApp_ResetTimerStart( MAX_DEVICE_UNAUTH_TIMEOUT );
// 1475       }
// 1476       else
// 1477       {
// 1478         if ( ZSTACK_ROUTER_BUILD )
// 1479         {
// 1480           if ( devState == DEV_NWK_ORPHAN
// 1481             && ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
// 1482           {
// 1483             // Change NIB state to router for restore
// 1484             _NIB.nwkState = NWK_ROUTER;
// 1485           }
// 1486         }
// 1487 
// 1488         if ( devState == DEV_NWK_JOINING )
        MOV     DPTR,#devState
        MOVX    A,@DPTR
        XRL     A,#0x3
        JNZ     ??ZDApp_ProcessNetworkJoin_5
// 1489         {
// 1490           ZDApp_AnnounceNewAddress();
        ; Setup parameters for call to function ZDApp_AnnounceNewAddress
        LCALL   `??ZDApp_AnnounceNewAddress::?relay`; Banked call to: ZDApp_AnnounceNewAddress
// 1491         }
// 1492 
// 1493         devState = DEV_END_DEVICE;
??ZDApp_ProcessNetworkJoin_5:
        MOV     DPTR,#devState
        MOV     A,#0x6
        MOVX    @DPTR,A
// 1494         if ( ZSTACK_ROUTER_BUILD )
        LJMP    ??ZDApp_ProcessNetworkJoin_6 & 0xFFFF
// 1495         {
// 1496           // NOTE: first two parameters are not used, see NLMEDE.h for details
// 1497           if ( ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
// 1498           {
// 1499             NLME_StartRouterRequest( 0, 0, false );
// 1500           }
// 1501         }
// 1502       }
// 1503     }
// 1504     else
// 1505     {
// 1506       if ( (devStartMode == MODE_RESUME) && (++retryCnt >= MAX_RESUME_RETRY) )
??ZDApp_ProcessNetworkJoin_3:
        MOV     DPTR,#devStartMode
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??ZDApp_ProcessNetworkJoin_7
        MOV     DPTR,#retryCnt
        MOVX    A,@DPTR
        INC     A
        MOVX    @DPTR,A
        CLR     C
        SUBB    A,#0x3
        JC      ??ZDApp_ProcessNetworkJoin_7
// 1507       {
// 1508         if ( _NIB.nwkPanId == 0xFFFF || _NIB.nwkPanId == INVALID_PAN_ID )
        MOV     DPTR,#_NIB + 33
        MOVX    A,@DPTR
        CPL     A
        JNZ     ??ZDApp_ProcessNetworkJoin_8
        INC     DPTR
        MOVX    A,@DPTR
        CPL     A
??ZDApp_ProcessNetworkJoin_8:
        JZ      ??ZDApp_ProcessNetworkJoin_9
        MOV     DPTR,#_NIB + 33
        MOVX    A,@DPTR
        XRL     A,#0xfe
        JNZ     ??ZDApp_ProcessNetworkJoin_10
        INC     DPTR
        MOVX    A,@DPTR
        CPL     A
??ZDApp_ProcessNetworkJoin_10:
        JNZ     ??ZDApp_ProcessNetworkJoin_11
// 1509           devStartMode = MODE_JOIN;
??ZDApp_ProcessNetworkJoin_9:
        MOV     DPTR,#devStartMode
        CLR     A
        SJMP    ??ZDApp_ProcessNetworkJoin_12
// 1510         else
// 1511         {
// 1512           devStartMode = MODE_REJOIN;
??ZDApp_ProcessNetworkJoin_11:
        MOV     DPTR,#devStartMode
        MOV     A,#0x3
        MOVX    @DPTR,A
// 1513           _tmpRejoinState = true;
        MOV     DPTR,#_tmpRejoinState
        MOV     A,#0x1
??ZDApp_ProcessNetworkJoin_12:
        MOVX    @DPTR,A
// 1514         }
// 1515       }
// 1516 
// 1517       if ( (NLME_GetShortAddr() != INVALID_NODE_ADDR) ||
// 1518            (_NIB.nwkDevAddress != INVALID_NODE_ADDR) )
??ZDApp_ProcessNetworkJoin_7:
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     A,#-0x2
        XRL     A,?V0
        JNZ     ??ZDApp_ProcessNetworkJoin_13
        MOV     A,#-0x1
        XRL     A,?V1
??ZDApp_ProcessNetworkJoin_13:
        JNZ     ??ZDApp_ProcessNetworkJoin_14
        MOV     DPTR,#_NIB + 20
        MOVX    A,@DPTR
        XRL     A,#0xfe
        JNZ     ??ZDApp_ProcessNetworkJoin_15
        INC     DPTR
        MOVX    A,@DPTR
        CPL     A
??ZDApp_ProcessNetworkJoin_15:
        JZ      ??ZDApp_ProcessNetworkJoin_16
// 1519       {
// 1520         uint16 addr = INVALID_NODE_ADDR;
??ZDApp_ProcessNetworkJoin_14:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#-0x2
        MOVX    @DPTR,A
        INC     DPTR
        INC     A
        MOVX    @DPTR,A
// 1521         // Invalidate nwk addr so end device does not use in its data reqs.
// 1522         _NIB.nwkDevAddress = INVALID_NODE_ADDR;
        MOV     DPTR,#_NIB + 20
        DEC     A
        MOVX    @DPTR,A
        INC     DPTR
        INC     A
        MOVX    @DPTR,A
// 1523         ZMacSetReq( ZMacShortAddress, (uint8 *)&addr );
        ; Setup parameters for call to function ZMacSetReq
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        MOV     R1,#0x53
        LCALL   `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
// 1524       }
// 1525 
// 1526       // Clear the neighbor Table and network discovery tables.
// 1527       nwkNeighborInitTable();
??ZDApp_ProcessNetworkJoin_16:
        ; Setup parameters for call to function nwkNeighborInitTable
        LCALL   `??nwkNeighborInitTable::?relay`; Banked call to: nwkNeighborInitTable
// 1528       NLME_NwkDiscTerm();
        ; Setup parameters for call to function NLME_NwkDiscTerm
        LCALL   `??NLME_NwkDiscTerm::?relay`; Banked call to: NLME_NwkDiscTerm
// 1529 
// 1530       zdoDiscCounter = 1;
        MOV     DPTR,#zdoDiscCounter
        MOV     A,#0x1
        MOVX    @DPTR,A
// 1531 
// 1532 //      ZDApp_NetworkInit( (uint16)
// 1533 //                         ((NWK_START_DELAY * (osal_rand() & 0x0F)) +
// 1534 //                          (NWK_START_DELAY * 5)) );
// 1535       ZDApp_NetworkInit( (uint16)(NWK_START_DELAY
// 1536            + ((uint16)(osal_rand()& EXTENDED_JOINING_RANDOM_MASK))) );
        ; Setup parameters for call to function osal_rand
        LJMP    ??ZDApp_ProcessNetworkJoin_17 & 0xFFFF
// 1537     }
// 1538   }
// 1539   else if ( devState == DEV_NWK_ORPHAN || devState == DEV_NWK_REJOIN )
??ZDApp_ProcessNetworkJoin_1:
        MOVX    A,@DPTR
        XRL     A,#0x4
        JZ      $+5
        LJMP    ??ZDApp_ProcessNetworkJoin_18 & 0xFFFF
// 1540   {
// 1541     // results of an orphaning attempt by this device
// 1542     if (nwkStatus == ZSuccess)
??ZDApp_ProcessNetworkJoin_2:
        MOV     DPTR,#nwkStatus
        MOVX    A,@DPTR
        JNZ     ??ZDApp_ProcessNetworkJoin_19
// 1543     {
// 1544       // Verify NWK key is available before sending Device_annce
// 1545       if ( ZG_SECURE_ENABLED && ( ZDApp_RestoreNwkKey() == false ) )
        ; Setup parameters for call to function ZDApp_RestoreNwkKey
        LCALL   `??ZDApp_RestoreNwkKey::?relay`; Banked call to: ZDApp_RestoreNwkKey
        MOV     A,R1
        JNZ     ??ZDApp_ProcessNetworkJoin_20
// 1546       {
// 1547         osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
        ; Setup parameters for call to function osal_set_event
        MOV     R2,#0x10
        MOV     R3,#0x0
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
// 1548 
// 1549         // wait for auth from trust center
// 1550         devState = DEV_END_DEVICE_UNAUTH;
??ZDApp_ProcessNetworkJoin_4:
        MOV     DPTR,#devState
        MOV     A,#0x5
        MOVX    @DPTR,A
// 1551 
// 1552         // Start the reset timer for MAX UNAUTH time
// 1553         ZDApp_ResetTimerStart( MAX_DEVICE_UNAUTH_TIMEOUT );
        ; Setup parameters for call to function ZDApp_ResetTimerStart
        MOV     R2,#0x10
        MOV     R3,#0x27
        LCALL   `??ZDApp_ResetTimerStart::?relay`; Banked call to: ZDApp_ResetTimerStart
        LJMP    ??ZDApp_ProcessNetworkJoin_6 & 0xFFFF
// 1554       }
// 1555       else
// 1556       {
// 1557 
// 1558         devState = DEV_END_DEVICE;
??ZDApp_ProcessNetworkJoin_20:
        LCALL   ?Subroutine8 & 0xFFFF
// 1559         osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
??CrossCallReturnLabel_71:
        LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
// 1560         // setup Power Manager Device
// 1561 #if defined ( POWER_SAVING )
// 1562         osal_pwrmgr_device( PWRMGR_BATTERY );
// 1563 #endif
// 1564 
// 1565         // The receiver is on, turn network layer polling off.
// 1566         if ( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE )
        MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.3
        JNC     ??ZDApp_ProcessNetworkJoin_21
// 1567         {
// 1568 #if defined ( ZIGBEE_CHILD_AGING )
// 1569           // if Child Table Management process is not enabled
// 1570           if ( zgChildAgingEnable == FALSE )
        MOV     DPTR,#zgChildAgingEnable
        MOVX    A,@DPTR
        JNZ     ??ZDApp_ProcessNetworkJoin_21
// 1571 #endif // ZIGBEE_CHILD_AGING
// 1572           {
// 1573             NLME_SetPollRate( 0 );
        ; Setup parameters for call to function NLME_SetPollRate
        MOV     R2,#0x0
        MOV     R3,#0x0
        LCALL   `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
// 1574             NLME_SetQueuedPollRate( 0 );
        ; Setup parameters for call to function NLME_SetQueuedPollRate
        MOV     R2,#0x0
        MOV     R3,#0x0
        LCALL   `??NLME_SetQueuedPollRate::?relay`; Banked call to: NLME_SetQueuedPollRate
// 1575             NLME_SetResponseRate( 0 );
        ; Setup parameters for call to function NLME_SetResponseRate
        MOV     R2,#0x0
        MOV     R3,#0x0
        LCALL   `??NLME_SetResponseRate::?relay`; Banked call to: NLME_SetResponseRate
// 1576           }
// 1577         }
// 1578 
// 1579         if ( ZSTACK_ROUTER_BUILD )
// 1580         {
// 1581           // NOTE: first two parameters are not used, see NLMEDE.h for details
// 1582           if ( ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
// 1583           {
// 1584             NLME_StartRouterRequest( 0, 0, false );
// 1585           }
// 1586         }
// 1587 
// 1588         ZDApp_AnnounceNewAddress();
??ZDApp_ProcessNetworkJoin_21:
        ; Setup parameters for call to function ZDApp_AnnounceNewAddress
        LCALL   `??ZDApp_AnnounceNewAddress::?relay`; Banked call to: ZDApp_AnnounceNewAddress
        SJMP    ??ZDApp_ProcessNetworkJoin_6
// 1589       }
// 1590     }
// 1591     else
// 1592     {
// 1593       if ( devStartMode == MODE_RESUME )
??ZDApp_ProcessNetworkJoin_19:
        MOV     DPTR,#devStartMode
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??ZDApp_ProcessNetworkJoin_22
// 1594       {
// 1595         if ( ++retryCnt <= MAX_RESUME_RETRY )
        MOV     DPTR,#retryCnt
        MOVX    A,@DPTR
        INC     A
        MOVX    @DPTR,A
        CLR     C
        SUBB    A,#0x4
        JNC     ??ZDApp_ProcessNetworkJoin_23
// 1596         {
// 1597           if ( _NIB.nwkPanId == 0xFFFF || _NIB.nwkPanId == INVALID_PAN_ID )
        MOV     DPTR,#_NIB + 33
        MOVX    A,@DPTR
        CPL     A
        JNZ     ??ZDApp_ProcessNetworkJoin_24
        INC     DPTR
        MOVX    A,@DPTR
        CPL     A
??ZDApp_ProcessNetworkJoin_24:
        JZ      ??ZDApp_ProcessNetworkJoin_25
        MOV     DPTR,#_NIB + 33
        MOVX    A,@DPTR
        XRL     A,#0xfe
        JNZ     ??ZDApp_ProcessNetworkJoin_26
        INC     DPTR
        MOVX    A,@DPTR
        CPL     A
??ZDApp_ProcessNetworkJoin_26:
        JZ      ??ZDApp_ProcessNetworkJoin_25
// 1598             devStartMode = MODE_JOIN;
// 1599           else
// 1600           {
// 1601             devStartMode = MODE_REJOIN;
        MOV     DPTR,#devStartMode
        MOV     A,#0x3
        MOVX    @DPTR,A
// 1602             _tmpRejoinState = true;
        MOV     DPTR,#_tmpRejoinState
        MOV     A,#0x1
        SJMP    ??ZDApp_ProcessNetworkJoin_27
// 1603           }
// 1604         }
// 1605         // Do a normal join to the network after certain times of rejoin retries
// 1606         else if( AIB_apsUseInsecureJoin == true )
??ZDApp_ProcessNetworkJoin_23:
        MOV     DPTR,#AIB_apsUseInsecureJoin
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??ZDApp_ProcessNetworkJoin_22
// 1607         {
// 1608           devStartMode = MODE_JOIN;
??ZDApp_ProcessNetworkJoin_25:
        MOV     DPTR,#devStartMode
        CLR     A
??ZDApp_ProcessNetworkJoin_27:
        MOVX    @DPTR,A
// 1609         }
// 1610       }
// 1611 
// 1612       // Clear the neighbor Table and network discovery tables.
// 1613       nwkNeighborInitTable();
??ZDApp_ProcessNetworkJoin_22:
        ; Setup parameters for call to function nwkNeighborInitTable
        LCALL   `??nwkNeighborInitTable::?relay`; Banked call to: nwkNeighborInitTable
// 1614       NLME_NwkDiscTerm();
        ; Setup parameters for call to function NLME_NwkDiscTerm
        LCALL   `??NLME_NwkDiscTerm::?relay`; Banked call to: NLME_NwkDiscTerm
// 1615 
// 1616       // setup a retry for later...
// 1617       ZDApp_NetworkInit( (uint16)(NWK_START_DELAY
// 1618            + (osal_rand()& EXTENDED_JOINING_RANDOM_MASK)) );
        ; Setup parameters for call to function osal_rand
??ZDApp_ProcessNetworkJoin_17:
        LCALL   `??osal_rand::?relay`; Banked call to: osal_rand
        ; Setup parameters for call to function ZDApp_NetworkInit
        MOV     A,R2
        ANL     A,#0x7f
        ADD     A,#0x64
        MOV     R2,A
        MOV     R3,#0x0
        LCALL   `??ZDApp_NetworkInit::?relay`; Banked call to: ZDApp_NetworkInit
        SJMP    ??ZDApp_ProcessNetworkJoin_6
// 1619     }
// 1620   }
// 1621 #if defined ( ZIGBEE_STOCHASTIC_ADDRESSING )
// 1622   else
// 1623   {
// 1624     // Assume from address conflict
// 1625     if ( _NIB.nwkAddrAlloc == NWK_ADDRESSING_STOCHASTIC )
??ZDApp_ProcessNetworkJoin_18:
        MOV     DPTR,#_NIB + 96
        MOVX    A,@DPTR
        XRL     A,#0x2
        JNZ     ??ZDApp_ProcessNetworkJoin_6
// 1626     {
// 1627       // Notify the network
// 1628       ZDApp_AnnounceNewAddress();
        ; Setup parameters for call to function ZDApp_AnnounceNewAddress
        LCALL   `??ZDApp_AnnounceNewAddress::?relay`; Banked call to: ZDApp_AnnounceNewAddress
// 1629 
// 1630       // Notify apps
// 1631       osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
        ; Setup parameters for call to function osal_set_event
        MOV     R2,#0x10
        MOV     R3,#0x0
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
// 1632     }
// 1633   }
// 1634 #endif
// 1635 }
??ZDApp_ProcessNetworkJoin_6:
        LJMP    ?Subroutine6 & 0xFFFF
          CFI EndBlock cfiBlock58
// 1636 
// 1637 /*********************************************************************
// 1638  * @fn      ZDApp_SaveNwkKey()
// 1639  *
// 1640  * @brief   Save off the Network key information.
// 1641  *
// 1642  * @param   none
// 1643  *
// 1644  * @return  none
// 1645  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1646 void ZDApp_SaveNwkKey( void )
ZDApp_SaveNwkKey:
          CFI Block cfiBlock59 Using cfiCommon0
          CFI Function ZDApp_SaveNwkKey
        CODE
// 1647 {
        FUNCALL ZDApp_SaveNwkKey, SSP_ReadNwkActiveKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_SaveNwkKey, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_SaveNwkKey, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 21
        MOV     A,#-0x15
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 31)
// 1648   nwkActiveKeyItems keyItems;
// 1649 
// 1650   SSP_ReadNwkActiveKey( &keyItems );
        ; Setup parameters for call to function SSP_ReadNwkActiveKey
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??SSP_ReadNwkActiveKey::?relay`; Banked call to: SSP_ReadNwkActiveKey
// 1651 
// 1652   osal_nv_write( ZCD_NV_NWKKEY, 0, sizeof( nwkActiveKeyItems ),
// 1653                 (void *)&keyItems );
        ; Setup parameters for call to function osal_nv_write
        MOV     R0,?XSP + 0
        MOV     R1,?XSP + 1
        MOV     ?V0,R0
        MOV     ?V1,R1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 33)
        MOV     ?V0,#0x15
        MOV     ?V1,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 35)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#-0x7e
        MOV     R3,#0x0
        LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 31)
// 1654 
// 1655   nwkFrameCounterChanges = 0;
        MOV     DPTR,#nwkFrameCounterChanges
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
// 1656 
// 1657   // Clear copy in RAM before return.
// 1658   osal_memset( &keyItems, 0x00, sizeof(keyItems) );
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x15
        MOV     R5,A
        MOV     R1,A
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
// 1659 
// 1660 }
          CFI EndBlock cfiBlock59
        REQUIRE ?Subroutine7
        ; // Fall through to label ?Subroutine7

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
          CFI Block cfiBlock60 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 31)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     A,#0x15
        LJMP    ??Subroutine52_0 & 0xFFFF
          CFI EndBlock cfiBlock60
// 1661 
// 1662 /*********************************************************************
// 1663  * @fn      ZDApp_ForceConcentratorChange()
// 1664  *
// 1665  * @brief   Force a network concentrator change by resetting 
// 1666  *          zgConcentratorEnable and zgConcentratorDiscoveryTime 
// 1667  *          from NV and set nwk event.
// 1668  *
// 1669  * @param   none
// 1670  *
// 1671  * @return  none
// 1672  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1673 void ZDApp_ForceConcentratorChange( void )
ZDApp_ForceConcentratorChange:
          CFI Block cfiBlock61 Using cfiCommon0
          CFI Function ZDApp_ForceConcentratorChange
        CODE
// 1674 {
        FUNCALL ZDApp_ForceConcentratorChange, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ForceConcentratorChange, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ForceConcentratorChange, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ForceConcentratorChange, osal_stop_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
// 1675   osal_nv_read( ZCD_NV_CONCENTRATOR_ENABLE, 0, sizeof(zgConcentratorEnable), &zgConcentratorEnable );
        ; Setup parameters for call to function osal_nv_read
        MOV     ?V0,#zgConcentratorEnable & 0xff
        MOV     ?V1,#(zgConcentratorEnable >> 8) & 0xff
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 12)
        MOV     ?V0,#0x1
        MOV     ?V1,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x32
        MOV     R3,#0x0
        LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
// 1676   osal_nv_read( ZCD_NV_CONCENTRATOR_DISCOVERY, 0, sizeof(zgConcentratorDiscoveryTime), &zgConcentratorDiscoveryTime );
        ; Setup parameters for call to function osal_nv_read
        MOV     ?V0,#zgConcentratorDiscoveryTime & 0xff
        MOV     ?V1,#(zgConcentratorDiscoveryTime >> 8) & 0xff
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 12)
        MOV     ?V0,#0x1
        MOV     ?V1,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x33
        MOV     R3,#0x0
        LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
// 1677  
// 1678   if ( zgConcentratorEnable == TRUE )
        MOV     DPTR,#zgConcentratorEnable
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??ZDApp_ForceConcentratorChange_0
// 1679   {
// 1680     // Start next event
// 1681     osal_start_timerEx( NWK_TaskID, NWK_MTO_RTG_REQ_EVT, 100 );
        ; Setup parameters for call to function osal_start_timerEx
        MOV     DPTR,#__Constant_64
        LCALL   ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     R2,#0x0
        MOV     R3,#0x8
        MOV     DPTR,#NWK_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
        SJMP    ??ZDApp_ForceConcentratorChange_1
// 1682   }
// 1683   else
// 1684   {
// 1685     // Stop the next event
// 1686     osal_stop_timerEx( NWK_TaskID, NWK_MTO_RTG_REQ_EVT );
??ZDApp_ForceConcentratorChange_0:
        ; Setup parameters for call to function osal_stop_timerEx
        MOV     R2,#0x0
        MOV     R3,#0x8
        MOV     DPTR,#NWK_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
// 1687   }
// 1688 }
??ZDApp_ForceConcentratorChange_1:
        SJMP    ??Subroutine53_0
          CFI EndBlock cfiBlock61
// 1689 
// 1690 /*********************************************************************
// 1691  * @fn      ZDApp_ResetNwkKey()
// 1692  *
// 1693  * @brief   Reset the Network key information in NV.
// 1694  *
// 1695  * @param   none
// 1696  *
// 1697  * @return  none
// 1698  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1699 void ZDApp_ResetNwkKey( void )
ZDApp_ResetNwkKey:
          CFI Block cfiBlock62 Using cfiCommon0
          CFI Function ZDApp_ResetNwkKey
        CODE
// 1700 {
        FUNCALL ZDApp_ResetNwkKey, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ResetNwkKey, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 21
        MOV     A,#-0x15
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 31)
// 1701   nwkActiveKeyItems keyItems;
// 1702 
// 1703   osal_memset( &keyItems, 0, sizeof( nwkActiveKeyItems ) );
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x15
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
// 1704   osal_nv_write( ZCD_NV_NWKKEY, 0, sizeof( nwkActiveKeyItems ),
// 1705                 (void *)&keyItems );
        ; Setup parameters for call to function osal_nv_write
        MOV     R0,?XSP + 0
        MOV     R1,?XSP + 1
        MOV     ?V0,R0
        MOV     ?V1,R1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 33)
        MOV     ?V0,#0x15
        MOV     ?V1,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 35)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#-0x7e
        MOV     R3,#0x0
        LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 31)
// 1706 }
        LJMP    ?Subroutine7 & 0xFFFF
          CFI EndBlock cfiBlock62

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
          CFI Block cfiBlock63 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     ?V0,#ZDApp_LeaveCtrl & 0xff
        MOV     ?V1,#(ZDApp_LeaveCtrl >> 8) & 0xff
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 12)
        MOV     ?V0,#0x1
        MOV     ?V1,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#-0x7b
        MOV     R3,#0x0
        LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV     A,#0x4
          CFI EndBlock cfiBlock63
        REQUIRE ??Subroutine52_0
        ; // Fall through to label ??Subroutine52_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine52_0:
          CFI Block cfiBlock64 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
          CFI EndBlock cfiBlock64
        REQUIRE ??Subroutine53_0
        ; // Fall through to label ??Subroutine53_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine53_0:
          CFI Block cfiBlock65 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock65
// 1707 
// 1708 /*********************************************************************
// 1709  * @fn      ZDApp_RestoreNwkKey()
// 1710  *
// 1711  * @brief
// 1712  *
// 1713  *   Save off the Network key information.
// 1714  *
// 1715  * @param   none
// 1716  *
// 1717  * @return  true if restored from NV, false if not
// 1718  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1719 uint8 ZDApp_RestoreNwkKey( void )
ZDApp_RestoreNwkKey:
          CFI Block cfiBlock66 Using cfiCommon0
          CFI Function ZDApp_RestoreNwkKey
        CODE
// 1720 {
        FUNCALL ZDApp_RestoreNwkKey, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 53, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 53, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_RestoreNwkKey, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 49, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 49, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_RestoreNwkKey, osal_memcmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 52, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 52, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_RestoreNwkKey, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 53, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 53, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_RestoreNwkKey, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 49, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 49, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 37
        MOV     A,#-0x25
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 49)
// 1721   nwkActiveKeyItems keyItems;
// 1722   uint8 ret = FALSE;
        MOV     R6,#0x0
// 1723 
// 1724   // Restore the key information
// 1725   if ( osal_nv_read( ZCD_NV_NWKKEY, 0, sizeof(nwkActiveKeyItems), (void*)&keyItems )
// 1726       == ZSUCCESS )
        ; Setup parameters for call to function osal_nv_read
        MOV     R0,?XSP + 0
        MOV     R1,?XSP + 1
        MOV     ?V0,R0
        MOV     ?V1,R1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 51)
        MOV     ?V0,#0x15
        MOV     ?V1,R6
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 53)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#-0x7e
        MOV     R3,#0x0
        LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 49)
        MOV     A,R1
        JZ      $+5
        LJMP    ??ZDApp_RestoreNwkKey_0 & 0xFFFF
// 1727   {
// 1728     uint8 nullKey[SEC_KEY_LEN];
// 1729 
// 1730     // initialize default value to compare to
// 1731     osal_memset( nullKey, 0x00, SEC_KEY_LEN );
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x10
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     A,#0x15
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
// 1732 
// 1733     // if stored key is different than default value, then a key has been established
// 1734     if ( !osal_memcmp( keyItems.active.key, nullKey, SEC_KEY_LEN ) )
        ; Setup parameters for call to function osal_memcmp
        MOV     A,#0x15
        LCALL   ?XSTACK_DISP100_8
        MOV     ?V0,R0
        MOV     ?V1,R1
        MOV     ?V2,R6
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 52)
        MOV     R4,#0x10
        MOV     R5,#0x0
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     R1,DPL
        MOV     R2,DPH
        MOV     R3,#0x0
        LCALL   `??osal_memcmp::?relay`; Banked call to: osal_memcmp
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 49)
        MOV     A,R1
        JNZ     ??ZDApp_RestoreNwkKey_0
// 1735     {
// 1736       // Increment the frame counter stored in NV
// 1737       keyItems.frameCounter += ( MAX_NWK_FRAMECOUNTER_CHANGES +
// 1738                                  NWK_FRAMECOUNTER_CHANGES_RESTORE_DELTA );
        MOV     DPTR,#__Constant_4e2
        MOV     R0,#?V0
        LCALL   ?L_MOV_X
        MOV     A,#0x11
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0
        LCALL   ?L_ADD_TO_X
// 1739 
// 1740       nwkFrameCounter = keyItems.frameCounter;
        MOV     A,#0x11
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?XLOAD_R0123
        MOV     DPTR,#nwkFrameCounter
        LCALL   ?XSTORE_R0123
// 1741 
// 1742       // Save the updated Frame Counter right away
// 1743       osal_nv_write( ZCD_NV_NWKKEY, 0, sizeof( nwkActiveKeyItems ),
// 1744                      (void *)&keyItems );
        ; Setup parameters for call to function osal_nv_write
        MOV     R0,?XSP + 0
        MOV     R1,?XSP + 1
        MOV     ?V0,R0
        MOV     ?V1,R1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 51)
        MOV     ?V0,#0x15
        MOV     ?V1,R6
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 53)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#-0x7e
        MOV     R3,#0x0
        LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 49)
// 1745 
// 1746       nwkFrameCounterChanges = 0;
        MOV     DPTR,#nwkFrameCounterChanges
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
// 1747 
// 1748       ret = TRUE;
        MOV     R6,#0x1
// 1749 
// 1750       // Clear copy in RAM before return.
// 1751       osal_memset( &keyItems, 0x00, sizeof(keyItems) );
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x15
        MOV     R5,A
        MOV     R1,A
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
// 1752     }
// 1753   }
// 1754 
// 1755   return ( ret );
??ZDApp_RestoreNwkKey_0:
        MOV     A,R6
        MOV     R1,A
        MOV     A,#0x25
        LJMP    ?Subroutine4 & 0xFFFF
// 1756 }
          CFI EndBlock cfiBlock66
// 1757 
// 1758 /*********************************************************************
// 1759  * @fn      ZDApp_ResetTimerStart
// 1760  *
// 1761  * @brief   Start the reset timer.
// 1762  *
// 1763  * @param   delay - delay time(ms) before reset
// 1764  *
// 1765  * @return  none
// 1766  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1767 void ZDApp_ResetTimerStart( uint16 delay )
ZDApp_ResetTimerStart:
          CFI Block cfiBlock67 Using cfiCommon0
          CFI Function ZDApp_ResetTimerStart
        CODE
// 1768 {
        FUNCALL ZDApp_ResetTimerStart, osal_get_timeoutEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ResetTimerStart, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     ?V0,R2
        MOV     ?V1,R3
// 1769   if ( !osal_get_timeoutEx( ZDAppTaskID, ZDO_DEVICE_RESET ) )
        ; Setup parameters for call to function osal_get_timeoutEx
        MOV     R2,#0x4
        MOV     R3,#0x0
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_get_timeoutEx::?relay`; Banked call to: osal_get_timeoutEx
        MOV     A,R2
        ORL     A,R3
        ORL     A,R4
        ORL     A,R5
        JNZ     ??ZDApp_ResetTimerStart_0
// 1770   {
// 1771     // Start the rest timer
// 1772     osal_start_timerEx( ZDAppTaskID, ZDO_DEVICE_RESET, delay );
        ; Setup parameters for call to function osal_start_timerEx
        CLR     A
        MOV     ?V2,A
        MOV     ?V3,A
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_FOUR
          CFI CFA_XSP16 add(XSP16, 16)
        MOV     R2,#0x4
        MOV     R3,#0x0
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
// 1773   }
// 1774 }
??ZDApp_ResetTimerStart_0:
        LJMP    ??Subroutine65_0 & 0xFFFF
          CFI EndBlock cfiBlock67
// 1775 
// 1776 /*********************************************************************
// 1777  * @fn      ZDApp_ResetTimerCancel
// 1778  *
// 1779  * @brief   Cancel the reset timer.
// 1780  *
// 1781  * @param   none
// 1782  *
// 1783  * @return  none
// 1784  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1785 void ZDApp_ResetTimerCancel( void )
ZDApp_ResetTimerCancel:
          CFI Block cfiBlock68 Using cfiCommon0
          CFI Function ZDApp_ResetTimerCancel
        CODE
// 1786 {
        FUNCALL ZDApp_ResetTimerCancel, osal_stop_timerEx
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ResetTimerCancel, osal_clear_event
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1787   (void)osal_stop_timerEx(ZDAppTaskID, ZDO_DEVICE_RESET);
        ; Setup parameters for call to function osal_stop_timerEx
        MOV     R2,#0x4
        MOV     R3,#0x0
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
// 1788   (void)osal_clear_event(ZDAppTaskID, ZDO_DEVICE_RESET);
        ; Setup parameters for call to function osal_clear_event
        MOV     R2,#0x4
        MOV     R3,#0x0
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_clear_event::?relay`; Banked call to: osal_clear_event
// 1789 }
        LJMP    ??Subroutine54_0 & 0xFFFF
          CFI EndBlock cfiBlock68
// 1790 
// 1791 /*********************************************************************
// 1792  * @fn      ZDApp_LeaveCtrlInit
// 1793  *
// 1794  * @brief   Initialize the leave control logic.
// 1795  *
// 1796  * @param   none
// 1797  *
// 1798  * @return  none
// 1799  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1800 void ZDApp_LeaveCtrlInit( void )
ZDApp_LeaveCtrlInit:
          CFI Block cfiBlock69 Using cfiCommon0
          CFI Function ZDApp_LeaveCtrlInit
        CODE
// 1801 {
        FUNCALL ZDApp_LeaveCtrlInit, osal_nv_item_init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_LeaveCtrlInit, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
// 1802   uint8 status;
// 1803 
// 1804 
// 1805   // Initialize control state
// 1806   ZDApp_LeaveCtrl = ZDAPP_LEAVE_CTRL_INIT;
        MOV     DPTR,#ZDApp_LeaveCtrl
        CLR     A
        MOVX    @DPTR,A
// 1807 
// 1808   status = osal_nv_item_init( ZCD_NV_LEAVE_CTRL,
// 1809                               sizeof(ZDApp_LeaveCtrl),
// 1810                               &ZDApp_LeaveCtrl );
// 1811 
// 1812   if ( status == ZSUCCESS )
        ; Setup parameters for call to function osal_nv_item_init
        MOV     ?V0,#ZDApp_LeaveCtrl & 0xff
        MOV     ?V1,#(ZDApp_LeaveCtrl >> 8) & 0xff
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 12)
        MOV     R4,#0x1
        MOV     R5,#0x0
        MOV     R2,#-0x7b
        MOV     R3,#0x0
        LCALL   `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
        MOV     A,R1
        JNZ     ??ZDApp_LeaveCtrlInit_0
// 1813   {
// 1814     // Read saved control
// 1815     osal_nv_read( ZCD_NV_LEAVE_CTRL,
// 1816                   0,
// 1817                   sizeof( uint8 ),
// 1818                   &ZDApp_LeaveCtrl);
        ; Setup parameters for call to function osal_nv_read
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 12)
        MOV     ?V0,#0x1
        MOV     ?V1,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#-0x7b
        MOV     R3,#0x0
        LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
// 1819   }
// 1820 }
??ZDApp_LeaveCtrlInit_0:
        LJMP    ??Subroutine53_0 & 0xFFFF
          CFI EndBlock cfiBlock69
// 1821 
// 1822 /*********************************************************************
// 1823  * @fn      ZDApp_LeaveCtrlSet
// 1824  *
// 1825  * @brief   Set the leave control logic.
// 1826  *
// 1827  * @param   ra - reassociate flag
// 1828  *
// 1829  * @return  none
// 1830  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1831 void ZDApp_LeaveCtrlSet( uint8 ra )
ZDApp_LeaveCtrlSet:
          CFI Block cfiBlock70 Using cfiCommon0
          CFI Function ZDApp_LeaveCtrlSet
        CODE
// 1832 {
        FUNCALL ZDApp_LeaveCtrlSet, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
// 1833   ZDApp_LeaveCtrl = ZDAPP_LEAVE_CTRL_SET;
        MOV     DPTR,#ZDApp_LeaveCtrl
        MOV     A,#0x1
        MOVX    @DPTR,A
// 1834 
// 1835   if ( ra == TRUE )
        XRL     A,R6
        JNZ     ??ZDApp_LeaveCtrlSet_0
// 1836   {
// 1837     ZDApp_LeaveCtrl |= ZDAPP_LEAVE_CTRL_RA;
        MOV     A,#0x3
        MOVX    @DPTR,A
// 1838   }
// 1839 
// 1840   // Write the leave control
// 1841   osal_nv_write( ZCD_NV_LEAVE_CTRL,
// 1842                  0,
// 1843                  sizeof( uint8 ),
// 1844                  &ZDApp_LeaveCtrl);
??ZDApp_LeaveCtrlSet_0:
        ; Setup parameters for call to function osal_nv_write
        LJMP    ?Subroutine2 & 0xFFFF
// 1845 }
          CFI EndBlock cfiBlock70
// 1846 
// 1847 /*********************************************************************
// 1848  * @fn      ZDApp_LeaveCtrlReset
// 1849  *
// 1850  * @brief   Re-initialize the leave control logic.
// 1851  *
// 1852  * @param   none
// 1853  *
// 1854  * @return  none
// 1855  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1856 void ZDApp_LeaveCtrlReset( void )
ZDApp_LeaveCtrlReset:
          CFI Block cfiBlock71 Using cfiCommon0
          CFI Function ZDApp_LeaveCtrlReset
        CODE
// 1857 {
        FUNCALL ZDApp_LeaveCtrlReset, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
// 1858   // Set leave control to initialized state
// 1859   ZDApp_LeaveCtrl = ZDAPP_LEAVE_CTRL_INIT;
        MOV     DPTR,#ZDApp_LeaveCtrl
        CLR     A
        MOVX    @DPTR,A
// 1860 
// 1861   // Write initialized control
// 1862   osal_nv_write( ZCD_NV_LEAVE_CTRL,
// 1863                 0,
// 1864                 sizeof( uint8 ),
// 1865                 &ZDApp_LeaveCtrl);
        ; Setup parameters for call to function osal_nv_write
        LJMP    ?Subroutine2 & 0xFFFF
// 1866 }
          CFI EndBlock cfiBlock71
// 1867 
// 1868 /*********************************************************************
// 1869  * @fn      ZDApp_LeaveCtrlBypass
// 1870  *
// 1871  * @brief   Check if NV restore should be skipped during a leave reset.
// 1872  *
// 1873  * @param   none
// 1874  *
// 1875  * @return  uint8 - (TRUE bypass:FALSE do not bypass)
// 1876  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1877 uint8 ZDApp_LeaveCtrlBypass( void )
ZDApp_LeaveCtrlBypass:
          CFI Block cfiBlock72 Using cfiCommon0
          CFI Function ZDApp_LeaveCtrlBypass
        CODE
// 1878 {
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1879   uint8 bypass;
// 1880 
// 1881   if ( ZDApp_LeaveCtrl & ZDAPP_LEAVE_CTRL_SET )
// 1882   {
// 1883     bypass = TRUE;
// 1884   }
// 1885   else
// 1886   {
// 1887     bypass = FALSE;
// 1888   }
// 1889 
// 1890   return bypass;
        MOV     DPTR,#ZDApp_LeaveCtrl
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.0
        CLR     A
        RLC     A
        MOV     R1,A
        SJMP    ??Subroutine54_0
// 1891 }
          CFI EndBlock cfiBlock72
// 1892 
// 1893 /*********************************************************************
// 1894  * @fn      ZDApp_LeaveCtrlStartup
// 1895  *
// 1896  * @brief   Check for startup conditions during a leave reset.
// 1897  *
// 1898  * @param   state      - devState_t determined by leave control logic
// 1899  * @param   startDelay - startup delay
// 1900  *
// 1901  * @return  none
// 1902  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1903 void ZDApp_LeaveCtrlStartup( devStates_t* state, uint16* startDelay )
ZDApp_LeaveCtrlStartup:
          CFI Block cfiBlock73 Using cfiCommon0
          CFI Function ZDApp_LeaveCtrlStartup
        CODE
// 1904 {
        FUNCALL ZDApp_LeaveCtrlStartup, ZDApp_LeaveCtrlReset
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1905   *startDelay = 0;
        MOV     DPL,R4
        MOV     DPH,R5
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
// 1906 
// 1907   if ( ZDApp_LeaveCtrl & ZDAPP_LEAVE_CTRL_SET )
        MOV     DPTR,#ZDApp_LeaveCtrl
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.0
        JNC     ??ZDApp_LeaveCtrlStartup_0
// 1908   {
// 1909     if ( ZDApp_LeaveCtrl & ZDAPP_LEAVE_CTRL_RA )
        MOV     C,0xE0 /* A   */.1
        JNC     ??ZDApp_LeaveCtrlStartup_1
// 1910     {
// 1911       *startDelay = LEAVE_RESET_DELAY;
        MOV     DPL,R4
        MOV     DPH,R5
        MOV     A,#-0x78
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x13
        SJMP    ??ZDApp_LeaveCtrlStartup_2
// 1912     }
// 1913     else
// 1914     {
// 1915       *state = DEV_HOLD;
??ZDApp_LeaveCtrlStartup_1:
        MOV     DPL,R2
        MOV     DPH,R3
        CLR     A
??ZDApp_LeaveCtrlStartup_2:
        MOVX    @DPTR,A
// 1916     }
// 1917 
// 1918     // Reset leave control logic
// 1919     ZDApp_LeaveCtrlReset();
        ; Setup parameters for call to function ZDApp_LeaveCtrlReset
        LCALL   `??ZDApp_LeaveCtrlReset::?relay`; Banked call to: ZDApp_LeaveCtrlReset
// 1920   }
// 1921 }
??ZDApp_LeaveCtrlStartup_0:
        SJMP    ??Subroutine54_0
          CFI EndBlock cfiBlock73

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
          CFI Block cfiBlock74 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI CFA_XSP16 add(XSP16, 3)
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
          CFI EndBlock cfiBlock74
        REQUIRE ??Subroutine54_0
        ; // Fall through to label ??Subroutine54_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine54_0:
          CFI Block cfiBlock75 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        POP     DPH
          CFI CFA_SP SP+-4
          CFI DPH0 SameValue
        POP     DPL
          CFI CFA_SP SP+-3
          CFI DPL0 SameValue
        LJMP    ?BRET
          CFI EndBlock cfiBlock75
// 1922 
// 1923 /*********************************************************************
// 1924  * @fn      ZDApp_LeaveReset
// 1925  *
// 1926  * @brief   Setup a device reset due to a leave indication/confirm.
// 1927  *
// 1928  * @param   ra - reassociate flag
// 1929  *
// 1930  * @return  none
// 1931  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1932 void ZDApp_LeaveReset( uint8 ra )
ZDApp_LeaveReset:
          CFI Block cfiBlock76 Using cfiCommon0
          CFI Function ZDApp_LeaveReset
        CODE
// 1933 {
        FUNCALL ZDApp_LeaveReset, ZDApp_LeaveCtrlSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_LeaveReset, ZDApp_ResetTimerStart
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
// 1934   ZDApp_LeaveCtrlSet( ra );
        ; Setup parameters for call to function ZDApp_LeaveCtrlSet
        LCALL   `??ZDApp_LeaveCtrlSet::?relay`; Banked call to: ZDApp_LeaveCtrlSet
// 1935 
// 1936   ZDApp_ResetTimerStart( LEAVE_RESET_DELAY );
        ; Setup parameters for call to function ZDApp_ResetTimerStart
        MOV     R2,#-0x78
        MOV     R3,#0x13
        LCALL   `??ZDApp_ResetTimerStart::?relay`; Banked call to: ZDApp_ResetTimerStart
// 1937 }
        LJMP    ??Subroutine55_0 & 0xFFFF
          CFI EndBlock cfiBlock76
// 1938 
// 1939 /*********************************************************************
// 1940  * @fn      ZDApp_LeaveUpdate
// 1941  *
// 1942  * @brief   Update local device data related to leaving device.
// 1943  *
// 1944  * @param   nwkAddr        - NWK address of leaving device
// 1945  * @param   extAddr        - EXT address of leaving device
// 1946  * @param   removeChildren - remove children of leaving device
// 1947  *
// 1948  * @return  none
// 1949  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1950 void ZDApp_LeaveUpdate( uint16 nwkAddr, uint8* extAddr,
ZDApp_LeaveUpdate:
          CFI Block cfiBlock77 Using cfiCommon0
          CFI Function ZDApp_LeaveUpdate
        CODE
// 1951                         uint8 removeChildren )
// 1952 {
        FUNCALL ZDApp_LeaveUpdate, ZDSecMgrDeviceRemoveByExtAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_LeaveUpdate, ZDSecMgrAddrClear
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_LeaveUpdate, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_LeaveUpdate, RTG_RemoveRtgEntry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_LeaveUpdate, nwkNeighborRemove
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        MOV     A,#-0xb
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 9
        MOV     A,#-0x9
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 20)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     ?V0,R4
        MOV     ?V1,R5
// 1953   // Remove Apps Key for leaving device
// 1954   ZDSecMgrDeviceRemoveByExtAddr(extAddr);
        ; Setup parameters for call to function ZDSecMgrDeviceRemoveByExtAddr
        MOV     R2,?V0
        MOV     R3,?V1
        LCALL   `??ZDSecMgrDeviceRemoveByExtAddr::?relay`; Banked call to: ZDSecMgrDeviceRemoveByExtAddr
// 1955 
// 1956   // Clear SECURITY bit from Address Manager
// 1957   ZDSecMgrAddrClear( extAddr );
        ; Setup parameters for call to function ZDSecMgrAddrClear
        MOV     R2,?V0
        MOV     R3,?V1
        LCALL   `??ZDSecMgrAddrClear::?relay`; Banked call to: ZDSecMgrAddrClear
// 1958 
// 1959   if ( pbindRemoveDev )
        MOV     DPTR,#pbindRemoveDev
        LCALL   ??Subroutine64_0 & 0xFFFF
??CrossCallReturnLabel_118:
        JZ      ??ZDApp_LeaveUpdate_0
// 1960   {
// 1961     zAddrType_t devAddr;
// 1962 
// 1963     // Remove bind entry and all related data
// 1964     devAddr.addrMode = Addr64Bit;
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x3
        MOVX    @DPTR,A
// 1965     osal_memcpy(devAddr.addr.extAddr, extAddr, Z_EXTADDR_LEN);
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V2,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 23)
        MOV     R4,#0x8
        MOV     R5,#0x0
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 20)
// 1966 
// 1967     pbindRemoveDev(&devAddr);
        ; Setup parameters for indirect call
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        MOV     DPTR,#pbindRemoveDev
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        LCALL   ??Subroutine63_0 & 0xFFFF
// 1968   }
??CrossCallReturnLabel_108:
        LCALL   ?CALL_IND
// 1969 
// 1970   // Remove if child
// 1971   if ( ZSTACK_ROUTER_BUILD )
// 1972   {
// 1973     // Router shall notify the Trust Center that a child device has left the network
// 1974     if ( AssocIsChild( nwkAddr ) == TRUE )
// 1975     {
// 1976         APSME_UpdateDeviceReq_t req;
// 1977 
// 1978         // forward authorization to the Trust Center
// 1979         req.dstAddr    = APSME_TRUSTCENTER_NWKADDR;
// 1980         req.devAddr    = nwkAddr;
// 1981         req.devExtAddr = extAddr;
// 1982         req.status = APSME_UD_DEVICE_LEFT;
// 1983 
// 1984         if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD )
// 1985         {
// 1986           // For ZG_GLOBAL_LINK_KEY the message has to be sent twice one
// 1987           // un-encrypted and one APS encrypted, to make sure that it can interoperate
// 1988           // with legacy Coordinator devices which can only handle one or the other.
// 1989           if ( zgApsLinkKeyType == ZG_GLOBAL_LINK_KEY )
// 1990           {
// 1991             req.apsSecure = FALSE;
// 1992 
// 1993             // send and APSME_UPDATE_DEVICE request to the trust center
// 1994             APSME_UpdateDeviceReq( &req );
// 1995           }
// 1996 
// 1997           // send the message APS encrypted
// 1998           req.apsSecure = TRUE;
// 1999 
// 2000           // send and APSME_UPDATE_DEVICE request to the trust center
// 2001           APSME_UpdateDeviceReq( &req );
// 2002         }
// 2003         else
// 2004         {
// 2005           req.apsSecure = FALSE;
// 2006 
// 2007           // send and APSME_UPDATE_DEVICE request to the trust center
// 2008           APSME_UpdateDeviceReq( &req );
// 2009         }
// 2010     }
// 2011 
// 2012     NLME_RemoveChild( extAddr, removeChildren );
// 2013   }
// 2014 
// 2015   // Remove Routing table related entry
// 2016   RTG_RemoveRtgEntry( nwkAddr, 0 );
??ZDApp_LeaveUpdate_0:
        ; Setup parameters for call to function RTG_RemoveRtgEntry
        MOV     R1,#0x0
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??RTG_RemoveRtgEntry::?relay`; Banked call to: RTG_RemoveRtgEntry
// 2017 
// 2018   // Remove entry from neighborTable
// 2019   nwkNeighborRemove( nwkAddr, _NIB.nwkPanId );
        ; Setup parameters for call to function nwkNeighborRemove
        MOV     DPTR,#_NIB + 33
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??nwkNeighborRemove::?relay`; Banked call to: nwkNeighborRemove
// 2020 
// 2021   // Schedule to save data to NV
// 2022   ZDApp_NwkWriteNVRequest();
// 2023 }
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 11)
        MOV     R7,#0x3
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock77
// 2024 
// 2025 /*********************************************************************
// 2026  * @fn      ZDApp_NetworkDiscoveryReq
// 2027  *
// 2028  * @brief   Request a network discovery.
// 2029  *
// 2030  * @param  scanChannels -
// 2031  * @param  scanDuration -
// 2032  *
// 2033  * @return  ZStatus_t
// 2034  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2035 ZStatus_t ZDApp_NetworkDiscoveryReq( uint32 scanChannels, uint8 scanDuration)
ZDApp_NetworkDiscoveryReq:
          CFI Block cfiBlock78 Using cfiCommon0
          CFI Function ZDApp_NetworkDiscoveryReq
        CODE
// 2036 {
        FUNCALL ZDApp_NetworkDiscoveryReq, NLME_NetworkDiscoveryRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
// 2037   // Setup optional filters - tbd
// 2038 
// 2039   // Request NLME network discovery
// 2040   return NLME_NetworkDiscoveryRequest(scanChannels, scanDuration);
        ; Setup parameters for call to function NLME_NetworkDiscoveryRequest
        LCALL   `??NLME_NetworkDiscoveryRequest::?relay`; Banked call to: NLME_NetworkDiscoveryRequest
        LJMP    ??Subroutine65_0 & 0xFFFF
// 2041 }
          CFI EndBlock cfiBlock78
// 2042 
// 2043 /*********************************************************************
// 2044  * @fn      ZDApp_JoinReq
// 2045  *
// 2046  * @brief   Request the device to join a parent in a network.
// 2047  *
// 2048  * @param   channel -
// 2049  * @param   panID -
// 2050  *
// 2051  * @return  ZStatus_t
// 2052  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2053 ZStatus_t ZDApp_JoinReq( uint8 channel, uint16 panID, uint8 *extendedPanID,
ZDApp_JoinReq:
          CFI Block cfiBlock79 Using cfiCommon0
          CFI Function ZDApp_JoinReq
        CODE
// 2054                          uint16 chosenParent, uint8 parentDepth, uint8 stackProfile )
// 2055 {
        FUNCALL ZDApp_JoinReq, ZDApp_NodeProfileSync
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_JoinReq, NLME_JoinRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     ?V2,R1
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     ?V0,R4
        MOV     ?V1,R5
// 2056   // Sync up the node with the stack profile (In the case where a pro device
// 2057   // joins a non-pro network, or verse versa)
// 2058   ZDApp_NodeProfileSync( stackProfile);
        ; Setup parameters for call to function ZDApp_NodeProfileSync
        MOV     A,#0xf
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??ZDApp_NodeProfileSync::?relay`; Banked call to: ZDApp_NodeProfileSync
// 2059 
// 2060   // Request NLME Join Request
// 2061   return NLME_JoinRequest(extendedPanID, panID,channel,
// 2062                           ZDO_Config_Node_Descriptor.CapabilityFlags,
// 2063                           chosenParent, parentDepth);
        ; Setup parameters for call to function NLME_JoinRequest
        MOV     A,#0xe
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V3,A
        MOV     R0,#?V3
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 13)
        MOV     A,#0xd
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 15)
        MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
        MOVX    A,@DPTR
        MOV     ?V3,A
        MOV     R0,#?V3
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 16)
        MOV     R1,?V2
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     R2,?V0
        MOV     R3,?V1
        LCALL   `??NLME_JoinRequest::?relay`; Banked call to: NLME_JoinRequest
        MOV     A,#0x4
        LJMP    ?Subroutine4 & 0xFFFF
// 2064 
// 2065 }
          CFI EndBlock cfiBlock79
// 2066 
// 2067 /*********************************************************************
// 2068  * @fn      ZDApp_DeviceConfigured
// 2069  *
// 2070  * @brief   Check to see if the local device is configured (i.e., part
// 2071  *          of a network).
// 2072  *
// 2073  * @param   none
// 2074  *
// 2075  * @return  TRUE if configured. FALSE, otherwise.
// 2076  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2077 uint8 ZDApp_DeviceConfigured( void )
ZDApp_DeviceConfigured:
          CFI Block cfiBlock80 Using cfiCommon0
          CFI Function ZDApp_DeviceConfigured
        CODE
// 2078 {
        FUNCALL ZDApp_DeviceConfigured, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
// 2079   uint16 nwkAddr = INVALID_NODE_ADDR;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#-0x2
        MOVX    @DPTR,A
        INC     DPTR
        INC     A
        MOVX    @DPTR,A
// 2080 
// 2081   osal_nv_read( ZCD_NV_NIB, osal_offsetof( nwkIB_t, nwkDevAddress ),
// 2082                 sizeof( uint16), &nwkAddr );
        ; Setup parameters for call to function osal_nv_read
        MOV     R0,?XSP + 0
        MOV     R1,?XSP + 1
        MOV     ?V0,R0
        MOV     ?V1,R1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     ?V0,#0x2
        MOV     ?V1,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 16)
        MOV     R4,#0x14
        MOV     R5,#0x0
        MOV     R2,#0x21
        MOV     R3,#0x0
        LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
// 2083 
// 2084   // Does the NIB have anything more than default?
// 2085   return ( nwkAddr == INVALID_NODE_ADDR ? FALSE : TRUE );
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        XRL     A,#0xfe
        JNZ     ??ZDApp_DeviceConfigured_0
        INC     DPTR
        MOVX    A,@DPTR
        CPL     A
??ZDApp_DeviceConfigured_0:
        JNZ     ??ZDApp_DeviceConfigured_1
        MOV     R1,#0x0
        SJMP    ??ZDApp_DeviceConfigured_2
??ZDApp_DeviceConfigured_1:
        MOV     R1,#0x1
??ZDApp_DeviceConfigured_2:
          CFI EndBlock cfiBlock80
        REQUIRE ?Subroutine6
        ; // Fall through to label ?Subroutine6
// 2086 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
          CFI Block cfiBlock81 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     A,#0x2
        LJMP    ??Subroutine52_0 & 0xFFFF
          CFI EndBlock cfiBlock81
// 2087 
// 2088 /*********************************************************************
// 2089  * CALLBACK FUNCTIONS
// 2090  */
// 2091 
// 2092 
// 2093 /*********************************************************************
// 2094  * @fn      ZDApp_SendEventMsg()
// 2095  *
// 2096  * @brief
// 2097  *
// 2098  *   Sends a Network Join message
// 2099  *
// 2100  * @param  cmd - command ID
// 2101  * @param  len - length (in bytes) of the buf field
// 2102  * @param  buf - buffer for the rest of the message.
// 2103  *
// 2104  * @return  none
// 2105  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2106 void ZDApp_SendEventMsg( uint8 cmd, uint8 len, uint8 *buf )
ZDApp_SendEventMsg:
          CFI Block cfiBlock82 Using cfiCommon0
          CFI Function ZDApp_SendEventMsg
        CODE
// 2107 {
        FUNCALL ZDApp_SendEventMsg, ZDApp_SendMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
        MOV     A,R2
// 2108   ZDApp_SendMsg( ZDAppTaskID, cmd, len, buf );
        ; Setup parameters for call to function ZDApp_SendMsg
        MOV     R3,A
        MOV     A,R6
        MOV     R2,A
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??ZDApp_SendMsg::?relay`; Banked call to: ZDApp_SendMsg
// 2109 }
        SJMP    ??Subroutine55_0
          CFI EndBlock cfiBlock82

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
          CFI Block cfiBlock83 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R3,#0x0
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
          CFI EndBlock cfiBlock83
        REQUIRE ??Subroutine55_0
        ; // Fall through to label ??Subroutine55_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine55_0:
          CFI Block cfiBlock84 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock84
// 2110 
// 2111 /*********************************************************************
// 2112  * @fn      ZDApp_SendMsg()
// 2113  *
// 2114  * @brief   Sends a OSAL message
// 2115  *
// 2116  * @param  taskID - Where to send the message
// 2117  * @param  cmd - command ID
// 2118  * @param  len - length (in bytes) of the buf field
// 2119  * @param  buf - buffer for the rest of the message.
// 2120  *
// 2121  * @return  none
// 2122  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2123 void ZDApp_SendMsg( uint8 taskID, uint8 cmd, uint8 len, uint8 *buf )
ZDApp_SendMsg:
          CFI Block cfiBlock85 Using cfiCommon0
          CFI Function ZDApp_SendMsg
        CODE
// 2124 {
        FUNCALL ZDApp_SendMsg, osal_msg_allocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_SendMsg, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_SendMsg, osal_msg_send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
        MOV     ?V7,R1
        MOV     ?V6,R2
        MOV     ?V3,R3
        MOV     ?V0,R4
        MOV     ?V1,R5
// 2125   osal_event_hdr_t *msgPtr;
// 2126 
// 2127   // Send the address to the task
// 2128   msgPtr = (osal_event_hdr_t *)osal_msg_allocate( len );
        ; Setup parameters for call to function osal_msg_allocate
        MOV     R2,?V3
        MOV     R3,#0x0
        LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
        MOV     ?V4,R2
        MOV     ?V5,R3
        MOV     R6,?V4
        MOV     R7,?V5
// 2129   if ( msgPtr )
        MOV     A,R6
        ORL     A,R7
        JZ      ??ZDApp_SendMsg_0
// 2130   {
// 2131     if ( (len > 0) && (buf != NULL) )
        MOV     A,?V3
        JZ      ??ZDApp_SendMsg_1
        MOV     A,?V0
        ORL     A,?V1
        JZ      ??ZDApp_SendMsg_1
// 2132       osal_memcpy( msgPtr, buf, len );
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V2,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 19)
        MOV     R4,?V3
        MOV     R5,#0x0
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
// 2133 
// 2134     msgPtr->event = cmd;
??ZDApp_SendMsg_1:
        MOV     DPL,R6
        MOV     DPH,R7
        MOV     A,?V6
        MOVX    @DPTR,A
// 2135     osal_msg_send( taskID, (uint8 *)msgPtr );
        ; Setup parameters for call to function osal_msg_send
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        MOV     R1,?V7
        LCALL   `??osal_msg_send::?relay`; Banked call to: osal_msg_send
// 2136   }
// 2137 }
??ZDApp_SendMsg_0:
        MOV     R7,#0x8
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock85
// 2138 
// 2139 /*********************************************************************
// 2140  * Call Back Functions from NWK  - API
// 2141  */
// 2142 
// 2143 /*********************************************************************
// 2144  * @fn          ZDO_NetworkDiscoveryConfirmCB
// 2145  *
// 2146  * @brief       This function returns a choice of PAN to join.
// 2147  *
// 2148  * @param       status - return status of the nwk discovery confirm
// 2149  *
// 2150  * @return      ZStatus_t
// 2151  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2152 ZStatus_t ZDO_NetworkDiscoveryConfirmCB(uint8 status)
ZDO_NetworkDiscoveryConfirmCB:
          CFI Block cfiBlock86 Using cfiCommon0
          CFI Function ZDO_NetworkDiscoveryConfirmCB
        CODE
// 2153 {
        FUNCALL ZDO_NetworkDiscoveryConfirmCB, ZDApp_SendMsg
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 3, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 3, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 3
        MOV     A,#-0x3
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 3)
        MOV     A,R1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
// 2154   osal_event_hdr_t msg;
// 2155 
// 2156   // If Scan is initiated by ZDO_MGMT_NWK_DISC_REQ
// 2157   // Send ZDO_MGMT_NWK_DISC_RSP back
// 2158 #if defined ( ZDO_MGMT_NWKDISC_RESPONSE )
// 2159   if ( zdappMgmtNwkDiscReqInProgress )
// 2160   {
// 2161     zdappMgmtNwkDiscReqInProgress = false;
// 2162     ZDO_FinishProcessingMgmtNwkDiscReq();
// 2163   }
// 2164   else
// 2165 #endif
// 2166   {
// 2167     // Pass the confirm to another task if it registers the callback
// 2168     // Otherwise, pass the confirm to ZDApp.
// 2169     if (zdoCBFunc[ZDO_NWK_DISCOVERY_CNF_CBID] != NULL )
        MOV     DPTR,#zdoCBFunc + 4
        LCALL   ??Subroutine64_0 & 0xFFFF
??CrossCallReturnLabel_119:
        JZ      ??ZDO_NetworkDiscoveryConfirmCB_0
// 2170     {
// 2171       zdoCBFunc[ZDO_NWK_DISCOVERY_CNF_CBID]( (void*)&status );
        ; Setup parameters for indirect call
        LCALL   ?Subroutine17 & 0xFFFF
// 2172     }
??CrossCallReturnLabel_114:
        LCALL   ?CALL_IND
        SJMP    ??ZDO_NetworkDiscoveryConfirmCB_1
// 2173     else
// 2174     {
// 2175       // Otherwise, send scan confirm to ZDApp task to proceed
// 2176       msg.status = ZDO_SUCCESS;
??ZDO_NetworkDiscoveryConfirmCB_0:
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
// 2177       ZDApp_SendMsg( ZDAppTaskID, ZDO_NWK_DISC_CNF, sizeof(osal_event_hdr_t), (uint8 *)&msg );
        ; Setup parameters for call to function ZDApp_SendMsg
        INC     A
        LCALL   ?XSTACK_DISP102_8
        MOV     R3,#0x2
        MOV     R2,#0x1
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??ZDApp_SendMsg::?relay`; Banked call to: ZDApp_SendMsg
// 2178     }
// 2179   }
// 2180   return (ZSuccess);
??ZDO_NetworkDiscoveryConfirmCB_1:
        MOV     R1,#0x0
        MOV     A,#0x3
        LJMP    ?Subroutine3 & 0xFFFF
// 2181 }  // ZDO_NetworkDiscoveryConfirmCB
          CFI EndBlock cfiBlock86
// 2182 
// 2183 /*********************************************************************
// 2184  * @fn          ZDApp_NwkDescListProcessing
// 2185  *
// 2186  * @brief       This function process the network discovery result and select
// 2187  *              a parent device to join itself.
// 2188  *
// 2189  * @param       none
// 2190  *
// 2191  * @return      ZStatus_t
// 2192  */
// 2193 #define STACK_PROFILE_MAX 2

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2194 networkDesc_t* ZDApp_NwkDescListProcessing(void)
ZDApp_NwkDescListProcessing:
          CFI Block cfiBlock87 Using cfiCommon0
          CFI Function ZDApp_NwkDescListProcessing
        CODE
// 2195 {
        FUNCALL ZDApp_NwkDescListProcessing, nwk_getNwkDescList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_NwkDescListProcessing, nwk_getNwkDescList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_NwkDescListProcessing, nwk_ExtPANIDValid
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_NwkDescListProcessing, sAddrExtCmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
// 2196   networkDesc_t *pNwkDesc;
// 2197   uint8 i, ResultCount = 0;
        MOV     ?V3,#0x0
// 2198   uint8 stackProfile;
// 2199   uint8 stackProfilePro;
// 2200   uint8 selected;
// 2201 
// 2202   // Count the number of nwk descriptors in the list
// 2203   pNwkDesc = nwk_getNwkDescList();
        ; Setup parameters for call to function nwk_getNwkDescList
        LCALL   `??nwk_getNwkDescList::?relay`; Banked call to: nwk_getNwkDescList
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     R6,?V0
        MOV     R7,?V1
        SJMP    ??CrossCallReturnLabel_85
// 2204   while (pNwkDesc)
// 2205   {
// 2206     ResultCount++;
??ZDApp_NwkDescListProcessing_0:
        INC     ?V3
// 2207     pNwkDesc = pNwkDesc->nextDesc;
        LCALL   ?Subroutine21 & 0xFFFF
// 2208   }
??CrossCallReturnLabel_85:
        MOV     A,R6
        ORL     A,R7
        JNZ     ??ZDApp_NwkDescListProcessing_0
// 2209 
// 2210   // process discovery results
// 2211   stackProfilePro = FALSE;
        MOV     ?V2,#0x0
// 2212   selected = FALSE;
// 2213 
// 2214 
// 2215   for ( stackProfile = 0; stackProfile < STACK_PROFILE_MAX; stackProfile++ )
        MOV     ?V0,#0x0
// 2216   {
// 2217     pNwkDesc = nwk_getNwkDescList();
??ZDApp_NwkDescListProcessing_1:
        ; Setup parameters for call to function nwk_getNwkDescList
        LCALL   `??nwk_getNwkDescList::?relay`; Banked call to: nwk_getNwkDescList
        MOV     ?V4,R2
        MOV     ?V5,R3
        MOV     R6,?V4
        MOV     R7,?V5
// 2218     for ( i = 0; i < ResultCount; i++, pNwkDesc = pNwkDesc->nextDesc )
        MOV     ?V1,#0x0
        SJMP    ??CrossCallReturnLabel_86
// 2219     {
// 2220        if ( nwk_ExtPANIDValid( ZDO_UseExtendedPANID ) == true )
// 2221       {
// 2222         // If the extended Pan ID is commissioned to a non zero value
// 2223         // Only join the Pan that has match EPID
// 2224         if ( osal_ExtAddrEqual( ZDO_UseExtendedPANID, pNwkDesc->extendedPANID) == false )
// 2225           continue;
// 2226 
// 2227       }
// 2228       else if ( zgConfigPANID != 0xFFFF )
// 2229       {
// 2230         // PAN Id is preconfigured. check if it matches
// 2231         if ( pNwkDesc->panId != zgConfigPANID )
// 2232           continue;
// 2233       }
// 2234 
// 2235       // check that network is allowing joining
// 2236       if ( ZSTACK_ROUTER_BUILD )
// 2237       {
// 2238         if ( stackProfilePro == FALSE )
// 2239         {
// 2240           if ( !pNwkDesc->routerCapacity )
// 2241           {
// 2242             continue;
// 2243           }
// 2244         }
// 2245         else
// 2246         {
// 2247           if ( !pNwkDesc->deviceCapacity )
// 2248           {
// 2249             continue;
// 2250           }
// 2251         }
// 2252       }
// 2253       else if ( ZSTACK_END_DEVICE_BUILD )
// 2254       {
// 2255         if ( !pNwkDesc->deviceCapacity )
// 2256         {
// 2257           continue;
// 2258         }
// 2259       }
// 2260 
// 2261       // check version of zigbee protocol
// 2262       if ( pNwkDesc->version != _NIB.nwkProtocolVersion )
// 2263         continue;
// 2264 
// 2265       // check version of stack profile
// 2266       if ( pNwkDesc->stackProfile != zgStackProfile  )
// 2267       {
// 2268         if ( ((zgStackProfile == HOME_CONTROLS) && (pNwkDesc->stackProfile == ZIGBEEPRO_PROFILE))
// 2269             || ((zgStackProfile == ZIGBEEPRO_PROFILE) && (pNwkDesc->stackProfile == HOME_CONTROLS))  )
??ZDApp_NwkDescListProcessing_2:
        MOVX    A,@DPTR
        XRL     A,#0x2
        JNZ     ??ZDApp_NwkDescListProcessing_3
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??ZDApp_NwkDescListProcessing_3
// 2270         {
// 2271           stackProfilePro = TRUE;
??ZDApp_NwkDescListProcessing_4:
        MOV     ?V2,#0x1
// 2272         }
// 2273 
// 2274         if ( stackProfile == 0 )
??ZDApp_NwkDescListProcessing_3:
        MOV     A,?V0
        JZ      $+5
        LJMP    ??ZDApp_NwkDescListProcessing_5 & 0xFFFF
??ZDApp_NwkDescListProcessing_6:
        INC     ?V1
        LCALL   ?Subroutine21 & 0xFFFF
??CrossCallReturnLabel_86:
        MOV     A,?V1
        CLR     C
        SUBB    A,?V3
        JC      $+5
        LJMP    ??ZDApp_NwkDescListProcessing_7 & 0xFFFF
        ; Setup parameters for call to function nwk_ExtPANIDValid
        MOV     R2,#ZDO_UseExtendedPANID & 0xff
        MOV     R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
        LCALL   `??nwk_ExtPANIDValid::?relay`; Banked call to: nwk_ExtPANIDValid
        MOV     A,R1
        XRL     A,#0x1
        JNZ     ??ZDApp_NwkDescListProcessing_8
        ; Setup parameters for call to function sAddrExtCmp
        MOV     A,R6
        ADD     A,#0xb
        MOV     R4,A
        CLR     A
        ADDC    A,R7
        MOV     R5,A
        MOV     R2,#ZDO_UseExtendedPANID & 0xff
        MOV     R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
        LCALL   `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
        MOV     A,R1
        JNZ     ??ZDApp_NwkDescListProcessing_9
        SJMP    ??ZDApp_NwkDescListProcessing_6
??ZDApp_NwkDescListProcessing_8:
        MOV     DPTR,#zgConfigPANID
        MOVX    A,@DPTR
        CPL     A
        JNZ     ??ZDApp_NwkDescListProcessing_10
        INC     DPTR
        MOVX    A,@DPTR
        CPL     A
??ZDApp_NwkDescListProcessing_10:
        JZ      ??ZDApp_NwkDescListProcessing_9
        LCALL   ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_97:
        MOV     DPTR,#zgConfigPANID
        MOVX    A,@DPTR
        XRL     A,R0
        JNZ     ??ZDApp_NwkDescListProcessing_11
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R1
??ZDApp_NwkDescListProcessing_11:
        JNZ     ??ZDApp_NwkDescListProcessing_6
??ZDApp_NwkDescListProcessing_9:
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        JZ      ??ZDApp_NwkDescListProcessing_6
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     DPTR,#_NIB + 17
        MOVX    A,@DPTR
        XRL     A,R0
        JNZ     ??ZDApp_NwkDescListProcessing_6
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     DPTR,#zgStackProfile
        MOVX    A,@DPTR
        XRL     A,R0
        JZ      ??ZDApp_NwkDescListProcessing_5
        MOVX    A,@DPTR
        XRL     A,#0x1
        JZ      $+5
        LJMP    ??ZDApp_NwkDescListProcessing_2 & 0xFFFF
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x2
        JZ      $+5
        LJMP    ??ZDApp_NwkDescListProcessing_3 & 0xFFFF
        LJMP    ??ZDApp_NwkDescListProcessing_4 & 0xFFFF
// 2275         {
// 2276           continue;
// 2277         }
// 2278       }
// 2279 
// 2280       break;
// 2281     }
// 2282 
// 2283     if (i < ResultCount)
// 2284     {
// 2285      selected = TRUE;
// 2286       break;
// 2287     }
// 2288 
// 2289     // break if selected or stack profile pro wasn't found
// 2290     if ( (selected == TRUE) || (stackProfilePro == FALSE) )
??ZDApp_NwkDescListProcessing_7:
        MOV     A,?V2
        JZ      ??ZDApp_NwkDescListProcessing_12
// 2291     {
// 2292       break;
// 2293     }
// 2294   }
        INC     ?V0
        MOV     A,?V0
        CLR     C
        SUBB    A,#0x2
        JNC     $+5
        LJMP    ??ZDApp_NwkDescListProcessing_1 & 0xFFFF
// 2295 
// 2296   if ( i == ResultCount )
??ZDApp_NwkDescListProcessing_12:
        MOV     A,?V3
        XRL     A,?V1
        JNZ     ??ZDApp_NwkDescListProcessing_5
// 2297   {
// 2298     return (NULL);   // couldn't find appropriate PAN to join !
        MOV     R2,#0x0
        MOV     R3,#0x0
        SJMP    ??ZDApp_NwkDescListProcessing_13
// 2299   }
// 2300   else
// 2301   {
// 2302     return (pNwkDesc);
??ZDApp_NwkDescListProcessing_5:
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
// 2303   }
??ZDApp_NwkDescListProcessing_13:
        LJMP    ?Subroutine1 & 0xFFFF
// 2304 }// ZDApp_NwkDescListProcessing()
          CFI EndBlock cfiBlock87
// 2305 
// 2306 /*********************************************************************
// 2307  * @fn          ZDO_NetworkFormationConfirmCB
// 2308  *
// 2309  * @brief       This function reports the results of the request to
// 2310  *              initialize a coordinator in a network.
// 2311  *
// 2312  * @param       Status - Result of NLME_NetworkFormationRequest()
// 2313  *
// 2314  * @return      none
// 2315  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2316 void ZDO_NetworkFormationConfirmCB( ZStatus_t Status )
ZDO_NetworkFormationConfirmCB:
          CFI Block cfiBlock88 Using cfiCommon0
          CFI Function ZDO_NetworkFormationConfirmCB
        CODE
// 2317 {
        FUNCALL ZDO_NetworkFormationConfirmCB, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_NetworkFormationConfirmCB, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_NetworkFormationConfirmCB, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_NetworkFormationConfirmCB, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
// 2318   nwkStatus = (byte)Status;
        MOV     DPTR,#nwkStatus
        MOVX    @DPTR,A
// 2319 
// 2320   if ( Status == ZSUCCESS )
        JNZ     ??ZDO_NetworkFormationConfirmCB_0
// 2321   {
// 2322     // LED on shows Coordinator started
// 2323     HalLedSet ( HAL_LED_3, HAL_LED_MODE_ON );
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x1
        MOV     R1,#0x4
        LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
// 2324 
// 2325     // LED off forgets HOLD_AUTO_START
// 2326     HalLedSet (HAL_LED_4, HAL_LED_MODE_OFF);
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x0
        MOV     R1,#0x8
        LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
// 2327 
// 2328 #if defined ( ZBIT )
// 2329     SIM_SetColor(0xd0ffd0);
// 2330 #endif
// 2331 
// 2332     if ( devState == DEV_HOLD )
        MOV     DPTR,#devState
        MOVX    A,@DPTR
        JNZ     ??ZDO_NetworkFormationConfirmCB_1
// 2333     {
// 2334       // Began with HOLD_AUTO_START
// 2335       devState = DEV_COORD_STARTING;
        MOV     A,#0x8
        MOVX    @DPTR,A
        SJMP    ??ZDO_NetworkFormationConfirmCB_1
// 2336     }
// 2337   }
// 2338 #if defined(BLINK_LEDS)
// 2339   else
// 2340   {
// 2341     HalLedSet ( HAL_LED_3, HAL_LED_MODE_FLASH );  // Flash LED to show failure
??ZDO_NetworkFormationConfirmCB_0:
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x4
        MOV     R1,#0x4
        LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
// 2342   }
// 2343 #endif
// 2344 
// 2345   osal_set_event( ZDAppTaskID, ZDO_NETWORK_START );
??ZDO_NetworkFormationConfirmCB_1:
        ; Setup parameters for call to function osal_set_event
        MOV     R2,#0x2
        LJMP    ?Subroutine0 & 0xFFFF
// 2346 }
          CFI EndBlock cfiBlock88
// 2347 
// 2348 /****************************************************************************
// 2349  * @fn          ZDApp_beaconIndProcessing
// 2350  *
// 2351  * @brief       This function processes the incoming beacon indication.
// 2352  *
// 2353  *              When another task (MT or App) is registered to process
// 2354  *              beacon indication themselves, this function will parse the
// 2355  *              beacon payload and pass the beacon descriptor to that task
// 2356  *              If no other tasks registered, this function will process
// 2357  *              the beacon payload and generate the network descriptor link
// 2358  *              list.
// 2359  *
// 2360  * @param
// 2361  *
// 2362  * @return      none
// 2363  *
// 2364  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2365 void ZDO_beaconNotifyIndCB( NLME_beaconInd_t *pBeacon )
ZDO_beaconNotifyIndCB:
          CFI Block cfiBlock89 Using cfiCommon0
          CFI Function ZDO_beaconNotifyIndCB
        CODE
// 2366 {
        FUNCALL ZDO_beaconNotifyIndCB, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_beaconNotifyIndCB, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_beaconNotifyIndCB, sAddrExtCpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_beaconNotifyIndCB, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV     ?V0,R2
        MOV     ?V1,R3
// 2367   // Pass the beacon Indication to another task if it registers the callback
// 2368   // Otherwise, process the beacon notification here.
// 2369   if (zdoCBFunc[ZDO_BEACON_NOTIFY_IND_CBID] != NULL )
        MOV     DPTR,#zdoCBFunc + 6
        LCALL   ??Subroutine64_0 & 0xFFFF
??CrossCallReturnLabel_120:
        JZ      ??ZDO_beaconNotifyIndCB_0
// 2370   {
// 2371     zdoCBFunc[ZDO_BEACON_NOTIFY_IND_CBID]( (void*)pBeacon );
        ; Setup parameters for indirect call
        LCALL   ??Subroutine63_0 & 0xFFFF
// 2372   }
??CrossCallReturnLabel_109:
        LCALL   ?CALL_IND
        LJMP    ??ZDO_beaconNotifyIndCB_1 & 0xFFFF
// 2373   else
// 2374   {
// 2375     networkDesc_t *pNwkDesc;
// 2376     networkDesc_t *pLastNwkDesc;
// 2377     uint8 found = false;
// 2378 
// 2379     // Add the network to the Network Descriptor List
// 2380     pNwkDesc = NwkDescList;
??ZDO_beaconNotifyIndCB_0:
        MOV     DPTR,#NwkDescList
        LCALL   ??Subroutine57_0 & 0xFFFF
// 2381     pLastNwkDesc = NwkDescList;
??CrossCallReturnLabel_82:
        MOV     DPTR,#NwkDescList
        MOVX    A,@DPTR
        MOV     ?V2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V3,A
        SJMP    ??CrossCallReturnLabel_87
// 2382     while (pNwkDesc)
// 2383     {
// 2384       if ((pNwkDesc->panId == pBeacon->panID) &&
// 2385           (pNwkDesc->logicalChannel == pBeacon->logicalChannel))
??ZDO_beaconNotifyIndCB_2:
        LCALL   ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_98:
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R0
        JNZ     ??ZDO_beaconNotifyIndCB_3
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R1
??ZDO_beaconNotifyIndCB_3:
        JNZ     ??ZDO_beaconNotifyIndCB_4
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R0
        JZ      ??ZDO_beaconNotifyIndCB_5
// 2386       {
// 2387         found = true;
// 2388         break;
// 2389       }
// 2390       pLastNwkDesc = pNwkDesc;
??ZDO_beaconNotifyIndCB_4:
        MOV     ?V2,R6
        MOV     ?V3,R7
// 2391       pNwkDesc = pNwkDesc->nextDesc;
        LCALL   ?Subroutine21 & 0xFFFF
// 2392     }
??CrossCallReturnLabel_87:
        MOV     A,R6
        ORL     A,R7
        JNZ     ??ZDO_beaconNotifyIndCB_2
// 2393 
// 2394     // If no existing descriptor found, make a new one and add to the list
// 2395     if (found == false)
// 2396     {
// 2397       pNwkDesc = osal_mem_alloc( sizeof(networkDesc_t)  );
        ; Setup parameters for call to function osal_mem_alloc
        MOV     R2,#0x16
        MOV     R3,#0x0
        LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV     ?V4,R2
        MOV     ?V5,R3
        MOV     R6,?V4
        MOV     R7,?V5
// 2398       if ( !pNwkDesc )
        MOV     A,R6
        ORL     A,R7
        JNZ     $+5
        LJMP    ??ZDO_beaconNotifyIndCB_1 & 0xFFFF
// 2399       {
// 2400         // Memory alloc failed, discard this beacon
// 2401         return;
// 2402       }
// 2403 
// 2404       // Clear the network descriptor
// 2405       osal_memset( pNwkDesc, 0, sizeof(networkDesc_t)  );
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x16
        MOV     R5,#0x0
        MOV     R1,#0x0
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
// 2406 
// 2407       // Initialize the descriptor
// 2408       pNwkDesc->chosenRouter = INVALID_NODE_ADDR;
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,#-0x2
        MOVX    @DPTR,A
        INC     DPTR
        INC     A
        LCALL   ?Subroutine11 & 0xFFFF
// 2409       pNwkDesc->chosenRouterDepth = 0xFF;
??CrossCallReturnLabel_3:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    @DPTR,A
// 2410 
// 2411       // Save new entry into the descriptor list
// 2412       if ( !NwkDescList )
        MOV     DPTR,#NwkDescList
        LCALL   ??Subroutine64_0 & 0xFFFF
??CrossCallReturnLabel_121:
        JNZ     ??ZDO_beaconNotifyIndCB_6
// 2413       {
// 2414         NwkDescList = pNwkDesc;
        MOV     DPTR,#NwkDescList
        SJMP    ??ZDO_beaconNotifyIndCB_7
// 2415       }
// 2416       else
// 2417       {
// 2418         pLastNwkDesc->nextDesc = pNwkDesc;
??ZDO_beaconNotifyIndCB_6:
        MOV     A,?V2
        ADD     A,#0x14
        MOV     DPL,A
        CLR     A
        ADDC    A,?V3
        MOV     DPH,A
??ZDO_beaconNotifyIndCB_7:
        MOV     A,R6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R7
        MOVX    @DPTR,A
// 2419       }
// 2420     }
// 2421 
// 2422     // Update the descriptor with the incoming beacon
// 2423     pNwkDesc->stackProfile   = pBeacon->stackProfile;
??ZDO_beaconNotifyIndCB_5:
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine25 & 0xFFFF
??CrossCallReturnLabel_23:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    @DPTR,A
// 2424     pNwkDesc->version        = pBeacon->protocolVersion;
        MOV     A,?V0
        ADD     A,#0x8
        MOV     R0,A
        CLR     A
        ADDC    A,?V1
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
        LCALL   ?Subroutine25 & 0xFFFF
??CrossCallReturnLabel_24:
        LCALL   ?Subroutine12 & 0xFFFF
// 2425     pNwkDesc->logicalChannel = pBeacon->logicalChannel;
??CrossCallReturnLabel_4:
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ?Subroutine12 & 0xFFFF
// 2426     pNwkDesc->panId          = pBeacon->panID;
??CrossCallReturnLabel_5:
        LCALL   ?Subroutine23 & 0xFFFF
??CrossCallReturnLabel_15:
        LCALL   ??Subroutine48_0 & 0xFFFF
// 2427     pNwkDesc->updateId       = pBeacon->updateID;
??CrossCallReturnLabel_64:
        LCALL   ?Subroutine32 & 0xFFFF
??CrossCallReturnLabel_81:
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,R6
        ADD     A,#0x13
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
// 2428 
// 2429     // Save the extended PAN ID from the beacon payload only if 1.1 version network
// 2430     if ( pBeacon->protocolVersion != ZB_PROT_V1_0 )
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        XRL     A,#0x1
        JZ      ??ZDO_beaconNotifyIndCB_8
// 2431     {
// 2432       osal_cpyExtAddr( pNwkDesc->extendedPANID, pBeacon->extendedPanID );
        ; Setup parameters for call to function sAddrExtCpy
        MOV     A,?V0
        ADD     A,#0xd
        MOV     R4,A
        CLR     A
        ADDC    A,?V1
        LCALL   ?Subroutine29 & 0xFFFF
// 2433     }
??CrossCallReturnLabel_78:
        LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
        SJMP    ??ZDO_beaconNotifyIndCB_9
// 2434     else
// 2435     {
// 2436       osal_memset( pNwkDesc->extendedPANID, 0xFF, Z_EXTADDR_LEN );
??ZDO_beaconNotifyIndCB_8:
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x8
        MOV     R5,#0x0
        MOV     R1,#-0x1
        LCALL   ??Subroutine51_0 & 0xFFFF
// 2437     }
??CrossCallReturnLabel_76:
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
// 2438 
// 2439     // check if this device is a better choice to join...
// 2440     // ...dont bother checking assocPermit flag is doing a rejoin
// 2441     if ( ( pBeacon->LQI > gMIN_TREE_LQI ) &&
// 2442         ( ( pBeacon->permitJoining == TRUE ) || ( _tmpRejoinState ) ) )
??ZDO_beaconNotifyIndCB_9:
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     DPTR,#gMIN_TREE_LQI
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,R0
        JC      $+5
        LJMP    ??ZDO_beaconNotifyIndCB_1 & 0xFFFF
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x1
        JZ      ??ZDO_beaconNotifyIndCB_10
        MOV     DPTR,#_tmpRejoinState
        MOVX    A,@DPTR
        JNZ     $+5
        LJMP    ??ZDO_beaconNotifyIndCB_1 & 0xFFFF
// 2443     {
// 2444       uint8 selected = FALSE;
??ZDO_beaconNotifyIndCB_10:
        MOV     R0,#0x0
// 2445       uint8 capacity = FALSE;
// 2446 
// 2447       if ( _NIB.nwkAddrAlloc == NWK_ADDRESSING_STOCHASTIC )
        MOV     DPTR,#_NIB + 96
        MOVX    A,@DPTR
        XRL     A,#0x2
        JNZ     ??ZDO_beaconNotifyIndCB_11
// 2448       {
// 2449         if ( ((pBeacon->LQI   > pNwkDesc->chosenRouterLinkQuality) &&
// 2450               (pBeacon->depth < MAX_NODE_DEPTH)) ||
// 2451             ((pBeacon->LQI   == pNwkDesc->chosenRouterLinkQuality) &&
// 2452              (pBeacon->depth < pNwkDesc->chosenRouterDepth)) )
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine40 & 0xFFFF
// 2453         {
// 2454           selected = TRUE;
// 2455         }
// 2456       }
??CrossCallReturnLabel_75:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,R1
        JNC     ??ZDO_beaconNotifyIndCB_12
        LCALL   ?Subroutine27 & 0xFFFF
??CrossCallReturnLabel_27:
        SUBB    A,#0x14
        JC      ??ZDO_beaconNotifyIndCB_13
        SJMP    ??ZDO_beaconNotifyIndCB_14
??ZDO_beaconNotifyIndCB_12:
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R0
        JNZ     ??ZDO_beaconNotifyIndCB_15
// 2457       else
// 2458       {
// 2459         if ( pBeacon->depth < pNwkDesc->chosenRouterDepth )
??ZDO_beaconNotifyIndCB_11:
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        LCALL   ?Subroutine27 & 0xFFFF
??CrossCallReturnLabel_28:
        SUBB    A,R0
        JNC     ??ZDO_beaconNotifyIndCB_15
// 2460         {
// 2461           selected = TRUE;
??ZDO_beaconNotifyIndCB_13:
        MOV     R0,#0x1
// 2462         }
// 2463       }
// 2464 
// 2465       if ( ZSTACK_ROUTER_BUILD )
// 2466       {
// 2467         capacity = pBeacon->routerCapacity;
// 2468       }
// 2469       else if ( ZSTACK_END_DEVICE_BUILD )
// 2470       {
// 2471         capacity = pBeacon->deviceCapacity;
// 2472       }
// 2473 
// 2474       if ( (capacity) && (selected) )
??ZDO_beaconNotifyIndCB_14:
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        JZ      ??ZDO_beaconNotifyIndCB_16
        MOV     A,R0
        MOV     C,0xE0 /* A   */.0
        JNC     ??ZDO_beaconNotifyIndCB_17
// 2475       {
// 2476         // this is the new chosen router for joining...
// 2477         pNwkDesc->chosenRouter            = pBeacon->sourceAddr;
        MOV     DPL,?V0
        MOV     DPH,?V1
        LCALL   ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_8:
        LCALL   ?Subroutine10 & 0xFFFF
// 2478         pNwkDesc->chosenRouterLinkQuality = pBeacon->LQI;
??CrossCallReturnLabel_106:
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_11:
        MOVX    @DPTR,A
// 2479         pNwkDesc->chosenRouterDepth       = pBeacon->depth;
        LCALL   ?Subroutine44 & 0xFFFF
// 2480       }
??CrossCallReturnLabel_56:
        LCALL   ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_12:
        INC     DPTR
        MOVX    @DPTR,A
// 2481 
// 2482       if ( pBeacon->deviceCapacity )
??ZDO_beaconNotifyIndCB_15:
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        JZ      ??ZDO_beaconNotifyIndCB_16
// 2483         pNwkDesc->deviceCapacity = 1;
??ZDO_beaconNotifyIndCB_17:
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,#0x1
        MOVX    @DPTR,A
// 2484 
// 2485       if ( pBeacon->routerCapacity )
??ZDO_beaconNotifyIndCB_16:
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        JZ      ??ZDO_beaconNotifyIndCB_1
// 2486         pNwkDesc->routerCapacity = 1;
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,#0x1
        MOVX    @DPTR,A
// 2487     }
// 2488   }
// 2489 }
??ZDO_beaconNotifyIndCB_1:
          CFI EndBlock cfiBlock89
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
          CFI Block cfiBlock90 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x6
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock90

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine32:
          CFI Block cfiCond91 Using cfiCommon0
          CFI Function ZDApp_ProcessMsgCBs
          CFI Conditional ??CrossCallReturnLabel_80
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond92 Using cfiCommon0
          CFI (cfiCond92) Function ZDO_beaconNotifyIndCB
          CFI (cfiCond92) Conditional ??CrossCallReturnLabel_81
          CFI (cfiCond92) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond92) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond92) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond92) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond92) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond92) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond92) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond92) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond92) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond92) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond92) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond92) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond92) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond92) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond92) CFA_SP SP+-2
          CFI (cfiCond92) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker93 Using cfiCommon1
          CFI (cfiPicker93) NoFunction
          CFI (cfiPicker93) Picker
        MOV     A,?V0
          CFI EndBlock cfiCond91
          CFI EndBlock cfiCond92
          CFI EndBlock cfiPicker93
        REQUIRE ??Subroutine56_0
        ; // Fall through to label ??Subroutine56_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine56_0:
          CFI Block cfiCond94 Using cfiCommon0
          CFI Function ZDApp_ProcessMsgCBs
          CFI Conditional ??CrossCallReturnLabel_79
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond95 Using cfiCommon0
          CFI (cfiCond95) Function ZDApp_ProcessMsgCBs
          CFI (cfiCond95) Conditional ??CrossCallReturnLabel_80
          CFI (cfiCond95) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond95) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond95) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond95) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond95) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond95) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond95) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond95) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond95) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond95) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond95) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond95) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond95) CFA_SP SP+-2
          CFI (cfiCond95) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond96 Using cfiCommon0
          CFI (cfiCond96) Function ZDO_beaconNotifyIndCB
          CFI (cfiCond96) Conditional ??CrossCallReturnLabel_81
          CFI (cfiCond96) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond96) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond96) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond96) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond96) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond96) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond96) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond96) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond96) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond96) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond96) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond96) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond96) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond96) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond96) CFA_SP SP+-2
          CFI (cfiCond96) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker97 Using cfiCommon1
          CFI (cfiPicker97) NoFunction
          CFI (cfiPicker97) Picker
        ADD     A,#0xc
        MOV     DPL,A
        CLR     A
        ADDC    A,?V1
        MOV     DPH,A
        MOVX    A,@DPTR
        RET
          CFI EndBlock cfiCond94
          CFI EndBlock cfiCond95
          CFI EndBlock cfiCond96
          CFI EndBlock cfiPicker97

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine27:
          CFI Block cfiCond98 Using cfiCommon0
          CFI Function ZDO_beaconNotifyIndCB
          CFI Conditional ??CrossCallReturnLabel_27
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond99 Using cfiCommon0
          CFI (cfiCond99) Function ZDO_beaconNotifyIndCB
          CFI (cfiCond99) Conditional ??CrossCallReturnLabel_28
          CFI (cfiCond99) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond99) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond99) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond99) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond99) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond99) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond99) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond99) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond99) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond99) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond99) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond99) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond99) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond99) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond99) CFA_SP SP+-2
          CFI (cfiCond99) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker100 Using cfiCommon1
          CFI (cfiPicker100) NoFunction
          CFI (cfiPicker100) Picker
        LCALL   ?Subroutine44 & 0xFFFF
??CrossCallReturnLabel_57:
        MOVX    A,@DPTR
        CLR     C
        RET
          CFI EndBlock cfiCond98
          CFI EndBlock cfiCond99
          CFI EndBlock cfiPicker100

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine44:
          CFI Block cfiCond101 Using cfiCommon0
          CFI Function ZDO_beaconNotifyIndCB
          CFI Conditional ??CrossCallReturnLabel_56
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond102 Using cfiCommon0
          CFI (cfiCond102) Function ZDO_beaconNotifyIndCB
          CFI (cfiCond102) Conditional ??CrossCallReturnLabel_57, ??CrossCallReturnLabel_27
          CFI (cfiCond102) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond102) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond102) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond102) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond102) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond102) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond102) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond102) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond102) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond102) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond102) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond102) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond102) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond102) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond102) CFA_SP SP+-4
          CFI (cfiCond102) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond103 Using cfiCommon0
          CFI (cfiCond103) Function ZDO_beaconNotifyIndCB
          CFI (cfiCond103) Conditional ??CrossCallReturnLabel_57, ??CrossCallReturnLabel_28
          CFI (cfiCond103) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond103) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond103) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond103) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond103) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond103) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond103) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond103) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond103) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond103) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond103) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond103) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond103) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond103) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond103) CFA_SP SP+-4
          CFI (cfiCond103) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker104 Using cfiCommon1
          CFI (cfiPicker104) NoFunction
          CFI (cfiPicker104) Picker
        MOV     A,?V0
        ADD     A,#0xb
        MOV     DPL,A
        CLR     A
        ADDC    A,?V1
        MOV     DPH,A
        RET
          CFI EndBlock cfiCond101
          CFI EndBlock cfiCond102
          CFI EndBlock cfiCond103
          CFI EndBlock cfiPicker104

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine25:
          CFI Block cfiCond105 Using cfiCommon0
          CFI Function ZDO_beaconNotifyIndCB
          CFI Conditional ??CrossCallReturnLabel_23
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond106 Using cfiCommon0
          CFI (cfiCond106) Function ZDO_beaconNotifyIndCB
          CFI (cfiCond106) Conditional ??CrossCallReturnLabel_24
          CFI (cfiCond106) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond106) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond106) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond106) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond106) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond106) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond106) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond106) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond106) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond106) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond106) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond106) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond106) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond106) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond106) CFA_SP SP+-2
          CFI (cfiCond106) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker107 Using cfiCommon1
          CFI (cfiPicker107) NoFunction
          CFI (cfiPicker107) Picker
        LCALL   ?Subroutine42 & 0xFFFF
??CrossCallReturnLabel_53:
        RET
          CFI EndBlock cfiCond105
          CFI EndBlock cfiCond106
          CFI EndBlock cfiPicker107

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine42:
          CFI Block cfiCond108 Using cfiCommon0
          CFI Function ZDO_beaconNotifyIndCB
          CFI Conditional ??CrossCallReturnLabel_53, ??CrossCallReturnLabel_23
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond109 Using cfiCommon0
          CFI (cfiCond109) Function ZDO_beaconNotifyIndCB
          CFI (cfiCond109) Conditional ??CrossCallReturnLabel_53, ??CrossCallReturnLabel_24
          CFI (cfiCond109) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond109) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond109) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond109) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond109) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond109) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond109) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond109) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond109) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond109) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond109) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond109) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond109) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond109) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond109) CFA_SP SP+-4
          CFI (cfiCond109) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond110 Using cfiCommon0
          CFI (cfiCond110) Function ZDO_beaconNotifyIndCB
          CFI (cfiCond110) Conditional ??CrossCallReturnLabel_52, ??CrossCallReturnLabel_11
          CFI (cfiCond110) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond110) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond110) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond110) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond110) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond110) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond110) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond110) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond110) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond110) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond110) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond110) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond110) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond110) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond110) CFA_SP SP+-4
          CFI (cfiCond110) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond111 Using cfiCommon0
          CFI (cfiCond111) Function ZDO_beaconNotifyIndCB
          CFI (cfiCond111) Conditional ??CrossCallReturnLabel_52, ??CrossCallReturnLabel_12
          CFI (cfiCond111) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond111) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond111) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond111) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond111) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond111) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond111) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond111) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond111) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond111) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond111) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond111) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond111) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond111) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond111) CFA_SP SP+-4
          CFI (cfiCond111) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker112 Using cfiCommon1
          CFI (cfiPicker112) NoFunction
          CFI (cfiPicker112) Picker
        MOVX    A,@DPTR
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        RET
          CFI EndBlock cfiCond108
          CFI EndBlock cfiCond109
          CFI EndBlock cfiCond110
          CFI EndBlock cfiCond111
          CFI EndBlock cfiPicker112

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine20:
          CFI Block cfiCond113 Using cfiCommon0
          CFI Function ZDO_beaconNotifyIndCB
          CFI Conditional ??CrossCallReturnLabel_11
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond114 Using cfiCommon0
          CFI (cfiCond114) Function ZDO_beaconNotifyIndCB
          CFI (cfiCond114) Conditional ??CrossCallReturnLabel_12
          CFI (cfiCond114) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond114) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond114) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond114) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond114) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond114) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond114) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond114) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond114) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond114) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond114) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond114) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond114) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond114) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond114) CFA_SP SP+-2
          CFI (cfiCond114) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker115 Using cfiCommon1
          CFI (cfiPicker115) NoFunction
          CFI (cfiPicker115) Picker
        LCALL   ?Subroutine42 & 0xFFFF
??CrossCallReturnLabel_52:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        RET
          CFI EndBlock cfiCond113
          CFI EndBlock cfiCond114
          CFI EndBlock cfiPicker115

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine12:
          CFI Block cfiCond116 Using cfiCommon0
          CFI Function ZDO_beaconNotifyIndCB
          CFI Conditional ??CrossCallReturnLabel_4
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond117 Using cfiCommon0
          CFI (cfiCond117) Function ZDO_beaconNotifyIndCB
          CFI (cfiCond117) Conditional ??CrossCallReturnLabel_5
          CFI (cfiCond117) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond117) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond117) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond117) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond117) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond117) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond117) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond117) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond117) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond117) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond117) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond117) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond117) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond117) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond117) CFA_SP SP+-2
          CFI (cfiCond117) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker118 Using cfiCommon1
          CFI (cfiPicker118) NoFunction
          CFI (cfiPicker118) Picker
        INC     DPTR
        INC     DPTR
        MOVX    @DPTR,A
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        RET
          CFI EndBlock cfiCond116
          CFI EndBlock cfiCond117
          CFI EndBlock cfiPicker118

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine11:
          CFI Block cfiCond119 Using cfiCommon0
          CFI Function ZDApp_ProcessOSALMsg
          CFI Conditional ??CrossCallReturnLabel_2
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 13)
          CFI Block cfiCond120 Using cfiCommon0
          CFI (cfiCond120) Function ZDO_beaconNotifyIndCB
          CFI (cfiCond120) Conditional ??CrossCallReturnLabel_3
          CFI (cfiCond120) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond120) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond120) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond120) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond120) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond120) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond120) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond120) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond120) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond120) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond120) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond120) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond120) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond120) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond120) CFA_SP SP+-2
          CFI (cfiCond120) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker121 Using cfiCommon1
          CFI (cfiPicker121) NoFunction
          CFI (cfiPicker121) Picker
        LCALL   ?Subroutine37 & 0xFFFF
??CrossCallReturnLabel_46:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        RET
          CFI EndBlock cfiCond119
          CFI EndBlock cfiCond120
          CFI EndBlock cfiPicker121
// 2490 
// 2491 /*********************************************************************
// 2492  * @fn          ZDO_StartRouterConfirmCB
// 2493  *
// 2494  * @brief       This function reports the results of the request to
// 2495  *              start functioning as a router in a network.
// 2496  *
// 2497  * @param       Status - Result of NLME_StartRouterRequest()
// 2498  *
// 2499  * @return      none
// 2500  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2501 void ZDO_StartRouterConfirmCB( ZStatus_t Status )
ZDO_StartRouterConfirmCB:
          CFI Block cfiBlock122 Using cfiCommon0
          CFI Function ZDO_StartRouterConfirmCB
        CODE
// 2502 {
        FUNCALL ZDO_StartRouterConfirmCB, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_StartRouterConfirmCB, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_StartRouterConfirmCB, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_StartRouterConfirmCB, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
// 2503   nwkStatus = (byte)Status;
        MOV     DPTR,#nwkStatus
        MOVX    @DPTR,A
// 2504 
// 2505   if ( Status == ZSUCCESS )
        JNZ     ??ZDO_StartRouterConfirmCB_0
// 2506   {
// 2507     // LED on shows Router started
// 2508     HalLedSet ( HAL_LED_3, HAL_LED_MODE_ON );
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x1
        MOV     R1,#0x4
        LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
// 2509     // LED off forgets HOLD_AUTO_START
// 2510     HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF);
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x0
        MOV     R1,#0x8
        LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
// 2511     if ( devState == DEV_HOLD )
        MOV     DPTR,#devState
        MOVX    A,@DPTR
        JNZ     ??ZDO_StartRouterConfirmCB_1
// 2512     {
// 2513       // Began with HOLD_AUTO_START
// 2514       devState = DEV_END_DEVICE;
        MOV     A,#0x6
        MOVX    @DPTR,A
        SJMP    ??ZDO_StartRouterConfirmCB_1
// 2515     }
// 2516   }
// 2517 #if defined(BLINK_LEDS)
// 2518   else
// 2519   {
// 2520     HalLedSet( HAL_LED_3, HAL_LED_MODE_FLASH );  // Flash LED to show failure
??ZDO_StartRouterConfirmCB_0:
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x4
        MOV     R1,#0x4
        LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
// 2521   }
// 2522 #endif
// 2523 
// 2524   osal_set_event( ZDAppTaskID, ZDO_ROUTER_START );
??ZDO_StartRouterConfirmCB_1:
        ; Setup parameters for call to function osal_set_event
        MOV     R2,#0x20
        LJMP    ?Subroutine0 & 0xFFFF
// 2525 }
          CFI EndBlock cfiBlock122
// 2526 
// 2527 /*********************************************************************
// 2528  * @fn          ZDO_JoinConfirmCB
// 2529  *
// 2530  * @brief       This function allows the next higher layer to be notified
// 2531  *              of the results of its request to join itself or another
// 2532  *              device to a network.
// 2533  *
// 2534  * @param       Status - Result of NLME_JoinRequest()
// 2535  *
// 2536  * @return      none
// 2537  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2538 void ZDO_JoinConfirmCB( uint16 PanId, ZStatus_t Status )
ZDO_JoinConfirmCB:
          CFI Block cfiBlock123 Using cfiCommon0
          CFI Function ZDO_JoinConfirmCB
        CODE
// 2539 {
        FUNCALL ZDO_JoinConfirmCB, nwkNeighborInitTable
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_JoinConfirmCB, nwkNeighborFindEmptySlot
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_JoinConfirmCB, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_JoinConfirmCB, sAddrExtCpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_JoinConfirmCB, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_JoinConfirmCB, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_JoinConfirmCB, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_JoinConfirmCB, ZDApp_SendMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 5
        MOV     A,#-0x5
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 17)
        MOV     ?V0,R1
// 2540   (void)PanId;  // remove if this parameter is used.
// 2541 
// 2542   nwkStatus = (byte)Status;
        MOV     A,R1
        MOV     DPTR,#nwkStatus
        MOVX    @DPTR,A
// 2543 
// 2544   if ( Status == ZSUCCESS )
        JNZ     ??ZDO_JoinConfirmCB_0
// 2545   {
// 2546     if ( ZSTACK_END_DEVICE_BUILD
// 2547       || (ZSTACK_ROUTER_BUILD && ((_NIB.CapabilityFlags & ZMAC_ASSOC_CAPINFO_FFD_TYPE) == 0)))
// 2548     {
// 2549       neighborEntry_t *pItem;
// 2550  
// 2551       // We don't need the neighbor table entries.  
// 2552       // Clear the neighbor Table to remove beacon information
// 2553       nwkNeighborInitTable();
        ; Setup parameters for call to function nwkNeighborInitTable
        LCALL   `??nwkNeighborInitTable::?relay`; Banked call to: nwkNeighborInitTable
// 2554  
// 2555       // Force a neighbor table entry for the parent
// 2556       pItem = nwkNeighborFindEmptySlot();
        ; Setup parameters for call to function nwkNeighborFindEmptySlot
        LCALL   `??nwkNeighborFindEmptySlot::?relay`; Banked call to: nwkNeighborFindEmptySlot
        MOV     ?V2,R2
        MOV     ?V3,R3
        MOV     R6,?V2
        MOV     R7,?V3
// 2557       if ( pItem != NULL )
        MOV     A,R6
        ORL     A,R7
        JZ      ??ZDO_JoinConfirmCB_1
// 2558       {
// 2559         osal_memset( pItem, 0x00, sizeof ( neighborEntry_t  )  );
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x17
        MOV     R5,#0x0
        MOV     R1,#0x0
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
// 2560         pItem->neighborAddress = _NIB.nwkCoordAddress;
        MOV     DPTR,#_NIB + 23
        LCALL   ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_9:
        LCALL   ??Subroutine61_0 & 0xFFFF
// 2561         osal_cpyExtAddr( pItem ->neighborExtAddr, _NIB. nwkCoordExtAddress );
??CrossCallReturnLabel_102:
        ; Setup parameters for call to function sAddrExtCpy
        MOV     R4,#(_NIB + 25) & 0xff
        MOV     R5,#((_NIB + 25) >> 8) & 0xff
        LCALL   ?Subroutine34 & 0xFFFF
??CrossCallReturnLabel_39:
        LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
// 2562         pItem->panId = _NIB. nwkPanId;
        MOV     DPTR,#_NIB + 33
        LCALL   ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_10:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine10 & 0xFFFF
// 2563         pItem->linkInfo.rxLqi = DEF_LQI;
??CrossCallReturnLabel_107:
        LCALL   ?Subroutine35 & 0xFFFF
??CrossCallReturnLabel_42:
        MOV     A,#-0x56
        MOVX    @DPTR,A
// 2564         pItem->linkInfo.txCounter = DEF_LINK_COUNTER;
        MOV     DPTR,#gLINK_DOWN_TRIGGER
        CLR     A
        MOVC    A,@A+DPTR
        MOV     R1,#0x0
        ADD     A,#0x1
        MOV     R0,A
        JNC     ??ZDO_JoinConfirmCB_2
        INC     R1
??ZDO_JoinConfirmCB_2:
        MOV     R2,#0x2
        MOV     R3,#0x0
        LCALL   ?S_DIV_MOD
        MOV     A,R6
        ADD     A,#0xd
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOV     A,R0
        MOVX    @DPTR,A
// 2565         pItem->linkInfo.txCost = DEF_LINK_COST;
        LCALL   ?Subroutine36 & 0xFFFF
// 2566       }
// 2567     }
??CrossCallReturnLabel_44:
        MOV     A,#0x1
        MOVX    @DPTR,A
// 2568     
// 2569     // LED on shows device joined
// 2570     HalLedSet ( HAL_LED_3, HAL_LED_MODE_ON );
??ZDO_JoinConfirmCB_1:
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x1
        MOV     R1,#0x4
        LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
// 2571     // LED off forgets HOLD_AUTO_START
// 2572     HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF);
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x0
        MOV     R1,#0x8
        LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
// 2573     if ( (devState == DEV_HOLD) )
        MOV     DPTR,#devState
        MOVX    A,@DPTR
        JNZ     ??ZDO_JoinConfirmCB_3
// 2574     {
// 2575       // Began with HOLD_AUTO_START
// 2576       devState = DEV_NWK_JOINING;
        MOV     A,#0x3
        MOVX    @DPTR,A
        SJMP    ??ZDO_JoinConfirmCB_3
// 2577     }
// 2578 
// 2579     if ( !ZG_SECURE_ENABLED )
// 2580     {
// 2581       // Notify to save info into NV
// 2582       ZDApp_NVUpdate();
// 2583     }
// 2584   }
// 2585   else
// 2586   {
// 2587 #if defined(BLINK_LEDS)
// 2588     HalLedSet ( HAL_LED_3, HAL_LED_MODE_FLASH );  // Flash LED to show failure
??ZDO_JoinConfirmCB_0:
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x4
        MOV     R1,#0x4
        LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
// 2589 #endif
// 2590   }
// 2591 
// 2592   // Pass the join confirm to higher layer if callback registered
// 2593   if (zdoCBFunc[ZDO_JOIN_CNF_CBID] != NULL )
??ZDO_JoinConfirmCB_3:
        MOV     DPTR,#zdoCBFunc + 8
        LCALL   ??Subroutine64_0 & 0xFFFF
??CrossCallReturnLabel_122:
        JZ      ??ZDO_JoinConfirmCB_4
// 2594   {
// 2595     zdoJoinCnf_t joinCnf;
// 2596 
// 2597     joinCnf.status = Status;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,?V0
        MOVX    @DPTR,A
// 2598     joinCnf.deviceAddr = _NIB.nwkDevAddress;
        MOV     DPTR,#_NIB + 20
        LCALL   ??Subroutine59_0 & 0xFFFF
??CrossCallReturnLabel_93:
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine61_0 & 0xFFFF
// 2599     joinCnf.parentAddr = _NIB.nwkCoordAddress;
??CrossCallReturnLabel_103:
        MOV     DPTR,#_NIB + 23
        LCALL   ??Subroutine59_0 & 0xFFFF
??CrossCallReturnLabel_94:
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine61_0 & 0xFFFF
// 2600 
// 2601     zdoCBFunc[ZDO_JOIN_CNF_CBID]( (void*)&joinCnf );
??CrossCallReturnLabel_104:
        ; Setup parameters for indirect call
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        MOV     DPTR,#zdoCBFunc + 8
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        LCALL   ??Subroutine63_0 & 0xFFFF
// 2602   }
??CrossCallReturnLabel_110:
        LCALL   ?CALL_IND
// 2603 
// 2604   // Notify ZDApp
// 2605   ZDApp_SendMsg( ZDAppTaskID, ZDO_NWK_JOIN_IND, sizeof(osal_event_hdr_t), (byte*)NULL );
??ZDO_JoinConfirmCB_4:
        ; Setup parameters for call to function ZDApp_SendMsg
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R3,#0x2
        MOV     R2,#0x2
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??ZDApp_SendMsg::?relay`; Banked call to: ZDApp_SendMsg
// 2606 
// 2607 }
        MOV     A,#0x5
        LJMP    ?Subroutine4 & 0xFFFF
          CFI EndBlock cfiBlock123

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine18:
          CFI Block cfiCond124 Using cfiCommon0
          CFI Function ZDO_beaconNotifyIndCB
          CFI Conditional ??CrossCallReturnLabel_8
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond125 Using cfiCommon0
          CFI (cfiCond125) Function ZDO_JoinConfirmCB
          CFI (cfiCond125) Conditional ??CrossCallReturnLabel_9
          CFI (cfiCond125) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond125) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond125) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond125) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond125) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond125) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond125) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond125) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond125) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond125) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond125) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond125) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond125) CFA_SP SP+-2
          CFI (cfiCond125) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond126 Using cfiCommon0
          CFI (cfiCond126) Function ZDO_JoinConfirmCB
          CFI (cfiCond126) Conditional ??CrossCallReturnLabel_10
          CFI (cfiCond126) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond126) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond126) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond126) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond126) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond126) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond126) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond126) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond126) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond126) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond126) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond126) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond126) CFA_SP SP+-2
          CFI (cfiCond126) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiPicker127 Using cfiCommon1
          CFI (cfiPicker127) NoFunction
          CFI (cfiPicker127) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        LCALL   ??Subroutine50_0 & 0xFFFF
??CrossCallReturnLabel_73:
        RET
          CFI EndBlock cfiCond124
          CFI EndBlock cfiCond125
          CFI EndBlock cfiCond126
          CFI EndBlock cfiPicker127
// 2608 
// 2609 /*********************************************************************
// 2610  * @fn          ZDO_PermitJoinCB
// 2611  *
// 2612  * @brief      This function is called when there is a change in the
// 2613  *             device's permit join status.
// 2614  *
// 2615  * @param       duration - the new duration
// 2616  *
// 2617  * @return      none
// 2618  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2619 void ZDO_PermitJoinCB( uint8 duration )
ZDO_PermitJoinCB:
          CFI Block cfiBlock128 Using cfiCommon0
          CFI Function ZDO_PermitJoinCB
        CODE
// 2620 {
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 1
        MOV     A,#-0x1
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 1)
        MOV     A,R1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
// 2621   // Pass the Permit Join status to higher layer if callback registered
// 2622   if (zdoCBFunc[ZDO_PERMIT_JOIN_CBID] != NULL )
        MOV     DPTR,#zdoCBFunc + 14
        LCALL   ??Subroutine64_0 & 0xFFFF
??CrossCallReturnLabel_123:
        JZ      ??ZDO_PermitJoinCB_0
// 2623   {
// 2624     zdoCBFunc[ZDO_PERMIT_JOIN_CBID]( (void*)&duration );
        ; Setup parameters for indirect call
        LCALL   ?Subroutine17 & 0xFFFF
// 2625   }
??CrossCallReturnLabel_115:
        LCALL   ?CALL_IND
// 2626 }
??ZDO_PermitJoinCB_0:
        MOV     A,#0x1
        LJMP    ?Subroutine3 & 0xFFFF
          CFI EndBlock cfiBlock128
// 2627 
// 2628 /*********************************************************************
// 2629  * @fn          ZDO_AddrChangeIndicationCB
// 2630  *
// 2631  * @brief       This function notifies the application that this
// 2632  *              device's address has changed.  Could happen in
// 2633  *              a network with stochastic addressing (PRO).
// 2634  *
// 2635  * @param       newAddr - the new address
// 2636  *
// 2637  * @return      none
// 2638  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2639 void ZDO_AddrChangeIndicationCB( uint16 newAddr )
ZDO_AddrChangeIndicationCB:
          CFI Block cfiBlock129 Using cfiCommon0
          CFI Function ZDO_AddrChangeIndicationCB
        CODE
// 2640 {
        FUNCALL ZDO_AddrChangeIndicationCB, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_AddrChangeIndicationCB, osal_msg_allocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_AddrChangeIndicationCB, osal_msg_send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_AddrChangeIndicationCB, ZDApp_AnnounceNewAddress
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     ?V0,R2
        MOV     ?V1,R3
// 2641   ZDO_AddrChangeInd_t *pZDOAddrChangeMsg;
// 2642   epList_t *pItem = epList;
        MOV     DPTR,#epList
        LCALL   ??Subroutine57_0 & 0xFFFF
// 2643 
// 2644   // Notify to save info into NV
// 2645   ZDApp_NVUpdate();
// 2646 
// 2647   // Notify the applications
// 2648   osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
??CrossCallReturnLabel_83:
        ; Setup parameters for call to function osal_set_event
        MOV     R2,#0x10
        MOV     R3,#0x0
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
        SJMP    ??CrossCallReturnLabel_84
// 2649 
// 2650   while (pItem != NULL)
// 2651   {
// 2652     if (pItem->epDesc->endPoint != ZDO_EP)
??ZDO_AddrChangeIndicationCB_0:
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        LCALL   ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_89:
        JZ      ??ZDO_AddrChangeIndicationCB_1
// 2653     {
// 2654       pZDOAddrChangeMsg = (ZDO_AddrChangeInd_t *)osal_msg_allocate( sizeof( ZDO_AddrChangeInd_t ) );
        ; Setup parameters for call to function osal_msg_allocate
        MOV     R2,#0x4
        MOV     R3,#0x0
        LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
// 2655       if (pZDOAddrChangeMsg != NULL)
        MOV     A,R2
        ORL     A,R3
        JZ      ??ZDO_AddrChangeIndicationCB_1
// 2656       {
// 2657         pZDOAddrChangeMsg->hdr.event = ZDO_ADDR_CHANGE_IND;
        MOV     DPL,R2
        MOV     DPH,R3
        MOV     A,#-0x2a
        MOVX    @DPTR,A
// 2658         pZDOAddrChangeMsg->shortAddr = newAddr;
        INC     DPTR
        INC     DPTR
        MOV     A,?V0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V1
        LCALL   ?Subroutine37 & 0xFFFF
// 2659         osal_msg_send( *(pItem->epDesc->task_id), (uint8 *)pZDOAddrChangeMsg );
// 2660       }
// 2661     }
??CrossCallReturnLabel_47:
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        LCALL   ??Subroutine63_0 & 0xFFFF
??CrossCallReturnLabel_111:
        LCALL   ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_90:
        MOV     R1,A
        LCALL   `??osal_msg_send::?relay`; Banked call to: osal_msg_send
// 2662     pItem = pItem->nextDesc;
??ZDO_AddrChangeIndicationCB_1:
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ??Subroutine57_0 & 0xFFFF
// 2663   }
??CrossCallReturnLabel_84:
        MOV     A,R6
        ORL     A,R7
        JNZ     ??ZDO_AddrChangeIndicationCB_0
// 2664 
// 2665   // Send out a device announce
// 2666   ZDApp_AnnounceNewAddress();
        ; Setup parameters for call to function ZDApp_AnnounceNewAddress
        LCALL   `??ZDApp_AnnounceNewAddress::?relay`; Banked call to: ZDApp_AnnounceNewAddress
// 2667 }
        LJMP    ??Subroutine65_0 & 0xFFFF
          CFI EndBlock cfiBlock129

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine37:
          CFI Block cfiCond130 Using cfiCommon0
          CFI Function ZDApp_ProcessOSALMsg
          CFI Conditional ??CrossCallReturnLabel_46, ??CrossCallReturnLabel_2
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 13)
          CFI Block cfiCond131 Using cfiCommon0
          CFI (cfiCond131) Function ZDO_beaconNotifyIndCB
          CFI (cfiCond131) Conditional ??CrossCallReturnLabel_46, ??CrossCallReturnLabel_3
          CFI (cfiCond131) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond131) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond131) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond131) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond131) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond131) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond131) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond131) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond131) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond131) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond131) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond131) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond131) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond131) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond131) CFA_SP SP+-4
          CFI (cfiCond131) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond132 Using cfiCommon0
          CFI (cfiCond132) Function ZDO_AddrChangeIndicationCB
          CFI (cfiCond132) Conditional ??CrossCallReturnLabel_47
          CFI (cfiCond132) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond132) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond132) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond132) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond132) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond132) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond132) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond132) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond132) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond132) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond132) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond132) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond132) CFA_SP SP+-2
          CFI (cfiCond132) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond133 Using cfiCommon0
          CFI (cfiCond133) Function ZDO_JoinIndicationCB
          CFI (cfiCond133) Conditional ??CrossCallReturnLabel_48
          CFI (cfiCond133) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond133) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond133) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond133) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond133) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond133) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond133) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond133) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond133) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond133) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond133) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond133) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond133) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond133) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond133) CFA_SP SP+-2
          CFI (cfiCond133) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker134 Using cfiCommon1
          CFI (cfiPicker134) NoFunction
          CFI (cfiPicker134) Picker
        MOVX    @DPTR,A
        ; Setup parameters for call to function ZDApp_NodeProfileSync
        ; Setup parameters for call to function osal_msg_send
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        RET
          CFI EndBlock cfiCond130
          CFI EndBlock cfiCond131
          CFI EndBlock cfiCond132
          CFI EndBlock cfiCond133
          CFI EndBlock cfiPicker134

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine21:
          CFI Block cfiCond135 Using cfiCommon0
          CFI Function ZDApp_NwkDescListProcessing
          CFI Conditional ??CrossCallReturnLabel_85
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond136 Using cfiCommon0
          CFI (cfiCond136) Function ZDApp_NwkDescListProcessing
          CFI (cfiCond136) Conditional ??CrossCallReturnLabel_86
          CFI (cfiCond136) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond136) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond136) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond136) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond136) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond136) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond136) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond136) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond136) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond136) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond136) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond136) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond136) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond136) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond136) CFA_SP SP+-2
          CFI (cfiCond136) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond137 Using cfiCommon0
          CFI (cfiCond137) Function ZDO_beaconNotifyIndCB
          CFI (cfiCond137) Conditional ??CrossCallReturnLabel_87
          CFI (cfiCond137) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond137) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond137) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond137) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond137) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond137) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond137) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond137) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond137) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond137) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond137) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond137) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond137) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond137) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond137) CFA_SP SP+-2
          CFI (cfiCond137) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker138 Using cfiCommon1
          CFI (cfiPicker138) NoFunction
          CFI (cfiPicker138) Picker
        LCALL   ?Subroutine46 & 0xFFFF
??CrossCallReturnLabel_61:
          CFI EndBlock cfiCond135
          CFI EndBlock cfiCond136
          CFI EndBlock cfiCond137
          CFI EndBlock cfiPicker138
        REQUIRE ??Subroutine57_0
        ; // Fall through to label ??Subroutine57_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine57_0:
          CFI Block cfiCond139 Using cfiCommon0
          CFI Function ZDO_beaconNotifyIndCB
          CFI Conditional ??CrossCallReturnLabel_82
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond140 Using cfiCommon0
          CFI (cfiCond140) Function ZDO_AddrChangeIndicationCB
          CFI (cfiCond140) Conditional ??CrossCallReturnLabel_83
          CFI (cfiCond140) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond140) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond140) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond140) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond140) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond140) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond140) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond140) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond140) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond140) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond140) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond140) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond140) CFA_SP SP+-2
          CFI (cfiCond140) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond141 Using cfiCommon0
          CFI (cfiCond141) Function ZDO_AddrChangeIndicationCB
          CFI (cfiCond141) Conditional ??CrossCallReturnLabel_84
          CFI (cfiCond141) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond141) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond141) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond141) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond141) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond141) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond141) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond141) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond141) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond141) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond141) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond141) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond141) CFA_SP SP+-2
          CFI (cfiCond141) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond142 Using cfiCommon0
          CFI (cfiCond142) Function ZDApp_NwkDescListProcessing
          CFI (cfiCond142) Conditional ??CrossCallReturnLabel_85
          CFI (cfiCond142) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond142) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond142) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond142) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond142) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond142) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond142) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond142) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond142) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond142) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond142) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond142) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond142) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond142) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond142) CFA_SP SP+-2
          CFI (cfiCond142) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond143 Using cfiCommon0
          CFI (cfiCond143) Function ZDApp_NwkDescListProcessing
          CFI (cfiCond143) Conditional ??CrossCallReturnLabel_86
          CFI (cfiCond143) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond143) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond143) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond143) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond143) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond143) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond143) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond143) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond143) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond143) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond143) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond143) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond143) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond143) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond143) CFA_SP SP+-2
          CFI (cfiCond143) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond144 Using cfiCommon0
          CFI (cfiCond144) Function ZDO_beaconNotifyIndCB
          CFI (cfiCond144) Conditional ??CrossCallReturnLabel_87
          CFI (cfiCond144) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond144) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond144) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond144) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond144) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond144) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond144) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond144) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond144) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond144) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond144) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond144) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond144) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond144) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond144) CFA_SP SP+-2
          CFI (cfiCond144) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker145 Using cfiCommon1
          CFI (cfiPicker145) NoFunction
          CFI (cfiPicker145) Picker
        MOVX    A,@DPTR
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
        RET
          CFI EndBlock cfiCond139
          CFI EndBlock cfiCond140
          CFI EndBlock cfiCond141
          CFI EndBlock cfiCond142
          CFI EndBlock cfiCond143
          CFI EndBlock cfiCond144
          CFI EndBlock cfiPicker145

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine16:
          CFI Block cfiCond146 Using cfiCommon0
          CFI Function ZDO_AddrChangeIndicationCB
          CFI Conditional ??CrossCallReturnLabel_89
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond147 Using cfiCommon0
          CFI (cfiCond147) Function ZDO_AddrChangeIndicationCB
          CFI (cfiCond147) Conditional ??CrossCallReturnLabel_90
          CFI (cfiCond147) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond147) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond147) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond147) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond147) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond147) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond147) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond147) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond147) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond147) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond147) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond147) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond147) CFA_SP SP+-2
          CFI (cfiCond147) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker148 Using cfiCommon1
          CFI (cfiPicker148) NoFunction
          CFI (cfiPicker148) Picker
        INC     DPTR
          CFI EndBlock cfiCond146
          CFI EndBlock cfiCond147
          CFI EndBlock cfiPicker148
        REQUIRE ??Subroutine58_0
        ; // Fall through to label ??Subroutine58_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine58_0:
          CFI Block cfiCond149 Using cfiCommon0
          CFI Function ZDApp_SecInit
          CFI Conditional ??CrossCallReturnLabel_88
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond150 Using cfiCommon0
          CFI (cfiCond150) Function ZDO_AddrChangeIndicationCB
          CFI (cfiCond150) Conditional ??CrossCallReturnLabel_89
          CFI (cfiCond150) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond150) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond150) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond150) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond150) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond150) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond150) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond150) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond150) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond150) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond150) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond150) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond150) CFA_SP SP+-2
          CFI (cfiCond150) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond151 Using cfiCommon0
          CFI (cfiCond151) Function ZDO_AddrChangeIndicationCB
          CFI (cfiCond151) Conditional ??CrossCallReturnLabel_90
          CFI (cfiCond151) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond151) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond151) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond151) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond151) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond151) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond151) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond151) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond151) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond151) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond151) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond151) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond151) CFA_SP SP+-2
          CFI (cfiCond151) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker152 Using cfiCommon1
          CFI (cfiPicker152) NoFunction
          CFI (cfiPicker152) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        MOVX    A,@DPTR
        RET
          CFI EndBlock cfiCond149
          CFI EndBlock cfiCond150
          CFI EndBlock cfiCond151
          CFI EndBlock cfiPicker152
// 2668 
// 2669 /*********************************************************************
// 2670  * @fn          ZDO_JoinIndicationCB
// 2671  *
// 2672  * @brief       This function allows the next higher layer of a
// 2673  *              coordinator to be notified of a remote join request.
// 2674  *
// 2675  * @param       ShortAddress - 16-bit address
// 2676  * @param       ExtendedAddress - IEEE (64-bit) address
// 2677  * @param       CapabilityFlags - Association Capability Flags
// 2678  * @param       type - of joining -
// 2679  *                          NWK_ASSOC_JOIN
// 2680  *                          NWK_ASSOC_REJOIN_UNSECURE
// 2681  *                          NWK_ASSOC_REJOIN_SECURE
// 2682  *
// 2683  * @return      ZStatus_t
// 2684  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2685 ZStatus_t ZDO_JoinIndicationCB(uint16 ShortAddress, uint8 *ExtendedAddress,
ZDO_JoinIndicationCB:
          CFI Block cfiBlock153 Using cfiCommon0
          CFI Function ZDO_JoinIndicationCB
        CODE
// 2686                                 uint8 CapabilityFlags, uint8 type)
// 2687 {
        FUNCALL ZDO_JoinIndicationCB, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_JoinIndicationCB, osal_get_timeoutEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_JoinIndicationCB, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV     ?V4,R2
        MOV     ?V5,R3
        MOV     A,#0xe
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R0,A
// 2688   (void)ExtendedAddress;
// 2689 #if ZDO_NV_SAVE_RFDs
// 2690   (void)CapabilityFlags;
// 2691 
// 2692 #else  // if !ZDO_NV_SAVE_RFDs
// 2693   if (CapabilityFlags & CAPINFO_DEVICETYPE_FFD)
// 2694 #endif
// 2695   {
// 2696     ZDApp_NVUpdate();  // Notify to save info into NV.
// 2697   }
// 2698 
// 2699   if (ZG_SECURE_ENABLED)  // Send notification to TC of new device.
// 2700   {
// 2701     if ( type == NWK_ASSOC_JOIN ||
// 2702          type == NWK_ASSOC_REJOIN_UNSECURE ||
// 2703          type == NWK_ASSOC_REJOIN_SECURE )
        JZ      ??ZDO_JoinIndicationCB_0
        MOV     A,#0x1
        XRL     A,R0
        JZ      ??ZDO_JoinIndicationCB_0
        MOV     A,#0x2
        XRL     A,R0
        JZ      $+5
        LJMP    ??ZDO_JoinIndicationCB_1 & 0xFFFF
// 2704     {
// 2705       uint16 timeToFire;
// 2706       ZDAppNewDevice_t *pNewDevice, *pDeviceList;
// 2707 
// 2708       pNewDevice = (ZDAppNewDevice_t *) osal_mem_alloc( sizeof(ZDAppNewDevice_t) );
??ZDO_JoinIndicationCB_0:
        ; Setup parameters for call to function osal_mem_alloc
        MOV     R2,#0x6
        MOV     R3,#0x0
        LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     R6,?V0
        MOV     R7,?V1
// 2709 
// 2710       if ( pNewDevice == NULL )
        MOV     A,R6
        ORL     A,R7
        JNZ     ??ZDO_JoinIndicationCB_2
// 2711       {
// 2712         // Memory alloc failed
// 2713         return ZMemError;
        MOV     R1,#0x10
        SJMP    ??ZDO_JoinIndicationCB_3
// 2714       }
// 2715 
// 2716       // Add the new device to the New Device List
// 2717       if ( ZDApp_NewDeviceList == NULL )
??ZDO_JoinIndicationCB_2:
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_133:
        JNZ     ??CrossCallReturnLabel_95
// 2718       {
// 2719         // The list is empty, add the first element
// 2720         ZDApp_NewDeviceList = pNewDevice;
        MOV     DPTR,#ZDApp_NewDeviceList
        SJMP    ??ZDO_JoinIndicationCB_4
// 2721       }
// 2722       else
// 2723       {
// 2724         pDeviceList = ZDApp_NewDeviceList;
// 2725 
// 2726         // Walk the list to last element
// 2727         while ( pDeviceList->next )
// 2728         {
// 2729           pDeviceList = (ZDAppNewDevice_t *) pDeviceList->next;
??ZDO_JoinIndicationCB_5:
        LCALL   ??Subroutine59_0 & 0xFFFF
// 2730         }
??CrossCallReturnLabel_95:
        MOV     DPL,R0
        MOV     DPH,R1
        LCALL   ?Subroutine24 & 0xFFFF
??CrossCallReturnLabel_21:
        MOV     A,R2
        ORL     A,R3
        MOV     DPL,R0
        MOV     DPH,R1
        JNZ     ??ZDO_JoinIndicationCB_5
// 2731 
// 2732         // Add new device at the end
// 2733         pDeviceList->next = pNewDevice;
??ZDO_JoinIndicationCB_4:
        MOV     A,R6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R7
        MOVX    @DPTR,A
// 2734       }
// 2735 
// 2736       // get the remaining time of the timer
// 2737       timeToFire = osal_get_timeoutEx( ZDAppTaskID, ZDO_NEW_DEVICE );
        ; Setup parameters for call to function osal_get_timeoutEx
        MOV     R2,#0x40
        MOV     R3,#0x0
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_get_timeoutEx::?relay`; Banked call to: osal_get_timeoutEx
        MOV     ?V0,R2
        MOV     ?V1,R3
// 2738 
// 2739       pNewDevice->next = NULL;
        MOV     DPL,R6
        MOV     DPH,R7
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        LCALL   ?Subroutine37 & 0xFFFF
// 2740       pNewDevice->shortAddr = ShortAddress;
??CrossCallReturnLabel_48:
        MOV     A,?V4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V5
        MOVX    @DPTR,A
// 2741       pNewDevice->timeDelta = ZDAPP_NEW_DEVICE_TIME - timeToFire;
        MOV     A,#0x58
        CLR     C
        SUBB    A,?V0
        MOV     R0,A
        MOV     A,#0x2
        SUBB    A,?V1
        MOV     R1,A
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ??Subroutine60_0 & 0xFFFF
// 2742 
// 2743       // Start the timer only if there is no pending timer
// 2744       if ( pNewDevice->timeDelta == ZDAPP_NEW_DEVICE_TIME )
??CrossCallReturnLabel_105:
        MOV     A,#0x58
        XRL     A,R0
        JNZ     ??ZDO_JoinIndicationCB_6
        MOV     A,#0x2
        XRL     A,R1
??ZDO_JoinIndicationCB_6:
        JNZ     ??ZDO_JoinIndicationCB_1
// 2745       {
// 2746         osal_start_timerEx( ZDAppTaskID, ZDO_NEW_DEVICE, ZDAPP_NEW_DEVICE_TIME );
        ; Setup parameters for call to function osal_start_timerEx
        MOV     DPTR,#__Constant_258
        LCALL   ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 18)
        MOV     R2,#0x40
        MOV     R3,#0x0
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
// 2747       }
// 2748     }
// 2749   }
// 2750 
// 2751   return ZSuccess;
??ZDO_JoinIndicationCB_1:
        MOV     R1,#0x0
??ZDO_JoinIndicationCB_3:
        LJMP    ?Subroutine1 & 0xFFFF
// 2752 }
          CFI EndBlock cfiBlock153

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine19:
          CFI Block cfiCond154 Using cfiCommon0
          CFI Function ZDApp_ProcessOSALMsg
          CFI Conditional ??CrossCallReturnLabel_96
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 13)
          CFI Block cfiCond155 Using cfiCommon0
          CFI (cfiCond155) Function ZDApp_NwkDescListProcessing
          CFI (cfiCond155) Conditional ??CrossCallReturnLabel_97
          CFI (cfiCond155) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond155) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond155) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond155) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond155) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond155) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond155) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond155) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond155) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond155) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond155) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond155) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond155) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond155) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond155) CFA_SP SP+-2
          CFI (cfiCond155) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond156 Using cfiCommon0
          CFI (cfiCond156) Function ZDO_beaconNotifyIndCB
          CFI (cfiCond156) Conditional ??CrossCallReturnLabel_98
          CFI (cfiCond156) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond156) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond156) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond156) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond156) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond156) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond156) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond156) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond156) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond156) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond156) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond156) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond156) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond156) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond156) CFA_SP SP+-2
          CFI (cfiCond156) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker157 Using cfiCommon1
          CFI (cfiPicker157) NoFunction
          CFI (cfiPicker157) Picker
        MOV     DPL,R6
        MOV     DPH,R7
          CFI EndBlock cfiCond154
          CFI EndBlock cfiCond155
          CFI EndBlock cfiCond156
          CFI EndBlock cfiPicker157
        REQUIRE ??Subroutine59_0
        ; // Fall through to label ??Subroutine59_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine59_0:
          CFI Block cfiCond158 Using cfiCommon0
          CFI Function ZDApp_ProcessOSALMsg
          CFI Conditional ??CrossCallReturnLabel_91
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 13)
          CFI Block cfiCond159 Using cfiCommon0
          CFI (cfiCond159) Function ZDApp_ProcessOSALMsg
          CFI (cfiCond159) Conditional ??CrossCallReturnLabel_92
          CFI (cfiCond159) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond159) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond159) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond159) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond159) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond159) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond159) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond159) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond159) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond159) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond159) CFA_SP SP+-2
          CFI (cfiCond159) CFA_XSP16 add(XSP16, 13)
          CFI Block cfiCond160 Using cfiCommon0
          CFI (cfiCond160) Function ZDO_JoinConfirmCB
          CFI (cfiCond160) Conditional ??CrossCallReturnLabel_93
          CFI (cfiCond160) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond160) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond160) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond160) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond160) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond160) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond160) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond160) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond160) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond160) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond160) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond160) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond160) CFA_SP SP+-2
          CFI (cfiCond160) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond161 Using cfiCommon0
          CFI (cfiCond161) Function ZDO_JoinConfirmCB
          CFI (cfiCond161) Conditional ??CrossCallReturnLabel_94
          CFI (cfiCond161) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond161) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond161) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond161) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond161) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond161) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond161) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond161) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond161) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond161) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond161) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond161) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond161) CFA_SP SP+-2
          CFI (cfiCond161) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond162 Using cfiCommon0
          CFI (cfiCond162) Function ZDO_JoinIndicationCB
          CFI (cfiCond162) Conditional ??CrossCallReturnLabel_95
          CFI (cfiCond162) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond162) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond162) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond162) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond162) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond162) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond162) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond162) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond162) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond162) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond162) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond162) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond162) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond162) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond162) CFA_SP SP+-2
          CFI (cfiCond162) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond163 Using cfiCommon0
          CFI (cfiCond163) Function ZDApp_ProcessOSALMsg
          CFI (cfiCond163) Conditional ??CrossCallReturnLabel_96
          CFI (cfiCond163) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond163) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond163) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond163) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond163) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond163) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond163) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond163) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond163) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond163) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond163) CFA_SP SP+-2
          CFI (cfiCond163) CFA_XSP16 add(XSP16, 13)
          CFI Block cfiCond164 Using cfiCommon0
          CFI (cfiCond164) Function ZDApp_NwkDescListProcessing
          CFI (cfiCond164) Conditional ??CrossCallReturnLabel_97
          CFI (cfiCond164) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond164) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond164) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond164) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond164) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond164) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond164) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond164) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond164) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond164) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond164) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond164) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond164) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond164) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond164) CFA_SP SP+-2
          CFI (cfiCond164) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond165 Using cfiCommon0
          CFI (cfiCond165) Function ZDO_beaconNotifyIndCB
          CFI (cfiCond165) Conditional ??CrossCallReturnLabel_98
          CFI (cfiCond165) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond165) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond165) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond165) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond165) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond165) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond165) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond165) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond165) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond165) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond165) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond165) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond165) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond165) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond165) CFA_SP SP+-2
          CFI (cfiCond165) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker166 Using cfiCommon1
          CFI (cfiPicker166) NoFunction
          CFI (cfiPicker166) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        RET
          CFI EndBlock cfiCond158
          CFI EndBlock cfiCond159
          CFI EndBlock cfiCond160
          CFI EndBlock cfiCond161
          CFI EndBlock cfiCond162
          CFI EndBlock cfiCond163
          CFI EndBlock cfiCond164
          CFI EndBlock cfiCond165
          CFI EndBlock cfiPicker166

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine10:
          CFI Block cfiCond167 Using cfiCommon0
          CFI Function ZDO_beaconNotifyIndCB
          CFI Conditional ??CrossCallReturnLabel_106
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond168 Using cfiCommon0
          CFI (cfiCond168) Function ZDO_JoinConfirmCB
          CFI (cfiCond168) Conditional ??CrossCallReturnLabel_107
          CFI (cfiCond168) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond168) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond168) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond168) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond168) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond168) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond168) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond168) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond168) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond168) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond168) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond168) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond168) CFA_SP SP+-2
          CFI (cfiCond168) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiPicker169 Using cfiCommon1
          CFI (cfiPicker169) NoFunction
          CFI (cfiPicker169) Picker
        INC     DPTR
        INC     DPTR
        INC     DPTR
          CFI EndBlock cfiCond167
          CFI EndBlock cfiCond168
          CFI EndBlock cfiPicker169
        REQUIRE ??Subroutine60_0
        ; // Fall through to label ??Subroutine60_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine60_0:
          CFI Block cfiCond170 Using cfiCommon0
          CFI Function ZDO_JoinIndicationCB
          CFI Conditional ??CrossCallReturnLabel_105
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond171 Using cfiCommon0
          CFI (cfiCond171) Function ZDO_beaconNotifyIndCB
          CFI (cfiCond171) Conditional ??CrossCallReturnLabel_106
          CFI (cfiCond171) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond171) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond171) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond171) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond171) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond171) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond171) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond171) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond171) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond171) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond171) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond171) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond171) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond171) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond171) CFA_SP SP+-2
          CFI (cfiCond171) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond172 Using cfiCommon0
          CFI (cfiCond172) Function ZDO_JoinConfirmCB
          CFI (cfiCond172) Conditional ??CrossCallReturnLabel_107
          CFI (cfiCond172) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond172) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond172) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond172) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond172) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond172) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond172) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond172) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond172) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond172) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond172) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond172) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond172) CFA_SP SP+-2
          CFI (cfiCond172) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiPicker173 Using cfiCommon1
          CFI (cfiPicker173) NoFunction
          CFI (cfiPicker173) Picker
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
          CFI EndBlock cfiCond170
          CFI EndBlock cfiCond171
          CFI EndBlock cfiCond172
          CFI EndBlock cfiPicker173
        REQUIRE ??Subroutine61_0
        ; // Fall through to label ??Subroutine61_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine61_0:
          CFI Block cfiCond174 Using cfiCommon0
          CFI Function ZDApp_ProcessOSALMsg
          CFI Conditional ??CrossCallReturnLabel_99
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 13)
          CFI Block cfiCond175 Using cfiCommon0
          CFI (cfiCond175) Function ZDApp_ProcessOSALMsg
          CFI (cfiCond175) Conditional ??CrossCallReturnLabel_100
          CFI (cfiCond175) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond175) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond175) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond175) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond175) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond175) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond175) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond175) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond175) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond175) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond175) CFA_SP SP+-2
          CFI (cfiCond175) CFA_XSP16 add(XSP16, 13)
          CFI Block cfiCond176 Using cfiCommon0
          CFI (cfiCond176) Function ZDApp_ProcessOSALMsg
          CFI (cfiCond176) Conditional ??CrossCallReturnLabel_101
          CFI (cfiCond176) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond176) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond176) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond176) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond176) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond176) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond176) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond176) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond176) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond176) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond176) CFA_SP SP+-2
          CFI (cfiCond176) CFA_XSP16 add(XSP16, 13)
          CFI Block cfiCond177 Using cfiCommon0
          CFI (cfiCond177) Function ZDO_JoinConfirmCB
          CFI (cfiCond177) Conditional ??CrossCallReturnLabel_102
          CFI (cfiCond177) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond177) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond177) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond177) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond177) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond177) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond177) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond177) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond177) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond177) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond177) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond177) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond177) CFA_SP SP+-2
          CFI (cfiCond177) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond178 Using cfiCommon0
          CFI (cfiCond178) Function ZDO_JoinConfirmCB
          CFI (cfiCond178) Conditional ??CrossCallReturnLabel_103
          CFI (cfiCond178) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond178) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond178) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond178) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond178) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond178) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond178) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond178) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond178) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond178) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond178) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond178) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond178) CFA_SP SP+-2
          CFI (cfiCond178) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond179 Using cfiCommon0
          CFI (cfiCond179) Function ZDO_JoinConfirmCB
          CFI (cfiCond179) Conditional ??CrossCallReturnLabel_104
          CFI (cfiCond179) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond179) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond179) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond179) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond179) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond179) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond179) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond179) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond179) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond179) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond179) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond179) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond179) CFA_SP SP+-2
          CFI (cfiCond179) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond180 Using cfiCommon0
          CFI (cfiCond180) Function ZDO_JoinIndicationCB
          CFI (cfiCond180) Conditional ??CrossCallReturnLabel_105
          CFI (cfiCond180) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond180) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond180) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond180) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond180) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond180) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond180) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond180) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond180) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond180) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond180) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond180) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond180) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond180) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond180) CFA_SP SP+-2
          CFI (cfiCond180) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond181 Using cfiCommon0
          CFI (cfiCond181) Function ZDO_beaconNotifyIndCB
          CFI (cfiCond181) Conditional ??CrossCallReturnLabel_106
          CFI (cfiCond181) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond181) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond181) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond181) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond181) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond181) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond181) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond181) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond181) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond181) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond181) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond181) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond181) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond181) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond181) CFA_SP SP+-2
          CFI (cfiCond181) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond182 Using cfiCommon0
          CFI (cfiCond182) Function ZDO_JoinConfirmCB
          CFI (cfiCond182) Conditional ??CrossCallReturnLabel_107
          CFI (cfiCond182) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond182) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond182) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond182) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond182) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond182) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond182) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond182) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond182) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond182) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond182) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond182) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond182) CFA_SP SP+-2
          CFI (cfiCond182) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiPicker183 Using cfiCommon1
          CFI (cfiPicker183) NoFunction
          CFI (cfiPicker183) Picker
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
        RET
          CFI EndBlock cfiCond174
          CFI EndBlock cfiCond175
          CFI EndBlock cfiCond176
          CFI EndBlock cfiCond177
          CFI EndBlock cfiCond178
          CFI EndBlock cfiCond179
          CFI EndBlock cfiCond180
          CFI EndBlock cfiCond181
          CFI EndBlock cfiCond182
          CFI EndBlock cfiPicker183
// 2753 
// 2754 /*********************************************************************
// 2755  * @fn          ZDO_ConcentratorIndicationCB
// 2756  *
// 2757  * @brief       This function allows the next higher layer of a
// 2758  *              device to be notified of existence of the concentrator.
// 2759  *
// 2760  * @param       nwkAddr - 16-bit NWK address of the concentrator
// 2761  * @param       extAddr - pointer to extended Address
// 2762  *                        NULL if not available
// 2763  * @param       pktCost - PktCost from RREQ
// 2764  *
// 2765  * @return      void
// 2766  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2767 void ZDO_ConcentratorIndicationCB( uint16 nwkAddr, uint8 *extAddr, uint8 pktCost )
ZDO_ConcentratorIndicationCB:
          CFI Block cfiBlock184 Using cfiCommon0
          CFI Function ZDO_ConcentratorIndicationCB
        CODE
// 2768 {
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 5
        MOV     A,#-0x5
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
// 2769   zdoConcentratorInd_t conInd;
// 2770 
// 2771   conInd.nwkAddr = nwkAddr;
        LCALL   ?Subroutine38 & 0xFFFF
// 2772   conInd.extAddr = extAddr;
??CrossCallReturnLabel_68:
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R5
        MOVX    @DPTR,A
// 2773   conInd.pktCost = pktCost;
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R1
        MOVX    @DPTR,A
// 2774 
// 2775   if( zdoCBFunc[ZDO_CONCENTRATOR_IND_CBID] != NULL )
        MOV     DPTR,#zdoCBFunc + 2
        LCALL   ??Subroutine64_0 & 0xFFFF
??CrossCallReturnLabel_124:
        JZ      ??ZDO_ConcentratorIndicationCB_0
// 2776   {
// 2777     zdoCBFunc[ZDO_CONCENTRATOR_IND_CBID]( (void*)&conInd );
        ; Setup parameters for indirect call
        LCALL   ?Subroutine17 & 0xFFFF
// 2778   }
??CrossCallReturnLabel_116:
        LCALL   ?CALL_IND
// 2779 }
??ZDO_ConcentratorIndicationCB_0:
          CFI EndBlock cfiBlock184
        REQUIRE ?Subroutine5
        ; // Fall through to label ?Subroutine5

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
          CFI Block cfiBlock185 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     A,#0x5
          CFI EndBlock cfiBlock185
        REQUIRE ??Subroutine62_0
        ; // Fall through to label ??Subroutine62_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine62_0:
          CFI Block cfiBlock186 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 25)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Valid
        LJMP    ??Subroutine55_0 & 0xFFFF
          CFI EndBlock cfiBlock186
// 2780 
// 2781 /*********************************************************************
// 2782  * @fn          ZDO_LeaveCnf
// 2783  *
// 2784  * @brief       This function allows the next higher layer to be
// 2785  *              notified of the results of its request for this or
// 2786  *              a child device to leave the network.
// 2787  *
// 2788  * @param       cnf - NLME_LeaveCnf_t
// 2789  *
// 2790  * @return      none
// 2791  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2792 void ZDO_LeaveCnf( NLME_LeaveCnf_t* cnf )
ZDO_LeaveCnf:
          CFI Block cfiBlock187 Using cfiCommon0
          CFI Function ZDO_LeaveCnf
        CODE
// 2793 {
        FUNCALL ZDO_LeaveCnf, NLME_GetExtAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_LeaveCnf, sAddrExtCmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_LeaveCnf, ZDApp_LeaveReset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
// 2794   // Check for this device
// 2795   if ( osal_ExtAddrEqual( cnf->extAddr,
// 2796                           NLME_GetExtAddr() ) == TRUE )
        ; Setup parameters for call to function NLME_GetExtAddr
        LCALL   `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     R4,?V0
        MOV     R5,?V1
        ; Setup parameters for call to function sAddrExtCmp
        LCALL   ?Subroutine34 & 0xFFFF
??CrossCallReturnLabel_40:
        LCALL   `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
        MOV     A,R1
        XRL     A,#0x1
        JNZ     ??ZDO_LeaveCnf_0
// 2797   {
// 2798     // Pass the leave confirm to higher layer if callback registered
// 2799     if ( ( zdoCBFunc[ZDO_LEAVE_CNF_CBID] == NULL ) ||
// 2800          ( (*zdoCBFunc[ZDO_LEAVE_CNF_CBID])( cnf ) == NULL ) )
        MOV     DPTR,#zdoCBFunc + 10
        LCALL   ??Subroutine64_0 & 0xFFFF
??CrossCallReturnLabel_125:
        JZ      ??ZDO_LeaveCnf_1
        ; Setup parameters for indirect call
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??Subroutine63_0 & 0xFFFF
??CrossCallReturnLabel_112:
        LCALL   ?CALL_IND
        MOV     ?V1,R3
        MOV     A,R2
        ORL     A,?V1
        JNZ     ??ZDO_LeaveCnf_0
// 2801     {
// 2802       // Prepare to leave with reset
// 2803       ZDApp_LeaveReset( cnf->rejoin );
??ZDO_LeaveCnf_1:
        ; Setup parameters for call to function ZDApp_LeaveReset
        LCALL   ?Subroutine28 & 0xFFFF
// 2804     }
// 2805   }
??CrossCallReturnLabel_29:
        LCALL   `??ZDApp_LeaveReset::?relay`; Banked call to: ZDApp_LeaveReset
// 2806   else if ( ZSTACK_ROUTER_BUILD )
// 2807   {
// 2808     // Remove device address(optionally descendents) from data
// 2809     ZDApp_LeaveUpdate( cnf->dstAddr,
// 2810                        cnf->extAddr,
// 2811                        cnf->removeChildren );
// 2812   }
// 2813 }
??ZDO_LeaveCnf_0:
        LJMP    ??Subroutine53_0 & 0xFFFF
          CFI EndBlock cfiBlock187

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine34:
          CFI Block cfiCond188 Using cfiCommon0
          CFI Function ZDO_JoinConfirmCB
          CFI Conditional ??CrossCallReturnLabel_39
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond189 Using cfiCommon0
          CFI (cfiCond189) Function ZDO_LeaveCnf
          CFI (cfiCond189) Conditional ??CrossCallReturnLabel_40
          CFI (cfiCond189) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond189) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond189) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond189) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond189) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond189) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond189) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond189) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond189) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond189) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond189) CFA_SP SP+-2
          CFI (cfiCond189) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond190 Using cfiCommon0
          CFI (cfiCond190) Function ZDApp_InMsgCB
          CFI (cfiCond190) Conditional ??CrossCallReturnLabel_41
          CFI (cfiCond190) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond190) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond190) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond190) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond190) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond190) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond190) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond190) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond190) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond190) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond190) CFA_SP SP+-2
          CFI (cfiCond190) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker191 Using cfiCommon1
          CFI (cfiPicker191) NoFunction
          CFI (cfiPicker191) Picker
        MOV     A,R6
        ADD     A,#0x2
        MOV     R2,A
        CLR     A
        ADDC    A,R7
        MOV     R3,A
        RET
          CFI EndBlock cfiCond188
          CFI EndBlock cfiCond189
          CFI EndBlock cfiCond190
          CFI EndBlock cfiPicker191
// 2814 
// 2815 /*********************************************************************
// 2816  * @fn          ZDO_LeaveInd
// 2817  *
// 2818  * @brief       This function allows the next higher layer of a
// 2819  *              device to be notified of a remote leave request or
// 2820  *              indication.
// 2821  *
// 2822  * @param       ind - NLME_LeaveInd_t
// 2823  *
// 2824  * @return      none
// 2825  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2826 void ZDO_LeaveInd( NLME_LeaveInd_t* ind )
ZDO_LeaveInd:
          CFI Block cfiBlock192 Using cfiCommon0
          CFI Function ZDO_LeaveInd
        CODE
// 2827 {
        FUNCALL ZDO_LeaveInd, NLME_LeaveRsp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_LeaveInd, NLME_SetPollRate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_LeaveInd, ZDApp_LeaveReset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_LeaveInd, NLME_GetCoordShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_LeaveInd, ZDApp_LeaveReset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_LeaveInd, ZDApp_LeaveUpdate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
// 2828   uint8 leave;
// 2829 
// 2830 
// 2831   // Parent is requesting the leave - NWK layer filters out illegal
// 2832   // requests
// 2833   if ( ind->request == TRUE )
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??ZDO_LeaveInd_0
// 2834   {
// 2835     // Only respond if we are not rejoining the network
// 2836     if ( ind->rejoin == FALSE )
        LCALL   ?Subroutine31 & 0xFFFF
??CrossCallReturnLabel_33:
        JNZ     ??ZDO_LeaveInd_1
// 2837     {
// 2838       // Notify network of leave
// 2839       NLME_LeaveRsp_t rsp;
// 2840       rsp.rejoin = ind->rejoin;
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
// 2841 
// 2842       if ( ZSTACK_ROUTER_BUILD )
// 2843       {
// 2844         rsp.removeChildren = ind->removeChildren;
// 2845       }
// 2846       else if ( ZSTACK_END_DEVICE_BUILD )
// 2847       {
// 2848         rsp.removeChildren = 0;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
// 2849       }
// 2850 
// 2851       NLME_LeaveRsp( &rsp );
        ; Setup parameters for call to function NLME_LeaveRsp
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??NLME_LeaveRsp::?relay`; Banked call to: NLME_LeaveRsp
// 2852     }
// 2853 
// 2854     if ( ZSTACK_END_DEVICE_BUILD )
// 2855     {
// 2856       // Stop polling and get ready to reset
// 2857       NLME_SetPollRate( 0 );
??ZDO_LeaveInd_1:
        ; Setup parameters for call to function NLME_SetPollRate
        MOV     R2,#0x0
        MOV     R3,#0x0
        LCALL   `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
// 2858     }
// 2859 
// 2860     // Prepare to leave with reset
// 2861     ZDApp_LeaveReset( ind->rejoin );
        ; Setup parameters for call to function ZDApp_LeaveReset
        SJMP    ??ZDO_LeaveInd_2
// 2862   }
// 2863   else
// 2864   {
// 2865     leave = FALSE;
// 2866 
// 2867     // Check if this device needs to leave as a child or descendent
// 2868     if ( ind->srcAddr == NLME_GetCoordShortAddr() )
??ZDO_LeaveInd_0:
        ; Setup parameters for call to function NLME_GetCoordShortAddr
        LCALL   `??NLME_GetCoordShortAddr::?relay`; Banked call to: NLME_GetCoordShortAddr
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     R0,?V0
        MOV     R1,?V1
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        XRL     A,R0
        JNZ     ??ZDO_LeaveInd_3
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R1
??ZDO_LeaveInd_3:
        JNZ     ??ZDO_LeaveInd_4
// 2869     {
// 2870       if ( ( ind->removeChildren == TRUE               ) ||
// 2871            ( ZDO_Config_Node_Descriptor.LogicalType ==
// 2872              NODETYPE_DEVICE                           )    )
        LCALL   ?Subroutine30 & 0xFFFF
??CrossCallReturnLabel_31:
        XRL     A,#0x1
        JZ      ??ZDO_LeaveInd_2
        MOV     DPTR,#ZDO_Config_Node_Descriptor
        MOVX    A,@DPTR
        ANL     A,#0x7
        XRL     A,#0x2
        JNZ     ??ZDO_LeaveInd_4
// 2873       {
// 2874         leave = TRUE;
// 2875       }
// 2876     }
// 2877     else if ( ind->removeChildren == TRUE )
// 2878     {
// 2879       // Check NWK address allocation algorithm
// 2880       //leave = RTG_ANCESTOR(nwkAddr,thisAddr);
// 2881     }
// 2882 
// 2883     if ( leave == TRUE )
// 2884     {
// 2885       // Prepare to leave with reset
// 2886       ZDApp_LeaveReset( ind->rejoin );
??ZDO_LeaveInd_2:
        ; Setup parameters for call to function ZDApp_LeaveReset
        LCALL   ?Subroutine31 & 0xFFFF
// 2887     }
??CrossCallReturnLabel_34:
        MOV     R1,A
        LCALL   `??ZDApp_LeaveReset::?relay`; Banked call to: ZDApp_LeaveReset
        SJMP    ??ZDO_LeaveInd_5
// 2888     else
// 2889     {
// 2890       // Remove device address(optionally descendents) from data
// 2891       ZDApp_LeaveUpdate( ind->srcAddr,
// 2892                          ind->extAddr,
// 2893                          ind->removeChildren );
??ZDO_LeaveInd_4:
        ; Setup parameters for call to function ZDApp_LeaveUpdate
        LCALL   ?Subroutine28 & 0xFFFF
// 2894     }
// 2895   }
??CrossCallReturnLabel_30:
        MOV     A,R6
        ADD     A,#0x2
        MOV     R4,A
        CLR     A
        ADDC    A,R7
        MOV     R5,A
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ?Subroutine24 & 0xFFFF
??CrossCallReturnLabel_22:
        LCALL   `??ZDApp_LeaveUpdate::?relay`; Banked call to: ZDApp_LeaveUpdate
// 2896 
// 2897   // Pass the leave indication to higher layer if callback registered.
// 2898   if (zdoCBFunc[ZDO_LEAVE_IND_CBID] != NULL)
??ZDO_LeaveInd_5:
        MOV     DPTR,#zdoCBFunc + 12
        LCALL   ??Subroutine64_0 & 0xFFFF
??CrossCallReturnLabel_126:
        JZ      ??ZDO_LeaveInd_6
// 2899   {
// 2900     (void)zdoCBFunc[ZDO_LEAVE_IND_CBID](ind);
        ; Setup parameters for indirect call
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??Subroutine63_0 & 0xFFFF
// 2901   }
??CrossCallReturnLabel_113:
        LCALL   ?CALL_IND
// 2902 }
??ZDO_LeaveInd_6:
        LJMP    ?Subroutine6 & 0xFFFF
          CFI EndBlock cfiBlock192

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine28:
          CFI Block cfiCond193 Using cfiCommon0
          CFI Function ZDO_LeaveCnf
          CFI Conditional ??CrossCallReturnLabel_29
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond194 Using cfiCommon0
          CFI (cfiCond194) Function ZDO_LeaveInd
          CFI (cfiCond194) Conditional ??CrossCallReturnLabel_30
          CFI (cfiCond194) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond194) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond194) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond194) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond194) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond194) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond194) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond194) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond194) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond194) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond194) CFA_SP SP+-2
          CFI (cfiCond194) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker195 Using cfiCommon1
          CFI (cfiPicker195) NoFunction
          CFI (cfiPicker195) Picker
        LCALL   ?Subroutine45 & 0xFFFF
??CrossCallReturnLabel_58:
        MOV     R1,A
        RET
          CFI EndBlock cfiCond193
          CFI EndBlock cfiCond194
          CFI EndBlock cfiPicker195

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine17:
          CFI Block cfiCond196 Using cfiCommon0
          CFI Function ZDO_NetworkDiscoveryConfirmCB
          CFI Conditional ??CrossCallReturnLabel_114
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI CFA_XSP16 add(XSP16, 3)
          CFI Block cfiCond197 Using cfiCommon0
          CFI (cfiCond197) Function ZDO_PermitJoinCB
          CFI (cfiCond197) Conditional ??CrossCallReturnLabel_115
          CFI (cfiCond197) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond197) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond197) CFA_SP SP+-7
          CFI (cfiCond197) CFA_XSP16 add(XSP16, 1)
          CFI Block cfiCond198 Using cfiCommon0
          CFI (cfiCond198) Function ZDO_ConcentratorIndicationCB
          CFI (cfiCond198) Conditional ??CrossCallReturnLabel_116
          CFI (cfiCond198) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond198) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond198) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond198) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond198) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond198) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond198) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond198) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond198) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond198) CFA_SP SP+-2
          CFI (cfiCond198) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond199 Using cfiCommon0
          CFI (cfiCond199) Function ZDO_SrcRtgIndCB
          CFI (cfiCond199) Conditional ??CrossCallReturnLabel_117
          CFI (cfiCond199) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond199) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond199) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond199) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond199) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond199) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond199) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond199) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond199) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond199) CFA_SP SP+-2
          CFI (cfiCond199) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker200 Using cfiCommon1
          CFI (cfiPicker200) NoFunction
          CFI (cfiPicker200) Picker
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
          CFI EndBlock cfiCond196
          CFI EndBlock cfiCond197
          CFI EndBlock cfiCond198
          CFI EndBlock cfiCond199
          CFI EndBlock cfiPicker200
        REQUIRE ??Subroutine63_0
        ; // Fall through to label ??Subroutine63_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine63_0:
          CFI Block cfiCond201 Using cfiCommon0
          CFI Function ZDApp_LeaveUpdate
          CFI Conditional ??CrossCallReturnLabel_108
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond202 Using cfiCommon0
          CFI (cfiCond202) Function ZDO_beaconNotifyIndCB
          CFI (cfiCond202) Conditional ??CrossCallReturnLabel_109
          CFI (cfiCond202) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond202) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond202) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond202) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond202) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond202) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond202) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond202) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond202) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond202) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond202) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond202) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond202) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond202) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond202) CFA_SP SP+-2
          CFI (cfiCond202) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond203 Using cfiCommon0
          CFI (cfiCond203) Function ZDO_JoinConfirmCB
          CFI (cfiCond203) Conditional ??CrossCallReturnLabel_110
          CFI (cfiCond203) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond203) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond203) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond203) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond203) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond203) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond203) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond203) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond203) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond203) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond203) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond203) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond203) CFA_SP SP+-2
          CFI (cfiCond203) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond204 Using cfiCommon0
          CFI (cfiCond204) Function ZDO_AddrChangeIndicationCB
          CFI (cfiCond204) Conditional ??CrossCallReturnLabel_111
          CFI (cfiCond204) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond204) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond204) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond204) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond204) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond204) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond204) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond204) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond204) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond204) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond204) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond204) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond204) CFA_SP SP+-2
          CFI (cfiCond204) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond205 Using cfiCommon0
          CFI (cfiCond205) Function ZDO_LeaveCnf
          CFI (cfiCond205) Conditional ??CrossCallReturnLabel_112
          CFI (cfiCond205) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond205) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond205) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond205) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond205) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond205) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond205) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond205) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond205) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond205) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond205) CFA_SP SP+-2
          CFI (cfiCond205) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond206 Using cfiCommon0
          CFI (cfiCond206) Function ZDO_LeaveInd
          CFI (cfiCond206) Conditional ??CrossCallReturnLabel_113
          CFI (cfiCond206) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond206) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond206) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond206) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond206) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond206) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond206) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond206) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond206) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond206) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond206) CFA_SP SP+-2
          CFI (cfiCond206) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond207 Using cfiCommon0
          CFI (cfiCond207) Function ZDO_NetworkDiscoveryConfirmCB
          CFI (cfiCond207) Conditional ??CrossCallReturnLabel_114
          CFI (cfiCond207) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond207) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond207) CFA_SP SP+-7
          CFI (cfiCond207) CFA_XSP16 add(XSP16, 3)
          CFI Block cfiCond208 Using cfiCommon0
          CFI (cfiCond208) Function ZDO_PermitJoinCB
          CFI (cfiCond208) Conditional ??CrossCallReturnLabel_115
          CFI (cfiCond208) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond208) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond208) CFA_SP SP+-7
          CFI (cfiCond208) CFA_XSP16 add(XSP16, 1)
          CFI Block cfiCond209 Using cfiCommon0
          CFI (cfiCond209) Function ZDO_ConcentratorIndicationCB
          CFI (cfiCond209) Conditional ??CrossCallReturnLabel_116
          CFI (cfiCond209) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond209) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond209) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond209) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond209) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond209) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond209) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond209) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond209) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond209) CFA_SP SP+-2
          CFI (cfiCond209) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond210 Using cfiCommon0
          CFI (cfiCond210) Function ZDO_SrcRtgIndCB
          CFI (cfiCond210) Conditional ??CrossCallReturnLabel_117
          CFI (cfiCond210) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond210) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond210) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond210) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond210) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond210) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond210) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond210) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond210) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond210) CFA_SP SP+-2
          CFI (cfiCond210) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker211 Using cfiCommon1
          CFI (cfiPicker211) NoFunction
          CFI (cfiPicker211) Picker
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        RET
          CFI EndBlock cfiCond201
          CFI EndBlock cfiCond202
          CFI EndBlock cfiCond203
          CFI EndBlock cfiCond204
          CFI EndBlock cfiCond205
          CFI EndBlock cfiCond206
          CFI EndBlock cfiCond207
          CFI EndBlock cfiCond208
          CFI EndBlock cfiCond209
          CFI EndBlock cfiCond210
          CFI EndBlock cfiPicker211

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine13:
          CFI Block cfiCond212 Using cfiCommon0
          CFI Function ZDApp_SecInit
          CFI Conditional ??CrossCallReturnLabel_131
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond213 Using cfiCommon0
          CFI (cfiCond213) Function ZDApp_SecInit
          CFI (cfiCond213) Conditional ??CrossCallReturnLabel_132
          CFI (cfiCond213) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond213) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond213) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond213) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond213) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond213) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond213) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond213) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond213) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond213) CFA_SP SP+-2
          CFI (cfiCond213) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond214 Using cfiCommon0
          CFI (cfiCond214) Function ZDO_JoinIndicationCB
          CFI (cfiCond214) Conditional ??CrossCallReturnLabel_133
          CFI (cfiCond214) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond214) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond214) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond214) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond214) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond214) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond214) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond214) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond214) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond214) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond214) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond214) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond214) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond214) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond214) CFA_SP SP+-2
          CFI (cfiCond214) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker215 Using cfiCommon1
          CFI (cfiPicker215) NoFunction
          CFI (cfiPicker215) Picker
        MOV     DPTR,#ZDApp_NewDeviceList
          CFI EndBlock cfiCond212
          CFI EndBlock cfiCond213
          CFI EndBlock cfiCond214
          CFI EndBlock cfiPicker215
        REQUIRE ??Subroutine64_0
        ; // Fall through to label ??Subroutine64_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine64_0:
          CFI Block cfiCond216 Using cfiCommon0
          CFI Function ZDApp_LeaveUpdate
          CFI Conditional ??CrossCallReturnLabel_118
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond217 Using cfiCommon0
          CFI (cfiCond217) Function ZDO_NetworkDiscoveryConfirmCB
          CFI (cfiCond217) Conditional ??CrossCallReturnLabel_119
          CFI (cfiCond217) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond217) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond217) CFA_SP SP+-7
          CFI (cfiCond217) CFA_XSP16 add(XSP16, 3)
          CFI Block cfiCond218 Using cfiCommon0
          CFI (cfiCond218) Function ZDO_beaconNotifyIndCB
          CFI (cfiCond218) Conditional ??CrossCallReturnLabel_120
          CFI (cfiCond218) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond218) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond218) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond218) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond218) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond218) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond218) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond218) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond218) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond218) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond218) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond218) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond218) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond218) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond218) CFA_SP SP+-2
          CFI (cfiCond218) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond219 Using cfiCommon0
          CFI (cfiCond219) Function ZDO_beaconNotifyIndCB
          CFI (cfiCond219) Conditional ??CrossCallReturnLabel_121
          CFI (cfiCond219) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond219) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond219) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond219) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond219) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond219) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond219) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond219) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond219) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond219) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond219) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond219) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond219) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond219) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond219) CFA_SP SP+-2
          CFI (cfiCond219) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond220 Using cfiCommon0
          CFI (cfiCond220) Function ZDO_JoinConfirmCB
          CFI (cfiCond220) Conditional ??CrossCallReturnLabel_122
          CFI (cfiCond220) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond220) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond220) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond220) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond220) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond220) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond220) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond220) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond220) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond220) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond220) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond220) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond220) CFA_SP SP+-2
          CFI (cfiCond220) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond221 Using cfiCommon0
          CFI (cfiCond221) Function ZDO_PermitJoinCB
          CFI (cfiCond221) Conditional ??CrossCallReturnLabel_123
          CFI (cfiCond221) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond221) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond221) CFA_SP SP+-7
          CFI (cfiCond221) CFA_XSP16 add(XSP16, 1)
          CFI Block cfiCond222 Using cfiCommon0
          CFI (cfiCond222) Function ZDO_ConcentratorIndicationCB
          CFI (cfiCond222) Conditional ??CrossCallReturnLabel_124
          CFI (cfiCond222) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond222) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond222) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond222) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond222) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond222) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond222) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond222) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond222) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond222) CFA_SP SP+-2
          CFI (cfiCond222) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond223 Using cfiCommon0
          CFI (cfiCond223) Function ZDO_LeaveCnf
          CFI (cfiCond223) Conditional ??CrossCallReturnLabel_125
          CFI (cfiCond223) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond223) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond223) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond223) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond223) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond223) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond223) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond223) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond223) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond223) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond223) CFA_SP SP+-2
          CFI (cfiCond223) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond224 Using cfiCommon0
          CFI (cfiCond224) Function ZDO_LeaveInd
          CFI (cfiCond224) Conditional ??CrossCallReturnLabel_126
          CFI (cfiCond224) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond224) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond224) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond224) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond224) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond224) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond224) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond224) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond224) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond224) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond224) CFA_SP SP+-2
          CFI (cfiCond224) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond225 Using cfiCommon0
          CFI (cfiCond225) Function ZDO_SrcRtgIndCB
          CFI (cfiCond225) Conditional ??CrossCallReturnLabel_127
          CFI (cfiCond225) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond225) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond225) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond225) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond225) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond225) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond225) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond225) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond225) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond225) CFA_SP SP+-2
          CFI (cfiCond225) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond226 Using cfiCommon0
          CFI (cfiCond226) Function ZDApp_InitPendingBind
          CFI (cfiCond226) Conditional ??CrossCallReturnLabel_128
          CFI (cfiCond226) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond226) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond226) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond226) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond226) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond226) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond226) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond226) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond226) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond226) CFA_SP SP+-2
          CFI (cfiCond226) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond227 Using cfiCommon0
          CFI (cfiCond227) Function ZDApp_GetEmptyPendingBindReq
          CFI (cfiCond227) Conditional ??CrossCallReturnLabel_129
          CFI (cfiCond227) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond227) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond227) CFA_SP SP+-7
          CFI Block cfiCond228 Using cfiCommon0
          CFI (cfiCond228) Function ZDApp_AgeOutPendingBindEntry
          CFI (cfiCond228) Conditional ??CrossCallReturnLabel_130
          CFI (cfiCond228) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond228) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond228) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond228) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond228) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond228) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond228) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond228) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond228) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond228) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond228) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond228) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond228) CFA_SP SP+-2
          CFI (cfiCond228) CFA_XSP16 add(XSP16, 26)
          CFI Block cfiCond229 Using cfiCommon0
          CFI (cfiCond229) Function ZDApp_SecInit
          CFI (cfiCond229) Conditional ??CrossCallReturnLabel_131
          CFI (cfiCond229) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond229) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond229) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond229) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond229) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond229) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond229) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond229) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond229) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond229) CFA_SP SP+-2
          CFI (cfiCond229) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond230 Using cfiCommon0
          CFI (cfiCond230) Function ZDApp_SecInit
          CFI (cfiCond230) Conditional ??CrossCallReturnLabel_132
          CFI (cfiCond230) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond230) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond230) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond230) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond230) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond230) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond230) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond230) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond230) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond230) CFA_SP SP+-2
          CFI (cfiCond230) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond231 Using cfiCommon0
          CFI (cfiCond231) Function ZDO_JoinIndicationCB
          CFI (cfiCond231) Conditional ??CrossCallReturnLabel_133
          CFI (cfiCond231) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond231) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond231) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond231) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond231) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond231) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond231) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond231) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond231) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond231) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond231) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond231) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond231) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond231) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond231) CFA_SP SP+-2
          CFI (cfiCond231) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker232 Using cfiCommon1
          CFI (cfiPicker232) NoFunction
          CFI (cfiPicker232) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        RET
          CFI EndBlock cfiCond216
          CFI EndBlock cfiCond217
          CFI EndBlock cfiCond218
          CFI EndBlock cfiCond219
          CFI EndBlock cfiCond220
          CFI EndBlock cfiCond221
          CFI EndBlock cfiCond222
          CFI EndBlock cfiCond223
          CFI EndBlock cfiCond224
          CFI EndBlock cfiCond225
          CFI EndBlock cfiCond226
          CFI EndBlock cfiCond227
          CFI EndBlock cfiCond228
          CFI EndBlock cfiCond229
          CFI EndBlock cfiCond230
          CFI EndBlock cfiCond231
          CFI EndBlock cfiPicker232
// 2903 
// 2904 /*********************************************************************
// 2905  * @fn          ZDO_SyncIndicationCB
// 2906  *
// 2907  * @brief       This function allows the next higher layer of a
// 2908  *              coordinator to be notified of a loss of synchronization
// 2909  *                          with the parent/child device.
// 2910  *
// 2911  * @param       type: 0 - child; 1 - parent
// 2912  *
// 2913  *
// 2914  * @return      none
// 2915  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2916 void ZDO_SyncIndicationCB( uint8 type, uint16 shortAddr )
ZDO_SyncIndicationCB:
          CFI Block cfiBlock233 Using cfiCommon0
          CFI Function ZDO_SyncIndicationCB
        CODE
// 2917 {
        FUNCALL ZDO_SyncIndicationCB, nwkNeighborInitTable
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_SyncIndicationCB, ZDApp_SendMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
// 2918   (void)shortAddr;  // Remove this line if this parameter is used.
// 2919 
// 2920   if ( ZSTACK_END_DEVICE_BUILD
// 2921     || (ZSTACK_ROUTER_BUILD && ((_NIB.CapabilityFlags & ZMAC_ASSOC_CAPINFO_FFD_TYPE) == 0)))
// 2922   {
// 2923     if ( type == 1 )
        MOV     A,#0x1
        XRL     A,R6
        JNZ     ??ZDO_SyncIndicationCB_0
// 2924     {
// 2925       // We lost contact with our parent.  Clear the neighbor Table.
// 2926       nwkNeighborInitTable();
        ; Setup parameters for call to function nwkNeighborInitTable
        LCALL   `??nwkNeighborInitTable::?relay`; Banked call to: nwkNeighborInitTable
// 2927 
// 2928       // Start the rejoin process.
// 2929       ZDApp_SendMsg( ZDAppTaskID, ZDO_NWK_JOIN_REQ, sizeof(osal_event_hdr_t), NULL );
        ; Setup parameters for call to function ZDApp_SendMsg
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R3,#0x2
        MOV     R2,#0x3
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??ZDApp_SendMsg::?relay`; Banked call to: ZDApp_SendMsg
// 2930     }
// 2931   }
// 2932 }
??ZDO_SyncIndicationCB_0:
        LJMP    ??Subroutine55_0 & 0xFFFF
          CFI EndBlock cfiBlock233
// 2933 
// 2934 /*********************************************************************
// 2935  * @fn          ZDO_ManytoOneFailureIndicationCB
// 2936  *
// 2937  * @brief       This function allows the next higher layer of a
// 2938  *              concentrator to be notified of a many-to-one route
// 2939  *              failure.
// 2940  *
// 2941  * @param       none
// 2942  *
// 2943  *
// 2944  * @return      none
// 2945  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2946 void ZDO_ManytoOneFailureIndicationCB()
ZDO_ManytoOneFailureIndicationCB:
          CFI Block cfiBlock234 Using cfiCommon0
          CFI Function ZDO_ManytoOneFailureIndicationCB
        CODE
// 2947 {
        FUNCALL ZDO_ManytoOneFailureIndicationCB, RTG_MTORouteReq
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 2948   // By default, the concentrator automatically redo many-to-one route
// 2949   // discovery to update all many-to-one routes in the network
// 2950   // If you want anything processing other than the default,
// 2951   // please replace the following code.
// 2952 
// 2953   RTG_MTORouteReq();
        ; Setup parameters for call to function RTG_MTORouteReq
        LCALL   `??RTG_MTORouteReq::?relay`; Banked call to: RTG_MTORouteReq
// 2954 }
        LJMP    ??Subroutine54_0 & 0xFFFF
          CFI EndBlock cfiBlock234
// 2955 
// 2956 /*********************************************************************
// 2957  * @fn          ZDO_PollConfirmCB
// 2958  *
// 2959  * @brief       This function allows the next higher layer to be
// 2960  *              notified of a Poll Confirm.
// 2961  *
// 2962  * @param       none
// 2963  *
// 2964  * @return      none
// 2965  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2966 void ZDO_PollConfirmCB( uint8 status )
ZDO_PollConfirmCB:
          CFI Block cfiBlock235 Using cfiCommon0
          CFI Function ZDO_PollConfirmCB
        CODE
// 2967 {
        ; Saved register size: 0
        ; Auto size: 0
// 2968   (void)status;  // Remove this line if this parameter is used.
// 2969   return;
        LJMP    ?BRET
// 2970 }
          CFI EndBlock cfiBlock235
// 2971 
// 2972 /*********************************************************************
// 2973  * @fn          ZDO_NetworkStatusCB
// 2974  *
// 2975  * @brief       Network Status Callback function
// 2976  *
// 2977  * @param       nwkDstAddr - message's destination address- used to determine
// 2978  *                           if the message was intended for this device or
// 2979  *                           a sleeping end device.
// 2980  * @param       statusCode - message's status code (ie. NWKSTAT_NONTREE_LINK_FAILURE)
// 2981  * @param       dstAddr - the destination address related to the status code
// 2982  *
// 2983  * @return      none
// 2984  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2985 void ZDO_NetworkStatusCB( uint16 nwkDstAddr, uint8 statusCode, uint16 dstAddr )
ZDO_NetworkStatusCB:
          CFI Block cfiBlock236 Using cfiCommon0
          CFI Function ZDO_NetworkStatusCB
        CODE
// 2986 {
        FUNCALL ZDO_NetworkStatusCB, NLME_GetShortAddr
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 2987   (void)dstAddr;     // Remove this line if this parameter is used.
// 2988 
// 2989   if ( (nwkDstAddr == NLME_GetShortAddr())
// 2990       && (statusCode == NWKSTAT_NONTREE_LINK_FAILURE) )
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
// 2991   {
// 2992     // Routing error for dstAddr, this is informational and a Route
// 2993     // Request should happen automatically.
// 2994   }
// 2995 }
        LJMP    ??Subroutine54_0 & 0xFFFF
          CFI EndBlock cfiBlock236
// 2996 
// 2997 /******************************************************************************
// 2998  * @fn          ZDApp_NwkWriteNVRequest (stubs AddrMgrWriteNVRequest)
// 2999  *
// 3000  * @brief       Stub routine implemented by NHLE. NHLE should call
// 3001  *              <AddrMgrWriteNV> when appropriate.
// 3002  *
// 3003  * @param       none
// 3004  *
// 3005  * @return      none
// 3006  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3007 void ZDApp_NwkWriteNVRequest( void )
AddrMgrWriteNVRequest:
          CFI Block cfiBlock237 Using cfiCommon0
          CFI Function AddrMgrWriteNVRequest
        CODE
// 3008 {
        ; Saved register size: 0
        ; Auto size: 0
// 3009 #if defined ( NV_RESTORE )
// 3010   if ( !osal_get_timeoutEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV ) )
// 3011   {
// 3012     // Trigger to save info into NV
// 3013     ZDApp_NVUpdate();
// 3014   }
// 3015 #endif
// 3016 }
        LJMP    ?BRET
          CFI EndBlock cfiBlock237
// 3017 
// 3018 /*********************************************************************
// 3019  * Call Back Functions from Security  - API
// 3020  */
// 3021 
// 3022  /*********************************************************************
// 3023  * @fn          ZDO_UpdateDeviceIndication
// 3024  *
// 3025  * @brief       This function notifies the "Trust Center" of a
// 3026  *              network when a device joins or leaves the network.
// 3027  *
// 3028  * @param       extAddr - pointer to 64 bit address of new device
// 3029  * @param       status  - 0 if a new device joined securely
// 3030  *                      - 1 if a new device joined un-securely
// 3031  *                      - 2 if a device left the network
// 3032  *
// 3033  * @return      true if newly joined device should be allowed to
// 3034  *                                              remain on network
// 3035  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3036 ZStatus_t ZDO_UpdateDeviceIndication( uint8 *extAddr, uint8 status )
ZDO_UpdateDeviceIndication:
          CFI Block cfiBlock238 Using cfiCommon0
          CFI Function ZDO_UpdateDeviceIndication
        CODE
// 3037 {
        ; Saved register size: 0
        ; Auto size: 0
// 3038   // can implement a network access policy based on the
// 3039   // IEEE address of newly joining devices...
// 3040   (void)extAddr;
// 3041   (void)status;
// 3042 
// 3043   return ZSuccess;
        MOV     R1,#0x0
        LJMP    ?BRET
// 3044 }
          CFI EndBlock cfiBlock238
// 3045 
// 3046 /*********************************************************************
// 3047  * @fn          ZDApp_InMsgCB
// 3048  *
// 3049  * @brief       This function is called to pass up any message that is
// 3050  *              not yet supported.  This allows for the developer to
// 3051  *              support features themselves..
// 3052  *
// 3053  * @return      none
// 3054  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3055 void ZDApp_InMsgCB( zdoIncomingMsg_t *inMsg )
ZDApp_InMsgCB:
          CFI Block cfiBlock239 Using cfiCommon0
          CFI Function ZDApp_InMsgCB
        CODE
// 3056 {
        FUNCALL ZDApp_InMsgCB, ZDP_GenericRsp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
// 3057   if ( inMsg->clusterID & ZDO_RESPONSE_BIT )
        LCALL   ?Subroutine47 & 0xFFFF
??CrossCallReturnLabel_62:
        INC     DPTR
        MOVX    A,@DPTR
        ANL     A,#0x80
        JNZ     ??ZDApp_InMsgCB_0
// 3058   {
// 3059     // Handle the response message
// 3060   }
// 3061   else
// 3062   {
// 3063     // Handle the request message by sending a generic "not supported".
// 3064     // Device Announce doesn't have a response.
// 3065     if ( !(inMsg->wasBroadcast) && inMsg->clusterID != Device_annce )
        LCALL   ?Subroutine30 & 0xFFFF
??CrossCallReturnLabel_32:
        JNZ     ??ZDApp_InMsgCB_0
        LCALL   ?Subroutine31 & 0xFFFF
??CrossCallReturnLabel_35:
        XRL     A,#0x13
        JNZ     ??ZDApp_InMsgCB_1
        INC     DPTR
        MOVX    A,@DPTR
??ZDApp_InMsgCB_1:
        JZ      ??ZDApp_InMsgCB_0
// 3066     {
// 3067       ZDP_GenericRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZDP_NOT_SUPPORTED, 0,
// 3068                       (uint16)(inMsg->clusterID | ZDO_RESPONSE_BIT), inMsg->SecurityUse );
        ; Setup parameters for call to function ZDP_GenericRsp
        LCALL   ?Subroutine31 & 0xFFFF
// 3069     }
// 3070   }
??CrossCallReturnLabel_36:
        MOV     ?V0,A
        INC     DPTR
        MOVX    A,@DPTR
        ORL     A,#0x80
        MOV     ?V1,A
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 12)
        CLR     A
        MOV     ?V0,A
        MOV     ?V1,A
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        LCALL   ?Subroutine36 & 0xFFFF
??CrossCallReturnLabel_45:
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     R4,#-0x7c
        LCALL   ?Subroutine34 & 0xFFFF
??CrossCallReturnLabel_41:
        LCALL   ?Subroutine35 & 0xFFFF
??CrossCallReturnLabel_43:
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??ZDP_GenericRsp::?relay`; Banked call to: ZDP_GenericRsp
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
// 3071 }
??ZDApp_InMsgCB_0:
        LJMP    ??Subroutine53_0 & 0xFFFF
          CFI EndBlock cfiBlock239

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine36:
          CFI Block cfiCond240 Using cfiCommon0
          CFI Function ZDO_JoinConfirmCB
          CFI Conditional ??CrossCallReturnLabel_44
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond241 Using cfiCommon0
          CFI (cfiCond241) Function ZDApp_InMsgCB
          CFI (cfiCond241) Conditional ??CrossCallReturnLabel_45
          CFI (cfiCond241) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond241) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond241) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond241) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond241) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond241) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond241) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond241) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond241) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond241) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond241) CFA_SP SP+-2
          CFI (cfiCond241) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker242 Using cfiCommon1
          CFI (cfiPicker242) NoFunction
          CFI (cfiPicker242) Picker
        MOV     A,R6
        ADD     A,#0xe
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        RET
          CFI EndBlock cfiCond240
          CFI EndBlock cfiCond241
          CFI EndBlock cfiPicker242

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine35:
          CFI Block cfiCond243 Using cfiCommon0
          CFI Function ZDO_JoinConfirmCB
          CFI Conditional ??CrossCallReturnLabel_42
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond244 Using cfiCommon0
          CFI (cfiCond244) Function ZDApp_InMsgCB
          CFI (cfiCond244) Conditional ??CrossCallReturnLabel_43
          CFI (cfiCond244) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond244) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond244) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond244) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond244) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond244) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond244) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond244) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond244) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond244) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond244) CFA_SP SP+-2
          CFI (cfiCond244) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker245 Using cfiCommon1
          CFI (cfiPicker245) NoFunction
          CFI (cfiPicker245) Picker
        MOV     A,R6
        ADD     A,#0xf
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        RET
          CFI EndBlock cfiCond243
          CFI EndBlock cfiCond244
          CFI EndBlock cfiPicker245

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine31:
          CFI Block cfiCond246 Using cfiCommon0
          CFI Function ZDO_LeaveInd
          CFI Conditional ??CrossCallReturnLabel_33
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond247 Using cfiCommon0
          CFI (cfiCond247) Function ZDO_LeaveInd
          CFI (cfiCond247) Conditional ??CrossCallReturnLabel_34
          CFI (cfiCond247) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond247) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond247) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond247) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond247) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond247) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond247) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond247) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond247) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond247) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond247) CFA_SP SP+-2
          CFI (cfiCond247) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond248 Using cfiCommon0
          CFI (cfiCond248) Function ZDApp_InMsgCB
          CFI (cfiCond248) Conditional ??CrossCallReturnLabel_35
          CFI (cfiCond248) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond248) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond248) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond248) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond248) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond248) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond248) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond248) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond248) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond248) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond248) CFA_SP SP+-2
          CFI (cfiCond248) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond249 Using cfiCommon0
          CFI (cfiCond249) Function ZDApp_InMsgCB
          CFI (cfiCond249) Conditional ??CrossCallReturnLabel_36
          CFI (cfiCond249) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond249) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond249) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond249) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond249) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond249) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond249) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond249) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond249) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond249) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond249) CFA_SP SP+-2
          CFI (cfiCond249) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker250 Using cfiCommon1
          CFI (cfiPicker250) NoFunction
          CFI (cfiPicker250) Picker
        LCALL   ?Subroutine47 & 0xFFFF
??CrossCallReturnLabel_63:
        MOVX    A,@DPTR
        RET
          CFI EndBlock cfiCond246
          CFI EndBlock cfiCond247
          CFI EndBlock cfiCond248
          CFI EndBlock cfiCond249
          CFI EndBlock cfiPicker250

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine47:
          CFI Block cfiCond251 Using cfiCommon0
          CFI Function ZDApp_InMsgCB
          CFI Conditional ??CrossCallReturnLabel_62
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond252 Using cfiCommon0
          CFI (cfiCond252) Function ZDO_LeaveInd
          CFI (cfiCond252) Conditional ??CrossCallReturnLabel_63, ??CrossCallReturnLabel_33
          CFI (cfiCond252) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond252) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond252) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond252) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond252) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond252) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond252) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond252) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond252) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond252) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond252) CFA_SP SP+-4
          CFI (cfiCond252) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond253 Using cfiCommon0
          CFI (cfiCond253) Function ZDO_LeaveInd
          CFI (cfiCond253) Conditional ??CrossCallReturnLabel_63, ??CrossCallReturnLabel_34
          CFI (cfiCond253) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond253) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond253) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond253) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond253) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond253) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond253) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond253) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond253) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond253) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond253) CFA_SP SP+-4
          CFI (cfiCond253) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond254 Using cfiCommon0
          CFI (cfiCond254) Function ZDApp_InMsgCB
          CFI (cfiCond254) Conditional ??CrossCallReturnLabel_63, ??CrossCallReturnLabel_35
          CFI (cfiCond254) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond254) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond254) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond254) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond254) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond254) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond254) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond254) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond254) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond254) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond254) CFA_SP SP+-4
          CFI (cfiCond254) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond255 Using cfiCommon0
          CFI (cfiCond255) Function ZDApp_InMsgCB
          CFI (cfiCond255) Conditional ??CrossCallReturnLabel_63, ??CrossCallReturnLabel_36
          CFI (cfiCond255) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond255) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond255) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond255) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond255) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond255) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond255) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond255) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond255) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond255) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond255) CFA_SP SP+-4
          CFI (cfiCond255) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker256 Using cfiCommon1
          CFI (cfiPicker256) NoFunction
          CFI (cfiPicker256) Picker
        MOV     A,R6
        ADD     A,#0xc
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        RET
          CFI EndBlock cfiCond251
          CFI EndBlock cfiCond252
          CFI EndBlock cfiCond253
          CFI EndBlock cfiCond254
          CFI EndBlock cfiCond255
          CFI EndBlock cfiPicker256

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine30:
          CFI Block cfiCond257 Using cfiCommon0
          CFI Function ZDO_LeaveInd
          CFI Conditional ??CrossCallReturnLabel_31
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond258 Using cfiCommon0
          CFI (cfiCond258) Function ZDApp_InMsgCB
          CFI (cfiCond258) Conditional ??CrossCallReturnLabel_32
          CFI (cfiCond258) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond258) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond258) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond258) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond258) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond258) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond258) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond258) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond258) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond258) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond258) CFA_SP SP+-2
          CFI (cfiCond258) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker259 Using cfiCommon1
          CFI (cfiPicker259) NoFunction
          CFI (cfiPicker259) Picker
        LCALL   ?Subroutine45 & 0xFFFF
??CrossCallReturnLabel_59:
        RET
          CFI EndBlock cfiCond257
          CFI EndBlock cfiCond258
          CFI EndBlock cfiPicker259

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine45:
          CFI Block cfiCond260 Using cfiCommon0
          CFI Function ZDO_LeaveCnf
          CFI Conditional ??CrossCallReturnLabel_58, ??CrossCallReturnLabel_29
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond261 Using cfiCommon0
          CFI (cfiCond261) Function ZDO_LeaveInd
          CFI (cfiCond261) Conditional ??CrossCallReturnLabel_58, ??CrossCallReturnLabel_30
          CFI (cfiCond261) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond261) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond261) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond261) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond261) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond261) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond261) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond261) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond261) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond261) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond261) CFA_SP SP+-4
          CFI (cfiCond261) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond262 Using cfiCommon0
          CFI (cfiCond262) Function ZDO_LeaveInd
          CFI (cfiCond262) Conditional ??CrossCallReturnLabel_59, ??CrossCallReturnLabel_31
          CFI (cfiCond262) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond262) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond262) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond262) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond262) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond262) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond262) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond262) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond262) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond262) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond262) CFA_SP SP+-4
          CFI (cfiCond262) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond263 Using cfiCommon0
          CFI (cfiCond263) Function ZDApp_InMsgCB
          CFI (cfiCond263) Conditional ??CrossCallReturnLabel_59, ??CrossCallReturnLabel_32
          CFI (cfiCond263) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond263) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond263) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond263) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond263) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond263) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond263) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond263) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond263) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond263) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond263) CFA_SP SP+-4
          CFI (cfiCond263) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker264 Using cfiCommon1
          CFI (cfiPicker264) NoFunction
          CFI (cfiPicker264) Picker
        MOV     A,R6
        ADD     A,#0xb
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOVX    A,@DPTR
        RET
          CFI EndBlock cfiCond260
          CFI EndBlock cfiCond261
          CFI EndBlock cfiCond262
          CFI EndBlock cfiCond263
          CFI EndBlock cfiPicker264
// 3072 
// 3073 
// 3074 /*********************************************************************
// 3075  * @fn      ZDApp_ChangeMatchDescRespPermission()
// 3076  *
// 3077  * @brief   Changes the Match Descriptor Response permission.
// 3078  *
// 3079  * @param   endpoint - endpoint to allow responses
// 3080  * @param   action - true to allow responses, false to not
// 3081  *
// 3082  * @return  none
// 3083  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3084 void ZDApp_ChangeMatchDescRespPermission( uint8 endpoint, uint8 action )
ZDApp_ChangeMatchDescRespPermission:
          CFI Block cfiBlock265 Using cfiCommon0
          CFI Function ZDApp_ChangeMatchDescRespPermission
        CODE
// 3085 {
        FUNCALL ZDApp_ChangeMatchDescRespPermission, afSetMatch
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
// 3086   // Store the action
// 3087   afSetMatch( endpoint, action );
        ; Setup parameters for call to function afSetMatch
        LCALL   `??afSetMatch::?relay`; Banked call to: afSetMatch
// 3088 }
        LJMP    ??Subroutine55_0 & 0xFFFF
          CFI EndBlock cfiBlock265
// 3089 
// 3090 /*********************************************************************
// 3091  * @fn      ZDApp_NetworkInit()
// 3092  *
// 3093  * @brief   Used to start the network joining process
// 3094  *
// 3095  * @param   delay - mSec delay to wait before starting
// 3096  *
// 3097  * @return  none
// 3098  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3099 void ZDApp_NetworkInit( uint16 delay )
ZDApp_NetworkInit:
          CFI Block cfiBlock266 Using cfiCommon0
          CFI Function ZDApp_NetworkInit
        CODE
// 3100 {
        FUNCALL ZDApp_NetworkInit, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_NetworkInit, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
// 3101   if ( delay )
        MOV     A,R2
        ORL     A,R3
        JZ      ??ZDApp_NetworkInit_0
// 3102   {
// 3103     // Wait awhile before starting the device
// 3104     osal_start_timerEx( ZDAppTaskID, ZDO_NETWORK_INIT, delay );
        ; Setup parameters for call to function osal_start_timerEx
        MOV     ?V0,R2
        MOV     ?V1,R3
        CLR     A
        MOV     ?V2,A
        MOV     ?V3,A
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_FOUR
          CFI CFA_XSP16 add(XSP16, 16)
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
        SJMP    ??ZDApp_NetworkInit_1
// 3105   }
// 3106   else
// 3107   {
// 3108     osal_set_event( ZDAppTaskID, ZDO_NETWORK_INIT );
??ZDApp_NetworkInit_0:
        ; Setup parameters for call to function osal_set_event
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
// 3109   }
// 3110 }
??ZDApp_NetworkInit_1:
        LJMP    ??Subroutine65_0 & 0xFFFF
          CFI EndBlock cfiBlock266
// 3111 
// 3112 /*********************************************************************
// 3113  * @fn      ZDApp_NwkStateUpdateCB()
// 3114  *
// 3115  * @brief   This function notifies that this device's network
// 3116  *          state info has been changed.
// 3117  *
// 3118  * @param   none
// 3119  *
// 3120  * @return  none
// 3121  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3122 void ZDApp_NwkStateUpdateCB( void )
ZDApp_NwkStateUpdateCB:
          CFI Block cfiBlock267 Using cfiCommon0
          CFI Function ZDApp_NwkStateUpdateCB
        CODE
// 3123 {
        FUNCALL ZDApp_NwkStateUpdateCB, osal_get_timeoutEx
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 3124   // Notify to save info into NV
// 3125   if ( !osal_get_timeoutEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV ) )
        ; Setup parameters for call to function osal_get_timeoutEx
        MOV     R2,#0x0
        MOV     R3,#0x1
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_get_timeoutEx::?relay`; Banked call to: osal_get_timeoutEx
// 3126   {
// 3127     // Trigger to save info into NV
// 3128     ZDApp_NVUpdate();
// 3129   }
// 3130 }
        LJMP    ??Subroutine54_0 & 0xFFFF
          CFI EndBlock cfiBlock267
// 3131 
// 3132 /*********************************************************************
// 3133  * @fn      ZDApp_NodeProfileSync()
// 3134  *
// 3135  * @brief   Sync node with stack profile.
// 3136  *
// 3137  * @param   stackProfile - stack profile of the network to join
// 3138  *
// 3139  * @return  none
// 3140  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3141 void ZDApp_NodeProfileSync( uint8 stackProfile )
ZDApp_NodeProfileSync:
          CFI Block cfiBlock268 Using cfiCommon0
          CFI Function ZDApp_NodeProfileSync
        CODE
// 3142 {
        FUNCALL ZDApp_NodeProfileSync, NLME_SetBroadcastFilter
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
// 3143   if ( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_DEVICETYPE_FFD  )
        MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.1
        JNC     ??ZDApp_NodeProfileSync_0
// 3144   {
// 3145     if ( stackProfile != zgStackProfile )
        MOV     DPTR,#zgStackProfile
        MOVX    A,@DPTR
        XRL     A,R6
        JZ      ??ZDApp_NodeProfileSync_0
// 3146     {
// 3147       ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_DEVICE;
        MOV     DPTR,#ZDO_Config_Node_Descriptor
        MOVX    A,@DPTR
        ANL     A,#0xf8
        MOVX    @DPTR,A
        ORL     A,#0x2
        MOVX    @DPTR,A
// 3148       ZDO_Config_Node_Descriptor.CapabilityFlags = CAPINFO_DEVICETYPE_RFD | CAPINFO_POWER_AC | CAPINFO_RCVR_ON_IDLE;
        MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
        MOV     A,#0xc
        MOVX    @DPTR,A
// 3149       NLME_SetBroadcastFilter( ZDO_Config_Node_Descriptor.CapabilityFlags );
        ; Setup parameters for call to function NLME_SetBroadcastFilter
        MOV     R1,A
        LCALL   `??NLME_SetBroadcastFilter::?relay`; Banked call to: NLME_SetBroadcastFilter
// 3150     }
// 3151   }
// 3152 }
??ZDApp_NodeProfileSync_0:
        LJMP    ??Subroutine55_0 & 0xFFFF
          CFI EndBlock cfiBlock268
// 3153 
// 3154 /*********************************************************************
// 3155  * @fn      ZDApp_StartJoiningCycle()
// 3156  *
// 3157  * @brief   Starts the joining cycle of a device.  This will only
// 3158  *          continue an already started (or stopped) joining cycle.
// 3159  *
// 3160  * @param   none
// 3161  *
// 3162  * @return  TRUE if joining stopped, FALSE if joining or rejoining
// 3163  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3164 uint8 ZDApp_StartJoiningCycle( void )
ZDApp_StartJoiningCycle:
          CFI Block cfiBlock269 Using cfiCommon0
          CFI Function ZDApp_StartJoiningCycle
        CODE
// 3165 {
        FUNCALL ZDApp_StartJoiningCycle, ZDApp_NetworkInit
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 3166   if ( devState == DEV_INIT || devState == DEV_NWK_DISC )
        MOV     DPTR,#devState
        MOVX    A,@DPTR
        XRL     A,#0x1
        JZ      ??ZDApp_StartJoiningCycle_0
        MOVX    A,@DPTR
        XRL     A,#0x2
        JNZ     ??ZDApp_StartJoiningCycle_1
// 3167   {
// 3168     continueJoining = TRUE;
??ZDApp_StartJoiningCycle_0:
        MOV     DPTR,#continueJoining
        MOV     A,#0x1
        MOVX    @DPTR,A
// 3169     ZDApp_NetworkInit( 0 );
        ; Setup parameters for call to function ZDApp_NetworkInit
        MOV     R2,#0x0
        MOV     R3,#0x0
        LCALL   `??ZDApp_NetworkInit::?relay`; Banked call to: ZDApp_NetworkInit
// 3170 
// 3171     return ( TRUE );
        MOV     R1,#0x1
        SJMP    ??ZDApp_StartJoiningCycle_2
// 3172   }
// 3173   else
// 3174     return ( FALSE );
??ZDApp_StartJoiningCycle_1:
        MOV     R1,#0x0
??ZDApp_StartJoiningCycle_2:
        LJMP    ??Subroutine54_0 & 0xFFFF
// 3175 }
          CFI EndBlock cfiBlock269
// 3176 
// 3177 /*********************************************************************
// 3178  * @fn      ZDApp_StopJoiningCycle()
// 3179  *
// 3180  * @brief   Stops the joining or rejoining process of a device.
// 3181  *
// 3182  * @param   none
// 3183  *
// 3184  * @return  TRUE if joining stopped, FALSE if joining or rejoining
// 3185  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3186 uint8 ZDApp_StopJoiningCycle( void )
ZDApp_StopJoiningCycle:
          CFI Block cfiBlock270 Using cfiCommon0
          CFI Function ZDApp_StopJoiningCycle
        CODE
// 3187 {
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 3188   if ( devState == DEV_INIT || devState == DEV_NWK_DISC )
        MOV     DPTR,#devState
        MOVX    A,@DPTR
        XRL     A,#0x1
        JZ      ??ZDApp_StopJoiningCycle_0
        MOVX    A,@DPTR
        XRL     A,#0x2
        JNZ     ??ZDApp_StopJoiningCycle_1
// 3189   {
// 3190     continueJoining = FALSE;
??ZDApp_StopJoiningCycle_0:
        MOV     DPTR,#continueJoining
        CLR     A
        MOVX    @DPTR,A
// 3191     return ( TRUE );
        MOV     R1,#0x1
        SJMP    ??ZDApp_StopJoiningCycle_2
// 3192   }
// 3193   else
// 3194     return ( FALSE );
??ZDApp_StopJoiningCycle_1:
        MOV     R1,#0x0
??ZDApp_StopJoiningCycle_2:
        LJMP    ??Subroutine54_0 & 0xFFFF
// 3195 }
          CFI EndBlock cfiBlock270
// 3196 
// 3197 /*********************************************************************
// 3198  * @fn      ZDApp_AnnounceNewAddress()
// 3199  *
// 3200  * @brief   Send Device Announce and hold all transmissions for
// 3201  *          new address timeout.
// 3202  *
// 3203  * @param   none
// 3204  *
// 3205  * @return  none
// 3206  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3207 void ZDApp_AnnounceNewAddress( void )
ZDApp_AnnounceNewAddress:
          CFI Block cfiBlock271 Using cfiCommon0
          CFI Function ZDApp_AnnounceNewAddress
        CODE
// 3208 {
        FUNCALL ZDApp_AnnounceNewAddress, APSME_HoldDataRequests
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_AnnounceNewAddress, NLME_GetExtAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_AnnounceNewAddress, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_AnnounceNewAddress, ZDP_DeviceAnnce
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_AnnounceNewAddress, APSME_HoldDataRequests
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
// 3209 #if defined ( ZIGBEE_NWK_UNIQUE_ADDR_CHECK )
// 3210   // Turn off data request hold
// 3211   APSME_HoldDataRequests( 0 );
        ; Setup parameters for call to function APSME_HoldDataRequests
        MOV     R2,#0x0
        MOV     R3,#0x0
        LCALL   `??APSME_HoldDataRequests::?relay`; Banked call to: APSME_HoldDataRequests
// 3212 #endif
// 3213 
// 3214   ZDP_DeviceAnnce( NLME_GetShortAddr(), NLME_GetExtAddr(),
// 3215                      ZDO_Config_Node_Descriptor.CapabilityFlags, 0 );
        ; Setup parameters for call to function NLME_GetExtAddr
        LCALL   `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     R6,?V0
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
        ; Setup parameters for call to function ZDP_DeviceAnnce
        MOV     ?V0,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 11)
        MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R6
        MOV     R4,A
        MOV     R5,?V1
        LCALL   `??ZDP_DeviceAnnce::?relay`; Banked call to: ZDP_DeviceAnnce
        MOV     A,#0x1
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
// 3216 
// 3217 #if defined ( ZIGBEE_NWK_UNIQUE_ADDR_CHECK )
// 3218   // Setup the timeout
// 3219   APSME_HoldDataRequests( ZDAPP_HOLD_DATA_REQUESTS_TIMEOUT );
        ; Setup parameters for call to function APSME_HoldDataRequests
        MOV     R2,#0x0
        MOV     R3,#0x0
        LCALL   `??APSME_HoldDataRequests::?relay`; Banked call to: APSME_HoldDataRequests
// 3220 #endif
// 3221 }
        LJMP    ??Subroutine53_0 & 0xFFFF
          CFI EndBlock cfiBlock271
// 3222 
// 3223 /*********************************************************************
// 3224  * @fn          ZDApp_NVUpdate
// 3225  *
// 3226  * @brief       Set the NV Update Timer.
// 3227  *
// 3228  * @param       none
// 3229  *
// 3230  * @return      none
// 3231  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3232 void ZDApp_NVUpdate( void )
ZDApp_NVUpdate:
          CFI Block cfiBlock272 Using cfiCommon0
          CFI Function ZDApp_NVUpdate
        CODE
// 3233 {
        ; Saved register size: 0
        ; Auto size: 0
// 3234 #if defined ( NV_RESTORE )
// 3235   osal_start_timerEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV, ZDAPP_UPDATE_NWK_NV_TIME );
// 3236 #endif
// 3237 }
        LJMP    ?BRET
          CFI EndBlock cfiBlock272
// 3238 
// 3239 /*********************************************************************
// 3240  * @fn      ZDApp_CoordStartPANIDConflictCB()
// 3241  *
// 3242  * @brief   Returns a PAN ID for the network layer to use during
// 3243  *          a coordinator start and there is another network with
// 3244  *          the intended PANID.
// 3245  *
// 3246  * @param   panid - the intended PAN ID
// 3247  *
// 3248  * @return  PANID to try
// 3249  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3250 uint16 ZDApp_CoordStartPANIDConflictCB( uint16 panid )
ZDApp_CoordStartPANIDConflictCB:
          CFI Block cfiBlock273 Using cfiCommon0
          CFI Function ZDApp_CoordStartPANIDConflictCB
        CODE
// 3251 {
        ; Saved register size: 0
        ; Auto size: 0
// 3252   return ( panid + 1 );
        MOV     A,R2
        ADD     A,#0x1
        INC     R2
        JNC     ??ZDApp_CoordStartPANIDConflictCB_0
        INC     R3
??ZDApp_CoordStartPANIDConflictCB_0:
        LJMP    ?BRET
// 3253 }
          CFI EndBlock cfiBlock273
// 3254 
// 3255 /*********************************************************************
// 3256  * @fn          ZDO_SrcRtgIndCB
// 3257  *
// 3258  * @brief       This function notifies the ZDO available src route record received.
// 3259  *
// 3260  * @param       srcAddr - source address of the source route
// 3261  * @param       relayCnt - number of devices in the relay list
// 3262  * @param       relayList - relay list of the source route
// 3263  *
// 3264  * @return      none
// 3265  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3266 void ZDO_SrcRtgIndCB (uint16 srcAddr, uint8 relayCnt, uint16* pRelayList )
ZDO_SrcRtgIndCB:
          CFI Block cfiBlock274 Using cfiCommon0
          CFI Function ZDO_SrcRtgIndCB
        CODE
// 3267 {
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 5
        MOV     A,#-0x5
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
// 3268   zdoSrcRtg_t srcRtg;
// 3269 
// 3270   srcRtg.srcAddr = srcAddr;
        LCALL   ?Subroutine38 & 0xFFFF
// 3271   srcRtg.relayCnt = relayCnt;
??CrossCallReturnLabel_69:
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R1
        MOVX    @DPTR,A
// 3272   srcRtg.pRelayList = pRelayList;
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R5
        MOVX    @DPTR,A
// 3273 
// 3274   if( zdoCBFunc[ZDO_SRC_RTG_IND_CBID] != NULL )
        MOV     DPTR,#zdoCBFunc
        LCALL   ??Subroutine64_0 & 0xFFFF
??CrossCallReturnLabel_127:
        JZ      ??ZDO_SrcRtgIndCB_0
// 3275   {
// 3276     zdoCBFunc[ZDO_SRC_RTG_IND_CBID]( (void*)&srcRtg );
        ; Setup parameters for indirect call
        LCALL   ?Subroutine17 & 0xFFFF
// 3277   }
??CrossCallReturnLabel_117:
        LCALL   ?CALL_IND
// 3278 }
??ZDO_SrcRtgIndCB_0:
        LJMP    ?Subroutine5 & 0xFFFF
          CFI EndBlock cfiBlock274
// 3279 
// 3280 /*********************************************************************
// 3281  * @fn          ZDApp_InitZdoCBFunc
// 3282  *
// 3283  * @brief       Call this function to initialize zdoCBFunc[]
// 3284  *
// 3285  * @param       none
// 3286  *
// 3287  * @return      none
// 3288  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3289 void ZDApp_InitZdoCBFunc( void )
ZDApp_InitZdoCBFunc:
          CFI Block cfiBlock275 Using cfiCommon0
          CFI Function ZDApp_InitZdoCBFunc
        CODE
// 3290 {
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 3291   uint8 i;
// 3292 
// 3293   for ( i=0; i< MAX_ZDO_CB_FUNC; i++ )
        MOV     R2,#0x0
// 3294   {
// 3295     zdoCBFunc[i] = NULL;
??ZDApp_InitZdoCBFunc_0:
        MOV     A,R2
        ADD     A,0xE0 /* A   */
        LCALL   ?Subroutine43 & 0xFFFF
// 3296   }
??CrossCallReturnLabel_54:
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        INC     R2
        MOV     A,R2
        CLR     C
        SUBB    A,#0x9
        JC      ??ZDApp_InitZdoCBFunc_0
// 3297 }
        LJMP    ??Subroutine54_0 & 0xFFFF
          CFI EndBlock cfiBlock275
// 3298 
// 3299 /*********************************************************************
// 3300  * @fn          ZDO_RegisterForZdoCB
// 3301  *
// 3302  * @brief       Call this function to register the higher layer (for
// 3303  *              example, the Application layer or MT layer) with ZDO
// 3304  *              callbacks to get notified of some ZDO indication like
// 3305  *              existence of a concentrator or receipt of a source
// 3306  *              route record.
// 3307  *
// 3308  * @param       indID - ZDO Indication ID
// 3309  * @param       pFn   - Callback function pointer
// 3310  *
// 3311  * @return      ZSuccess - successful, ZInvalidParameter if not
// 3312  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3313 ZStatus_t ZDO_RegisterForZdoCB( uint8 indID, pfnZdoCb pFn )
ZDO_RegisterForZdoCB:
          CFI Block cfiBlock276 Using cfiCommon0
          CFI Function ZDO_RegisterForZdoCB
        CODE
// 3314 {
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
        MOV     A,R1
        MOV     R4,A
// 3315   // Check the range of the indication ID
// 3316   if ( indID < MAX_ZDO_CB_FUNC )
        CLR     C
        SUBB    A,#0x9
        JNC     ??ZDO_RegisterForZdoCB_0
// 3317   {
// 3318     zdoCBFunc[indID] = pFn;
        MOV     A,R4
        LCALL   ?Subroutine26 & 0xFFFF
??CrossCallReturnLabel_25:
        LCALL   ??Subroutine48_0 & 0xFFFF
// 3319     return ZSuccess;
??CrossCallReturnLabel_65:
        MOV     R1,#0x0
        SJMP    ??ZDO_RegisterForZdoCB_1
// 3320   }
// 3321 
// 3322   return ZInvalidParameter;
??ZDO_RegisterForZdoCB_0:
        MOV     R1,#0x2
??ZDO_RegisterForZdoCB_1:
        LJMP    ??Subroutine54_0 & 0xFFFF
// 3323 }
          CFI EndBlock cfiBlock276
// 3324 
// 3325 /*********************************************************************
// 3326  * @fn          ZDO_DeregisterForZdoCB
// 3327  *
// 3328  * @brief       Call this function to de-register the higher layer (for
// 3329  *              example, the Application layer or MT layer) with ZDO
// 3330  *              callbacks to get notified of some ZDO indication like
// 3331  *              existence of a concentrator or receipt of a source
// 3332  *              route record.
// 3333  *
// 3334  * @param       indID - ZDO Indication ID
// 3335  *
// 3336  * @return      ZSuccess - successful, ZInvalidParameter if not
// 3337  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3338 ZStatus_t ZDO_DeregisterForZdoCB( uint8 indID )
ZDO_DeregisterForZdoCB:
          CFI Block cfiBlock277 Using cfiCommon0
          CFI Function ZDO_DeregisterForZdoCB
        CODE
// 3339 {
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
        MOV     A,R1
        MOV     R2,A
// 3340   // Check the range of the indication ID
// 3341   if ( indID < MAX_ZDO_CB_FUNC )
        CLR     C
        SUBB    A,#0x9
        JNC     ??ZDO_DeregisterForZdoCB_0
// 3342   {
// 3343     zdoCBFunc[indID] = NULL;
        MOV     A,R2
        LCALL   ?Subroutine26 & 0xFFFF
??CrossCallReturnLabel_26:
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
// 3344     return ZSuccess;
        MOV     R1,A
        SJMP    ??ZDO_DeregisterForZdoCB_1
// 3345   }
// 3346 
// 3347   return ZInvalidParameter;
??ZDO_DeregisterForZdoCB_0:
        MOV     R1,#0x2
??ZDO_DeregisterForZdoCB_1:
        LJMP    ??Subroutine54_0 & 0xFFFF
// 3348 }
          CFI EndBlock cfiBlock277

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine26:
          CFI Block cfiCond278 Using cfiCommon0
          CFI Function ZDO_RegisterForZdoCB
          CFI Conditional ??CrossCallReturnLabel_25
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI Block cfiCond279 Using cfiCommon0
          CFI (cfiCond279) Function ZDO_DeregisterForZdoCB
          CFI (cfiCond279) Conditional ??CrossCallReturnLabel_26
          CFI (cfiCond279) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond279) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond279) CFA_SP SP+-7
          CFI Block cfiPicker280 Using cfiCommon1
          CFI (cfiPicker280) NoFunction
          CFI (cfiPicker280) Picker
        ADD     A,R1
        LCALL   ?Subroutine43 & 0xFFFF
??CrossCallReturnLabel_55:
        RET
          CFI EndBlock cfiCond278
          CFI EndBlock cfiCond279
          CFI EndBlock cfiPicker280

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine43:
          CFI Block cfiCond281 Using cfiCommon0
          CFI Function ZDApp_InitZdoCBFunc
          CFI Conditional ??CrossCallReturnLabel_54
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI Block cfiCond282 Using cfiCommon0
          CFI (cfiCond282) Function ZDO_RegisterForZdoCB
          CFI (cfiCond282) Conditional ??CrossCallReturnLabel_55, ??CrossCallReturnLabel_25
          CFI (cfiCond282) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond282) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond282) CFA_SP SP+-9
          CFI Block cfiCond283 Using cfiCommon0
          CFI (cfiCond283) Function ZDO_DeregisterForZdoCB
          CFI (cfiCond283) Conditional ??CrossCallReturnLabel_55, ??CrossCallReturnLabel_26
          CFI (cfiCond283) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond283) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond283) CFA_SP SP+-9
          CFI Block cfiPicker284 Using cfiCommon1
          CFI (cfiPicker284) NoFunction
          CFI (cfiPicker284) Picker
        MOV     R0,A
        CLR     A
        RLC     A
        MOV     R1,A
        MOV     A,#zdoCBFunc & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#(zdoCBFunc >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        RET
          CFI EndBlock cfiCond281
          CFI EndBlock cfiCond282
          CFI EndBlock cfiCond283
          CFI EndBlock cfiPicker284
// 3349 
// 3350 #if !defined ( ZDP_BIND_SKIP_VALIDATION )
// 3351 #if defined ( REFLECTOR )
// 3352 /*********************************************************************
// 3353  * @fn          ZDApp_SetPendingBindDefault
// 3354  *
// 3355  * @brief       This function initializes a specific entry of pending
// 3356  *              Bind Request.
// 3357  *
// 3358  * @param       pendBindReq - pointer to the entry in the table
// 3359  *
// 3360  * @return      none
// 3361  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3362 void ZDApp_SetPendingBindDefault( ZDO_PendingBindReq_t *pendBindReq )
ZDApp_SetPendingBindDefault:
          CFI Block cfiBlock285 Using cfiCommon0
          CFI Function ZDApp_SetPendingBindDefault
        CODE
// 3363 {
        FUNCALL ZDApp_SetPendingBindDefault, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
// 3364   // Set it to an initial value
// 3365   osal_memset( pendBindReq, 0xFF, sizeof( ZDO_PendingBindReq_t ) );
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x21
        MOV     R5,#0x0
        MOV     R1,#-0x1
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
// 3366 
// 3367   // We are checking for age 0 for aged-out records
// 3368   pendBindReq->age = 0;
        MOV     A,R6
        ADD     A,#0x20
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        CLR     A
        MOVX    @DPTR,A
// 3369 }
        LJMP    ??Subroutine55_0 & 0xFFFF
          CFI EndBlock cfiBlock285
// 3370 
// 3371 /*********************************************************************
// 3372  * @fn          ZDApp_InitPendingBind
// 3373  *
// 3374  * @brief       This function initializes the buffer that holds
// 3375  *              pending Bind Request messages if no valid NWK address
// 3376  *              exists in Address Manager and a Network Address Req
// 3377  *              has been sent out.
// 3378  *
// 3379  * @param       none
// 3380  *
// 3381  * @return      none
// 3382  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3383 void ZDApp_InitPendingBind( void )
ZDApp_InitPendingBind:
          CFI Block cfiBlock286 Using cfiCommon0
          CFI Function ZDApp_InitPendingBind
        CODE
// 3384 {
        FUNCALL ZDApp_InitPendingBind, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_InitPendingBind, ZDApp_SetPendingBindDefault
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
// 3385   if ( ZDAppPendingBindReq == NULL )
        MOV     DPTR,#ZDAppPendingBindReq
        LCALL   ??Subroutine64_0 & 0xFFFF
??CrossCallReturnLabel_128:
        JNZ     ??ZDApp_InitPendingBind_0
// 3386   {
// 3387     if ( ( ZDAppPendingBindReq = osal_mem_alloc( sizeof(ZDO_PendingBindReq_t) * MAX_PENDING_BIND_REQ ) ) != NULL )
        ; Setup parameters for call to function osal_mem_alloc
        MOV     R2,#0x63
        MOV     R3,#0x0
        LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV     DPTR,#ZDAppPendingBindReq
        LCALL   ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_1:
        JZ      ??ZDApp_InitPendingBind_0
// 3388     {
// 3389       uint8 i;
// 3390 
// 3391       for ( i = 0; i < MAX_PENDING_BIND_REQ; i++ )
        MOV     R6,#0x0
// 3392       {
// 3393         // Set to default values
// 3394         ZDApp_SetPendingBindDefault( &ZDAppPendingBindReq[i] );
??ZDApp_InitPendingBind_1:
        ; Setup parameters for call to function ZDApp_SetPendingBindDefault
        MOV     A,R6
        MOV     B,#0x21
        MUL     AB
        MOV     R0,A
        MOV     R1,B
        MOV     DPTR,#ZDAppPendingBindReq
        MOVX    A,@DPTR
        ADD     A,R0
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R1
        MOV     R3,A
        LCALL   `??ZDApp_SetPendingBindDefault::?relay`; Banked call to: ZDApp_SetPendingBindDefault
// 3395       }
        INC     R6
        MOV     A,R6
        CLR     C
        SUBB    A,#0x3
        JC      ??ZDApp_InitPendingBind_1
// 3396     }
// 3397   }
// 3398 }
??ZDApp_InitPendingBind_0:
        LJMP    ??Subroutine55_0 & 0xFFFF
          CFI EndBlock cfiBlock286
// 3399 
// 3400 /*********************************************************************
// 3401  * @fn          ZDApp_GetEmptyPendingBindReq
// 3402  *
// 3403  * @brief       This function looks for an empty entry.
// 3404  *
// 3405  * @param       none
// 3406  *
// 3407  * @return      Pointer to entry
// 3408  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3409 ZDO_PendingBindReq_t *ZDApp_GetEmptyPendingBindReq( void )
ZDApp_GetEmptyPendingBindReq:
          CFI Block cfiBlock287 Using cfiCommon0
          CFI Function ZDApp_GetEmptyPendingBindReq
        CODE
// 3410 {
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 3411   uint8 i;
// 3412 
// 3413   if ( ZDAppPendingBindReq != NULL )
        MOV     DPTR,#ZDAppPendingBindReq
        LCALL   ??Subroutine64_0 & 0xFFFF
??CrossCallReturnLabel_129:
        JZ      ??ZDApp_GetEmptyPendingBindReq_0
// 3414   {
// 3415     for ( i = 0; i < MAX_PENDING_BIND_REQ; i++ )
        MOV     R2,#0x0
// 3416     {
// 3417       if ( ZDAppPendingBindReq[i].age == 0 )
??ZDApp_GetEmptyPendingBindReq_1:
        MOV     A,R2
        MOV     B,#0x21
        MUL     AB
        MOV     R0,A
        MOV     R3,B
        MOV     A,R3
        LCALL   ??Subroutine67_0 & 0xFFFF
??CrossCallReturnLabel_134:
        JNZ     ??ZDApp_GetEmptyPendingBindReq_2
// 3418       {
// 3419         return ( &ZDAppPendingBindReq[i] );
        MOV     A,R2
        MOV     B,#0x21
        MUL     AB
        MOV     R0,A
        MOV     A,R3
        MOV     R1,A
        MOV     DPTR,#ZDAppPendingBindReq
        MOVX    A,@DPTR
        ADD     A,R0
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R1
        MOV     R3,A
        SJMP    ??ZDApp_GetEmptyPendingBindReq_3
// 3420       }
// 3421     }
??ZDApp_GetEmptyPendingBindReq_2:
        INC     R2
        MOV     A,R2
        CLR     C
        SUBB    A,#0x3
        JC      ??ZDApp_GetEmptyPendingBindReq_1
// 3422   }
// 3423 
// 3424   // No empty entry was found
// 3425   return NULL;
??ZDApp_GetEmptyPendingBindReq_0:
        MOV     R2,#0x0
        MOV     R3,#0x0
??ZDApp_GetEmptyPendingBindReq_3:
        LJMP    ??Subroutine54_0 & 0xFFFF
// 3426 }
          CFI EndBlock cfiBlock287
// 3427 
// 3428 /*********************************************************************
// 3429  * @fn          ZDApp_ProcessPendingBindReq
// 3430  *
// 3431  * @brief       Process pending entry based on EXT address.
// 3432  *
// 3433  * @param       extAddr - of device to look up
// 3434  *
// 3435  * @return      none
// 3436  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3437 void ZDApp_ProcessPendingBindReq( uint8 *extAddr )
ZDApp_ProcessPendingBindReq:
          CFI Block cfiBlock288 Using cfiCommon0
          CFI Function ZDApp_ProcessPendingBindReq
        CODE
// 3438 {
        FUNCALL ZDApp_ProcessPendingBindReq, osal_memcmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessPendingBindReq, APSME_BindRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessPendingBindReq, ZDP_SendData
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_ProcessPendingBindReq, ZDApp_SetPendingBindDefault
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        MOV     A,#-0xf
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 3
        MOV     A,#-0x3
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 18)
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine9 & 0xFFFF
// 3439   uint8 i;
// 3440 
// 3441   // Loop through all the pending entries for that Ext Address
// 3442   // to create Bind Entries and send Bind Rsp
// 3443   if ( ZDAppPendingBindReq != NULL )
??CrossCallReturnLabel_0:
        JNZ     $+5
        LJMP    ??ZDApp_ProcessPendingBindReq_0 & 0xFFFF
// 3444   {
// 3445     for ( i = 0; i < MAX_PENDING_BIND_REQ; i++ )
        MOV     ?V0,#0x0
// 3446     {
// 3447       if ( osal_memcmp( ZDAppPendingBindReq[i].bindReq.dstAddress.addr.extAddr,
// 3448                         extAddr, Z_EXTADDR_LEN ) == TRUE )
??ZDApp_ProcessPendingBindReq_1:
        ; Setup parameters for call to function osal_memcmp
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V5,A
        MOV     ?V6,#0x0
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 21)
        MOV     R4,#0x8
        MOV     R5,#0x0
        MOV     A,?V0
        MOV     B,#0x21
        MUL     AB
        MOV     R0,A
        MOV     R1,B
        LCALL   ?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_13:
        MOV     ?V2,A
        CLR     A
        ADDC    A,R1
        MOV     R1,?V2
        MOV     R2,A
        MOV     R3,#0x0
        LCALL   `??osal_memcmp::?relay`; Banked call to: osal_memcmp
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 18)
        MOV     A,R1
        XRL     A,#0x1
        JZ      $+5
        LJMP    ??ZDApp_ProcessPendingBindReq_2 & 0xFFFF
// 3449       {
// 3450         uint8 bindStat = ZDP_TABLE_FULL; // Assume table is full
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#-0x74
        MOVX    @DPTR,A
// 3451 
// 3452         // Add Bind entry
// 3453         if ( APSME_BindRequest( ZDAppPendingBindReq[i].bindReq.srcEndpoint,
// 3454                                 ZDAppPendingBindReq[i].bindReq.clusterID,
// 3455                                 &(ZDAppPendingBindReq[i].bindReq.dstAddress),
// 3456                                 ZDAppPendingBindReq[i].bindReq.dstEndpoint ) == ZSuccess )
        MOV     A,?V0
        MOV     B,#0x21
        MUL     AB
        MOV     R6,A
        MOV     R7,B
        MOV     DPTR,#ZDAppPendingBindReq
        MOVX    A,@DPTR
        ADD     A,R6
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R7
        MOV     R7,A
        ; Setup parameters for call to function APSME_BindRequest
        LCALL   ?Subroutine46 & 0xFFFF
??CrossCallReturnLabel_60:
        MOVX    A,@DPTR
        MOV     ?V1,A
        MOV     R0,#?V1
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 19)
        MOV     A,R6
        ADD     A,#0xb
        MOV     R4,A
        CLR     A
        ADDC    A,R7
        MOV     R5,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine23 & 0xFFFF
??CrossCallReturnLabel_16:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??APSME_BindRequest::?relay`; Banked call to: APSME_BindRequest
        MOV     A,#0x1
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 18)
        MOV     A,R1
        JNZ     ??ZDApp_ProcessPendingBindReq_3
// 3457         {
// 3458           // valid entry
// 3459           bindStat = ZDP_SUCCESS;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CLR     A
        MOVX    @DPTR,A
// 3460 
// 3461           // Notify to save info into NV
// 3462           ZDApp_NVUpdate();
// 3463         }
// 3464 
// 3465         // Send back a response message
// 3466         ZDP_BindRsp( ZDAppPendingBindReq[i].transSeq, &(ZDAppPendingBindReq[i].srcAddr),
// 3467                      bindStat, ZDAppPendingBindReq[i].securityUse );
??ZDApp_ProcessPendingBindReq_3:
        LCALL   ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_6:
        MOV     ?V1,A
        MOV     R0,#?V1
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 19)
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP100_8
        MOV     ?V2,R0
        MOV     ?V3,R1
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 21)
        MOV     ?V2,#0x21
        MOV     ?V3,#-0x80
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 23)
        LCALL   ?Subroutine33 & 0xFFFF
??CrossCallReturnLabel_37:
        JNC     ??ZDApp_ProcessPendingBindReq_4
        INC     R3
??ZDApp_ProcessPendingBindReq_4:
        LCALL   `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
        MOV     A,#0x5
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 18)
// 3468 
// 3469         // Set the pending request entry to default values
// 3470         ZDApp_SetPendingBindDefault( &ZDAppPendingBindReq[i] );
        ; Setup parameters for call to function ZDApp_SetPendingBindDefault
        LCALL   ?Subroutine39 & 0xFFFF
// 3471       }
// 3472     }
??CrossCallReturnLabel_49:
        LCALL   `??ZDApp_SetPendingBindDefault::?relay`; Banked call to: ZDApp_SetPendingBindDefault
??ZDApp_ProcessPendingBindReq_2:
        INC     ?V0
        MOV     A,?V0
        CLR     C
        SUBB    A,#0x3
        JNC     $+5
        LJMP    ??ZDApp_ProcessPendingBindReq_1 & 0xFFFF
// 3473   }
// 3474 }
??ZDApp_ProcessPendingBindReq_0:
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 15)
        MOV     R7,#0x7
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock288

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine46:
          CFI Block cfiCond289 Using cfiCommon0
          CFI Function ZDApp_NwkDescListProcessing
          CFI Conditional ??CrossCallReturnLabel_61, ??CrossCallReturnLabel_85
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond290 Using cfiCommon0
          CFI (cfiCond290) Function ZDApp_NwkDescListProcessing
          CFI (cfiCond290) Conditional ??CrossCallReturnLabel_61, ??CrossCallReturnLabel_86
          CFI (cfiCond290) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond290) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond290) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond290) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond290) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond290) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond290) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond290) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond290) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond290) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond290) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond290) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond290) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond290) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond290) CFA_SP SP+-4
          CFI (cfiCond290) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond291 Using cfiCommon0
          CFI (cfiCond291) Function ZDO_beaconNotifyIndCB
          CFI (cfiCond291) Conditional ??CrossCallReturnLabel_61, ??CrossCallReturnLabel_87
          CFI (cfiCond291) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond291) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond291) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond291) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond291) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond291) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond291) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond291) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond291) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond291) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond291) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond291) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond291) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond291) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond291) CFA_SP SP+-4
          CFI (cfiCond291) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond292 Using cfiCommon0
          CFI (cfiCond292) Function ZDApp_ProcessPendingBindReq
          CFI (cfiCond292) Conditional ??CrossCallReturnLabel_60
          CFI (cfiCond292) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond292) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond292) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond292) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond292) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond292) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond292) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond292) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond292) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond292) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond292) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond292) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond292) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond292) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond292) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond292) CFA_SP SP+-2
          CFI (cfiCond292) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiPicker293 Using cfiCommon1
          CFI (cfiPicker293) NoFunction
          CFI (cfiPicker293) Picker
        MOV     A,R6
        ADD     A,#0x14
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        RET
          CFI EndBlock cfiCond289
          CFI EndBlock cfiCond290
          CFI EndBlock cfiCond291
          CFI EndBlock cfiCond292
          CFI EndBlock cfiPicker293

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine23:
          CFI Block cfiCond294 Using cfiCommon0
          CFI Function ZDO_beaconNotifyIndCB
          CFI Conditional ??CrossCallReturnLabel_15
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond295 Using cfiCommon0
          CFI (cfiCond295) Function ZDApp_ProcessPendingBindReq
          CFI (cfiCond295) Conditional ??CrossCallReturnLabel_16
          CFI (cfiCond295) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond295) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond295) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond295) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond295) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond295) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond295) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond295) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond295) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond295) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond295) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond295) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond295) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond295) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond295) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond295) CFA_SP SP+-2
          CFI (cfiCond295) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiPicker296 Using cfiCommon1
          CFI (cfiPicker296) NoFunction
          CFI (cfiPicker296) Picker
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     DPL,R6
        MOV     DPH,R7
        RET
          CFI EndBlock cfiCond294
          CFI EndBlock cfiCond295
          CFI EndBlock cfiPicker296

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine9:
          CFI Block cfiCond297 Using cfiCommon0
          CFI Function ZDApp_InitPendingBind
          CFI Conditional ??CrossCallReturnLabel_1
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond298 Using cfiCommon0
          CFI (cfiCond298) Function ZDApp_ProcessPendingBindReq
          CFI (cfiCond298) Conditional ??CrossCallReturnLabel_0
          CFI (cfiCond298) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond298) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond298) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond298) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond298) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond298) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond298) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond298) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond298) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond298) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond298) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond298) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond298) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond298) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond298) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond298) CFA_SP SP+-2
          CFI (cfiCond298) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiPicker299 Using cfiCommon1
          CFI (cfiPicker299) NoFunction
          CFI (cfiPicker299) Picker
        LCALL   ??Subroutine48_0 & 0xFFFF
??CrossCallReturnLabel_66:
        MOV     DPTR,#ZDAppPendingBindReq
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        RET
          CFI EndBlock cfiCond297
          CFI EndBlock cfiCond298
          CFI EndBlock cfiPicker299
// 3475 
// 3476 /*********************************************************************
// 3477  * @fn          ZDApp_AgeOutPendingBindEntry
// 3478  *
// 3479  * @brief       Age out pending Bind Req entries.
// 3480  *
// 3481  * @param       none
// 3482  *
// 3483  * @return      none
// 3484  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3485 void ZDApp_AgeOutPendingBindEntry( void )
ZDApp_AgeOutPendingBindEntry:
          CFI Block cfiBlock300 Using cfiCommon0
          CFI Function ZDApp_AgeOutPendingBindEntry
        CODE
// 3486 {
        FUNCALL ZDApp_AgeOutPendingBindEntry, AddrMgrExtAddrSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_AgeOutPendingBindEntry, AddrMgrEntryLookupExt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_AgeOutPendingBindEntry, AddrMgrEntryRelease
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_AgeOutPendingBindEntry, ZDP_SendData
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_AgeOutPendingBindEntry, ZDApp_SetPendingBindDefault
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_AgeOutPendingBindEntry, osal_stop_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDApp_AgeOutPendingBindEntry, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 14
        MOV     A,#-0xe
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 26)
// 3487   uint8 i;
// 3488   bool entryFound = FALSE;
        MOV     ?V1,#0x0
// 3489 
// 3490   if ( ZDAppPendingBindReq != NULL )
        MOV     DPTR,#ZDAppPendingBindReq
        LCALL   ??Subroutine64_0 & 0xFFFF
??CrossCallReturnLabel_130:
        JNZ     $+5
        LJMP    ??ZDApp_AgeOutPendingBindEntry_0 & 0xFFFF
// 3491   {
// 3492     for ( i = 0; i < MAX_PENDING_BIND_REQ; i++ )
        MOV     ?V0,#0x0
// 3493     {
// 3494       if ( ZDAppPendingBindReq[i].age > 1 )
??ZDApp_AgeOutPendingBindEntry_1:
        MOV     A,?V0
        MOV     B,#0x21
        MUL     AB
        MOV     R0,A
        MOV     R2,B
        LCALL   ??Subroutine66_0 & 0xFFFF
??CrossCallReturnLabel_135:
        CLR     C
        SUBB    A,#0x2
        MOV     A,?V0
        MOV     B,#0x21
        JC      ??ZDApp_AgeOutPendingBindEntry_2
// 3495       {
// 3496         ZDAppPendingBindReq[i].age--;
        LCALL   ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_136:
        DEC     A
        MOVX    @DPTR,A
// 3497 
// 3498         entryFound = TRUE;
        MOV     ?V1,#0x1
        LJMP    ??ZDApp_AgeOutPendingBindEntry_3 & 0xFFFF
// 3499       }
// 3500       else if ( ZDAppPendingBindReq[i].age == 1 )
??ZDApp_AgeOutPendingBindEntry_2:
        LCALL   ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_137:
        XRL     A,#0x1
        JZ      $+5
        LJMP    ??ZDApp_AgeOutPendingBindEntry_3 & 0xFFFF
// 3501       {
// 3502         // The record has aged out and has valid data
// 3503         AddrMgrEntry_t entry;
// 3504         uint8 bindStat = ZDP_TABLE_FULL; // Assume table is full
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#-0x74
        MOVX    @DPTR,A
// 3505 
// 3506         entry.user = ADDRMGR_USER_BINDING;
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x4
        MOVX    @DPTR,A
// 3507 
// 3508         // Remove the entry in address manager so we do not keep entries
// 3509         // with invalid addresses
// 3510         AddrMgrExtAddrSet( entry.extAddr, ZDAppPendingBindReq[i].bindReq.dstAddress.addr.extAddr );
        ; Setup parameters for call to function AddrMgrExtAddrSet
        MOV     A,?V0
        MOV     B,#0x21
        MUL     AB
        MOV     R0,A
        MOV     A,R2
        MOV     R1,A
        LCALL   ?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_14:
        MOV     R4,A
        CLR     A
        ADDC    A,R1
        MOV     R5,A
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   `??AddrMgrExtAddrSet::?relay`; Banked call to: AddrMgrExtAddrSet
// 3511 
// 3512         if ( AddrMgrEntryLookupExt( &entry ) == TRUE )
        ; Setup parameters for call to function AddrMgrEntryLookupExt
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??AddrMgrEntryLookupExt::?relay`; Banked call to: AddrMgrEntryLookupExt
        MOV     A,R1
        XRL     A,#0x1
        JNZ     ??ZDApp_AgeOutPendingBindEntry_4
// 3513         {
// 3514           if ( entry.nwkAddr == INVALID_NODE_ADDR )
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        XRL     A,#0xfe
        JNZ     ??ZDApp_AgeOutPendingBindEntry_5
        INC     DPTR
        MOVX    A,@DPTR
        CPL     A
??ZDApp_AgeOutPendingBindEntry_5:
        JNZ     ??ZDApp_AgeOutPendingBindEntry_4
// 3515           {
// 3516             // Release the entry that contains an invalid NWK address
// 3517             AddrMgrEntryRelease( &entry );
        ; Setup parameters for call to function AddrMgrEntryRelease
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??AddrMgrEntryRelease::?relay`; Banked call to: AddrMgrEntryRelease
// 3518           }
// 3519         }
// 3520 
// 3521         // Send the Bind Response with failure status
// 3522         ZDP_BindRsp( ZDAppPendingBindReq[i].transSeq,
// 3523                      &(ZDAppPendingBindReq[i].srcAddr),
// 3524                      bindStat, ZDAppPendingBindReq[i].securityUse );
??ZDApp_AgeOutPendingBindEntry_4:
        LCALL   ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_7:
        MOV     ?V2,A
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 27)
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP100_8
        MOV     ?V2,R0
        MOV     ?V3,R1
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 29)
        MOV     ?V2,#0x21
        MOV     ?V3,#-0x80
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 31)
        LCALL   ?Subroutine33 & 0xFFFF
??CrossCallReturnLabel_38:
        JNC     ??ZDApp_AgeOutPendingBindEntry_6
        INC     R3
??ZDApp_AgeOutPendingBindEntry_6:
        LCALL   `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
        MOV     A,#0x5
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 26)
// 3525 
// 3526         // Clear the record and set to default values
// 3527         ZDApp_SetPendingBindDefault( &ZDAppPendingBindReq[i] );
        ; Setup parameters for call to function ZDApp_SetPendingBindDefault
        LCALL   ?Subroutine39 & 0xFFFF
// 3528       }
// 3529     }
??CrossCallReturnLabel_50:
        LCALL   `??ZDApp_SetPendingBindDefault::?relay`; Banked call to: ZDApp_SetPendingBindDefault
??ZDApp_AgeOutPendingBindEntry_3:
        INC     ?V0
        MOV     A,?V0
        CLR     C
        SUBB    A,#0x3
        JNC     $+5
        LJMP    ??ZDApp_AgeOutPendingBindEntry_1 & 0xFFFF
// 3530   }
// 3531 
// 3532   if ( entryFound == FALSE )
        MOV     A,?V1
        MOV     C,0xE0 /* A   */.0
        JC      ??ZDApp_AgeOutPendingBindEntry_7
// 3533   {
// 3534     osal_stop_timerEx( ZDAppTaskID, ZDO_PENDING_BIND_REQ_EVT );
??ZDApp_AgeOutPendingBindEntry_0:
        ; Setup parameters for call to function osal_stop_timerEx
        MOV     R2,#0x0
        MOV     R3,#0x10
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
        SJMP    ??ZDApp_AgeOutPendingBindEntry_8
// 3535   }
// 3536   else
// 3537   {
// 3538     osal_start_timerEx( ZDAppTaskID, ZDO_PENDING_BIND_REQ_EVT,
// 3539                         AGE_OUT_PEND_BIND_REQ_DELAY );
??ZDApp_AgeOutPendingBindEntry_7:
        ; Setup parameters for call to function osal_start_timerEx
        MOV     DPTR,#__Constant_3e8
        LCALL   ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 30)
        MOV     R2,#0x0
        MOV     R3,#0x10
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 26)
// 3540   }
// 3541 }
??ZDApp_AgeOutPendingBindEntry_8:
        MOV     A,#0xe
          CFI EndBlock cfiBlock300
        REQUIRE ?Subroutine4
        ; // Fall through to label ?Subroutine4

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
          CFI Block cfiBlock301 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 33)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
          CFI EndBlock cfiBlock301
        REQUIRE ??Subroutine65_0
        ; // Fall through to label ??Subroutine65_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine65_0:
          CFI Block cfiBlock302 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock302

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine39:
          CFI Block cfiCond303 Using cfiCommon0
          CFI Function ZDApp_ProcessPendingBindReq
          CFI Conditional ??CrossCallReturnLabel_49
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond304 Using cfiCommon0
          CFI (cfiCond304) Function ZDApp_AgeOutPendingBindEntry
          CFI (cfiCond304) Conditional ??CrossCallReturnLabel_50
          CFI (cfiCond304) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond304) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond304) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond304) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond304) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond304) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond304) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond304) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond304) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond304) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond304) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond304) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond304) CFA_SP SP+-2
          CFI (cfiCond304) CFA_XSP16 add(XSP16, 26)
          CFI Block cfiCond305 Using cfiCommon0
          CFI (cfiCond305) Function ZDApp_ProcessPendingBindReq
          CFI (cfiCond305) Conditional ??CrossCallReturnLabel_51, ??CrossCallReturnLabel_6
          CFI (cfiCond305) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond305) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond305) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond305) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond305) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond305) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond305) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond305) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond305) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond305) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond305) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond305) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond305) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond305) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond305) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond305) CFA_SP SP+-4
          CFI (cfiCond305) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond306 Using cfiCommon0
          CFI (cfiCond306) Function ZDApp_AgeOutPendingBindEntry
          CFI (cfiCond306) Conditional ??CrossCallReturnLabel_51, ??CrossCallReturnLabel_7
          CFI (cfiCond306) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond306) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond306) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond306) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond306) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond306) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond306) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond306) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond306) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond306) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond306) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond306) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond306) CFA_SP SP+-4
          CFI (cfiCond306) CFA_XSP16 add(XSP16, 26)
          CFI Block cfiPicker307 Using cfiCommon1
          CFI (cfiPicker307) NoFunction
          CFI (cfiPicker307) Picker
        MOV     DPTR,#ZDAppPendingBindReq
        MOVX    A,@DPTR
        ADD     A,R6
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R7
        MOV     R3,A
        RET
          CFI EndBlock cfiCond303
          CFI EndBlock cfiCond304
          CFI EndBlock cfiCond305
          CFI EndBlock cfiCond306
          CFI EndBlock cfiPicker307

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine33:
          CFI Block cfiCond308 Using cfiCommon0
          CFI Function ZDApp_ProcessPendingBindReq
          CFI Conditional ??CrossCallReturnLabel_37
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 23)
          CFI Block cfiCond309 Using cfiCommon0
          CFI (cfiCond309) Function ZDApp_AgeOutPendingBindEntry
          CFI (cfiCond309) Conditional ??CrossCallReturnLabel_38
          CFI (cfiCond309) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond309) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond309) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond309) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond309) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond309) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond309) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond309) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond309) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond309) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond309) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond309) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond309) CFA_SP SP+-2
          CFI (cfiCond309) CFA_XSP16 add(XSP16, 31)
          CFI Block cfiPicker310 Using cfiCommon1
          CFI (cfiPicker310) NoFunction
          CFI (cfiPicker310) Picker
        MOV     R1,#0x1
        MOV     A,R2
        ADD     A,#0x15
        MOV     R4,A
        CLR     A
        ADDC    A,R3
        MOV     R5,A
        MOV     A,R2
        ADD     A,#0x1f
        MOV     R2,A
        RET
          CFI EndBlock cfiCond308
          CFI EndBlock cfiCond309
          CFI EndBlock cfiPicker310

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine22:
          CFI Block cfiCond311 Using cfiCommon0
          CFI Function ZDApp_ProcessPendingBindReq
          CFI Conditional ??CrossCallReturnLabel_13
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond312 Using cfiCommon0
          CFI (cfiCond312) Function ZDApp_AgeOutPendingBindEntry
          CFI (cfiCond312) Conditional ??CrossCallReturnLabel_14
          CFI (cfiCond312) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond312) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond312) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond312) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond312) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond312) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond312) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond312) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond312) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond312) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond312) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond312) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond312) CFA_SP SP+-2
          CFI (cfiCond312) CFA_XSP16 add(XSP16, 26)
          CFI Block cfiPicker313 Using cfiCommon1
          CFI (cfiPicker313) NoFunction
          CFI (cfiPicker313) Picker
        LCALL   ?Subroutine41 & 0xFFFF
??CrossCallReturnLabel_138:
        ADD     A,#0xb
        RET
          CFI EndBlock cfiCond311
          CFI EndBlock cfiCond312
          CFI EndBlock cfiPicker313

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine15:
          CFI Block cfiCond314 Using cfiCommon0
          CFI Function ZDApp_ProcessPendingBindReq
          CFI Conditional ??CrossCallReturnLabel_6
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond315 Using cfiCommon0
          CFI (cfiCond315) Function ZDApp_AgeOutPendingBindEntry
          CFI (cfiCond315) Conditional ??CrossCallReturnLabel_7
          CFI (cfiCond315) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond315) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond315) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond315) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond315) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond315) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond315) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond315) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond315) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond315) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond315) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond315) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond315) CFA_SP SP+-2
          CFI (cfiCond315) CFA_XSP16 add(XSP16, 26)
          CFI Block cfiPicker316 Using cfiCommon1
          CFI (cfiPicker316) NoFunction
          CFI (cfiPicker316) Picker
        MOV     A,?V0
        MOV     B,#0x21
        MUL     AB
        MOV     R6,A
        MOV     R7,B
        LCALL   ?Subroutine39 & 0xFFFF
??CrossCallReturnLabel_51:
        ; Setup parameters for call to function ZDP_SendData
        ; Setup parameters for call to function ZDP_SendData
        MOV     A,R2
        ADD     A,#0x1e
        MOV     DPL,A
        CLR     A
        ADDC    A,R3
        MOV     DPH,A
        MOVX    A,@DPTR
        RET
          CFI EndBlock cfiCond314
          CFI EndBlock cfiCond315
          CFI EndBlock cfiPicker316

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine14:
          CFI Block cfiCond317 Using cfiCommon0
          CFI Function ZDApp_AgeOutPendingBindEntry
          CFI Conditional ??CrossCallReturnLabel_136
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 26)
          CFI Block cfiCond318 Using cfiCommon0
          CFI (cfiCond318) Function ZDApp_AgeOutPendingBindEntry
          CFI (cfiCond318) Conditional ??CrossCallReturnLabel_137
          CFI (cfiCond318) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond318) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond318) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond318) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond318) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond318) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond318) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond318) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond318) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond318) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond318) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond318) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond318) CFA_SP SP+-2
          CFI (cfiCond318) CFA_XSP16 add(XSP16, 26)
          CFI Block cfiPicker319 Using cfiCommon1
          CFI (cfiPicker319) NoFunction
          CFI (cfiPicker319) Picker
        MUL     AB
        MOV     R0,A
          CFI EndBlock cfiCond317
          CFI EndBlock cfiCond318
          CFI EndBlock cfiPicker319
        REQUIRE ??Subroutine66_0
        ; // Fall through to label ??Subroutine66_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine66_0:
          CFI Block cfiCond320 Using cfiCommon0
          CFI Function ZDApp_AgeOutPendingBindEntry
          CFI Conditional ??CrossCallReturnLabel_135
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 26)
          CFI Block cfiCond321 Using cfiCommon0
          CFI (cfiCond321) Function ZDApp_AgeOutPendingBindEntry
          CFI (cfiCond321) Conditional ??CrossCallReturnLabel_136
          CFI (cfiCond321) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond321) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond321) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond321) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond321) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond321) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond321) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond321) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond321) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond321) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond321) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond321) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond321) CFA_SP SP+-2
          CFI (cfiCond321) CFA_XSP16 add(XSP16, 26)
          CFI Block cfiCond322 Using cfiCommon0
          CFI (cfiCond322) Function ZDApp_AgeOutPendingBindEntry
          CFI (cfiCond322) Conditional ??CrossCallReturnLabel_137
          CFI (cfiCond322) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond322) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond322) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond322) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond322) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond322) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond322) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond322) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond322) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond322) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond322) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond322) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond322) CFA_SP SP+-2
          CFI (cfiCond322) CFA_XSP16 add(XSP16, 26)
          CFI Block cfiPicker323 Using cfiCommon1
          CFI (cfiPicker323) NoFunction
          CFI (cfiPicker323) Picker
        MOV     A,R2
          CFI EndBlock cfiCond320
          CFI EndBlock cfiCond321
          CFI EndBlock cfiCond322
          CFI EndBlock cfiPicker323
        REQUIRE ??Subroutine67_0
        ; // Fall through to label ??Subroutine67_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine67_0:
          CFI Block cfiCond324 Using cfiCommon0
          CFI Function ZDApp_GetEmptyPendingBindReq
          CFI Conditional ??CrossCallReturnLabel_134
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI Block cfiCond325 Using cfiCommon0
          CFI (cfiCond325) Function ZDApp_AgeOutPendingBindEntry
          CFI (cfiCond325) Conditional ??CrossCallReturnLabel_135
          CFI (cfiCond325) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond325) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond325) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond325) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond325) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond325) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond325) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond325) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond325) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond325) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond325) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond325) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond325) CFA_SP SP+-2
          CFI (cfiCond325) CFA_XSP16 add(XSP16, 26)
          CFI Block cfiCond326 Using cfiCommon0
          CFI (cfiCond326) Function ZDApp_AgeOutPendingBindEntry
          CFI (cfiCond326) Conditional ??CrossCallReturnLabel_136
          CFI (cfiCond326) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond326) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond326) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond326) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond326) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond326) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond326) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond326) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond326) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond326) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond326) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond326) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond326) CFA_SP SP+-2
          CFI (cfiCond326) CFA_XSP16 add(XSP16, 26)
          CFI Block cfiCond327 Using cfiCommon0
          CFI (cfiCond327) Function ZDApp_AgeOutPendingBindEntry
          CFI (cfiCond327) Conditional ??CrossCallReturnLabel_137
          CFI (cfiCond327) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond327) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond327) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond327) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond327) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond327) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond327) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond327) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond327) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond327) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond327) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond327) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond327) CFA_SP SP+-2
          CFI (cfiCond327) CFA_XSP16 add(XSP16, 26)
          CFI Block cfiPicker328 Using cfiCommon1
          CFI (cfiPicker328) NoFunction
          CFI (cfiPicker328) Picker
        MOV     R1,A
        LCALL   ?Subroutine41 & 0xFFFF
??CrossCallReturnLabel_139:
        ADD     A,#0x20
        MOV     DPL,A
        CLR     A
        ADDC    A,R1
        MOV     DPH,A
        MOVX    A,@DPTR
        RET
          CFI EndBlock cfiCond324
          CFI EndBlock cfiCond325
          CFI EndBlock cfiCond326
          CFI EndBlock cfiCond327
          CFI EndBlock cfiPicker328

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine41:
          CFI Block cfiCond329 Using cfiCommon0
          CFI Function ZDApp_ProcessPendingBindReq
          CFI Conditional ??CrossCallReturnLabel_138, ??CrossCallReturnLabel_13
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond330 Using cfiCommon0
          CFI (cfiCond330) Function ZDApp_AgeOutPendingBindEntry
          CFI (cfiCond330) Conditional ??CrossCallReturnLabel_138, ??CrossCallReturnLabel_14
          CFI (cfiCond330) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond330) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond330) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond330) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond330) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond330) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond330) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond330) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond330) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond330) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond330) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond330) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond330) CFA_SP SP+-4
          CFI (cfiCond330) CFA_XSP16 add(XSP16, 26)
          CFI Block cfiCond331 Using cfiCommon0
          CFI (cfiCond331) Function ZDApp_AgeOutPendingBindEntry
          CFI (cfiCond331) Conditional ??CrossCallReturnLabel_139, ??CrossCallReturnLabel_136
          CFI (cfiCond331) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond331) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond331) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond331) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond331) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond331) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond331) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond331) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond331) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond331) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond331) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond331) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond331) CFA_SP SP+-4
          CFI (cfiCond331) CFA_XSP16 add(XSP16, 26)
          CFI Block cfiCond332 Using cfiCommon0
          CFI (cfiCond332) Function ZDApp_AgeOutPendingBindEntry
          CFI (cfiCond332) Conditional ??CrossCallReturnLabel_139, ??CrossCallReturnLabel_137
          CFI (cfiCond332) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond332) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond332) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond332) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond332) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond332) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond332) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond332) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond332) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond332) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond332) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond332) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond332) CFA_SP SP+-4
          CFI (cfiCond332) CFA_XSP16 add(XSP16, 26)
          CFI Block cfiCond333 Using cfiCommon0
          CFI (cfiCond333) Function ZDApp_AgeOutPendingBindEntry
          CFI (cfiCond333) Conditional ??CrossCallReturnLabel_139, ??CrossCallReturnLabel_135
          CFI (cfiCond333) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond333) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond333) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond333) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond333) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond333) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond333) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond333) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond333) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond333) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond333) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond333) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond333) CFA_SP SP+-4
          CFI (cfiCond333) CFA_XSP16 add(XSP16, 26)
          CFI Block cfiCond334 Using cfiCommon0
          CFI (cfiCond334) Function ZDApp_GetEmptyPendingBindReq
          CFI (cfiCond334) Conditional ??CrossCallReturnLabel_139, ??CrossCallReturnLabel_134
          CFI (cfiCond334) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond334) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond334) CFA_SP SP+-9
          CFI Block cfiPicker335 Using cfiCommon1
          CFI (cfiPicker335) NoFunction
          CFI (cfiPicker335) Picker
        MOV     DPTR,#ZDAppPendingBindReq
        MOVX    A,@DPTR
        ADD     A,R0
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R1
        MOV     R1,A
        MOV     A,R0
        RET
          CFI EndBlock cfiCond329
          CFI EndBlock cfiCond330
          CFI EndBlock cfiCond331
          CFI EndBlock cfiCond332
          CFI EndBlock cfiCond333
          CFI EndBlock cfiCond334
          CFI EndBlock cfiPicker335

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zdoDiscCounter>`:
        DATA8
        DB 1

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for continueJoining>`:
        DATA8
        DB 1

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for ZDApp_epDesc>`:
        DATA8
        DB 0
        DATA16
        DW ZDAppTaskID
        DW 0H
        DATA8
        DB 0

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for ZDApp_SavedPollRate>`:
        DATA16
        DW 50

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_64:
        DD 100

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_4e2:
        DD 1250

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_258:
        DD 600

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_3e8:
        DD 1000

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_Init::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_SecInit::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_SecInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_event_loop::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_event_loop

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_ProcessSecEvent::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_ProcessSecEvent

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDOInitDevice::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDOInitDevice

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_ReadNetworkRestoreState::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_ReadNetworkRestoreState

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDAppDetermineDeviceType::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDAppDetermineDeviceType

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_NetworkStartEvt::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_NetworkStartEvt

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_DeviceAuthEvt::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_DeviceAuthEvt

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_SaveNetworkStateEvt::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_SaveNetworkStateEvt

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_InitUserDesc::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_InitUserDesc

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDAppCheckForHoldKey::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDAppCheckForHoldKey

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_ProcessOSALMsg::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_ProcessOSALMsg

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_ProcessMsgCBs::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_ProcessMsgCBs

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_RegisterCBs::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_RegisterCBs

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_ProcessSecMsg::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_ProcessSecMsg

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_ProcessNetworkJoin::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_ProcessNetworkJoin

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_SaveNwkKey::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_SaveNwkKey

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_ForceConcentratorChange::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_ForceConcentratorChange

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_ResetNwkKey::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_ResetNwkKey

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_RestoreNwkKey::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_RestoreNwkKey

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_ResetTimerStart::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_ResetTimerStart

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_ResetTimerCancel::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_ResetTimerCancel

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_LeaveCtrlInit::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_LeaveCtrlInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_LeaveCtrlSet::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_LeaveCtrlSet

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_LeaveCtrlReset::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_LeaveCtrlReset

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_LeaveCtrlBypass::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_LeaveCtrlBypass

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_LeaveCtrlStartup::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_LeaveCtrlStartup

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_LeaveReset::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_LeaveReset

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_LeaveUpdate::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_LeaveUpdate

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_NetworkDiscoveryReq::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_NetworkDiscoveryReq

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_JoinReq::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_JoinReq

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_DeviceConfigured::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_DeviceConfigured

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_SendEventMsg::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_SendEventMsg

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_SendMsg::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_SendMsg

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_NetworkDiscoveryConfirmCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_NetworkDiscoveryConfirmCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_NwkDescListProcessing::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_NwkDescListProcessing

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_NetworkFormationConfirmCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_NetworkFormationConfirmCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_beaconNotifyIndCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_beaconNotifyIndCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_StartRouterConfirmCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_StartRouterConfirmCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_JoinConfirmCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_JoinConfirmCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_PermitJoinCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_PermitJoinCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_AddrChangeIndicationCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_AddrChangeIndicationCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_JoinIndicationCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_JoinIndicationCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_ConcentratorIndicationCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_ConcentratorIndicationCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_LeaveCnf::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_LeaveCnf

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_LeaveInd::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_LeaveInd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_SyncIndicationCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_SyncIndicationCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_ManytoOneFailureIndicationCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_ManytoOneFailureIndicationCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_PollConfirmCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_PollConfirmCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_NetworkStatusCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_NetworkStatusCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??AddrMgrWriteNVRequest::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    AddrMgrWriteNVRequest

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_UpdateDeviceIndication::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_UpdateDeviceIndication

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_InMsgCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_InMsgCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_ChangeMatchDescRespPermission::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_ChangeMatchDescRespPermission

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_NetworkInit::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_NetworkInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_NwkStateUpdateCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_NwkStateUpdateCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_NodeProfileSync::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_NodeProfileSync

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_StartJoiningCycle::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_StartJoiningCycle

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_StopJoiningCycle::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_StopJoiningCycle

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_AnnounceNewAddress::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_AnnounceNewAddress

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_NVUpdate::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_NVUpdate

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_CoordStartPANIDConflictCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_CoordStartPANIDConflictCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_SrcRtgIndCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_SrcRtgIndCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_InitZdoCBFunc::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_InitZdoCBFunc

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_RegisterForZdoCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_RegisterForZdoCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_DeregisterForZdoCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_DeregisterForZdoCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_SetPendingBindDefault::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_SetPendingBindDefault

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_InitPendingBind::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_InitPendingBind

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_GetEmptyPendingBindReq::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_GetEmptyPendingBindReq

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_ProcessPendingBindReq::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_ProcessPendingBindReq

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDApp_AgeOutPendingBindEntry::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDApp_AgeOutPendingBindEntry

        END
// 3542 #endif
// 3543 #endif
// 3544 
// 3545 /*********************************************************************
// 3546 *********************************************************************/
// 
// 7 020 bytes in segment BANKED_CODE
//   432 bytes in segment BANK_RELAYS
//    10 bytes in segment XDATA_I
//    10 bytes in segment XDATA_ID
//    16 bytes in segment XDATA_ROM_C
//    62 bytes in segment XDATA_Z
// 
// 7 462 bytes of CODE  memory
//     0 bytes of CONST memory (+ 16 bytes shared)
//    72 bytes of XDATA memory
//
//Errors: none
//Warnings: none
