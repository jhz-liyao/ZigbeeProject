###############################################################################
#
# IAR C/C++ Compiler V9.30.1.3056 for 8051                24/Nov/2016  11:19:04
# Copyright 2004-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\Frame\List.c
#    Command line       =  
#        -f "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f
#        "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=50 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
#        -DREJOIN_POLL_RATE=440 "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\Frame\List.c" -D
#        HAL_UART=TRUE -D HAL_UART_ISR=1 -D HAL_UART_DMA=2 -D HOLD_AUTO_START
#        -D LOG_OUT -D UART1_PROTOCOL_RESOLVER=1 -D xISQC -D NWK_AUTO_POLL -D
#        xZTOOL_P1 -D ISR_KEYINTERRUPT -D xMT_TASK -D xMT_SYS_FUNC -D
#        xMT_ZDO_FUNC -D xLCD_SUPPORTED=DEBUG -D xPOWER_SAVING -lC
#        "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\SoilSensor\List"
#        -lA "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\SoilSensor\List"
#        --diag_suppress Pe001,Pa010 -o "E:\LiyaoProject\Zigbee_Project\Z-Stack
#        Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\SoilSensor\Obj"
#        -e --no_code_motion --debug --core=plain --dptr=16,1
#        --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 8 -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\" -I
#        "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\Source\"
#        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\Frame\"
#        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\Module\SoilSensor\"
#        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -Ohz
#    List file          =  
#        E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\SoilSensor\List\List.lst
#    Object file        =  
#        E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\SoilSensor\Obj\List.r51
#
###############################################################################

E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh 1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\Frame\List.c
      1          #include "List.h" 
      2          #include <string.h>
      3          #include "LOG.h" 
      4          
      5          /*√ø∏ˆΩ⁄µ„12◊÷Ω⁄ø™œ˙*/
      6          /****************************************************
      7          	∫Ø ˝√˚:List_Init
      8          	π¶ƒ‹:	ªÒ»°“ª∏ˆ¡¥±ÌÕ∑
      9          	◊˜’ﬂ:	liyao 2016ƒÍ10‘¬26»’11:47:26
     10          ****************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     11          List_Head_T* List_Init(uint16_t Size){
   \                     List_Init:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0,R2
   \   000007   8B..         MOV     ?V1,R3
     12          	List_Head_T* ListHead = MALLOC(sizeof(List_Head_T));
   \   000009                ; Setup parameters for call to function osal_mem_alloc
   \   000009   7A08         MOV     R2,#0x8
   \   00000B   7B00         MOV     R3,#0x0
   \   00000D   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000010   8A..         MOV     ?V2,R2
   \   000012   8B..         MOV     ?V3,R3
   \   000014   AE..         MOV     R6,?V2
   \   000016   AF..         MOV     R7,?V3
     13          	MALLOC_CHECK(ListHead, "List_Init"); 
   \   000018   EE           MOV     A,R6
   \   000019   4F           ORL     A,R7
   \   00001A   700A         JNZ     ??List_Init_0
   \   00001C                ; Setup parameters for indirect call
   \   00001C   7A..         MOV     R2,#`?<Constant "\\"List_Init\\"\\277\\325\\274\\344\\267\\` & 0xff
   \   00001E   7B..         MOV     R3,#(`?<Constant "\\"List_Init\\"\\277\\325\\274\\344\\267\\` >> 8) & 0xff
   \   000020   12....       LCALL   ??Subroutine13_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   000023   12....       LCALL   ?CALL_IND
     14          	memset(ListHead, 0, sizeof(List_Head_T));
   \                     ??List_Init_0:
   \   000026                ; Setup parameters for call to function memset
   \   000026   75..08       MOV     ?V2,#0x8
   \   000029   75..00       MOV     ?V3,#0x0
   \   00002C   78..         MOV     R0,#?V2
   \   00002E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000031   7C00         MOV     R4,#0x0
   \   000033   7D00         MOV     R5,#0x0
   \   000035   EE           MOV     A,R6
   \   000036   FA           MOV     R2,A
   \   000037   EF           MOV     A,R7
   \   000038   FB           MOV     R3,A
   \   000039   12....       LCALL   `??memset::?relay`   ; Banked call to: memset
   \   00003C   7402         MOV     A,#0x2
   \   00003E   12....       LCALL   ?DEALLOC_XSTACK8
     15          	ListHead->Size = Size;
   \   000041   8E82         MOV     DPL,R6
   \   000043   8F83         MOV     DPH,R7
   \   000045   A3           INC     DPTR
   \   000046   A3           INC     DPTR
   \   000047   A3           INC     DPTR
   \   000048   A3           INC     DPTR
   \   000049   E5..         MOV     A,?V0
   \   00004B   F0           MOVX    @DPTR,A
   \   00004C   A3           INC     DPTR
   \   00004D   E5..         MOV     A,?V1
   \   00004F   F0           MOVX    @DPTR,A
     16          	return ListHead;
   \   000050   EE           MOV     A,R6
   \   000051   FA           MOV     R2,A
   \   000052   EF           MOV     A,R7
   \   000053   FB           MOV     R3,A
   \   000054                REQUIRE ?Subroutine0
   \   000054                ; // Fall through to label ?Subroutine0
     17          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F04         MOV     R7,#0x4
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine13_0:
   \   000000   90....       MOV     DPTR,#Log + 4
   \   000003                REQUIRE ??Subroutine14_0
   \   000003                ; // Fall through to label ??Subroutine14_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine14_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F583         MOV     DPH,A
   \   000006   8882         MOV     DPL,R0
   \   000008   22           RET
     18          
     19          /****************************************************
     20          	∫Ø ˝√˚:List_Add
     21          	π¶ƒ‹:	œÚ¡¥±ÌÕ∑≤øÃÌº”“ª∏ˆ‘™Àÿ
     22          	◊˜’ﬂ:	liyao 2016ƒÍ10‘¬26»’
     23          ****************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7A..         MOV     R2,#`?<Constant "\\301\\264\\261\\355\\302\\372\\r\\n">` & 0xff
   \   000002   7B..         MOV     R3,#(`?<Constant "\\301\\264\\261\\355\\302\\372\\r\\n">` >> 8) & 0xff
   \   000004                REQUIRE ??Subroutine13_0
   \   000004                ; // Fall through to label ??Subroutine13_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     24          int8_t List_Add(List_Head_T* List_Head, void* Data, uint16_t Len){
   \                     List_Add:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0,R2
   \   000007   8B..         MOV     ?V1,R3
   \   000009   12....       LCALL   ?Subroutine4 & 0xFFFF
     25          	List_Node_T* ListNode = NULL;
     26          	if(List_Head->Size > 0 && List_Head->Count == List_Head->Size){
   \                     ??CrossCallReturnLabel_24:
   \   00000C   6015         JZ      ??List_Add_0
   \   00000E   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   000011   7003         JNZ     ??List_Add_1
   \   000013   A3           INC     DPTR
   \   000014   E0           MOVX    A,@DPTR
   \   000015   69           XRL     A,R1
   \                     ??List_Add_1:
   \   000016   700B         JNZ     ??List_Add_0
     27          		Log.error("¡¥±Ì¬˙\r\n");
   \   000018                ; Setup parameters for indirect call
   \   000018   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   00001B   12....       LCALL   ?CALL_IND
     28          		return -1;
   \   00001E   79FF         MOV     R1,#-0x1
   \   000020   02....       LJMP    ??CrossCallReturnLabel_4 & 0xFFFF
     29          	}
     30          	//∑÷≈‰ListNode_T
     31          	ListNode = MALLOC(sizeof(List_Node_T)); 
   \                     ??List_Add_0:
   \   000023                ; Setup parameters for call to function osal_mem_alloc
   \   000023   7A06         MOV     R2,#0x6
   \   000025   7B00         MOV     R3,#0x0
   \   000027   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00002A   8A..         MOV     ?V2,R2
   \   00002C   8B..         MOV     ?V3,R3
     32          	MALLOC_CHECK(ListNode, "List_Add"); 
   \   00002E   EA           MOV     A,R2
   \   00002F   45..         ORL     A,?V3
   \   000031   700A         JNZ     ??List_Add_2
   \   000033                ; Setup parameters for indirect call
   \   000033   7A..         MOV     R2,#`?<Constant "\\"List_Add\\"\\277\\325\\274\\344\\267\\3` & 0xff
   \   000035   7B..         MOV     R3,#(`?<Constant "\\"List_Add\\"\\277\\325\\274\\344\\267\\3` >> 8) & 0xff
   \   000037   12....       LCALL   ??Subroutine13_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   00003A   12....       LCALL   ?CALL_IND
   \                     ??List_Add_2:
   \   00003D   7410         MOV     A,#0x10
   \   00003F   12....       LCALL   ?XSTACK_DISP0_8
   \   000042   12....       LCALL   ?Subroutine7 & 0xFFFF
     33          	ListNode->Data = MALLOC(sizeof(uint8_t) * Len);
   \                     ??CrossCallReturnLabel_6:
   \   000045   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000048   8A..         MOV     ?V4,R2
   \   00004A   8B..         MOV     ?V5,R3
   \   00004C   A8..         MOV     R0,?V4
   \   00004E   A9..         MOV     R1,?V5
   \   000050   85..82       MOV     DPL,?V2
   \   000053   85..83       MOV     DPH,?V3
   \   000056   E8           MOV     A,R0
   \   000057   F0           MOVX    @DPTR,A
   \   000058   A3           INC     DPTR
   \   000059   E9           MOV     A,R1
   \   00005A   F0           MOVX    @DPTR,A
     34          	MALLOC_CHECK(ListNode->Data, "List_Add"); 
   \   00005B   E8           MOV     A,R0
   \   00005C   49           ORL     A,R1
   \   00005D   700A         JNZ     ??List_Add_3
   \   00005F                ; Setup parameters for indirect call
   \   00005F   7A..         MOV     R2,#`?<Constant "\\"List_Add\\"\\277\\325\\274\\344\\267\\3` & 0xff
   \   000061   7B..         MOV     R3,#(`?<Constant "\\"List_Add\\"\\277\\325\\274\\344\\267\\3` >> 8) & 0xff
   \   000063   12....       LCALL   ??Subroutine13_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   000066   12....       LCALL   ?CALL_IND
     35          	//∏≥÷µListNode_T 
     36          	ListNode->Next = NULL;
   \                     ??List_Add_3:
   \   000069   85..82       MOV     DPL,?V2
   \   00006C   85..83       MOV     DPH,?V3
   \   00006F   A3           INC     DPTR
   \   000070   A3           INC     DPTR
   \   000071   A3           INC     DPTR
   \   000072   A3           INC     DPTR
   \   000073   E4           CLR     A
   \   000074   F0           MOVX    @DPTR,A
   \   000075   A3           INC     DPTR
   \   000076   F0           MOVX    @DPTR,A
     37          	ListNode->Len	 = Len;
   \   000077   85..82       MOV     DPL,?V2
   \   00007A   85..83       MOV     DPH,?V3
   \   00007D   12....       LCALL   ?Subroutine9 & 0xFFFF
     38          	memcpy(ListNode->Data, Data, Len); 
   \                     ??CrossCallReturnLabel_11:
   \   000080   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000083   AC..         MOV     R4,?V6
   \   000085   AD..         MOV     R5,?V7
   \   000087   85..82       MOV     DPL,?V2
   \   00008A   85..83       MOV     DPH,?V3
   \   00008D   E0           MOVX    A,@DPTR
   \   00008E   FA           MOV     R2,A
   \   00008F   A3           INC     DPTR
   \   000090   E0           MOVX    A,@DPTR
   \   000091   FB           MOV     R3,A
   \   000092   12....       LCALL   `??memcpy::?relay`   ; Banked call to: memcpy
   \   000095   7402         MOV     A,#0x2
   \   000097   12....       LCALL   ?DEALLOC_XSTACK8
     39          	//º”»Î¡¥±Ì
     40          	if(List_Head->Head == NULL){// ◊¥Œº”»Î
   \   00009A   85..82       MOV     DPL,?V0
   \   00009D   85..83       MOV     DPH,?V1
   \   0000A0   12....       LCALL   ??Subroutine15_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   0000A3   7027         JNZ     ??List_Add_4
     41          		List_Head->Head = List_Head->Tail = ListNode;
   \   0000A5   E5..         MOV     A,?V0
   \   0000A7   2402         ADD     A,#0x2
   \   0000A9   F8           MOV     R0,A
   \   0000AA   E4           CLR     A
   \   0000AB   35..         ADDC    A,?V1
   \   0000AD   F9           MOV     R1,A
   \   0000AE   8882         MOV     DPL,R0
   \   0000B0   8983         MOV     DPH,R1
   \   0000B2   E5..         MOV     A,?V2
   \   0000B4   F0           MOVX    @DPTR,A
   \   0000B5   A3           INC     DPTR
   \   0000B6   E5..         MOV     A,?V3
   \   0000B8   F0           MOVX    @DPTR,A
   \   0000B9   8882         MOV     DPL,R0
   \   0000BB   8983         MOV     DPH,R1
   \   0000BD   12....       LCALL   ?Subroutine11 & 0xFFFF
     42          	}else{//“—”– ˝æ›º”»Î 
   \                     ??CrossCallReturnLabel_28:
   \   0000C0   85..82       MOV     DPL,?V0
   \   0000C3   85..83       MOV     DPH,?V1
   \   0000C6   E8           MOV     A,R0
   \   0000C7   F0           MOVX    @DPTR,A
   \   0000C8   A3           INC     DPTR
   \   0000C9   E9           MOV     A,R1
   \   0000CA   8017         SJMP    ??List_Add_5
     43          		ListNode->Next = List_Head->Head; 
   \                     ??List_Add_4:
   \   0000CC   85..82       MOV     DPL,?V2
   \   0000CF   85..83       MOV     DPH,?V3
   \   0000D2   A3           INC     DPTR
   \   0000D3   A3           INC     DPTR
   \   0000D4   A3           INC     DPTR
   \   0000D5   A3           INC     DPTR
   \   0000D6   E8           MOV     A,R0
   \   0000D7   F0           MOVX    @DPTR,A
   \   0000D8   A3           INC     DPTR
   \   0000D9   E9           MOV     A,R1
   \   0000DA   12....       LCALL   ?Subroutine8 & 0xFFFF
     44          		List_Head->Head = ListNode;
     45          	}
   \                     ??CrossCallReturnLabel_8:
   \   0000DD   E5..         MOV     A,?V2
   \   0000DF   F0           MOVX    @DPTR,A
   \   0000E0   A3           INC     DPTR
   \   0000E1   E5..         MOV     A,?V3
   \                     ??List_Add_5:
   \   0000E3   12....       LCALL   ?Subroutine8 & 0xFFFF
     46          	List_Head->Count++;
   \                     ??CrossCallReturnLabel_9:
   \   0000E6   12....       LCALL   ?Subroutine6 & 0xFFFF
     47          	return 0;
   \                     ??CrossCallReturnLabel_4:
   \   0000E9                REQUIRE ?Subroutine1
   \   0000E9                ; // Fall through to label ?Subroutine1
     48          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7F08         MOV     R7,#0x8
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   EE           MOV     A,R6
   \   000003   F0           MOVX    @DPTR,A
   \   000004   A3           INC     DPTR
   \   000005   EF           MOV     A,R7
   \   000006   F0           MOVX    @DPTR,A
   \   000007                ; Setup parameters for call to function memcpy
   \   000007                ; Setup parameters for call to function memcpy
   \   000007   8E..         MOV     ?V4,R6
   \   000009   8F..         MOV     ?V5,R7
   \   00000B   78..         MOV     R0,#?V4
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   85..82       MOV     DPL,?V0
   \   000004   85..83       MOV     DPH,?V1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   12....       LCALL   ??Subroutine16_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   000003                ; Setup parameters for call to function osal_mem_alloc
   \   000003                ; Setup parameters for call to function osal_mem_alloc
   \   000003   EE           MOV     A,R6
   \   000004   FA           MOV     R2,A
   \   000005   EF           MOV     A,R7
   \   000006   FB           MOV     R3,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   2401         ADD     A,#0x1
   \   000009   F0           MOVX    @DPTR,A
   \   00000A   A3           INC     DPTR
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   3400         ADDC    A,#0x0
   \   00000E   F0           MOVX    @DPTR,A
   \   00000F   7900         MOV     R1,#0x0
   \   000011   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   00000D   8A82         MOV     DPL,R2
   \   00000F   8B83         MOV     DPH,R3
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   E0           MOVX    A,@DPTR
   \   000016   68           XRL     A,R0
   \   000017   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   8C..         MOV     ?V6,R4
   \   000002   8D..         MOV     ?V7,R5
   \   000004   8A82         MOV     DPL,R2
   \   000006   8B83         MOV     DPH,R3
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C                REQUIRE ??Subroutine15_0
   \   00000C                ; // Fall through to label ??Subroutine15_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine15_0:
   \   000000   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   000003   E8           MOV     A,R0
   \   000004   49           ORL     A,R1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine16_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FE           MOV     R6,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FF           MOV     R7,A
   \   000005   22           RET
     49          
     50          /****************************************************
     51          	∫Ø ˝√˚:List_Add_Tail
     52          	π¶ƒ‹:	œÚ¡¥±ÌŒ≤≤øÃÌº”“ª∏ˆ‘™Àÿ
     53          	◊˜’ﬂ:	liyao 2016ƒÍ10‘¬26»’
     54          ****************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     55          int8_t List_Add_Tail(List_Head_T* List_Head, void* Data, uint16_t Len){
   \                     List_Add_Tail:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V2,R2
   \   000007   8B..         MOV     ?V3,R3
   \   000009   12....       LCALL   ?Subroutine4 & 0xFFFF
     56          List_Node_T* ListNode = NULL;
     57          	if(List_Head->Size > 0 && List_Head->Count == List_Head->Size){
   \                     ??CrossCallReturnLabel_25:
   \   00000C   6015         JZ      ??List_Add_Tail_0
   \   00000E   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   000011   7003         JNZ     ??List_Add_Tail_1
   \   000013   A3           INC     DPTR
   \   000014   E0           MOVX    A,@DPTR
   \   000015   69           XRL     A,R1
   \                     ??List_Add_Tail_1:
   \   000016   700B         JNZ     ??List_Add_Tail_0
     58          		Log.error("¡¥±Ì¬˙\r\n");
   \   000018                ; Setup parameters for indirect call
   \   000018   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   00001B   12....       LCALL   ?CALL_IND
     59          		return -1;
   \   00001E   79FF         MOV     R1,#-0x1
   \   000020   02....       LJMP    ??CrossCallReturnLabel_5 & 0xFFFF
     60          	}
     61          	//∑÷≈‰ListNode_T
     62          	ListNode = MALLOC(sizeof(List_Node_T)); 
   \                     ??List_Add_Tail_0:
   \   000023                ; Setup parameters for call to function osal_mem_alloc
   \   000023   7A06         MOV     R2,#0x6
   \   000025   7B00         MOV     R3,#0x0
   \   000027   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00002A   8A..         MOV     ?V0,R2
   \   00002C   8B..         MOV     ?V1,R3
     63          	MALLOC_CHECK(ListNode, "List_Add_Tail"); 
   \   00002E   EA           MOV     A,R2
   \   00002F   45..         ORL     A,?V1
   \   000031   700A         JNZ     ??List_Add_Tail_2
   \   000033                ; Setup parameters for indirect call
   \   000033   7A..         MOV     R2,#`?<Constant "\\"List_Add_Tail\\"\\277\\325\\274\\344\\` & 0xff
   \   000035   7B..         MOV     R3,#(`?<Constant "\\"List_Add_Tail\\"\\277\\325\\274\\344\\` >> 8) & 0xff
   \   000037   12....       LCALL   ??Subroutine13_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   00003A   12....       LCALL   ?CALL_IND
   \                     ??List_Add_Tail_2:
   \   00003D   7410         MOV     A,#0x10
   \   00003F   12....       LCALL   ?XSTACK_DISP0_8
   \   000042   12....       LCALL   ?Subroutine7 & 0xFFFF
     64          	ListNode->Data = MALLOC(sizeof(uint8_t) * Len);
   \                     ??CrossCallReturnLabel_7:
   \   000045   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000048   8A..         MOV     ?V4,R2
   \   00004A   8B..         MOV     ?V5,R3
   \   00004C   A8..         MOV     R0,?V4
   \   00004E   A9..         MOV     R1,?V5
   \   000050   85..82       MOV     DPL,?V0
   \   000053   85..83       MOV     DPH,?V1
   \   000056   E8           MOV     A,R0
   \   000057   F0           MOVX    @DPTR,A
   \   000058   A3           INC     DPTR
   \   000059   E9           MOV     A,R1
   \   00005A   F0           MOVX    @DPTR,A
     65          	MALLOC_CHECK(ListNode->Data, "List_Add_Tail"); 
   \   00005B   E8           MOV     A,R0
   \   00005C   49           ORL     A,R1
   \   00005D   700A         JNZ     ??List_Add_Tail_3
   \   00005F                ; Setup parameters for indirect call
   \   00005F   7A..         MOV     R2,#`?<Constant "\\"List_Add_Tail\\"\\277\\325\\274\\344\\` & 0xff
   \   000061   7B..         MOV     R3,#(`?<Constant "\\"List_Add_Tail\\"\\277\\325\\274\\344\\` >> 8) & 0xff
   \   000063   12....       LCALL   ??Subroutine13_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   000066   12....       LCALL   ?CALL_IND
     66          	//∏≥÷µListNode_T 
     67          	ListNode->Next = NULL;
   \                     ??List_Add_Tail_3:
   \   000069   85..82       MOV     DPL,?V0
   \   00006C   85..83       MOV     DPH,?V1
   \   00006F   A3           INC     DPTR
   \   000070   A3           INC     DPTR
   \   000071   A3           INC     DPTR
   \   000072   A3           INC     DPTR
   \   000073   E4           CLR     A
   \   000074   F0           MOVX    @DPTR,A
   \   000075   A3           INC     DPTR
   \   000076   12....       LCALL   ?Subroutine8 & 0xFFFF
     68          	ListNode->Len	 = Len;
   \                     ??CrossCallReturnLabel_10:
   \   000079   12....       LCALL   ?Subroutine9 & 0xFFFF
     69          	memcpy(ListNode->Data, Data, Len); 
   \                     ??CrossCallReturnLabel_12:
   \   00007C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00007F   AC..         MOV     R4,?V6
   \   000081   AD..         MOV     R5,?V7
   \   000083   85..82       MOV     DPL,?V0
   \   000086   85..83       MOV     DPH,?V1
   \   000089   E0           MOVX    A,@DPTR
   \   00008A   FA           MOV     R2,A
   \   00008B   A3           INC     DPTR
   \   00008C   E0           MOVX    A,@DPTR
   \   00008D   FB           MOV     R3,A
   \   00008E   12....       LCALL   `??memcpy::?relay`   ; Banked call to: memcpy
   \   000091   7402         MOV     A,#0x2
   \   000093   12....       LCALL   ?DEALLOC_XSTACK8
     70          	//º”»Î¡¥±Ì
     71          	if(List_Head->Head == NULL){// ◊¥Œº”»Î
   \   000096   85..82       MOV     DPL,?V2
   \   000099   85..83       MOV     DPH,?V3
   \   00009C   12....       LCALL   ??Subroutine15_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   00009F   701F         JNZ     ??List_Add_Tail_4
     72          		List_Head->Head = List_Head->Tail = ListNode;
   \   0000A1   E5..         MOV     A,?V2
   \   0000A3   2402         ADD     A,#0x2
   \   0000A5   FA           MOV     R2,A
   \   0000A6   E4           CLR     A
   \   0000A7   35..         ADDC    A,?V3
   \   0000A9   FB           MOV     R3,A
   \   0000AA   8A82         MOV     DPL,R2
   \   0000AC   8B83         MOV     DPH,R3
   \   0000AE   12....       LCALL   ?Subroutine10 & 0xFFFF
     73          	}else{//“—”– ˝æ›º”»Î 
   \                     ??CrossCallReturnLabel_14:
   \   0000B1   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   0000B4   85..82       MOV     DPL,?V2
   \   0000B7   85..83       MOV     DPH,?V3
   \   0000BA   E8           MOV     A,R0
   \   0000BB   F0           MOVX    @DPTR,A
   \   0000BC   A3           INC     DPTR
   \   0000BD   E9           MOV     A,R1
   \   0000BE   8021         SJMP    ??List_Add_Tail_5
     74          		List_Head->Tail->Next = ListNode;
   \                     ??List_Add_Tail_4:
   \   0000C0   E5..         MOV     A,?V2
   \   0000C2   2402         ADD     A,#0x2
   \   0000C4   F8           MOV     R0,A
   \   0000C5   E4           CLR     A
   \   0000C6   35..         ADDC    A,?V3
   \   0000C8   F9           MOV     R1,A
   \   0000C9   E8           MOV     A,R0
   \   0000CA   FA           MOV     R2,A
   \   0000CB   E9           MOV     A,R1
   \   0000CC   FB           MOV     R3,A
   \   0000CD   8A82         MOV     DPL,R2
   \   0000CF   8B83         MOV     DPH,R3
   \   0000D1   12....       LCALL   ??Subroutine14_0 & 0xFFFF
     75          		List_Head->Tail = ListNode;
     76          	}
   \                     ??CrossCallReturnLabel_15:
   \   0000D4   A3           INC     DPTR
   \   0000D5   A3           INC     DPTR
   \   0000D6   A3           INC     DPTR
   \   0000D7   A3           INC     DPTR
   \   0000D8   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   0000DB   E5..         MOV     A,?V0
   \   0000DD   F0           MOVX    @DPTR,A
   \   0000DE   A3           INC     DPTR
   \   0000DF   E5..         MOV     A,?V1
   \                     ??List_Add_Tail_5:
   \   0000E1   F0           MOVX    @DPTR,A
     77          	List_Head->Count++;
   \   0000E2   85..82       MOV     DPL,?V2
   \   0000E5   85..83       MOV     DPH,?V3
   \   0000E8   12....       LCALL   ?Subroutine6 & 0xFFFF
     78          	return 0;
   \                     ??CrossCallReturnLabel_5:
   \   0000EB   02....       LJMP    ?Subroutine1 & 0xFFFF
     79          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   E5..         MOV     A,?V0
   \   000002   F0           MOVX    @DPTR,A
   \   000003   A3           INC     DPTR
   \   000004   E5..         MOV     A,?V1
   \   000006   F0           MOVX    @DPTR,A
   \   000007   8A82         MOV     DPL,R2
   \   000009   8B83         MOV     DPH,R3
   \   00000B   22           RET
     80          
     81          /****************************************************
     82          	∫Ø ˝√˚:List_Remove
     83          	π¶ƒ‹: “∆≥˝¡¥±ÌΩ⁄µ„
     84          	◊˜’ﬂ:	liyao 2016ƒÍ10‘¬26»’
     85          ****************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     86          int8_t List_Remove(List_Head_T* List_Head, List_Node_T* List_Node){
   \                     List_Remove:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL   ?Subroutine12 & 0xFFFF
     87          	List_Node_T* cur = List_Head->Head;
     88          	List_Node_T* last = NULL;
   \                     ??CrossCallReturnLabel_32:
   \   000008   75..00       MOV     ?V0,#0x0
   \   00000B   75..00       MOV     ?V1,#0x0
     89          	List_Node_T* next = NULL;
   \   00000E   800F         SJMP    ??CrossCallReturnLabel_33
     90          	while(cur != NULL){
     91          		if(cur == List_Node){
     92          			next = List_Node->Next;
     93          			FREE(cur->Data);
     94          			FREE(cur); 
     95          			if(last != NULL)
     96          				last->Next = next;
     97          			return 0;
     98          			
     99          		}
    100          		last = cur;
   \                     ??List_Remove_0:
   \   000010   8E..         MOV     ?V0,R6
   \   000012   8F..         MOV     ?V1,R7
    101          		cur = cur->Next;
   \   000014   8E82         MOV     DPL,R6
   \   000016   8F83         MOV     DPH,R7
   \   000018   A3           INC     DPTR
   \   000019   A3           INC     DPTR
   \   00001A   A3           INC     DPTR
   \   00001B   A3           INC     DPTR
   \   00001C   12....       LCALL   ??Subroutine16_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   00001F   EE           MOV     A,R6
   \   000020   4F           ORL     A,R7
   \   000021   6034         JZ      ??List_Remove_1
   \   000023   EC           MOV     A,R4
   \   000024   6E           XRL     A,R6
   \   000025   7002         JNZ     ??List_Remove_2
   \   000027   ED           MOV     A,R5
   \   000028   6F           XRL     A,R7
   \                     ??List_Remove_2:
   \   000029   70E5         JNZ     ??List_Remove_0
   \   00002B   8C82         MOV     DPL,R4
   \   00002D   8D83         MOV     DPH,R5
   \   00002F   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   000032   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000035                ; Setup parameters for call to function osal_mem_free
   \   000035   EE           MOV     A,R6
   \   000036   FA           MOV     R2,A
   \   000037   EF           MOV     A,R7
   \   000038   FB           MOV     R3,A
   \   000039   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   00003C   E5..         MOV     A,?V0
   \   00003E   45..         ORL     A,?V1
   \   000040   6011         JZ      ??List_Remove_3
   \   000042   85..82       MOV     DPL,?V0
   \   000045   85..83       MOV     DPH,?V1
   \   000048   A3           INC     DPTR
   \   000049   A3           INC     DPTR
   \   00004A   A3           INC     DPTR
   \   00004B   A3           INC     DPTR
   \   00004C   E5..         MOV     A,?V2
   \   00004E   F0           MOVX    @DPTR,A
   \   00004F   A3           INC     DPTR
   \   000050   E5..         MOV     A,?V3
   \   000052   F0           MOVX    @DPTR,A
   \                     ??List_Remove_3:
   \   000053   7900         MOV     R1,#0x0
   \   000055   800F         SJMP    ??List_Remove_4
    102          	}
    103          	Log.waring("List_RemoveŒ¥’“µΩΩ⁄µ„\r\n");
   \                     ??List_Remove_1:
   \   000057                ; Setup parameters for indirect call
   \   000057   7A..         MOV     R2,#`?<Constant "List_Remove\\316\\264\\325\\322\\265\\27` & 0xff
   \   000059   7B..         MOV     R3,#(`?<Constant "List_Remove\\316\\264\\325\\322\\265\\27` >> 8) & 0xff
   \   00005B   90....       MOV     DPTR,#Log + 2
   \   00005E   12....       LCALL   ??Subroutine14_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   000061   12....       LCALL   ?CALL_IND
    104          	return -1;
   \   000064   79FF         MOV     R1,#-0x1
   \                     ??List_Remove_4:
   \   000066   02....       LJMP    ?Subroutine0 & 0xFFFF
    105          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004                REQUIRE ??Subroutine16_0
   \   000004                ; // Fall through to label ??Subroutine16_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V2,A
   \   000007   A3           INC     DPTR
   \   000008   E0           MOVX    A,@DPTR
   \   000009   F5..         MOV     ?V3,A
   \   00000B                ; Setup parameters for call to function osal_mem_free
   \   00000B                ; Setup parameters for call to function osal_mem_free
   \   00000B   8E82         MOV     DPL,R6
   \   00000D   8F83         MOV     DPH,R7
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   FA           MOV     R2,A
   \   000011   A3           INC     DPTR
   \   000012   E0           MOVX    A,@DPTR
   \   000013   FB           MOV     R3,A
   \   000014   22           RET
    106          
    107          /****************************************************
    108          	∫Ø ˝√˚:List_Free
    109          	π¶ƒ‹:	 Õ∑≈¡¥±Ì
    110          	◊˜’ﬂ:	liyao 2016ƒÍ10‘¬26»’
    111          ****************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    112          int8_t List_Free(List_Head_T* List_Head){
   \                     List_Free:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0,R2
   \   000007   8B..         MOV     ?V1,R3
    113          	List_Node_T* cur = List_Head->Head;
   \   000009   12....       LCALL   ?Subroutine12 & 0xFFFF
    114          	List_Node_T* next = NULL;
   \                     ??CrossCallReturnLabel_35:
   \   00000C   8015         SJMP    ??List_Free_0
    115          	while(cur != NULL){
    116          		next = cur->Next;
   \                     ??List_Free_1:
   \   00000E   8E82         MOV     DPL,R6
   \   000010   8F83         MOV     DPH,R7
   \   000012   12....       LCALL   ?Subroutine3 & 0xFFFF
    117          		FREE(cur->Data);
   \                     ??CrossCallReturnLabel_1:
   \   000015   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    118          		FREE(cur);
   \   000018                ; Setup parameters for call to function osal_mem_free
   \   000018   EE           MOV     A,R6
   \   000019   FA           MOV     R2,A
   \   00001A   EF           MOV     A,R7
   \   00001B   FB           MOV     R3,A
   \   00001C   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    119          		cur = next;
   \   00001F   AE..         MOV     R6,?V2
   \   000021   AF..         MOV     R7,?V3
    120          	}
   \                     ??List_Free_0:
   \   000023   EE           MOV     A,R6
   \   000024   4F           ORL     A,R7
   \   000025   70E7         JNZ     ??List_Free_1
    121          	if(List_Head != NULL)
   \   000027   E5..         MOV     A,?V0
   \   000029   45..         ORL     A,?V1
   \   00002B   6007         JZ      ??List_Free_2
    122          		FREE(List_Head);
   \   00002D                ; Setup parameters for call to function osal_mem_free
   \   00002D   AA..         MOV     R2,?V0
   \   00002F   AB..         MOV     R3,?V1
   \   000031   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    123          	return 0;
   \                     ??List_Free_2:
   \   000034   7900         MOV     R1,#0x0
   \   000036   02....       LJMP    ?Subroutine0 & 0xFFFF
    124          }

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??List_Init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    List_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??List_Add::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    List_Add

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??List_Add_Tail::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    List_Add_Tail

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??List_Remove::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    List_Remove

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??List_Free::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    List_Free

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\"List_Init\\"\\277\\325\\274\\344\\267\\`:
   \   000000   224C6973     DB "\"List_Init\"\277\325\274\344\267\326\305\344\312\247\260\334"
   \            745F496E
   \            697422BF
   \            D5BCE4B7
   \            D6C5E4CA
   \            A7B0DC00

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\301\\264\\261\\355\\302\\372\\r\\n">`:
   \   000000   C1B4B1ED     DB "\301\264\261\355\302\372\015\012"
   \            C2FA0D0A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\"List_Add\\"\\277\\325\\274\\344\\267\\3`:
   \   000000   224C6973     DB "\"List_Add\"\277\325\274\344\267\326\305\344\312\247\260\334"
   \            745F4164
   \            6422BFD5
   \            BCE4B7D6
   \            C5E4CAA7
   \            B0DC00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\"List_Add_Tail\\"\\277\\325\\274\\344\\`:
   \   000000   224C6973     DB "\"List_Add_Tail\"\277\325\274\344\267\326\305\344\312\247\260\334"
   \            745F4164
   \            645F5461
   \            696C22BF
   \            D5BCE4B7
   \            D6C5E4CA
   \            A7B0DC00

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "List_Remove\\316\\264\\325\\322\\265\\27`:
   \   000000   4C697374     DB "List_Remove\316\264\325\322\265\275\275\332\265\343\015\012"
   \            5F52656D
   \            6F7665CE
   \            B4D5D2B5
   \            BDBDDAB5
   \            E30D0A00
    125          
    126          

   Maximum stack usage in bytes:

   XSTACK Function
   ------ --------
     20   List_Add
       18   -> memcpy
       16   -> osal_mem_alloc
     20   List_Add_Tail
       18   -> memcpy
       16   -> osal_mem_alloc
     12   List_Free
       12   -> osal_mem_free
     14   List_Init
       14   -> memset
       12   -> osal_mem_alloc
     12   List_Remove
       12   -> osal_mem_free


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      24  ?<Constant "List_Remove\316\264\325\322\265\27
      23  ?<Constant "\"List_Add\"\277\325\274\344\267\3
      28  ?<Constant "\"List_Add_Tail\"\277\325\274\344\
      24  ?<Constant "\"List_Init\"\277\325\274\344\267\
       9  ?<Constant "\301\264\261\355\302\372\r\n">
       3  ??Subroutine13_0
       9  ??Subroutine14_0
       6  ??Subroutine15_0
       6  ??Subroutine16_0
       5  ?Subroutine0
       5  ?Subroutine1
      12  ?Subroutine10
       6  ?Subroutine11
       4  ?Subroutine12
       4  ?Subroutine2
      21  ?Subroutine3
      12  ?Subroutine4
      24  ?Subroutine5
      18  ?Subroutine6
       8  ?Subroutine7
       8  ?Subroutine8
      14  ?Subroutine9
     233  List_Add
       6  List_Add::?relay
     238  List_Add_Tail
       6  List_Add_Tail::?relay
      57  List_Free
       6  List_Free::?relay
      84  List_Init
       6  List_Init::?relay
     105  List_Remove
       6  List_Remove::?relay

 
 882 bytes in segment BANKED_CODE
  30 bytes in segment BANK_RELAYS
 108 bytes in segment XDATA_ROM_C
 
 912 bytes of CODE  memory
 108 bytes of CONST memory

Errors: none
Warnings: none
