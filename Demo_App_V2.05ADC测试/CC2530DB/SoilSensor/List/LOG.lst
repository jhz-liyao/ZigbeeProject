###############################################################################
#
# IAR C/C++ Compiler V9.30.1.3056 for 8051                24/Nov/2016  11:19:04
# Copyright 2004-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\Frame\LOG.c
#    Command line       =  
#        -f "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f
#        "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=50 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
#        -DREJOIN_POLL_RATE=440 "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\Frame\LOG.c" -D
#        HAL_UART=TRUE -D HAL_UART_ISR=1 -D HAL_UART_DMA=2 -D HOLD_AUTO_START
#        -D LOG_OUT -D UART1_PROTOCOL_RESOLVER=1 -D xISQC -D NWK_AUTO_POLL -D
#        xZTOOL_P1 -D ISR_KEYINTERRUPT -D xMT_TASK -D xMT_SYS_FUNC -D
#        xMT_ZDO_FUNC -D xLCD_SUPPORTED=DEBUG -D xPOWER_SAVING -lC
#        "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\SoilSensor\List"
#        -lA "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\SoilSensor\List"
#        --diag_suppress Pe001,Pa010 -o "E:\LiyaoProject\Zigbee_Project\Z-Stack
#        Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\SoilSensor\Obj"
#        -e --no_code_motion --debug --core=plain --dptr=16,1
#        --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 8 -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\" -I
#        "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\Source\"
#        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\Frame\"
#        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\Module\SoilSensor\"
#        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -Ohz
#    List file          =  
#        E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\SoilSensor\List\LOG.lst
#    Object file        =  
#        E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\SoilSensor\Obj\LOG.r51
#
###############################################################################

E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh 1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\Frame\LOG.c
      1          #include "LOG.h" 
      2          #include "app_types.h"
      3          #include <stdio.h>
      4          #include <stdlib.h>
      5          //------------------------------LOG------------------------------

   \                                 In  segment XDATA_Z, align 1, keep-with-next
      6          Log_T Log = {0};
   \                     Log:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
      7          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
      8          void _error(const char* message){ 
   \                     _error:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
      9          	#ifdef LOG_OUT
     10          		printf("Log->ERROR:%s", message); 
   \   000005                ; Setup parameters for call to function printf
   \   000005   8A..         MOV     ?V0,R2
   \   000007   8B..         MOV     ?V1,R3
   \   000009   78..         MOV     R0,#?V0
   \   00000B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00000E   7A..         MOV     R2,#`?<Constant "Log->ERROR:%s">` & 0xff
   \   000010   7B..         MOV     R3,#(`?<Constant "Log->ERROR:%s">` >> 8) & 0xff
   \   000012                REQUIRE ?Subroutine0
   \   000012                ; // Fall through to label ?Subroutine0
     11          	#endif
     12          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   12....       LCALL   `??printf::?relay`   ; Banked call to: printf
   \   000003   7402         MOV     A,#0x2
   \   000005   12....       LCALL   ?DEALLOC_XSTACK8
   \   000008   7F02         MOV     R7,#0x2
   \   00000A   02....       LJMP    ?BANKED_LEAVE_XDATA
     13          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     14          void _warning(const char* message){ 
   \                     _warning:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
     15          	#ifdef LOG_OUT
     16          		printf("Log->WARNING:%s", message); 
   \   000005                ; Setup parameters for call to function printf
   \   000005   8A..         MOV     ?V0,R2
   \   000007   8B..         MOV     ?V1,R3
   \   000009   78..         MOV     R0,#?V0
   \   00000B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00000E   7A..         MOV     R2,#`?<Constant "Log->WARNING:%s">` & 0xff
   \   000010   7B..         MOV     R3,#(`?<Constant "Log->WARNING:%s">` >> 8) & 0xff
   \   000012   80..         SJMP    ?Subroutine0
     17          	#endif
     18          }
     19          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     20          void _info(const char* message){ 
   \                     _info:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
     21          	#ifdef LOG_OUT
     22          		printf("Log->INFO:%s", message); 
   \   000005                ; Setup parameters for call to function printf
   \   000005   8A..         MOV     ?V0,R2
   \   000007   8B..         MOV     ?V1,R3
   \   000009   78..         MOV     R0,#?V0
   \   00000B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00000E   7A..         MOV     R2,#`?<Constant "Log->INFO:%s">` & 0xff
   \   000010   7B..         MOV     R3,#(`?<Constant "Log->INFO:%s">` >> 8) & 0xff
   \   000012   80..         SJMP    ?Subroutine0
     23          	#endif
     24          }
     25          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     26          void Log_Init(void){
   \                     Log_Init:
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
     27          	Log.error = _error;
   \   000004   90....       MOV     DPTR,#Log + 4
   \   000007   74..         MOV     A,#`??_error::?relay` & 0xff
   \   000009   F0           MOVX    @DPTR,A
   \   00000A   A3           INC     DPTR
   \   00000B   74..         MOV     A,#(`??_error::?relay` >> 8) & 0xff
   \   00000D   F0           MOVX    @DPTR,A
     28          	Log.waring = _warning;
   \   00000E   90....       MOV     DPTR,#Log + 2
   \   000011   74..         MOV     A,#`??_warning::?relay` & 0xff
   \   000013   F0           MOVX    @DPTR,A
   \   000014   A3           INC     DPTR
   \   000015   74..         MOV     A,#(`??_warning::?relay` >> 8) & 0xff
   \   000017   F0           MOVX    @DPTR,A
     29          	Log.info = _info;
   \   000018   90....       MOV     DPTR,#Log
   \   00001B   74..         MOV     A,#`??_info::?relay` & 0xff
   \   00001D   F0           MOVX    @DPTR,A
   \   00001E   A3           INC     DPTR
   \   00001F   74..         MOV     A,#(`??_info::?relay` >> 8) & 0xff
   \   000021   F0           MOVX    @DPTR,A
     30          }
   \   000022   D083         POP     DPH
   \   000024   D082         POP     DPL
   \   000026   02....       LJMP    ?BRET
     31          
     32          /*------------------------------MEM_LOG------------------------------*/

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     33          uint32_t MEM_USE = 0;
   \                     MEM_USE:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     34          Mem_Info_T MemList[POINT_COUNT] = {0};
   \                     MemList:
   \   000000                DS 400
   \   000190                REQUIRE __INIT_XDATA_Z
     35          
     36          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     37          void* os_alloc(uint16_t len){
   \                     os_alloc:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0,R2
   \   000007   8B..         MOV     ?V1,R3
     38          	uint16_t is = 0; 
   \   000009   75..00       MOV     ?V2,#0x0
   \   00000C   75..00       MOV     ?V3,#0x0
     39          	for(is = 0; is < POINT_COUNT; is++){
     40          		if(MemList[is].point == NULL){
   \                     ??os_alloc_0:
   \   00000F   85....       MOV     ?V4,?V2
   \   000012   85....       MOV     ?V5,?V3
   \   000015   7402         MOV     A,#0x2
   \   000017   78..         MOV     R0,#?V4
   \   000019   12....       LCALL   ?S_SHL
   \   00001C   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   00001F   701E         JNZ     ??os_alloc_1
     41          			MemList[is].point = osal_mem_alloc(len);
   \   000021   7402         MOV     A,#0x2
   \   000023   78..         MOV     R0,#?V2
   \   000025   12....       LCALL   ?S_SHL
   \   000028   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   00002B                ; Setup parameters for call to function osal_mem_alloc
   \   00002B   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00002E   12....       LCALL   ?Subroutine2 & 0xFFFF
     42          			MemList[is].len	 = len;
     43          			MEM_USE += len;
   \                     ??CrossCallReturnLabel_0:
   \   000031   12....       LCALL   ?L_ADD_TO_X
     44          			//printf("s:%d\r\n", len);
     45          			return MemList[is].point;
   \   000034   8E82         MOV     DPL,R6
   \   000036   8F83         MOV     DPH,R7
   \   000038   E0           MOVX    A,@DPTR
   \   000039   FA           MOV     R2,A
   \   00003A   A3           INC     DPTR
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   FB           MOV     R3,A
   \   00003D   8015         SJMP    ??os_alloc_2
     46          		}
     47          	}
   \                     ??os_alloc_1:
   \   00003F   05..         INC     ?V2
   \   000041   E5..         MOV     A,?V2
   \   000043   7002         JNZ     ??os_alloc_3
   \   000045   05..         INC     ?V3
   \                     ??os_alloc_3:
   \   000047   C3           CLR     C
   \   000048   9464         SUBB    A,#0x64
   \   00004A   E5..         MOV     A,?V3
   \   00004C   9400         SUBB    A,#0x0
   \   00004E   40BF         JC      ??os_alloc_0
     48          	//Log.error("∑÷≈‰ ß∞‹\r\n");
     49          	return NULL;
   \   000050   7A00         MOV     R2,#0x0
   \   000052   7B00         MOV     R3,#0x0
   \                     ??os_alloc_2:
   \   000054                REQUIRE ?Subroutine1
   \   000054                ; // Fall through to label ?Subroutine1
     50          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7F06         MOV     R7,#0x6
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   74..         MOV     A,#MemList & 0xff
   \   000002   25..         ADD     A,?V2
   \   000004   FE           MOV     R6,A
   \   000005   74..         MOV     A,#(MemList >> 8) & 0xff
   \   000007   35..         ADDC    A,?V3
   \   000009   FF           MOV     R7,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   74..         MOV     A,#MemList & 0xff
   \   000002   25..         ADD     A,?V4
   \   000004   F582         MOV     DPL,A
   \   000006   74..         MOV     A,#(MemList >> 8) & 0xff
   \   000008   35..         ADDC    A,?V5
   \   00000A   F583         MOV     DPH,A
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   F8           MOV     R0,A
   \   00000E   A3           INC     DPTR
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   F9           MOV     R1,A
   \   000011   E8           MOV     A,R0
   \   000012   49           ORL     A,R1
   \   000013   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004   EA           MOV     A,R2
   \   000005   F0           MOVX    @DPTR,A
   \   000006   A3           INC     DPTR
   \   000007   EB           MOV     A,R3
   \   000008   F0           MOVX    @DPTR,A
   \   000009   8E82         MOV     DPL,R6
   \   00000B   8F83         MOV     DPH,R7
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   E5..         MOV     A,?V0
   \   000011   F0           MOVX    @DPTR,A
   \   000012   A3           INC     DPTR
   \   000013   E5..         MOV     A,?V1
   \   000015   F0           MOVX    @DPTR,A
   \   000016   E4           CLR     A
   \   000017   F5..         MOV     ?V2,A
   \   000019   F5..         MOV     ?V3,A
   \   00001B   90....       MOV     DPTR,#MEM_USE
   \   00001E   78..         MOV     R0,#?V0
   \   000020   22           RET
     51          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     52          void* os_calloc(uint16_t len, uint16_t size){
   \                     os_calloc:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0,R2
   \   000007   8B..         MOV     ?V1,R3
     53          	uint16_t is = 0; 
   \   000009   75..00       MOV     ?V2,#0x0
   \   00000C   75..00       MOV     ?V3,#0x0
     54          	for(is = 0; is < POINT_COUNT; is++){
     55          		if(MemList[is].point == NULL){
   \                     ??os_calloc_0:
   \   00000F   85....       MOV     ?V4,?V2
   \   000012   85....       MOV     ?V5,?V3
   \   000015   7402         MOV     A,#0x2
   \   000017   78..         MOV     R0,#?V4
   \   000019   12....       LCALL   ?S_SHL
   \   00001C   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   00001F   701E         JNZ     ??os_calloc_1
     56          			MemList[is].point = osal_mem_alloc(len);
   \   000021   7402         MOV     A,#0x2
   \   000023   78..         MOV     R0,#?V2
   \   000025   12....       LCALL   ?S_SHL
   \   000028   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   00002B                ; Setup parameters for call to function osal_mem_alloc
   \   00002B   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00002E   12....       LCALL   ?Subroutine2 & 0xFFFF
     57          			MemList[is].len	 = len;
     58          			MEM_USE += len;
   \                     ??CrossCallReturnLabel_1:
   \   000031   12....       LCALL   ?L_ADD_TO_X
     59          			//printf("s:%d\r\n", len);
     60          			return MemList[is].point;
   \   000034   8E82         MOV     DPL,R6
   \   000036   8F83         MOV     DPH,R7
   \   000038   E0           MOVX    A,@DPTR
   \   000039   FA           MOV     R2,A
   \   00003A   A3           INC     DPTR
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   FB           MOV     R3,A
   \   00003D   801F         SJMP    ??os_calloc_2
     61          		}
     62          	}
   \                     ??os_calloc_1:
   \   00003F   05..         INC     ?V2
   \   000041   E5..         MOV     A,?V2
   \   000043   7002         JNZ     ??os_calloc_3
   \   000045   05..         INC     ?V3
   \                     ??os_calloc_3:
   \   000047   C3           CLR     C
   \   000048   9464         SUBB    A,#0x64
   \   00004A   E5..         MOV     A,?V3
   \   00004C   9400         SUBB    A,#0x0
   \   00004E   40BF         JC      ??os_calloc_0
     63          	Log.error("∑÷≈‰ ß∞‹\r\n");
   \   000050                ; Setup parameters for indirect call
   \   000050   7A..         MOV     R2,#`?<Constant "\\267\\326\\305\\344\\312\\247\\260\\334\\r` & 0xff
   \   000052   7B..         MOV     R3,#(`?<Constant "\\267\\326\\305\\344\\312\\247\\260\\334\\r` >> 8) & 0xff
   \   000054   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   000057   12....       LCALL   ?CALL_IND
     64          	return NULL;
   \   00005A   7A00         MOV     R2,#0x0
   \   00005C   7B00         MOV     R3,#0x0
   \                     ??os_calloc_2:
   \   00005E   80..         SJMP    ?Subroutine1
     65          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   90....       MOV     DPTR,#Log + 4
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F8           MOV     R0,A
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   F583         MOV     DPH,A
   \   000009   8882         MOV     DPL,R0
   \   00000B   22           RET
     66          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     67          void os_free(void* point){
   \                     os_free:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
     68          	uint16_t is = 0; 
   \   000005   75..00       MOV     ?V0,#0x0
   \   000008   75..00       MOV     ?V1,#0x0
     69          	for(is = 0; is < POINT_COUNT; is++){
     70          		if(MemList[is].point == point){
   \                     ??os_free_0:
   \   00000B   85....       MOV     ?V2,?V0
   \   00000E   85....       MOV     ?V3,?V1
   \   000011   7402         MOV     A,#0x2
   \   000013   78..         MOV     R0,#?V2
   \   000015   12....       LCALL   ?S_SHL
   \   000018   74..         MOV     A,#MemList & 0xff
   \   00001A   25..         ADD     A,?V2
   \   00001C   F582         MOV     DPL,A
   \   00001E   74..         MOV     A,#(MemList >> 8) & 0xff
   \   000020   35..         ADDC    A,?V3
   \   000022   F583         MOV     DPH,A
   \   000024   E0           MOVX    A,@DPTR
   \   000025   F8           MOV     R0,A
   \   000026   A3           INC     DPTR
   \   000027   E0           MOVX    A,@DPTR
   \   000028   F9           MOV     R1,A
   \   000029   EA           MOV     A,R2
   \   00002A   68           XRL     A,R0
   \   00002B   7002         JNZ     ??os_free_1
   \   00002D   EB           MOV     A,R3
   \   00002E   69           XRL     A,R1
   \                     ??os_free_1:
   \   00002F   704C         JNZ     ??os_free_2
     71          			MEM_USE -= MemList[is].len;
   \   000031   7402         MOV     A,#0x2
   \   000033   78..         MOV     R0,#?V0
   \   000035   12....       LCALL   ?S_SHL
   \   000038   74..         MOV     A,#MemList & 0xff
   \   00003A   25..         ADD     A,?V0
   \   00003C   F8           MOV     R0,A
   \   00003D   74..         MOV     A,#(MemList >> 8) & 0xff
   \   00003F   35..         ADDC    A,?V1
   \   000041   F9           MOV     R1,A
   \   000042   E8           MOV     A,R0
   \   000043   FC           MOV     R4,A
   \   000044   E9           MOV     A,R1
   \   000045   FD           MOV     R5,A
   \   000046   EC           MOV     A,R4
   \   000047   2402         ADD     A,#0x2
   \   000049   F8           MOV     R0,A
   \   00004A   E4           CLR     A
   \   00004B   3D           ADDC    A,R5
   \   00004C   F9           MOV     R1,A
   \   00004D   E8           MOV     A,R0
   \   00004E   FE           MOV     R6,A
   \   00004F   E9           MOV     A,R1
   \   000050   FF           MOV     R7,A
   \   000051   8E82         MOV     DPL,R6
   \   000053   8F83         MOV     DPH,R7
   \   000055   E0           MOVX    A,@DPTR
   \   000056   F5..         MOV     ?V0,A
   \   000058   A3           INC     DPTR
   \   000059   E0           MOVX    A,@DPTR
   \   00005A   F5..         MOV     ?V1,A
   \   00005C   E4           CLR     A
   \   00005D   F5..         MOV     ?V2,A
   \   00005F   F5..         MOV     ?V3,A
   \   000061   90....       MOV     DPTR,#MEM_USE
   \   000064   78..         MOV     R0,#?V0
   \   000066   12....       LCALL   ?L_SUB_FROM_X
     72          			//printf("r:%d\r\n", MemList[i].len);
     73          			MemList[is].point = NULL;
   \   000069   8C82         MOV     DPL,R4
   \   00006B   8D83         MOV     DPH,R5
   \   00006D   E4           CLR     A
   \   00006E   F0           MOVX    @DPTR,A
   \   00006F   A3           INC     DPTR
   \   000070   F0           MOVX    @DPTR,A
     74          			MemList[is].len	 = 0; 
   \   000071   8E82         MOV     DPL,R6
   \   000073   8F83         MOV     DPH,R7
   \   000075   F0           MOVX    @DPTR,A
   \   000076   A3           INC     DPTR
   \   000077   F0           MOVX    @DPTR,A
     75          
     76          			osal_mem_free(point);			
   \   000078                ; Setup parameters for call to function osal_mem_free
   \   000078   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
     77          			return;
   \   00007B   8021         SJMP    ??os_free_3
     78          		}
     79          	}
   \                     ??os_free_2:
   \   00007D   05..         INC     ?V0
   \   00007F   E5..         MOV     A,?V0
   \   000081   7002         JNZ     ??os_free_4
   \   000083   05..         INC     ?V1
   \                     ??os_free_4:
   \   000085   C3           CLR     C
   \   000086   9464         SUBB    A,#0x64
   \   000088   E5..         MOV     A,?V1
   \   00008A   9400         SUBB    A,#0x0
   \   00008C   5003         JNC     $+5
   \   00008E   02....       LJMP    ??os_free_0 & 0xFFFF
     80          	FREE(point);
   \   000091                ; Setup parameters for call to function osal_mem_free
   \   000091   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
     81          	Log.error(" Õ∑≈ ß∞‹\r\n");
   \   000094                ; Setup parameters for indirect call
   \   000094   7A..         MOV     R2,#`?<Constant "\\312\\315\\267\\305\\312\\247\\260\\334\\r` & 0xff
   \   000096   7B..         MOV     R3,#(`?<Constant "\\312\\315\\267\\305\\312\\247\\260\\334\\r` >> 8) & 0xff
   \   000098   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   00009B   12....       LCALL   ?CALL_IND
     82          }
   \                     ??os_free_3:
   \   00009E   7F04         MOV     R7,#0x4
   \   0000A0   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??_error::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    _error

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??_warning::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    _warning

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??_info::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    _info

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??Log_Init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Log_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??os_alloc::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    os_alloc

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??os_calloc::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    os_calloc

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??os_free::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    os_free

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Log->ERROR:%s">`:
   \   000000   4C6F672D     DB "Log->ERROR:%s"
   \            3E455252
   \            4F523A25
   \            7300    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Log->WARNING:%s">`:
   \   000000   4C6F672D     DB "Log->WARNING:%s"
   \            3E574152
   \            4E494E47
   \            3A257300

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Log->INFO:%s">`:
   \   000000   4C6F672D     DB "Log->INFO:%s"
   \            3E494E46
   \            4F3A2573
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\267\\326\\305\\344\\312\\247\\260\\334\\r`:
   \   000000   B7D6C5E4     DB "\267\326\305\344\312\247\260\334\015\012"
   \            CAA7B0DC
   \            0D0A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\312\\315\\267\\305\\312\\247\\260\\334\\r`:
   \   000000   CACDB7C5     DB "\312\315\267\305\312\247\260\334\015\012"
   \            CAA7B0DC
   \            0D0A00  
     83          
     84          
     85          

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      2      0   Log_Init
      0     12   _error
        0     12   -> printf
      0     12   _info
        0     12   -> printf
      0     12   _warning
        0     12   -> printf
      0     14   os_alloc
        0     14   -> osal_mem_alloc
      0     14   os_calloc
        0     14   -> osal_mem_alloc
      0     12   os_free
        0     12   -> osal_mem_free


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      14  ?<Constant "Log->ERROR:%s">
      13  ?<Constant "Log->INFO:%s">
      16  ?<Constant "Log->WARNING:%s">
      11  ?<Constant "\267\326\305\344\312\247\260\334\r
      11  ?<Constant "\312\315\267\305\312\247\260\334\r
      13  ?Subroutine0
       5  ?Subroutine1
      33  ?Subroutine2
      20  ?Subroutine3
      12  ?Subroutine4
      11  ?Subroutine5
       6  Log
      41  Log_Init
       6  Log_Init::?relay
       4  MEM_USE
     400  MemList
      18  _error
       6  _error::?relay
      20  _info
       6  _info::?relay
      20  _warning
       6  _warning::?relay
      84  os_alloc
       6  os_alloc::?relay
      96  os_calloc
       6  os_calloc::?relay
     163  os_free
       6  os_free::?relay

 
 536 bytes in segment BANKED_CODE
  42 bytes in segment BANK_RELAYS
  65 bytes in segment XDATA_ROM_C
 410 bytes in segment XDATA_Z
 
 578 bytes of CODE  memory
  65 bytes of CONST memory
 410 bytes of XDATA memory

Errors: none
Warnings: none
