###############################################################################
#
# IAR C/C++ Compiler V9.30.1.3056 for 8051                24/Nov/2016  11:19:03
# Copyright 2004-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\Frame\ESP8266_Driver.c
#    Command line       =  
#        -f "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f
#        "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=50 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
#        -DREJOIN_POLL_RATE=440 "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\Frame\ESP8266_Driver.c"
#        -D HAL_UART=TRUE -D HAL_UART_ISR=1 -D HAL_UART_DMA=2 -D
#        HOLD_AUTO_START -D LOG_OUT -D UART1_PROTOCOL_RESOLVER=1 -D xISQC -D
#        NWK_AUTO_POLL -D xZTOOL_P1 -D ISR_KEYINTERRUPT -D xMT_TASK -D
#        xMT_SYS_FUNC -D xMT_ZDO_FUNC -D xLCD_SUPPORTED=DEBUG -D xPOWER_SAVING
#        -lC "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\SoilSensor\List"
#        -lA "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\SoilSensor\List"
#        --diag_suppress Pe001,Pa010 -o "E:\LiyaoProject\Zigbee_Project\Z-Stack
#        Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\SoilSensor\Obj"
#        -e --no_code_motion --debug --core=plain --dptr=16,1
#        --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 8 -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\" -I
#        "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\Source\"
#        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\Frame\"
#        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\Module\SoilSensor\"
#        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -Ohz
#    List file          =  
#        E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\SoilSensor\List\ESP8266_Driver.lst
#    Object file        =  
#        E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\SoilSensor\Obj\ESP8266_Driver.r51
#
###############################################################################

E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh 1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\Frame\ESP8266_Driver.c
      1          #include "ESP8266_Driver.h"
      2          #include "hal_uart.h"
      3          #include "OnBoard.h"
      4          #include <stdio.h>
      5          

   \                                 In  segment XDATA_I, align 1, keep-with-next
      6          ESP8266_CMD_T ESP_8266_CMD = {
   \                     ESP_8266_CMD:
   \   000000                DS 10
   \   00000A                REQUIRE `?<Initializer for ESP_8266_CMD>`
   \   00000A                REQUIRE __INIT_XDATA_I
      7              "AT+CWMODE=%d\r\n",
      8              "AT+CWJAP=\"%s\",\"%s\"\r\n",
      9              "AT+CIPMUX=1\r\n",
     10              "AT+CIPSERVER=1,8080\r\n",
     11              "AT+CIPSEND=%d,%d\r\n"
     12          };
     13          
     14          
     15          //QUEUE_T* ESP8266_Pack_Queue;

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     16          Queue_Head_T* ESP8266_Queue = NULL;
   \                     ESP8266_Queue:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     17          uint8_t* ESP8266_Pack_Buff;
   \                     ESP8266_Pack_Buff:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
     18          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     19          ESP8266_STATE ESP8266_State = ESP8266_BUSY; 
   \                     ESP8266_State:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     20          ESP8266_SECTION ESP8266_Section = ESP8266_INIT; 
   \                     ESP8266_Section:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     21          //uint8_t ESP8266_CONN[CONN_COUNT] = {0}; 

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     22          uint8_t ESP_Change = 0;
   \                     ESP_Change:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     23          //uint8_t ESP8266_Conn_Flag = 0;

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     24          ESP8266_Pack_T pack = {0};
   \                     pack:
   \   000000                DS 3
   \   000003                REQUIRE __INIT_XDATA_Z
     25          
     26          
     27          
     28          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     29          void ESP8266_Init(void){
   \                     ESP8266_Init:
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
     30              //ESP8266_Pack_Buff = (uint8_t*)osal_mem_alloc(ESP8266_PACK_LEN * sizeof(ESP8266_Pack_T));
     31              //ESP8266_Pack_Queue = Queue_Init(ESP8266_Pack_Buff , sizeof(ESP8266_Pack_T), ESP8266_PACK_LEN);
     32              ESP8266_Queue = Queue_Link_Init(0);
   \   000004                ; Setup parameters for call to function Queue_Link_Init
   \   000004   7A00         MOV     R2,#0x0
   \   000006   7B00         MOV     R3,#0x0
   \   000008   12....       LCALL   `??Queue_Link_Init::?relay`; Banked call to: Queue_Link_Init
   \   00000B   90....       MOV     DPTR,#ESP8266_Queue
   \   00000E   EA           MOV     A,R2
   \   00000F   F0           MOVX    @DPTR,A
   \   000010   A3           INC     DPTR
   \   000011   EB           MOV     A,R3
   \   000012   F0           MOVX    @DPTR,A
     33              
     34          }
   \   000013                REQUIRE ?Subroutine0
   \   000013                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
     35          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     36          void ESP8266_Poll(uint8_t* data, uint8_t len){
   \                     ESP8266_Poll:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
     37            if(ESP8266_Section == ESP8266_INIT){
   \   000009   90....       MOV     DPTR,#ESP8266_Section
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   7077         JNZ     ??ESP8266_Poll_0
     38                if(strstr((char const*)data,"ready") != NULL || strstr((char const*)data,"OK") != NULL){
   \   00000F                ; Setup parameters for call to function strstr
   \   00000F   7C..         MOV     R4,#`?<Constant "ready">` & 0xff
   \   000011   7D..         MOV     R5,#(`?<Constant "ready">` >> 8) & 0xff
   \   000013   12....       LCALL   `??strstr::?relay`   ; Banked call to: strstr
   \   000016   8B..         MOV     ?V1,R3
   \   000018   EA           MOV     A,R2
   \   000019   45..         ORL     A,?V1
   \   00001B   7012         JNZ     ??ESP8266_Poll_1
   \   00001D                ; Setup parameters for call to function strstr
   \   00001D   7C..         MOV     R4,#`?<Constant "OK">` & 0xff
   \   00001F   7D..         MOV     R5,#(`?<Constant "OK">` >> 8) & 0xff
   \   000021   EE           MOV     A,R6
   \   000022   FA           MOV     R2,A
   \   000023   EF           MOV     A,R7
   \   000024   FB           MOV     R3,A
   \   000025   12....       LCALL   `??strstr::?relay`   ; Banked call to: strstr
   \   000028   8B..         MOV     ?V1,R3
   \   00002A   EA           MOV     A,R2
   \   00002B   45..         ORL     A,?V1
   \   00002D   6006         JZ      ??ESP8266_Poll_2
     39                  Log.waring("¬∑”…∆˜∆Ù∂ØÕÍ≥…\r\n");   
   \                     ??ESP8266_Poll_1:
   \   00002F                ; Setup parameters for indirect call
   \   00002F   7A..         MOV     R2,#`?<Constant "\\302\\267\\323\\311\\306\\367\\306\\364\\2` & 0xff
   \   000031   7B..         MOV     R3,#(`?<Constant "\\302\\267\\323\\311\\306\\367\\306\\364\\2` >> 8) & 0xff
   \   000033   8016         SJMP    ??ESP8266_Poll_3
     40                  ESP8266_Section = ESP8266_CONF;
     41                  ESP8266_State = ESP8266_READY;
     42                }else if(strstr((char const*)data,"WIFI GOT IP") != NULL){ 
   \                     ??ESP8266_Poll_2:
   \   000035                ; Setup parameters for call to function strstr
   \   000035   7C..         MOV     R4,#`?<Constant "WIFI GOT IP">` & 0xff
   \   000037   7D..         MOV     R5,#(`?<Constant "WIFI GOT IP">` >> 8) & 0xff
   \   000039   EE           MOV     A,R6
   \   00003A   FA           MOV     R2,A
   \   00003B   EF           MOV     A,R7
   \   00003C   FB           MOV     R3,A
   \   00003D   12....       LCALL   `??strstr::?relay`   ; Banked call to: strstr
   \   000040   8B..         MOV     ?V1,R3
   \   000042   EA           MOV     A,R2
   \   000043   45..         ORL     A,?V1
   \   000045   6015         JZ      ??ESP8266_Poll_4
     43                  Log.waring("¬∑”…∆˜¡¨Ω”≥…π¶\r\n");
   \   000047                ; Setup parameters for indirect call
   \   000047   7A..         MOV     R2,#`?<Constant "\\302\\267\\323\\311\\306\\367\\301\\254\\2` & 0xff
   \   000049   7B..         MOV     R3,#(`?<Constant "\\302\\267\\323\\311\\306\\367\\301\\254\\2` >> 8) & 0xff
   \                     ??ESP8266_Poll_3:
   \   00004B   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   00004E   12....       LCALL   ?CALL_IND
     44                  ESP8266_Section = ESP8266_CONF;
   \   000051   90....       MOV     DPTR,#ESP8266_Section
   \   000054   7401         MOV     A,#0x1
   \   000056   F0           MOVX    @DPTR,A
     45                  ESP8266_State = ESP8266_READY;
   \   000057   90....       MOV     DPTR,#ESP8266_State
   \   00005A   807C         SJMP    ??ESP8266_Poll_5
     46                }else if(strstr((char const*)data,"WIFI DISCONNECT") != NULL){
   \                     ??ESP8266_Poll_4:
   \   00005C                ; Setup parameters for call to function strstr
   \   00005C   7C..         MOV     R4,#`?<Constant "WIFI DISCONNECT">` & 0xff
   \   00005E   7D..         MOV     R5,#(`?<Constant "WIFI DISCONNECT">` >> 8) & 0xff
   \   000060   EE           MOV     A,R6
   \   000061   FA           MOV     R2,A
   \   000062   EF           MOV     A,R7
   \   000063   FB           MOV     R3,A
   \   000064   12....       LCALL   `??strstr::?relay`   ; Banked call to: strstr
   \   000067   8B..         MOV     ?V1,R3
   \   000069   EA           MOV     A,R2
   \   00006A   45..         ORL     A,?V1
   \   00006C   7003         JNZ     $+5
   \   00006E   02....       LJMP    ??ESP8266_Poll_6 & 0xFFFF
     47                  ESP8266_State = ESP8266_CONNFAIL;
   \   000071   90....       MOV     DPTR,#ESP8266_State
   \   000074   7406         MOV     A,#0x6
   \   000076   F0           MOVX    @DPTR,A
     48                  Log.waring("¬∑”…∆˜¡¨Ω” ß∞‹\r\n"); 
   \   000077                ; Setup parameters for indirect call
   \   000077   7A..         MOV     R2,#`?<Constant "\\302\\267\\323\\311\\306\\367\\301\\254\\2_1` & 0xff
   \   000079   7B..         MOV     R3,#(`?<Constant "\\302\\267\\323\\311\\306\\367\\301\\254\\2_1` >> 8) & 0xff
   \   00007B   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   00007E   12....       LCALL   ?CALL_IND
     49                  ESP8266_Section = ESP8266_CONF;
   \   000081   90....       MOV     DPTR,#ESP8266_Section
   \   000084   8050         SJMP    ??ESP8266_Poll_7
     50                }
     51            }else if(ESP8266_Section == ESP8266_WORK || ESP8266_Section == ESP8266_CONF ){
   \                     ??ESP8266_Poll_0:
   \   000086   6402         XRL     A,#0x2
   \   000088   6005         JZ      ??ESP8266_Poll_8
   \   00008A   E0           MOVX    A,@DPTR
   \   00008B   6401         XRL     A,#0x1
   \   00008D   7068         JNZ     ??ESP8266_Poll_6
     52                if(strstr((char const*)data,"CONNECT") != NULL){
   \                     ??ESP8266_Poll_8:
   \   00008F                ; Setup parameters for call to function strstr
   \   00008F   7C..         MOV     R4,#`?<Constant "CONNECT">` & 0xff
   \   000091   7D..         MOV     R5,#(`?<Constant "CONNECT">` >> 8) & 0xff
   \   000093   12....       LCALL   `??strstr::?relay`   ; Banked call to: strstr
   \   000096   8B..         MOV     ?V1,R3
   \   000098   EA           MOV     A,R2
   \   000099   45..         ORL     A,?V1
   \   00009B   600C         JZ      ??ESP8266_Poll_9
     53          //        ESP8266_CONN[(*data)-(uint8_t)'0'] = 1;
     54          //        ESP8266_Conn_Flag |=  1 << ((*data)-(uint8_t)'0');
     55                  ESP8266_State = ESP8266_READY;
   \   00009D   90....       MOV     DPTR,#ESP8266_State
   \   0000A0   7401         MOV     A,#0x1
   \   0000A2   F0           MOVX    @DPTR,A
     56                  Log.waring("÷’∂À¡¨Ω”\r\n");
   \   0000A3                ; Setup parameters for indirect call
   \   0000A3   7A..         MOV     R2,#`?<Constant "\\326\\325\\266\\313\\301\\254\\275\\323\\r` & 0xff
   \   0000A5   7B..         MOV     R3,#(`?<Constant "\\326\\325\\266\\313\\301\\254\\275\\323\\r` >> 8) & 0xff
   \   0000A7   8048         SJMP    ??ESP8266_Poll_10
     57                }else if(strstr((char const*)data,"CLOSED") != NULL){ 
   \                     ??ESP8266_Poll_9:
   \   0000A9                ; Setup parameters for call to function strstr
   \   0000A9   7C..         MOV     R4,#`?<Constant "CLOSED">` & 0xff
   \   0000AB   7D..         MOV     R5,#(`?<Constant "CLOSED">` >> 8) & 0xff
   \   0000AD   EE           MOV     A,R6
   \   0000AE   FA           MOV     R2,A
   \   0000AF   EF           MOV     A,R7
   \   0000B0   FB           MOV     R3,A
   \   0000B1   12....       LCALL   `??strstr::?relay`   ; Banked call to: strstr
   \   0000B4   8B..         MOV     ?V1,R3
   \   0000B6   EA           MOV     A,R2
   \   0000B7   45..         ORL     A,?V1
   \   0000B9   6006         JZ      ??ESP8266_Poll_11
     58          //        ESP8266_Conn_Flag &=  0 << ((*data)-(uint8_t)'0');
     59                  Log.waring("÷’∂ÀÕÀ≥ˆ\r\n");
   \   0000BB                ; Setup parameters for indirect call
   \   0000BB   7A..         MOV     R2,#`?<Constant "\\326\\325\\266\\313\\315\\313\\263\\366\\r` & 0xff
   \   0000BD   7B..         MOV     R3,#(`?<Constant "\\326\\325\\266\\313\\315\\313\\263\\366\\r` >> 8) & 0xff
   \   0000BF   8030         SJMP    ??ESP8266_Poll_10
     60                }else if(strstr((char const*)data,"OK") != NULL){
   \                     ??ESP8266_Poll_11:
   \   0000C1                ; Setup parameters for call to function strstr
   \   0000C1   7C..         MOV     R4,#`?<Constant "OK">` & 0xff
   \   0000C3   7D..         MOV     R5,#(`?<Constant "OK">` >> 8) & 0xff
   \   0000C5   EE           MOV     A,R6
   \   0000C6   FA           MOV     R2,A
   \   0000C7   EF           MOV     A,R7
   \   0000C8   FB           MOV     R3,A
   \   0000C9   12....       LCALL   `??strstr::?relay`   ; Banked call to: strstr
   \   0000CC   8B..         MOV     ?V1,R3
   \   0000CE   EA           MOV     A,R2
   \   0000CF   45..         ORL     A,?V1
   \   0000D1   6008         JZ      ??ESP8266_Poll_12
     61                  ESP8266_State = ESP8266_READY;
   \   0000D3   90....       MOV     DPTR,#ESP8266_State
   \                     ??ESP8266_Poll_7:
   \   0000D6   7401         MOV     A,#0x1
   \                     ??ESP8266_Poll_5:
   \   0000D8   F0           MOVX    @DPTR,A
   \   0000D9   801C         SJMP    ??ESP8266_Poll_6
     62                }else if(strstr((char const*)data,"ERROR") != NULL){
   \                     ??ESP8266_Poll_12:
   \   0000DB                ; Setup parameters for call to function strstr
   \   0000DB   7C..         MOV     R4,#`?<Constant "ERROR">` & 0xff
   \   0000DD   7D..         MOV     R5,#(`?<Constant "ERROR">` >> 8) & 0xff
   \   0000DF   EE           MOV     A,R6
   \   0000E0   FA           MOV     R2,A
   \   0000E1   EF           MOV     A,R7
   \   0000E2   FB           MOV     R3,A
   \   0000E3   12....       LCALL   `??strstr::?relay`   ; Banked call to: strstr
   \   0000E6   8B..         MOV     ?V1,R3
   \   0000E8   EA           MOV     A,R2
   \   0000E9   45..         ORL     A,?V1
   \   0000EB   600A         JZ      ??ESP8266_Poll_6
     63                  //ESP8266_State = ESP8266_ERROR; 
     64                  Log.waring("WIFIƒ£øÈERROR\r\n"); 
   \   0000ED                ; Setup parameters for indirect call
   \   0000ED   7A..         MOV     R2,#`?<Constant "WIFI\\304\\243\\277\\351ERROR\\r\\n">` & 0xff
   \   0000EF   7B..         MOV     R3,#(`?<Constant "WIFI\\304\\243\\277\\351ERROR\\r\\n">` >> 8) & 0xff
     65                } 
     66            } 
   \                     ??ESP8266_Poll_10:
   \   0000F1   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   0000F4   12....       LCALL   ?CALL_IND
     67          }
   \                     ??ESP8266_Poll_6:
   \   0000F7   7F02         MOV     R7,#0x2
   \   0000F9   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   90....       MOV     DPTR,#Log + 2
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F8           MOV     R0,A
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   F583         MOV     DPH,A
   \   000009   8882         MOV     DPL,R0
   \   00000B   22           RET
     68          
     69          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     70          void ESP8266_Run(void){ 
   \                     ESP8266_Run:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
     71            if(ESP8266_Section == ESP8266_INIT){
   \   000005   90....       MOV     DPTR,#ESP8266_Section
   \   000008   E0           MOVX    A,@DPTR
   \   000009   6053         JZ      ??ESP8266_Run_0
     72              return;
     73            }else if(ESP8266_Section == ESP8266_CONF){  
   \   00000B   6401         XRL     A,#0x1
   \   00000D   700F         JNZ     ??ESP8266_Run_1
     74              ESP8266_CMD_Send("AT+CIPSTART=\"TCP\",\"198.55.114.161\",8081\r\n");
   \   00000F                ; Setup parameters for call to function ESP8266_CMD_Send
   \   00000F   7A..         MOV     R2,#`?<Constant "AT+CIPSTART=\\"TCP\\",\\"19...">` & 0xff
   \   000011   7B..         MOV     R3,#(`?<Constant "AT+CIPSTART=\\"TCP\\",\\"19...">` >> 8) & 0xff
   \   000013   12....       LCALL   `??ESP8266_CMD_Send::?relay`; Banked call to: ESP8266_CMD_Send
     75              ESP8266_Section = ESP8266_WORK;
   \   000016   90....       MOV     DPTR,#ESP8266_Section
   \   000019   7402         MOV     A,#0x2
   \   00001B   F0           MOVX    @DPTR,A
   \   00001C   8040         SJMP    ??ESP8266_Run_0
     76            }else if(ESP8266_Section == ESP8266_WORK){
   \                     ??ESP8266_Run_1:
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   6402         XRL     A,#0x2
   \   000021   703B         JNZ     ??ESP8266_Run_0
     77               if(ESP8266_State == ESP8266_READY){  
   \   000023   90....       MOV     DPTR,#ESP8266_State
   \   000026   E0           MOVX    A,@DPTR
   \   000027   6401         XRL     A,#0x1
   \   000029   7033         JNZ     ??ESP8266_Run_0
     78                  uint8_t len = Queue_Link_OutSize(ESP8266_Queue);
   \   00002B                ; Setup parameters for call to function Queue_Link_OutSize
   \   00002B   12....       LCALL   ??Subroutine5_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   00002E   12....       LCALL   `??Queue_Link_OutSize::?relay`; Banked call to: Queue_Link_OutSize
   \   000031   EA           MOV     A,R2
   \   000032   F5..         MOV     ?V0,A
     79                  uint8_t* tmpData = osal_mem_alloc(len); 
   \   000034                ; Setup parameters for call to function osal_mem_alloc
   \   000034   7B00         MOV     R3,#0x0
   \   000036   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000039   8A..         MOV     ?V2,R2
   \   00003B   8B..         MOV     ?V3,R3
   \   00003D   AE..         MOV     R6,?V2
   \   00003F   AF..         MOV     R7,?V3
     80                  if(Queue_Link_Get(ESP8266_Queue,tmpData) == 0){
   \   000041                ; Setup parameters for call to function Queue_Link_Get
   \   000041   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   000044   12....       LCALL   `??Queue_Link_Get::?relay`; Banked call to: Queue_Link_Get
   \   000047   E9           MOV     A,R1
   \   000048   700D         JNZ     ??ESP8266_Run_2
     81                      //ESP8266_State = ESP8266_BUSY;
     82                      HalUARTWrite(HAL_UART_PORT_1,tmpData, len);
   \   00004A                ; Setup parameters for call to function HalUARTWrite
   \   00004A   AC..         MOV     R4,?V0
   \   00004C   7D00         MOV     R5,#0x0
   \   00004E   EE           MOV     A,R6
   \   00004F   FA           MOV     R2,A
   \   000050   EF           MOV     A,R7
   \   000051   FB           MOV     R3,A
   \   000052   7901         MOV     R1,#0x1
   \   000054   12....       LCALL   `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
     83          //            HalUARTWrite(HAL_UART_PORT_0,pack.data, pack.len); 
     84          //            printf("∑¢ÀÕ∏¯WIFI:%X %X %X %X %X %X %X %X %X \r\n",tmpData[0],tmpData[1],tmpData[2],tmpData[3],
     85          //                 tmpData[4],tmpData[5],tmpData[6],tmpData[7],tmpData[8]);
     86                      
     87                  }  
     88                  osal_mem_free(tmpData);
   \                     ??ESP8266_Run_2:
   \   000057                ; Setup parameters for call to function osal_mem_free
   \   000057   EE           MOV     A,R6
   \   000058   FA           MOV     R2,A
   \   000059   EF           MOV     A,R7
   \   00005A   FB           MOV     R3,A
   \   00005B   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
     89               } 
     90            } 
     91          }
   \                     ??ESP8266_Run_0:
   \   00005E                REQUIRE ?Subroutine1
   \   00005E                ; // Fall through to label ?Subroutine1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7F04         MOV     R7,#0x4
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   EE           MOV     A,R6
   \   000001   FC           MOV     R4,A
   \   000002   EF           MOV     A,R7
   \   000003   FD           MOV     R5,A
   \   000004                REQUIRE ??Subroutine5_0
   \   000004                ; // Fall through to label ??Subroutine5_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine5_0:
   \   000000   90....       MOV     DPTR,#ESP8266_Queue
   \   000003                REQUIRE ??Subroutine6_0
   \   000003                ; // Fall through to label ??Subroutine6_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine6_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FB           MOV     R3,A
   \   000005   22           RET
     92          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     93          int8_t ESP8266_CMD_Send(uint8_t* CMD){ 
   \                     ESP8266_CMD_Send:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
     94          //  uint8_t len = ;
     95          //  pack.len = len;
     96          //  pack.data = (uint8_t*)osal_mem_alloc(len);
     97          //  memcpy(pack.data, CMD, len); 
     98          //  Queue_Put(ESP8266_Pack_Queue, &pack);
     99          //  
    100            Queue_Link_Put(ESP8266_Queue, CMD, strlen((char const*)CMD));
   \   000009                ; Setup parameters for call to function strlen
   \   000009   12....       LCALL   `??strlen::?relay`   ; Banked call to: strlen
   \   00000C   8A..         MOV     ?V0,R2
   \   00000E   8B..         MOV     ?V1,R3
   \   000010                ; Setup parameters for call to function Queue_Link_Put
   \   000010   78..         MOV     R0,#?V0
   \   000012   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000015   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   000018   12....       LCALL   `??Queue_Link_Put::?relay`; Banked call to: Queue_Link_Put
   \   00001B   7402         MOV     A,#0x2
   \   00001D   12....       LCALL   ?DEALLOC_XSTACK8
    101            
    102            return 0;
   \   000020   7900         MOV     R1,#0x0
   \   000022   80..         SJMP    ?Subroutine1
    103          }
    104          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    105          void ESP8266_Data_Send(uint8_t *data, uint8_t  len){  
   \                     ESP8266_Data_Send:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 100
   \   000005   749C         MOV     A,#-0x64
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   \   00000E   89..         MOV     ?V1,R1
    106              do{
    107                 uint8_t tmpData[100] = {0};
   \   000010   90....       MOV     DPTR,#`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0`
   \   000013   AC..         MOV     R4,?XSP + 0
   \   000015   AD..         MOV     R5,?XSP + 1
   \   000017   7464         MOV     A,#0x64
   \   000019   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    108                 uint8_t cnt = sprintf((char *)tmpData, (char const *)"AT+CIPSEND=%d\r\n", len); 
   \   00001C                ; Setup parameters for call to function sprintf
   \   00001C   89..         MOV     ?V2,R1
   \   00001E   F5..         MOV     ?V3,A
   \   000020   78..         MOV     R0,#?V2
   \   000022   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000025   7C..         MOV     R4,#`?<Constant "AT+CIPSEND=%d\\r\\n">` & 0xff
   \   000027   7D..         MOV     R5,#(`?<Constant "AT+CIPSEND=%d\\r\\n">` >> 8) & 0xff
   \   000029   7402         MOV     A,#0x2
   \   00002B   12....       LCALL   ?XSTACK_DISP101_8
   \   00002E   12....       LCALL   `??sprintf::?relay`  ; Banked call to: sprintf
   \   000031   7402         MOV     A,#0x2
   \   000033   12....       LCALL   ?DEALLOC_XSTACK8
   \   000036   8A..         MOV     ?V2,R2
    109                 Queue_Link_Put(ESP8266_Queue, tmpData, cnt);
   \   000038                ; Setup parameters for call to function Queue_Link_Put
   \   000038   78..         MOV     R0,#?V2
   \   00003A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003D   7402         MOV     A,#0x2
   \   00003F   12....       LCALL   ?XSTACK_DISP102_8
   \   000042   12....       LCALL   ??Subroutine5_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   000045   12....       LCALL   `??Queue_Link_Put::?relay`; Banked call to: Queue_Link_Put
   \   000048   7402         MOV     A,#0x2
   \   00004A   12....       LCALL   ?DEALLOC_XSTACK8
    110                 Queue_Link_Put(ESP8266_Queue, data, len); 
   \   00004D                ; Setup parameters for call to function Queue_Link_Put
   \   00004D   85....       MOV     ?V2,?V1
   \   000050   78..         MOV     R0,#?V2
   \   000052   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000055   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   000058   12....       LCALL   `??Queue_Link_Put::?relay`; Banked call to: Queue_Link_Put
   \   00005B   7402         MOV     A,#0x2
   \   00005D   12....       LCALL   ?DEALLOC_XSTACK8
    111                           printf("∑¢ÀÕ∏¯WIFI:%X %X %X %X %X %X %X %X %X \r\n",data[0],data[1],data[2],data[3],
    112                           data[4],data[5],data[6],data[7],data[8]);
   \   000060                ; Setup parameters for call to function printf
   \   000060   8E82         MOV     DPL,R6
   \   000062   8F83         MOV     DPH,R7
   \   000064   A3           INC     DPTR
   \   000065   12....       LCALL   ?Subroutine2 & 0xFFFF
    113              }while(0);
   \                     ??CrossCallReturnLabel_17:
   \   000068   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00006B   8E82         MOV     DPL,R6
   \   00006D   8F83         MOV     DPH,R7
   \   00006F   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   000072   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000075   8E82         MOV     DPL,R6
   \   000077   8F83         MOV     DPH,R7
   \   000079   12....       LCALL   ??Subroutine7_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   00007C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00007F   8E82         MOV     DPL,R6
   \   000081   8F83         MOV     DPH,R7
   \   000083   12....       LCALL   ??Subroutine8_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   000086   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000089   8E82         MOV     DPL,R6
   \   00008B   8F83         MOV     DPH,R7
   \   00008D   12....       LCALL   ??Subroutine9_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   000090   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000093   8E82         MOV     DPL,R6
   \   000095   8F83         MOV     DPH,R7
   \   000097   12....       LCALL   ??Subroutine10_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   00009A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00009D   8E82         MOV     DPL,R6
   \   00009F   8F83         MOV     DPH,R7
   \   0000A1   12....       LCALL   ??Subroutine11_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   0000A4   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000A7   8E82         MOV     DPL,R6
   \   0000A9   8F83         MOV     DPH,R7
   \   0000AB   12....       LCALL   ??Subroutine12_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   0000AE   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000B1   8E82         MOV     DPL,R6
   \   0000B3   8F83         MOV     DPH,R7
   \   0000B5   12....       LCALL   ??Subroutine13_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   0000B8   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000BB   7A..         MOV     R2,#`?<Constant "\\267\\242\\313\\315\\270\\370WIFI:%X %X` & 0xff
   \   0000BD   7B..         MOV     R3,#(`?<Constant "\\267\\242\\313\\315\\270\\370WIFI:%X %X` >> 8) & 0xff
   \   0000BF   12....       LCALL   `??printf::?relay`   ; Banked call to: printf
   \   0000C2   7412         MOV     A,#0x12
   \   0000C4   12....       LCALL   ?DEALLOC_XSTACK8
    114          }
   \   0000C7   7464         MOV     A,#0x64
   \   0000C9   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000CC   02....       LJMP    ?Subroutine1 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine7_0
   \   000001                ; // Fall through to label ??Subroutine7_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine7_0:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine8_0
   \   000001                ; // Fall through to label ??Subroutine8_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine8_0:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine9_0
   \   000001                ; // Fall through to label ??Subroutine9_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine9_0:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine10_0
   \   000001                ; // Fall through to label ??Subroutine10_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine10_0:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine11_0
   \   000001                ; // Fall through to label ??Subroutine11_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine11_0:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine12_0
   \   000001                ; // Fall through to label ??Subroutine12_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine12_0:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine13_0
   \   000001                ; // Fall through to label ??Subroutine13_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine13_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V2,A
   \   000003   78..         MOV     R0,#?V2
   \   000005   22           RET
    115          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    116          void ESP8266_Protocol_Send(Protocol_Info_T* pi){
   \                     ESP8266_Protocol_Send:
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    117              pi->ProtocolDesc->Send = ESP8266_Data_Send;
   \   000004   EA           MOV     A,R2
   \   000005   240C         ADD     A,#0xc
   \   000007   F582         MOV     DPL,A
   \   000009   E4           CLR     A
   \   00000A   3B           ADDC    A,R3
   \   00000B   F583         MOV     DPH,A
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   F8           MOV     R0,A
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   C8           XCH     A,R0
   \   000012   2406         ADD     A,#0x6
   \   000014   F582         MOV     DPL,A
   \   000016   E4           CLR     A
   \   000017   38           ADDC    A,R0
   \   000018   F583         MOV     DPH,A
   \   00001A   74..         MOV     A,#`??ESP8266_Data_Send::?relay` & 0xff
   \   00001C   F0           MOVX    @DPTR,A
   \   00001D   A3           INC     DPTR
   \   00001E   74..         MOV     A,#(`??ESP8266_Data_Send::?relay` >> 8) & 0xff
   \   000020   F0           MOVX    @DPTR,A
    118              Protocol_Send_Transpond(pi);
   \   000021                ; Setup parameters for call to function Protocol_Send_Transpond
   \   000021   12....       LCALL   `??Protocol_Send_Transpond::?relay`; Banked call to: Protocol_Send_Transpond
    119              
    120          }
   \   000024   02....       LJMP    ?Subroutine0 & 0xFFFF
    121          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    122          void SetSsidPwd(char* SSID, char* PWD){
   \                     SetSsidPwd:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 80
   \   000005   74B0         MOV     A,#-0x50
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0,R2
   \   00000C   8B..         MOV     ?V1,R3
   \   00000E   EC           MOV     A,R4
   \   00000F   FE           MOV     R6,A
   \   000010   ED           MOV     A,R5
   \   000011   FF           MOV     R7,A
    123            char Ssid[20] = {0};
   \   000012   90....       MOV     DPTR,#`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_1`
   \   000015   7414         MOV     A,#0x14
   \   000017   12....       LCALL   ?XSTACK_DISP102_8
   \   00001A   7414         MOV     A,#0x14
   \   00001C   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    124            char  Pwd[20] = {0};
   \   00001F   90....       MOV     DPTR,#`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_2`
   \   000022   AC..         MOV     R4,?XSP + 0
   \   000024   AD..         MOV     R5,?XSP + 1
   \   000026   7414         MOV     A,#0x14
   \   000028   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    125            memcpy(Ssid, SSID, strlen(SSID));
   \   00002B                ; Setup parameters for call to function strlen
   \   00002B   12....       LCALL   `??strlen::?relay`   ; Banked call to: strlen
   \   00002E   8A..         MOV     ?V2,R2
   \   000030   8B..         MOV     ?V3,R3
   \   000032                ; Setup parameters for call to function memcpy
   \   000032   78..         MOV     R0,#?V2
   \   000034   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000037   AC..         MOV     R4,?V0
   \   000039   AD..         MOV     R5,?V1
   \   00003B   7416         MOV     A,#0x16
   \   00003D   12....       LCALL   ?XSTACK_DISP101_8
   \   000040   12....       LCALL   `??memcpy::?relay`   ; Banked call to: memcpy
   \   000043   7402         MOV     A,#0x2
   \   000045   12....       LCALL   ?DEALLOC_XSTACK8
    126            memcpy(Pwd, PWD, strlen(PWD));
   \   000048                ; Setup parameters for call to function strlen
   \   000048   EE           MOV     A,R6
   \   000049   FA           MOV     R2,A
   \   00004A   EF           MOV     A,R7
   \   00004B   FB           MOV     R3,A
   \   00004C   12....       LCALL   `??strlen::?relay`   ; Banked call to: strlen
   \   00004F   8A..         MOV     ?V0,R2
   \   000051   8B..         MOV     ?V1,R3
   \   000053                ; Setup parameters for call to function memcpy
   \   000053   78..         MOV     R0,#?V0
   \   000055   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000058   EE           MOV     A,R6
   \   000059   FC           MOV     R4,A
   \   00005A   EF           MOV     A,R7
   \   00005B   FD           MOV     R5,A
   \   00005C   7402         MOV     A,#0x2
   \   00005E   12....       LCALL   ?XSTACK_DISP101_8
   \   000061   12....       LCALL   `??memcpy::?relay`   ; Banked call to: memcpy
   \   000064   7402         MOV     A,#0x2
   \   000066   12....       LCALL   ?DEALLOC_XSTACK8
    127            uint8_t cmd[40] = {0}; 
   \   000069   90....       MOV     DPTR,#`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_3`
   \   00006C   7428         MOV     A,#0x28
   \   00006E   12....       LCALL   ?XSTACK_DISP102_8
   \   000071   7428         MOV     A,#0x28
   \   000073   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    128            sprintf((char*)cmd, (char const*)ESP_8266_CMD.SsidPwd, Ssid, Pwd);
   \   000076                ; Setup parameters for call to function sprintf
   \   000076   A8..         MOV     R0,?XSP + 0
   \   000078   A9..         MOV     R1,?XSP + 1
   \   00007A   88..         MOV     ?V0,R0
   \   00007C   89..         MOV     ?V1,R1
   \   00007E   78..         MOV     R0,#?V0
   \   000080   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000083   7416         MOV     A,#0x16
   \   000085   12....       LCALL   ?XSTACK_DISP100_8
   \   000088   88..         MOV     ?V0,R0
   \   00008A   89..         MOV     ?V1,R1
   \   00008C   78..         MOV     R0,#?V0
   \   00008E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000091   90....       MOV     DPTR,#ESP_8266_CMD + 2
   \   000094   E0           MOVX    A,@DPTR
   \   000095   FC           MOV     R4,A
   \   000096   A3           INC     DPTR
   \   000097   E0           MOVX    A,@DPTR
   \   000098   FD           MOV     R5,A
   \   000099   742C         MOV     A,#0x2c
   \   00009B   12....       LCALL   ?XSTACK_DISP101_8
   \   00009E   12....       LCALL   `??sprintf::?relay`  ; Banked call to: sprintf
   \   0000A1   7404         MOV     A,#0x4
   \   0000A3   12....       LCALL   ?DEALLOC_XSTACK8
    129            ESP8266_CMD_Send(cmd);
   \   0000A6                ; Setup parameters for call to function ESP8266_CMD_Send
   \   0000A6   7428         MOV     A,#0x28
   \   0000A8   12....       LCALL   ?XSTACK_DISP101_8
   \   0000AB   12....       LCALL   `??ESP8266_CMD_Send::?relay`; Banked call to: ESP8266_CMD_Send
    130            ESP8266_CMD_Send(ESP_8266_CMD.MultiConn);
   \   0000AE                ; Setup parameters for call to function ESP8266_CMD_Send
   \   0000AE   90....       MOV     DPTR,#ESP_8266_CMD + 4
   \   0000B1   12....       LCALL   ??Subroutine6_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   0000B4   12....       LCALL   `??ESP8266_CMD_Send::?relay`; Banked call to: ESP8266_CMD_Send
    131            ESP8266_CMD_Send(ESP_8266_CMD.ServerMode);
   \   0000B7                ; Setup parameters for call to function ESP8266_CMD_Send
   \   0000B7   90....       MOV     DPTR,#ESP_8266_CMD + 6
   \   0000BA   12....       LCALL   ??Subroutine6_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   0000BD   12....       LCALL   `??ESP8266_CMD_Send::?relay`; Banked call to: ESP8266_CMD_Send
    132          }  
   \   0000C0   7450         MOV     A,#0x50
   \   0000C2   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000C5   7F06         MOV     R7,#0x6
   \   0000C7   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for ESP_8266_CMD>`:
   \   000000   ....         DW `?<Constant "AT+CWMODE=%d\\r\\n">`
   \   000002   ....         DW `?<Constant "AT+CWJAP=\\"%s\\",\\"%s\\"\\r\\n">`
   \   000004   ....         DW `?<Constant "AT+CIPMUX=1\\r\\n">`
   \   000006   ....         DW `?<Constant "AT+CIPSERVER=1,8080\\r\\n">`
   \   000008   ....         DW `?<Constant "AT+CIPSEND=%d,%d\\r\\n">`

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ESP8266_Init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ESP8266_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ESP8266_Poll::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ESP8266_Poll

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ESP8266_Run::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ESP8266_Run

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ESP8266_CMD_Send::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ESP8266_CMD_Send

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ESP8266_Data_Send::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ESP8266_Data_Send

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ESP8266_Protocol_Send::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ESP8266_Protocol_Send

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SetSsidPwd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SetSsidPwd

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "AT+CWMODE=%d\\r\\n">`:
   \   000000   41542B43     DB "AT+CWMODE=%d\015\012"
   \            574D4F44
   \            453D2564
   \            0D0A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "AT+CWJAP=\\"%s\\",\\"%s\\"\\r\\n">`:
   \   000000   41542B43     DB "AT+CWJAP=\"%s\",\"%s\"\015\012"
   \            574A4150
   \            3D222573
   \            222C2225
   \            73220D0A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "AT+CIPMUX=1\\r\\n">`:
   \   000000   41542B43     DB "AT+CIPMUX=1\015\012"
   \            49504D55
   \            583D310D
   \            0A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "AT+CIPSERVER=1,8080\\r\\n">`:
   \   000000   41542B43     DB "AT+CIPSERVER=1,8080\015\012"
   \            49505345
   \            52564552
   \            3D312C38
   \            3038300D
   \            0A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "AT+CIPSEND=%d,%d\\r\\n">`:
   \   000000   41542B43     DB "AT+CIPSEND=%d,%d\015\012"
   \            49505345
   \            4E443D25
   \            642C2564
   \            0D0A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "ready">`:
   \   000000   72656164     DB "ready"
   \            7900    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "OK">`:
   \   000000   4F4B00       DB "OK"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\302\\267\\323\\311\\306\\367\\306\\364\\2`:
   \   000000   C2B7D3C9     DB "\302\267\323\311\306\367\306\364\266\257\315\352\263\311\015\012"
   \            C6F7C6F4
   \            B6AFCDEA
   \            B3C90D0A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "WIFI GOT IP">`:
   \   000000   57494649     DB "WIFI GOT IP"
   \            20474F54
   \            20495000

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\302\\267\\323\\311\\306\\367\\301\\254\\2`:
   \   000000   C2B7D3C9     DB "\302\267\323\311\306\367\301\254\275\323\263\311\271\246\015\012"
   \            C6F7C1AC
   \            BDD3B3C9
   \            B9A60D0A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "WIFI DISCONNECT">`:
   \   000000   57494649     DB "WIFI DISCONNECT"
   \            20444953
   \            434F4E4E
   \            45435400

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\302\\267\\323\\311\\306\\367\\301\\254\\2_1`:
   \   000000   C2B7D3C9     DB "\302\267\323\311\306\367\301\254\275\323\312\247\260\334\015\012"
   \            C6F7C1AC
   \            BDD3CAA7
   \            B0DC0D0A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "CONNECT">`:
   \   000000   434F4E4E     DB "CONNECT"
   \            45435400

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\326\\325\\266\\313\\301\\254\\275\\323\\r`:
   \   000000   D6D5B6CB     DB "\326\325\266\313\301\254\275\323\015\012"
   \            C1ACBDD3
   \            0D0A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "CLOSED">`:
   \   000000   434C4F53     DB "CLOSED"
   \            454400  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\326\\325\\266\\313\\315\\313\\263\\366\\r`:
   \   000000   D6D5B6CB     DB "\326\325\266\313\315\313\263\366\015\012"
   \            CDCBB3F6
   \            0D0A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "ERROR">`:
   \   000000   4552524F     DB "ERROR"
   \            5200    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "WIFI\\304\\243\\277\\351ERROR\\r\\n">`:
   \   000000   57494649     DB "WIFI\304\243\277\351ERROR\015\012"
   \            C4A3BFE9
   \            4552524F
   \            520D0A00

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "AT+CIPSTART=\\"TCP\\",\\"19...">`:
   \   000000   41542B43     DB "AT+CIPSTART=\"TCP\",\"198.55.114.161\",8081\015\012"
   \            49505354
   \            4152543D
   \            22544350
   \            222C2231
   \            39382E35
   \            352E3131
   \            342E3136
   \            31222C38
   \            3038310D
   \            0A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0`:
   \   000000   00           DB 0
   \   000001   00           DB 0
   \   000002   00           DB 0
   \   000003   00           DB 0
   \   000004   00           DB 0
   \   000005   00           DB 0
   \   000006   00           DB 0
   \   000007   00           DB 0
   \   000008   00           DB 0
   \   000009   00           DB 0
   \   00000A   00           DB 0
   \   00000B   00           DB 0
   \   00000C   00           DB 0
   \   00000D   00           DB 0
   \   00000E   00           DB 0
   \   00000F   00           DB 0
   \   000010   00           DB 0
   \   000011   00           DB 0
   \   000012   00           DB 0
   \   000013   00           DB 0
   \   000014   00           DB 0
   \   000015   00           DB 0
   \   000016   00           DB 0
   \   000017   00           DB 0
   \   000018   00           DB 0
   \   000019   00           DB 0
   \   00001A   00           DB 0
   \   00001B   00           DB 0
   \   00001C   00           DB 0
   \   00001D   00           DB 0
   \   00001E   00           DB 0
   \   00001F   00           DB 0
   \   000020   00           DB 0
   \   000021   00           DB 0
   \   000022   00           DB 0
   \   000023   00           DB 0
   \   000024   00           DB 0
   \   000025   00           DB 0
   \   000026   00           DB 0
   \   000027   00           DB 0
   \   000028   00           DB 0
   \   000029   00           DB 0
   \   00002A   00           DB 0
   \   00002B   00           DB 0
   \   00002C   00           DB 0
   \   00002D   00           DB 0
   \   00002E   00           DB 0
   \   00002F   00           DB 0
   \   000030   00           DB 0
   \   000031   00           DB 0
   \   000032   00           DB 0
   \   000033   00           DB 0
   \   000034   00           DB 0
   \   000035   00           DB 0
   \   000036   00           DB 0
   \   000037   00           DB 0
   \   000038   00           DB 0
   \   000039   00           DB 0
   \   00003A   00           DB 0
   \   00003B   00           DB 0
   \   00003C   00           DB 0
   \   00003D   00           DB 0
   \   00003E   00           DB 0
   \   00003F   00           DB 0
   \   000040   00           DB 0
   \   000041   00           DB 0
   \   000042   00           DB 0
   \   000043   00           DB 0
   \   000044   00           DB 0
   \   000045   00           DB 0
   \   000046   00           DB 0
   \   000047   00           DB 0
   \   000048   00           DB 0
   \   000049   00           DB 0
   \   00004A   00           DB 0
   \   00004B   00           DB 0
   \   00004C   00           DB 0
   \   00004D   00           DB 0
   \   00004E   00           DB 0
   \   00004F   00           DB 0
   \   000050   00           DB 0
   \   000051   00           DB 0
   \   000052   00           DB 0
   \   000053   00           DB 0
   \   000054   00           DB 0
   \   000055   00           DB 0
   \   000056   00           DB 0
   \   000057   00           DB 0
   \   000058   00           DB 0
   \   000059   00           DB 0
   \   00005A   00           DB 0
   \   00005B   00           DB 0
   \   00005C   00           DB 0
   \   00005D   00           DB 0
   \   00005E   00           DB 0
   \   00005F   00           DB 0
   \   000060   00           DB 0
   \   000061   00           DB 0
   \   000062   00           DB 0
   \   000063   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "AT+CIPSEND=%d\\r\\n">`:
   \   000000   41542B43     DB "AT+CIPSEND=%d\015\012"
   \            49505345
   \            4E443D25
   \            640D0A00

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\267\\242\\313\\315\\270\\370WIFI:%X %X`:
   \   000000   B7A2CBCD     DB "\267\242\313\315\270\370WIFI:%X %X %X %X %X %X %X %X %X \015\012"
   \            B8F85749
   \            46493A25
   \            58202558
   \            20255820
   \            25582025
   \            58202558
   \            20255820
   \            25582025
   \            58200D0A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_1`:
   \   000000   00           DB 0
   \   000001   00           DB 0
   \   000002   00           DB 0
   \   000003   00           DB 0
   \   000004   00           DB 0
   \   000005   00           DB 0
   \   000006   00           DB 0
   \   000007   00           DB 0
   \   000008   00           DB 0
   \   000009   00           DB 0
   \   00000A   00           DB 0
   \   00000B   00           DB 0
   \   00000C   00           DB 0
   \   00000D   00           DB 0
   \   00000E   00           DB 0
   \   00000F   00           DB 0
   \   000010   00           DB 0
   \   000011   00           DB 0
   \   000012   00           DB 0
   \   000013   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_2`:
   \   000000   00           DB 0
   \   000001   00           DB 0
   \   000002   00           DB 0
   \   000003   00           DB 0
   \   000004   00           DB 0
   \   000005   00           DB 0
   \   000006   00           DB 0
   \   000007   00           DB 0
   \   000008   00           DB 0
   \   000009   00           DB 0
   \   00000A   00           DB 0
   \   00000B   00           DB 0
   \   00000C   00           DB 0
   \   00000D   00           DB 0
   \   00000E   00           DB 0
   \   00000F   00           DB 0
   \   000010   00           DB 0
   \   000011   00           DB 0
   \   000012   00           DB 0
   \   000013   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_3`:
   \   000000   00           DB 0
   \   000001   00           DB 0
   \   000002   00           DB 0
   \   000003   00           DB 0
   \   000004   00           DB 0
   \   000005   00           DB 0
   \   000006   00           DB 0
   \   000007   00           DB 0
   \   000008   00           DB 0
   \   000009   00           DB 0
   \   00000A   00           DB 0
   \   00000B   00           DB 0
   \   00000C   00           DB 0
   \   00000D   00           DB 0
   \   00000E   00           DB 0
   \   00000F   00           DB 0
   \   000010   00           DB 0
   \   000011   00           DB 0
   \   000012   00           DB 0
   \   000013   00           DB 0
   \   000014   00           DB 0
   \   000015   00           DB 0
   \   000016   00           DB 0
   \   000017   00           DB 0
   \   000018   00           DB 0
   \   000019   00           DB 0
   \   00001A   00           DB 0
   \   00001B   00           DB 0
   \   00001C   00           DB 0
   \   00001D   00           DB 0
   \   00001E   00           DB 0
   \   00001F   00           DB 0
   \   000020   00           DB 0
   \   000021   00           DB 0
   \   000022   00           DB 0
   \   000023   00           DB 0
   \   000024   00           DB 0
   \   000025   00           DB 0
   \   000026   00           DB 0
   \   000027   00           DB 0
    133            
    134            
    135          
    136          
    137            
    138            

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0    108   ESP8266_CMD_Send
        0     14   -> Queue_Link_Put
        0     12   -> strlen
      0    130   ESP8266_Data_Send
        0    114   -> Queue_Link_Put
        0    130   -> printf
        0    114   -> sprintf
      2      0   ESP8266_Init
        2      0   -> Queue_Link_Init
      0     10   ESP8266_Poll
        0     10   -> strstr
      2      0   ESP8266_Protocol_Send
        2      0   -> Protocol_Send_Transpond
      0     12   ESP8266_Run
        0     12   -> ESP8266_CMD_Send
        0     12   -> HalUARTWrite
        0     12   -> Queue_Link_Get
        0     12   -> Queue_Link_OutSize
        0     12   -> osal_mem_alloc
        0     12   -> osal_mem_free
      0     98   SetSsidPwd
        0     94   -> ESP8266_CMD_Send
        0     96   -> memcpy
        0     98   -> sprintf
        0     94   -> strlen


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      14  ?<Constant "AT+CIPMUX=1\r\n">
      19  ?<Constant "AT+CIPSEND=%d,%d\r\n">
      16  ?<Constant "AT+CIPSEND=%d\r\n">
      22  ?<Constant "AT+CIPSERVER=1,8080\r\n">
      42  ?<Constant "AT+CIPSTART=\"TCP\",\"19...">
      21  ?<Constant "AT+CWJAP=\"%s\",\"%s\"\r\n">
      15  ?<Constant "AT+CWMODE=%d\r\n">
       7  ?<Constant "CLOSED">
       8  ?<Constant "CONNECT">
       6  ?<Constant "ERROR">
       3  ?<Constant "OK">
      16  ?<Constant "WIFI DISCONNECT">
      12  ?<Constant "WIFI GOT IP">
      16  ?<Constant "WIFI\304\243\277\351ERROR\r\n">
      41  ?<Constant "\267\242\313\315\270\370WIFI:%X %X
      17  ?<Constant "\302\267\323\311\306\367\301\254\2
      17  ?<Constant "\302\267\323\311\306\367\301\254\2_1
      17  ?<Constant "\302\267\323\311\306\367\306\364\2
      11  ?<Constant "\326\325\266\313\301\254\275\323\r
      11  ?<Constant "\326\325\266\313\315\313\263\366\r
       6  ?<Constant "ready">
     100  ?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
      20  ?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_1
      20  ?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_2
      40  ?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_3
      10  ?<Initializer for ESP_8266_CMD>
       1  ??Subroutine10_0
       1  ??Subroutine11_0
       1  ??Subroutine12_0
       6  ??Subroutine13_0
       3  ??Subroutine5_0
       6  ??Subroutine6_0
       1  ??Subroutine7_0
       1  ??Subroutine8_0
       1  ??Subroutine9_0
       7  ?Subroutine0
       5  ?Subroutine1
       1  ?Subroutine2
       4  ?Subroutine3
      12  ?Subroutine4
      36  ESP8266_CMD_Send
       6  ESP8266_CMD_Send::?relay
     207  ESP8266_Data_Send
       6  ESP8266_Data_Send::?relay
      19  ESP8266_Init
       6  ESP8266_Init::?relay
       2  ESP8266_Pack_Buff
     252  ESP8266_Poll
       6  ESP8266_Poll::?relay
      39  ESP8266_Protocol_Send
       6  ESP8266_Protocol_Send::?relay
       2  ESP8266_Queue
      94  ESP8266_Run
       6  ESP8266_Run::?relay
       1  ESP8266_Section
       1  ESP8266_State
      10  ESP_8266_CMD
       1  ESP_Change
     202  SetSsidPwd
       6  SetSsidPwd::?relay
       3  pack

 
 899 bytes in segment BANKED_CODE
  42 bytes in segment BANK_RELAYS
  10 bytes in segment XDATA_I
  10 bytes in segment XDATA_ID
 517 bytes in segment XDATA_ROM_C
  10 bytes in segment XDATA_Z
 
 951 bytes of CODE  memory
 517 bytes of CONST memory
  20 bytes of XDATA memory

Errors: none
Warnings: none
