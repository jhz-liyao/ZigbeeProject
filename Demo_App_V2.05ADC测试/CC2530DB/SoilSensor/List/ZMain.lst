###############################################################################
#
# IAR C/C++ Compiler V9.30.1.3056 for 8051                24/Nov/2016  11:19:11
# Copyright 2004-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZMain\TI2530DB\ZMain.c
#    Command line       =  
#        -f "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f
#        "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=50 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
#        -DREJOIN_POLL_RATE=440 "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZMain\TI2530DB\ZMain.c" -D HAL_UART=TRUE -D
#        HAL_UART_ISR=1 -D HAL_UART_DMA=2 -D HOLD_AUTO_START -D LOG_OUT -D
#        UART1_PROTOCOL_RESOLVER=1 -D xISQC -D NWK_AUTO_POLL -D xZTOOL_P1 -D
#        ISR_KEYINTERRUPT -D xMT_TASK -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D
#        xLCD_SUPPORTED=DEBUG -D xPOWER_SAVING -lC
#        "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\SoilSensor\List"
#        -lA "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\SoilSensor\List"
#        --diag_suppress Pe001,Pa010 -o "E:\LiyaoProject\Zigbee_Project\Z-Stack
#        Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\SoilSensor\Obj"
#        -e --no_code_motion --debug --core=plain --dptr=16,1
#        --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 8 -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\" -I
#        "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\Source\"
#        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\Frame\"
#        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\Module\SoilSensor\"
#        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -Ohz
#    List file          =  
#        E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\SoilSensor\List\ZMain.lst
#    Object file        =  
#        E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\SoilSensor\Obj\ZMain.r51
#
###############################################################################

E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh 1.0.0\Projects\zstack\ZMain\TI2530DB\ZMain.c
      1          #ifndef NONWK
      2          #include "AF.h"
      3          #endif
      4          #include "hal_adc.h"

   \                                 In  segment SFR_AN, at 0x8f
   \   unsigned char volatile __sfr P0INP
   \                     P0INP:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x90
   \   union <unnamed> volatile __sfr _A_P1
   \                     _A_P1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x9d
   \   unsigned char volatile __sfr SLEEPSTA
   \                     SLEEPSTA:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x9e
   \   unsigned char volatile __sfr CLKCONSTA
   \                     CLKCONSTA:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xbe
   \   unsigned char volatile __sfr SLEEPCMD
   \                     SLEEPCMD:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc6
   \   unsigned char volatile __sfr CLKCONCMD
   \                     CLKCONCMD:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfe
   \   unsigned char volatile __sfr P1DIR
   \                     P1DIR:
   \   000000                DS 1
      5          #include "hal_flash.h"
      6          #include "hal_lcd.h"
      7          #include "hal_led.h"
      8          #include "hal_drivers.h"
      9          #include "OnBoard.h"
     10          #include "OSAL.h"
     11          #include "OSAL_Nv.h"
     12          #include "ZComDef.h"
     13          #include "ZMAC.h"
     14          
     15          /*********************************************************************
     16           * LOCAL FUNCTIONS
     17           */
     18          
     19          static void zmain_ext_addr( void );
     20          #if defined ZCL_KEY_ESTABLISH
     21          static void zmain_cert_init( void );
     22          #endif
     23          static void zmain_dev_info( void );
     24          static void zmain_vdd_check( void );
     25          
     26          #ifdef LCD_SUPPORTED
     27          static void zmain_lcd_init( void );
     28          #endif
     29          
     30          /*********************************************************************
     31           * @fn      main
     32           * @brief   First function called after startup.
     33           * @return  don't care
     34           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     35          int main( void )
   \                     main:
     36          {
   \   000000                ; Auto size: 0
     37            // Turn off interrupts
     38            osal_int_disable( INTS_ALL );
   \   000000                ; Setup parameters for call to function osal_int_disable
   \   000000   79FF         MOV     R1,#-0x1
   \   000002   12....       LCALL   `??osal_int_disable::?relay`; Banked call to: osal_int_disable
     39          
     40            // Initialization for board related stuff such as LEDs
     41            HAL_BOARD_INIT();
   \   000005   53BEFB       ANL     0xbe,#0xfb
   \                     ??main_0:
   \   000008   E59D         MOV     A,0x9d
   \   00000A   A2E6         MOV     C,0xE0 /* A   */.6
   \   00000C   50FA         JNC     ??main_0
   \   00000E   00           NOP
   \   00000F   78F8         MOV     R0,#-0x8
   \   000011   7901         MOV     R1,#0x1
   \                     ??main_1:
   \   000013   00           NOP
   \   000014   E8           MOV     A,R0
   \   000015   24FF         ADD     A,#-0x1
   \   000017   18           DEC     R0
   \   000018   E9           MOV     A,R1
   \   000019   34FF         ADDC    A,#-0x1
   \   00001B   F9           MOV     R1,A
   \   00001C   E8           MOV     A,R0
   \   00001D   49           ORL     A,R1
   \   00001E   70F3         JNZ     ??main_1
   \   000020   75C600       MOV     0xc6,#0x0
   \                     ??main_2:
   \   000023   E59E         MOV     A,0x9e
   \   000025   70FC         JNZ     ??main_2
   \   000027   43BE04       ORL     0xbe,#0x4
   \   00002A   906270       MOV     DPTR,#0x6270
   \   00002D   7408         MOV     A,#0x8
   \   00002F   F0           MOVX    @DPTR,A
   \   000030   C290         CLR     0x90.0
   \   000032   43FE01       ORL     0xfe,#0x1
   \   000035   C291         CLR     0x90.1
   \   000037   43FE02       ORL     0xfe,#0x2
   \   00003A   C294         CLR     0x90.4
   \   00003C   43FE10       ORL     0xfe,#0x10
   \   00003F   438F01       ORL     0x8f,#0x1
     42          
     43            // Make sure supply voltage is high enough to run
     44            zmain_vdd_check();
   \   000042   7E10         MOV     R6,#0x10
   \                     ??main_3:
   \   000044                ; Setup parameters for call to function HalAdcCheckVdd
   \   000044   794A         MOV     R1,#0x4a
   \   000046   12....       LCALL   `??HalAdcCheckVdd::?relay`; Banked call to: HalAdcCheckVdd
   \   000049   E9           MOV     A,R1
   \   00004A   60F8         JZ      ??main_3
   \   00004C   1E           DEC     R6
   \   00004D   EE           MOV     A,R6
   \   00004E   70F4         JNZ     ??main_3
     45          
     46            // Initialize board I/O
     47            InitBoard( OB_COLD );
   \   000050                ; Setup parameters for call to function InitBoard
   \   000050   7900         MOV     R1,#0x0
   \   000052   12....       LCALL   `??InitBoard::?relay`; Banked call to: InitBoard
     48          
     49            // Initialze HAL drivers
     50            HalDriverInit();
   \   000055                ; Setup parameters for call to function HalDriverInit
   \   000055   12....       LCALL   `??HalDriverInit::?relay`; Banked call to: HalDriverInit
     51          
     52            // Initialize NV System
     53            osal_nv_init( NULL );
   \   000058                ; Setup parameters for call to function osal_nv_init
   \   000058   7A00         MOV     R2,#0x0
   \   00005A   7B00         MOV     R3,#0x0
   \   00005C   12....       LCALL   `??osal_nv_init::?relay`; Banked call to: osal_nv_init
     54          
     55            // Initialize the MAC
     56            ZMacInit();
   \   00005F                ; Setup parameters for call to function ZMacInit
   \   00005F   12....       LCALL   `??ZMacInit::?relay` ; Banked call to: ZMacInit
     57          
     58            // Determine the extended address
     59            zmain_ext_addr();
   \   000062                ; Setup parameters for call to function zmain_ext_addr
   \   000062   12....       LCALL   `??zmain_ext_addr::?relay`; Banked call to: zmain_ext_addr
     60          
     61          #if defined ZCL_KEY_ESTABLISH
     62            // Initialize the Certicom certificate information.
     63            zmain_cert_init();
     64          #endif
     65          
     66            // Initialize basic NV items
     67            zgInit();
   \   000065                ; Setup parameters for call to function zgInit
   \   000065   12....       LCALL   `??zgInit::?relay`   ; Banked call to: zgInit
     68          
     69          #ifndef NONWK
     70            // Since the AF isn't a task, call it's initialization routine
     71            afInit();
     72          #endif
     73          
     74            // Initialize the operating system
     75            osal_init_system();
   \   000068                ; Setup parameters for call to function osal_init_system
   \   000068   12....       LCALL   `??osal_init_system::?relay`; Banked call to: osal_init_system
     76          
     77            // Allow interrupts
     78            osal_int_enable( INTS_ALL );
   \   00006B                ; Setup parameters for call to function osal_int_enable
   \   00006B   79FF         MOV     R1,#-0x1
   \   00006D   12....       LCALL   `??osal_int_enable::?relay`; Banked call to: osal_int_enable
     79          
     80            // Final board initialization
     81            InitBoard( OB_READY );
   \   000070                ; Setup parameters for call to function InitBoard
   \   000070   7902         MOV     R1,#0x2
   \   000072   12....       LCALL   `??InitBoard::?relay`; Banked call to: InitBoard
     82          
     83            // Display information about this device
     84            zmain_dev_info();
     85          
     86            /* Display the device info on the LCD */
     87          #ifdef LCD_SUPPORTED
     88            zmain_lcd_init();
     89          #endif
     90          
     91          #ifdef WDT_IN_PM1
     92            /* If WDT is used, this is a good place to enable it. */
     93            WatchDogEnable( WDTIMX );
     94          #endif
     95          
     96            osal_start_system(); // No Return from here
   \   000075                ; Setup parameters for call to function osal_start_system
   \   000075   12....       LCALL   `??osal_start_system::?relay`; Banked call to: osal_start_system
     97          
     98            return 0;  // Shouldn't get here.
   \   000078   7A00         MOV     R2,#0x0
   \   00007A   7B00         MOV     R3,#0x0
   \   00007C   02....       LJMP    ?BRET
   \   00007F                REQUIRE SLEEPCMD
   \   00007F                REQUIRE SLEEPSTA
   \   00007F                REQUIRE CLKCONCMD
   \   00007F                REQUIRE CLKCONSTA
   \   00007F                REQUIRE _A_P1
   \   00007F                REQUIRE P1DIR
   \   00007F                REQUIRE P0INP
     99          } // main()
    100          
    101          /*********************************************************************
    102           * @fn      zmain_vdd_check
    103           * @brief   Check if the Vdd is OK to run the processor.
    104           * @return  Return if Vdd is ok; otherwise, flash LED, then reset
    105           *********************************************************************/
    106          static void zmain_vdd_check( void )
    107          {
    108            uint8 cnt = 16;
    109            
    110            do {
    111              while (!HalAdcCheckVdd(VDD_MIN_RUN));
    112            } while (--cnt);
    113          }
    114          
    115          /**************************************************************************************************
    116           * @fn          zmain_ext_addr
    117           *
    118           * @brief       Execute a prioritized search for a valid extended address and write the results
    119           *              into the OSAL NV system for use by the system. Temporary address not saved to NV.
    120           *
    121           * input parameters
    122           *
    123           * None.
    124           *
    125           * output parameters
    126           *
    127           * None.
    128           *
    129           * @return      None.
    130           **************************************************************************************************
    131           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    132          static void zmain_ext_addr(void)
   \                     zmain_ext_addr:
    133          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV     A,#-0x8
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    134            uint8 nullAddr[Z_EXTADDR_LEN] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
   \   00000A   90....       MOV     DPTR,#`?<Constant {255, 255, 255, 255, 255, 255, 255,`
   \   00000D   AC..         MOV     R4,?XSP + 0
   \   00000F   AD..         MOV     R5,?XSP + 1
   \   000011   7408         MOV     A,#0x8
   \   000013   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    135            uint8 writeNV = TRUE;
    136          
    137            // First check whether a non-erased extended address exists in the OSAL NV.
    138            if ((SUCCESS != osal_nv_item_init(ZCD_NV_EXTADDR, Z_EXTADDR_LEN, NULL))  ||
    139                (SUCCESS != osal_nv_read(ZCD_NV_EXTADDR, 0, Z_EXTADDR_LEN, aExtendedAddress)) ||
    140                (osal_memcmp(aExtendedAddress, nullAddr, Z_EXTADDR_LEN)))
   \   000016                ; Setup parameters for call to function osal_nv_item_init
   \   000016   F5..         MOV     ?V0,A
   \   000018   F5..         MOV     ?V1,A
   \   00001A   78..         MOV     R0,#?V0
   \   00001C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001F   7C08         MOV     R4,#0x8
   \   000021   7D00         MOV     R5,#0x0
   \   000023   7A01         MOV     R2,#0x1
   \   000025   7B00         MOV     R3,#0x0
   \   000027   12....       LCALL   `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   00002A   7402         MOV     A,#0x2
   \   00002C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00002F   E9           MOV     A,R1
   \   000030   7051         JNZ     ??zmain_ext_addr_0
   \   000032                ; Setup parameters for call to function osal_nv_read
   \   000032   75....       MOV     ?V0,#aExtendedAddress & 0xff
   \   000035   75....       MOV     ?V1,#(aExtendedAddress >> 8) & 0xff
   \   000038   78..         MOV     R0,#?V0
   \   00003A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003D   75..08       MOV     ?V0,#0x8
   \   000040   75..00       MOV     ?V1,#0x0
   \   000043   78..         MOV     R0,#?V0
   \   000045   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000048   7C00         MOV     R4,#0x0
   \   00004A   7D00         MOV     R5,#0x0
   \   00004C   7A01         MOV     R2,#0x1
   \   00004E   7B00         MOV     R3,#0x0
   \   000050   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000053   7404         MOV     A,#0x4
   \   000055   12....       LCALL   ?DEALLOC_XSTACK8
   \   000058   E9           MOV     A,R1
   \   000059   7028         JNZ     ??zmain_ext_addr_0
   \   00005B                ; Setup parameters for call to function osal_memcmp
   \   00005B   A8..         MOV     R0,?XSP + 0
   \   00005D   A9..         MOV     R1,?XSP + 1
   \   00005F   88..         MOV     ?V0,R0
   \   000061   89..         MOV     ?V1,R1
   \   000063   75..00       MOV     ?V2,#0x0
   \   000066   78..         MOV     R0,#?V0
   \   000068   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00006B   7C08         MOV     R4,#0x8
   \   00006D   7D00         MOV     R5,#0x0
   \   00006F   79..         MOV     R1,#aExtendedAddress & 0xff
   \   000071   7A..         MOV     R2,#(aExtendedAddress >> 8) & 0xff
   \   000073   7B00         MOV     R3,#0x0
   \   000075   12....       LCALL   `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   000078   7403         MOV     A,#0x3
   \   00007A   12....       LCALL   ?DEALLOC_XSTACK8
   \   00007D   E9           MOV     A,R1
   \   00007E   7003         JNZ     $+5
   \   000080   02....       LJMP    ??zmain_ext_addr_1 & 0xFFFF
    141            {
    142              // Attempt to read the extended address from the location on the lock bits page
    143              // where the programming tools know to reserve it.
    144              HalFlashRead(HAL_FLASH_IEEE_PAGE, HAL_FLASH_IEEE_OSET, aExtendedAddress, Z_EXTADDR_LEN);
   \                     ??zmain_ext_addr_0:
   \   000083                ; Setup parameters for call to function HalFlashRead
   \   000083   75..08       MOV     ?V0,#0x8
   \   000086   75..00       MOV     ?V1,#0x0
   \   000089   78..         MOV     R0,#?V0
   \   00008B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00008E   7C..         MOV     R4,#aExtendedAddress & 0xff
   \   000090   7D..         MOV     R5,#(aExtendedAddress >> 8) & 0xff
   \   000092   7AE8         MOV     R2,#-0x18
   \   000094   7B07         MOV     R3,#0x7
   \   000096   797F         MOV     R1,#0x7f
   \   000098   12....       LCALL   `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   00009B   7402         MOV     A,#0x2
   \   00009D   12....       LCALL   ?DEALLOC_XSTACK8
    145          
    146              if (osal_memcmp(aExtendedAddress, nullAddr, Z_EXTADDR_LEN))
   \   0000A0                ; Setup parameters for call to function osal_memcmp
   \   0000A0   A8..         MOV     R0,?XSP + 0
   \   0000A2   A9..         MOV     R1,?XSP + 1
   \   0000A4   88..         MOV     ?V0,R0
   \   0000A6   89..         MOV     ?V1,R1
   \   0000A8   75..00       MOV     ?V2,#0x0
   \   0000AB   78..         MOV     R0,#?V0
   \   0000AD   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000B0   7C08         MOV     R4,#0x8
   \   0000B2   7D00         MOV     R5,#0x0
   \   0000B4   79..         MOV     R1,#aExtendedAddress & 0xff
   \   0000B6   7A..         MOV     R2,#(aExtendedAddress >> 8) & 0xff
   \   0000B8   7B00         MOV     R3,#0x0
   \   0000BA   12....       LCALL   `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   0000BD   7403         MOV     A,#0x3
   \   0000BF   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000C2   E9           MOV     A,R1
   \   0000C3   6035         JZ      ??zmain_ext_addr_2
    147              {
    148                // Attempt to read the extended address from the designated location in the Info Page.
    149                if (!osal_memcmp((uint8 *)(P_INFOPAGE+HAL_INFOP_IEEE_OSET), nullAddr, Z_EXTADDR_LEN))
   \   0000C5                ; Setup parameters for call to function osal_memcmp
   \   0000C5   78..         MOV     R0,#?V0
   \   0000C7   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000CA   7C08         MOV     R4,#0x8
   \   0000CC   7D00         MOV     R5,#0x0
   \   0000CE   790C         MOV     R1,#0xc
   \   0000D0   7A78         MOV     R2,#0x78
   \   0000D2   7B00         MOV     R3,#0x0
   \   0000D4   12....       LCALL   `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   0000D7   7403         MOV     A,#0x3
   \   0000D9   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000DC   E9           MOV     A,R1
   \   0000DD   7054         JNZ     ??zmain_ext_addr_3
    150                {
    151                  osal_memcpy(aExtendedAddress, (uint8 *)(P_INFOPAGE+HAL_INFOP_IEEE_OSET), Z_EXTADDR_LEN);
   \   0000DF                ; Setup parameters for call to function osal_memcpy
   \   0000DF   75..0C       MOV     ?V0,#0xc
   \   0000E2   75..78       MOV     ?V1,#0x78
   \   0000E5   78..         MOV     R0,#?V0
   \   0000E7   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000EA   7C08         MOV     R4,#0x8
   \   0000EC   7D00         MOV     R5,#0x0
   \   0000EE   7A..         MOV     R2,#aExtendedAddress & 0xff
   \   0000F0   7B..         MOV     R3,#(aExtendedAddress >> 8) & 0xff
   \   0000F2   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000F5   7403         MOV     A,#0x3
   \   0000F7   12....       LCALL   ?DEALLOC_XSTACK8
    152                }
    153                else  // No valid extended address was found.
    154                {
    155                  uint8 idx;
    156                  
    157          #if !defined ( NV_RESTORE )
    158                  writeNV = FALSE;  // Make this a temporary IEEE address
    159          #endif
    160          
    161                  /* Attempt to create a sufficiently random extended address for expediency.
    162                   * Note: this is only valid/legal in a test environment and
    163                   *       must never be used for a commercial product.
    164                   */
    165                  for (idx = 0; idx < (Z_EXTADDR_LEN - 2);)
    166                  {
    167                    uint16 randy = osal_rand();
    168                    aExtendedAddress[idx++] = LO_UINT16(randy);
    169                    aExtendedAddress[idx++] = HI_UINT16(randy);
    170                  }
    171                  // Next-to-MSB identifies ZigBee devicetype.
    172          #if ZG_BUILD_COORDINATOR_TYPE && !ZG_BUILD_JOINING_TYPE
    173                  aExtendedAddress[idx++] = 0x10;
    174          #elif ZG_BUILD_RTRONLY_TYPE
    175                  aExtendedAddress[idx++] = 0x20;
    176          #else
    177                  aExtendedAddress[idx++] = 0x30;
    178          #endif
    179                  // MSB has historical signficance.
    180                  aExtendedAddress[idx] = 0xF8;
    181                }
    182              }
    183          
    184              if (writeNV)
    185              {
    186                (void)osal_nv_write(ZCD_NV_EXTADDR, 0, Z_EXTADDR_LEN, aExtendedAddress);
   \                     ??zmain_ext_addr_2:
   \   0000FA                ; Setup parameters for call to function osal_nv_write
   \   0000FA   75....       MOV     ?V0,#aExtendedAddress & 0xff
   \   0000FD   75....       MOV     ?V1,#(aExtendedAddress >> 8) & 0xff
   \   000100   78..         MOV     R0,#?V0
   \   000102   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000105   75..08       MOV     ?V0,#0x8
   \   000108   75..00       MOV     ?V1,#0x0
   \   00010B   78..         MOV     R0,#?V0
   \   00010D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000110   7C00         MOV     R4,#0x0
   \   000112   7D00         MOV     R5,#0x0
   \   000114   7A01         MOV     R2,#0x1
   \   000116   7B00         MOV     R3,#0x0
   \   000118   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   00011B   7404         MOV     A,#0x4
   \   00011D   12....       LCALL   ?DEALLOC_XSTACK8
    187              }
    188            }
    189          
    190            // Set the MAC PIB extended address according to results from above.
    191            (void)ZMacSetReq(MAC_EXTENDED_ADDRESS, aExtendedAddress);
   \                     ??zmain_ext_addr_1:
   \   000120                ; Setup parameters for call to function ZMacSetReq
   \   000120   7A..         MOV     R2,#aExtendedAddress & 0xff
   \   000122   7B..         MOV     R3,#(aExtendedAddress >> 8) & 0xff
   \   000124   79E2         MOV     R1,#-0x1e
   \   000126   12....       LCALL   `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
    192          }
   \   000129   7408         MOV     A,#0x8
   \   00012B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00012E   7F03         MOV     R7,#0x3
   \   000130   02....       LJMP    ?BANKED_LEAVE_XDATA
   \                     ??zmain_ext_addr_3:
   \   000133   7E00         MOV     R6,#0x0
   \                     ??zmain_ext_addr_4:
   \   000135                ; Setup parameters for call to function osal_rand
   \   000135   12....       LCALL   `??osal_rand::?relay`; Banked call to: osal_rand
   \   000138   8A..         MOV     ?V0,R2
   \   00013A   EE           MOV     A,R6
   \   00013B   FA           MOV     R2,A
   \   00013C   74..         MOV     A,#aExtendedAddress & 0xff
   \   00013E   2A           ADD     A,R2
   \   00013F   F582         MOV     DPL,A
   \   000141   E4           CLR     A
   \   000142   34..         ADDC    A,#(aExtendedAddress >> 8) & 0xff
   \   000144   F583         MOV     DPH,A
   \   000146   E5..         MOV     A,?V0
   \   000148   F0           MOVX    @DPTR,A
   \   000149   0E           INC     R6
   \   00014A   EE           MOV     A,R6
   \   00014B   F8           MOV     R0,A
   \   00014C   12....       LCALL   ?Subroutine0 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   00014F   EB           MOV     A,R3
   \   000150   F0           MOVX    @DPTR,A
   \   000151   0E           INC     R6
   \   000152   EE           MOV     A,R6
   \   000153   C3           CLR     C
   \   000154   9406         SUBB    A,#0x6
   \   000156   40DD         JC      ??zmain_ext_addr_4
   \   000158   08           INC     R0
   \   000159   12....       LCALL   ?Subroutine0 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   00015C   7430         MOV     A,#0x30
   \   00015E   F0           MOVX    @DPTR,A
   \   00015F   08           INC     R0
   \   000160   74..         MOV     A,#aExtendedAddress & 0xff
   \   000162   28           ADD     A,R0
   \   000163   F582         MOV     DPL,A
   \   000165   E4           CLR     A
   \   000166   34..         ADDC    A,#(aExtendedAddress >> 8) & 0xff
   \   000168   F583         MOV     DPH,A
   \   00016A   74F8         MOV     A,#-0x8
   \   00016C   F0           MOVX    @DPTR,A
   \   00016D   80B1         SJMP    ??zmain_ext_addr_1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   74..         MOV     A,#aExtendedAddress & 0xff
   \   000002   2E           ADD     A,R6
   \   000003   F582         MOV     DPL,A
   \   000005   E4           CLR     A
   \   000006   34..         ADDC    A,#(aExtendedAddress >> 8) & 0xff
   \   000008   F583         MOV     DPH,A
   \   00000A   22           RET

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??main::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    main

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zmain_ext_addr::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zmain_ext_addr

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {255, 255, 255, 255, 255, 255, 255,`:
   \   000000   FF           DB 255
   \   000001   FF           DB 255
   \   000002   FF           DB 255
   \   000003   FF           DB 255
   \   000004   FF           DB 255
   \   000005   FF           DB 255
   \   000006   FF           DB 255
   \   000007   FF           DB 255
    193          
    194          #if defined ZCL_KEY_ESTABLISH
    195          /**************************************************************************************************
    196           * @fn          zmain_cert_init
    197           *
    198           * @brief       Initialize the Certicom certificate information.
    199           *
    200           * input parameters
    201           *
    202           * None.
    203           *
    204           * output parameters
    205           *
    206           * None.
    207           *
    208           * @return      None.
    209           **************************************************************************************************
    210           */
    211          static void zmain_cert_init(void)
    212          {
    213            uint8 certData[ZCL_KE_IMPLICIT_CERTIFICATE_LEN];
    214            uint8 nullData[ZCL_KE_IMPLICIT_CERTIFICATE_LEN] = {
    215              0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    216              0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    217              0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    218              0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    219              0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    220              0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
    221            };
    222          
    223            (void)osal_nv_item_init(ZCD_NV_IMPLICIT_CERTIFICATE, ZCL_KE_IMPLICIT_CERTIFICATE_LEN, NULL);
    224            (void)osal_nv_item_init(ZCD_NV_DEVICE_PRIVATE_KEY, ZCL_KE_DEVICE_PRIVATE_KEY_LEN, NULL);
    225          
    226            // First check whether non-null certificate data exists in the OSAL NV. To save on code space,
    227            // just use the ZCD_NV_CA_PUBLIC_KEY as the bellwether for all three.
    228            if ((SUCCESS != osal_nv_item_init(ZCD_NV_CA_PUBLIC_KEY, ZCL_KE_CA_PUBLIC_KEY_LEN, NULL))    ||
    229                (SUCCESS != osal_nv_read(ZCD_NV_CA_PUBLIC_KEY, 0, ZCL_KE_CA_PUBLIC_KEY_LEN, certData))  ||
    230                (osal_memcmp(certData, nullData, ZCL_KE_CA_PUBLIC_KEY_LEN)))
    231            {
    232              // Attempt to read the certificate data from its corresponding location on the lock bits page.
    233              HalFlashRead(HAL_FLASH_IEEE_PAGE, HAL_FLASH_CA_PUBLIC_KEY_OSET, certData,
    234                                                   ZCL_KE_CA_PUBLIC_KEY_LEN);
    235              // If the certificate data is not NULL, use it to update the corresponding NV items.
    236              if (!osal_memcmp(certData, nullData, ZCL_KE_CA_PUBLIC_KEY_LEN))
    237              {
    238                (void)osal_nv_write(ZCD_NV_CA_PUBLIC_KEY, 0, ZCL_KE_CA_PUBLIC_KEY_LEN, certData);
    239                HalFlashRead(HAL_FLASH_IEEE_PAGE, HAL_FLASH_IMPLICIT_CERT_OSET, certData,
    240                                                     ZCL_KE_IMPLICIT_CERTIFICATE_LEN);
    241                (void)osal_nv_write(ZCD_NV_IMPLICIT_CERTIFICATE, 0,
    242                                    ZCL_KE_IMPLICIT_CERTIFICATE_LEN, certData);
    243                HalFlashRead(HAL_FLASH_IEEE_PAGE, HAL_FLASH_DEV_PRIVATE_KEY_OSET, certData,
    244                                                  ZCL_KE_DEVICE_PRIVATE_KEY_LEN);
    245                (void)osal_nv_write(ZCD_NV_DEVICE_PRIVATE_KEY, 0, ZCL_KE_DEVICE_PRIVATE_KEY_LEN, certData);
    246              }
    247            }
    248          }
    249          #endif
    250          
    251          /**************************************************************************************************
    252           * @fn          zmain_dev_info
    253           *
    254           * @brief       This displays the IEEE (MSB to LSB) on the LCD.
    255           *
    256           * input parameters
    257           *
    258           * None.
    259           *
    260           * output parameters
    261           *
    262           * None.
    263           *
    264           * @return      None.
    265           **************************************************************************************************
    266           */
    267          static void zmain_dev_info(void)
    268          {
    269          #ifdef LCD_SUPPORTED
    270            uint8 i;
    271            uint8 *xad;
    272            uint8 lcd_buf[Z_EXTADDR_LEN*2+1];
    273          
    274            // Display the extended address.
    275            xad = aExtendedAddress + Z_EXTADDR_LEN - 1;
    276          
    277            for (i = 0; i < Z_EXTADDR_LEN*2; xad--)
    278            {
    279              uint8 ch;
    280              ch = (*xad >> 4) & 0x0F;
    281              lcd_buf[i++] = ch + (( ch < 10 ) ? '0' : '7');
    282              ch = *xad & 0x0F;
    283              lcd_buf[i++] = ch + (( ch < 10 ) ? '0' : '7');
    284            }
    285            lcd_buf[Z_EXTADDR_LEN*2] = '\0';
    286            HalLcdWriteString( "IEEE: ", HAL_LCD_LINE_1 );
    287            HalLcdWriteString( (char*)lcd_buf, HAL_LCD_LINE_2 );
    288          #endif
    289          }
    290          
    291          #ifdef LCD_SUPPORTED
    292          /*********************************************************************
    293           * @fn      zmain_lcd_init
    294           * @brief   Initialize LCD at start up.
    295           * @return  none
    296           *********************************************************************/
    297          static void zmain_lcd_init ( void )
    298          {
    299          #ifdef SERIAL_DEBUG_SUPPORTED
    300            {
    301              HalLcdWriteString( "TexasInstruments", HAL_LCD_LINE_1 );
    302          
    303          #if defined( MT_MAC_FUNC )
    304          #if defined( ZDO_COORDINATOR )
    305                HalLcdWriteString( "MAC-MT Coord", HAL_LCD_LINE_2 );
    306          #else
    307                HalLcdWriteString( "MAC-MT Device", HAL_LCD_LINE_2 );
    308          #endif // ZDO
    309          #elif defined( MT_NWK_FUNC )
    310          #if defined( ZDO_COORDINATOR )
    311                HalLcdWriteString( "NWK Coordinator", HAL_LCD_LINE_2 );
    312          #else
    313                HalLcdWriteString( "NWK Device", HAL_LCD_LINE_2 );
    314          #endif // ZDO
    315          #endif // MT_FUNC
    316            }
    317          #endif // SERIAL_DEBUG_SUPPORTED
    318          }
    319          #endif
    320          
    321          /*********************************************************************
    322          *********************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0      0   main
        0      0   -> HalAdcCheckVdd
        0      0   -> HalDriverInit
        0      0   -> InitBoard
        0      0   -> ZMacInit
        0      0   -> osal_init_system
        0      0   -> osal_int_disable
        0      0   -> osal_int_enable
        0      0   -> osal_nv_init
        0      0   -> osal_start_system
        0      0   -> zgInit
        0      0   -> zmain_ext_addr
      1     23   zmain_ext_addr
        0     21   -> HalFlashRead
        0     19   -> ZMacSetReq
        0     22   -> osal_memcmp
        0     22   -> osal_memcpy
        0     21   -> osal_nv_item_init
        0     23   -> osal_nv_read
        0     23   -> osal_nv_write
        0     19   -> osal_rand


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       8  ?<Constant {255, 255, 255, 255, 255, 255, 255,
      11  ?Subroutine0
       1  CLKCONCMD
       1  CLKCONSTA
       1  P0INP
       1  P1DIR
       1  SLEEPCMD
       1  SLEEPSTA
       1  _A_P1
     127  main
       6  main::?relay
     367  zmain_ext_addr
       6  zmain_ext_addr::?relay

 
 505 bytes in segment BANKED_CODE
  12 bytes in segment BANK_RELAYS
   7 bytes in segment SFR_AN
   8 bytes in segment XDATA_ROM_C
 
 517 bytes of CODE  memory
   8 bytes of CONST memory
   0 bytes of DATA  memory (+ 7 bytes shared)

Errors: none
Warnings: none
