###############################################################################
#
# IAR C/C++ Compiler V9.30.1.3056 for 8051                24/Nov/2016  11:19:04
# Copyright 2004-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Components\hal\target\CC2530EB\hal_uart.c
#    Command line       =  
#        -f "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f
#        "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=50 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
#        -DREJOIN_POLL_RATE=440 "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Components\hal\target\CC2530EB\hal_uart.c" -D HAL_UART=TRUE -D
#        HAL_UART_ISR=1 -D HAL_UART_DMA=2 -D HOLD_AUTO_START -D LOG_OUT -D
#        UART1_PROTOCOL_RESOLVER=1 -D xISQC -D NWK_AUTO_POLL -D xZTOOL_P1 -D
#        ISR_KEYINTERRUPT -D xMT_TASK -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D
#        xLCD_SUPPORTED=DEBUG -D xPOWER_SAVING -lC
#        "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\SoilSensor\List"
#        -lA "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\SoilSensor\List"
#        --diag_suppress Pe001,Pa010 -o "E:\LiyaoProject\Zigbee_Project\Z-Stack
#        Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\SoilSensor\Obj"
#        -e --no_code_motion --debug --core=plain --dptr=16,1
#        --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 8 -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\" -I
#        "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\Source\"
#        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\Frame\"
#        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\Module\SoilSensor\"
#        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -Ohz
#    List file          =  
#        E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\SoilSensor\List\hal_uart.lst
#    Object file        =  
#        E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.05ADC≤‚ ‘\CC2530DB\SoilSensor\Obj\hal_uart.r51
#
###############################################################################

E:\LiyaoProject\Zigbee_Project\Z-Stack Mesh 1.0.0\Components\hal\target\CC2530EB\hal_uart.c
      1          /**************************************************************************************************
      2            Filename:       _hal_uart.c
      3            Revised:        $Date: 2009-06-12 09:16:43 -0700 (Fri, 12 Jun 2009) $
      4            Revision:       $Revision: 20142 $
      5          
      6            Description: This file contains the interface to the H/W UART driver.
      7          
      8          
      9            Copyright 2006-2009 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED ìAS ISî WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          
     44          #include "hal_board_cfg.h"

   \                                 In  segment SFR_AN, at 0x86
   \   unsigned char volatile __sfr U0CSR
   \                     U0CSR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x90
   \   union <unnamed> volatile __sfr _A_P1
   \                     _A_P1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x95
   \   unsigned char volatile __sfr ST0
   \                     ST0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x9a
   \   unsigned char volatile __sfr IEN2
   \                     IEN2:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xa8
   \   union <unnamed> volatile __sfr _A_IEN0
   \                     _A_IEN0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xab
   \   unsigned char volatile __sfr P0IEN
   \                     P0IEN:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc1
   \   unsigned char volatile __sfr U0DBUF
   \                     U0DBUF:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc2
   \   unsigned char volatile __sfr U0BAUD
   \                     U0BAUD:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc4
   \   unsigned char volatile __sfr U0UCR
   \                     U0UCR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc5
   \   unsigned char volatile __sfr U0GCR
   \                     U0GCR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xd1
   \   unsigned char volatile __sfr DMAIRQ
   \                     DMAIRQ:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xd6
   \   unsigned char volatile __sfr DMAARM
   \                     DMAARM:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xd7
   \   unsigned char volatile __sfr DMAREQ
   \                     DMAREQ:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xe8
   \   union <unnamed> volatile __sfr _A_IRCON2
   \                     _A_IRCON2:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf1
   \   unsigned char volatile __sfr PERCFG
   \                     PERCFG:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf2
   \   unsigned char volatile __sfr ADCCFG
   \                     ADCCFG:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf3
   \   unsigned char volatile __sfr P0SEL
   \                     P0SEL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf4
   \   unsigned char volatile __sfr P1SEL
   \                     P1SEL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf8
   \   union <unnamed> volatile __sfr _A_U1CSR
   \                     _A_U1CSR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfa
   \   unsigned char volatile __sfr U1BAUD
   \                     U1BAUD:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfb
   \   unsigned char volatile __sfr U1UCR
   \                     U1UCR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfc
   \   unsigned char volatile __sfr U1GCR
   \                     U1GCR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfe
   \   unsigned char volatile __sfr P1DIR
   \                     P1DIR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xff
   \   unsigned char volatile __sfr P2DIR
   \                     P2DIR:
   \   000000                DS 1
     45          #include "hal_defs.h"
     46          #include "hal_types.h"
     47          #include "hal_uart.h"
     48          
     49          /*********************************************************************
     50           * MACROS
     51           */
     52          
     53          /*********************************************************************
     54           * TYPEDEFS
     55           */
     56          
     57          /*********************************************************************
     58           * CONSTANTS
     59           */
     60          
     61          /*********************************************************************
     62           * GLOBAL VARIABLES
     63           */
     64          
     65          /*********************************************************************
     66           * GLOBAL FUNCTIONS
     67           */
     68          
     69          /*********************************************************************
     70           * LOCAL VARIABLES
     71           */
     72          
     73          /*********************************************************************
     74           * LOCAL FUNCTIONS
     75           */
     76          
     77          #if HAL_UART_DMA
     78          #include "_hal_uart_dma.c"

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \   static uartDMACfg_t dmaCfg
   \                     dmaCfg:
   \   000000                DS 1038
   \   00040E                REQUIRE __INIT_XDATA_Z

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   static __banked_func __xdata_reentrant void HalUARTInitDMA(void)
   \                     HalUARTInitDMA:
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   53FF3F       ANL     0xff,#0x3f
   \   000007   85FFFF       MOV     0xff,0xff
   \   00000A   43F102       ORL     0xf1,#0x2
   \   00000D   43F4C0       ORL     0xf4,#0xc0
   \   000010   53F23F       ANL     0xf2,#0x3f
   \   000013   75F880       MOV     0xf8,#-0x80
   \   000016   75FB80       MOV     0xfb,#-0x80
   \   000019   90....       MOV     DPTR,#dmaCh1234 + 26
   \   00001C   7470         MOV     A,#0x70
   \   00001E   F0           MOVX    @DPTR,A
   \   00001F   A3           INC     DPTR
   \   000020   74F9         MOV     A,#-0x7
   \   000022   F0           MOVX    @DPTR,A
   \   000023   A3           INC     DPTR
   \   000024   E0           MOVX    A,@DPTR
   \   000025   541F         ANL     A,#0x1f
   \   000027   F0           MOVX    @DPTR,A
   \   000028   90....       MOV     DPTR,#dmaCh1234 + 30
   \   00002B   7411         MOV     A,#0x11
   \   00002D   F0           MOVX    @DPTR,A
   \   00002E   A3           INC     DPTR
   \   00002F   744A         MOV     A,#0x4a
   \   000031   F0           MOVX    @DPTR,A
   \   000032   90....       MOV     DPTR,#dmaCh1234 + 16
   \   000035   7470         MOV     A,#0x70
   \   000037   F0           MOVX    @DPTR,A
   \   000038   A3           INC     DPTR
   \   000039   74F9         MOV     A,#-0x7
   \   00003B   F0           MOVX    @DPTR,A
   \   00003C   90....       MOV     DPTR,#dmaCh1234 + 20
   \   00003F   E0           MOVX    A,@DPTR
   \   000040   541F         ANL     A,#0x1f
   \   000042   F0           MOVX    @DPTR,A
   \   000043   90....       MOV     DPTR,#dmaCh1234 + 22
   \   000046   74D0         MOV     A,#-0x30
   \   000048   F0           MOVX    @DPTR,A
   \   000049   A3           INC     DPTR
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   540F         ANL     A,#0xf
   \   00004D   F0           MOVX    @DPTR,A
   \   00004E   4410         ORL     A,#0x10
   \   000050   F0           MOVX    @DPTR,A
   \   000051   74..         MOV     A,#(dmaCfg >> 8) & 0xff
   \   000053   90....       MOV     DPTR,#dmaCh1234 + 18
   \   000056   F0           MOVX    @DPTR,A
   \   000057   A3           INC     DPTR
   \   000058   74..         MOV     A,#dmaCfg & 0xff
   \   00005A   F0           MOVX    @DPTR,A
   \   00005B   90....       MOV     DPTR,#dmaCh1234 + 21
   \   00005E   E4           CLR     A
   \   00005F   F0           MOVX    @DPTR,A
   \   000060   90....       MOV     DPTR,#dmaCh1234 + 20
   \   000063   04           INC     A
   \   000064   F0           MOVX    @DPTR,A
   \   000065   90....       MOV     DPTR,#dmaCh1234 + 23
   \   000068   7412         MOV     A,#0x12
   \   00006A   02....       LJMP    ?Subroutine0 & 0xFFFF
   \   00006D                REQUIRE P2DIR
   \   00006D                REQUIRE PERCFG
   \   00006D                REQUIRE P1SEL
   \   00006D                REQUIRE ADCCFG
   \   00006D                REQUIRE _A_U1CSR
   \   00006D                REQUIRE U1UCR

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                REQUIRE ??Subroutine22_0
   \   000001                ; // Fall through to label ??Subroutine22_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine22_0:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   static __banked_func __xdata_reentrant void HalUARTOpenDMA(halUARTCfg_t *)
   \                     HalUARTOpenDMA:
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   000007   90....       MOV     DPTR,#dmaCfg + 1036
   \   00000A   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   00000D   600A         JZ      ??HalUARTOpenDMA_0
   \   00000F   8A82         MOV     DPL,R2
   \   000011   8B83         MOV     DPH,R3
   \   000013   A3           INC     DPTR
   \   000014   E0           MOVX    A,@DPTR
   \   000015   6404         XRL     A,#0x4
   \   000017   7005         JNZ     ??HalUARTOpenDMA_1
   \                     ??HalUARTOpenDMA_0:
   \   000019   75FAD8       MOV     0xfa,#-0x28
   \   00001C   8003         SJMP    ??HalUARTOpenDMA_2
   \                     ??HalUARTOpenDMA_1:
   \   00001E   75FA3B       MOV     0xfa,#0x3b
   \                     ??HalUARTOpenDMA_2:
   \   000021   8A82         MOV     DPL,R2
   \   000023   8B83         MOV     DPH,R3
   \   000025   A3           INC     DPTR
   \   000026   E0           MOVX    A,@DPTR
   \   000027   600B         JZ      ??HalUARTOpenDMA_3
   \   000029   14           DEC     A
   \   00002A   6012         JZ      ??HalUARTOpenDMA_4
   \   00002C   14           DEC     A
   \   00002D   6019         JZ      ??HalUARTOpenDMA_5
   \   00002F   14           DEC     A
   \   000030   6020         JZ      ??HalUARTOpenDMA_6
   \   000032   8028         SJMP    ??HalUARTOpenDMA_7
   \                     ??HalUARTOpenDMA_3:
   \   000034   75FC08       MOV     0xfc,#0x8
   \   000037   90....       MOV     DPTR,#dmaCfg + 1032
   \   00003A   7423         MOV     A,#0x23
   \   00003C   8026         SJMP    ??HalUARTOpenDMA_8
   \                     ??HalUARTOpenDMA_4:
   \   00003E   75FC09       MOV     0xfc,#0x9
   \   000041   90....       MOV     DPTR,#dmaCfg + 1032
   \   000044   7412         MOV     A,#0x12
   \   000046   801C         SJMP    ??HalUARTOpenDMA_8
   \                     ??HalUARTOpenDMA_5:
   \   000048   75FC0A       MOV     0xfc,#0xa
   \   00004B   90....       MOV     DPTR,#dmaCfg + 1032
   \   00004E   7409         MOV     A,#0x9
   \   000050   8012         SJMP    ??HalUARTOpenDMA_8
   \                     ??HalUARTOpenDMA_6:
   \   000052   75FC0A       MOV     0xfc,#0xa
   \   000055   90....       MOV     DPTR,#dmaCfg + 1032
   \   000058   7406         MOV     A,#0x6
   \   00005A   8008         SJMP    ??HalUARTOpenDMA_8
   \                     ??HalUARTOpenDMA_7:
   \   00005C   75FC0B       MOV     0xfc,#0xb
   \   00005F   90....       MOV     DPTR,#dmaCfg + 1032
   \   000062   7403         MOV     A,#0x3
   \                     ??HalUARTOpenDMA_8:
   \   000064   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   000067   A3           INC     DPTR
   \   000068   E0           MOVX    A,@DPTR
   \   000069   600D         JZ      ??HalUARTOpenDMA_9
   \   00006B   75FB42       MOV     0xfb,#0x42
   \   00006E   43F410       ORL     0xf4,#0x10
   \   000071   C295         CLR     0x90.5
   \   000073   43FE20       ORL     0xfe,#0x20
   \   000076   8003         SJMP    ??HalUARTOpenDMA_10
   \                     ??HalUARTOpenDMA_9:
   \   000078   75FB02       MOV     0xfb,#0x2
   \                     ??HalUARTOpenDMA_10:
   \   00007B   9070F9       MOV     DPTR,#0x70f9
   \   00007E   E0           MOVX    A,@DPTR
   \   00007F   90....       MOV     DPTR,#dmaCfg
   \   000082   F0           MOVX    @DPTR,A
   \   000083   A3           INC     DPTR
   \   000084   E4           CLR     A
   \   000085   F0           MOVX    @DPTR,A
   \   000086   75D1F7       MOV     0xd1,#-0x9
   \   000089   75D608       MOV     0xd6,#0x8
   \   00008C                ; Setup parameters for call to function osal_memset
   \   00008C   FC           MOV     R4,A
   \   00008D   7D02         MOV     R5,#0x2
   \   00008F   E5FA         MOV     A,0xfa
   \   000091   F4           CPL     A
   \   000092   F9           MOV     R1,A
   \   000093   7A..         MOV     R2,#dmaCfg & 0xff
   \   000095   7B..         MOV     R3,#(dmaCfg >> 8) & 0xff
   \   000097   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   \   00009A   D2FE         SETB    0xf8.6
   \   00009C   90....       MOV     DPTR,#dmaCfg + 1035
   \   00009F   E4           CLR     A
   \   0000A0   F0           MOVX    @DPTR,A
   \   0000A1   90....       MOV     DPTR,#dmaCfg + 1034
   \   0000A4   02....       LJMP    ?Subroutine0 & 0xFFFF
   \   0000A7                REQUIRE U1BAUD
   \   0000A7                REQUIRE U1GCR
   \   0000A7                REQUIRE U1UCR
   \   0000A7                REQUIRE P1SEL
   \   0000A7                REQUIRE _A_P1
   \   0000A7                REQUIRE P1DIR
   \   0000A7                REQUIRE DMAIRQ
   \   0000A7                REQUIRE DMAARM
   \   0000A7                REQUIRE _A_U1CSR

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   A3           INC     DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   EA           MOV     A,R2
   \   000001   241B         ADD     A,#0x1b
   \   000003   F582         MOV     DPL,A
   \   000005   E4           CLR     A
   \   000006   3B           ADDC    A,R3
   \   000007   F583         MOV     DPH,A
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   F8           MOV     R0,A
   \   00000B   A3           INC     DPTR
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   F9           MOV     R1,A
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   E8           MOV     A,R0
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   E9           MOV     A,R1
   \   000004   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   000007   E0           MOVX    A,@DPTR
   \   000008   6403         XRL     A,#0x3
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   static __banked_func __xdata_reentrant uint16 HalUARTWriteDMA(uint8 *, uint16)
   \                     HalUARTWriteDMA:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000   74F3         MOV     A,#-0xd
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 13
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   F8           MOV     R0,A
   \   000007   EB           MOV     A,R3
   \   000008   F9           MOV     R1,A
   \   000009   90....       MOV     DPTR,#dmaCfg + 1030
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   000010   FA           MOV     R2,A
   \   000011   EC           MOV     A,R4
   \   000012   2A           ADD     A,R2
   \   000013   FA           MOV     R2,A
   \   000014   E4           CLR     A
   \   000015   3D           ADDC    A,R5
   \   000016   FB           MOV     R3,A
   \   000017   C3           CLR     C
   \   000018   EA           MOV     A,R2
   \   000019   9401         SUBB    A,#0x1
   \   00001B   EB           MOV     A,R3
   \   00001C   9401         SUBB    A,#0x1
   \   00001E   4007         JC      ??HalUARTWriteDMA_0
   \   000020   7A00         MOV     R2,#0x0
   \   000022   7B00         MOV     R3,#0x0
   \   000024   02....       LJMP    ??HalUARTWriteDMA_1 & 0xFFFF
   \                     ??HalUARTWriteDMA_0:
   \   000027   AFA8         MOV     R7,0xa8+0x0
   \   000029   C2AF         CLR     0xa8.7
   \   00002B   90....       MOV     DPTR,#dmaCfg + 1030
   \   00002E   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   000031   EF           MOV     A,R7
   \   000032   A2E7         MOV     C,0xE0 /* A   */.7
   \   000034   E4           CLR     A
   \   000035   33           RLC     A
   \   000036   FE           MOV     R6,A
   \   000037   EF           MOV     A,R7
   \   000038   A2E7         MOV     C,0xE0 /* A   */.7
   \   00003A   92AF         MOV     0xa8.7,C
   \   00003C   7A00         MOV     R2,#0x0
   \   00003E   7B00         MOV     R3,#0x0
   \   000040   8012         SJMP    ??HalUARTWriteDMA_2
   \                     ??HalUARTWriteDMA_3:
   \   000042   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   000045   C0E0         PUSH    A
   \   000047   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   00004A   D0E0         POP     A
   \   00004C   F0           MOVX    @DPTR,A
   \   00004D   05..         INC     ?V2
   \   00004F   0A           INC     R2
   \   000050   EA           MOV     A,R2
   \   000051   7001         JNZ     ??HalUARTWriteDMA_2
   \   000053   0B           INC     R3
   \                     ??HalUARTWriteDMA_2:
   \   000054   C3           CLR     C
   \   000055   EA           MOV     A,R2
   \   000056   9C           SUBB    A,R4
   \   000057   EB           MOV     A,R3
   \   000058   9D           SUBB    A,R5
   \   000059   40E7         JC      ??HalUARTWriteDMA_3
   \   00005B   A2AF         MOV     C,0xa8.7
   \   00005D   E4           CLR     A
   \   00005E   33           RLC     A
   \   00005F   FE           MOV     R6,A
   \   000060   C2AF         CLR     0xa8.7
   \   000062   90....       MOV     DPTR,#dmaCfg + 1030
   \   000065   E0           MOVX    A,@DPTR
   \   000066   65..         XRL     A,?V4
   \   000068   602E         JZ      ??HalUARTWriteDMA_4
   \   00006A   EE           MOV     A,R6
   \   00006B   A2E0         MOV     C,0xE0 /* A   */.0
   \   00006D   92AF         MOV     0xa8.7,C
   \   00006F   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   000072   7A00         MOV     R2,#0x0
   \   000074   7B00         MOV     R3,#0x0
   \   000076   8012         SJMP    ??HalUARTWriteDMA_5
   \                     ??HalUARTWriteDMA_6:
   \   000078   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   00007B   C0E0         PUSH    A
   \   00007D   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   000080   D0E0         POP     A
   \   000082   F0           MOVX    @DPTR,A
   \   000083   05..         INC     ?V2
   \   000085   0A           INC     R2
   \   000086   EA           MOV     A,R2
   \   000087   7001         JNZ     ??HalUARTWriteDMA_5
   \   000089   0B           INC     R3
   \                     ??HalUARTWriteDMA_5:
   \   00008A   C3           CLR     C
   \   00008B   EA           MOV     A,R2
   \   00008C   9C           SUBB    A,R4
   \   00008D   EB           MOV     A,R3
   \   00008E   9D           SUBB    A,R5
   \   00008F   40E7         JC      ??HalUARTWriteDMA_6
   \   000091   A2AF         MOV     C,0xa8.7
   \   000093   E4           CLR     A
   \   000094   33           RLC     A
   \   000095   FE           MOV     R6,A
   \   000096   C2AF         CLR     0xa8.7
   \                     ??HalUARTWriteDMA_4:
   \   000098   A8..         MOV     R0,?V4
   \   00009A   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   00009D   E5..         MOV     A,?V2
   \   00009F   F0           MOVX    @DPTR,A
   \   0000A0   7401         MOV     A,#0x1
   \   0000A2   65..         XRL     A,?V4
   \   0000A4   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   0000A7   7006         JNZ     ??HalUARTWriteDMA_7
   \   0000A9   90....       MOV     DPTR,#dmaCfg + 1035
   \   0000AC   7401         MOV     A,#0x1
   \   0000AE   F0           MOVX    @DPTR,A
   \                     ??HalUARTWriteDMA_7:
   \   0000AF   EE           MOV     A,R6
   \   0000B0   A2E0         MOV     C,0xE0 /* A   */.0
   \   0000B2   92AF         MOV     0xa8.7,C
   \                     ??HalUARTWriteDMA_1:
   \   0000B4   7F05         MOV     R7,#0x5
   \   0000B6   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   0000B9                REQUIRE _A_IEN0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   E8           MOV     A,R0
   \   000001   2A           ADD     A,R2
   \   000002   F582         MOV     DPL,A
   \   000004   E9           MOV     A,R1
   \   000005   3B           ADDC    A,R3
   \   000006   F583         MOV     DPH,A
   \   000008   E0           MOVX    A,@DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   AE..         MOV     R6,?V4
   \   000002   E4           CLR     A
   \   000003   CE           XCH     A,R6
   \   000004   FF           MOV     R7,A
   \   000005   85....       MOV     ?V0,?V2
   \   000008   74..         MOV     A,#(dmaCfg + 4) & 0xff
   \   00000A   25..         ADD     A,?V0
   \   00000C   F5..         MOV     ?V0,A
   \   00000E   E4           CLR     A
   \   00000F   34..         ADDC    A,#((dmaCfg + 516) >> 8) & 0xff
   \   000011   F5..         MOV     ?V1,A
   \   000013   E5..         MOV     A,?V0
   \   000015   2E           ADD     A,R6
   \   000016   F582         MOV     DPL,A
   \   000018   E5..         MOV     A,?V1
   \   00001A   3F           ADDC    A,R7
   \   00001B   F583         MOV     DPH,A
   \   00001D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V4,A
   \   000003   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   000006   F5..         MOV     ?V2,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   FA           MOV     R2,A
   \   000001   74..         MOV     A,#(dmaCfg + 4) & 0xff
   \   000003   2A           ADD     A,R2
   \   000004   F582         MOV     DPL,A
   \   000006   E4           CLR     A
   \   000007   34..         ADDC    A,#((dmaCfg + 1028) >> 8) & 0xff
   \   000009   F583         MOV     DPH,A
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_36:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_37:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   74..         MOV     A,#(dmaCfg + 4) & 0xff
   \   000002   28           ADD     A,R0
   \   000003   F582         MOV     DPL,A
   \   000005   E4           CLR     A
   \   000006   34..         ADDC    A,#((dmaCfg + 1028) >> 8) & 0xff
   \   000008   F583         MOV     DPH,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   F8           MOV     R0,A
   \   000001   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   000004   E0           MOVX    A,@DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   static __banked_func __xdata_reentrant void HalUARTPollDMA(void)
   \                     HalUARTPollDMA:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   7E00         MOV     R6,#0x0
   \   000007   E5FA         MOV     A,0xfa
   \   000009   FA           MOV     R2,A
   \   00000A   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   00000D   6A           XRL     A,R2
   \   00000E   7001         JNZ     ??HalUARTPollDMA_0
   \   000010   E4           CLR     A
   \                     ??HalUARTPollDMA_0:
   \   000011   706B         JNZ     ??HalUARTPollDMA_1
   \   000013   90....       MOV     DPTR,#dmaCfg + 512
   \   000016   E0           MOVX    A,@DPTR
   \   000017   FC           MOV     R4,A
   \                     ??HalUARTPollDMA_2:
   \   000018   E5FA         MOV     A,0xfa
   \   00001A   FA           MOV     R2,A
   \   00001B   EC           MOV     A,R4
   \   00001C   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   00001F   6A           XRL     A,R2
   \   000020   7001         JNZ     ??HalUARTPollDMA_3
   \   000022   E4           CLR     A
   \                     ??HalUARTPollDMA_3:
   \   000023   7008         JNZ     ??HalUARTPollDMA_4
   \   000025   0C           INC     R4
   \   000026   90....       MOV     DPTR,#dmaCfg + 512
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   6C           XRL     A,R4
   \   00002B   70EB         JNZ     ??HalUARTPollDMA_2
   \                     ??HalUARTPollDMA_4:
   \   00002D   90....       MOV     DPTR,#dmaCfg + 513
   \   000030   E0           MOVX    A,@DPTR
   \   000031   6C           XRL     A,R4
   \   000032   6011         JZ      ??HalUARTPollDMA_5
   \   000034   EC           MOV     A,R4
   \   000035   F0           MOVX    @DPTR,A
   \   000036   A3           INC     DPTR
   \   000037   E0           MOVX    A,@DPTR
   \   000038   7004         JNZ     ??HalUARTPollDMA_6
   \   00003A   E595         MOV     A,0x95
   \   00003C   A3           INC     DPTR
   \   00003D   F0           MOVX    @DPTR,A
   \                     ??HalUARTPollDMA_6:
   \   00003E   90....       MOV     DPTR,#dmaCfg + 514
   \   000041   7421         MOV     A,#0x21
   \   000043   8020         SJMP    ??HalUARTPollDMA_7
   \                     ??HalUARTPollDMA_5:
   \   000045   A3           INC     DPTR
   \   000046   E0           MOVX    A,@DPTR
   \   000047   601D         JZ      ??HalUARTPollDMA_8
   \   000049   A3           INC     DPTR
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   F8           MOV     R0,A
   \   00004C   E595         MOV     A,0x95
   \   00004E   C3           CLR     C
   \   00004F   98           SUBB    A,R0
   \   000050   F8           MOV     R0,A
   \   000051   90....       MOV     DPTR,#dmaCfg + 514
   \   000054   E0           MOVX    A,@DPTR
   \   000055   F9           MOV     R1,A
   \   000056   E8           MOV     A,R0
   \   000057   C3           CLR     C
   \   000058   99           SUBB    A,R1
   \   000059   5009         JNC     ??HalUARTPollDMA_9
   \   00005B   E0           MOVX    A,@DPTR
   \   00005C   C3           CLR     C
   \   00005D   98           SUBB    A,R0
   \   00005E   F0           MOVX    @DPTR,A
   \   00005F   E595         MOV     A,0x95
   \   000061   A3           INC     DPTR
   \   000062   8001         SJMP    ??HalUARTPollDMA_7
   \                     ??HalUARTPollDMA_9:
   \   000064   E4           CLR     A
   \                     ??HalUARTPollDMA_7:
   \   000065   F0           MOVX    @DPTR,A
   \                     ??HalUARTPollDMA_8:
   \   000066                ; Setup parameters for call to function HalUARTRxAvailDMA
   \   000066   12....       LCALL   `??HalUARTRxAvailDMA::?relay`; Banked call to: HalUARTRxAvailDMA
   \   000069   8A..         MOV     ?V0,R2
   \   00006B   8B..         MOV     ?V1,R3
   \   00006D   A8..         MOV     R0,?V0
   \   00006F   A9..         MOV     R1,?V1
   \   000071   C3           CLR     C
   \   000072   E8           MOV     A,R0
   \   000073   94F0         SUBB    A,#-0x10
   \   000075   E9           MOV     A,R1
   \   000076   9400         SUBB    A,#0x0
   \   000078   400B         JC      ??HalUARTPollDMA_10
   \   00007A   7E01         MOV     R6,#0x1
   \   00007C   8022         SJMP    ??HalUARTPollDMA_11
   \                     ??HalUARTPollDMA_1:
   \   00007E   90....       MOV     DPTR,#dmaCfg + 514
   \   000081   E4           CLR     A
   \   000082   F0           MOVX    @DPTR,A
   \   000083   801B         SJMP    ??HalUARTPollDMA_11
   \                     ??HalUARTPollDMA_10:
   \   000085   C3           CLR     C
   \   000086   E8           MOV     A,R0
   \   000087   9470         SUBB    A,#0x70
   \   000089   E9           MOV     A,R1
   \   00008A   9400         SUBB    A,#0x0
   \   00008C   4006         JC      ??HalUARTPollDMA_12
   \   00008E   7E02         MOV     R6,#0x2
   \   000090   D295         SETB    0x90.5
   \   000092   800C         SJMP    ??HalUARTPollDMA_11
   \                     ??HalUARTPollDMA_12:
   \   000094   E8           MOV     A,R0
   \   000095   49           ORL     A,R1
   \   000096   6008         JZ      ??HalUARTPollDMA_11
   \   000098   90....       MOV     DPTR,#dmaCfg + 514
   \   00009B   E0           MOVX    A,@DPTR
   \   00009C   7002         JNZ     ??HalUARTPollDMA_11
   \   00009E   7E04         MOV     R6,#0x4
   \                     ??HalUARTPollDMA_11:
   \   0000A0   90....       MOV     DPTR,#dmaCfg + 1031
   \   0000A3   E0           MOVX    A,@DPTR
   \   0000A4   6006         JZ      ??HalUARTPollDMA_13
   \   0000A6   E4           CLR     A
   \   0000A7   F0           MOVX    @DPTR,A
   \   0000A8   EE           MOV     A,R6
   \   0000A9   D2E4         SETB    0xE0 /* A   */.4
   \   0000AB   FE           MOV     R6,A
   \                     ??HalUARTPollDMA_13:
   \   0000AC   90....       MOV     DPTR,#dmaCfg + 1034
   \   0000AF   E0           MOVX    A,@DPTR
   \   0000B0   6018         JZ      ??HalUARTPollDMA_14
   \   0000B2   A895         MOV     R0,0x95+0x0
   \   0000B4   90....       MOV     DPTR,#dmaCfg + 1033
   \   0000B7   E0           MOVX    A,@DPTR
   \   0000B8   F9           MOV     R1,A
   \   0000B9   E8           MOV     A,R0
   \   0000BA   C3           CLR     C
   \   0000BB   99           SUBB    A,R1
   \   0000BC   F8           MOV     R0,A
   \   0000BD   90....       MOV     DPTR,#dmaCfg + 1032
   \   0000C0   E0           MOVX    A,@DPTR
   \   0000C1   C3           CLR     C
   \   0000C2   98           SUBB    A,R0
   \   0000C3   5005         JNC     ??HalUARTPollDMA_14
   \   0000C5   90....       MOV     DPTR,#dmaCfg + 1034
   \   0000C8   E4           CLR     A
   \   0000C9   F0           MOVX    @DPTR,A
   \                     ??HalUARTPollDMA_14:
   \   0000CA   90....       MOV     DPTR,#dmaCfg + 1035
   \   0000CD   E0           MOVX    A,@DPTR
   \   0000CE   604E         JZ      ??HalUARTPollDMA_15
   \   0000D0   90....       MOV     DPTR,#dmaCfg + 1034
   \   0000D3   E0           MOVX    A,@DPTR
   \   0000D4   7048         JNZ     ??HalUARTPollDMA_15
   \   0000D6   A3           INC     DPTR
   \   0000D7   E4           CLR     A
   \   0000D8   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   0000DB   F8           MOV     R0,A
   \   0000DC   E4           CLR     A
   \   0000DD   C8           XCH     A,R0
   \   0000DE   F9           MOV     R1,A
   \   0000DF   74..         MOV     A,#(dmaCfg + 4) & 0xff
   \   0000E1   28           ADD     A,R0
   \   0000E2   74..         MOV     A,#((dmaCfg + 516) >> 8) & 0xff
   \   0000E4   39           ADDC    A,R1
   \   0000E5   90....       MOV     DPTR,#dmaCh1234 + 24
   \   0000E8   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   0000EB   74..         MOV     A,#(dmaCfg + 4) & 0xff
   \   0000ED   90....       MOV     DPTR,#dmaCh1234 + 25
   \   0000F0   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   0000F3   90....       MOV     DPTR,#dmaCh1234 + 29
   \   0000F6   F0           MOVX    @DPTR,A
   \   0000F7   90....       MOV     DPTR,#dmaCh1234 + 28
   \   0000FA   E0           MOVX    A,@DPTR
   \   0000FB   54E0         ANL     A,#0xe0
   \   0000FD   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   000100   E0           MOVX    A,@DPTR
   \   000101   6401         XRL     A,#0x1
   \   000103   F0           MOVX    @DPTR,A
   \   000104   A2AF         MOV     C,0xa8.7
   \   000106   E4           CLR     A
   \   000107   33           RLC     A
   \   000108   F8           MOV     R0,A
   \   000109   C2AF         CLR     0xa8.7
   \   00010B   75D610       MOV     0xd6,#0x10
   \                     ??HalUARTPollDMA_16:
   \   00010E   00           NOP
   \   00010F   E5D6         MOV     A,0xd6
   \   000111   A2E4         MOV     C,0xE0 /* A   */.4
   \   000113   50F9         JNC     ??HalUARTPollDMA_16
   \   000115   75D1EF       MOV     0xd1,#-0x11
   \   000118   75D710       MOV     0xd7,#0x10
   \   00011B   E8           MOV     A,R0
   \   00011C   8027         SJMP    ??HalUARTPollDMA_17
   \                     ??HalUARTPollDMA_15:
   \   00011E   A2AF         MOV     C,0xa8.7
   \   000120   E4           CLR     A
   \   000121   33           RLC     A
   \   000122   FA           MOV     R2,A
   \   000123   C2AF         CLR     0xa8.7
   \   000125   90....       MOV     DPTR,#dmaCfg + 1030
   \   000128   E0           MOVX    A,@DPTR
   \   000129   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   00012C   6016         JZ      ??HalUARTPollDMA_18
   \   00012E   E5D6         MOV     A,0xd6
   \   000130   A2E4         MOV     C,0xE0 /* A   */.4
   \   000132   4010         JC      ??HalUARTPollDMA_18
   \   000134   E5D1         MOV     A,0xd1
   \   000136   A2E4         MOV     C,0xE0 /* A   */.4
   \   000138   400A         JC      ??HalUARTPollDMA_18
   \   00013A   EA           MOV     A,R2
   \   00013B   A2E0         MOV     C,0xE0 /* A   */.0
   \   00013D   92AF         MOV     0xa8.7,C
   \   00013F                ; Setup parameters for call to function HalUARTIsrDMA
   \   00013F   12....       LCALL   `??HalUARTIsrDMA::?relay`; Banked call to: HalUARTIsrDMA
   \   000142   8005         SJMP    ??HalUARTPollDMA_19
   \                     ??HalUARTPollDMA_18:
   \   000144   EA           MOV     A,R2
   \                     ??HalUARTPollDMA_17:
   \   000145   A2E0         MOV     C,0xE0 /* A   */.0
   \   000147   92AF         MOV     0xa8.7,C
   \                     ??HalUARTPollDMA_19:
   \   000149   EE           MOV     A,R6
   \   00014A   6018         JZ      ??HalUARTPollDMA_20
   \   00014C   90....       MOV     DPTR,#dmaCfg + 1036
   \   00014F   E0           MOVX    A,@DPTR
   \   000150   F8           MOV     R0,A
   \   000151   A3           INC     DPTR
   \   000152   E0           MOVX    A,@DPTR
   \   000153   F9           MOV     R1,A
   \   000154   E8           MOV     A,R0
   \   000155   49           ORL     A,R1
   \   000156   600C         JZ      ??HalUARTPollDMA_20
   \   000158                ; Setup parameters for indirect call
   \   000158   EE           MOV     A,R6
   \   000159   FA           MOV     R2,A
   \   00015A   7901         MOV     R1,#0x1
   \   00015C   E0           MOVX    A,@DPTR
   \   00015D   F583         MOV     DPH,A
   \   00015F   8882         MOV     DPL,R0
   \   000161   12....       LCALL   ?CALL_IND
   \                     ??HalUARTPollDMA_20:
   \   000164                REQUIRE ?Subroutine1
   \   000164                REQUIRE U1BAUD
   \   000164                REQUIRE ST0
   \   000164                REQUIRE _A_P1
   \   000164                REQUIRE _A_IEN0
   \   000164                REQUIRE DMAARM
   \   000164                REQUIRE DMAIRQ
   \   000164                REQUIRE DMAREQ
   \   000164                ; // Fall through to label ?Subroutine1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   90....       MOV     DPTR,#dmaCfg + 512
   \   000003   E0           MOVX    A,@DPTR
   \   000004   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   25E0         ADD     A,0xE0 /* A   */
   \   000002   F8           MOV     R0,A
   \   000003   E4           CLR     A
   \   000004   33           RLC     A
   \   000005   F9           MOV     R1,A
   \   000006   74..         MOV     A,#dmaCfg & 0xff
   \   000008   28           ADD     A,R0
   \   000009   F582         MOV     DPL,A
   \   00000B   74..         MOV     A,#(dmaCfg >> 8) & 0xff
   \   00000D   39           ADDC    A,R1
   \   00000E   F583         MOV     DPH,A
   \   000010   A3           INC     DPTR
   \   000011   E0           MOVX    A,@DPTR
   \   000012   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   000003   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_35:
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   90....       MOV     DPTR,#dmaCfg + 1030
   \   000004   E0           MOVX    A,@DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   static __banked_func __xdata_reentrant uint16 HalUARTRxAvailDMA(void)
   \                     HalUARTRxAvailDMA:
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   7A00         MOV     R2,#0x0
   \   000007   7B00         MOV     R3,#0x0
   \   000009   E5FA         MOV     A,0xfa
   \   00000B   FC           MOV     R4,A
   \   00000C   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   00000F   F9           MOV     R1,A
   \   000010   E4           CLR     A
   \   000011   C9           XCH     A,R1
   \   000012   6C           XRL     A,R4
   \   000013   7001         JNZ     ??HalUARTRxAvailDMA_0
   \   000015   E4           CLR     A
   \                     ??HalUARTRxAvailDMA_0:
   \   000016   7031         JNZ     ??HalUARTRxAvailDMA_1
   \   000018   7800         MOV     R0,#0x0
   \                     ??HalUARTRxAvailDMA_2:
   \   00001A   E5FA         MOV     A,0xfa
   \   00001C   FE           MOV     R6,A
   \   00001D   E8           MOV     A,R0
   \   00001E   FC           MOV     R4,A
   \   00001F   E9           MOV     A,R1
   \   000020   FD           MOV     R5,A
   \   000021   EC           MOV     A,R4
   \   000022   2C           ADD     A,R4
   \   000023   FC           MOV     R4,A
   \   000024   ED           MOV     A,R5
   \   000025   33           RLC     A
   \   000026   FD           MOV     R5,A
   \   000027   74..         MOV     A,#dmaCfg & 0xff
   \   000029   2C           ADD     A,R4
   \   00002A   F582         MOV     DPL,A
   \   00002C   74..         MOV     A,#(dmaCfg >> 8) & 0xff
   \   00002E   3D           ADDC    A,R5
   \   00002F   F583         MOV     DPH,A
   \   000031   A3           INC     DPTR
   \   000032   E0           MOVX    A,@DPTR
   \   000033   6E           XRL     A,R6
   \   000034   7001         JNZ     ??HalUARTRxAvailDMA_3
   \   000036   E4           CLR     A
   \                     ??HalUARTRxAvailDMA_3:
   \   000037   7005         JNZ     ??HalUARTRxAvailDMA_4
   \   000039   0A           INC     R2
   \   00003A   EA           MOV     A,R2
   \   00003B   7001         JNZ     ??HalUARTRxAvailDMA_4
   \   00003D   0B           INC     R3
   \                     ??HalUARTRxAvailDMA_4:
   \   00003E   08           INC     R0
   \   00003F   E8           MOV     A,R0
   \   000040   7001         JNZ     ??HalUARTRxAvailDMA_5
   \   000042   09           INC     R1
   \                     ??HalUARTRxAvailDMA_5:
   \   000043   C3           CLR     C
   \   000044   E9           MOV     A,R1
   \   000045   9401         SUBB    A,#0x1
   \   000047   40D1         JC      ??HalUARTRxAvailDMA_2
   \                     ??HalUARTRxAvailDMA_1:
   \   000049   02....       LJMP    ?Subroutine2 & 0xFFFF
   \   00004C                REQUIRE U1BAUD

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   __banked_func __xdata_reentrant void HalUARTIsrDMA(void)
   \                     HalUARTIsrDMA:
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   75D1EF       MOV     0xd1,#-0x11
   \   000007   90....       MOV     DPTR,#dmaCfg + 1030
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   6401         XRL     A,#0x1
   \   00000D   F8           MOV     R0,A
   \   00000E   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   000011   E4           CLR     A
   \   000012   F0           MOVX    @DPTR,A
   \   000013   90....       MOV     DPTR,#dmaCfg + 1031
   \   000016   04           INC     A
   \   000017   F0           MOVX    @DPTR,A
   \   000018   E595         MOV     A,0x95
   \   00001A   90....       MOV     DPTR,#dmaCfg + 1033
   \   00001D   F0           MOVX    @DPTR,A
   \   00001E   A3           INC     DPTR
   \   00001F   7401         MOV     A,#0x1
   \   000021   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   000024   6006         JZ      ??HalUARTIsrDMA_0
   \   000026   90....       MOV     DPTR,#dmaCfg + 1035
   \   000029   7401         MOV     A,#0x1
   \   00002B   F0           MOVX    @DPTR,A
   \                     ??HalUARTIsrDMA_0:
   \   00002C   02....       LJMP    ??Subroutine22_0 & 0xFFFF
   \   00002F                REQUIRE DMAIRQ
   \   00002F                REQUIRE ST0
     79          #endif
     80          #if HAL_UART_ISR
     81          #include "_hal_uart_isr.c"

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \   static uartISRCfg_t isrCfg
   \                     isrCfg:
   \   000000                DS 265
   \   000109                REQUIRE __INIT_XDATA_Z

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   __banked_func __xdata_reentrant uint16 HalUARTReadISR(uint8 *, uint16)
   \                     HalUARTReadISR:
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   7800         MOV     R0,#0x0
   \   000007   7900         MOV     R1,#0x0
   \   000009   8027         SJMP    ??HalUARTReadISR_0
   \                     ??HalUARTReadISR_1:
   \   00000B   74..         MOV     A,#isrCfg & 0xff
   \   00000D   2E           ADD     A,R6
   \   00000E   F582         MOV     DPL,A
   \   000010   E4           CLR     A
   \   000011   34..         ADDC    A,#(isrCfg >> 8) & 0xff
   \   000013   F583         MOV     DPH,A
   \   000015   E0           MOVX    A,@DPTR
   \   000016   8A82         MOV     DPL,R2
   \   000018   8B83         MOV     DPH,R3
   \   00001A   F0           MOVX    @DPTR,A
   \   00001B   90....       MOV     DPTR,#isrCfg + 128
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   04           INC     A
   \   000020   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   000023   C3           CLR     C
   \   000024   9480         SUBB    A,#-0x80
   \   000026   4005         JC      ??HalUARTReadISR_2
   \   000028   90....       MOV     DPTR,#isrCfg + 128
   \   00002B   E4           CLR     A
   \   00002C   F0           MOVX    @DPTR,A
   \                     ??HalUARTReadISR_2:
   \   00002D   08           INC     R0
   \   00002E   E8           MOV     A,R0
   \   00002F   7001         JNZ     ??HalUARTReadISR_0
   \   000031   09           INC     R1
   \                     ??HalUARTReadISR_0:
   \   000032   90....       MOV     DPTR,#isrCfg + 128
   \   000035   E0           MOVX    A,@DPTR
   \   000036   FE           MOV     R6,A
   \   000037   A3           INC     DPTR
   \   000038   E0           MOVX    A,@DPTR
   \   000039   6E           XRL     A,R6
   \   00003A   6007         JZ      ??HalUARTReadISR_3
   \   00003C   C3           CLR     C
   \   00003D   E8           MOV     A,R0
   \   00003E   9C           SUBB    A,R4
   \   00003F   E9           MOV     A,R1
   \   000040   9D           SUBB    A,R5
   \   000041   40C8         JC      ??HalUARTReadISR_1
   \                     ??HalUARTReadISR_3:
   \   000043   E8           MOV     A,R0
   \   000044   FA           MOV     R2,A
   \   000045   E9           MOV     A,R1
   \   000046   FB           MOV     R3,A
   \   000047   02....       LJMP    ?Subroutine2 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   000003   AA82         MOV     R2,DPL
   \   000005   AB83         MOV     R3,DPH
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   __banked_func __xdata_reentrant uint16 HalUARTWriteISR(uint8 *, uint16)
   \                     HalUARTWriteISR:
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   90....       MOV     DPTR,#isrCfg + 260
   \   000008   E0           MOVX    A,@DPTR
   \   000009   F8           MOV     R0,A
   \   00000A   A3           INC     DPTR
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   C3           CLR     C
   \   00000D   98           SUBB    A,R0
   \   00000E   90....       MOV     DPTR,#isrCfg + 260
   \   000011   E0           MOVX    A,@DPTR
   \   000012   FE           MOV     R6,A
   \   000013   A3           INC     DPTR
   \   000014   E0           MOVX    A,@DPTR
   \   000015   F8           MOV     R0,A
   \   000016   EE           MOV     A,R6
   \   000017   5010         JNC     ??HalUARTWriteISR_0
   \   000019   C3           CLR     C
   \   00001A   98           SUBB    A,R0
   \   00001B   F8           MOV     R0,A
   \   00001C   95E0         SUBB    A,0xE0 /* A   */
   \   00001E   F9           MOV     R1,A
   \   00001F   E8           MOV     A,R0
   \   000020   24FF         ADD     A,#-0x1
   \   000022   18           DEC     R0
   \   000023   E9           MOV     A,R1
   \   000024   34FF         ADDC    A,#-0x1
   \   000026   F9           MOV     R1,A
   \   000027   800D         SJMP    ??HalUARTWriteISR_1
   \                     ??HalUARTWriteISR_0:
   \   000029   C3           CLR     C
   \   00002A   98           SUBB    A,R0
   \   00002B   F8           MOV     R0,A
   \   00002C   95E0         SUBB    A,0xE0 /* A   */
   \   00002E   F9           MOV     R1,A
   \   00002F   E8           MOV     A,R0
   \   000030   247F         ADD     A,#0x7f
   \   000032   F8           MOV     R0,A
   \   000033   5001         JNC     ??HalUARTWriteISR_1
   \   000035   09           INC     R1
   \                     ??HalUARTWriteISR_1:
   \   000036   C3           CLR     C
   \   000037   E8           MOV     A,R0
   \   000038   9C           SUBB    A,R4
   \   000039   E9           MOV     A,R1
   \   00003A   9D           SUBB    A,R5
   \   00003B   5006         JNC     ??HalUARTWriteISR_2
   \   00003D   7A00         MOV     R2,#0x0
   \   00003F   7B00         MOV     R3,#0x0
   \   000041   8048         SJMP    ??HalUARTWriteISR_3
   \                     ??HalUARTWriteISR_2:
   \   000043   7800         MOV     R0,#0x0
   \   000045   7900         MOV     R1,#0x0
   \   000047   800B         SJMP    ??HalUARTWriteISR_4
   \                     ??HalUARTWriteISR_5:
   \   000049   E0           MOVX    A,@DPTR
   \   00004A   04           INC     A
   \                     ??HalUARTWriteISR_6:
   \   00004B   F0           MOVX    @DPTR,A
   \   00004C   439A04       ORL     0x9a,#0x4
   \   00004F   08           INC     R0
   \   000050   E8           MOV     A,R0
   \   000051   7001         JNZ     ??HalUARTWriteISR_4
   \   000053   09           INC     R1
   \                     ??HalUARTWriteISR_4:
   \   000054   C3           CLR     C
   \   000055   E8           MOV     A,R0
   \   000056   9C           SUBB    A,R4
   \   000057   E9           MOV     A,R1
   \   000058   9D           SUBB    A,R5
   \   000059   502C         JNC     ??HalUARTWriteISR_7
   \   00005B   8A82         MOV     DPL,R2
   \   00005D   8B83         MOV     DPH,R3
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   C0E0         PUSH    A
   \   000062   90....       MOV     DPTR,#isrCfg + 261
   \   000065   E0           MOVX    A,@DPTR
   \   000066   FE           MOV     R6,A
   \   000067   74..         MOV     A,#(isrCfg + 132) & 0xff
   \   000069   2E           ADD     A,R6
   \   00006A   F582         MOV     DPL,A
   \   00006C   E4           CLR     A
   \   00006D   34..         ADDC    A,#((isrCfg + 132) >> 8) & 0xff
   \   00006F   F583         MOV     DPH,A
   \   000071   D0E0         POP     A
   \   000073   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   000076   90....       MOV     DPTR,#isrCfg + 262
   \   000079   E4           CLR     A
   \   00007A   F0           MOVX    @DPTR,A
   \   00007B   90....       MOV     DPTR,#isrCfg + 261
   \   00007E   E0           MOVX    A,@DPTR
   \   00007F   C3           CLR     C
   \   000080   947F         SUBB    A,#0x7f
   \   000082   40C5         JC      ??HalUARTWriteISR_5
   \   000084   E4           CLR     A
   \   000085   80C4         SJMP    ??HalUARTWriteISR_6
   \                     ??HalUARTWriteISR_7:
   \   000087   E8           MOV     A,R0
   \   000088   FA           MOV     R2,A
   \   000089   E9           MOV     A,R1
   \   00008A   FB           MOV     R3,A
   \                     ??HalUARTWriteISR_3:
   \   00008B   02....       LJMP    ?Subroutine2 & 0xFFFF
   \   00008E                REQUIRE IEN2

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   static __banked_func __xdata_reentrant void HalUARTPollISR(void)
   \                     HalUARTPollISR:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   90....       MOV     DPTR,#isrCfg + 263
   \   000008   E0           MOVX    A,@DPTR
   \   000009   F8           MOV     R0,A
   \   00000A   A3           INC     DPTR
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   F9           MOV     R1,A
   \   00000D   E8           MOV     A,R0
   \   00000E   49           ORL     A,R1
   \   00000F   6073         JZ      ??HalUARTPollISR_0
   \   000011                ; Setup parameters for call to function HalUARTRxAvailISR
   \   000011   12....       LCALL   `??HalUARTRxAvailISR::?relay`; Banked call to: HalUARTRxAvailISR
   \   000014   8A..         MOV     ?V0,R2
   \   000016   8B..         MOV     ?V1,R3
   \   000018   A8..         MOV     R0,?V0
   \   00001A   A9..         MOV     R1,?V1
   \   00001C   7A00         MOV     R2,#0x0
   \   00001E   90....       MOV     DPTR,#isrCfg + 130
   \   000021   E0           MOVX    A,@DPTR
   \   000022   6019         JZ      ??HalUARTPollISR_1
   \   000024   A3           INC     DPTR
   \   000025   E0           MOVX    A,@DPTR
   \   000026   FB           MOV     R3,A
   \   000027   E595         MOV     A,0x95
   \   000029   C3           CLR     C
   \   00002A   9B           SUBB    A,R3
   \   00002B   FB           MOV     R3,A
   \   00002C   90....       MOV     DPTR,#isrCfg + 130
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   FC           MOV     R4,A
   \   000031   EB           MOV     A,R3
   \   000032   C3           CLR     C
   \   000033   9C           SUBB    A,R4
   \   000034   5005         JNC     ??HalUARTPollISR_2
   \   000036   E0           MOVX    A,@DPTR
   \   000037   C3           CLR     C
   \   000038   9B           SUBB    A,R3
   \   000039   8001         SJMP    ??HalUARTPollISR_3
   \                     ??HalUARTPollISR_2:
   \   00003B   E4           CLR     A
   \                     ??HalUARTPollISR_3:
   \   00003C   F0           MOVX    @DPTR,A
   \                     ??HalUARTPollISR_1:
   \   00003D   E595         MOV     A,0x95
   \   00003F   A3           INC     DPTR
   \   000040   F0           MOVX    @DPTR,A
   \   000041   C3           CLR     C
   \   000042   E8           MOV     A,R0
   \   000043   947F         SUBB    A,#0x7f
   \   000045   E9           MOV     A,R1
   \   000046   9400         SUBB    A,#0x0
   \   000048   4004         JC      ??HalUARTPollISR_4
   \   00004A   7A01         MOV     R2,#0x1
   \   00004C   8019         SJMP    ??HalUARTPollISR_5
   \                     ??HalUARTPollISR_4:
   \   00004E   C3           CLR     C
   \   00004F   E8           MOV     A,R0
   \   000050   9430         SUBB    A,#0x30
   \   000052   E9           MOV     A,R1
   \   000053   9400         SUBB    A,#0x0
   \   000055   4004         JC      ??HalUARTPollISR_6
   \   000057   7A02         MOV     R2,#0x2
   \   000059   800C         SJMP    ??HalUARTPollISR_5
   \                     ??HalUARTPollISR_6:
   \   00005B   E8           MOV     A,R0
   \   00005C   49           ORL     A,R1
   \   00005D   6008         JZ      ??HalUARTPollISR_5
   \   00005F   90....       MOV     DPTR,#isrCfg + 130
   \   000062   E0           MOVX    A,@DPTR
   \   000063   7002         JNZ     ??HalUARTPollISR_5
   \   000065   7A04         MOV     R2,#0x4
   \                     ??HalUARTPollISR_5:
   \   000067   90....       MOV     DPTR,#isrCfg + 262
   \   00006A   E0           MOVX    A,@DPTR
   \   00006B   6006         JZ      ??HalUARTPollISR_7
   \   00006D   E4           CLR     A
   \   00006E   F0           MOVX    @DPTR,A
   \   00006F   EA           MOV     A,R2
   \   000070   D2E4         SETB    0xE0 /* A   */.4
   \   000072   FA           MOV     R2,A
   \                     ??HalUARTPollISR_7:
   \   000073   EA           MOV     A,R2
   \   000074   600E         JZ      ??HalUARTPollISR_0
   \   000076                ; Setup parameters for indirect call
   \   000076   7900         MOV     R1,#0x0
   \   000078   A3           INC     DPTR
   \   000079   E0           MOVX    A,@DPTR
   \   00007A   F8           MOV     R0,A
   \   00007B   A3           INC     DPTR
   \   00007C   E0           MOVX    A,@DPTR
   \   00007D   F583         MOV     DPH,A
   \   00007F   8882         MOV     DPL,R0
   \   000081   12....       LCALL   ?CALL_IND
   \                     ??HalUARTPollISR_0:
   \   000084   02....       LJMP    ?Subroutine1 & 0xFFFF
   \   000087                REQUIRE ST0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   static __banked_func __xdata_reentrant uint16 HalUARTRxAvailISR(void)
   \                     HalUARTRxAvailISR:
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   90....       MOV     DPTR,#isrCfg + 129
   \   000007   E0           MOVX    A,@DPTR
   \   000008   F8           MOV     R0,A
   \   000009   90....       MOV     DPTR,#isrCfg + 128
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   F9           MOV     R1,A
   \   00000E   E8           MOV     A,R0
   \   00000F   C3           CLR     C
   \   000010   99           SUBB    A,R1
   \   000011   E0           MOVX    A,@DPTR
   \   000012   FA           MOV     R2,A
   \   000013   4008         JC      ??HalUARTRxAvailISR_0
   \   000015   E8           MOV     A,R0
   \   000016   C3           CLR     C
   \   000017   9A           SUBB    A,R2
   \   000018   FA           MOV     R2,A
   \   000019   95E0         SUBB    A,0xE0 /* A   */
   \   00001B   800D         SJMP    ??HalUARTRxAvailISR_1
   \                     ??HalUARTRxAvailISR_0:
   \   00001D   7480         MOV     A,#-0x80
   \   00001F   C3           CLR     C
   \   000020   9A           SUBB    A,R2
   \   000021   FA           MOV     R2,A
   \   000022   95E0         SUBB    A,0xE0 /* A   */
   \   000024   FB           MOV     R3,A
   \   000025   EA           MOV     A,R2
   \   000026   28           ADD     A,R0
   \   000027   FA           MOV     R2,A
   \   000028   E4           CLR     A
   \   000029   3B           ADDC    A,R3
   \                     ??HalUARTRxAvailISR_1:
   \   00002A   FB           MOV     R3,A
   \   00002B   80..         SJMP    ??Subroutine22_0

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \   __near_func __xdata_reentrant __interrupt void halUart0RxIsr(void)
   \                     halUart0RxIsr:
   \   000000   C0E0         PUSH    A
   \   000002   C0D0         PUSH    PSW
   \   000004   E8           MOV     A,R0
   \   000005   C0E0         PUSH    A
   \   000007   E9           MOV     A,R1
   \   000008   C0E0         PUSH    A
   \   00000A   C082         PUSH    DPL
   \   00000C   C083         PUSH    DPH
   \   00000E                ; Saved register size: 6
   \   00000E                ; Auto size: 0
   \   00000E   A8C1         MOV     R0,0xc1+0x0
   \   000010   E8           MOV     A,R0
   \   000011   C0E0         PUSH    A
   \   000013   90....       MOV     DPTR,#isrCfg + 129
   \   000016   E0           MOVX    A,@DPTR
   \   000017   F8           MOV     R0,A
   \   000018   74..         MOV     A,#isrCfg & 0xff
   \   00001A   28           ADD     A,R0
   \   00001B   F582         MOV     DPL,A
   \   00001D   E4           CLR     A
   \   00001E   34..         ADDC    A,#(isrCfg >> 8) & 0xff
   \   000020   F583         MOV     DPH,A
   \   000022   D0E0         POP     A
   \   000024   F0           MOVX    @DPTR,A
   \   000025   90....       MOV     DPTR,#isrCfg + 128
   \   000028   E0           MOVX    A,@DPTR
   \   000029   F8           MOV     R0,A
   \   00002A   A3           INC     DPTR
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   68           XRL     A,R0
   \   00002D   7006         JNZ     ??halUart0RxIsr_0
   \   00002F   E595         MOV     A,0x95
   \   000031   90....       MOV     DPTR,#isrCfg + 131
   \   000034   F0           MOVX    @DPTR,A
   \                     ??halUart0RxIsr_0:
   \   000035   90....       MOV     DPTR,#isrCfg + 129
   \   000038   E0           MOVX    A,@DPTR
   \   000039   04           INC     A
   \   00003A   F0           MOVX    @DPTR,A
   \   00003B   C3           CLR     C
   \   00003C   9480         SUBB    A,#-0x80
   \   00003E   4002         JC      ??halUart0RxIsr_1
   \   000040   E4           CLR     A
   \   000041   F0           MOVX    @DPTR,A
   \                     ??halUart0RxIsr_1:
   \   000042   A3           INC     DPTR
   \   000043   74C6         MOV     A,#-0x3a
   \   000045   F0           MOVX    @DPTR,A
   \   000046                REQUIRE ?Subroutine3
   \   000046                REQUIRE U0DBUF
   \   000046                REQUIRE ST0
   \   000046                ; // Fall through to label ?Subroutine3

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   D0E0         POP     A
   \   000006   F9           MOV     R1,A
   \   000007   D0E0         POP     A
   \   000009   F8           MOV     R0,A
   \   00000A   D0D0         POP     PSW
   \   00000C   D0E0         POP     A
   \   00000E   32           RETI

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \   __near_func __xdata_reentrant __interrupt void halUart0TxIsr(void)
   \                     halUart0TxIsr:
   \   000000   C0E0         PUSH    A
   \   000002   C0D0         PUSH    PSW
   \   000004   E8           MOV     A,R0
   \   000005   C0E0         PUSH    A
   \   000007   E9           MOV     A,R1
   \   000008   C0E0         PUSH    A
   \   00000A   C082         PUSH    DPL
   \   00000C   C083         PUSH    DPH
   \   00000E                ; Saved register size: 6
   \   00000E                ; Auto size: 0
   \   00000E   90....       MOV     DPTR,#isrCfg + 260
   \   000011   E0           MOVX    A,@DPTR
   \   000012   F8           MOV     R0,A
   \   000013   A3           INC     DPTR
   \   000014   E0           MOVX    A,@DPTR
   \   000015   68           XRL     A,R0
   \   000016   7008         JNZ     ??halUart0TxIsr_0
   \   000018   539AFB       ANL     0x9a,#0xfb
   \   00001B   A3           INC     DPTR
   \   00001C   7401         MOV     A,#0x1
   \   00001E   8022         SJMP    ??halUart0TxIsr_1
   \                     ??halUart0TxIsr_0:
   \   000020   C2E9         CLR     0xe8.1
   \   000022   90....       MOV     DPTR,#isrCfg + 260
   \   000025   E0           MOVX    A,@DPTR
   \   000026   F8           MOV     R0,A
   \   000027   7401         MOV     A,#0x1
   \   000029   28           ADD     A,R0
   \   00002A   F0           MOVX    @DPTR,A
   \   00002B   74..         MOV     A,#(isrCfg + 132) & 0xff
   \   00002D   28           ADD     A,R0
   \   00002E   F582         MOV     DPL,A
   \   000030   E4           CLR     A
   \   000031   34..         ADDC    A,#((isrCfg + 132) >> 8) & 0xff
   \   000033   F583         MOV     DPH,A
   \   000035   E0           MOVX    A,@DPTR
   \   000036   F5C1         MOV     0xc1,A
   \   000038   90....       MOV     DPTR,#isrCfg + 260
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   C3           CLR     C
   \   00003D   9480         SUBB    A,#-0x80
   \   00003F   4002         JC      ??halUart0TxIsr_2
   \   000041   E4           CLR     A
   \                     ??halUart0TxIsr_1:
   \   000042   F0           MOVX    @DPTR,A
   \                     ??halUart0TxIsr_2:
   \   000043   80..         SJMP    ?Subroutine3
   \   000045                REQUIRE IEN2
   \   000045                REQUIRE _A_IRCON2
   \   000045                REQUIRE U0DBUF
     82          #endif
     83          #if HAL_UART_USB
     84          #include "_hal_uart_usb.c"
     85          #endif
     86          
     87          /******************************************************************************
     88           * @fn      HalUARTInit
     89           *
     90           * @brief   Initialize the UART
     91           *
     92           * @param   none
     93           *
     94           * @return  none
     95           *****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     96          void HalUARTInit(void)
   \                     HalUARTInit:
     97          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
     98          #if HAL_UART_DMA
     99            HalUARTInitDMA();
   \   000004                ; Setup parameters for call to function HalUARTInitDMA
   \   000004   12....       LCALL   `??HalUARTInitDMA::?relay`; Banked call to: HalUARTInitDMA
    100          #endif
    101          #if HAL_UART_ISR
    102            HalUARTInitISR();
   \   000007   53FF3F       ANL     0xff,#0x3f
   \   00000A   85FFFF       MOV     0xff,0xff
   \   00000D   53F1FE       ANL     0xf1,#0xfe
   \   000010   43F30C       ORL     0xf3,#0xc
   \   000013   53F2F3       ANL     0xf2,#0xf3
   \   000016   758680       MOV     0x86,#-0x80
   \   000019   75C480       MOV     0xc4,#-0x80
    103          #endif
    104          #if HAL_UART_USB
    105            HalUARTInitUSB();
    106          #endif
    107          }
   \   00001C   80..         SJMP    ??Subroutine22_0
   \   00001E                REQUIRE P2DIR
   \   00001E                REQUIRE PERCFG
   \   00001E                REQUIRE P0SEL
   \   00001E                REQUIRE ADCCFG
   \   00001E                REQUIRE U0CSR
   \   00001E                REQUIRE U0UCR
    108          
    109          /******************************************************************************
    110           * @fn      HalUARTOpen
    111           *
    112           * @brief   Open a port according tp the configuration specified by parameter.
    113           *
    114           * @param   port   - UART port
    115           *          config - contains configuration information
    116           *
    117           * @return  Status of the function call
    118           *****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    119          uint8 HalUARTOpen(uint8 port, halUARTCfg_t *config)
   \                     HalUARTOpen:
    120          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    121            (void)port;
    122            (void)config;
    123          
    124          #if (HAL_UART_DMA == 1)
    125            if (port == HAL_UART_PORT_0)  HalUARTOpenDMA(config);
    126          #endif
    127          #if (HAL_UART_DMA == 2)
    128            if (port == HAL_UART_PORT_1)  HalUARTOpenDMA(config);
   \   000007   7401         MOV     A,#0x1
   \   000009   6E           XRL     A,R6
   \   00000A   7005         JNZ     ??HalUARTOpen_0
   \   00000C                ; Setup parameters for call to function HalUARTOpenDMA
   \   00000C   12....       LCALL   `??HalUARTOpenDMA::?relay`; Banked call to: HalUARTOpenDMA
   \   00000F   805E         SJMP    ??HalUARTOpen_1
    129          #endif
    130          #if (HAL_UART_ISR == 1)
    131            if (port == HAL_UART_PORT_0)  HalUARTOpenISR(config);
   \                     ??HalUARTOpen_0:
   \   000011   EE           MOV     A,R6
   \   000012   705B         JNZ     ??HalUARTOpen_1
   \   000014   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   000017   90....       MOV     DPTR,#isrCfg + 263
   \   00001A   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   00001D   600F         JZ      ??HalUARTOpen_2
   \   00001F   8A82         MOV     DPL,R2
   \   000021   8B83         MOV     DPH,R3
   \   000023   A3           INC     DPTR
   \   000024   E0           MOVX    A,@DPTR
   \   000025   6404         XRL     A,#0x4
   \   000027   6005         JZ      ??HalUARTOpen_2
   \   000029   75C23B       MOV     0xc2,#0x3b
   \   00002C   8003         SJMP    ??HalUARTOpen_3
   \                     ??HalUARTOpen_2:
   \   00002E   75C2D8       MOV     0xc2,#-0x28
   \                     ??HalUARTOpen_3:
   \   000031   8A82         MOV     DPL,R2
   \   000033   8B83         MOV     DPH,R3
   \   000035   A3           INC     DPTR
   \   000036   E0           MOVX    A,@DPTR
   \   000037   6013         JZ      ??HalUARTOpen_4
   \   000039   14           DEC     A
   \   00003A   600B         JZ      ??HalUARTOpen_5
   \   00003C   14           DEC     A
   \   00003D   6003         JZ      ??HalUARTOpen_6
   \   00003F   14           DEC     A
   \   000040   700F         JNZ     ??HalUARTOpen_7
   \                     ??HalUARTOpen_6:
   \   000042   75C50A       MOV     0xc5,#0xa
   \   000045   800D         SJMP    ??HalUARTOpen_8
   \                     ??HalUARTOpen_5:
   \   000047   75C509       MOV     0xc5,#0x9
   \   00004A   8008         SJMP    ??HalUARTOpen_8
   \                     ??HalUARTOpen_4:
   \   00004C   75C508       MOV     0xc5,#0x8
   \   00004F   8003         SJMP    ??HalUARTOpen_8
   \                     ??HalUARTOpen_7:
   \   000051   75C50B       MOV     0xc5,#0xb
   \                     ??HalUARTOpen_8:
   \   000054   8A82         MOV     DPL,R2
   \   000056   8B83         MOV     DPH,R3
   \   000058   A3           INC     DPTR
   \   000059   A3           INC     DPTR
   \   00005A   E0           MOVX    A,@DPTR
   \   00005B   6008         JZ      ??HalUARTOpen_9
   \   00005D   75C442       MOV     0xc4,#0x42
   \   000060   43F330       ORL     0xf3,#0x30
   \   000063   8003         SJMP    ??HalUARTOpen_10
   \                     ??HalUARTOpen_9:
   \   000065   75C402       MOV     0xc4,#0x2
   \                     ??HalUARTOpen_10:
   \   000068   438640       ORL     0x86,#0x40
   \   00006B   D2AA         SETB    0xa8.2
   \   00006D   D2E9         SETB    0xe8.1
    132          #endif
    133          #if (HAL_UART_ISR == 2)
    134            if (port == HAL_UART_PORT_1)  HalUARTOpenISR(config);
    135          #endif
    136          #if (HAL_UART_USB)
    137            HalUARTOpenUSB(config);
    138          #endif
    139            
    140            return HAL_UART_SUCCESS;
   \                     ??HalUARTOpen_1:
   \   00006F   7900         MOV     R1,#0x0
   \   000071                REQUIRE ?Subroutine2
   \   000071                REQUIRE U0BAUD
   \   000071                REQUIRE U0GCR
   \   000071                REQUIRE U0UCR
   \   000071                REQUIRE P0SEL
   \   000071                REQUIRE U0CSR
   \   000071                REQUIRE _A_IEN0
   \   000071                REQUIRE _A_IRCON2
   \   000071                ; // Fall through to label ?Subroutine2
    141          }
    142          
    143          /*****************************************************************************
    144           * @fn      HalUARTRead
    145           *
    146           * @brief   Read a buffer from the UART
    147           *
    148           * @param   port - USART module designation
    149           *          buf  - valid data buffer at least 'len' bytes in size
    150           *          len  - max length number of bytes to copy to 'buf'
    151           *
    152           * @return  length of buffer that was read
    153           *****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    154          uint16 HalUARTRead(uint8 port, uint8 *buf, uint16 len)
   \                     HalUARTRead:
    155          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    156            (void)port;
    157            (void)buf;
    158            (void)len;
    159          
    160          #if (HAL_UART_DMA == 1)
    161            if (port == HAL_UART_PORT_0)  return HalUARTReadDMA(buf, len);
    162          #endif
    163          #if (HAL_UART_DMA == 2)
    164            if (port == HAL_UART_PORT_1)  return HalUARTReadDMA(buf, len);
   \   000007   7401         MOV     A,#0x1
   \   000009   6E           XRL     A,R6
   \   00000A   704C         JNZ     ??HalUARTRead_0
   \   00000C   7800         MOV     R0,#0x0
   \   00000E   7900         MOV     R1,#0x0
   \   000010   8027         SJMP    ??HalUARTRead_1
   \                     ??HalUARTRead_2:
   \   000012   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   000015   E0           MOVX    A,@DPTR
   \   000016   8A82         MOV     DPL,R2
   \   000018   8B83         MOV     DPH,R3
   \   00001A   F0           MOVX    @DPTR,A
   \   00001B   A3           INC     DPTR
   \   00001C   AA82         MOV     R2,DPL
   \   00001E   AB83         MOV     R3,DPH
   \   000020   E5FA         MOV     A,0xfa
   \   000022   F4           CPL     A
   \   000023   F5..         MOV     ?V3,A
   \   000025   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   000028   E4           CLR     A
   \   000029   F0           MOVX    @DPTR,A
   \   00002A   A3           INC     DPTR
   \   00002B   E5..         MOV     A,?V3
   \   00002D   F0           MOVX    @DPTR,A
   \   00002E   90....       MOV     DPTR,#dmaCfg + 512
   \   000031   E0           MOVX    A,@DPTR
   \   000032   04           INC     A
   \   000033   F0           MOVX    @DPTR,A
   \   000034   08           INC     R0
   \   000035   E8           MOV     A,R0
   \   000036   7001         JNZ     ??HalUARTRead_1
   \   000038   09           INC     R1
   \                     ??HalUARTRead_1:
   \   000039   C3           CLR     C
   \   00003A   E8           MOV     A,R0
   \   00003B   9C           SUBB    A,R4
   \   00003C   E9           MOV     A,R1
   \   00003D   9D           SUBB    A,R5
   \   00003E   5010         JNC     ??HalUARTRead_3
   \   000040   E5FA         MOV     A,0xfa
   \   000042   F5..         MOV     ?V2,A
   \   000044   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   000047   A3           INC     DPTR
   \   000048   E0           MOVX    A,@DPTR
   \   000049   65..         XRL     A,?V2
   \   00004B   7001         JNZ     ??HalUARTRead_4
   \   00004D   E4           CLR     A
   \                     ??HalUARTRead_4:
   \   00004E   60C2         JZ      ??HalUARTRead_2
   \                     ??HalUARTRead_3:
   \   000050   C295         CLR     0x90.5
   \   000052   E8           MOV     A,R0
   \   000053   FA           MOV     R2,A
   \   000054   E9           MOV     A,R1
   \   000055   FB           MOV     R3,A
   \   000056   800C         SJMP    ??HalUARTRead_5
    165          #endif
    166          #if (HAL_UART_ISR == 1)
    167            if (port == HAL_UART_PORT_0)  return HalUARTReadISR(buf, len);
   \                     ??HalUARTRead_0:
   \   000058   EE           MOV     A,R6
   \   000059   7005         JNZ     ??HalUARTRead_6
   \   00005B                ; Setup parameters for call to function HalUARTReadISR
   \   00005B   12....       LCALL   `??HalUARTReadISR::?relay`; Banked call to: HalUARTReadISR
   \   00005E   8004         SJMP    ??HalUARTRead_5
    168          #endif
    169          #if (HAL_UART_ISR == 2)
    170            if (port == HAL_UART_PORT_1)  return HalUARTReadISR(buf, len);
    171          #endif
    172          
    173          #if HAL_UART_USB
    174            return HalUARTRx(buf, len);
    175          #else
    176            return 0;
   \                     ??HalUARTRead_6:
   \   000060   7A00         MOV     R2,#0x0
   \   000062   7B00         MOV     R3,#0x0
   \                     ??HalUARTRead_5:
   \   000064   7F04         MOV     R7,#0x4
   \   000066   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   000069                REQUIRE U1BAUD
   \   000069                REQUIRE _A_P1
    177          #endif
    178          }
    179          
    180          /******************************************************************************
    181           * @fn      HalUARTWrite
    182           *
    183           * @brief   Write a buffer to the UART.
    184           *
    185           * @param   port - UART port
    186           *          buf  - pointer to the buffer that will be written, not freed
    187           *          len  - length of
    188           *
    189           * @return  length of the buffer that was sent
    190           *****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    191          uint16 HalUARTWrite(uint8 port, uint8 *buf, uint16 len)
   \                     HalUARTWrite:
    192          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    193            (void)port;
    194            (void)buf;
    195            (void)len;
    196          
    197          #if (HAL_UART_DMA == 1)
    198            if (port == HAL_UART_PORT_0)  return HalUARTWriteDMA(buf, len);
    199          #endif
    200          #if (HAL_UART_DMA == 2)
    201            if (port == HAL_UART_PORT_1)  return HalUARTWriteDMA(buf, len);
   \   000007   7401         MOV     A,#0x1
   \   000009   6E           XRL     A,R6
   \   00000A   7005         JNZ     ??HalUARTWrite_0
   \   00000C                ; Setup parameters for call to function HalUARTWriteDMA
   \   00000C   12....       LCALL   `??HalUARTWriteDMA::?relay`; Banked call to: HalUARTWriteDMA
   \   00000F   800C         SJMP    ??HalUARTWrite_1
    202          #endif
    203          #if (HAL_UART_ISR == 1)
    204            if (port == HAL_UART_PORT_0)  return HalUARTWriteISR(buf, len);
   \                     ??HalUARTWrite_0:
   \   000011   EE           MOV     A,R6
   \   000012   7005         JNZ     ??HalUARTWrite_2
   \   000014                ; Setup parameters for call to function HalUARTWriteISR
   \   000014   12....       LCALL   `??HalUARTWriteISR::?relay`; Banked call to: HalUARTWriteISR
   \   000017   8004         SJMP    ??HalUARTWrite_1
    205          #endif
    206          #if (HAL_UART_ISR == 2)
    207            if (port == HAL_UART_PORT_1)  return HalUARTWriteISR(buf, len);
    208          #endif
    209          
    210          #if HAL_UART_USB
    211            HalUARTTx(buf, len);
    212            return len;
    213          #else
    214            return 0;
   \                     ??HalUARTWrite_2:
   \   000019   7A00         MOV     R2,#0x0
   \   00001B   7B00         MOV     R3,#0x0
   \                     ??HalUARTWrite_1:
   \   00001D   02....       LJMP    ?Subroutine2 & 0xFFFF
    215          #endif
    216          }
    217          
    218          /******************************************************************************
    219           * @fn      HalUARTSuspend
    220           *
    221           * @brief   Suspend UART hardware before entering PM mode 1, 2 or 3.
    222           *
    223           * @param   None
    224           *
    225           * @return  None
    226           *****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    227          void HalUARTSuspend( void )
   \                     HalUARTSuspend:
    228          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    229          #if HAL_UART_DMA
    230            HalUARTSuspendDMA();
   \   000000   D295         SETB    0x90.5
   \   000002   C2FE         CLR     0xf8.6
   \   000004   43AB10       ORL     0xab,#0x10
    231          #endif
    232          #if HAL_UART_ISR
    233            HalUARTSuspendISR();
   \   000007   5386BF       ANL     0x86,#0xbf
    234          #endif
    235          }
   \   00000A   02....       LJMP    ?BRET
   \   00000D                REQUIRE _A_P1
   \   00000D                REQUIRE _A_U1CSR
   \   00000D                REQUIRE P0IEN
   \   00000D                REQUIRE U0CSR
    236          
    237          /******************************************************************************
    238           * @fn      HalUARTResume
    239           *
    240           * @brief   Resume UART hardware after exiting PM mode 1, 2 or 3.
    241           *
    242           * @param   None
    243           *
    244           * @return  None
    245           *****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    246          void HalUARTResume( void )
   \                     HalUARTResume:
    247          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    248          #if HAL_UART_DMA
    249            HalUARTResumeDMA();
   \   000000   53ABEF       ANL     0xab,#0xef
   \   000003   43FB80       ORL     0xfb,#0x80
   \   000006   D2FE         SETB    0xf8.6
   \   000008   C295         CLR     0x90.5
    250          #endif
    251          #if HAL_UART_ISR
    252            HalUARTResumeISR();
   \   00000A   43C480       ORL     0xc4,#0x80
   \   00000D   438640       ORL     0x86,#0x40
    253          #endif
    254          }
   \   000010   02....       LJMP    ?BRET
   \   000013                REQUIRE P0IEN
   \   000013                REQUIRE U1UCR
   \   000013                REQUIRE _A_U1CSR
   \   000013                REQUIRE _A_P1
   \   000013                REQUIRE U0UCR
   \   000013                REQUIRE U0CSR
    255          
    256          /***************************************************************************************************
    257           * @fn      HalUARTPoll
    258           *
    259           * @brief   Poll the UART.
    260           *
    261           * @param   none
    262           *
    263           * @return  none
    264           *****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    265          void HalUARTPoll(void)
   \                     HalUARTPoll:
    266          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    267          #if HAL_UART_DMA
    268            HalUARTPollDMA();
   \   000004                ; Setup parameters for call to function HalUARTPollDMA
   \   000004   12....       LCALL   `??HalUARTPollDMA::?relay`; Banked call to: HalUARTPollDMA
    269          #endif
    270          #if HAL_UART_ISR
    271            HalUARTPollISR();
   \   000007                ; Setup parameters for call to function HalUARTPollISR
   \   000007   12....       LCALL   `??HalUARTPollISR::?relay`; Banked call to: HalUARTPollISR
    272          #endif
    273          #if HAL_UART_USB
    274            HalUARTPollUSB();
    275          #endif
    276          }
   \   00000A   02....       LJMP    ??Subroutine22_0 & 0xFFFF
    277          
    278          /**************************************************************************************************
    279           * @fn      Hal_UART_RxBufLen()
    280           *
    281           * @brief   Calculate Rx Buffer length - the number of bytes in the buffer.
    282           *
    283           * @param   port - UART port
    284           *
    285           * @return  length of current Rx Buffer
    286           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    287          uint16 Hal_UART_RxBufLen( uint8 port )
   \                     Hal_UART_RxBufLen:
    288          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    289            (void)port;
    290          
    291          #if (HAL_UART_DMA == 1)
    292            if (port == HAL_UART_PORT_0)  return HalUARTRxAvailDMA();
    293          #endif
    294          #if (HAL_UART_DMA == 2)
    295            if (port == HAL_UART_PORT_1)  return HalUARTRxAvailDMA();
   \   000007   7401         MOV     A,#0x1
   \   000009   6E           XRL     A,R6
   \   00000A   7005         JNZ     ??Hal_UART_RxBufLen_0
   \   00000C                ; Setup parameters for call to function HalUARTRxAvailDMA
   \   00000C   12....       LCALL   `??HalUARTRxAvailDMA::?relay`; Banked call to: HalUARTRxAvailDMA
   \   00000F   800C         SJMP    ??Hal_UART_RxBufLen_1
    296          #endif
    297          #if (HAL_UART_ISR == 1)
    298            if (port == HAL_UART_PORT_0)  return HalUARTRxAvailISR();
   \                     ??Hal_UART_RxBufLen_0:
   \   000011   EE           MOV     A,R6
   \   000012   7005         JNZ     ??Hal_UART_RxBufLen_2
   \   000014                ; Setup parameters for call to function HalUARTRxAvailISR
   \   000014   12....       LCALL   `??HalUARTRxAvailISR::?relay`; Banked call to: HalUARTRxAvailISR
   \   000017   8004         SJMP    ??Hal_UART_RxBufLen_1
    299          #endif
    300          #if (HAL_UART_ISR == 2)
    301            if (port == HAL_UART_PORT_1)  return HalUARTRxAvailISR();
    302          #endif
    303          #if HAL_UART_USB
    304            return HalUARTRxAvailUSB();
    305          #else
    306            return 0;
   \                     ??Hal_UART_RxBufLen_2:
   \   000019   7A00         MOV     R2,#0x0
   \   00001B   7B00         MOV     R3,#0x0
   \                     ??Hal_UART_RxBufLen_1:
   \   00001D   02....       LJMP    ?Subroutine2 & 0xFFFF
    307          #endif
    308          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   90....       MOV     DPTR,#dmaCfg + 512
   \   000003   E0           MOVX    A,@DPTR
   \   000004   25E0         ADD     A,0xE0 /* A   */
   \   000006   F5..         MOV     ?V0,A
   \   000008   E4           CLR     A
   \   000009   33           RLC     A
   \   00000A   F5..         MOV     ?V1,A
   \   00000C   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   74..         MOV     A,#dmaCfg & 0xff
   \   000002   25..         ADD     A,?V0
   \   000004   F582         MOV     DPL,A
   \   000006   74..         MOV     A,#(dmaCfg >> 8) & 0xff
   \   000008   35..         ADDC    A,?V1
   \   00000A   F583         MOV     DPH,A
   \   00000C   22           RET

   \                                 In  segment INTVEC, offset 0x13, root
   \                     `??halUart0RxIsr::??INTVEC 19`:
   \   000013   02....       LJMP       (halUart0RxIsr)

   \                                 In  segment INTVEC, offset 0x3b, root
   \                     `??halUart0TxIsr::??INTVEC 59`:
   \   00003B   02....       LJMP       (halUart0TxIsr)

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalUARTInitDMA::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTInitDMA

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalUARTOpenDMA::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTOpenDMA

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalUARTWriteDMA::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTWriteDMA

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalUARTPollDMA::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTPollDMA

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalUARTRxAvailDMA::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTRxAvailDMA

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalUARTIsrDMA::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTIsrDMA

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalUARTReadISR::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTReadISR

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalUARTWriteISR::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTWriteISR

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalUARTPollISR::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTPollISR

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalUARTRxAvailISR::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTRxAvailISR

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalUARTInit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalUARTOpen::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTOpen

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalUARTRead::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTRead

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalUARTWrite::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTWrite

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalUARTSuspend::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTSuspend

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalUARTResume::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTResume

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalUARTPoll::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTPoll

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??Hal_UART_RxBufLen::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Hal_UART_RxBufLen
    309          
    310          /******************************************************************************
    311          ******************************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      2      0   HalUARTInit
        2      0   -> HalUARTInitDMA
      2      0   HalUARTInitDMA
      2     10   HalUARTIsrDMA
      0      9   HalUARTOpen
        0      9   -> HalUARTOpenDMA
      2      9   HalUARTOpenDMA
        2      0   -> osal_memset
      2      0   HalUARTPoll
        2      0   -> HalUARTPollDMA
        2      0   -> HalUARTPollISR
      0     10   HalUARTPollDMA
        0     10   -> HalUARTIsrDMA
        0     10   -> HalUARTRxAvailDMA
      0     10   HalUARTPollISR
        0     10   -> HalUARTRxAvailISR
      1     12   HalUARTRead
        0     12   -> HalUARTReadISR
      1     21   HalUARTReadISR
      0      0   HalUARTResume
      0     19   HalUARTRxAvailDMA
      2     10   HalUARTRxAvailISR
      0      0   HalUARTSuspend
      0      9   HalUARTWrite
        0      9   -> HalUARTWriteDMA
        0      9   -> HalUARTWriteISR
      1     22   HalUARTWriteDMA
      1     18   HalUARTWriteISR
      0      9   Hal_UART_RxBufLen
        0      9   -> HalUARTRxAvailDMA
        0      9   -> HalUARTRxAvailISR
      7      0   halUart0RxIsr
      6      0   halUart0TxIsr


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       7  ??Subroutine22_0
       1  ?Subroutine0
       5  ?Subroutine1
      15  ?Subroutine10
      30  ?Subroutine11
       4  ?Subroutine12
      10  ?Subroutine13
       4  ?Subroutine14
       7  ?Subroutine15
       6  ?Subroutine16
      13  ?Subroutine17
      19  ?Subroutine18
      13  ?Subroutine19
       5  ?Subroutine2
       6  ?Subroutine20
      11  ?Subroutine21
      15  ?Subroutine3
       7  ?Subroutine4
      11  ?Subroutine5
       8  ?Subroutine6
      16  ?Subroutine7
       8  ?Subroutine8
       9  ?Subroutine9
       1  ADCCFG
       1  DMAARM
       1  DMAIRQ
       1  DMAREQ
      30  HalUARTInit
       6  HalUARTInit::?relay
     109  HalUARTInitDMA
       6  HalUARTInitDMA::?relay
      47  HalUARTIsrDMA
       6  HalUARTIsrDMA::?relay
     113  HalUARTOpen
       6  HalUARTOpen::?relay
     167  HalUARTOpenDMA
       6  HalUARTOpenDMA::?relay
      13  HalUARTPoll
       6  HalUARTPoll::?relay
     356  HalUARTPollDMA
       6  HalUARTPollDMA::?relay
     135  HalUARTPollISR
       6  HalUARTPollISR::?relay
     105  HalUARTRead
       6  HalUARTRead::?relay
      74  HalUARTReadISR
       6  HalUARTReadISR::?relay
      19  HalUARTResume
       6  HalUARTResume::?relay
      76  HalUARTRxAvailDMA
       6  HalUARTRxAvailDMA::?relay
      45  HalUARTRxAvailISR
       6  HalUARTRxAvailISR::?relay
      13  HalUARTSuspend
       6  HalUARTSuspend::?relay
      32  HalUARTWrite
       6  HalUARTWrite::?relay
     185  HalUARTWriteDMA
       6  HalUARTWriteDMA::?relay
     142  HalUARTWriteISR
       6  HalUARTWriteISR::?relay
      32  Hal_UART_RxBufLen
       6  Hal_UART_RxBufLen::?relay
       1  IEN2
       1  P0IEN
       1  P0SEL
       1  P1DIR
       1  P1SEL
       1  P2DIR
       1  PERCFG
       1  ST0
       1  U0BAUD
       1  U0CSR
       1  U0DBUF
       1  U0GCR
       1  U0UCR
       1  U1BAUD
       1  U1GCR
       1  U1UCR
       1  _A_IEN0
       1  _A_IRCON2
       1  _A_P1
       1  _A_U1CSR
    1038  dmaCfg
      70  halUart0RxIsr
       3  halUart0RxIsr::??INTVEC 19
      69  halUart0TxIsr
       3  halUart0TxIsr::??INTVEC 59
     265  isrCfg

 
 1 908 bytes in segment BANKED_CODE
   108 bytes in segment BANK_RELAYS
     6 bytes in segment INTVEC
   154 bytes in segment NEAR_CODE
    24 bytes in segment SFR_AN
 1 303 bytes in segment XDATA_Z
 
 2 170 bytes of CODE  memory (+  6 bytes shared)
     0 bytes of DATA  memory (+ 24 bytes shared)
 1 303 bytes of XDATA memory

Errors: none
Warnings: none
