///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V9.30.1.3056 for 8051               31/Oct/2016  17:45:36
// Copyright 2004-2015 IAR Systems AB.
// Standalone license - IAR Embedded Workbench for 8051
//
//    Core               =  plain
//    Code model         =  banked
//    Data model         =  large
//    Calling convention =  xdata reentrant
//    Constant location  =  data_rom
//    Dptr setup         =  1,16
//                          
//    Source file        =  
//        E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V2.04优化动态内存\Module\WaterMachine\WaterMachineApp.c
//    Command line       =  
//        -f "E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V2.04优化动态内存\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"
//        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
//        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f
//        "E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V2.04优化动态内存\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
//        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
//        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
//        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
//        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
//        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
//        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
//        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
//        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
//        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
//        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
//        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
//        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
//        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
//        -DPOLL_RATE=50 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
//        -DREJOIN_POLL_RATE=440 "E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V2.04优化动态内存\Module\WaterMachine\WaterMachineApp.c"
//        -D HAL_UART=TRUE -D HAL_UART_ISR=1 -D HAL_UART_DMA=0 -D LOG_OUT -D
//        UART1_PROTOCOL_RESOLVER=1 -D xISQC -D NWK_AUTO_POLL -D xZTOOL_P1 -D
//        ISR_KEYINTERRUPT -D xMT_TASK -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D
//        xLCD_SUPPORTED=DEBUG -D xPOWER_SAVING -lC
//        "E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V2.04优化动态内存\CC2530DB\WaterMachine\List"
//        -lA "E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V2.04优化动态内存\CC2530DB\WaterMachine\List"
//        --diag_suppress Pe001,Pa010 -o
//        "E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V2.04优化动态内存\CC2530DB\WaterMachine\Obj"
//        -e --no_code_motion --debug --core=plain --dptr=16,1
//        --data_model=large --code_model=banked
//        --calling_convention=xdata_reentrant --place_constants=data_rom
//        --nr_virtual_regs 8 -I "E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V2.04优化动态内存\CC2530DB\"
//        -I "E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V2.04优化动态内存\CC2530DB\..\Source\"
//        -I "E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V2.04优化动态内存\CC2530DB\..\Frame\"
//        -I "E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V2.04优化动态内存\CC2530DB\..\Module\WaterMachine\"
//        -I "E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V2.04优化动态内存\CC2530DB\..\..\..\ZMain\TI2530DB\"
//        -I "E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V2.04优化动态内存\CC2530DB\..\..\..\..\..\Components\hal\include\"
//        -I "E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V2.04优化动态内存\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
//        -I "E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V2.04优化动态内存\CC2530DB\..\..\..\..\..\Components\mac\include\"
//        -I "E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V2.04优化动态内存\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
//        -I "E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V2.04优化动态内存\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
//        -I "E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V2.04优化动态内存\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
//        -I "E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V2.04优化动态内存\CC2530DB\..\..\..\..\..\Components\mt\"
//        -I "E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V2.04优化动态内存\CC2530DB\..\..\..\..\..\Components\osal\include\"
//        -I "E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V2.04优化动态内存\CC2530DB\..\..\..\..\..\Components\services\saddr\"
//        -I "E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V2.04优化动态内存\CC2530DB\..\..\..\..\..\Components\services\sdata\"
//        -I "E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V2.04优化动态内存\CC2530DB\..\..\..\..\..\Components\stack\af\"
//        -I "E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V2.04优化动态内存\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
//        -I "E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V2.04优化动态内存\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
//        -I "E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V2.04优化动态内存\CC2530DB\..\..\..\..\..\Components\stack\sec\"
//        -I "E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V2.04优化动态内存\CC2530DB\..\..\..\..\..\Components\stack\sys\"
//        -I "E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V2.04优化动态内存\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
//        -I "E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V2.04优化动态内存\CC2530DB\..\..\..\..\..\Components\zmac\"
//        -I "E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V2.04优化动态内存\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
//        -Ohz
//    List file          =  
//        E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V2.04优化动态内存\CC2530DB\WaterMachine\List\WaterMachineApp.s51
//
///////////////////////////////////////////////////////////////////////////////

        NAME WaterMachineApp

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__iar_require _formatted_write", ""
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?V0
        EXTERN ?V1
        EXTERN ?V2
        EXTERN ?V3
        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?CALL_IND
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?MOVE_LONG8_XDATA_XDATA
        EXTERN ?PUSH_XSTACK8_X_FOUR
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?US_SWITCH_SPARSE
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN ?XSTACK_DISP101_8
        EXTERN ?XSTACK_DISP102_8
        EXTERN __INIT_XDATA_Z

        PUBLIC `??App_GetTaskID::?relay`
        FUNCTION `??App_GetTaskID::?relay`,0203H
        PUBLIC `??App_GetepDesc::?relay`
        FUNCTION `??App_GetepDesc::?relay`,0203H
        PUBLIC `??App_Init::?relay`
        FUNCTION `??App_Init::?relay`,0203H
        PUBLIC `??App_ProcessEvent::?relay`
        FUNCTION `??App_ProcessEvent::?relay`,0203H
        FUNCTION `??App_ProcessZDOMsgs::?relay`,0203H
        PUBLIC `??BrodcastData::?relay`
        FUNCTION `??BrodcastData::?relay`,0203H
        PUBLIC `??SendHandle::?relay`
        FUNCTION `??SendHandle::?relay`,0203H
        PUBLIC `??SendHearBeat::?relay`
        FUNCTION `??SendHearBeat::?relay`,0203H
        PUBLIC App_ClusterList
        PUBLIC App_DstAddr
        PUBLIC App_GetTaskID
        FUNCTION App_GetTaskID,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC App_GetepDesc
        FUNCTION App_GetepDesc,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC App_Init
        FUNCTION App_Init,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC App_NwkState
        PUBLIC App_ProcessEvent
        FUNCTION App_ProcessEvent,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 19, STACK
        FUNCTION App_ProcessZDOMsgs,0a1203H
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 16, STACK
        PUBLIC App_SimpleDesc
        PUBLIC App_TaskId
        PUBLIC App_TransID
        PUBLIC App_epDesc
        PUBLIC BrodcastData
        FUNCTION BrodcastData,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 37, STACK
        PUBLIC SendHandle
        FUNCTION SendHandle,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        PUBLIC SendHearBeat
        FUNCTION SendHearBeat,0a1203H
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 13, STACK
        PUBWEAK _A_P1
        PUBWEAK __Constant_3e8
        PUBWEAK __Constant_64
        PUBWEAK __Constant_bb8
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource SP:8, PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B SameValue
          CFI A SameValue
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT SameValue
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon1
        
AF_DataRequest      SYMBOL "AF_DataRequest"
`??AF_DataRequest::?relay` SYMBOL "?relay", AF_DataRequest
Device_Info         SYMBOL "Device_Info"
`??Device_Info::?relay` SYMBOL "?relay", Device_Info
HalLedSet           SYMBOL "HalLedSet"
`??HalLedSet::?relay` SYMBOL "?relay", HalLedSet
HeartBeat_Check     SYMBOL "HeartBeat_Check"
`??HeartBeat_Check::?relay` SYMBOL "?relay", HeartBeat_Check
HeartBeat_Set       SYMBOL "HeartBeat_Set"
`??HeartBeat_Set::?relay` SYMBOL "?relay", HeartBeat_Set
Log_Init            SYMBOL "Log_Init"
`??Log_Init::?relay` SYMBOL "?relay", Log_Init
NLME_GetShortAddr   SYMBOL "NLME_GetShortAddr"
`??NLME_GetShortAddr::?relay` SYMBOL "?relay", NLME_GetShortAddr
ProtocolFrame_Init  SYMBOL "ProtocolFrame_Init"
`??ProtocolFrame_Init::?relay` SYMBOL "?relay", ProtocolFrame_Init
Protocol_Printf     SYMBOL "Protocol_Printf"
`??Protocol_Printf::?relay` SYMBOL "?relay", Protocol_Printf
Protocol_Send       SYMBOL "Protocol_Send"
`??Protocol_Send::?relay` SYMBOL "?relay", Protocol_Send
RegisterForKeys     SYMBOL "RegisterForKeys"
`??RegisterForKeys::?relay` SYMBOL "?relay", RegisterForKeys
State_Check         SYMBOL "State_Check"
`??State_Check::?relay` SYMBOL "?relay", State_Check
WaterMachine_Init   SYMBOL "WaterMachine_Init"
`??WaterMachine_Init::?relay` SYMBOL "?relay", WaterMachine_Init
ZDO_ParseEPListRsp  SYMBOL "ZDO_ParseEPListRsp"
`??ZDO_ParseEPListRsp::?relay` SYMBOL "?relay", ZDO_ParseEPListRsp
ZdoStateChange_printf SYMBOL "ZdoStateChange_printf"
`??ZdoStateChange_printf::?relay` SYMBOL "?relay", ZdoStateChange_printf
afRegister          SYMBOL "afRegister"
`??afRegister::?relay` SYMBOL "?relay", afRegister
osal_mem_free       SYMBOL "osal_mem_free"
`??osal_mem_free::?relay` SYMBOL "?relay", osal_mem_free
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
`??osal_msg_deallocate::?relay` SYMBOL "?relay", osal_msg_deallocate
osal_msg_receive    SYMBOL "osal_msg_receive"
`??osal_msg_receive::?relay` SYMBOL "?relay", osal_msg_receive
osal_start_timerEx  SYMBOL "osal_start_timerEx"
`??osal_start_timerEx::?relay` SYMBOL "?relay", osal_start_timerEx
printf              SYMBOL "printf"
`??printf::?relay`  SYMBOL "?relay", printf
App_GetTaskID       SYMBOL "App_GetTaskID"
`??App_GetTaskID::?relay` SYMBOL "?relay", App_GetTaskID
App_GetepDesc       SYMBOL "App_GetepDesc"
`??App_GetepDesc::?relay` SYMBOL "?relay", App_GetepDesc
App_Init            SYMBOL "App_Init"
`??App_Init::?relay` SYMBOL "?relay", App_Init
App_ProcessEvent    SYMBOL "App_ProcessEvent"
`??App_ProcessEvent::?relay` SYMBOL "?relay", App_ProcessEvent
BrodcastData        SYMBOL "BrodcastData"
`??BrodcastData::?relay` SYMBOL "?relay", BrodcastData
SendHandle          SYMBOL "SendHandle"
`??SendHandle::?relay` SYMBOL "?relay", SendHandle
SendHearBeat        SYMBOL "SendHearBeat"
`??SendHearBeat::?relay` SYMBOL "?relay", SendHearBeat

        EXTERN `??AF_DataRequest::?relay`
        FUNCTION `??AF_DataRequest::?relay`,00H
        EXTERN `??Device_Info::?relay`
        FUNCTION `??Device_Info::?relay`,00H
        EXTERN `??HalLedSet::?relay`
        FUNCTION `??HalLedSet::?relay`,00H
        EXTERN `??HeartBeat_Check::?relay`
        FUNCTION `??HeartBeat_Check::?relay`,00H
        EXTERN `??HeartBeat_Set::?relay`
        FUNCTION `??HeartBeat_Set::?relay`,00H
        EXTERN `??Log_Init::?relay`
        FUNCTION `??Log_Init::?relay`,00H
        EXTERN `??NLME_GetShortAddr::?relay`
        FUNCTION `??NLME_GetShortAddr::?relay`,00H
        EXTERN `??ProtocolFrame_Init::?relay`
        FUNCTION `??ProtocolFrame_Init::?relay`,00H
        EXTERN `??Protocol_Printf::?relay`
        FUNCTION `??Protocol_Printf::?relay`,00H
        EXTERN `??Protocol_Send::?relay`
        FUNCTION `??Protocol_Send::?relay`,00H
        EXTERN `??RegisterForKeys::?relay`
        FUNCTION `??RegisterForKeys::?relay`,00H
        EXTERN `??State_Check::?relay`
        FUNCTION `??State_Check::?relay`,00H
        EXTERN `??WaterMachine_Init::?relay`
        FUNCTION `??WaterMachine_Init::?relay`,00H
        EXTERN `??ZDO_ParseEPListRsp::?relay`
        FUNCTION `??ZDO_ParseEPListRsp::?relay`,00H
        EXTERN `??ZdoStateChange_printf::?relay`
        FUNCTION `??ZdoStateChange_printf::?relay`,00H
        EXTERN `??afRegister::?relay`
        FUNCTION `??afRegister::?relay`,00H
        EXTERN `??osal_mem_free::?relay`
        FUNCTION `??osal_mem_free::?relay`,00H
        EXTERN `??osal_msg_deallocate::?relay`
        FUNCTION `??osal_msg_deallocate::?relay`,00H
        EXTERN `??osal_msg_receive::?relay`
        FUNCTION `??osal_msg_receive::?relay`,00H
        EXTERN `??osal_start_timerEx::?relay`
        FUNCTION `??osal_start_timerEx::?relay`,00H
        EXTERN `??printf::?relay`
        FUNCTION `??printf::?relay`,00H
        EXTERN AF_DataRequest
        FUNCTION AF_DataRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 37, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN Device_Info
        FUNCTION Device_Info,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLedSet
        FUNCTION HalLedSet,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HeartBeat_Check
        FUNCTION HeartBeat_Check,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HeartBeat_Set
        FUNCTION HeartBeat_Set,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN Log_Init
        FUNCTION Log_Init,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetShortAddr
        FUNCTION NLME_GetShortAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ProtocolFrame_Init
        FUNCTION ProtocolFrame_Init,0200H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN Protocol_Printf
        FUNCTION Protocol_Printf,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN Protocol_Send
        FUNCTION Protocol_Send,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN RegisterForKeys
        FUNCTION RegisterForKeys,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN State_Check
        FUNCTION State_Check,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN UART1_Resolver
        EXTERN WaterMachine_Init
        FUNCTION WaterMachine_Init,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_ParseEPListRsp
        FUNCTION ZDO_ParseEPListRsp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZdoStateChange_printf
        FUNCTION ZdoStateChange_printf,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN afRegister
        FUNCTION afRegister,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_free
        FUNCTION osal_mem_free,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_receive
        FUNCTION osal_msg_receive,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN printf
        FUNCTION printf,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC

// E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh 1.0.0\Projects\zstack\Samples\Demo_App_V2.04优化动态内存\Module\WaterMachine\WaterMachineApp.c
//    1 #include "OSAL.h"
//    2 #include "AF.h"
//    3 #include "ZDApp.h"
//    4 #include "ZDObject.h"
//    5 #include "ZDProfile.h"
//    6 
//    7 #include "DemoApp.h"
//    8 #include "DebugTrace.h"
//    9 
//   10 #if !defined( WIN32 ) || defined( ZBIT )
//   11   #include "OnBoard.h"

        ASEGN SFR_AN:DATA:NOROOT,090H
// union <unnamed> volatile __sfr _A_P1
_A_P1:
        DATA8
        DS 1
//   12 #endif
//   13  
//   14 /* HAL */
//   15 #include "hal_led.h"
//   16 #include "hal_key.h"
//   17 #include "hal_uart.h" 
//   18 #include "Tool.h"  
//   19 #include "Protocol.h"
//   20 #include "ProtocolFrame.h"
//   21 #include "LOG.h"
//   22 #include "ModuleManager.h"
//   23 #include "WaterMachineDriver.h"
//   24 
//   25 #define APP_SEND_MSG_TIMEOUT   1000     
//   26 #define HEARTBEAT_CHECK_TIMEOUT 3000
//   27 #define HEARTBEAT_SEND_TIMEOUT  1000
//   28 #define WATER_MACHINE_STATE_CHECK_TIMEOUT 100
//   29 #define APP_SEND_MSG_EVT                     (BV(0))
//   30 #define WATER_MACHINE_STATE_CHECK_EVT             (BV(1))
//   31 #define HEARTBEAT_CHECK_EVT                       (BV(2))
//   32 #define HEARTBEAT_SEND_EVT                       (BV(3))
//   33 
//   34 /*********************************************************************
//   35  * GLOBAL VARIABLES
//   36  */ 

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA16
//   37 const cId_t App_ClusterList[APP_MAX_CLUSTERS] = { APP_CLUSTERID };//簇列表
App_ClusterList:
        DW 1
//   38 

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//   39 const SimpleDescriptionFormat_t App_SimpleDesc =       //简单描述符
App_SimpleDesc:
        DB 10
        DATA16
        DW 3844
        DW 1
        DATA8
        DB 0
        DB 1
        DATA16
        DW App_ClusterList
        DATA8
        DB 1
        DATA16
        DW App_ClusterList
//   40 {
//   41   APP_ENDPOINT,              //  int Endpoint;
//   42   APP_PROFID,                //  uint16 AppProfId[2];
//   43   APP_DEVICEID,              //  uint16 AppDeviceId[2];
//   44   APP_DEVICE_VERSION,        //  int   AppDevVer:4;
//   45   APP_FLAGS,                 //  int   AppFlags:4;
//   46   APP_MAX_CLUSTERS,          //  byte  AppNumInClusters;
//   47   (cId_t *)App_ClusterList,  //  byte *pAppInClusterList;
//   48   APP_MAX_CLUSTERS,          //  byte  AppNumInClusters;
//   49   (cId_t *)App_ClusterList   //  byte *pAppInClusterList;
//   50 };
//   51 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   52 endPointDesc_t App_epDesc; //端点描述符
App_epDesc:
        DS 6
        REQUIRE __INIT_XDATA_Z
//   53 /*********************************************************************
//   54  * 本地变量
//   55  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   56 byte App_TaskId; 
App_TaskId:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   57 devStates_t App_NwkState; 
App_NwkState:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   58 byte App_TransID; 
App_TransID:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   59 afAddrType_t App_DstAddr; 
App_DstAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z
//   60  
//   61 /*********************************************************************
//   62  * LOCAL FUNCTIONS
//   63  */
//   64 static void App_ProcessZDOMsgs( zdoIncomingMsg_t *inMsg );
//   65 static void App_HandleKeys( byte shift, byte keys );
//   66 static void App_ReceiveHandle( afIncomingMSGPacket_t *pckt );
//   67 static void App_SendHandle( void );
//   68 
//   69  

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   70 void SendHandle(uint8_t* data, uint8_t len){
SendHandle:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function SendHandle
        CODE
        FUNCALL SendHandle, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
//   71   
//   72   App_DstAddr.addr.shortAddr = 0x00;
        MOV     DPTR,#App_DstAddr
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//   73   //Protocol_Printf(data, len);
//   74   if ( AF_DataRequest( &App_DstAddr, &App_epDesc,
//   75                        APP_CLUSTERID,
//   76                        len,
//   77                        (byte *)data,
//   78                        &App_TransID,
//   79                        AF_DISCV_ROUTE, AF_DEFAULT_RADIUS ) == afStatus_SUCCESS );
        ; Setup parameters for call to function AF_DataRequest
        MOV     ?V0,#0x1e
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 11)
        MOV     ?V0,#App_TransID & 0xff
        MOV     ?V1,#(App_TransID >> 8) & 0xff
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 13)
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 15)
        MOV     ?V0,R6
        MOV     ?V1,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 17)
        MOV     ?V0,#0x1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 19)
        MOV     R1,#0x0
        MOV     R4,#App_epDesc & 0xff
        MOV     R5,#(App_epDesc >> 8) & 0xff
        MOV     R2,#App_DstAddr & 0xff
        MOV     R3,#(App_DstAddr >> 8) & 0xff
        LCALL   `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
        MOV     A,#0x9
          CFI EndBlock cfiBlock0
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0
//   80 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 19)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Valid
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock1
//   81 /****************************************************
//   82 *      函数名: App_Init
//   83 *        功能: 应用初始化
//   84 *        参数: 应用层任务ID 
//   85 ****************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   86 void App_Init( uint8 task_id ){
App_Init:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI Function App_Init
        CODE
        FUNCALL App_Init, afRegister
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL App_Init, RegisterForKeys
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL App_Init, Device_Info
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL App_Init, Log_Init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL App_Init, ProtocolFrame_Init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL App_Init, WaterMachine_Init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
//   87   
//   88   App_TaskId = task_id;
        MOV     DPTR,#App_TaskId
        MOVX    @DPTR,A
//   89   App_NwkState = DEV_INIT;
        MOV     DPTR,#App_NwkState
        MOV     A,#0x1
        MOVX    @DPTR,A
//   90   App_TransID = 0; 
        MOV     DPTR,#App_TransID
        CLR     A
        MOVX    @DPTR,A
//   91 
//   92   App_DstAddr.addrMode = (afAddrMode_t)Addr16Bit;
        MOV     DPTR,#App_DstAddr + 8
        MOV     A,#0x2
        MOVX    @DPTR,A
//   93   App_DstAddr.endPoint = APP_ENDPOINT;
        INC     DPTR
        MOV     A,#0xa
        MOVX    @DPTR,A
//   94   App_DstAddr.addr.shortAddr = 0;
        MOV     DPTR,#App_DstAddr
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//   95  
//   96   App_epDesc.endPoint = APP_ENDPOINT;
        MOV     DPTR,#App_epDesc
        MOV     A,#0xa
        MOVX    @DPTR,A
//   97   App_epDesc.task_id = &App_TaskId;
        INC     DPTR
        MOV     A,#App_TaskId & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(App_TaskId >> 8) & 0xff
        MOVX    @DPTR,A
//   98   App_epDesc.simpleDesc = (SimpleDescriptionFormat_t *)&App_SimpleDesc;
        INC     DPTR
        MOV     A,#App_SimpleDesc & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(App_SimpleDesc >> 8) & 0xff
        MOVX    @DPTR,A
//   99   App_epDesc.latencyReq = noLatencyReqs;
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  100  
//  101   afRegister( &App_epDesc );
        ; Setup parameters for call to function afRegister
        MOV     R2,#App_epDesc & 0xff
        MOV     R3,#(App_epDesc >> 8) & 0xff
        LCALL   `??afRegister::?relay`; Banked call to: afRegister
//  102  
//  103   RegisterForKeys( App_TaskId );
        ; Setup parameters for call to function RegisterForKeys
        MOV     DPTR,#App_TaskId
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??RegisterForKeys::?relay`; Banked call to: RegisterForKeys
//  104  
//  105   Device_Info();
        ; Setup parameters for call to function Device_Info
        LCALL   `??Device_Info::?relay`; Banked call to: Device_Info
//  106  
//  107 
//  108 //  ZDO_RegisterForZDOMsg( App_TaskId, End_Device_Bind_rsp );
//  109 //  ZDO_RegisterForZDOMsg( App_TaskId, Match_Desc_req );
//  110 //  ZDO_RegisterForZDOMsg( App_TaskId, Match_Desc_rsp );
//  111  
//  112   Log_Init();
        ; Setup parameters for call to function Log_Init
        LCALL   `??Log_Init::?relay` ; Banked call to: Log_Init
//  113   ProtocolFrame_Init();
        ; Setup parameters for call to function ProtocolFrame_Init
        LCALL   `??ProtocolFrame_Init::?relay`; Banked call to: ProtocolFrame_Init
//  114   WaterMachine_Init();
        ; Setup parameters for call to function WaterMachine_Init
        LCALL   `??WaterMachine_Init::?relay`; Banked call to: WaterMachine_Init
//  115   
//  116   
//  117 }
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock2
//  118 
//  119 
//  120 /****************************************************
//  121 *      函数名: App_GetTaskID
//  122 *      功能: 获得APP层的ID
//  123 ****************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  124 uint8* App_GetTaskID(){
App_GetTaskID:
          CFI Block cfiBlock3 Using cfiCommon0
          CFI Function App_GetTaskID
        CODE
        ; Saved register size: 0
        ; Auto size: 0
//  125     return (uint8*)&App_TaskId;
        MOV     R2,#App_TaskId & 0xff
        MOV     R3,#(App_TaskId >> 8) & 0xff
        LJMP    ?BRET
//  126 }
          CFI EndBlock cfiBlock3
//  127 
//  128 /****************************************************
//  129 *      函数名: App_GetepDesc
//  130 *      功能: 获得APP层的简单描述符
//  131 ****************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  132 endPointDesc_t App_GetepDesc(){
App_GetepDesc:
          CFI Block cfiBlock4 Using cfiCommon0
          CFI Function App_GetepDesc
        CODE
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
        MOV     DPTR,#App_epDesc
        MOV     A,R2
        MOV     R4,A
        MOV     A,R3
        MOV     R5,A
        MOV     A,#0x6
        LCALL   ?MOVE_LONG8_XDATA_XDATA
        POP     DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-4
        POP     DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-3
        LJMP    ?BRET
          CFI EndBlock cfiBlock4
//  133     return App_epDesc;
//  134 }
//  135 
//  136 
//  137 /****************************************************
//  138 *      函数名: App_HandleKeys
//  139 *        功能: 按键事件处理函数
//  140 ****************************************************/
//  141 void App_HandleKeys( uint8 shift, uint8 keys )
//  142 { 
//  143   if ( shift ){
//  144     if ( keys & HAL_KEY_SW_1 ) {}
//  145     if ( keys & HAL_KEY_SW_2 ) {}
//  146     if ( keys & HAL_KEY_SW_3 ) {}
//  147     if ( keys & HAL_KEY_SW_4 ) {}
//  148   }else{
//  149     if ( keys & HAL_KEY_SW_1 ){ 
//  150       printf("HAL_KEY_SW_1\r\n"); 
//  151     }
//  152 
//  153     if ( keys & HAL_KEY_SW_2 ){
//  154       printf("HAL_KEY_SW_2\r\n"); 
//  155     } 
//  156     if ( keys & HAL_KEY_SW_3 ){ } 
//  157     if ( keys & HAL_KEY_SW_4 ){ }
//  158   }
//  159 }
//  160 
//  161 /****************************************************
//  162 *      函数名: App_ReceiveHandle
//  163 *        功能: 数据接收处理函数
//  164 ****************************************************/ 
//  165 static void App_ReceiveHandle( afIncomingMSGPacket_t *pkt )
//  166 {
//  167   switch ( pkt->clusterId ){
//  168     case APP_CLUSTERID:  
//  169       printf("收到数据:");
//  170       Protocol_Printf(pkt->cmd.Data, pkt->cmd.DataLength);
//  171       if(pkt->cmd.DataLength > 1)
//  172         UART1_Resolver->Protocol_Put(UART1_Resolver,pkt->cmd.Data, pkt->cmd.DataLength);
//  173       HeartBeat_Set(COORDINATOR_MODULE);
//  174       break;
//  175   }
//  176 }
//  177 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  178 void SendHearBeat(void){
SendHearBeat:
          CFI Block cfiBlock5 Using cfiCommon0
          CFI Function SendHearBeat
        CODE
        FUNCALL SendHearBeat, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SendHearBeat, Protocol_Send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 3
        MOV     A,#-0x3
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 13)
//  179   static uint8_t cnt = 0;  
//  180   HEARTBEAT_PROTOCOL_T Heartbeat_P = {0};
        MOV     DPTR,#`?<Constant {0, 0, 0}>`
        MOV     R4,?XSP + 0
        MOV     R5,?XSP + 1
        MOV     A,#0x3
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  181   uint16 ShortAddr = NLME_GetShortAddr(); 
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
//  182   Heartbeat_P.para1 = cnt++;
        MOV     DPTR,#??cnt
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_4:
        MOV     DPTR,#??cnt
        MOVX    A,@DPTR
        INC     A
        MOVX    @DPTR,A
//  183   Heartbeat_P.para2 = ShortAddr >> 8;
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R3
        MOVX    @DPTR,A
//  184   Heartbeat_P.para3 = ShortAddr & 0xff;
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine3 & 0xFFFF
//  185   Protocol_Send(HEARTBEAT_PROTOCOL, &Heartbeat_P, sizeof(HEARTBEAT_PROTOCOL_T));
??CrossCallReturnLabel_2:
        LCALL   `??Protocol_Send::?relay`; Banked call to: Protocol_Send
//  186 }
        MOV     A,#0x3
        LJMP    ?Subroutine0 & 0xFFFF
          CFI EndBlock cfiBlock5

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
??cnt:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  187 
//  188 /****************************************************
//  189 *      函数名: App_SendHandle
//  190 *        功能: 数据发送函数
//  191 ****************************************************/ 
//  192 static void App_SendHandle( void )
//  193 {
//  194   if(App_NwkState != DEV_END_DEVICE)
//  195     return; 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  196   static uint8_t cnt = 0;  
??cnt_1:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  197   uint16 Short_Addr = NLME_GetShortAddr();
//  198   HEARTBEAT_PROTOCOL_T Heartbeat_P = {0};
//  199   Heartbeat_P.para1 = cnt++;
//  200   Heartbeat_P.para2 = Short_Addr >> 8;
//  201   Heartbeat_P.para3 = Short_Addr & 0xff;
//  202   Protocol_Send(HEARTBEAT_PROTOCOL, &Heartbeat_P, sizeof(HEARTBEAT_PROTOCOL_T));
//  203   printf("本机地址：%X,%X\r\n",Short_Addr >> 8, Short_Addr & 0x00ff);
//  204 //  if ( AF_DataRequest( &App_DstAddr, &App_epDesc, APP_CLUSTERID,
//  205 //                       10, (byte *)&shortaddr,
//  206 //                       &App_TransID, AF_ACK_REQUEST, AF_DEFAULT_RADIUS ) == afStatus_SUCCESS );
//  207   
//  208   
//  209 //  Protocol_Send(HEARTBEAT_PROTOCOL, &protocol, sizeof(protocol.Heartbeat_P)); 
//  210 //  Protocol_Send(STATE_PROTOCOL, &protocol, sizeof(protocol.State_P));
//  211 //  Protocol_Send(ACK_PROTOCOL, &protocol, sizeof(protocol.Ack_P));  
//  212     
//  213 //  LED_Flag = ~LED_Flag;
//  214 //  P1_0 = LED_Flag;
//  215 //  P1_1 = LED_Flag;
//  216 //  P1_4 = LED_Flag;
//  217 //  //P0_4 = LED_Flag;
//  218 //  P0_6 = LED_Flag;
//  219   printf("温控输入:%d\r\n", P1_3); 
//  220 }
//  221 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  222 void BrodcastData(uint8* data,uint8 len){
BrodcastData:
          CFI Block cfiBlock6 Using cfiCommon0
          CFI Function BrodcastData
        CODE
        FUNCALL BrodcastData, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 37, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 37, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 18
        MOV     A,#-0x12
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 28)
        MOV     A,R1
        MOV     R6,A
//  223   static uint8_t cnt = 0; 
//  224   afAddrType_t Broadcast_DstAddr;  //地址描述符
//  225   endPointDesc_t Broadcast_epDesc; //端点描述符 
//  226   
//  227   Broadcast_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
        MOV     A,#0xe
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0xf
        MOVX    @DPTR,A
//  228   Broadcast_DstAddr.endPoint = APP_ENDPOINT;
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0xa
        MOVX    @DPTR,A
//  229   Broadcast_DstAddr.addr.shortAddr = 0xFFFF;
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  230  
//  231   Broadcast_epDesc.endPoint = APP_ENDPOINT;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0xa
        MOVX    @DPTR,A
//  232   Broadcast_epDesc.task_id = &App_TaskId;
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#App_TaskId & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(App_TaskId >> 8) & 0xff
        MOVX    @DPTR,A
//  233   Broadcast_epDesc.simpleDesc = (SimpleDescriptionFormat_t *)&App_SimpleDesc;
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#App_SimpleDesc & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(App_SimpleDesc >> 8) & 0xff
        MOVX    @DPTR,A
//  234   Broadcast_epDesc.latencyReq = noLatencyReqs;
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
//  235   cnt++;
        MOV     DPTR,#??cnt_2
        MOVX    A,@DPTR
        INC     A
        MOVX    @DPTR,A
//  236   if ( AF_DataRequest( &Broadcast_DstAddr, &Broadcast_epDesc, APP_CLUSTERID, len, (byte *)data, &App_TransID, AF_DISCV_ROUTE, AF_DEFAULT_RADIUS ) == afStatus_SUCCESS );
        ; Setup parameters for call to function AF_DataRequest
        MOV     ?V0,#0x1e
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 29)
        MOV     ?V0,#App_TransID & 0xff
        MOV     ?V1,#(App_TransID >> 8) & 0xff
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 31)
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 33)
        MOV     ?V0,R6
        MOV     ?V1,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 35)
        MOV     ?V0,#0x1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 37)
        MOV     R1,#0x0
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP102_8
        MOV     A,#0xf
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 28)
//  237 
//  238 }
        MOV     A,#0x12
        LJMP    ?Subroutine0 & 0xFFFF
          CFI EndBlock cfiBlock6

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
??cnt_2:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  239  
//  240 
//  241 /****************************************************
//  242 *      函数名: App_ProcessEvent
//  243 *        功能: 应用初事件处理函数
//  244 *        参数: 应用层任务ID， 事件源
//  245 ****************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  246 uint16 App_ProcessEvent( uint8 task_id, uint16 events ){
App_ProcessEvent:
          CFI Block cfiBlock7 Using cfiCommon0
          CFI Function App_ProcessEvent
        CODE
        FUNCALL App_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL App_ProcessEvent, ZdoStateChange_printf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL App_ProcessEvent, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL App_ProcessEvent, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL App_ProcessEvent, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL App_ProcessEvent, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL App_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL App_ProcessEvent, App_ProcessZDOMsgs
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL App_ProcessEvent, printf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL App_ProcessEvent, printf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL App_ProcessEvent, printf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL App_ProcessEvent, printf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL App_ProcessEvent, Protocol_Printf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL App_ProcessEvent, HeartBeat_Set
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL App_ProcessEvent, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL App_ProcessEvent, Protocol_Send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL App_ProcessEvent, printf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL App_ProcessEvent, printf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL App_ProcessEvent, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL App_ProcessEvent, State_Check
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL App_ProcessEvent, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL App_ProcessEvent, HeartBeat_Check
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL App_ProcessEvent, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL App_ProcessEvent, SendHearBeat
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL App_ProcessEvent, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 3
        MOV     A,#-0x3
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 15)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  247   afIncomingMSGPacket_t *MSGpkt;
//  248   afDataConfirm_t *afDataConfirm;
//  249  
//  250   if ( events & SYS_EVENT_MSG ){
        ANL     A,#0x80
        JNZ     $+5
        LJMP    ??App_ProcessEvent_0 & 0xFFFF
//  251     MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( App_TaskId );
        ; Setup parameters for call to function osal_msg_receive
        SJMP    ??App_ProcessEvent_1
//  252     while ( MSGpkt ){
//  253       switch ( MSGpkt->hdr.event )
//  254       {
//  255         case ZDO_CB_MSG:
//  256           App_ProcessZDOMsgs( (zdoIncomingMsg_t *)MSGpkt );
//  257           break;
//  258 
//  259         case KEY_CHANGE:
//  260           App_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
//  261           break;
//  262 
//  263         case AF_DATA_CONFIRM_CMD:
//  264           afDataConfirm = (afDataConfirm_t *)MSGpkt;
//  265 //          byte sentEP = afDataConfirm->endpoint; (void)sentEP;
//  266 //          byte sentTransID = afDataConfirm->transID;(void)sentTransID;  
//  267           if ( afDataConfirm->hdr.status != ZSuccess ){
//  268             printf("发送失败\r\n");
//  269           }
//  270           break; 
//  271         case AF_INCOMING_MSG_CMD:
//  272           App_ReceiveHandle( MSGpkt );
//  273           break;
//  274 
//  275         case ZDO_STATE_CHANGE:
//  276           App_NwkState = (devStates_t)(MSGpkt->hdr.status);
??App_ProcessEvent_2:
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPTR,#App_NwkState
        MOVX    @DPTR,A
//  277           ZdoStateChange_printf(App_NwkState); 
        ; Setup parameters for call to function ZdoStateChange_printf
        MOV     R1,A
        LCALL   `??ZdoStateChange_printf::?relay`; Banked call to: ZdoStateChange_printf
//  278           if ( (App_NwkState == DEV_ZB_COORD) || (App_NwkState == DEV_ROUTER) || (App_NwkState == DEV_END_DEVICE) ){ 
        MOV     DPTR,#App_NwkState
        MOVX    A,@DPTR
        XRL     A,#0x9
        JZ      ??App_ProcessEvent_3
        MOVX    A,@DPTR
        XRL     A,#0x7
        JZ      ??App_ProcessEvent_3
        MOVX    A,@DPTR
        XRL     A,#0x6
        JNZ     ??App_ProcessEvent_4
//  279             //osal_start_timerEx( App_TaskId, APP_SEND_MSG_EVT, APP_SEND_MSG_TIMEOUT ); 
//  280             
//  281             osal_start_timerEx( App_TaskId, HEARTBEAT_SEND_EVT , HEARTBEAT_SEND_TIMEOUT ); //发送心跳
??App_ProcessEvent_3:
        ; Setup parameters for call to function osal_start_timerEx
        MOV     DPTR,#__Constant_3e8
        LCALL   ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 19)
        MOV     R2,#0x8
        MOV     R3,#0x0
        MOV     DPTR,#App_TaskId
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 15)
//  282             osal_start_timerEx( App_TaskId, HEARTBEAT_CHECK_EVT, HEARTBEAT_CHECK_TIMEOUT );//启动心跳检查 
        ; Setup parameters for call to function osal_start_timerEx
        MOV     DPTR,#__Constant_bb8
        LCALL   ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 19)
        MOV     R2,#0x4
        MOV     R3,#0x0
        MOV     DPTR,#App_TaskId
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 15)
//  283             osal_start_timerEx( App_TaskId, WATER_MACHINE_STATE_CHECK_EVT, WATER_MACHINE_STATE_CHECK_TIMEOUT );
        ; Setup parameters for call to function osal_start_timerEx
        MOV     DPTR,#__Constant_64
        LCALL   ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 19)
        MOV     R2,#0x2
        MOV     R3,#0x0
        MOV     DPTR,#App_TaskId
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 15)
//  284           }
//  285           break; 
//  286         default:
//  287           break;
//  288       } 
//  289       osal_msg_deallocate( (uint8 *)MSGpkt ); 
??App_ProcessEvent_4:
        ; Setup parameters for call to function osal_msg_deallocate
        MOV     R2,?V0
        MOV     R3,?V1
        LCALL   `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
//  290       MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( App_TaskId );
        ; Setup parameters for call to function osal_msg_receive
??App_ProcessEvent_1:
        MOV     DPTR,#App_TaskId
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     A,?V0
        ORL     A,?V1
        JNZ     $+5
        LJMP    ??App_ProcessEvent_5 & 0xFFFF
        MOV     DPL,?V0
        MOV     DPH,?V1
        MOVX    A,@DPTR
        ADD     A,#-0x1a
        JZ      ??App_ProcessEvent_6
        ADD     A,#0x5a
        JZ      ??App_ProcessEvent_7
        ADD     A,#-0x11
        JNZ     $+5
        LJMP    ??App_ProcessEvent_2 & 0xFFFF
        ADD     A,#-0x2
        JZ      ??App_ProcessEvent_8
        ADD     A,#-0x2a
        JZ      ??App_ProcessEvent_9
        SJMP    ??App_ProcessEvent_4
??App_ProcessEvent_8:
        ; Setup parameters for call to function App_ProcessZDOMsgs
        MOV     R2,?V0
        MOV     R3,?V1
        LCALL   `??App_ProcessZDOMsgs::?relay`; Banked call to: App_ProcessZDOMsgs
        SJMP    ??App_ProcessEvent_4
??App_ProcessEvent_7:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V2,A
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        JNZ     ??App_ProcessEvent_4
        MOV     A,?V2
        MOV     C,0xE0 /* A   */.0
        JNC     ??App_ProcessEvent_10
        ; Setup parameters for call to function printf
        MOV     R2,#`?<Constant "HAL_KEY_SW_1\\r\\n">` & 0xff
        MOV     R3,#(`?<Constant "HAL_KEY_SW_1\\r\\n">` >> 8) & 0xff
        LCALL   `??printf::?relay`   ; Banked call to: printf
??App_ProcessEvent_10:
        MOV     A,?V2
        MOV     C,0xE0 /* A   */.1
        JNC     ??App_ProcessEvent_4
        ; Setup parameters for call to function printf
        MOV     R2,#`?<Constant "HAL_KEY_SW_2\\r\\n">` & 0xff
        MOV     R3,#(`?<Constant "HAL_KEY_SW_2\\r\\n">` >> 8) & 0xff
??App_ProcessEvent_11:
        LCALL   `??printf::?relay`   ; Banked call to: printf
        SJMP    ??App_ProcessEvent_4
??App_ProcessEvent_9:
        INC     DPTR
        MOVX    A,@DPTR
        JZ      ??App_ProcessEvent_4
        ; Setup parameters for call to function printf
        MOV     R2,#`?<Constant "\\267\\242\\313\\315\\312\\247\\260\\334\\r` & 0xff
        MOV     R3,#(`?<Constant "\\267\\242\\313\\315\\312\\247\\260\\334\\r` >> 8) & 0xff
        SJMP    ??App_ProcessEvent_11
??App_ProcessEvent_6:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??App_ProcessEvent_12
        INC     DPTR
        MOVX    A,@DPTR
??App_ProcessEvent_12:
        JZ      $+5
        LJMP    ??App_ProcessEvent_4 & 0xFFFF
        ; Setup parameters for call to function printf
        MOV     R2,#`?<Constant "\\312\\325\\265\\275\\312\\375\\276\\335:"` & 0xff
        MOV     R3,#(`?<Constant "\\312\\325\\265\\275\\312\\375\\276\\335:"` >> 8) & 0xff
        LCALL   `??printf::?relay`   ; Banked call to: printf
        MOV     A,?V0
        ADD     A,#0x20
        MOV     ?V2,A
        CLR     A
        ADDC    A,?V1
        MOV     ?V3,A
        ; Setup parameters for call to function Protocol_Printf
        MOV     DPL,?V2
        LCALL   ?Subroutine2 & 0xFFFF
//  291     } 
??CrossCallReturnLabel_0:
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   `??Protocol_Printf::?relay`; Banked call to: Protocol_Printf
        MOV     DPL,?V2
        MOV     DPH,?V3
        CLR     C
        MOVX    A,@DPTR
        SUBB    A,#0x2
        INC     DPTR
        MOVX    A,@DPTR
        SUBB    A,#0x0
        JC      ??App_ProcessEvent_13
        ; Setup parameters for indirect call
        MOV     A,?V0
        ADD     A,#0x20
        MOV     DPL,A
        CLR     A
        ADDC    A,?V1
        LCALL   ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_1:
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     DPTR,#UART1_Resolver
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     DPTR,#UART1_Resolver
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R0
        ADD     A,#-0x80
        MOV     DPL,A
        CLR     A
        ADDC    A,R0
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_6:
        LCALL   ?CALL_IND
??App_ProcessEvent_13:
        ; Setup parameters for call to function HeartBeat_Set
        MOV     R1,#0x0
        LCALL   `??HeartBeat_Set::?relay`; Banked call to: HeartBeat_Set
        LJMP    ??App_ProcessEvent_4 & 0xFFFF
//  292     return (events ^ SYS_EVENT_MSG);
??App_ProcessEvent_5:
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        XRL     A,#0x80
        LJMP    ??App_ProcessEvent_14 & 0xFFFF
//  293   }
//  294   
//  295   if ( events & APP_SEND_MSG_EVT ){ 
??App_ProcessEvent_0:
        MOV     A,R6
        MOV     C,0xE0 /* A   */.0
        JC      $+5
        LJMP    ??App_ProcessEvent_15 & 0xFFFF
//  296     App_SendHandle(); 
        MOV     DPTR,#App_NwkState
        MOVX    A,@DPTR
        XRL     A,#0x6
        JNZ     ??App_ProcessEvent_16
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
        MOV     ?V3,R3
        MOV     ?V0,R2
        MOV     DPTR,#`?<Constant {0, 0, 0}>_1`
        MOV     R4,?XSP + 0
        MOV     R5,?XSP + 1
        MOV     A,#0x3
        LCALL   ?MOVE_LONG8_XDATA_XDATA
        MOV     DPTR,#??cnt_1
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_5:
        MOV     DPTR,#??cnt_1
        MOVX    A,@DPTR
        INC     A
        MOVX    @DPTR,A
        CLR     A
        XCH     A,?V3
        MOV     ?V2,A
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R3
        MOVX    @DPTR,A
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_3:
        LCALL   `??Protocol_Send::?relay`; Banked call to: Protocol_Send
        ; Setup parameters for call to function printf
        MOV     ?V1,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 17)
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 19)
        MOV     R2,#`?<Constant "\\261\\276\\273\\372\\265\\330\\326\\267\\2` & 0xff
        MOV     R3,#(`?<Constant "\\261\\276\\273\\372\\265\\330\\326\\267\\2` >> 8) & 0xff
        LCALL   `??printf::?relay`   ; Banked call to: printf
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 15)
        ; Setup parameters for call to function printf
        MOV     C,0x90.3
        CLR     A
        RLC     A
        MOV     ?V0,A
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 17)
        MOV     R2,#`?<Constant "\\316\\302\\277\\330\\312\\344\\310\\353:%` & 0xff
        MOV     R3,#(`?<Constant "\\316\\302\\277\\330\\312\\344\\310\\353:%` >> 8) & 0xff
        LCALL   `??printf::?relay`   ; Banked call to: printf
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 15)
//  297     osal_start_timerEx( App_TaskId, APP_SEND_MSG_EVT, APP_SEND_MSG_TIMEOUT ); 
??App_ProcessEvent_16:
        ; Setup parameters for call to function osal_start_timerEx
        MOV     DPTR,#__Constant_3e8
        LCALL   ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 19)
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     DPTR,#App_TaskId
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 15)
//  298     return (events ^ APP_SEND_MSG_EVT);
        MOV     A,R6
        XRL     A,#0x1
        SJMP    ??App_ProcessEvent_17
//  299   }
//  300   
//  301   if( events & WATER_MACHINE_STATE_CHECK_EVT){
??App_ProcessEvent_15:
        ANL     A,#0x2
        JZ      ??App_ProcessEvent_18
//  302     State_Check();
        ; Setup parameters for call to function State_Check
        LCALL   `??State_Check::?relay`; Banked call to: State_Check
//  303     osal_start_timerEx( App_TaskId, WATER_MACHINE_STATE_CHECK_EVT, 100 );
        ; Setup parameters for call to function osal_start_timerEx
        MOV     DPTR,#__Constant_64
        LCALL   ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 19)
        MOV     R2,#0x2
        MOV     R3,#0x0
        MOV     DPTR,#App_TaskId
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 15)
//  304     return (events ^ WATER_MACHINE_STATE_CHECK_EVT);
        MOV     A,R6
        XRL     A,#0x2
        SJMP    ??App_ProcessEvent_17
//  305   }
//  306   
//  307   if ( events & HEARTBEAT_CHECK_EVT ){ 
??App_ProcessEvent_18:
        MOV     A,R6
        ANL     A,#0x4
        JZ      ??App_ProcessEvent_19
//  308     HeartBeat_Check(); 
        ; Setup parameters for call to function HeartBeat_Check
        LCALL   `??HeartBeat_Check::?relay`; Banked call to: HeartBeat_Check
//  309     osal_start_timerEx( App_TaskId, HEARTBEAT_CHECK_EVT, HEARTBEAT_CHECK_TIMEOUT ); 
        ; Setup parameters for call to function osal_start_timerEx
        MOV     DPTR,#__Constant_bb8
        LCALL   ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 19)
        MOV     R2,#0x4
        MOV     R3,#0x0
        MOV     DPTR,#App_TaskId
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 15)
//  310     return (events ^ HEARTBEAT_CHECK_EVT);
        MOV     A,R6
        XRL     A,#0x4
        SJMP    ??App_ProcessEvent_17
//  311   }
//  312   
//  313   if ( events & HEARTBEAT_SEND_EVT ){ 
??App_ProcessEvent_19:
        MOV     A,R6
        ANL     A,#0x8
        JZ      ??App_ProcessEvent_20
//  314     SendHearBeat(); 
        ; Setup parameters for call to function SendHearBeat
        LCALL   `??SendHearBeat::?relay`; Banked call to: SendHearBeat
//  315     osal_start_timerEx( App_TaskId, HEARTBEAT_SEND_EVT, HEARTBEAT_SEND_TIMEOUT ); 
        ; Setup parameters for call to function osal_start_timerEx
        MOV     DPTR,#__Constant_3e8
        LCALL   ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 19)
        MOV     R2,#0x8
        MOV     R3,#0x0
        MOV     DPTR,#App_TaskId
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 15)
//  316     return (events ^ HEARTBEAT_SEND_EVT);
        MOV     A,R6
        XRL     A,#0x8
??App_ProcessEvent_17:
        MOV     R2,A
        MOV     A,R7
??App_ProcessEvent_14:
        MOV     R3,A
        SJMP    ??App_ProcessEvent_21
//  317   }
//  318   
//  319   return 0;
??App_ProcessEvent_20:
        MOV     R2,#0x0
        MOV     R3,#0x0
??App_ProcessEvent_21:
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI EndBlock cfiBlock7
        REQUIRE ?Subroutine1
        REQUIRE _A_P1
        ; // Fall through to label ?Subroutine1
//  320 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
          CFI Block cfiBlock8 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock8

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
          CFI Block cfiCond9 Using cfiCommon0
          CFI Function SendHearBeat
          CFI Conditional ??CrossCallReturnLabel_4
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 13)
          CFI Block cfiCond10 Using cfiCommon0
          CFI (cfiCond10) Function App_ProcessEvent
          CFI (cfiCond10) Conditional ??CrossCallReturnLabel_5
          CFI (cfiCond10) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond10) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond10) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond10) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond10) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond10) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond10) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond10) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond10) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond10) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond10) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond10) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond10) CFA_SP SP+-2
          CFI (cfiCond10) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiPicker11 Using cfiCommon1
          CFI (cfiPicker11) NoFunction
          CFI (cfiPicker11) Picker
        MOVX    A,@DPTR
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
        RET
          CFI EndBlock cfiCond9
          CFI EndBlock cfiCond10
          CFI EndBlock cfiPicker11

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
          CFI Block cfiCond12 Using cfiCommon0
          CFI Function SendHearBeat
          CFI Conditional ??CrossCallReturnLabel_2
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 13)
          CFI Block cfiCond13 Using cfiCommon0
          CFI (cfiCond13) Function App_ProcessEvent
          CFI (cfiCond13) Conditional ??CrossCallReturnLabel_3
          CFI (cfiCond13) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond13) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond13) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond13) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond13) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond13) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond13) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond13) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond13) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond13) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond13) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond13) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond13) CFA_SP SP+-2
          CFI (cfiCond13) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiPicker14 Using cfiCommon1
          CFI (cfiPicker14) NoFunction
          CFI (cfiPicker14) Picker
        MOV     A,R2
        MOVX    @DPTR,A
        ; Setup parameters for call to function Protocol_Send
        ; Setup parameters for call to function Protocol_Send
        MOV     R1,#0x3
        MOV     R4,?XSP + 0
        MOV     R5,?XSP + 1
        MOV     R2,#0x31
        MOV     R3,#0x10
        RET
          CFI EndBlock cfiCond12
          CFI EndBlock cfiCond13
          CFI EndBlock cfiPicker14

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
          CFI Block cfiCond15 Using cfiCommon0
          CFI Function App_ProcessEvent
          CFI Conditional ??CrossCallReturnLabel_0
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond16 Using cfiCommon0
          CFI (cfiCond16) Function App_ProcessEvent
          CFI (cfiCond16) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond16) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond16) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond16) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond16) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond16) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond16) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond16) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond16) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond16) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond16) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond16) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond16) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond16) CFA_SP SP+-2
          CFI (cfiCond16) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiPicker17 Using cfiCommon1
          CFI (cfiPicker17) NoFunction
          CFI (cfiPicker17) Picker
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,?V0
        ADD     A,#0x22
        MOV     DPL,A
        CLR     A
        ADDC    A,?V1
        MOV     DPH,A
        MOVX    A,@DPTR
        RET
          CFI EndBlock cfiCond15
          CFI EndBlock cfiCond16
          CFI EndBlock cfiPicker17
//  321 
//  322 /****************************************************
//  323 *      函数名: App_ProcessZDOMsgs
//  324 *        功能: ZDO设备对象层消息处理 
//  325 ****************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  326 static void App_ProcessZDOMsgs( zdoIncomingMsg_t *inMsg ){
App_ProcessZDOMsgs:
          CFI Block cfiBlock18 Using cfiCommon0
          CFI Function App_ProcessZDOMsgs
        CODE
        FUNCALL App_ProcessZDOMsgs, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL App_ProcessZDOMsgs, ZDO_ParseEPListRsp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL App_ProcessZDOMsgs, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL App_ProcessZDOMsgs, printf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL App_ProcessZDOMsgs, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL App_ProcessZDOMsgs, printf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
//  327   switch ( inMsg->clusterID ){
        MOV     A,R2
        ADD     A,#0xc
        MOV     DPL,A
        CLR     A
        ADDC    A,R3
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     ?V0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V1,A
        MOV     R0,#?V0
        LCALL   ?US_SWITCH_SPARSE
`?<Jumptable for App_ProcessZDOMsgs>_0`:
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        0
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        3
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        6
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??App_ProcessZDOMsgs_0
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        32774
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??App_ProcessZDOMsgs_1
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        32800
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??App_ProcessZDOMsgs_2
        DATA
        DATA16
        DATA
        DATA16
        DW        ??App_ProcessZDOMsgs_3
        CODE
//  328     case End_Device_Bind_rsp:
//  329       if ( ZDO_ParseBindRsp( inMsg ) == ZSuccess ){
??App_ProcessZDOMsgs_2:
        MOV     A,R2
        ADD     A,#0x13
        MOV     DPL,A
        CLR     A
        ADDC    A,R3
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_7:
        MOVX    A,@DPTR
        JZ      $+5
        LJMP    ??App_ProcessZDOMsgs_3 & 0xFFFF
//  330         // Light LED
//  331         HalLedSet( HAL_LED_4, HAL_LED_MODE_ON );
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x1
        MOV     R1,#0x8
        LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
        LJMP    ??App_ProcessZDOMsgs_3 & 0xFFFF
//  332       }
//  333       break;
//  334 
//  335     case Match_Desc_rsp:
//  336       {
//  337         ZDO_ActiveEndpointRsp_t *pRsp = ZDO_ParseEPListRsp( inMsg );
??App_ProcessZDOMsgs_1:
        ; Setup parameters for call to function ZDO_ParseEPListRsp
        LCALL   `??ZDO_ParseEPListRsp::?relay`; Banked call to: ZDO_ParseEPListRsp
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     R6,?V0
        MOV     R7,?V1
//  338         if ( pRsp ){
        MOV     A,R6
        ORL     A,R7
        JZ      ??App_ProcessZDOMsgs_3
//  339           if ( pRsp->status == ZSuccess && pRsp->cnt ){
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        JNZ     ??App_ProcessZDOMsgs_4
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        JZ      ??App_ProcessZDOMsgs_4
//  340             App_DstAddr.addrMode = (afAddrMode_t)Addr16Bit;
        MOV     DPTR,#App_DstAddr + 8
        MOV     A,#0x2
        MOVX    @DPTR,A
//  341             App_DstAddr.addr.shortAddr = pRsp->nwkAddr; 
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPTR,#App_DstAddr
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  342             App_DstAddr.endPoint = pRsp->epList[0];
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPTR,#App_DstAddr + 9
        MOVX    @DPTR,A
//  343 
//  344             // Light LED
//  345             HalLedSet( HAL_LED_4, HAL_LED_MODE_ON );
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x1
        MOV     R1,#0x8
        LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
??App_ProcessZDOMsgs_4:
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V1,A
        ; Setup parameters for call to function printf
        MOV     A,?V0
        MOV     ?V2,A
        MOV     ?V3,#0x0
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        CLR     A
        XCH     A,?V1
        MOV     ?V0,A
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 16)
        MOV     R2,#`?<Constant "Match_Desc_rsp,addr:%...">` & 0xff
        MOV     R3,#(`?<Constant "Match_Desc_rsp,addr:%...">` >> 8) & 0xff
//  346           }
//  347           printf("Match_Desc_rsp,addr:%X,%X\r\n", pRsp->nwkAddr >> 8, pRsp->nwkAddr & 0x00FF);
        LCALL   `??printf::?relay`   ; Banked call to: printf
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
//  348           osal_mem_free( pRsp );
        ; Setup parameters for call to function osal_mem_free
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
        SJMP    ??App_ProcessZDOMsgs_3
//  349         }
//  350       }
//  351       break;
//  352     case Match_Desc_req:
//  353       printf("Match_Desc_rsp\r\n");
??App_ProcessZDOMsgs_0:
        ; Setup parameters for call to function printf
        MOV     R2,#`?<Constant "Match_Desc_rsp\\r\\n">` & 0xff
        MOV     R3,#(`?<Constant "Match_Desc_rsp\\r\\n">` >> 8) & 0xff
        LCALL   `??printf::?relay`   ; Banked call to: printf
//  354       break;
//  355   }
//  356 }
??App_ProcessZDOMsgs_3:
        LJMP    ?Subroutine1 & 0xFFFF
          CFI EndBlock cfiBlock18

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
          CFI Block cfiCond19 Using cfiCommon0
          CFI Function App_ProcessEvent
          CFI Conditional ??CrossCallReturnLabel_6
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond20 Using cfiCommon0
          CFI (cfiCond20) Function App_ProcessZDOMsgs
          CFI (cfiCond20) Conditional ??CrossCallReturnLabel_7
          CFI (cfiCond20) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond20) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond20) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond20) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond20) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond20) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond20) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond20) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond20) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond20) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond20) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond20) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond20) CFA_SP SP+-2
          CFI (cfiCond20) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker21 Using cfiCommon1
          CFI (cfiPicker21) NoFunction
          CFI (cfiPicker21) Picker
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        RET
          CFI EndBlock cfiCond19
          CFI EndBlock cfiCond20
          CFI EndBlock cfiPicker21

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??SendHandle::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    SendHandle

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??App_Init::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    App_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??App_GetTaskID::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    App_GetTaskID

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??App_GetepDesc::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    App_GetepDesc

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??SendHearBeat::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    SendHearBeat

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??BrodcastData::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    BrodcastData

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??App_ProcessEvent::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    App_ProcessEvent

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??App_ProcessZDOMsgs::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    App_ProcessZDOMsgs

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "HAL_KEY_SW_1\\r\\n">`:
        DB "HAL_KEY_SW_1\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "HAL_KEY_SW_2\\r\\n">`:
        DB "HAL_KEY_SW_2\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "\\312\\325\\265\\275\\312\\375\\276\\335:"`:
        DB "\312\325\265\275\312\375\276\335:"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {0, 0, 0}>`:
        DB 0
        DB 0
        DB 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {0, 0, 0}>_1`:
        DB 0
        DB 0
        DB 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "\\261\\276\\273\\372\\265\\330\\326\\267\\2`:
        DB "\261\276\273\372\265\330\326\267\243\272%X,%X\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "\\316\\302\\277\\330\\312\\344\\310\\353:%`:
        DB "\316\302\277\330\312\344\310\353:%d\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "\\267\\242\\313\\315\\312\\247\\260\\334\\r`:
        DB "\267\242\313\315\312\247\260\334\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Match_Desc_rsp,addr:%...">`:
        DB "Match_Desc_rsp,addr:%X,%X\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Match_Desc_rsp\\r\\n">`:
        DB "Match_Desc_rsp\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_3e8:
        DD 1000

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_bb8:
        DD 3000

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_64:
        DD 100

        END
// 
// 1 315 bytes in segment BANKED_CODE
//    48 bytes in segment BANK_RELAYS
//     1 byte  in segment SFR_AN
//   160 bytes in segment XDATA_ROM_C
//    24 bytes in segment XDATA_Z
// 
// 1 363 bytes of CODE  memory
//   148 bytes of CONST memory (+ 12 bytes shared)
//     0 bytes of DATA  memory (+  1 byte  shared)
//    24 bytes of XDATA memory
//
//Errors: none
//Warnings: none
