###############################################################################
#
# IAR C/C++ Compiler V9.30.1.3056 for 8051                31/Oct/2016  11:56:48
# Copyright 2004-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.03优化动态内存
#        -最后无错修改\Frame\Queue.c
#    Command line       =  
#        -f "E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.03优化动态内存
#        -最后无错修改\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f
#        "E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.03优化动态内存
#        -最后无错修改\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=50 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
#        -DREJOIN_POLL_RATE=440 "E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.03优化动态内存
#        -最后无错修改\Frame\Queue.c" -D HAL_UART=TRUE -D HAL_UART_ISR=1 -D
#        HAL_UART_DMA=0 -D LOG_OUT -D UART1_PROTOCOL_RESOLVER=1 -D xISQC -D
#        NWK_AUTO_POLL -D xZTOOL_P1 -D ISR_KEYINTERRUPT -D xMT_TASK -D
#        xMT_SYS_FUNC -D xMT_ZDO_FUNC -D xLCD_SUPPORTED=DEBUG -D xPOWER_SAVING
#        -lC "E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.03优化动态内存
#        -最后无错修改\CC2530DB\WaterMachine\List" -lA
#        "E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.03优化动态内存
#        -最后无错修改\CC2530DB\WaterMachine\List" --diag_suppress Pe001,Pa010
#        -o "E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.03优化动态内存
#        -最后无错修改\CC2530DB\WaterMachine\Obj" -e --no_code_motion --debug
#        --core=plain --dptr=16,1 --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 8 -I "E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.03优化动态内存
#        -最后无错修改\CC2530DB\" -I "E:\资源\个人项目\ZigbeeProject\Z-Stack
#        Mesh 1.0.0\Projects\zstack\Samples\Demo_App_V2.03优化动态内存
#        -最后无错修改\CC2530DB\..\Source\" -I
#        "E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.03优化动态内存
#        -最后无错修改\CC2530DB\..\Frame\" -I
#        "E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.03优化动态内存
#        -最后无错修改\CC2530DB\..\Module\WaterMachine\" -I
#        "E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.03优化动态内存
#        -最后无错修改\CC2530DB\..\..\..\ZMain\TI2530DB\" -I
#        "E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.03优化动态内存
#        -最后无错修改\CC2530DB\..\..\..\..\..\Components\hal\include\" -I
#        "E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.03优化动态内存
#        -最后无错修改\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.03优化动态内存
#        -最后无错修改\CC2530DB\..\..\..\..\..\Components\mac\include\" -I
#        "E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.03优化动态内存
#        -最后无错修改\CC2530DB\..\..\..\..\..\Components\mac\high_level\" -I
#        "E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.03优化动态内存
#        -最后无错修改\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.03优化动态内存
#        -最后无错修改\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.03优化动态内存
#        -最后无错修改\CC2530DB\..\..\..\..\..\Components\mt\" -I
#        "E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.03优化动态内存
#        -最后无错修改\CC2530DB\..\..\..\..\..\Components\osal\include\" -I
#        "E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.03优化动态内存
#        -最后无错修改\CC2530DB\..\..\..\..\..\Components\services\saddr\" -I
#        "E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.03优化动态内存
#        -最后无错修改\CC2530DB\..\..\..\..\..\Components\services\sdata\" -I
#        "E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.03优化动态内存
#        -最后无错修改\CC2530DB\..\..\..\..\..\Components\stack\af\" -I
#        "E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.03优化动态内存
#        -最后无错修改\CC2530DB\..\..\..\..\..\Components\stack\nwk\" -I
#        "E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.03优化动态内存
#        -最后无错修改\CC2530DB\..\..\..\..\..\Components\stack\sapi\" -I
#        "E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.03优化动态内存
#        -最后无错修改\CC2530DB\..\..\..\..\..\Components\stack\sec\" -I
#        "E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.03优化动态内存
#        -最后无错修改\CC2530DB\..\..\..\..\..\Components\stack\sys\" -I
#        "E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.03优化动态内存
#        -最后无错修改\CC2530DB\..\..\..\..\..\Components\stack\zdo\" -I
#        "E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.03优化动态内存
#        -最后无错修改\CC2530DB\..\..\..\..\..\Components\zmac\" -I
#        "E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.03优化动态内存
#        -最后无错修改\CC2530DB\..\..\..\..\..\Components\zmac\f8w\" -Ohz
#    List file          =  
#        E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.03优化动态内存
#        -最后无错修改\CC2530DB\WaterMachine\List\Queue.lst
#    Object file        =  
#        E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V2.03优化动态内存
#        -最后无错修改\CC2530DB\WaterMachine\Obj\Queue.r51
#
###############################################################################

E:\资源\个人项目\ZigbeeProject\Z-Stack Mesh 1.0.0\Projects\zstack\Samples\Demo_App_V2.03优化动态内存 -最后无错修改\Frame\Queue.c
      1          #include "Queue.h"  
      2          #include <string.h>
      3          #include "LOG.h" 
      4          /*
      5           *工具包
      6           *author：李尧 
      7           *time：2015年8月26日10:41:23
      8           */
      9          
     10          //###################################队列相关函数###################################
     11          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     12          QUEUE_T queue_list[QUEUE_MAXNUM] = {0}; 
   \                     queue_list:
   \   000000                DS 140
   \   00008C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     13          uint8_t queue_locd = 0;
   \                     queue_locd:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     14          /****************************************************
     15          	函数名:	queue_init
     16          	功能:	队列初始化
     17          	参数:	数组名，数组单个元素大小，数组元素个数
     18          	返回值:	队列句柄 或 NULL
     19          	作者:	liyao 2015年9月8日14:10:51
     20          ****************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     21          QUEUE_T* Queue_Init(void* _array,uint8_t _single_size ,uint16_t _count){ 
   \                     Queue_Init:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   89..         MOV     ?V0,R1
     22          	uint8_t i = 0;
   \   00000B   75..00       MOV     ?V1,#0x0
     23          	QUEUE_T* queue = NULL;
   \   00000E   7A00         MOV     R2,#0x0
   \   000010   7B00         MOV     R3,#0x0
     24          	for(i = 0; i < QUEUE_MAXNUM; i++)
     25          		if(queue_list[i].use_state == 0)
   \                     ??Queue_Init_0:
   \   000012   E5..         MOV     A,?V1
   \   000014   75F00E       MOV     B,#0xe
   \   000017   A4           MUL     AB
   \   000018   F8           MOV     R0,A
   \   000019   85F0..       MOV     ?V2,B
   \   00001C   A9..         MOV     R1,?V2
   \   00001E   74..         MOV     A,#(queue_list + 12) & 0xff
   \   000020   28           ADD     A,R0
   \   000021   F582         MOV     DPL,A
   \   000023   74..         MOV     A,#((queue_list + 12) >> 8) & 0xff
   \   000025   39           ADDC    A,R1
   \   000026   F583         MOV     DPH,A
   \   000028   E0           MOVX    A,@DPTR
   \   000029   7008         JNZ     ??Queue_Init_1
     26          			queue = &queue_list[i];
   \   00002B   74..         MOV     A,#queue_list & 0xff
   \   00002D   28           ADD     A,R0
   \   00002E   FA           MOV     R2,A
   \   00002F   74..         MOV     A,#(queue_list >> 8) & 0xff
   \   000031   39           ADDC    A,R1
   \   000032   FB           MOV     R3,A
   \                     ??Queue_Init_1:
   \   000033   05..         INC     ?V1
   \   000035   E5..         MOV     A,?V1
   \   000037   C3           CLR     C
   \   000038   940A         SUBB    A,#0xa
   \   00003A   40D6         JC      ??Queue_Init_0
     27          	if(queue == NULL)
   \   00003C   EA           MOV     A,R2
   \   00003D   4B           ORL     A,R3
   \   00003E   7006         JNZ     ??Queue_Init_2
     28          		return NULL;
   \   000040   7A00         MOV     R2,#0x0
   \   000042   7B00         MOV     R3,#0x0
   \   000044   8033         SJMP    ??Queue_Init_3
     29          	queue->use_state = 1;
   \                     ??Queue_Init_2:
   \   000046   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   000049   7401         MOV     A,#0x1
   \   00004B   12....       LCALL   ?Subroutine20 & 0xFFFF
     30          	queue->single_size = _single_size;
   \                     ??CrossCallReturnLabel_29:
   \   00004E   A3           INC     DPTR
   \   00004F   A3           INC     DPTR
   \   000050   E5..         MOV     A,?V0
   \   000052   12....       LCALL   ?Subroutine13 & 0xFFFF
     31          	queue->count = _count;
   \                     ??CrossCallReturnLabel_17:
   \   000055   EC           MOV     A,R4
   \   000056   F0           MOVX    @DPTR,A
   \   000057   A3           INC     DPTR
   \   000058   ED           MOV     A,R5
   \   000059   F0           MOVX    @DPTR,A
     32          	queue->start = queue->end = queue->num = queue->full_flag =0; 
   \   00005A   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   00005D   E4           CLR     A
   \   00005E   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   000061   A3           INC     DPTR
   \   000062   A3           INC     DPTR
   \   000063   F0           MOVX    @DPTR,A
   \   000064   A3           INC     DPTR
   \   000065   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   000068   F0           MOVX    @DPTR,A
   \   000069   A3           INC     DPTR
   \   00006A   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   00006D   A3           INC     DPTR
   \   00006E   A3           INC     DPTR
   \   00006F   F0           MOVX    @DPTR,A
   \   000070   A3           INC     DPTR
   \   000071   12....       LCALL   ?Subroutine20 & 0xFFFF
     33          	queue->data = _array;
   \                     ??CrossCallReturnLabel_30:
   \   000074   EE           MOV     A,R6
   \   000075   F0           MOVX    @DPTR,A
   \   000076   A3           INC     DPTR
   \   000077   EF           MOV     A,R7
   \   000078   F0           MOVX    @DPTR,A
     34          	return queue;
   \                     ??Queue_Init_3:
   \   000079   7F03         MOV     R7,#0x3
   \   00007B   02....       LJMP    ?BANKED_LEAVE_XDATA
     35          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   EA           MOV     A,R2
   \   000001   240B         ADD     A,#0xb
   \   000003   F582         MOV     DPL,A
   \   000005   E4           CLR     A
   \   000006   3B           ADDC    A,R3
   \   000007   F583         MOV     DPH,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   EA           MOV     A,R2
   \   000001   240C         ADD     A,#0xc
   \   000003   F582         MOV     DPL,A
   \   000005   E4           CLR     A
   \   000006   3B           ADDC    A,R3
   \   000007   F583         MOV     DPH,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   22           RET
     36          
     37          /****************************************************
     38          	函数名:	queue_put
     39          	功能:	数据插入到队列
     40          	参数:	队列句柄，数据
     41          	作者:	liyao 2015年9月8日14:10:51
     42          ****************************************************/
     43          /*int8_t queue_put(QUEUE_T* queue,int32* _data){
     44          		if(queue->num == queue->count)  
     45          			return -1;
     46          		switch(queue->single_size){ 
     47          			case 1:((int8_t*)queue->data)[queue->start] = (int8_t)_data ;	break;
     48          			case 2:((int16_t*)queue->data)[queue->start] = (int16_t)_data;	break;
     49          			case 4:((int32_t*)queue->data)[queue->start] = (int32_t)_data;	break;
     50          			default:return -1;
     51          		}
     52          		queue->start = ((++queue->start) % queue->count);
     53          		queue->num ++;
     54          		return 0;
     55          }*/
     56          
     57          /****************************************************
     58          	函数名:	queue_get
     59          	功能:	从队列取出数据
     60          	参数:	队列句柄，数据容器（回填）
     61          	作者:	liyao 2015年9月8日14:10:51
     62          ****************************************************/
     63          /*int8_t queue_get(QUEUE_T* queue, int32_t* _data){
     64          		if(queue->num == 0) 
     65          			return -1;
     66          		switch(queue->single_size){
     67          			case 1:*_data = ((int8_t*)queue->data)[queue->end];
     68          										  ((int8_t*)queue->data)[queue->end] = 0;	break;
     69          			case 2:*_data = ((int16_t*)queue->data)[queue->end];
     70          											((int16_t*)queue->data)[queue->end] = 0;			break;
     71          			case 4:*_data = ((int32_t*)queue->data)[queue->end];
     72          											((int32_t*)queue->data)[queue->end] = 0;break;
     73          			default:return -1;
     74          		}
     75          		queue->end = ((++queue->end) % queue->count);
     76          		queue->num --;
     77          		return 0;
     78          }*/
     79          #define QUEUE_LOCK do{if(queue->locked == 1) return -1;else queue->locked = 1;}while(0);
     80          #define QUEUE_UNLOCK do{queue->locked = 0;}while(0);
     81          /****************************************************
     82          	函数名:	queue_put 
     83          	功能:	数据插入到队列
     84          	参数:	队列句柄，数据
     85          	作者:	liyao 2015年9月8日14:10:51
     86          ****************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     87          int8_t Queue_Put(QUEUE_T* queue,void* _data){
   \                     Queue_Put:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
     88          		if(queue->full_flag == 1)  
   \   000009   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   00000C   6401         XRL     A,#0x1
   \   00000E   7004         JNZ     ??Queue_Put_0
     89          			return -1;
   \   000010   79FF         MOV     R1,#-0x1
   \   000012   806E         SJMP    ??Queue_Put_1
     90          		//QUEUE_LOCK;
     91          		memcpy((char*)queue->data + (queue->start * queue->single_size),_data,queue->single_size);
   \                     ??Queue_Put_0:
   \   000014   8E82         MOV     DPL,R6
   \   000016   8F83         MOV     DPH,R7
   \   000018   A3           INC     DPTR
   \   000019   A3           INC     DPTR
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   F5..         MOV     ?V2,A
   \   00001D   75..00       MOV     ?V3,#0x0
   \   000020   EE           MOV     A,R6
   \   000021   2405         ADD     A,#0x5
   \   000023   F5..         MOV     ?V0,A
   \   000025   E4           CLR     A
   \   000026   3F           ADDC    A,R7
   \   000027   F5..         MOV     ?V1,A
   \   000029                ; Setup parameters for call to function memcpy
   \   000029   78..         MOV     R0,#?V2
   \   00002B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002E   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   000031   AAF0         MOV     R2,B
   \   000033   85..F0       MOV     B,?V2
   \   000036   E9           MOV     A,R1
   \   000037   A4           MUL     AB
   \   000038   2A           ADD     A,R2
   \   000039   F9           MOV     R1,A
   \   00003A   8E82         MOV     DPL,R6
   \   00003C   8F83         MOV     DPH,R7
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   28           ADD     A,R0
   \   000040   FA           MOV     R2,A
   \   000041   A3           INC     DPTR
   \   000042   E0           MOVX    A,@DPTR
   \   000043   39           ADDC    A,R1
   \   000044   FB           MOV     R3,A
   \   000045   12....       LCALL   `??memcpy::?relay`   ; Banked call to: memcpy
   \   000048   7402         MOV     A,#0x2
   \   00004A   12....       LCALL   ?DEALLOC_XSTACK8
     92          		queue->start = ((++queue->start) % queue->count);
                 		^
Warning[Pa079]: undefined behavior: parameter "queue" (declared at line 87)
          (or a value reached by some form of indirection through it) is
          modified more than once without an intervening sequence point in
          this statement
   \   00004D   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   000050   12....       LCALL   ?US_DIV_MOD
   \   000053   8A..         MOV     ?V2,R2
   \   000055   8B..         MOV     ?V3,R3
   \   000057   A8..         MOV     R0,?V2
   \   000059   A9..         MOV     R1,?V3
   \   00005B   85..82       MOV     DPL,?V0
   \   00005E   85..83       MOV     DPH,?V1
   \   000061   E8           MOV     A,R0
   \   000062   F0           MOVX    @DPTR,A
   \   000063   A3           INC     DPTR
   \   000064   E9           MOV     A,R1
   \   000065   F0           MOVX    @DPTR,A
     93          		if(queue->start == queue->end)
   \   000066   8E82         MOV     DPL,R6
   \   000068   8F83         MOV     DPH,R7
   \   00006A   A3           INC     DPTR
   \   00006B   A3           INC     DPTR
   \   00006C   A3           INC     DPTR
   \   00006D   A3           INC     DPTR
   \   00006E   A3           INC     DPTR
   \   00006F   A3           INC     DPTR
   \   000070   A3           INC     DPTR
   \   000071   E0           MOVX    A,@DPTR
   \   000072   68           XRL     A,R0
   \   000073   7003         JNZ     ??Queue_Put_2
   \   000075   A3           INC     DPTR
   \   000076   E0           MOVX    A,@DPTR
   \   000077   69           XRL     A,R1
   \                     ??Queue_Put_2:
   \   000078   7006         JNZ     ??Queue_Put_3
     94          			queue->full_flag = 1;
   \   00007A   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   00007D   7401         MOV     A,#0x1
   \   00007F   F0           MOVX    @DPTR,A
     95          		//queue->num ++;
     96          		//QUEUE_UNLOCK
     97          		return 0;
   \                     ??Queue_Put_3:
   \   000080   7900         MOV     R1,#0x0
   \                     ??Queue_Put_1:
   \   000082   02....       LJMP    ?Subroutine0 & 0xFFFF
     98          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   EE           MOV     A,R6
   \   000001   240B         ADD     A,#0xb
   \   000003   F582         MOV     DPL,A
   \   000005   E4           CLR     A
   \   000006   3F           ADDC    A,R7
   \   000007   F583         MOV     DPH,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_48:
   \   000003   E8           MOV     A,R0
   \   000004   85..F0       MOV     B,?V2
   \   000007   A4           MUL     AB
   \   000008   F8           MOV     R0,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   85..82       MOV     DPL,?V0
   \   000003   85..83       MOV     DPH,?V1
   \   000006   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   000009   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_47:
   \   00000C   8E82         MOV     DPL,R6
   \   00000E   8F83         MOV     DPH,R7
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   E0           MOVX    A,@DPTR
   \   000014   FA           MOV     R2,A
   \   000015   A3           INC     DPTR
   \   000016   E0           MOVX    A,@DPTR
   \   000017   FB           MOV     R3,A
   \   000018   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F04         MOV     R7,#0x4
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   2401         ADD     A,#0x1
   \   000003   F0           MOVX    @DPTR,A
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   3400         ADDC    A,#0x0
   \   000008   F0           MOVX    @DPTR,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   85..82       MOV     DPL,?V0
   \   000003   85..83       MOV     DPH,?V1
   \   000006                REQUIRE ??Subroutine27_0
   \   000006                ; // Fall through to label ??Subroutine27_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine27_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   22           RET
     99          
    100          /****************************************************
    101          	函数名:	queue_get
    102          	功能:	从队列取出数据
    103          	参数:	队列句柄，数据容器（回填）
    104          	作者:	liyao 2015年9月8日14:10:51
    105          ****************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    106          int8_t Queue_Get(QUEUE_T* queue, void* _data){
   \                     Queue_Get:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   EC           MOV     A,R4
   \   00000A   FA           MOV     R2,A
   \   00000B   ED           MOV     A,R5
   \   00000C   FB           MOV     R3,A
    107          		if(queue->full_flag == 0 && queue->start == queue->end) 
   \   00000D   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   000010   701F         JNZ     ??Queue_Get_0
   \   000012   8E82         MOV     DPL,R6
   \   000014   8F83         MOV     DPH,R7
   \   000016   12....       LCALL   ??Subroutine22_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_36:
   \   000019   8E82         MOV     DPL,R6
   \   00001B   8F83         MOV     DPH,R7
   \   00001D   A3           INC     DPTR
   \   00001E   A3           INC     DPTR
   \   00001F   A3           INC     DPTR
   \   000020   A3           INC     DPTR
   \   000021   A3           INC     DPTR
   \   000022   A3           INC     DPTR
   \   000023   A3           INC     DPTR
   \   000024   E0           MOVX    A,@DPTR
   \   000025   68           XRL     A,R0
   \   000026   7003         JNZ     ??Queue_Get_1
   \   000028   A3           INC     DPTR
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   69           XRL     A,R1
   \                     ??Queue_Get_1:
   \   00002B   7004         JNZ     ??Queue_Get_0
    108          			return -1;
   \   00002D   79FF         MOV     R1,#-0x1
   \   00002F   8050         SJMP    ??Queue_Get_2
    109          		//QUEUE_LOCK;
    110          		memcpy(_data,(char*)queue->data + (queue->end * queue->single_size),queue->single_size);
   \                     ??Queue_Get_0:
   \   000031   8E82         MOV     DPL,R6
   \   000033   8F83         MOV     DPH,R7
   \   000035   A3           INC     DPTR
   \   000036   A3           INC     DPTR
   \   000037   E0           MOVX    A,@DPTR
   \   000038   F5..         MOV     ?V2,A
   \   00003A   75..00       MOV     ?V3,#0x0
   \   00003D   EE           MOV     A,R6
   \   00003E   2407         ADD     A,#0x7
   \   000040   F5..         MOV     ?V0,A
   \   000042   E4           CLR     A
   \   000043   3F           ADDC    A,R7
   \   000044   F5..         MOV     ?V1,A
   \   000046                ; Setup parameters for call to function memcpy
   \   000046   78..         MOV     R0,#?V2
   \   000048   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004B   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   00004E   ACF0         MOV     R4,B
   \   000050   85..F0       MOV     B,?V2
   \   000053   E9           MOV     A,R1
   \   000054   A4           MUL     AB
   \   000055   2C           ADD     A,R4
   \   000056   F9           MOV     R1,A
   \   000057   8E82         MOV     DPL,R6
   \   000059   8F83         MOV     DPH,R7
   \   00005B   E0           MOVX    A,@DPTR
   \   00005C   28           ADD     A,R0
   \   00005D   FC           MOV     R4,A
   \   00005E   A3           INC     DPTR
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   39           ADDC    A,R1
   \   000061   FD           MOV     R5,A
   \   000062   12....       LCALL   `??memcpy::?relay`   ; Banked call to: memcpy
   \   000065   7402         MOV     A,#0x2
   \   000067   12....       LCALL   ?DEALLOC_XSTACK8
    111          		queue->end = ((++queue->end) % queue->count);
                 		^
Warning[Pa079]: undefined behavior: parameter "queue" (declared at line 106)
          (or a value reached by some form of indirection through it) is
          modified more than once without an intervening sequence point in
          this statement
   \   00006A   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   00006D   12....       LCALL   ?US_DIV_MOD
   \   000070   85..82       MOV     DPL,?V0
   \   000073   85..83       MOV     DPH,?V1
   \   000076   EA           MOV     A,R2
   \   000077   F0           MOVX    @DPTR,A
   \   000078   A3           INC     DPTR
   \   000079   EB           MOV     A,R3
   \   00007A   F0           MOVX    @DPTR,A
    112          		queue->full_flag = 0;
   \   00007B   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   00007E   E4           CLR     A
   \   00007F   F0           MOVX    @DPTR,A
    113          		//queue->num --;
    114          		//QUEUE_UNLOCK;
    115          		return 0;
   \   000080   F9           MOV     R1,A
   \                     ??Queue_Get_2:
   \   000081   02....       LJMP    ?Subroutine0 & 0xFFFF
    116          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine22_0:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine23_0
   \   000001                ; // Fall through to label ??Subroutine23_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine23_0:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   A3           INC     DPTR
   \   000004                REQUIRE ??Subroutine24_0
   \   000004                ; // Fall through to label ??Subroutine24_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine24_0:
   \   000000   12....       LCALL   ??Subroutine27_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_49:
   \   000003   22           RET
    117          
    118          /****************************************************
    119          	函数名:	queue_size
    120          	功能:		获取队列当前成员个数
    121          	参数:	队列句柄
    122          	返回值：队列现有成员个数
    123          	作者:	liyao 2015年9月8日14:10:51
    124          ****************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004                REQUIRE ??Subroutine21_0
   \   000004                ; // Fall through to label ??Subroutine21_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine21_0:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002                REQUIRE ??Subroutine22_0
   \   000002                ; // Fall through to label ??Subroutine22_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    125          uint16_t Queue_Size(QUEUE_T* queue){
   \                     Queue_Size:
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    126          	if(queue->full_flag == 1)
   \   000004   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   000007   E0           MOVX    A,@DPTR
   \   000008   6401         XRL     A,#0x1
   \   00000A   8A82         MOV     DPL,R2
   \   00000C   8B83         MOV     DPH,R3
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   7006         JNZ     ??Queue_Size_0
    127          		return queue->count;
   \   000013   E0           MOVX    A,@DPTR
   \   000014   FA           MOV     R2,A
   \   000015   A3           INC     DPTR
   \   000016   E0           MOVX    A,@DPTR
   \   000017   8061         SJMP    ??Queue_Size_1
    128          	else if(queue->start == queue->end)
   \                     ??Queue_Size_0:
   \   000019   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   00001C   A3           INC     DPTR
   \   00001D   A3           INC     DPTR
   \   00001E   A3           INC     DPTR
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   68           XRL     A,R0
   \   000021   7003         JNZ     ??Queue_Size_2
   \   000023   A3           INC     DPTR
   \   000024   E0           MOVX    A,@DPTR
   \   000025   69           XRL     A,R1
   \                     ??Queue_Size_2:
   \   000026   6055         JZ      ??Queue_Size_3
    129          		return 0;
    130          	else if(queue->start > queue->end)
   \   000028   8A82         MOV     DPL,R2
   \   00002A   8B83         MOV     DPH,R3
   \   00002C   A3           INC     DPTR
   \   00002D   A3           INC     DPTR
   \   00002E   A3           INC     DPTR
   \   00002F   A3           INC     DPTR
   \   000030   A3           INC     DPTR
   \   000031   A3           INC     DPTR
   \   000032   A3           INC     DPTR
   \   000033   C3           CLR     C
   \   000034   E0           MOVX    A,@DPTR
   \   000035   98           SUBB    A,R0
   \   000036   A3           INC     DPTR
   \   000037   E0           MOVX    A,@DPTR
   \   000038   99           SUBB    A,R1
   \   000039   8A82         MOV     DPL,R2
   \   00003B   8B83         MOV     DPH,R3
   \   00003D   A3           INC     DPTR
   \   00003E   A3           INC     DPTR
   \   00003F   A3           INC     DPTR
   \   000040   5016         JNC     ??Queue_Size_4
    131          		return queue->start - queue->end;
   \   000042   A3           INC     DPTR
   \   000043   A3           INC     DPTR
   \   000044   C082         PUSH    DPL
   \   000046   C083         PUSH    DPH
   \   000048   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   00004B   D083         POP     DPH
   \   00004D   D082         POP     DPL
   \   00004F   E0           MOVX    A,@DPTR
   \   000050   C3           CLR     C
   \   000051   98           SUBB    A,R0
   \   000052   FA           MOV     R2,A
   \   000053   A3           INC     DPTR
   \   000054   E0           MOVX    A,@DPTR
   \   000055   99           SUBB    A,R1
   \   000056   8022         SJMP    ??Queue_Size_1
    132          	else if(queue->start < queue->end)
    133          		return queue->count - queue->end + queue->start;
   \                     ??Queue_Size_4:
   \   000058   C082         PUSH    DPL
   \   00005A   C083         PUSH    DPH
   \   00005C   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_39:
   \   00005F   D083         POP     DPH
   \   000061   D082         POP     DPL
   \   000063   E0           MOVX    A,@DPTR
   \   000064   C3           CLR     C
   \   000065   98           SUBB    A,R0
   \   000066   F8           MOV     R0,A
   \   000067   A3           INC     DPTR
   \   000068   E0           MOVX    A,@DPTR
   \   000069   99           SUBB    A,R1
   \   00006A   F9           MOV     R1,A
   \   00006B   8A82         MOV     DPL,R2
   \   00006D   8B83         MOV     DPH,R3
   \   00006F   A3           INC     DPTR
   \   000070   A3           INC     DPTR
   \   000071   A3           INC     DPTR
   \   000072   A3           INC     DPTR
   \   000073   A3           INC     DPTR
   \   000074   E0           MOVX    A,@DPTR
   \   000075   28           ADD     A,R0
   \   000076   FA           MOV     R2,A
   \   000077   A3           INC     DPTR
   \   000078   E0           MOVX    A,@DPTR
   \   000079   39           ADDC    A,R1
   \                     ??Queue_Size_1:
   \   00007A   FB           MOV     R3,A
   \   00007B   8004         SJMP    ??Queue_Size_5
    134          	return 0;
   \                     ??Queue_Size_3:
   \   00007D   7A00         MOV     R2,#0x0
   \   00007F   7B00         MOV     R3,#0x0
   \                     ??Queue_Size_5:
   \   000081   80..         SJMP    ?Subroutine1
    135          	//return queue->num;
    136          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   12....       LCALL   ??Subroutine27_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_45:
   \   000005   8A82         MOV     DPL,R2
   \   000007   8B83         MOV     DPH,R3
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   A3           INC     DPTR
   \   00000D   22           RET
    137          
    138          /****************************************************
    139          	函数名:	queue_empty_size
    140          	功能:	获取队列剩余空位个数
    141          	参数:	队列句柄
    142          	返回值：队列剩余空位个数
    143          	作者:	liyao 2015年9月8日14:10:51
    144          ****************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    145          uint16_t Queue_Empty_Size(QUEUE_T* queue){
   \                     Queue_Empty_Size:
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    146          	return queue->count - queue->num;
   \   000004   8A82         MOV     DPL,R2
   \   000006   8B83         MOV     DPH,R3
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   C082         PUSH    DPL
   \   00000D   C083         PUSH    DPH
   \   00000F   8A82         MOV     DPL,R2
   \   000011   8B83         MOV     DPH,R3
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   12....       LCALL   ??Subroutine21_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_37:
   \   000018   D083         POP     DPH
   \   00001A   D082         POP     DPL
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   C3           CLR     C
   \   00001E   98           SUBB    A,R0
   \   00001F   FA           MOV     R2,A
   \   000020   A3           INC     DPTR
   \   000021   E0           MOVX    A,@DPTR
   \   000022   99           SUBB    A,R1
   \   000023   FB           MOV     R3,A
   \   000024   80..         SJMP    ?Subroutine1
    147          }
    148          
    149          /****************************************************
    150          	函数名:queue_free
    151          	功能:	释放队列
    152          	参数:	队列句柄
    153          	作者:	liyao 2015年9月8日14:10:51
    154          ****************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    155          void Queue_Free(QUEUE_T* queue){
   \                     Queue_Free:
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    156          	queue->use_state = 0;
   \   000004   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   000007   E4           CLR     A
   \   000008   F0           MOVX    @DPTR,A
    157          }
   \   000009                REQUIRE ?Subroutine1
   \   000009                ; // Fall through to label ?Subroutine1
    158          /* Usage:
    159          	QUEUE_T* queue = queue_init(test ,sizeof(uint8_t)  ,10 );  
    160          	queue_put(queue,(int8_t)200,0,0);
    161          	queue_put(queue,(int8_t)201,0,0);
    162          	queue_get(queue,(int8_t*)&i,NULL,NULL); */
    163          
    164          //###################################动态内存队列相关函数################################### 
    165          
    166          /****************************************************
    167          	函数名:Queue_Link_Init
    168          	功能:	获取一个链表队列
    169          	作者:	liyao 2016年10月26日11:47:26
    170          ****************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    171          Queue_Head_T* Queue_Link_Init(uint16_t Size){
   \                     Queue_Link_Init:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0,R2
   \   000007   8B..         MOV     ?V1,R3
    172          	Queue_Head_T* queue = MALLOC(sizeof(Queue_Head_T));
   \   000009                ; Setup parameters for call to function osal_mem_alloc
   \   000009   7A08         MOV     R2,#0x8
   \   00000B   7B00         MOV     R3,#0x0
   \   00000D   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000010   8A..         MOV     ?V2,R2
   \   000012   8B..         MOV     ?V3,R3
   \   000014   AE..         MOV     R6,?V2
   \   000016   AF..         MOV     R7,?V3
    173          	MALLOC_CHECK(queue, "Queue_Link_Init"); 
   \   000018   EE           MOV     A,R6
   \   000019   4F           ORL     A,R7
   \   00001A   700A         JNZ     ??Queue_Link_Init_0
   \   00001C                ; Setup parameters for indirect call
   \   00001C   7A..         MOV     R2,#`?<Constant "\\"Queue_Link_Init\\"\\277\\325\\274\\34` & 0xff
   \   00001E   7B..         MOV     R3,#(`?<Constant "\\"Queue_Link_Init\\"\\277\\325\\274\\34` >> 8) & 0xff
   \   000020   12....       LCALL   ??Subroutine25_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_41:
   \   000023   12....       LCALL   ?CALL_IND
    174          	memset(queue, 0, sizeof(Queue_Head_T));
   \                     ??Queue_Link_Init_0:
   \   000026                ; Setup parameters for call to function memset
   \   000026   75..08       MOV     ?V2,#0x8
   \   000029   75..00       MOV     ?V3,#0x0
   \   00002C   78..         MOV     R0,#?V2
   \   00002E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000031   7C00         MOV     R4,#0x0
   \   000033   7D00         MOV     R5,#0x0
   \   000035   EE           MOV     A,R6
   \   000036   FA           MOV     R2,A
   \   000037   EF           MOV     A,R7
   \   000038   FB           MOV     R3,A
   \   000039   12....       LCALL   `??memset::?relay`   ; Banked call to: memset
   \   00003C   7402         MOV     A,#0x2
   \   00003E   12....       LCALL   ?DEALLOC_XSTACK8
    175          	queue->Size = Size;
   \   000041   8E82         MOV     DPL,R6
   \   000043   8F83         MOV     DPH,R7
   \   000045   A3           INC     DPTR
   \   000046   A3           INC     DPTR
   \   000047   A3           INC     DPTR
   \   000048   A3           INC     DPTR
   \   000049   E5..         MOV     A,?V0
   \   00004B   F0           MOVX    @DPTR,A
   \   00004C   A3           INC     DPTR
   \   00004D   E5..         MOV     A,?V1
   \   00004F   F0           MOVX    @DPTR,A
    176          	return queue; 
   \   000050   EE           MOV     A,R6
   \   000051   FA           MOV     R2,A
   \   000052   EF           MOV     A,R7
   \   000053   FB           MOV     R3,A
   \   000054                REQUIRE ?Subroutine0
   \   000054                ; // Fall through to label ?Subroutine0
    177          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine25_0:
   \   000000   90....       MOV     DPTR,#Log + 4
   \   000003                REQUIRE ??Subroutine26_0
   \   000003                ; // Fall through to label ??Subroutine26_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine26_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F583         MOV     DPH,A
   \   000006   8882         MOV     DPL,R0
   \   000008   22           RET
    178          
    179          /****************************************************
    180          	函数名:Queue_Link_Put
    181          	功能:	向队列中添加一个元素
    182          	作者:	liyao 2016年10月26日
    183          ****************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   7A..         MOV     R2,#`?<Constant "\\"Queue_Link_Put\\"\\277\\325\\274\\344` & 0xff
   \   000002   7B..         MOV     R3,#(`?<Constant "\\"Queue_Link_Put\\"\\277\\325\\274\\344` >> 8) & 0xff
   \   000004                REQUIRE ??Subroutine25_0
   \   000004                ; // Fall through to label ??Subroutine25_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    184          int8_t Queue_Link_Put(Queue_Head_T* Queue_Head,void* Data, uint16_t Len){
   \                     Queue_Link_Put:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V2,R2
   \   000007   8B..         MOV     ?V3,R3
   \   000009   8C..         MOV     ?V6,R4
   \   00000B   8D..         MOV     ?V7,R5
    185          	Queue_Pack_T* Queue_Pack = NULL;
    186          	if(Queue_Head->Size > 0 && Queue_Head->Count == Queue_Head->Size){
   \   00000D   8A82         MOV     DPL,R2
   \   00000F   8B83         MOV     DPH,R3
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   000018   6023         JZ      ??Queue_Link_Put_0
   \   00001A   8A82         MOV     DPL,R2
   \   00001C   8B83         MOV     DPH,R3
   \   00001E   A3           INC     DPTR
   \   00001F   A3           INC     DPTR
   \   000020   A3           INC     DPTR
   \   000021   A3           INC     DPTR
   \   000022   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   000025   E0           MOVX    A,@DPTR
   \   000026   68           XRL     A,R0
   \   000027   7003         JNZ     ??Queue_Link_Put_1
   \   000029   A3           INC     DPTR
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   69           XRL     A,R1
   \                     ??Queue_Link_Put_1:
   \   00002C   700F         JNZ     ??Queue_Link_Put_0
    187          		Log.error("队列满\r\n");
   \   00002E                ; Setup parameters for indirect call
   \   00002E   7A..         MOV     R2,#`?<Constant "\\266\\323\\301\\320\\302\\372\\r\\n">` & 0xff
   \   000030   7B..         MOV     R3,#(`?<Constant "\\266\\323\\301\\320\\302\\372\\r\\n">` >> 8) & 0xff
   \   000032   12....       LCALL   ??Subroutine25_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   000035   12....       LCALL   ?CALL_IND
    188          		return -1;
   \   000038   79FF         MOV     R1,#-0x1
   \   00003A   02....       LJMP    ??Queue_Link_Put_2 & 0xFFFF
    189          	}
    190          	//分配Queue_Pack_T
    191          	Queue_Pack = MALLOC(sizeof(Queue_Pack_T)); 
   \                     ??Queue_Link_Put_0:
   \   00003D                ; Setup parameters for call to function osal_mem_alloc
   \   00003D   7A06         MOV     R2,#0x6
   \   00003F   7B00         MOV     R3,#0x0
   \   000041   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000044   8A..         MOV     ?V0,R2
   \   000046   8B..         MOV     ?V1,R3
    192          	MALLOC_CHECK(Queue_Pack, "Queue_Link_Put"); 
   \   000048   EA           MOV     A,R2
   \   000049   45..         ORL     A,?V1
   \   00004B   7006         JNZ     ??Queue_Link_Put_3
   \   00004D                ; Setup parameters for indirect call
   \   00004D   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_43:
   \   000050   12....       LCALL   ?CALL_IND
   \                     ??Queue_Link_Put_3:
   \   000053   7410         MOV     A,#0x10
   \   000055   12....       LCALL   ?XSTACK_DISP0_8
   \   000058   E0           MOVX    A,@DPTR
   \   000059   FE           MOV     R6,A
   \   00005A   A3           INC     DPTR
   \   00005B   E0           MOVX    A,@DPTR
   \   00005C   FF           MOV     R7,A
    193          	Queue_Pack->Data = CALLOC(Len, sizeof(uint8_t));
   \   00005D                ; Setup parameters for call to function osal_mem_alloc
   \   00005D   EE           MOV     A,R6
   \   00005E   FA           MOV     R2,A
   \   00005F   EF           MOV     A,R7
   \   000060   FB           MOV     R3,A
   \   000061   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000064   8A..         MOV     ?V4,R2
   \   000066   8B..         MOV     ?V5,R3
   \   000068   A8..         MOV     R0,?V4
   \   00006A   A9..         MOV     R1,?V5
   \   00006C   85..82       MOV     DPL,?V0
   \   00006F   85..83       MOV     DPH,?V1
   \   000072   E8           MOV     A,R0
   \   000073   F0           MOVX    @DPTR,A
   \   000074   A3           INC     DPTR
   \   000075   E9           MOV     A,R1
   \   000076   F0           MOVX    @DPTR,A
    194          	MALLOC_CHECK(Queue_Pack->Data, "Queue_Link_Put"); 
   \   000077   E8           MOV     A,R0
   \   000078   49           ORL     A,R1
   \   000079   7006         JNZ     ??Queue_Link_Put_4
   \   00007B                ; Setup parameters for indirect call
   \   00007B   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_44:
   \   00007E   12....       LCALL   ?CALL_IND
    195          	//赋值Queue_Pack_T 
    196          	Queue_Pack->Next = NULL;
   \                     ??Queue_Link_Put_4:
   \   000081   85..82       MOV     DPL,?V0
   \   000084   85..83       MOV     DPH,?V1
   \   000087   A3           INC     DPTR
   \   000088   A3           INC     DPTR
   \   000089   A3           INC     DPTR
   \   00008A   A3           INC     DPTR
   \   00008B   E4           CLR     A
   \   00008C   F0           MOVX    @DPTR,A
   \   00008D   A3           INC     DPTR
   \   00008E   F0           MOVX    @DPTR,A
    197          	Queue_Pack->Len	 = Len;
   \   00008F   85..82       MOV     DPL,?V0
   \   000092   85..83       MOV     DPH,?V1
   \   000095   A3           INC     DPTR
   \   000096   A3           INC     DPTR
   \   000097   EE           MOV     A,R6
   \   000098   F0           MOVX    @DPTR,A
   \   000099   A3           INC     DPTR
   \   00009A   EF           MOV     A,R7
   \   00009B   F0           MOVX    @DPTR,A
    198          	memcpy(Queue_Pack->Data, Data, Len); 
   \   00009C                ; Setup parameters for call to function memcpy
   \   00009C   8E..         MOV     ?V4,R6
   \   00009E   8F..         MOV     ?V5,R7
   \   0000A0   78..         MOV     R0,#?V4
   \   0000A2   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000A5   AC..         MOV     R4,?V6
   \   0000A7   AD..         MOV     R5,?V7
   \   0000A9   85..82       MOV     DPL,?V0
   \   0000AC   85..83       MOV     DPH,?V1
   \   0000AF   12....       LCALL   ??Subroutine28_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_50:
   \   0000B2   12....       LCALL   `??memcpy::?relay`   ; Banked call to: memcpy
   \   0000B5   7402         MOV     A,#0x2
   \   0000B7   12....       LCALL   ?DEALLOC_XSTACK8
    199          	//加入链表
    200          	if(Queue_Head->Out == NULL){//首次加入
   \   0000BA   85..82       MOV     DPL,?V2
   \   0000BD   85..83       MOV     DPH,?V3
   \   0000C0   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   0000C3   701F         JNZ     ??Queue_Link_Put_5
    201          		Queue_Head->Out = Queue_Head->In = Queue_Pack;
   \   0000C5   E5..         MOV     A,?V2
   \   0000C7   2402         ADD     A,#0x2
   \   0000C9   FA           MOV     R2,A
   \   0000CA   E4           CLR     A
   \   0000CB   35..         ADDC    A,?V3
   \   0000CD   FB           MOV     R3,A
   \   0000CE   8A82         MOV     DPL,R2
   \   0000D0   8B83         MOV     DPH,R3
   \   0000D2   12....       LCALL   ?Subroutine10 & 0xFFFF
    202          	}else{//已有数据加入 
   \                     ??CrossCallReturnLabel_12:
   \   0000D5   12....       LCALL   ??Subroutine24_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   0000D8   85..82       MOV     DPL,?V2
   \   0000DB   85..83       MOV     DPH,?V3
   \   0000DE   E8           MOV     A,R0
   \   0000DF   F0           MOVX    @DPTR,A
   \   0000E0   A3           INC     DPTR
   \   0000E1   E9           MOV     A,R1
   \   0000E2   8021         SJMP    ??Queue_Link_Put_6
    203          		Queue_Head->In->Next = Queue_Pack;
   \                     ??Queue_Link_Put_5:
   \   0000E4   E5..         MOV     A,?V2
   \   0000E6   2402         ADD     A,#0x2
   \   0000E8   F8           MOV     R0,A
   \   0000E9   E4           CLR     A
   \   0000EA   35..         ADDC    A,?V3
   \   0000EC   F9           MOV     R1,A
   \   0000ED   E8           MOV     A,R0
   \   0000EE   FA           MOV     R2,A
   \   0000EF   E9           MOV     A,R1
   \   0000F0   FB           MOV     R3,A
   \   0000F1   8A82         MOV     DPL,R2
   \   0000F3   8B83         MOV     DPH,R3
   \   0000F5   12....       LCALL   ??Subroutine26_0 & 0xFFFF
    204          		Queue_Head->In = Queue_Pack;
    205          	}
   \                     ??CrossCallReturnLabel_40:
   \   0000F8   A3           INC     DPTR
   \   0000F9   A3           INC     DPTR
   \   0000FA   A3           INC     DPTR
   \   0000FB   A3           INC     DPTR
   \   0000FC   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   0000FF   E5..         MOV     A,?V0
   \   000101   F0           MOVX    @DPTR,A
   \   000102   A3           INC     DPTR
   \   000103   E5..         MOV     A,?V1
   \                     ??Queue_Link_Put_6:
   \   000105   F0           MOVX    @DPTR,A
    206          	Queue_Head->Count++;
   \   000106   85..82       MOV     DPL,?V2
   \   000109   85..83       MOV     DPH,?V3
   \   00010C   A3           INC     DPTR
   \   00010D   A3           INC     DPTR
   \   00010E   A3           INC     DPTR
   \   00010F   A3           INC     DPTR
   \   000110   A3           INC     DPTR
   \   000111   A3           INC     DPTR
   \   000112   12....       LCALL   ?Subroutine17 & 0xFFFF
    207          	return 0;
   \                     ??CrossCallReturnLabel_23:
   \   000115   7900         MOV     R1,#0x0
   \                     ??Queue_Link_Put_2:
   \   000117   7F08         MOV     R7,#0x8
   \   000119   02....       LJMP    ?BANKED_LEAVE_XDATA
    208          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   E5..         MOV     A,?V0
   \   000002   F0           MOVX    @DPTR,A
   \   000003   A3           INC     DPTR
   \   000004   E5..         MOV     A,?V1
   \   000006   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   12....       LCALL   ??Subroutine27_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_46:
   \   000003   E8           MOV     A,R0
   \   000004   49           ORL     A,R1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine28_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FB           MOV     R3,A
   \   000005   22           RET
    209          
    210          /****************************************************
    211          	函数名:Queue_Link_OutSize
    212          	功能:	查询队列中将要获取的数据的长度
    213          	作者:	liyao 2016年10月26日
    214          ****************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    215          uint16_t Queue_Link_OutSize(Queue_Head_T* Queue_Head){
   \                     Queue_Link_OutSize:
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    216          	if(Queue_Head->Out == NULL)//避免野指针
   \   000004   8A82         MOV     DPL,R2
   \   000006   8B83         MOV     DPH,R3
   \   000008   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   00000B   7006         JNZ     ??Queue_Link_OutSize_0
    217          		return 0;
   \   00000D   7A00         MOV     R2,#0x0
   \   00000F   7B00         MOV     R3,#0x0
   \   000011   800F         SJMP    ??CrossCallReturnLabel_51
    218          	return Queue_Head->Out->Len;
   \                     ??Queue_Link_OutSize_0:
   \   000013   8A82         MOV     DPL,R2
   \   000015   8B83         MOV     DPH,R3
   \   000017   A3           INC     DPTR
   \   000018   E0           MOVX    A,@DPTR
   \   000019   F583         MOV     DPH,A
   \   00001B   8882         MOV     DPL,R0
   \   00001D   A3           INC     DPTR
   \   00001E   A3           INC     DPTR
   \   00001F   12....       LCALL   ??Subroutine28_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_51:
   \   000022   02....       LJMP    ?Subroutine1 & 0xFFFF
    219          }
    220          
    221          /****************************************************
    222          	函数名:Queue_Link_GetData
    223          	功能:	以数组的形式获取数据
    224          	作者:	liyao 2016年10月26日
    225          ****************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    226          int8_t Queue_Link_Get(Queue_Head_T* Queue_Head, void* Data){ 
   \                     Queue_Link_Get:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0,R2
   \   000007   8B..         MOV     ?V1,R3
   \   000009   EC           MOV     A,R4
   \   00000A   FA           MOV     R2,A
   \   00000B   ED           MOV     A,R5
   \   00000C   FB           MOV     R3,A
    227          	Queue_Pack_T* CurPack = Queue_Head->Out;
   \   00000D   85..82       MOV     DPL,?V0
   \   000010   85..83       MOV     DPH,?V1
   \   000013   12....       LCALL   ??Subroutine24_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   000016   E8           MOV     A,R0
   \   000017   FE           MOV     R6,A
   \   000018   E9           MOV     A,R1
   \   000019   FF           MOV     R7,A
    228          	if(Queue_Head->Out == NULL)
   \   00001A   E8           MOV     A,R0
   \   00001B   49           ORL     A,R1
   \   00001C   7004         JNZ     ??Queue_Link_Get_0
    229          		return -1;
   \   00001E   79FF         MOV     R1,#-0x1
   \   000020   8050         SJMP    ??Queue_Link_Get_1
    230          	//为回填指针赋值 
    231          	memcpy(Data, CurPack->Data, CurPack->Len);
   \                     ??Queue_Link_Get_0:
   \   000022                ; Setup parameters for call to function memcpy
   \   000022   8E82         MOV     DPL,R6
   \   000024   8F83         MOV     DPH,R7
   \   000026   A3           INC     DPTR
   \   000027   A3           INC     DPTR
   \   000028   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00002B   8E82         MOV     DPL,R6
   \   00002D   8F83         MOV     DPH,R7
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   FC           MOV     R4,A
   \   000031   A3           INC     DPTR
   \   000032   E0           MOVX    A,@DPTR
   \   000033   FD           MOV     R5,A
   \   000034   12....       LCALL   `??memcpy::?relay`   ; Banked call to: memcpy
   \   000037   7402         MOV     A,#0x2
   \   000039   12....       LCALL   ?DEALLOC_XSTACK8
    232          	//移动队列Out指针
    233          	Queue_Head->Out = CurPack->Next;
   \   00003C   8E82         MOV     DPL,R6
   \   00003E   8F83         MOV     DPH,R7
   \   000040   12....       LCALL   ??Subroutine23_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_35:
   \   000043   85..82       MOV     DPL,?V0
   \   000046   85..83       MOV     DPH,?V1
   \   000049   E8           MOV     A,R0
   \   00004A   F0           MOVX    @DPTR,A
   \   00004B   A3           INC     DPTR
   \   00004C   E9           MOV     A,R1
   \   00004D   F0           MOVX    @DPTR,A
    234          	//释放队列区域空间
    235          	FREE(CurPack->Data);
   \   00004E                ; Setup parameters for call to function osal_mem_free
   \   00004E   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_52:
   \   000051   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    236          	FREE(CurPack);
   \   000054                ; Setup parameters for call to function osal_mem_free
   \   000054   EE           MOV     A,R6
   \   000055   FA           MOV     R2,A
   \   000056   EF           MOV     A,R7
   \   000057   FB           MOV     R3,A
   \   000058   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    237          	Queue_Head->Count--;
   \   00005B   85..82       MOV     DPL,?V0
   \   00005E   85..83       MOV     DPH,?V1
   \   000061   A3           INC     DPTR
   \   000062   A3           INC     DPTR
   \   000063   A3           INC     DPTR
   \   000064   A3           INC     DPTR
   \   000065   A3           INC     DPTR
   \   000066   A3           INC     DPTR
   \   000067   E0           MOVX    A,@DPTR
   \   000068   24FF         ADD     A,#-0x1
   \   00006A   F0           MOVX    @DPTR,A
   \   00006B   A3           INC     DPTR
   \   00006C   E0           MOVX    A,@DPTR
   \   00006D   34FF         ADDC    A,#-0x1
   \   00006F   F0           MOVX    @DPTR,A
    238          	return 0;
   \   000070   7900         MOV     R1,#0x0
   \                     ??Queue_Link_Get_1:
   \   000072   7F02         MOV     R7,#0x2
   \   000074   02....       LJMP    ?BANKED_LEAVE_XDATA
    239          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004                REQUIRE ??Subroutine28_0
   \   000004                ; // Fall through to label ??Subroutine28_0
    240          
    241          /****************************************************
    242          	函数名:Queue_Link_Free
    243          	功能:	释放队列
    244          	作者:	liyao 2016年10月26日
    245          ****************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    246          void Queue_Link_Free(Queue_Head_T* Queue){
   \                     Queue_Link_Free:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0,R2
   \   000007   8B..         MOV     ?V1,R3
    247          	Queue_Pack_T* cur = Queue->Out;
   \   000009   8A82         MOV     DPL,R2
   \   00000B   8B83         MOV     DPH,R3
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   FE           MOV     R6,A
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   FF           MOV     R7,A
    248          	Queue_Pack_T* next = NULL;
   \   000012   8020         SJMP    ??Queue_Link_Free_0
    249          	while(cur != NULL){
    250          		next = cur->Next;
   \                     ??Queue_Link_Free_1:
   \   000014   8E82         MOV     DPL,R6
   \   000016   8F83         MOV     DPH,R7
   \   000018   A3           INC     DPTR
   \   000019   A3           INC     DPTR
   \   00001A   A3           INC     DPTR
   \   00001B   A3           INC     DPTR
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   F5..         MOV     ?V2,A
   \   00001F   A3           INC     DPTR
   \   000020   E0           MOVX    A,@DPTR
   \   000021   F5..         MOV     ?V3,A
    251          		FREE(cur->Data);
   \   000023                ; Setup parameters for call to function osal_mem_free
   \   000023   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_53:
   \   000026   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    252          		FREE(cur);
   \   000029                ; Setup parameters for call to function osal_mem_free
   \   000029   EE           MOV     A,R6
   \   00002A   FA           MOV     R2,A
   \   00002B   EF           MOV     A,R7
   \   00002C   FB           MOV     R3,A
   \   00002D   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    253          		cur = next;
   \   000030   AE..         MOV     R6,?V2
   \   000032   AF..         MOV     R7,?V3
    254          	}
   \                     ??Queue_Link_Free_0:
   \   000034   EE           MOV     A,R6
   \   000035   4F           ORL     A,R7
   \   000036   70DC         JNZ     ??Queue_Link_Free_1
    255          	if(Queue != NULL)
   \   000038   E5..         MOV     A,?V0
   \   00003A   45..         ORL     A,?V1
   \   00003C   6007         JZ      ??Queue_Link_Free_2
    256          		FREE(Queue);
   \   00003E                ; Setup parameters for call to function osal_mem_free
   \   00003E   AA..         MOV     R2,?V0
   \   000040   AB..         MOV     R3,?V1
   \   000042   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    257          }
   \                     ??Queue_Link_Free_2:
   \   000045   02....       LJMP    ?Subroutine0 & 0xFFFF

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??Queue_Init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Queue_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??Queue_Put::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Queue_Put

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??Queue_Get::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Queue_Get

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??Queue_Size::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Queue_Size

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??Queue_Empty_Size::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Queue_Empty_Size

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??Queue_Free::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Queue_Free

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??Queue_Link_Init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Queue_Link_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??Queue_Link_Put::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Queue_Link_Put

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??Queue_Link_OutSize::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Queue_Link_OutSize

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??Queue_Link_Get::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Queue_Link_Get

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??Queue_Link_Free::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Queue_Link_Free

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\"Queue_Link_Init\\"\\277\\325\\274\\34`:
   \   000000   22517565     DB "\"Queue_Link_Init\"\277\325\274\344\267\326\305\344\312\247\260\334"
   \            75655F4C
   \            696E6B5F
   \            496E6974
   \            22BFD5BC
   \            E4B7D6C5
   \            E4CAA7B0
   \            DC00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\266\\323\\301\\320\\302\\372\\r\\n">`:
   \   000000   B6D3C1D0     DB "\266\323\301\320\302\372\015\012"
   \            C2FA0D0A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\"Queue_Link_Put\\"\\277\\325\\274\\344`:
   \   000000   22517565     DB "\"Queue_Link_Put\"\277\325\274\344\267\326\305\344\312\247\260\334"
   \            75655F4C
   \            696E6B5F
   \            50757422
   \            BFD5BCE4
   \            B7D6C5E4
   \            CAA7B0DC
   \            00      
    258          
    259          
    260          
    261          
    262          
    263          
    264          
    265          
    266          
    267          
    268          
    269          
    270          
    271          
    272          
    273          
    274          
    275          
    276          
    277          
    278          
    279          
    280          
    281          
    282          
    283          
    284          
    285          
    286          
    287          
    288          
    289          
    290          
    291          
    292          
    293          
    294          
    295          
    296          
    297          
    298          
    299          
    300          
    301          
    302          
    303          
    304          

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      4      0   Queue_Empty_Size
      2      0   Queue_Free
      0     14   Queue_Get
        0     14   -> memcpy
      1     11   Queue_Init
      0     12   Queue_Link_Free
        0     12   -> osal_mem_free
      0     12   Queue_Link_Get
        0     12   -> memcpy
        0     10   -> osal_mem_free
      0     14   Queue_Link_Init
        0     14   -> memset
        0     12   -> osal_mem_alloc
      2      0   Queue_Link_OutSize
      0     20   Queue_Link_Put
        0     18   -> memcpy
        0     16   -> osal_mem_alloc
      0     14   Queue_Put
        0     14   -> memcpy
      4      0   Queue_Size


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      30  ?<Constant "\"Queue_Link_Init\"\277\325\274\34
      29  ?<Constant "\"Queue_Link_Put\"\277\325\274\344
       9  ?<Constant "\266\323\301\320\302\372\r\n">
       2  ??Subroutine21_0
       1  ??Subroutine22_0
       4  ??Subroutine23_0
       4  ??Subroutine24_0
       3  ??Subroutine25_0
       9  ??Subroutine26_0
       6  ??Subroutine27_0
       6  ??Subroutine28_0
       5  ?Subroutine0
       7  ?Subroutine1
      10  ?Subroutine10
       5  ?Subroutine11
      10  ?Subroutine12
       4  ?Subroutine13
      10  ?Subroutine14
       4  ?Subroutine15
       6  ?Subroutine16
      10  ?Subroutine17
       7  ?Subroutine18
      10  ?Subroutine19
      25  ?Subroutine2
       6  ?Subroutine20
       4  ?Subroutine3
      14  ?Subroutine4
      10  ?Subroutine5
       6  ?Subroutine6
       4  ?Subroutine7
       4  ?Subroutine8
       8  ?Subroutine9
      38  Queue_Empty_Size
       6  Queue_Empty_Size::?relay
       9  Queue_Free
       6  Queue_Free::?relay
     132  Queue_Get
       6  Queue_Get::?relay
     126  Queue_Init
       6  Queue_Init::?relay
      72  Queue_Link_Free
       6  Queue_Link_Free::?relay
     119  Queue_Link_Get
       6  Queue_Link_Get::?relay
      84  Queue_Link_Init
       6  Queue_Link_Init::?relay
      37  Queue_Link_OutSize
       6  Queue_Link_OutSize::?relay
     284  Queue_Link_Put
       6  Queue_Link_Put::?relay
     133  Queue_Put
       6  Queue_Put::?relay
     131  Queue_Size
       6  Queue_Size::?relay
     140  queue_list
       1  queue_locd

 
 1 369 bytes in segment BANKED_CODE
    66 bytes in segment BANK_RELAYS
    68 bytes in segment XDATA_ROM_C
   141 bytes in segment XDATA_Z
 
 1 435 bytes of CODE  memory
    68 bytes of CONST memory
   141 bytes of XDATA memory

Errors: none
Warnings: 2
