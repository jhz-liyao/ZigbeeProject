###############################################################################
#
# IAR C/C++ Compiler V9.30.1.3056 for 8051                24/Oct/2016  15:11:55
# Copyright 2004-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        E:\×ÊÔ´(G£º)\#¸öÈËÏîÄ¿\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Components\mac\low_level\srf04\mac_autopend.c
#    Command line       =  
#        -f "E:\×ÊÔ´(G£º)\#¸öÈËÏîÄ¿\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.7ÒûË®»ú¿ØÖÆÔö¼Óuart\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f
#        "E:\×ÊÔ´(G£º)\#¸öÈËÏîÄ¿\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.7ÒûË®»ú¿ØÖÆÔö¼Óuart\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=50 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
#        -DREJOIN_POLL_RATE=440 "E:\×ÊÔ´(G£º)\#¸öÈËÏîÄ¿\ZigbeeProject\Z-Stack
#        Mesh 1.0.0\Components\mac\low_level\srf04\mac_autopend.c" -D LOG_OUT
#        -D UART1_PROTOCOL_RESOLVER=1 -D xISQC -D NWK_AUTO_POLL -D ZTOOL_P1 -D
#        ISR_KEYINTERRUPT -D xMT_TASK -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D
#        xLCD_SUPPORTED=DEBUG -D xPOWER_SAVING -lC
#        "E:\×ÊÔ´(G£º)\#¸öÈËÏîÄ¿\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.7ÒûË®»ú¿ØÖÆÔö¼Óuart\CC2530DB\WaterMachine\List"
#        -lA "E:\×ÊÔ´(G£º)\#¸öÈËÏîÄ¿\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.7ÒûË®»ú¿ØÖÆÔö¼Óuart\CC2530DB\WaterMachine\List"
#        --diag_suppress Pe001,Pa010 -o
#        "E:\×ÊÔ´(G£º)\#¸öÈËÏîÄ¿\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.7ÒûË®»ú¿ØÖÆÔö¼Óuart\CC2530DB\WaterMachine\Obj"
#        -e --no_code_motion --debug --core=plain --dptr=16,1
#        --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 8 -I "E:\×ÊÔ´(G£º)\#¸öÈËÏîÄ¿\ZigbeeProject\Z-Stack
#        Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.7ÒûË®»ú¿ØÖÆÔö¼Óuart\CC2530DB\"
#        -I "E:\×ÊÔ´(G£º)\#¸öÈËÏîÄ¿\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.7ÒûË®»ú¿ØÖÆÔö¼Óuart\CC2530DB\..\Source\"
#        -I "E:\×ÊÔ´(G£º)\#¸öÈËÏîÄ¿\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.7ÒûË®»ú¿ØÖÆÔö¼Óuart\CC2530DB\..\Frame\"
#        -I "E:\×ÊÔ´(G£º)\#¸öÈËÏîÄ¿\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.7ÒûË®»ú¿ØÖÆÔö¼Óuart\CC2530DB\..\Module\WaterMachine\"
#        -I "E:\×ÊÔ´(G£º)\#¸öÈËÏîÄ¿\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.7ÒûË®»ú¿ØÖÆÔö¼Óuart\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "E:\×ÊÔ´(G£º)\#¸öÈËÏîÄ¿\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.7ÒûË®»ú¿ØÖÆÔö¼Óuart\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "E:\×ÊÔ´(G£º)\#¸öÈËÏîÄ¿\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.7ÒûË®»ú¿ØÖÆÔö¼Óuart\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "E:\×ÊÔ´(G£º)\#¸öÈËÏîÄ¿\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.7ÒûË®»ú¿ØÖÆÔö¼Óuart\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "E:\×ÊÔ´(G£º)\#¸öÈËÏîÄ¿\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.7ÒûË®»ú¿ØÖÆÔö¼Óuart\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "E:\×ÊÔ´(G£º)\#¸öÈËÏîÄ¿\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.7ÒûË®»ú¿ØÖÆÔö¼Óuart\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "E:\×ÊÔ´(G£º)\#¸öÈËÏîÄ¿\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.7ÒûË®»ú¿ØÖÆÔö¼Óuart\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "E:\×ÊÔ´(G£º)\#¸öÈËÏîÄ¿\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.7ÒûË®»ú¿ØÖÆÔö¼Óuart\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "E:\×ÊÔ´(G£º)\#¸öÈËÏîÄ¿\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.7ÒûË®»ú¿ØÖÆÔö¼Óuart\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "E:\×ÊÔ´(G£º)\#¸öÈËÏîÄ¿\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.7ÒûË®»ú¿ØÖÆÔö¼Óuart\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "E:\×ÊÔ´(G£º)\#¸öÈËÏîÄ¿\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.7ÒûË®»ú¿ØÖÆÔö¼Óuart\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "E:\×ÊÔ´(G£º)\#¸öÈËÏîÄ¿\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.7ÒûË®»ú¿ØÖÆÔö¼Óuart\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "E:\×ÊÔ´(G£º)\#¸öÈËÏîÄ¿\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.7ÒûË®»ú¿ØÖÆÔö¼Óuart\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "E:\×ÊÔ´(G£º)\#¸öÈËÏîÄ¿\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.7ÒûË®»ú¿ØÖÆÔö¼Óuart\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "E:\×ÊÔ´(G£º)\#¸öÈËÏîÄ¿\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.7ÒûË®»ú¿ØÖÆÔö¼Óuart\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "E:\×ÊÔ´(G£º)\#¸öÈËÏîÄ¿\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.7ÒûË®»ú¿ØÖÆÔö¼Óuart\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "E:\×ÊÔ´(G£º)\#¸öÈËÏîÄ¿\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.7ÒûË®»ú¿ØÖÆÔö¼Óuart\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "E:\×ÊÔ´(G£º)\#¸öÈËÏîÄ¿\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.7ÒûË®»ú¿ØÖÆÔö¼Óuart\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "E:\×ÊÔ´(G£º)\#¸öÈËÏîÄ¿\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.7ÒûË®»ú¿ØÖÆÔö¼Óuart\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -Ohz
#    List file          =  
#        E:\×ÊÔ´(G£º)\#¸öÈËÏîÄ¿\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.7ÒûË®»ú¿ØÖÆÔö¼Óuart\CC2530DB\WaterMachine\List\mac_autopend.lst
#    Object file        =  
#        E:\×ÊÔ´(G£º)\#¸öÈËÏîÄ¿\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.7ÒûË®»ú¿ØÖÆÔö¼Óuart\CC2530DB\WaterMachine\Obj\mac_autopend.r51
#
###############################################################################

E:\×ÊÔ´(G£º)\#¸öÈËÏîÄ¿\ZigbeeProject\Z-Stack Mesh 1.0.0\Components\mac\low_level\srf04\mac_autopend.c
      1          /**************************************************************************************************
      2            Filename:       mac_autopend.c
      3            Revised:        $Date: 2014-05-29 13:33:32 -0700 (Thu, 29 May 2014) $
      4            Revision:       $Revision: 38710 $
      5          
      6            Description:    This file implements the TIMAC Autopend feature.
      7          
      8          
      9            Copyright 2006-2014 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /* low-level */
     41          #include "mac_api.h"
     42          #include "mac_radio_defs.h"
     43          
     44          /* osal */
     45          #include "OSAL.h"
     46          #include "saddr.h"
     47          #include "ZComDef.h"
     48          
     49          #include "mac_autopend.h"
     50          
     51          /* ------------------------------------------------------------------------------------------------
     52           *                                           Defines
     53           * ------------------------------------------------------------------------------------------------
     54           */
     55          #define MAC_SRCMATCH_INVALID_INDEX           0xFF
     56          
     57          #define MAC_SRCMATCH_SHORT_ENTRY_SIZE        4
     58          #define MAC_SRCMATCH_EXT_ENTRY_SIZE          Z_EXTADDR_LEN
     59          
     60          #define MAC_SRCMATCH_SHORT_MAX_NUM_ENTRIES   24
     61          #define MAC_SRCMATCH_EXT_MAX_NUM_ENTRIES     12
     62          
     63          #define MAC_SRCMATCH_ENABLE_BITMAP_LEN       3
     64          
     65          #define EXT_ADDR_INDEX_SIZE                  2
     66          #define SHORT_ADDR_INDEX_SIZE                1
     67                    
     68          /* ------------------------------------------------------------------------------------------------
     69           *                                      Global Variables
     70           * ------------------------------------------------------------------------------------------------
     71           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     72          bool macSrcMatchIsEnabled = FALSE; 
   \                     macSrcMatchIsEnabled:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     73          
     74          /* ------------------------------------------------------------------------------------------------
     75           *                                         Local Variables
     76           * ------------------------------------------------------------------------------------------------
     77           */
     78          
     79          /* 
     80           The following local Varables are only set in MAC_SrcMatchEnable()  
     81           They are read only to the rest of the module.
     82           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     83          bool macSrcMatchIsAckAllPending = FALSE;
   \                     macSrcMatchIsAckAllPending:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     84          
     85          /* ------------------------------------------------------------------------------------------------
     86           *                                         Local Functions
     87           * ------------------------------------------------------------------------------------------------
     88           */
     89          static uint8 macSrcMatchFindEmptyEntry( uint8 macSrcMatchAddrMode );
     90          static uint8 macSrcMatchCheckSrcAddr ( sAddr_t *addr, uint16 panID  );
     91          static void macSrcMatchSetPendEnBit( uint8 index, uint8 macSrcMatchAddrMode );
     92          static void macSrcMatchSetEnableBit( uint8 index, bool option, uint8 macSrcMatchAddrMode );
     93          static bool macSrcMatchCheckEnableBit( uint8 index, uint24 enable );
     94          static uint24 macSrcMatchGetShortAddrPendEnBit( void );
     95          static uint24 macSrcMatchGetExtAddrPendEnBit( void );
     96          static uint24 macSrcMatchGetShortAddrEnableBit( void );
     97          static uint24 macSrcMatchGetExtAddrEnableBit( void );
     98          
     99          /*********************************************************************
    100           * @fn          MAC_SrcMatchEnable
    101           *
    102           * @brief      Enabled AUTOPEND and source address matching. 
    103           *             This function shall be not be called from 
    104           *             ISR. It is not thread safe.
    105           *
    106           * @param     none 
    107           *
    108           * @return     none
    109           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    110          void MAC_SrcMatchEnable (void)
   \                     MAC_SrcMatchEnable:
    111          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    112            /* Turn on Frame Filter (TIMAC enables frame filter by default), TBD */
    113            MAC_RADIO_TURN_ON_RX_FRAME_FILTERING();
   \   000004   906180       MOV     DPTR,#0x6180
   \   000007   E4           CLR     A
   \   000008   F0           MOVX    @DPTR,A
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   4409         ORL     A,#0x9
   \   00000C   F0           MOVX    @DPTR,A
    114            
    115            /* Turn on Auto ACK (TIMAC turn on Auto ACK by default), TBD */
    116            MAC_RADIO_TURN_ON_AUTO_ACK();
   \   00000D   906189       MOV     DPTR,#0x6189
   \   000010   E0           MOVX    A,@DPTR
   \   000011   D2E5         SETB    0xE0 /* A   */.5
   \   000013   F0           MOVX    @DPTR,A
    117            
    118            /* Turn on Autopend: set SRCMATCH.AUTOPEND and SRCMATCH.SRC_MATCH_EN */
    119            MAC_RADIO_TURN_ON_SRC_MATCH();
   \   000014   906182       MOV     DPTR,#0x6182
   \   000017   E0           MOVX    A,@DPTR
   \   000018   D2E0         SETB    0xE0 /* A   */.0
   \   00001A   F0           MOVX    @DPTR,A
    120           
    121            /* Set SRCMATCH.AUTOPEND */
    122            MAC_RADIO_TURN_ON_AUTOPEND();
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   D2E1         SETB    0xE0 /* A   */.1
   \   00001E   F0           MOVX    @DPTR,A
    123            
    124            /* AUTOPEND function requires that the received 
    125             * frame is a DATA REQUEST MAC command frame
    126             */
    127            MAC_RADIO_TURN_ON_AUTOPEND_DATAREQ_ONLY();
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   D2E2         SETB    0xE0 /* A   */.2
   \   000022   F0           MOVX    @DPTR,A
    128            
    129            /* Configure all the globals */
    130            macSrcMatchIsEnabled = TRUE;           
   \   000023   90....       MOV     DPTR,#macSrcMatchIsEnabled
   \   000026   7401         MOV     A,#0x1
   \   000028   F0           MOVX    @DPTR,A
    131          }
   \   000029   02....       LJMP    ??Subroutine9_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine9_0:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    132          
    133          /*********************************************************************
    134           * @fn          MAC_SrcMatchAddEntry
    135           *
    136           * @brief       Add a short or extended address to source address table. This 
    137           *              function shall be not be called from ISR. It is not thread safe.
    138           *
    139           * @param       addr  - a pointer to sAddr_t which contains addrMode 
    140           *                      and a union of a short 16-bit MAC address or an extended 
    141           *                      64-bit MAC address to be added to the source address 
    142          *                       table. 
    143           * @param       panID - the device PAN ID. It is only used when the addr is 
    144           *                      using short address 
    145          
    146           * @return      MAC_SUCCESS or MAC_NO_RESOURCES (source address table full) 
    147           *              or MAC_DUPLICATED_ENTRY (the entry added is duplicated),
    148           *              or MAC_INVALID_PARAMETER if the input parameters are invalid.
    149           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    150          uint8 MAC_SrcMatchAddEntry ( sAddr_t *addr, uint16 panID )
   \                     MAC_SrcMatchAddEntry:
    151          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 21
   \   000005   74EB         MOV     A,#-0x15
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   7401         MOV     A,#0x1
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   EA           MOV     A,R2
   \   000010   F0           MOVX    @DPTR,A
   \   000011   A3           INC     DPTR
   \   000012   EB           MOV     A,R3
   \   000013   F0           MOVX    @DPTR,A
   \   000014   EC           MOV     A,R4
   \   000015   FE           MOV     R6,A
   \   000016   ED           MOV     A,R5
   \   000017   FF           MOV     R7,A
    152            uint8 index;
    153            uint8 entry[MAC_SRCMATCH_SHORT_ENTRY_SIZE];
    154            
    155            /* Check if the input parameters are valid */
    156            if ( addr == NULL || (addr->addrMode !=  SADDR_MODE_SHORT && addr->addrMode !=  SADDR_MODE_EXT))
   \   000018   7401         MOV     A,#0x1
   \   00001A   12....       LCALL   ?XSTACK_DISP0_8
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   F8           MOV     R0,A
   \   00001F   A3           INC     DPTR
   \   000020   E0           MOVX    A,@DPTR
   \   000021   F9           MOV     R1,A
   \   000022   E8           MOV     A,R0
   \   000023   49           ORL     A,R1
   \   000024   6014         JZ      ??MAC_SrcMatchAddEntry_0
   \   000026   7401         MOV     A,#0x1
   \   000028   12....       LCALL   ?XSTACK_DISP0_8
   \   00002B   12....       LCALL   ??Subroutine8_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   00002E   600F         JZ      ??MAC_SrcMatchAddEntry_1
   \   000030   7401         MOV     A,#0x1
   \   000032   12....       LCALL   ?XSTACK_DISP0_8
   \   000035   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   000038   6005         JZ      ??MAC_SrcMatchAddEntry_1
    157            {
    158              return MAC_INVALID_PARAMETER;  
   \                     ??MAC_SrcMatchAddEntry_0:
   \   00003A   79E8         MOV     R1,#-0x18
   \   00003C   02....       LJMP    ??MAC_SrcMatchAddEntry_2 & 0xFFFF
    159            }
    160            
    161            /* Check if the entry already exists. Do not add duplicated entry */
    162            if ( macSrcMatchCheckSrcAddr( addr, panID ) != MAC_SRCMATCH_INVALID_INDEX )
   \                     ??MAC_SrcMatchAddEntry_1:
   \   00003F                ; Setup parameters for call to function macSrcMatchCheckSrcAddr
   \   00003F   7401         MOV     A,#0x1
   \   000041   12....       LCALL   ?XSTACK_DISP0_8
   \   000044   E0           MOVX    A,@DPTR
   \   000045   FA           MOV     R2,A
   \   000046   12....       LCALL   `??macSrcMatchCheckSrcAddr::?relay`; Banked call to: macSrcMatchCheckSrcAddr
   \   000049   E9           MOV     A,R1
   \   00004A   F4           CPL     A
   \   00004B   6005         JZ      ??MAC_SrcMatchAddEntry_3
    163            {
    164              return MAC_DUPLICATED_ENTRY; 
   \   00004D   791E         MOV     R1,#0x1e
   \   00004F   02....       LJMP    ??MAC_SrcMatchAddEntry_2 & 0xFFFF
    165            }
    166            
    167            /* If not duplicated, write to the radio RAM and enable the control bit */
    168            
    169            /* Find the first empty entry */
    170            index = macSrcMatchFindEmptyEntry(addr->addrMode);
   \                     ??MAC_SrcMatchAddEntry_3:
   \   000052   7401         MOV     A,#0x1
   \   000054   12....       LCALL   ?XSTACK_DISP0_8
   \   000057   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   00005A   85..82       MOV     DPL,?XSP + 0
   \   00005D   85..83       MOV     DPH,?XSP + 1
   \   000060   F0           MOVX    @DPTR,A
   \   000061                ; Setup parameters for call to function macSrcMatchGetShortAddrEnableBit
   \   000061   12....       LCALL   `??macSrcMatchGetShortAddrEnableBit::?relay`; Banked call to: macSrcMatchGetShortAddrEnableBit
   \   000064   8A..         MOV     ?V4,R2
   \   000066   8B..         MOV     ?V5,R3
   \   000068   8C..         MOV     ?V6,R4
   \   00006A   8D..         MOV     ?V7,R5
   \   00006C                ; Setup parameters for call to function macSrcMatchGetExtAddrEnableBit
   \   00006C   12....       LCALL   `??macSrcMatchGetExtAddrEnableBit::?relay`; Banked call to: macSrcMatchGetExtAddrEnableBit
   \   00006F   EA           MOV     A,R2
   \   000070   F8           MOV     R0,A
   \   000071   EB           MOV     A,R3
   \   000072   F9           MOV     R1,A
   \   000073   EC           MOV     A,R4
   \   000074   FA           MOV     R2,A
   \   000075   ED           MOV     A,R5
   \   000076   FB           MOV     R3,A
   \   000077   740D         MOV     A,#0xd
   \   000079   12....       LCALL   ?XSTACK_DISP0_8
   \   00007C   12....       LCALL   ?XSTORE_R0123
   \   00007F   85....       MOV     ?V0,?V4
   \   000082   85....       MOV     ?V1,?V5
   \   000085   85....       MOV     ?V2,?V6
   \   000088   85....       MOV     ?V3,?V7
   \   00008B   740D         MOV     A,#0xd
   \   00008D   12....       LCALL   ?XSTACK_DISP0_8
   \   000090   78..         MOV     R0,#?V0
   \   000092   12....       LCALL   ?L_IOR_X
   \   000095   7411         MOV     A,#0x11
   \   000097   12....       LCALL   ?XSTACK_DISP0_8
   \   00009A   78..         MOV     R0,#?V0
   \   00009C   12....       LCALL   ?L_MOV_TO_X
   \   00009F   85..82       MOV     DPL,?XSP + 0
   \   0000A2   85..83       MOV     DPH,?XSP + 1
   \   0000A5   E0           MOVX    A,@DPTR
   \   0000A6   6402         XRL     A,#0x2
   \   0000A8   7042         JNZ     ??MAC_SrcMatchAddEntry_4
   \   0000AA   E4           CLR     A
   \   0000AB   F0           MOVX    @DPTR,A
   \                     ??MAC_SrcMatchAddEntry_5:
   \   0000AC   740D         MOV     A,#0xd
   \   0000AE   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B1   78..         MOV     R0,#?V0
   \   0000B3   12....       LCALL   ?L_MOV_X
   \   0000B6   85..82       MOV     DPL,?XSP + 0
   \   0000B9   85..83       MOV     DPH,?XSP + 1
   \   0000BC   E0           MOVX    A,@DPTR
   \   0000BD   54FE         ANL     A,#0xfe
   \   0000BF   78..         MOV     R0,#?V0
   \   0000C1   12....       LCALL   ?UL_SHR
   \   0000C4   E5..         MOV     A,?V0
   \   0000C6   A2E0         MOV     C,0xE0 /* A   */.0
   \   0000C8   4018         JC      ??MAC_SrcMatchAddEntry_6
   \   0000CA   85....       MOV     ?V0,?V4
   \   0000CD   85....       MOV     ?V1,?V5
   \   0000D0   85....       MOV     ?V2,?V6
   \   0000D3   85....       MOV     ?V3,?V7
   \   0000D6   E0           MOVX    A,@DPTR
   \   0000D7   78..         MOV     R0,#?V0
   \   0000D9   12....       LCALL   ?UL_SHR
   \   0000DC   E5..         MOV     A,?V0
   \   0000DE   A2E0         MOV     C,0xE0 /* A   */.0
   \   0000E0   5050         JNC     ??MAC_SrcMatchAddEntry_7
   \                     ??MAC_SrcMatchAddEntry_6:
   \   0000E2   E0           MOVX    A,@DPTR
   \   0000E3   04           INC     A
   \   0000E4   F0           MOVX    @DPTR,A
   \   0000E5   C3           CLR     C
   \   0000E6   9418         SUBB    A,#0x18
   \   0000E8   5048         JNC     ??MAC_SrcMatchAddEntry_7
   \   0000EA   80C0         SJMP    ??MAC_SrcMatchAddEntry_5
   \                     ??MAC_SrcMatchAddEntry_4:
   \   0000EC   E4           CLR     A
   \   0000ED   F0           MOVX    @DPTR,A
   \                     ??MAC_SrcMatchAddEntry_8:
   \   0000EE   7411         MOV     A,#0x11
   \   0000F0   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F3   C082         PUSH    DPL
   \   0000F5   C083         PUSH    DPH
   \   0000F7   75..03       MOV     ?V0,#0x3
   \   0000FA   75..00       MOV     ?V1,#0x0
   \   0000FD   75..00       MOV     ?V2,#0x0
   \   000100   75..00       MOV     ?V3,#0x0
   \   000103   85..82       MOV     DPL,?XSP + 0
   \   000106   85..83       MOV     DPH,?XSP + 1
   \   000109   E0           MOVX    A,@DPTR
   \   00010A   C3           CLR     C
   \   00010B   33           RLC     A
   \   00010C   78..         MOV     R0,#?V0
   \   00010E   12....       LCALL   ?L_SHL
   \   000111   D083         POP     DPH
   \   000113   D082         POP     DPL
   \   000115   78..         MOV     R0,#?V0
   \   000117   12....       LCALL   ?L_AND_X
   \   00011A   E5..         MOV     A,?V0
   \   00011C   45..         ORL     A,?V1
   \   00011E   45..         ORL     A,?V2
   \   000120   45..         ORL     A,?V3
   \   000122   600E         JZ      ??MAC_SrcMatchAddEntry_7
   \   000124   85..82       MOV     DPL,?XSP + 0
   \   000127   85..83       MOV     DPH,?XSP + 1
   \   00012A   E0           MOVX    A,@DPTR
   \   00012B   04           INC     A
   \   00012C   F0           MOVX    @DPTR,A
   \   00012D   C3           CLR     C
   \   00012E   940C         SUBB    A,#0xc
   \   000130   40BC         JC      ??MAC_SrcMatchAddEntry_8
    171            
    172          
    173            if ( (index == MAC_SRCMATCH_SHORT_MAX_NUM_ENTRIES && addr->addrMode == SADDR_MODE_SHORT) || 
    174                 (index == MAC_SRCMATCH_EXT_MAX_NUM_ENTRIES && addr->addrMode == SADDR_MODE_EXT) )
   \                     ??MAC_SrcMatchAddEntry_7:
   \   000132   85..82       MOV     DPL,?XSP + 0
   \   000135   85..83       MOV     DPH,?XSP + 1
   \   000138   E0           MOVX    A,@DPTR
   \   000139   6418         XRL     A,#0x18
   \   00013B   7060         JNZ     ??MAC_SrcMatchAddEntry_9
   \   00013D   7401         MOV     A,#0x1
   \   00013F   12....       LCALL   ?XSTACK_DISP0_8
   \   000142   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   000145   6065         JZ      ??MAC_SrcMatchAddEntry_10
    175            {
    176              return MAC_NO_RESOURCES;   /* Table is full */
    177            }
    178            
    179            if ( addr->addrMode == SADDR_MODE_SHORT )
   \                     ??MAC_SrcMatchAddEntry_11:
   \   000147   7401         MOV     A,#0x1
   \   000149   12....       LCALL   ?XSTACK_DISP0_8
   \   00014C   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   00014F   7060         JNZ     ??MAC_SrcMatchAddEntry_12
    180            {
    181              /* Write the PanID and short address */
    182              entry[0] = LO_UINT16( panID );  /* Little Endian for the radio RAM */
   \   000151   7409         MOV     A,#0x9
   \   000153   12....       LCALL   ?XSTACK_DISP0_8
   \   000156   EE           MOV     A,R6
   \   000157   F0           MOVX    @DPTR,A
    183              entry[1] = HI_UINT16( panID );
   \   000158   740A         MOV     A,#0xa
   \   00015A   12....       LCALL   ?XSTACK_DISP0_8
   \   00015D   EF           MOV     A,R7
   \   00015E   F0           MOVX    @DPTR,A
    184              entry[2] = LO_UINT16( addr->addr.shortAddr );
   \   00015F   7401         MOV     A,#0x1
   \   000161   12....       LCALL   ?XSTACK_DISP0_8
   \   000164   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   000167   E0           MOVX    A,@DPTR
   \   000168   C0E0         PUSH    A
   \   00016A   740B         MOV     A,#0xb
   \   00016C   12....       LCALL   ?XSTACK_DISP0_8
   \   00016F   D0E0         POP     A
   \   000171   F0           MOVX    @DPTR,A
    185              entry[3] = HI_UINT16( addr->addr.shortAddr );
   \   000172   7401         MOV     A,#0x1
   \   000174   12....       LCALL   ?XSTACK_DISP0_8
   \   000177   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   00017A   A3           INC     DPTR
   \   00017B   E0           MOVX    A,@DPTR
   \   00017C   C0E0         PUSH    A
   \   00017E   740C         MOV     A,#0xc
   \   000180   12....       LCALL   ?XSTACK_DISP0_8
   \   000183   D0E0         POP     A
   \   000185   F0           MOVX    @DPTR,A
    186              MAC_RADIO_SRC_MATCH_TABLE_WRITE( ( index * MAC_SRCMATCH_SHORT_ENTRY_SIZE ), 
    187                             entry, MAC_SRCMATCH_SHORT_ENTRY_SIZE );
   \   000186                ; Setup parameters for call to function macMemWriteRam
   \   000186   7904         MOV     R1,#0x4
   \   000188   7409         MOV     A,#0x9
   \   00018A   12....       LCALL   ?XSTACK_DISP102_8
   \   00018D   85..82       MOV     DPL,?XSP + 0
   \   000190   85..83       MOV     DPH,?XSP + 1
   \   000193   E0           MOVX    A,@DPTR
   \   000194   F5..         MOV     ?V0,A
   \   000196   75..00       MOV     ?V1,#0x0
   \   000199   7402         MOV     A,#0x2
   \   00019B   802E         SJMP    ??MAC_SrcMatchAddEntry_13
    188            }
   \                     ??MAC_SrcMatchAddEntry_9:
   \   00019D   E0           MOVX    A,@DPTR
   \   00019E   640C         XRL     A,#0xc
   \   0001A0   70A5         JNZ     ??MAC_SrcMatchAddEntry_11
   \   0001A2   7401         MOV     A,#0x1
   \   0001A4   12....       LCALL   ?XSTACK_DISP0_8
   \   0001A7   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   0001AA   709B         JNZ     ??MAC_SrcMatchAddEntry_11
   \                     ??MAC_SrcMatchAddEntry_10:
   \   0001AC   791A         MOV     R1,#0x1a
   \   0001AE   02....       LJMP    ??MAC_SrcMatchAddEntry_2 & 0xFFFF
    189            else
    190            {
    191              /* Write the extended address */
    192              MAC_RADIO_SRC_MATCH_TABLE_WRITE( ( index * MAC_SRCMATCH_EXT_ENTRY_SIZE ), 
    193                             addr->addr.extAddr, MAC_SRCMATCH_EXT_ENTRY_SIZE ); 
   \                     ??MAC_SrcMatchAddEntry_12:
   \   0001B1                ; Setup parameters for call to function macMemWriteRam
   \   0001B1   7908         MOV     R1,#0x8
   \   0001B3   7401         MOV     A,#0x1
   \   0001B5   12....       LCALL   ?XSTACK_DISP0_8
   \   0001B8   E0           MOVX    A,@DPTR
   \   0001B9   FC           MOV     R4,A
   \   0001BA   A3           INC     DPTR
   \   0001BB   E0           MOVX    A,@DPTR
   \   0001BC   FD           MOV     R5,A
   \   0001BD   85..82       MOV     DPL,?XSP + 0
   \   0001C0   85..83       MOV     DPH,?XSP + 1
   \   0001C3   E0           MOVX    A,@DPTR
   \   0001C4   F5..         MOV     ?V0,A
   \   0001C6   75..00       MOV     ?V1,#0x0
   \   0001C9   7403         MOV     A,#0x3
   \                     ??MAC_SrcMatchAddEntry_13:
   \   0001CB   78..         MOV     R0,#?V0
   \   0001CD   12....       LCALL   ?S_SHL
   \   0001D0   25..         ADD     A,?V0
   \   0001D2   FA           MOV     R2,A
   \   0001D3   7461         MOV     A,#0x61
   \   0001D5   35..         ADDC    A,?V1
   \   0001D7   FB           MOV     R3,A
   \   0001D8   12....       LCALL   `??macMemWriteRam::?relay`; Banked call to: macMemWriteRam
    194            }
    195            
    196            /* Set the Autopend enable bits */
    197            macSrcMatchSetPendEnBit( index, addr->addrMode );
   \   0001DB   7401         MOV     A,#0x1
   \   0001DD   12....       LCALL   ?XSTACK_DISP0_8
   \   0001E0   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   0001E3   7903         MOV     R1,#0x3
   \   0001E5   7058         JNZ     ??MAC_SrcMatchAddEntry_14
   \   0001E7                ; Setup parameters for call to function macMemReadRam
   \   0001E7   E9           MOV     A,R1
   \   0001E8   12....       LCALL   ?XSTACK_DISP102_8
   \   0001EB   7A67         MOV     R2,#0x67
   \   0001ED   7B61         MOV     R3,#0x61
   \   0001EF   12....       LCALL   `??macMemReadRam::?relay`; Banked call to: macMemReadRam
   \   0001F2                ; Setup parameters for call to function osal_build_uint32
   \   0001F2   7903         MOV     R1,#0x3
   \   0001F4   E9           MOV     A,R1
   \   0001F5   12....       LCALL   ?XSTACK_DISP101_8
   \   0001F8   12....       LCALL   `??osal_build_uint32::?relay`; Banked call to: osal_build_uint32
   \   0001FB   8A..         MOV     ?V0,R2
   \   0001FD   8B..         MOV     ?V1,R3
   \   0001FF   8C..         MOV     ?V2,R4
   \   000201   8D..         MOV     ?V3,R5
   \   000203                ; Setup parameters for call to function osal_buffer_uint24
   \   000203   75..01       MOV     ?V4,#0x1
   \   000206   75..00       MOV     ?V5,#0x0
   \   000209   75..00       MOV     ?V6,#0x0
   \   00020C   75..00       MOV     ?V7,#0x0
   \   00020F   85..82       MOV     DPL,?XSP + 0
   \   000212   85..83       MOV     DPH,?XSP + 1
   \   000215   E0           MOVX    A,@DPTR
   \   000216   78..         MOV     R0,#?V4
   \   000218   12....       LCALL   ?L_SHL
   \   00021B   78..         MOV     R0,#?V0
   \   00021D   79..         MOV     R1,#?V4
   \   00021F   12....       LCALL   ?L_IOR
   \   000222   78..         MOV     R0,#?V0
   \   000224   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   000227   740A         MOV     A,#0xa
   \   000229   12....       LCALL   ?XSTACK_DISP101_8
   \   00022C   12....       LCALL   `??osal_buffer_uint24::?relay`; Banked call to: osal_buffer_uint24
   \   00022F   7404         MOV     A,#0x4
   \   000231   12....       LCALL   ?DEALLOC_XSTACK8
   \   000234                ; Setup parameters for call to function macMemWriteRam
   \   000234   7903         MOV     R1,#0x3
   \   000236   7406         MOV     A,#0x6
   \   000238   12....       LCALL   ?XSTACK_DISP102_8
   \   00023B   7A67         MOV     R2,#0x67
   \   00023D   8074         SJMP    ??MAC_SrcMatchAddEntry_15
   \                     ??MAC_SrcMatchAddEntry_14:
   \   00023F                ; Setup parameters for call to function macMemReadRam
   \   00023F   E9           MOV     A,R1
   \   000240   12....       LCALL   ?XSTACK_DISP102_8
   \   000243   7A64         MOV     R2,#0x64
   \   000245   7B61         MOV     R3,#0x61
   \   000247   12....       LCALL   `??macMemReadRam::?relay`; Banked call to: macMemReadRam
   \   00024A                ; Setup parameters for call to function osal_build_uint32
   \   00024A   7903         MOV     R1,#0x3
   \   00024C   E9           MOV     A,R1
   \   00024D   12....       LCALL   ?XSTACK_DISP101_8
   \   000250   12....       LCALL   `??osal_build_uint32::?relay`; Banked call to: osal_build_uint32
   \   000253   8A..         MOV     ?V0,R2
   \   000255   8B..         MOV     ?V1,R3
   \   000257   8C..         MOV     ?V2,R4
   \   000259   8D..         MOV     ?V3,R5
   \   00025B   85..82       MOV     DPL,?XSP + 0
   \   00025E   85..83       MOV     DPH,?XSP + 1
   \   000261   E0           MOVX    A,@DPTR
   \   000262   C3           CLR     C
   \   000263   33           RLC     A
   \   000264   FA           MOV     R2,A
   \   000265                ; Setup parameters for call to function osal_buffer_uint24
   \   000265   75..01       MOV     ?V4,#0x1
   \   000268   75..00       MOV     ?V5,#0x0
   \   00026B   75..00       MOV     ?V6,#0x0
   \   00026E   75..00       MOV     ?V7,#0x0
   \   000271   78..         MOV     R0,#?V4
   \   000273   12....       LCALL   ?L_SHL
   \   000276   78..         MOV     R0,#?V0
   \   000278   79..         MOV     R1,#?V4
   \   00027A   12....       LCALL   ?L_IOR
   \   00027D   75..01       MOV     ?V4,#0x1
   \   000280   75..00       MOV     ?V5,#0x0
   \   000283   75..00       MOV     ?V6,#0x0
   \   000286   75..00       MOV     ?V7,#0x0
   \   000289   7401         MOV     A,#0x1
   \   00028B   2A           ADD     A,R2
   \   00028C   78..         MOV     R0,#?V4
   \   00028E   12....       LCALL   ?L_SHL
   \   000291   78..         MOV     R0,#?V0
   \   000293   79..         MOV     R1,#?V4
   \   000295   12....       LCALL   ?L_IOR
   \   000298   78..         MOV     R0,#?V0
   \   00029A   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   00029D   740A         MOV     A,#0xa
   \   00029F   12....       LCALL   ?XSTACK_DISP101_8
   \   0002A2   12....       LCALL   `??osal_buffer_uint24::?relay`; Banked call to: osal_buffer_uint24
   \   0002A5   7404         MOV     A,#0x4
   \   0002A7   12....       LCALL   ?DEALLOC_XSTACK8
   \   0002AA                ; Setup parameters for call to function macMemWriteRam
   \   0002AA   7903         MOV     R1,#0x3
   \   0002AC   7406         MOV     A,#0x6
   \   0002AE   12....       LCALL   ?XSTACK_DISP102_8
   \   0002B1   7A64         MOV     R2,#0x64
   \                     ??MAC_SrcMatchAddEntry_15:
   \   0002B3   7B61         MOV     R3,#0x61
   \   0002B5   12....       LCALL   `??macMemWriteRam::?relay`; Banked call to: macMemWriteRam
    198            
    199            /* Set the Src Match enable bits */
    200            macSrcMatchSetEnableBit( index, TRUE, addr->addrMode);
   \   0002B8                ; Setup parameters for call to function macSrcMatchSetEnableBit
   \   0002B8   7401         MOV     A,#0x1
   \   0002BA   12....       LCALL   ?XSTACK_DISP0_8
   \   0002BD   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   0002C0   FB           MOV     R3,A
   \   0002C1   7A01         MOV     R2,#0x1
   \   0002C3   85..82       MOV     DPL,?XSP + 0
   \   0002C6   85..83       MOV     DPH,?XSP + 1
   \   0002C9   E0           MOVX    A,@DPTR
   \   0002CA   F9           MOV     R1,A
   \   0002CB   12....       LCALL   `??macSrcMatchSetEnableBit::?relay`; Banked call to: macSrcMatchSetEnableBit
    201            
    202            return MAC_SUCCESS;
   \   0002CE   7900         MOV     R1,#0x0
   \                     ??MAC_SrcMatchAddEntry_2:
   \   0002D0   7415         MOV     A,#0x15
   \   0002D2                REQUIRE ?Subroutine1
   \   0002D2                ; // Fall through to label ?Subroutine1
    203          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F08         MOV     R7,#0x8
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002                REQUIRE ??Subroutine7_0
   \   000002                ; // Fall through to label ??Subroutine7_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine7_0:
   \   000000   A3           INC     DPTR
   \   000001   E0           MOVX    A,@DPTR
   \   000002   C8           XCH     A,R0
   \   000003   2408         ADD     A,#0x8
   \   000005   F582         MOV     DPL,A
   \   000007   E4           CLR     A
   \   000008   38           ADDC    A,R0
   \   000009   F583         MOV     DPH,A
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   000003   6403         XRL     A,#0x3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002                REQUIRE ??Subroutine8_0
   \   000002                ; // Fall through to label ??Subroutine8_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine8_0:
   \   000000   12....       LCALL   ??Subroutine7_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   000003   6402         XRL     A,#0x2
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F583         MOV     DPH,A
   \   000006   8882         MOV     DPL,R0
   \   000008   22           RET
    204          
    205          /*********************************************************************
    206           * @fn         MAC_SrcMatchDeleteEntry
    207           *
    208           * @brief      Delete a short or extended address from source address table. 
    209           *             This function shall be not be called from ISR. It is not thread 
    210           *             safe.
    211           *
    212           * @param      addr  - a pointer to sAddr_t which contains addrMode 
    213           *                     and a union of a short 16-bit MAC address or an extended 
    214           *                     64-bit MAC address to be deleted from the source address 
    215           *                     table. 
    216           * @param      panID - the device PAN ID. It is only used when the addr is 
    217           *                     using short address  
    218           *
    219           * @return     MAC_SUCCESS or MAC_INVALID_PARAMETER (address to be deleted 
    220           *                  cannot be found in the source address table).
    221           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    222          uint8 MAC_SrcMatchDeleteEntry ( sAddr_t *addr, uint16 panID  )
   \                     MAC_SrcMatchDeleteEntry:
    223          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    224            uint8 index;
    225            
    226            if ( addr == NULL || (addr->addrMode !=  SADDR_MODE_SHORT && addr->addrMode !=  SADDR_MODE_EXT))
   \   000009   EE           MOV     A,R6
   \   00000A   4F           ORL     A,R7
   \   00000B   602C         JZ      ??MAC_SrcMatchDeleteEntry_0
   \   00000D   8E82         MOV     DPL,R6
   \   00000F   8F83         MOV     DPH,R7
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   A3           INC     DPTR
   \   000016   A3           INC     DPTR
   \   000017   A3           INC     DPTR
   \   000018   A3           INC     DPTR
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   6402         XRL     A,#0x2
   \   00001C   6011         JZ      ??MAC_SrcMatchDeleteEntry_1
   \   00001E   8E82         MOV     DPL,R6
   \   000020   8F83         MOV     DPH,R7
   \   000022   A3           INC     DPTR
   \   000023   A3           INC     DPTR
   \   000024   A3           INC     DPTR
   \   000025   A3           INC     DPTR
   \   000026   A3           INC     DPTR
   \   000027   A3           INC     DPTR
   \   000028   A3           INC     DPTR
   \   000029   A3           INC     DPTR
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   6403         XRL     A,#0x3
   \   00002D   700A         JNZ     ??MAC_SrcMatchDeleteEntry_0
    227            {
    228              return MAC_INVALID_PARAMETER;  
    229            }
    230            
    231            /* Look up the source address table and find the entry. */
    232            index = macSrcMatchCheckSrcAddr( addr, panID );
   \                     ??MAC_SrcMatchDeleteEntry_1:
   \   00002F                ; Setup parameters for call to function macSrcMatchCheckSrcAddr
   \   00002F   12....       LCALL   `??macSrcMatchCheckSrcAddr::?relay`; Banked call to: macSrcMatchCheckSrcAddr
   \   000032   E9           MOV     A,R1
   \   000033   F9           MOV     R1,A
    233          
    234            if( index == MAC_SRCMATCH_INVALID_INDEX )
   \   000034   74FF         MOV     A,#-0x1
   \   000036   69           XRL     A,R1
   \   000037   7004         JNZ     ??MAC_SrcMatchDeleteEntry_2
    235            {
    236              return MAC_INVALID_PARAMETER; 
   \                     ??MAC_SrcMatchDeleteEntry_0:
   \   000039   79E8         MOV     R1,#-0x18
   \   00003B   8015         SJMP    ??MAC_SrcMatchDeleteEntry_3
    237            }
    238            
    239            /* Clear Src Match enable bits */
    240            macSrcMatchSetEnableBit( index, FALSE, addr->addrMode);
   \                     ??MAC_SrcMatchDeleteEntry_2:
   \   00003D                ; Setup parameters for call to function macSrcMatchSetEnableBit
   \   00003D   8E82         MOV     DPL,R6
   \   00003F   8F83         MOV     DPH,R7
   \   000041   A3           INC     DPTR
   \   000042   A3           INC     DPTR
   \   000043   A3           INC     DPTR
   \   000044   A3           INC     DPTR
   \   000045   A3           INC     DPTR
   \   000046   A3           INC     DPTR
   \   000047   A3           INC     DPTR
   \   000048   A3           INC     DPTR
   \   000049   E0           MOVX    A,@DPTR
   \   00004A   FB           MOV     R3,A
   \   00004B   7A00         MOV     R2,#0x0
   \   00004D   12....       LCALL   `??macSrcMatchSetEnableBit::?relay`; Banked call to: macSrcMatchSetEnableBit
    241          
    242            return MAC_SUCCESS;
   \   000050   7900         MOV     R1,#0x0
   \                     ??MAC_SrcMatchDeleteEntry_3:
   \   000052   7F01         MOV     R7,#0x1
   \   000054   02....       LJMP    ?BANKED_LEAVE_XDATA
    243          }
    244                            
    245          /*********************************************************************
    246           * @fn          MAC_SrcMatchAckAllPending
    247           *
    248           * @brief       Enabled/disable acknowledging all packets with pending bit set
    249           *              The application normally enables it when adding new entries to 
    250           *              the source address table fails due to the table is full, or 
    251           *              disables it when more entries are deleted and the table has
    252           *              empty slots.
    253           *
    254           * @param       option - TRUE (acknowledging all packets with pending field set)
    255           *                       FALSE (address filtering and FSM control sets the 
    256           *                              pending field) 
    257           *
    258           * @return      none
    259           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    260          void MAC_SrcMatchAckAllPending ( uint8 option  ) 
   \                     MAC_SrcMatchAckAllPending:
    261          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    262            if( option == TRUE )
   \   000004   7401         MOV     A,#0x1
   \   000006   69           XRL     A,R1
   \   000007   90....       MOV     DPTR,#macSrcMatchIsAckAllPending
   \   00000A   700B         JNZ     ??MAC_SrcMatchAckAllPending_0
    263            {
    264              macSrcMatchIsAckAllPending = TRUE;
   \   00000C   7401         MOV     A,#0x1
   \   00000E   F0           MOVX    @DPTR,A
    265              
    266              /* Set the PENDING_OR register */
    267              MAC_RADIO_TURN_ON_PENDING_OR();
   \   00000F   90618A       MOV     DPTR,#0x618a
   \   000012   E0           MOVX    A,@DPTR
   \   000013   D2E2         SETB    0xE0 /* A   */.2
   \   000015   8008         SJMP    ??MAC_SrcMatchAckAllPending_1
    268            }
    269            else
    270            {
    271              macSrcMatchIsAckAllPending = FALSE;
   \                     ??MAC_SrcMatchAckAllPending_0:
   \   000017   E4           CLR     A
   \   000018   F0           MOVX    @DPTR,A
    272              
    273              /* Clear the PENDING_OR register */
    274              MAC_RADIO_TURN_OFF_PENDING_OR();
   \   000019   90618A       MOV     DPTR,#0x618a
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   C2E2         CLR     0xE0 /* A   */.2
   \                     ??MAC_SrcMatchAckAllPending_1:
   \   00001F   F0           MOVX    @DPTR,A
    275            }
    276          }
   \   000020   80..         SJMP    ??Subroutine9_0
    277          
    278          /*********************************************************************
    279           * @fn          MAC_SrcMatchCheckAllPending
    280           *
    281           * @brief       Check if acknowledging all packets with pending bit set
    282           *              is enabled. 
    283           *
    284           * @param       none 
    285           *
    286           * @return      MAC_AUTOACK_PENDING_ALL_ON or MAC_AUTOACK_PENDING_ALL_OFF
    287           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    288          uint8 MAC_SrcMatchCheckAllPending ( void )
   \                     MAC_SrcMatchCheckAllPending:
    289          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    290            if( macSrcMatchIsAckAllPending == TRUE )
   \   000004   90....       MOV     DPTR,#macSrcMatchIsAckAllPending
   \   000007   E0           MOVX    A,@DPTR
   \   000008   6401         XRL     A,#0x1
   \   00000A   7004         JNZ     ??MAC_SrcMatchCheckAllPending_0
    291            {
    292              return MAC_AUTOACK_PENDING_ALL_ON; 
   \   00000C   79FE         MOV     R1,#-0x2
   \   00000E   8002         SJMP    ??MAC_SrcMatchCheckAllPending_1
    293            }
    294            
    295            return MAC_AUTOACK_PENDING_ALL_OFF;
   \                     ??MAC_SrcMatchCheckAllPending_0:
   \   000010   79FF         MOV     R1,#-0x1
   \                     ??MAC_SrcMatchCheckAllPending_1:
   \   000012   80..         SJMP    ??Subroutine9_0
    296          }
    297          
    298          /*********************************************************************
    299           * @fn          MAC_SrcMatchCheckResult
    300           *
    301           * @brief       Check the result of source matching
    302           *
    303           * @param       index - index of the entry in the source address table
    304           *
    305           * @return      TRUE or FALSE
    306           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    307          MAC_INTERNAL_API bool MAC_SrcMatchCheckResult( void )
   \                     MAC_SrcMatchCheckResult:
    308          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    309            uint8 resIndex;
    310            
    311            if ( macSrcMatchIsAckAllPending )
   \   000004   90....       MOV     DPTR,#macSrcMatchIsAckAllPending
   \   000007   E0           MOVX    A,@DPTR
   \   000008   6004         JZ      ??MAC_SrcMatchCheckResult_0
    312            {
    313              return (TRUE);
   \   00000A   7901         MOV     R1,#0x1
   \   00000C   8009         SJMP    ??MAC_SrcMatchCheckResult_1
    314            }
    315            
    316            MAC_RADIO_SRC_MATCH_RESINDEX( resIndex );
   \                     ??MAC_SrcMatchCheckResult_0:
   \   00000E   906163       MOV     DPTR,#0x6163
   \   000011   E0           MOVX    A,@DPTR
   \   000012   F8           MOV     R0,A
    317            
    318            return ( resIndex & AUTOPEND_RES );
   \   000013   7440         MOV     A,#0x40
   \   000015   58           ANL     A,R0
   \   000016   F9           MOV     R1,A
   \                     ??MAC_SrcMatchCheckResult_1:
   \   000017   80..         SJMP    ??Subroutine9_0
    319          }
    320          
    321          /*********************************************************************
    322           * @fn          macSrcMatchFindEmptyEntry
    323           *
    324           * @brief       return index of the first empty entry found
    325           *
    326           * @param       macSrcMatchAddrMode - Address Mode for the entry. Valid values
    327           *              are SADDR_MODE_SHORT or SADDR_MODE_EXT
    328           *
    329           * @return      uint8 - return index of the first empty entry found
    330           */
    331          static uint8 macSrcMatchFindEmptyEntry( uint8 macSrcMatchAddrMode )
    332          {
    333            uint8  index;
    334            uint24 shortAddrEnable = MAC_RADIO_SRC_MATCH_GET_SHORTADDR_EN();
    335            uint24 extAddrEnable = MAC_RADIO_SRC_MATCH_GET_EXTADDR_EN();
    336            uint24 enable = shortAddrEnable | extAddrEnable;
    337          
    338            if( macSrcMatchAddrMode == SADDR_MODE_SHORT )
    339             {
    340               for( index = 0; index < MAC_SRCMATCH_SHORT_MAX_NUM_ENTRIES; index ++ )
    341               {
    342                 /* Both 2n bit of extAddrEnable and
    343                  * corresponding bit of shortAddrEnable must be clear
    344                  * in order to assume that the entry location for a short address
    345                  * is not used.
    346                  */
    347                 if( (extAddrEnable & ((uint24)0x01 << ((index/2)*2))) == 0 &&
    348                     (shortAddrEnable & ((uint24)0x01 << index)) == 0 )
    349                 {
    350                   return index;
    351                 }
    352               }
    353             }
    354             else
    355             {
    356               for( index = 0; index < MAC_SRCMATCH_EXT_MAX_NUM_ENTRIES; index++ )
    357               {
    358                 /* Both 2n bit of extAddrEnable and
    359                  * 2n bit and 2n+1 bit of shortAddrEnable must be clear in order
    360                  * to assume that the entry location for an extended address
    361                  * is not used.        
    362                  */
    363                 if( (enable & ((uint24)0x03 << (index*2))) == 0 )
    364                 {
    365                   return index;
    366                 }
    367               }
    368             }
    369            return index;
    370          }
    371          
    372          /*********************************************************************
    373           * @fn         macSrcMatchCheckSrcAddr
    374           *
    375           * @brief      Check if a short or extended address is in the source address table.
    376           *             This function shall not be called from ISR. It is not thread safe.
    377           *
    378           * @param      addr - a pointer to sAddr_t which contains addrMode 
    379           *                    and a union of a short 16-bit MAC address or an extended 
    380           *                    64-bit MAC address to be checked in the source address table. 
    381           * @param      panID - the device PAN ID. It is only used when the addr is 
    382           *                     using short address 
    383          
    384           * @return     uint8 - index of the entry in the table. Return 
    385           *                     MAC_SRCMATCH_INVALID_INDEX (0xFF) if address not found.
    386           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    387          static uint8 macSrcMatchCheckSrcAddr ( sAddr_t *addr, uint16 panID  )
   \                     macSrcMatchCheckSrcAddr:
    388          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 15
   \   000005   74F1         MOV     A,#-0xf
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    389            uint8 index;     
    390            uint8 *pAddr;
    391            uint8 entrySize;
    392            uint8 indexUsed;
    393            uint8 indexSize;
    394            uint8 entry[MAC_SRCMATCH_SHORT_ENTRY_SIZE];  
    395            uint8 ramEntry[MAC_SRCMATCH_EXT_ENTRY_SIZE];
    396            uint24 enable;
    397            
    398            /*
    399             Currently, shadow memory is not supported to optimize SPI traffic.
    400            */
    401            if( addr->addrMode ==  SADDR_MODE_SHORT )
   \   00000A   8A82         MOV     DPL,R2
   \   00000C   8B83         MOV     DPH,R3
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   A3           INC     DPTR
   \   000016   E0           MOVX    A,@DPTR
   \   000017   6402         XRL     A,#0x2
   \   000019   704C         JNZ     ??macSrcMatchCheckSrcAddr_0
    402            {
    403              entry[0] = LO_UINT16( panID );  /* Little Endian for the radio RAM */
   \   00001B   7403         MOV     A,#0x3
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   EC           MOV     A,R4
   \   000021   F0           MOVX    @DPTR,A
    404              entry[1] = HI_UINT16( panID );
   \   000022   7404         MOV     A,#0x4
   \   000024   12....       LCALL   ?XSTACK_DISP0_8
   \   000027   ED           MOV     A,R5
   \   000028   F0           MOVX    @DPTR,A
    405              entry[2] = LO_UINT16( addr->addr.shortAddr );
   \   000029   8A82         MOV     DPL,R2
   \   00002B   8B83         MOV     DPH,R3
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   C0E0         PUSH    A
   \   000030   7405         MOV     A,#0x5
   \   000032   12....       LCALL   ?XSTACK_DISP0_8
   \   000035   D0E0         POP     A
   \   000037   F0           MOVX    @DPTR,A
    406              entry[3] = HI_UINT16( addr->addr.shortAddr );
   \   000038   8A82         MOV     DPL,R2
   \   00003A   8B83         MOV     DPH,R3
   \   00003C   A3           INC     DPTR
   \   00003D   E0           MOVX    A,@DPTR
   \   00003E   C0E0         PUSH    A
   \   000040   7406         MOV     A,#0x6
   \   000042   12....       LCALL   ?XSTACK_DISP0_8
   \   000045   D0E0         POP     A
   \   000047   F0           MOVX    @DPTR,A
    407              pAddr = entry;
   \   000048   7403         MOV     A,#0x3
   \   00004A   12....       LCALL   ?XSTACK_DISP100_8
   \   00004D   7401         MOV     A,#0x1
   \   00004F   12....       LCALL   ?XSTACK_DISP0_8
   \   000052   E8           MOV     A,R0
   \   000053   F0           MOVX    @DPTR,A
   \   000054   A3           INC     DPTR
   \   000055   E9           MOV     A,R1
   \   000056   F0           MOVX    @DPTR,A
    408              entrySize = MAC_SRCMATCH_SHORT_ENTRY_SIZE;
   \   000057   7E04         MOV     R6,#0x4
    409              indexSize = 1;
   \   000059   85..82       MOV     DPL,?XSP + 0
   \   00005C   85..83       MOV     DPH,?XSP + 1
   \   00005F   7401         MOV     A,#0x1
   \   000061   F0           MOVX    @DPTR,A
    410              enable = MAC_RADIO_SRC_MATCH_GET_SHORTADDR_EN();
   \   000062                ; Setup parameters for call to function macSrcMatchGetShortAddrEnableBit
   \   000062   12....       LCALL   `??macSrcMatchGetShortAddrEnableBit::?relay`; Banked call to: macSrcMatchGetShortAddrEnableBit
   \   000065   8018         SJMP    ??macSrcMatchCheckSrcAddr_1
    411            }
    412            else
    413            {
    414              pAddr = addr->addr.extAddr;
   \                     ??macSrcMatchCheckSrcAddr_0:
   \   000067   7401         MOV     A,#0x1
   \   000069   12....       LCALL   ?XSTACK_DISP0_8
   \   00006C   EA           MOV     A,R2
   \   00006D   F0           MOVX    @DPTR,A
   \   00006E   A3           INC     DPTR
   \   00006F   EB           MOV     A,R3
   \   000070   F0           MOVX    @DPTR,A
    415              entrySize = MAC_SRCMATCH_EXT_ENTRY_SIZE;
   \   000071   7E08         MOV     R6,#0x8
    416              indexSize = 2;
   \   000073   85..82       MOV     DPL,?XSP + 0
   \   000076   85..83       MOV     DPH,?XSP + 1
   \   000079   7402         MOV     A,#0x2
   \   00007B   F0           MOVX    @DPTR,A
    417              enable = MAC_RADIO_SRC_MATCH_GET_EXTADDR_EN();
   \   00007C                ; Setup parameters for call to function macSrcMatchGetExtAddrEnableBit
   \   00007C   12....       LCALL   `??macSrcMatchGetExtAddrEnableBit::?relay`; Banked call to: macSrcMatchGetExtAddrEnableBit
   \                     ??macSrcMatchCheckSrcAddr_1:
   \   00007F   8A..         MOV     ?V4,R2
   \   000081   8B..         MOV     ?V5,R3
   \   000083   8C..         MOV     ?V6,R4
   \   000085   8D..         MOV     ?V7,R5
    418            }
    419            
    420            for( index = 0; index < MAC_SRCMATCH_SHORT_MAX_NUM_ENTRIES; index += indexSize )
   \   000087   7F00         MOV     R7,#0x0
    421            {
    422              /* Check if the entry is enabled */
    423              if( macSrcMatchCheckEnableBit( index, enable ) == FALSE )
   \                     ??macSrcMatchCheckSrcAddr_2:
   \   000089   85....       MOV     ?V0,?V4
   \   00008C   85....       MOV     ?V1,?V5
   \   00008F   85....       MOV     ?V2,?V6
   \   000092   85....       MOV     ?V3,?V7
   \   000095   EF           MOV     A,R7
   \   000096   78..         MOV     R0,#?V0
   \   000098   12....       LCALL   ?UL_SHR
   \   00009B   E5..         MOV     A,?V0
   \   00009D   A2E0         MOV     C,0xE0 /* A   */.0
   \   00009F   505A         JNC     ??macSrcMatchCheckSrcAddr_3
    424              {
    425                continue; 
    426              }
    427              
    428              indexUsed = index / indexSize;
   \   0000A1   85..82       MOV     DPL,?XSP + 0
   \   0000A4   85..83       MOV     DPH,?XSP + 1
   \   0000A7   E0           MOVX    A,@DPTR
   \   0000A8   F5F0         MOV     B,A
   \   0000AA   EF           MOV     A,R7
   \   0000AB   84           DIV     AB
   \   0000AC   F5..         MOV     ?V3,A
    429                
    430              /* Compare the short address or extended address */
    431              MAC_RADIO_SRC_MATCH_TABLE_READ( ( indexUsed * entrySize ), ramEntry, entrySize );
   \   0000AE                ; Setup parameters for call to function macMemReadRam
   \   0000AE   EE           MOV     A,R6
   \   0000AF   F9           MOV     R1,A
   \   0000B0   7407         MOV     A,#0x7
   \   0000B2   12....       LCALL   ?XSTACK_DISP102_8
   \   0000B5   E5..         MOV     A,?V3
   \   0000B7   89F0         MOV     B,R1
   \   0000B9   A4           MUL     AB
   \   0000BA   FA           MOV     R2,A
   \   0000BB   A8F0         MOV     R0,B
   \   0000BD   E4           CLR     A
   \   0000BE   28           ADD     A,R0
   \   0000BF   FB           MOV     R3,A
   \   0000C0   7461         MOV     A,#0x61
   \   0000C2   3B           ADDC    A,R3
   \   0000C3   FB           MOV     R3,A
   \   0000C4   12....       LCALL   `??macMemReadRam::?relay`; Banked call to: macMemReadRam
    432               
    433              if( osal_memcmp( pAddr, ramEntry, entrySize ) == TRUE )
   \   0000C7                ; Setup parameters for call to function osal_memcmp
   \   0000C7   7407         MOV     A,#0x7
   \   0000C9   12....       LCALL   ?XSTACK_DISP100_8
   \   0000CC   88..         MOV     ?V0,R0
   \   0000CE   89..         MOV     ?V1,R1
   \   0000D0   75..00       MOV     ?V2,#0x0
   \   0000D3   78..         MOV     R0,#?V0
   \   0000D5   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000D8   EE           MOV     A,R6
   \   0000D9   FC           MOV     R4,A
   \   0000DA   7D00         MOV     R5,#0x0
   \   0000DC   7404         MOV     A,#0x4
   \   0000DE   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E1   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   0000E4   A982         MOV     R1,DPL
   \   0000E6   AA83         MOV     R2,DPH
   \   0000E8   7B00         MOV     R3,#0x0
   \   0000EA   12....       LCALL   `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   0000ED   7403         MOV     A,#0x3
   \   0000EF   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000F2   E9           MOV     A,R1
   \   0000F3   6401         XRL     A,#0x1
   \   0000F5   7004         JNZ     ??macSrcMatchCheckSrcAddr_3
    434              {
    435                /* Match found */
    436                return indexUsed;
   \   0000F7   A9..         MOV     R1,?V3
   \   0000F9   8010         SJMP    ??macSrcMatchCheckSrcAddr_4
    437              }
    438            }
   \                     ??macSrcMatchCheckSrcAddr_3:
   \   0000FB   85..82       MOV     DPL,?XSP + 0
   \   0000FE   85..83       MOV     DPH,?XSP + 1
   \   000101   E0           MOVX    A,@DPTR
   \   000102   2F           ADD     A,R7
   \   000103   FF           MOV     R7,A
   \   000104   C3           CLR     C
   \   000105   9418         SUBB    A,#0x18
   \   000107   4080         JC      ??macSrcMatchCheckSrcAddr_2
    439            
    440            return MAC_SRCMATCH_INVALID_INDEX;
   \   000109   79FF         MOV     R1,#-0x1
   \                     ??macSrcMatchCheckSrcAddr_4:
   \   00010B   740F         MOV     A,#0xf
   \   00010D   02....       LJMP    ?Subroutine1 & 0xFFFF
    441          }
    442          
    443          /*********************************************************************
    444           * @fn          macSrcMatchSetPendEnBit
    445           *
    446           * @brief       Set the enable bit in the source address table
    447           *
    448           * @param       index - index of the entry in the source address table
    449           * @param       macSrcMatchAddrMode - Address Mode for the entry. Valid values
    450           *              are SADDR_MODE_SHORT or SADDR_MODE_EXT
    451           *
    452           * @return      none
    453           */
    454          static void macSrcMatchSetPendEnBit( uint8 index, uint8 macSrcMatchAddrMode )
    455          {
    456            uint24 enable;
    457            uint8 buf[MAC_SRCMATCH_ENABLE_BITMAP_LEN];
    458                 
    459            if( macSrcMatchAddrMode == SADDR_MODE_SHORT )
    460            {
    461              enable = MAC_RADIO_SRC_MATCH_GET_SHORTADDR_PENDEN(); 
    462              enable |= ( (uint24)0x01 << index );
    463              osal_buffer_uint24( buf, enable );
    464              MAC_RADIO_SRC_MATCH_SET_SHORTPENDEN( buf );
    465            }
    466            else
    467            {
    468              enable = MAC_RADIO_SRC_MATCH_GET_EXTADDR_PENDEN(); 
    469              enable |= ( (uint24)0x01 << ( index * EXT_ADDR_INDEX_SIZE ) );
    470              enable |= ( (uint24)0x01 << ( ( index * EXT_ADDR_INDEX_SIZE ) + 1 ) );
    471              osal_buffer_uint24( buf, enable );
    472              MAC_RADIO_SRC_MATCH_SET_EXTPENDEN( buf );
    473            }
    474          }
    475          
    476          /*********************************************************************
    477           * @fn          macSrcMatchSetEnableBit
    478           *
    479           * @brief       Set or clear the enable bit in the SRCMATCH EN register
    480           *
    481           * @param       index  - index of the entry in the source address table
    482           * @param       option - true (set the enable bit), or false (clear the enable 
    483           *                       bit)
    484           * @param       macSrcMatchAddrMode - Address Mode for the entry. Valid values
    485           *              are SADDR_MODE_SHORT or SADDR_MODE_EXT
    486           *
    487           * @return      none
    488           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    489          static void macSrcMatchSetEnableBit( uint8 index, 
   \                     macSrcMatchSetEnableBit:
    490                                              bool option, 
    491                                              uint8 macSrcMatchAddrMode )
    492          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   85..82       MOV     DPL,?XSP + 0
   \   00000E   85..83       MOV     DPH,?XSP + 1
   \   000011   F0           MOVX    @DPTR,A
   \   000012   E9           MOV     A,R1
   \   000013   FE           MOV     R6,A
   \   000014   EB           MOV     A,R3
   \   000015   FF           MOV     R7,A
    493            uint24 enable;  
    494            
    495            if( option == TRUE )
   \   000016   E0           MOVX    A,@DPTR
   \   000017   6401         XRL     A,#0x1
   \   000019   7053         JNZ     ??macSrcMatchSetEnableBit_0
    496            {
    497              if( macSrcMatchAddrMode == SADDR_MODE_SHORT )
   \   00001B   7402         MOV     A,#0x2
   \   00001D   6F           XRL     A,R7
   \   00001E   7026         JNZ     ??macSrcMatchSetEnableBit_1
    498              {
    499                enable = MAC_RADIO_SRC_MATCH_GET_SHORTADDR_EN(); 
    500                enable |= ( (uint24)0x01 << index );
    501                MAC_RADIO_SRC_MATCH_SET_SHORTEN( enable );
   \   000020                ; Setup parameters for call to function osal_buffer_uint24
   \   000020                ; Setup parameters for call to function macSrcMatchGetShortAddrEnableBit
   \   000020   12....       LCALL   `??macSrcMatchGetShortAddrEnableBit::?relay`; Banked call to: macSrcMatchGetShortAddrEnableBit
   \   000023   8A..         MOV     ?V4,R2
   \   000025   8B..         MOV     ?V5,R3
   \   000027   8C..         MOV     ?V6,R4
   \   000029   8D..         MOV     ?V7,R5
   \   00002B   75..01       MOV     ?V0,#0x1
   \   00002E   75..00       MOV     ?V1,#0x0
   \   000031   75..00       MOV     ?V2,#0x0
   \   000034   75..00       MOV     ?V3,#0x0
   \   000037   EE           MOV     A,R6
   \   000038   78..         MOV     R0,#?V0
   \   00003A   12....       LCALL   ?L_SHL
   \   00003D   78..         MOV     R0,#?V4
   \   00003F   79..         MOV     R1,#?V0
   \   000041   12....       LCALL   ?L_IOR
   \   000044   8056         SJMP    ??macSrcMatchSetEnableBit_2
    502              }
    503              else
    504              {
    505                enable = MAC_RADIO_SRC_MATCH_GET_EXTADDR_EN(); 
    506                enable |= ( (uint24)0x01 << ( index *  EXT_ADDR_INDEX_SIZE) );
    507                MAC_RADIO_SRC_MATCH_SET_EXTEN( enable );
   \                     ??macSrcMatchSetEnableBit_1:
   \   000046                ; Setup parameters for call to function osal_buffer_uint24
   \   000046                ; Setup parameters for call to function macSrcMatchGetExtAddrEnableBit
   \   000046   12....       LCALL   `??macSrcMatchGetExtAddrEnableBit::?relay`; Banked call to: macSrcMatchGetExtAddrEnableBit
   \   000049   8A..         MOV     ?V4,R2
   \   00004B   8B..         MOV     ?V5,R3
   \   00004D   8C..         MOV     ?V6,R4
   \   00004F   8D..         MOV     ?V7,R5
   \   000051   75..01       MOV     ?V0,#0x1
   \   000054   75..00       MOV     ?V1,#0x0
   \   000057   75..00       MOV     ?V2,#0x0
   \   00005A   75..00       MOV     ?V3,#0x0
   \   00005D   EE           MOV     A,R6
   \   00005E   C3           CLR     C
   \   00005F   33           RLC     A
   \   000060   78..         MOV     R0,#?V0
   \   000062   12....       LCALL   ?L_SHL
   \   000065   78..         MOV     R0,#?V4
   \   000067   79..         MOV     R1,#?V0
   \   000069   12....       LCALL   ?L_IOR
   \   00006C   8062         SJMP    ??macSrcMatchSetEnableBit_3
    508              }
    509            }
    510            else
    511            {
    512              if( macSrcMatchAddrMode == SADDR_MODE_SHORT )
   \                     ??macSrcMatchSetEnableBit_0:
   \   00006E   7402         MOV     A,#0x2
   \   000070   6F           XRL     A,R7
   \   000071   7032         JNZ     ??macSrcMatchSetEnableBit_4
    513              {
    514                enable = MAC_RADIO_SRC_MATCH_GET_SHORTADDR_EN();
    515                enable &= ~( (uint24)0x01 << index );
    516                MAC_RADIO_SRC_MATCH_SET_SHORTEN( enable );
   \   000073                ; Setup parameters for call to function osal_buffer_uint24
   \   000073                ; Setup parameters for call to function macSrcMatchGetShortAddrEnableBit
   \   000073   12....       LCALL   `??macSrcMatchGetShortAddrEnableBit::?relay`; Banked call to: macSrcMatchGetShortAddrEnableBit
   \   000076   8A..         MOV     ?V4,R2
   \   000078   8B..         MOV     ?V5,R3
   \   00007A   8C..         MOV     ?V6,R4
   \   00007C   8D..         MOV     ?V7,R5
   \   00007E   75..01       MOV     ?V0,#0x1
   \   000081   75..00       MOV     ?V1,#0x0
   \   000084   75..00       MOV     ?V2,#0x0
   \   000087   75..00       MOV     ?V3,#0x0
   \   00008A   EE           MOV     A,R6
   \   00008B   78..         MOV     R0,#?V0
   \   00008D   12....       LCALL   ?L_SHL
   \   000090   78..         MOV     R0,#?V0
   \   000092   12....       LCALL   ?L_NOT
   \   000095   78..         MOV     R0,#?V4
   \   000097   79..         MOV     R1,#?V0
   \   000099   12....       LCALL   ?L_AND
   \                     ??macSrcMatchSetEnableBit_2:
   \   00009C   78..         MOV     R0,#?V4
   \   00009E   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   0000A1   7A83         MOV     R2,#-0x7d
   \   0000A3   8032         SJMP    ??macSrcMatchSetEnableBit_5
    517              }
    518              else
    519              {
    520                enable = MAC_RADIO_SRC_MATCH_GET_EXTADDR_EN(); 
    521                enable &= ~( (uint24)0x01 << ( index * EXT_ADDR_INDEX_SIZE ) );
    522                MAC_RADIO_SRC_MATCH_SET_EXTEN( enable );
   \                     ??macSrcMatchSetEnableBit_4:
   \   0000A5                ; Setup parameters for call to function osal_buffer_uint24
   \   0000A5                ; Setup parameters for call to function macSrcMatchGetExtAddrEnableBit
   \   0000A5   12....       LCALL   `??macSrcMatchGetExtAddrEnableBit::?relay`; Banked call to: macSrcMatchGetExtAddrEnableBit
   \   0000A8   8A..         MOV     ?V4,R2
   \   0000AA   8B..         MOV     ?V5,R3
   \   0000AC   8C..         MOV     ?V6,R4
   \   0000AE   8D..         MOV     ?V7,R5
   \   0000B0   75..01       MOV     ?V0,#0x1
   \   0000B3   75..00       MOV     ?V1,#0x0
   \   0000B6   75..00       MOV     ?V2,#0x0
   \   0000B9   75..00       MOV     ?V3,#0x0
   \   0000BC   EE           MOV     A,R6
   \   0000BD   C3           CLR     C
   \   0000BE   33           RLC     A
   \   0000BF   78..         MOV     R0,#?V0
   \   0000C1   12....       LCALL   ?L_SHL
   \   0000C4   78..         MOV     R0,#?V0
   \   0000C6   12....       LCALL   ?L_NOT
   \   0000C9   78..         MOV     R0,#?V4
   \   0000CB   79..         MOV     R1,#?V0
   \   0000CD   12....       LCALL   ?L_AND
   \                     ??macSrcMatchSetEnableBit_3:
   \   0000D0   78..         MOV     R0,#?V4
   \   0000D2   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   0000D5   7A86         MOV     R2,#-0x7a
   \                     ??macSrcMatchSetEnableBit_5:
   \   0000D7   7B61         MOV     R3,#0x61
   \   0000D9   12....       LCALL   `??osal_buffer_uint24::?relay`; Banked call to: osal_buffer_uint24
   \   0000DC   7404         MOV     A,#0x4
   \   0000DE   12....       LCALL   ?DEALLOC_XSTACK8
    523              }
    524            }
    525          }
   \   0000E1   7401         MOV     A,#0x1
   \   0000E3   02....       LJMP    ?Subroutine1 & 0xFFFF
    526          
    527          /*********************************************************************
    528           * @fn          macSrcMatchCheckEnableBit
    529           *
    530           * @brief       Check the enable bit in the source address table
    531           *
    532           * @param       index - index of the entry in the source address table
    533           * @param       enable - enable register should be read before passing 
    534           *              it here
    535           *
    536           * @return      TRUE or FALSE
    537           */
    538          static bool macSrcMatchCheckEnableBit( uint8 index, uint24 enable)
    539          {
    540            if( enable & ((uint24)0x01 << index ))
    541            {
    542              return TRUE;
    543            }
    544            
    545            return FALSE; 
    546          }
    547           
    548          /*********************************************************************
    549           * @fn          macSrcMatchGetShortAddrPendEnBit
    550           *
    551           * @brief       Return the SRCMATCH ShortAddr Pend enable bitmap
    552           *
    553           * @param       none
    554           *
    555           * @return      uint24 - 24 bits bitmap
    556           */
    557          static uint24 macSrcMatchGetShortAddrPendEnBit( void )
    558          {
    559            uint8 buf[MAC_SRCMATCH_ENABLE_BITMAP_LEN];
    560            
    561            MAC_RADIO_GET_SRC_SHORTPENDEN( buf );
    562            
    563            return osal_build_uint32( buf, MAC_SRCMATCH_ENABLE_BITMAP_LEN );
    564          }
    565          
    566           
    567          /*********************************************************************
    568           * @fn          macSrcMatchGetExtAddrPendEnBit
    569           *
    570           * @brief       Return the SRCMATCH Extended Address Pend enable bitmap
    571           *
    572           * @param       none
    573           *
    574           * @return      uint24 - 24 bits bitmap
    575           */
    576          static uint24 macSrcMatchGetExtAddrPendEnBit( void )
    577          {
    578            uint8 buf[MAC_SRCMATCH_ENABLE_BITMAP_LEN];
    579            
    580            MAC_RADIO_GET_SRC_EXTENPEND( buf );
    581            
    582            return osal_build_uint32( buf, MAC_SRCMATCH_ENABLE_BITMAP_LEN );
    583          }
    584          
    585          /*********************************************************************
    586           * @fn          macSrcMatchGetShortAddrEnableBit
    587           *
    588           * @brief       Return the SRCMATCH ShortAddr enable bitmap
    589           *
    590           * @param       none
    591           *
    592           * @return      uint24 - 24 bits bitmap
    593           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7B61         MOV     R3,#0x61
   \   000002   12....       LCALL   `??macMemReadRam::?relay`; Banked call to: macMemReadRam
   \   000005                ; Setup parameters for call to function osal_build_uint32
   \   000005                ; Setup parameters for call to function osal_build_uint32
   \   000005   7903         MOV     R1,#0x3
   \   000007   AA..         MOV     R2,?XSP + 0
   \   000009   AB..         MOV     R3,?XSP + 1
   \   00000B   12....       LCALL   `??osal_build_uint32::?relay`; Banked call to: osal_build_uint32
   \   00000E   7403         MOV     A,#0x3
   \   000010   12....       LCALL   ?DEALLOC_XSTACK8
   \   000013                REQUIRE ??Subroutine9_0
   \   000013                ; // Fall through to label ??Subroutine9_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    594          static uint24 macSrcMatchGetShortAddrEnableBit( void )
   \                     macSrcMatchGetShortAddrEnableBit:
    595          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 3
   \   000004   74FD         MOV     A,#-0x3
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
    596            uint8 buf[MAC_SRCMATCH_ENABLE_BITMAP_LEN];
    597            
    598            MAC_RADIO_GET_SRC_SHORTEN( buf );
   \   000009                ; Setup parameters for call to function macMemReadRam
   \   000009   7903         MOV     R1,#0x3
   \   00000B   AC..         MOV     R4,?XSP + 0
   \   00000D   AD..         MOV     R5,?XSP + 1
   \   00000F   7A83         MOV     R2,#-0x7d
   \   000011   02....       LJMP    ?Subroutine0 & 0xFFFF
    599            
    600            return osal_build_uint32( buf, MAC_SRCMATCH_ENABLE_BITMAP_LEN );
    601          }
    602          
    603          /*********************************************************************
    604           * @fn          macSrcMatchGetExtAddrEnBit
    605           *
    606           * @brief       Return the SRCMATCH ExtAddr enable bitmap
    607           *
    608           * @param       none
    609           *
    610           * @return      uint24 - 24 bits bitmap
    611           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    612          static uint24 macSrcMatchGetExtAddrEnableBit( void )
   \                     macSrcMatchGetExtAddrEnableBit:
    613          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 3
   \   000004   74FD         MOV     A,#-0x3
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
    614            uint8 buf[MAC_SRCMATCH_ENABLE_BITMAP_LEN];
    615            
    616            MAC_RADIO_GET_SRC_EXTEN( buf );
   \   000009                ; Setup parameters for call to function macMemReadRam
   \   000009   7903         MOV     R1,#0x3
   \   00000B   AC..         MOV     R4,?XSP + 0
   \   00000D   AD..         MOV     R5,?XSP + 1
   \   00000F   7A86         MOV     R2,#-0x7a
   \   000011   02....       LJMP    ?Subroutine0 & 0xFFFF
    617            
    618            return osal_build_uint32( buf, MAC_SRCMATCH_ENABLE_BITMAP_LEN );
    619          }

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MAC_SrcMatchEnable::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MAC_SrcMatchEnable

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MAC_SrcMatchAddEntry::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MAC_SrcMatchAddEntry

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MAC_SrcMatchDeleteEntry::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MAC_SrcMatchDeleteEntry

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MAC_SrcMatchAckAllPending::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MAC_SrcMatchAckAllPending

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MAC_SrcMatchCheckAllPending::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MAC_SrcMatchCheckAllPending

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MAC_SrcMatchCheckResult::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MAC_SrcMatchCheckResult

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??macSrcMatchCheckSrcAddr::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    macSrcMatchCheckSrcAddr

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??macSrcMatchSetEnableBit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    macSrcMatchSetEnableBit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??macSrcMatchGetShortAddrEnableBit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    macSrcMatchGetShortAddrEnableBit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??macSrcMatchGetExtAddrEnableBit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    macSrcMatchGetExtAddrEnableBit
    620          
    621          

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      2      0   MAC_SrcMatchAckAllPending
      2     41   MAC_SrcMatchAddEntry
        0     37   -> macMemReadRam
        0     37   -> macMemWriteRam
        0     37   -> macSrcMatchCheckSrcAddr
        0     37   -> macSrcMatchGetExtAddrEnableBit
        0     37   -> macSrcMatchGetShortAddrEnableBit
        0     37   -> macSrcMatchSetEnableBit
        0     41   -> osal_buffer_uint24
        0     37   -> osal_build_uint32
      2      0   MAC_SrcMatchCheckAllPending
      2      0   MAC_SrcMatchCheckResult
      0      9   MAC_SrcMatchDeleteEntry
        0      9   -> macSrcMatchCheckSrcAddr
        0      9   -> macSrcMatchSetEnableBit
      2      0   MAC_SrcMatchEnable
      1     71   macSrcMatchCheckSrcAddr
        0     31   -> macMemReadRam
        0     31   -> macSrcMatchGetExtAddrEnableBit
        0     31   -> macSrcMatchGetShortAddrEnableBit
        0     34   -> osal_memcmp
      2     40   macSrcMatchGetExtAddrEnableBit
        2      3   -> macMemReadRam
        2      3   -> osal_build_uint32
      2     40   macSrcMatchGetShortAddrEnableBit
        2      3   -> macMemReadRam
        2      3   -> osal_build_uint32
      1     58   macSrcMatchSetEnableBit
        0     17   -> macSrcMatchGetExtAddrEnableBit
        0     17   -> macSrcMatchGetShortAddrEnableBit
        0     21   -> osal_buffer_uint24


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      13  ??Subroutine7_0
       6  ??Subroutine8_0
       7  ??Subroutine9_0
      19  ?Subroutine0
       8  ?Subroutine1
       2  ?Subroutine2
       6  ?Subroutine3
       4  ?Subroutine4
       9  ?Subroutine5
       2  ?Subroutine6
      34  MAC_SrcMatchAckAllPending
       6  MAC_SrcMatchAckAllPending::?relay
     722  MAC_SrcMatchAddEntry
       6  MAC_SrcMatchAddEntry::?relay
      20  MAC_SrcMatchCheckAllPending
       6  MAC_SrcMatchCheckAllPending::?relay
      25  MAC_SrcMatchCheckResult
       6  MAC_SrcMatchCheckResult::?relay
      87  MAC_SrcMatchDeleteEntry
       6  MAC_SrcMatchDeleteEntry::?relay
      44  MAC_SrcMatchEnable
       6  MAC_SrcMatchEnable::?relay
     272  macSrcMatchCheckSrcAddr
       6  macSrcMatchCheckSrcAddr::?relay
      20  macSrcMatchGetExtAddrEnableBit
       6  macSrcMatchGetExtAddrEnableBit::?relay
      20  macSrcMatchGetShortAddrEnableBit
       6  macSrcMatchGetShortAddrEnableBit::?relay
       1  macSrcMatchIsAckAllPending
       1  macSrcMatchIsEnabled
     230  macSrcMatchSetEnableBit
       6  macSrcMatchSetEnableBit::?relay

 
 1 550 bytes in segment BANKED_CODE
    60 bytes in segment BANK_RELAYS
     2 bytes in segment XDATA_Z
 
 1 610 bytes of CODE  memory
     2 bytes of XDATA memory

Errors: none
Warnings: none
