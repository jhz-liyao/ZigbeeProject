###############################################################################
#
# IAR C/C++ Compiler V9.30.1.3056 for 8051                24/Oct/2016  15:11:54
# Copyright 2004-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.7饮水机控制增加uart\Frame\ESP8266_Driver.c
#    Command line       =  
#        -f "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.7饮水机控制增加uart\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f
#        "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.7饮水机控制增加uart\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=50 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
#        -DREJOIN_POLL_RATE=440 "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack
#        Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.7饮水机控制增加uart\Frame\ESP8266_Driver.c"
#        -D LOG_OUT -D UART1_PROTOCOL_RESOLVER=1 -D xISQC -D NWK_AUTO_POLL -D
#        ZTOOL_P1 -D ISR_KEYINTERRUPT -D xMT_TASK -D xMT_SYS_FUNC -D
#        xMT_ZDO_FUNC -D xLCD_SUPPORTED=DEBUG -D xPOWER_SAVING -lC
#        "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.7饮水机控制增加uart\CC2530DB\WaterMachine\List"
#        -lA "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.7饮水机控制增加uart\CC2530DB\WaterMachine\List"
#        --diag_suppress Pe001,Pa010 -o
#        "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.7饮水机控制增加uart\CC2530DB\WaterMachine\Obj"
#        -e --no_code_motion --debug --core=plain --dptr=16,1
#        --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 8 -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack
#        Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.7饮水机控制增加uart\CC2530DB\"
#        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.7饮水机控制增加uart\CC2530DB\..\Source\"
#        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.7饮水机控制增加uart\CC2530DB\..\Frame\"
#        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.7饮水机控制增加uart\CC2530DB\..\Module\WaterMachine\"
#        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.7饮水机控制增加uart\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.7饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.7饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.7饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.7饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.7饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.7饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.7饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.7饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.7饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.7饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.7饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.7饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.7饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.7饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.7饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.7饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.7饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.7饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -Ohz
#    List file          =  
#        E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.7饮水机控制增加uart\CC2530DB\WaterMachine\List\ESP8266_Driver.lst
#    Object file        =  
#        E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.7饮水机控制增加uart\CC2530DB\WaterMachine\Obj\ESP8266_Driver.r51
#
###############################################################################

E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh 1.0.0\Projects\zstack\Samples\Demo_App_V1.7饮水机控制增加uart\Frame\ESP8266_Driver.c
      1          #include "ESP8266_Driver.h"
      2          #include "hal_uart.h"
      3          

   \                                 In  segment XDATA_I, align 1, keep-with-next
      4          ESP8266_CMD_T ESP_8266_CMD = {
   \                     ESP_8266_CMD:
   \   000000                DS 10
   \   00000A                REQUIRE `?<Initializer for ESP_8266_CMD>`
   \   00000A                REQUIRE __INIT_XDATA_I
      5              "AT+CWMODE=%d\r\n",
      6              "AT+CWJAP=\"%s\",\"%s\"\r\n",
      7              "AT+CIPMUX=1\r\n",
      8              "AT+CIPSERVER=1,8080\r\n",
      9              "AT+SEND=%d,%d\r\n"
     10          };
     11          
     12          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     13          QUEUE_T* ESP8266_CMD_Queue;
   \                     ESP8266_CMD_Queue:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
     14          

   \                                 In  segment XDATA_I, align 1, keep-with-next
     15          ESP8266_STATE ESP8266_State = ESP8266_BUSY; 
   \                     ESP8266_State:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for ESP8266_State>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     16          uint8_t ESP8266_CMD[ESP8266_CMD_LEN] = {0}; 
   \                     ESP8266_CMD:
   \   000000                DS 100
   \   000064                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     17          uint8_t ESP_Change = 0;
   \                     ESP_Change:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     18          
     19          
     20          
     21          
     22          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     23          void ESP8266_Init(void){
   \                     ESP8266_Init:
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
     24              ESP8266_CMD_Queue = Queue_Init(ESP8266_CMD , sizeof(uint8_t), ESP8266_CMD_LEN); 
   \   000004                ; Setup parameters for call to function Queue_Init
   \   000004   7C64         MOV     R4,#0x64
   \   000006   7D00         MOV     R5,#0x0
   \   000008   7901         MOV     R1,#0x1
   \   00000A   7A..         MOV     R2,#ESP8266_CMD & 0xff
   \   00000C   7B..         MOV     R3,#(ESP8266_CMD >> 8) & 0xff
   \   00000E   12....       LCALL   `??Queue_Init::?relay`; Banked call to: Queue_Init
   \   000011   90....       MOV     DPTR,#ESP8266_CMD_Queue
   \   000014   EA           MOV     A,R2
   \   000015   F0           MOVX    @DPTR,A
   \   000016   A3           INC     DPTR
   \   000017   EB           MOV     A,R3
   \   000018   F0           MOVX    @DPTR,A
     25              ESP8266_CMD_Send(ESP_8266_CMD.MultiConn);
   \   000019                ; Setup parameters for call to function ESP8266_CMD_Send
   \   000019   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   00001C   12....       LCALL   `??ESP8266_CMD_Send::?relay`; Banked call to: ESP8266_CMD_Send
     26              ESP8266_CMD_Send(ESP_8266_CMD.ServerMode);
   \   00001F                ; Setup parameters for call to function ESP8266_CMD_Send
   \   00001F   90....       MOV     DPTR,#ESP_8266_CMD + 6
   \   000022   12....       LCALL   ??Subroutine4_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   000025   12....       LCALL   `??ESP8266_CMD_Send::?relay`; Banked call to: ESP8266_CMD_Send
     27              
     28          }
   \   000028   D083         POP     DPH
   \   00002A   D082         POP     DPL
   \   00002C   02....       LJMP    ?BRET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   90....       MOV     DPTR,#ESP_8266_CMD + 4
   \   000003                REQUIRE ??Subroutine4_0
   \   000003                ; // Fall through to label ??Subroutine4_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine4_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FB           MOV     R3,A
   \   000005   22           RET
     29          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     30          void ESP8266_Poll(uint8_t* data, uint8_t len){
   \                     ESP8266_Poll:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
     31            if(strstr((char const*)data,"ready") != NULL){
   \   000009                ; Setup parameters for call to function strstr
   \   000009   7C..         MOV     R4,#`?<Constant "ready">` & 0xff
   \   00000B   7D..         MOV     R5,#(`?<Constant "ready">` >> 8) & 0xff
   \   00000D   12....       LCALL   `??strstr::?relay`   ; Banked call to: strstr
   \   000010   8B..         MOV     ?V1,R3
   \   000012   EA           MOV     A,R2
   \   000013   45..         ORL     A,?V1
   \   000015   600C         JZ      ??ESP8266_Poll_0
     32              ESP8266_State = ESP8266_READY; 
   \   000017   90....       MOV     DPTR,#ESP8266_State
   \   00001A   7402         MOV     A,#0x2
   \   00001C   F0           MOVX    @DPTR,A
     33              Log.waring("路由器启动完成\r\n");  
   \   00001D                ; Setup parameters for indirect call
   \   00001D   7A..         MOV     R2,#`?<Constant "\\302\\267\\323\\311\\306\\367\\306\\364\\2` & 0xff
   \   00001F   7B..         MOV     R3,#(`?<Constant "\\302\\267\\323\\311\\306\\367\\306\\364\\2` >> 8) & 0xff
   \   000021   804F         SJMP    ??ESP8266_Poll_1
     34            }else if(strstr((char const*)data,"WIFI GOT IP") != NULL){
   \                     ??ESP8266_Poll_0:
   \   000023                ; Setup parameters for call to function strstr
   \   000023   7C..         MOV     R4,#`?<Constant "WIFI GOT IP">` & 0xff
   \   000025   7D..         MOV     R5,#(`?<Constant "WIFI GOT IP">` >> 8) & 0xff
   \   000027   EE           MOV     A,R6
   \   000028   FA           MOV     R2,A
   \   000029   EF           MOV     A,R7
   \   00002A   FB           MOV     R3,A
   \   00002B   12....       LCALL   `??strstr::?relay`   ; Banked call to: strstr
   \   00002E   8B..         MOV     ?V1,R3
   \   000030   EA           MOV     A,R2
   \   000031   45..         ORL     A,?V1
   \   000033   6021         JZ      ??ESP8266_Poll_2
     35              ESP8266_State = ESP8266_CONNECTED;
   \   000035   90....       MOV     DPTR,#ESP8266_State
   \   000038   7404         MOV     A,#0x4
   \   00003A   F0           MOVX    @DPTR,A
     36              Log.waring("路由器连接成功\r\n"); 
   \   00003B                ; Setup parameters for indirect call
   \   00003B   7A..         MOV     R2,#`?<Constant "\\302\\267\\323\\311\\306\\367\\301\\254\\2` & 0xff
   \   00003D   7B..         MOV     R3,#(`?<Constant "\\302\\267\\323\\311\\306\\367\\301\\254\\2` >> 8) & 0xff
   \   00003F   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   000042   12....       LCALL   ?CALL_IND
     37              ESP8266_CMD_Send(ESP_8266_CMD.MultiConn);
   \   000045                ; Setup parameters for call to function ESP8266_CMD_Send
   \   000045   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   000048   12....       LCALL   `??ESP8266_CMD_Send::?relay`; Banked call to: ESP8266_CMD_Send
     38              ESP8266_CMD_Send(ESP_8266_CMD.ServerMode);
   \   00004B                ; Setup parameters for call to function ESP8266_CMD_Send
   \   00004B   90....       MOV     DPTR,#ESP_8266_CMD + 6
   \   00004E   12....       LCALL   ??Subroutine4_0 & 0xFFFF
     39            }else if(strstr((char const*)data,"WIFI DISCONNECT") != NULL){
   \                     ??CrossCallReturnLabel_4:
   \   000051   12....       LCALL   `??ESP8266_CMD_Send::?relay`; Banked call to: ESP8266_CMD_Send
   \   000054   8049         SJMP    ??ESP8266_Poll_3
   \                     ??ESP8266_Poll_2:
   \   000056                ; Setup parameters for call to function strstr
   \   000056   7C..         MOV     R4,#`?<Constant "WIFI DISCONNECT">` & 0xff
   \   000058   7D..         MOV     R5,#(`?<Constant "WIFI DISCONNECT">` >> 8) & 0xff
   \   00005A   EE           MOV     A,R6
   \   00005B   FA           MOV     R2,A
   \   00005C   EF           MOV     A,R7
   \   00005D   FB           MOV     R3,A
   \   00005E   12....       LCALL   `??strstr::?relay`   ; Banked call to: strstr
   \   000061   8B..         MOV     ?V1,R3
   \   000063   EA           MOV     A,R2
   \   000064   45..         ORL     A,?V1
   \   000066   6012         JZ      ??ESP8266_Poll_4
     40              ESP8266_State = ESP8266_CONNFAIL;
   \   000068   90....       MOV     DPTR,#ESP8266_State
   \   00006B   7405         MOV     A,#0x5
   \   00006D   F0           MOVX    @DPTR,A
     41              Log.waring("路由器连接失败\r\n");
   \   00006E                ; Setup parameters for indirect call
   \   00006E   7A..         MOV     R2,#`?<Constant "\\302\\267\\323\\311\\306\\367\\301\\254\\2_1` & 0xff
   \   000070   7B..         MOV     R3,#(`?<Constant "\\302\\267\\323\\311\\306\\367\\301\\254\\2_1` >> 8) & 0xff
     42            }else if(strstr((char const*)data,"OK") != NULL){
   \                     ??ESP8266_Poll_1:
   \   000072   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   000075   12....       LCALL   ?CALL_IND
   \   000078   8025         SJMP    ??ESP8266_Poll_3
   \                     ??ESP8266_Poll_4:
   \   00007A                ; Setup parameters for call to function strstr
   \   00007A   7C..         MOV     R4,#`?<Constant "OK">` & 0xff
   \   00007C   7D..         MOV     R5,#(`?<Constant "OK">` >> 8) & 0xff
   \   00007E   EE           MOV     A,R6
   \   00007F   FA           MOV     R2,A
   \   000080   EF           MOV     A,R7
   \   000081   FB           MOV     R3,A
   \   000082   12....       LCALL   `??strstr::?relay`   ; Banked call to: strstr
   \   000085   8B..         MOV     ?V1,R3
   \   000087   EA           MOV     A,R2
   \   000088   45..         ORL     A,?V1
   \   00008A   6008         JZ      ??ESP8266_Poll_5
     43              ESP8266_State = ESP8266_READY;
   \   00008C   90....       MOV     DPTR,#ESP8266_State
   \   00008F   7402         MOV     A,#0x2
   \   000091   F0           MOVX    @DPTR,A
   \   000092   800B         SJMP    ??ESP8266_Poll_3
     44            }else if(strstr((char const*)data,"ERROR") != NULL){
   \                     ??ESP8266_Poll_5:
   \   000094                ; Setup parameters for call to function strstr
   \   000094   7C..         MOV     R4,#`?<Constant "ERROR">` & 0xff
   \   000096   7D..         MOV     R5,#(`?<Constant "ERROR">` >> 8) & 0xff
   \   000098   EE           MOV     A,R6
   \   000099   FA           MOV     R2,A
   \   00009A   EF           MOV     A,R7
   \   00009B   FB           MOV     R3,A
   \   00009C   12....       LCALL   `??strstr::?relay`   ; Banked call to: strstr
     45              //ESP8266_State = ESP8266_ERROR; 
     46              //Log.waring("WIFI模块ERROR\r\n"); 
     47            }   
     48          }
   \                     ??ESP8266_Poll_3:
   \   00009F                REQUIRE ?Subroutine0
   \   00009F                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   90....       MOV     DPTR,#Log
   \   000003                REQUIRE ??Subroutine3_0
   \   000003                ; // Fall through to label ??Subroutine3_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine3_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F583         MOV     DPH,A
   \   000006   8882         MOV     DPL,R0
   \   000008   22           RET
     49          
     50          
     51          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     52          int8_t ESP8266_CMD_Send(uint8_t* CMD){ 
   \                     ESP8266_CMD_Send:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
     53            uint8_t len = strlen((char const*)CMD),i;
   \   000009                ; Setup parameters for call to function strlen
   \   000009   12....       LCALL   `??strlen::?relay`   ; Banked call to: strlen
   \   00000C   EA           MOV     A,R2
   \   00000D   F5..         MOV     ?V1,A
     54            for(i = 0; i < len; i++)
   \   00000F   75..00       MOV     ?V0,#0x0
   \   000012   8013         SJMP    ??ESP8266_CMD_Send_0
     55              Queue_Put(ESP8266_CMD_Queue,CMD+i);
   \                     ??ESP8266_CMD_Send_1:
   \   000014                ; Setup parameters for call to function Queue_Put
   \   000014   A8..         MOV     R0,?V0
   \   000016   EE           MOV     A,R6
   \   000017   28           ADD     A,R0
   \   000018   FC           MOV     R4,A
   \   000019   E4           CLR     A
   \   00001A   3F           ADDC    A,R7
   \   00001B   FD           MOV     R5,A
   \   00001C   90....       MOV     DPTR,#ESP8266_CMD_Queue
   \   00001F   12....       LCALL   ??Subroutine4_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   000022   12....       LCALL   `??Queue_Put::?relay`; Banked call to: Queue_Put
   \   000025   05..         INC     ?V0
   \                     ??ESP8266_CMD_Send_0:
   \   000027   E5..         MOV     A,?V0
   \   000029   C3           CLR     C
   \   00002A   95..         SUBB    A,?V1
   \   00002C   40E6         JC      ??ESP8266_CMD_Send_1
     56            return 0;
   \   00002E   7900         MOV     R1,#0x0
   \   000030   80..         SJMP    ?Subroutine0
     57          }
     58          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     59          void SetSsidPwd(char* SSID, char* PWD){
   \                     SetSsidPwd:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 80
   \   000005   74B0         MOV     A,#-0x50
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0,R2
   \   00000C   8B..         MOV     ?V1,R3
   \   00000E   EC           MOV     A,R4
   \   00000F   FE           MOV     R6,A
   \   000010   ED           MOV     A,R5
   \   000011   FF           MOV     R7,A
     60            char Ssid[20] = {0};
   \   000012   90....       MOV     DPTR,#`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0`
   \   000015   7414         MOV     A,#0x14
   \   000017   12....       LCALL   ?XSTACK_DISP102_8
   \   00001A   7414         MOV     A,#0x14
   \   00001C   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
     61            char  Pwd[20] = {0};
   \   00001F   90....       MOV     DPTR,#`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_1`
   \   000022   AC..         MOV     R4,?XSP + 0
   \   000024   AD..         MOV     R5,?XSP + 1
   \   000026   7414         MOV     A,#0x14
   \   000028   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
     62            memcpy(Ssid, SSID, strlen(SSID));
   \   00002B                ; Setup parameters for call to function strlen
   \   00002B   12....       LCALL   `??strlen::?relay`   ; Banked call to: strlen
   \   00002E   8A..         MOV     ?V2,R2
   \   000030   8B..         MOV     ?V3,R3
   \   000032                ; Setup parameters for call to function memcpy
   \   000032   78..         MOV     R0,#?V2
   \   000034   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000037   AC..         MOV     R4,?V0
   \   000039   AD..         MOV     R5,?V1
   \   00003B   7416         MOV     A,#0x16
   \   00003D   12....       LCALL   ?XSTACK_DISP101_8
   \   000040   12....       LCALL   `??memcpy::?relay`   ; Banked call to: memcpy
   \   000043   7402         MOV     A,#0x2
   \   000045   12....       LCALL   ?DEALLOC_XSTACK8
     63            memcpy(Pwd, PWD, strlen(PWD));
   \   000048                ; Setup parameters for call to function strlen
   \   000048   EE           MOV     A,R6
   \   000049   FA           MOV     R2,A
   \   00004A   EF           MOV     A,R7
   \   00004B   FB           MOV     R3,A
   \   00004C   12....       LCALL   `??strlen::?relay`   ; Banked call to: strlen
   \   00004F   8A..         MOV     ?V0,R2
   \   000051   8B..         MOV     ?V1,R3
   \   000053                ; Setup parameters for call to function memcpy
   \   000053   78..         MOV     R0,#?V0
   \   000055   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000058   EE           MOV     A,R6
   \   000059   FC           MOV     R4,A
   \   00005A   EF           MOV     A,R7
   \   00005B   FD           MOV     R5,A
   \   00005C   7402         MOV     A,#0x2
   \   00005E   12....       LCALL   ?XSTACK_DISP101_8
   \   000061   12....       LCALL   `??memcpy::?relay`   ; Banked call to: memcpy
   \   000064   7402         MOV     A,#0x2
   \   000066   12....       LCALL   ?DEALLOC_XSTACK8
     64            uint8_t cmd[40] = {0}; 
   \   000069   90....       MOV     DPTR,#`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_2`
   \   00006C   7428         MOV     A,#0x28
   \   00006E   12....       LCALL   ?XSTACK_DISP102_8
   \   000071   7428         MOV     A,#0x28
   \   000073   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
     65            sprintf((char*)cmd, (char const*)ESP_8266_CMD.SsidPwd, Ssid, Pwd);
   \   000076                ; Setup parameters for call to function sprintf
   \   000076   A8..         MOV     R0,?XSP + 0
   \   000078   A9..         MOV     R1,?XSP + 1
   \   00007A   88..         MOV     ?V0,R0
   \   00007C   89..         MOV     ?V1,R1
   \   00007E   78..         MOV     R0,#?V0
   \   000080   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000083   7416         MOV     A,#0x16
   \   000085   12....       LCALL   ?XSTACK_DISP100_8
   \   000088   88..         MOV     ?V0,R0
   \   00008A   89..         MOV     ?V1,R1
   \   00008C   78..         MOV     R0,#?V0
   \   00008E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000091   90....       MOV     DPTR,#ESP_8266_CMD + 2
   \   000094   E0           MOVX    A,@DPTR
   \   000095   FC           MOV     R4,A
   \   000096   A3           INC     DPTR
   \   000097   E0           MOVX    A,@DPTR
   \   000098   FD           MOV     R5,A
   \   000099   742C         MOV     A,#0x2c
   \   00009B   12....       LCALL   ?XSTACK_DISP101_8
   \   00009E   12....       LCALL   `??sprintf::?relay`  ; Banked call to: sprintf
   \   0000A1   7404         MOV     A,#0x4
   \   0000A3   12....       LCALL   ?DEALLOC_XSTACK8
     66            ESP8266_CMD_Send(cmd);
   \   0000A6                ; Setup parameters for call to function ESP8266_CMD_Send
   \   0000A6   7428         MOV     A,#0x28
   \   0000A8   12....       LCALL   ?XSTACK_DISP101_8
   \   0000AB   12....       LCALL   `??ESP8266_CMD_Send::?relay`; Banked call to: ESP8266_CMD_Send
     67            ESP8266_CMD_Send(ESP_8266_CMD.MultiConn);
   \   0000AE                ; Setup parameters for call to function ESP8266_CMD_Send
   \   0000AE   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   0000B1   12....       LCALL   `??ESP8266_CMD_Send::?relay`; Banked call to: ESP8266_CMD_Send
     68            ESP8266_CMD_Send(ESP_8266_CMD.ServerMode);
   \   0000B4                ; Setup parameters for call to function ESP8266_CMD_Send
   \   0000B4   90....       MOV     DPTR,#ESP_8266_CMD + 6
   \   0000B7   12....       LCALL   ??Subroutine4_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   0000BA   12....       LCALL   `??ESP8266_CMD_Send::?relay`; Banked call to: ESP8266_CMD_Send
     69          }  
   \   0000BD   7450         MOV     A,#0x50
   \   0000BF   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000C2   7F06         MOV     R7,#0x6
   \   0000C4   02....       LJMP    ?BANKED_LEAVE_XDATA
     70            
     71            

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     72          void ESP8266_Run(void){ 
   \                     ESP8266_Run:
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 41
   \   000005   74D7         MOV     A,#-0x29
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
     73            if(ESP8266_State != ESP8266_BUSY && ESP8266_State != ESP8266_ERROR){
   \   00000A   90....       MOV     DPTR,#ESP8266_State
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   6401         XRL     A,#0x1
   \   000010   6073         JZ      ??ESP8266_Run_0
   \   000012   E0           MOVX    A,@DPTR
   \   000013   6403         XRL     A,#0x3
   \   000015   6061         JZ      ??ESP8266_Run_1
     74              uint8_t cmd[40] = {0},i = 0, j = 0, data;
                                                  ^
Warning[Pe177]: variable "j" was declared but never referenced
   \   000017   90....       MOV     DPTR,#`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_3`
   \   00001A   7401         MOV     A,#0x1
   \   00001C   12....       LCALL   ?XSTACK_DISP102_8
   \   00001F   7428         MOV     A,#0x28
   \   000021   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
   \   000024   7E00         MOV     R6,#0x0
     75              while(Queue_Get(ESP8266_CMD_Queue,&data) == 0){
   \                     ??ESP8266_Run_2:
   \   000026                ; Setup parameters for call to function Queue_Get
   \   000026   AC..         MOV     R4,?XSP + 0
   \   000028   AD..         MOV     R5,?XSP + 1
   \   00002A   90....       MOV     DPTR,#ESP8266_CMD_Queue
   \   00002D   12....       LCALL   ??Subroutine4_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   000030   12....       LCALL   `??Queue_Get::?relay`; Banked call to: Queue_Get
   \   000033   E9           MOV     A,R1
   \   000034   7029         JNZ     ??ESP8266_Run_3
     76                  cmd[i] = data;
   \   000036   85..82       MOV     DPL,?XSP + 0
   \   000039   85..83       MOV     DPH,?XSP + 1
   \   00003C   E0           MOVX    A,@DPTR
   \   00003D   C0E0         PUSH    A
   \   00003F   EE           MOV     A,R6
   \   000040   F8           MOV     R0,A
   \   000041   7401         MOV     A,#0x1
   \   000043   12....       LCALL   ?XSTACK_DISP0_8
   \   000046   E582         MOV     A,DPL
   \   000048   28           ADD     A,R0
   \   000049   F582         MOV     DPL,A
   \   00004B   E4           CLR     A
   \   00004C   3583         ADDC    A,DPH
   \   00004E   F583         MOV     DPH,A
   \   000050   D0E0         POP     A
   \   000052   F0           MOVX    @DPTR,A
     77                  i++;
   \   000053   0E           INC     R6
     78                  if(data == '\n')
   \   000054   85..82       MOV     DPL,?XSP + 0
   \   000057   85..83       MOV     DPH,?XSP + 1
   \   00005A   E0           MOVX    A,@DPTR
   \   00005B   640A         XRL     A,#0xa
   \   00005D   70C7         JNZ     ??ESP8266_Run_2
     79                    break;
     80              }
     81              if(i != 0){ 
   \                     ??ESP8266_Run_3:
   \   00005F   EE           MOV     A,R6
   \   000060   6023         JZ      ??ESP8266_Run_0
     82                 ESP8266_State = ESP8266_BUSY;
   \   000062   90....       MOV     DPTR,#ESP8266_State
   \   000065   7401         MOV     A,#0x1
   \   000067   F0           MOVX    @DPTR,A
     83                 //printf("cmdlen %d\r\n", i);
     84                 HalUARTWrite(HAL_UART_PORT_1,cmd,i); 
   \   000068                ; Setup parameters for call to function HalUARTWrite
   \   000068   EE           MOV     A,R6
   \   000069   FC           MOV     R4,A
   \   00006A   7D00         MOV     R5,#0x0
   \   00006C   7401         MOV     A,#0x1
   \   00006E   12....       LCALL   ?XSTACK_DISP101_8
   \   000071   7901         MOV     R1,#0x1
   \   000073   12....       LCALL   `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
   \   000076   800D         SJMP    ??ESP8266_Run_0
     85              }
     86            }else if(ESP8266_State == ESP8266_ERROR){
     87              //HalUARTWrite(HAL_UART_PORT_1,"AT+RST",strlen("AT+RST"));
     88              Log.error("ESP8266遇到ERROR");
   \                     ??ESP8266_Run_1:
   \   000078                ; Setup parameters for indirect call
   \   000078   7A..         MOV     R2,#`?<Constant "ESP8266\\323\\366\\265\\275ERROR">` & 0xff
   \   00007A   7B..         MOV     R3,#(`?<Constant "ESP8266\\323\\366\\265\\275ERROR">` >> 8) & 0xff
   \   00007C   90....       MOV     DPTR,#Log + 2
   \   00007F   12....       LCALL   ??Subroutine3_0 & 0xFFFF
     89            }else{
   \                     ??CrossCallReturnLabel_0:
   \   000082   12....       LCALL   ?CALL_IND
     90              //Log.waring("ESP8266 BUSY\r\n");
     91            } 
     92          }
   \                     ??ESP8266_Run_0:
   \   000085   7429         MOV     A,#0x29
   \   000087   12....       LCALL   ?DEALLOC_XSTACK8
   \   00008A   7F01         MOV     R7,#0x1
   \   00008C   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for ESP_8266_CMD>`:
   \   000000   ....         DW `?<Constant "AT+CWMODE=%d\\r\\n">`
   \   000002   ....         DW `?<Constant "AT+CWJAP=\\"%s\\",\\"%s\\"\\r\\n">`
   \   000004   ....         DW `?<Constant "AT+CIPMUX=1\\r\\n">`
   \   000006   ....         DW `?<Constant "AT+CIPSERVER=1,8080\\r\\n">`
   \   000008   ....         DW `?<Constant "AT+SEND=%d,%d\\r\\n">`

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for ESP8266_State>`:
   \   000000   01           DB 1

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ESP8266_Init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ESP8266_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ESP8266_Poll::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ESP8266_Poll

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ESP8266_CMD_Send::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ESP8266_CMD_Send

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SetSsidPwd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SetSsidPwd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ESP8266_Run::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ESP8266_Run

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "AT+CWMODE=%d\\r\\n">`:
   \   000000   41542B43     DB "AT+CWMODE=%d\015\012"
   \            574D4F44
   \            453D2564
   \            0D0A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "AT+CWJAP=\\"%s\\",\\"%s\\"\\r\\n">`:
   \   000000   41542B43     DB "AT+CWJAP=\"%s\",\"%s\"\015\012"
   \            574A4150
   \            3D222573
   \            222C2225
   \            73220D0A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "AT+CIPMUX=1\\r\\n">`:
   \   000000   41542B43     DB "AT+CIPMUX=1\015\012"
   \            49504D55
   \            583D310D
   \            0A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "AT+CIPSERVER=1,8080\\r\\n">`:
   \   000000   41542B43     DB "AT+CIPSERVER=1,8080\015\012"
   \            49505345
   \            52564552
   \            3D312C38
   \            3038300D
   \            0A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "AT+SEND=%d,%d\\r\\n">`:
   \   000000   41542B53     DB "AT+SEND=%d,%d\015\012"
   \            454E443D
   \            25642C25
   \            640D0A00

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "ready">`:
   \   000000   72656164     DB "ready"
   \            7900    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\302\\267\\323\\311\\306\\367\\306\\364\\2`:
   \   000000   C2B7D3C9     DB "\302\267\323\311\306\367\306\364\266\257\315\352\263\311\015\012"
   \            C6F7C6F4
   \            B6AFCDEA
   \            B3C90D0A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "WIFI GOT IP">`:
   \   000000   57494649     DB "WIFI GOT IP"
   \            20474F54
   \            20495000

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\302\\267\\323\\311\\306\\367\\301\\254\\2`:
   \   000000   C2B7D3C9     DB "\302\267\323\311\306\367\301\254\275\323\263\311\271\246\015\012"
   \            C6F7C1AC
   \            BDD3B3C9
   \            B9A60D0A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "WIFI DISCONNECT">`:
   \   000000   57494649     DB "WIFI DISCONNECT"
   \            20444953
   \            434F4E4E
   \            45435400

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\302\\267\\323\\311\\306\\367\\301\\254\\2_1`:
   \   000000   C2B7D3C9     DB "\302\267\323\311\306\367\301\254\275\323\312\247\260\334\015\012"
   \            C6F7C1AC
   \            BDD3CAA7
   \            B0DC0D0A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "OK">`:
   \   000000   4F4B00       DB "OK"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "ERROR">`:
   \   000000   4552524F     DB "ERROR"
   \            5200    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0`:
   \   000000   00           DB 0
   \   000001   00           DB 0
   \   000002   00           DB 0
   \   000003   00           DB 0
   \   000004   00           DB 0
   \   000005   00           DB 0
   \   000006   00           DB 0
   \   000007   00           DB 0
   \   000008   00           DB 0
   \   000009   00           DB 0
   \   00000A   00           DB 0
   \   00000B   00           DB 0
   \   00000C   00           DB 0
   \   00000D   00           DB 0
   \   00000E   00           DB 0
   \   00000F   00           DB 0
   \   000010   00           DB 0
   \   000011   00           DB 0
   \   000012   00           DB 0
   \   000013   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_1`:
   \   000000   00           DB 0
   \   000001   00           DB 0
   \   000002   00           DB 0
   \   000003   00           DB 0
   \   000004   00           DB 0
   \   000005   00           DB 0
   \   000006   00           DB 0
   \   000007   00           DB 0
   \   000008   00           DB 0
   \   000009   00           DB 0
   \   00000A   00           DB 0
   \   00000B   00           DB 0
   \   00000C   00           DB 0
   \   00000D   00           DB 0
   \   00000E   00           DB 0
   \   00000F   00           DB 0
   \   000010   00           DB 0
   \   000011   00           DB 0
   \   000012   00           DB 0
   \   000013   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_2`:
   \   000000   00           DB 0
   \   000001   00           DB 0
   \   000002   00           DB 0
   \   000003   00           DB 0
   \   000004   00           DB 0
   \   000005   00           DB 0
   \   000006   00           DB 0
   \   000007   00           DB 0
   \   000008   00           DB 0
   \   000009   00           DB 0
   \   00000A   00           DB 0
   \   00000B   00           DB 0
   \   00000C   00           DB 0
   \   00000D   00           DB 0
   \   00000E   00           DB 0
   \   00000F   00           DB 0
   \   000010   00           DB 0
   \   000011   00           DB 0
   \   000012   00           DB 0
   \   000013   00           DB 0
   \   000014   00           DB 0
   \   000015   00           DB 0
   \   000016   00           DB 0
   \   000017   00           DB 0
   \   000018   00           DB 0
   \   000019   00           DB 0
   \   00001A   00           DB 0
   \   00001B   00           DB 0
   \   00001C   00           DB 0
   \   00001D   00           DB 0
   \   00001E   00           DB 0
   \   00001F   00           DB 0
   \   000020   00           DB 0
   \   000021   00           DB 0
   \   000022   00           DB 0
   \   000023   00           DB 0
   \   000024   00           DB 0
   \   000025   00           DB 0
   \   000026   00           DB 0
   \   000027   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_3`:
   \   000000   00           DB 0
   \   000001   00           DB 0
   \   000002   00           DB 0
   \   000003   00           DB 0
   \   000004   00           DB 0
   \   000005   00           DB 0
   \   000006   00           DB 0
   \   000007   00           DB 0
   \   000008   00           DB 0
   \   000009   00           DB 0
   \   00000A   00           DB 0
   \   00000B   00           DB 0
   \   00000C   00           DB 0
   \   00000D   00           DB 0
   \   00000E   00           DB 0
   \   00000F   00           DB 0
   \   000010   00           DB 0
   \   000011   00           DB 0
   \   000012   00           DB 0
   \   000013   00           DB 0
   \   000014   00           DB 0
   \   000015   00           DB 0
   \   000016   00           DB 0
   \   000017   00           DB 0
   \   000018   00           DB 0
   \   000019   00           DB 0
   \   00001A   00           DB 0
   \   00001B   00           DB 0
   \   00001C   00           DB 0
   \   00001D   00           DB 0
   \   00001E   00           DB 0
   \   00001F   00           DB 0
   \   000020   00           DB 0
   \   000021   00           DB 0
   \   000022   00           DB 0
   \   000023   00           DB 0
   \   000024   00           DB 0
   \   000025   00           DB 0
   \   000026   00           DB 0
   \   000027   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "ESP8266\\323\\366\\265\\275ERROR">`:
   \   000000   45535038     DB "ESP8266\323\366\265\275ERROR"
   \            323636D3
   \            F6B5BD45
   \            52524F52
   \            00      
     93          
     94            
     95            

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0    104   ESP8266_CMD_Send
        0     10   -> Queue_Put
        0     10   -> strlen
      2      0   ESP8266_Init
        2      0   -> ESP8266_CMD_Send
        2      0   -> Queue_Init
      0     10   ESP8266_Poll
        0     10   -> ESP8266_CMD_Send
        0     10   -> strstr
      1     50   ESP8266_Run
        0     50   -> HalUARTWrite
        0     50   -> Queue_Get
      0     98   SetSsidPwd
        0     94   -> ESP8266_CMD_Send
        0     96   -> memcpy
        0     98   -> sprintf
        0     94   -> strlen


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      14  ?<Constant "AT+CIPMUX=1\r\n">
      22  ?<Constant "AT+CIPSERVER=1,8080\r\n">
      21  ?<Constant "AT+CWJAP=\"%s\",\"%s\"\r\n">
      15  ?<Constant "AT+CWMODE=%d\r\n">
      16  ?<Constant "AT+SEND=%d,%d\r\n">
       6  ?<Constant "ERROR">
      17  ?<Constant "ESP8266\323\366\265\275ERROR">
       3  ?<Constant "OK">
      16  ?<Constant "WIFI DISCONNECT">
      12  ?<Constant "WIFI GOT IP">
      17  ?<Constant "\302\267\323\311\306\367\301\254\2
      17  ?<Constant "\302\267\323\311\306\367\301\254\2_1
      17  ?<Constant "\302\267\323\311\306\367\306\364\2
       6  ?<Constant "ready">
      20  ?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
      20  ?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_1
      40  ?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_2
      40  ?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_3
       1  ?<Initializer for ESP8266_State>
      10  ?<Initializer for ESP_8266_CMD>
       9  ??Subroutine3_0
       6  ??Subroutine4_0
       5  ?Subroutine0
       3  ?Subroutine1
       3  ?Subroutine2
     100  ESP8266_CMD
       2  ESP8266_CMD_Queue
      50  ESP8266_CMD_Send
       6  ESP8266_CMD_Send::?relay
      47  ESP8266_Init
       6  ESP8266_Init::?relay
     159  ESP8266_Poll
       6  ESP8266_Poll::?relay
     143  ESP8266_Run
       6  ESP8266_Run::?relay
       1  ESP8266_State
      10  ESP_8266_CMD
       1  ESP_Change
     199  SetSsidPwd
       6  SetSsidPwd::?relay

 
 624 bytes in segment BANKED_CODE
  30 bytes in segment BANK_RELAYS
  11 bytes in segment XDATA_I
  11 bytes in segment XDATA_ID
 319 bytes in segment XDATA_ROM_C
 103 bytes in segment XDATA_Z
 
 665 bytes of CODE  memory
 319 bytes of CONST memory
 114 bytes of XDATA memory

Errors: none
Warnings: 1
