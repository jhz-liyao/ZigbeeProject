###############################################################################
#
# IAR C/C++ Compiler V9.30.1.3056 for 8051                24/Oct/2016  15:11:58
# Copyright 2004-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.7饮水机控制增加uart\Frame\Queue.c
#    Command line       =  
#        -f "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.7饮水机控制增加uart\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f
#        "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.7饮水机控制增加uart\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=50 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
#        -DREJOIN_POLL_RATE=440 "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack
#        Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.7饮水机控制增加uart\Frame\Queue.c"
#        -D LOG_OUT -D UART1_PROTOCOL_RESOLVER=1 -D xISQC -D NWK_AUTO_POLL -D
#        ZTOOL_P1 -D ISR_KEYINTERRUPT -D xMT_TASK -D xMT_SYS_FUNC -D
#        xMT_ZDO_FUNC -D xLCD_SUPPORTED=DEBUG -D xPOWER_SAVING -lC
#        "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.7饮水机控制增加uart\CC2530DB\WaterMachine\List"
#        -lA "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.7饮水机控制增加uart\CC2530DB\WaterMachine\List"
#        --diag_suppress Pe001,Pa010 -o
#        "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.7饮水机控制增加uart\CC2530DB\WaterMachine\Obj"
#        -e --no_code_motion --debug --core=plain --dptr=16,1
#        --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 8 -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack
#        Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.7饮水机控制增加uart\CC2530DB\"
#        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.7饮水机控制增加uart\CC2530DB\..\Source\"
#        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.7饮水机控制增加uart\CC2530DB\..\Frame\"
#        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.7饮水机控制增加uart\CC2530DB\..\Module\WaterMachine\"
#        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.7饮水机控制增加uart\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.7饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.7饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.7饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.7饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.7饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.7饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.7饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.7饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.7饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.7饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.7饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.7饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.7饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.7饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.7饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.7饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.7饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.7饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -Ohz
#    List file          =  
#        E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.7饮水机控制增加uart\CC2530DB\WaterMachine\List\Queue.lst
#    Object file        =  
#        E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.7饮水机控制增加uart\CC2530DB\WaterMachine\Obj\Queue.r51
#
###############################################################################

E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh 1.0.0\Projects\zstack\Samples\Demo_App_V1.7饮水机控制增加uart\Frame\Queue.c
      1          #include <stdio.h>
      2          #include <string.h>
      3          #include "Queue.h"  
      4          /*
      5           *工具包
      6           *author：李尧 
      7           *time：2015年8月26日10:41:23
      8           */
      9          
     10          //###################################队列相关函数###################################
     11          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     12          QUEUE_T queue_list[QUEUE_MAXNUM] = {0}; 
   \                     queue_list:
   \   000000                DS 70
   \   000046                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     13          u8 queue_locd = 0;
   \                     queue_locd:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     14          /****************************************************
     15          	函数名:	queue_init
     16          	功能:	队列初始化
     17          	参数:	数组名，数组单个元素大小，数组元素个数
     18          	返回值:	队列句柄 或 NULL
     19          	作者:	liyao 2015年9月8日14:10:51
     20          ****************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     21          QUEUE_T* Queue_Init(void* _array,uint8_t _single_size ,uint16_t _count){ 
   \                     Queue_Init:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   89..         MOV     ?V0,R1
     22          	uint8_t i = 0;
   \   00000B   75..00       MOV     ?V1,#0x0
     23          	QUEUE_T* queue = NULL;
   \   00000E   7A00         MOV     R2,#0x0
   \   000010   7B00         MOV     R3,#0x0
     24          	for(i = 0; i < QUEUE_MAXNUM; i++)
     25          		if(queue_list[i].use_state == 0)
   \                     ??Queue_Init_0:
   \   000012   E5..         MOV     A,?V1
   \   000014   75F00E       MOV     B,#0xe
   \   000017   A4           MUL     AB
   \   000018   F8           MOV     R0,A
   \   000019   85F0..       MOV     ?V2,B
   \   00001C   A9..         MOV     R1,?V2
   \   00001E   74..         MOV     A,#(queue_list + 12) & 0xff
   \   000020   28           ADD     A,R0
   \   000021   F582         MOV     DPL,A
   \   000023   74..         MOV     A,#((queue_list + 12) >> 8) & 0xff
   \   000025   39           ADDC    A,R1
   \   000026   F583         MOV     DPH,A
   \   000028   E0           MOVX    A,@DPTR
   \   000029   7008         JNZ     ??Queue_Init_1
     26          			queue = &queue_list[i];
   \   00002B   74..         MOV     A,#queue_list & 0xff
   \   00002D   28           ADD     A,R0
   \   00002E   FA           MOV     R2,A
   \   00002F   74..         MOV     A,#(queue_list >> 8) & 0xff
   \   000031   39           ADDC    A,R1
   \   000032   FB           MOV     R3,A
   \                     ??Queue_Init_1:
   \   000033   05..         INC     ?V1
   \   000035   E5..         MOV     A,?V1
   \   000037   C3           CLR     C
   \   000038   9405         SUBB    A,#0x5
   \   00003A   40D6         JC      ??Queue_Init_0
     27          	if(queue == NULL)
   \   00003C   EA           MOV     A,R2
   \   00003D   4B           ORL     A,R3
   \   00003E   7006         JNZ     ??Queue_Init_2
     28          		return NULL;
   \   000040   7A00         MOV     R2,#0x0
   \   000042   7B00         MOV     R3,#0x0
   \   000044   8037         SJMP    ??Queue_Init_3
     29          	queue->use_state = 1;
   \                     ??Queue_Init_2:
   \   000046   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   000049   7401         MOV     A,#0x1
   \   00004B   F0           MOVX    @DPTR,A
     30          	queue->single_size = _single_size;
   \   00004C   8A82         MOV     DPL,R2
   \   00004E   8B83         MOV     DPH,R3
   \   000050   A3           INC     DPTR
   \   000051   A3           INC     DPTR
   \   000052   E5..         MOV     A,?V0
   \   000054   12....       LCALL   ?Subroutine8 & 0xFFFF
     31          	queue->count = _count;
   \                     ??CrossCallReturnLabel_10:
   \   000057   EC           MOV     A,R4
   \   000058   F0           MOVX    @DPTR,A
   \   000059   A3           INC     DPTR
   \   00005A   ED           MOV     A,R5
   \   00005B   F0           MOVX    @DPTR,A
     32          	queue->start = queue->end = queue->num = queue->full_flag =0; 
   \   00005C   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   00005F   E4           CLR     A
   \   000060   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   000063   A3           INC     DPTR
   \   000064   A3           INC     DPTR
   \   000065   F0           MOVX    @DPTR,A
   \   000066   A3           INC     DPTR
   \   000067   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   00006A   F0           MOVX    @DPTR,A
   \   00006B   A3           INC     DPTR
   \   00006C   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   00006F   A3           INC     DPTR
   \   000070   A3           INC     DPTR
   \   000071   F0           MOVX    @DPTR,A
   \   000072   A3           INC     DPTR
   \   000073   F0           MOVX    @DPTR,A
     33          	queue->data = _array;
   \   000074   8A82         MOV     DPL,R2
   \   000076   8B83         MOV     DPH,R3
   \   000078   EE           MOV     A,R6
   \   000079   F0           MOVX    @DPTR,A
   \   00007A   A3           INC     DPTR
   \   00007B   EF           MOV     A,R7
   \   00007C   F0           MOVX    @DPTR,A
     34          	return queue;
   \                     ??Queue_Init_3:
   \   00007D   7F03         MOV     R7,#0x3
   \   00007F   02....       LJMP    ?BANKED_LEAVE_XDATA
     35          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   EA           MOV     A,R2
   \   000001   240B         ADD     A,#0xb
   \   000003   F582         MOV     DPL,A
   \   000005   E4           CLR     A
   \   000006   3B           ADDC    A,R3
   \   000007   F583         MOV     DPH,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   EA           MOV     A,R2
   \   000001   240C         ADD     A,#0xc
   \   000003   F582         MOV     DPL,A
   \   000005   E4           CLR     A
   \   000006   3B           ADDC    A,R3
   \   000007   F583         MOV     DPH,A
   \   000009   22           RET
     36          
     37          /****************************************************
     38          	函数名:	queue_put
     39          	功能:	数据插入到队列
     40          	参数:	队列句柄，数据
     41          	作者:	liyao 2015年9月8日14:10:51
     42          ****************************************************/
     43          /*int8_t queue_put(QUEUE_T* queue,int32* _data){
     44          		if(queue->num == queue->count)  
     45          			return -1;
     46          		switch(queue->single_size){ 
     47          			case 1:((int8_t*)queue->data)[queue->start] = (int8_t)_data ;	break;
     48          			case 2:((int16_t*)queue->data)[queue->start] = (int16_t)_data;	break;
     49          			case 4:((int32_t*)queue->data)[queue->start] = (int32_t)_data;	break;
     50          			default:return -1;
     51          		}
     52          		queue->start = ((++queue->start) % queue->count);
     53          		queue->num ++;
     54          		return 0;
     55          }*/
     56          
     57          /****************************************************
     58          	函数名:	queue_get
     59          	功能:	从队列取出数据
     60          	参数:	队列句柄，数据容器（回填）
     61          	作者:	liyao 2015年9月8日14:10:51
     62          ****************************************************/
     63          /*int8_t queue_get(QUEUE_T* queue, int32_t* _data){
     64          		if(queue->num == 0) 
     65          			return -1;
     66          		switch(queue->single_size){
     67          			case 1:*_data = ((int8_t*)queue->data)[queue->end];
     68          										  ((int8_t*)queue->data)[queue->end] = 0;	break;
     69          			case 2:*_data = ((int16_t*)queue->data)[queue->end];
     70          											((int16_t*)queue->data)[queue->end] = 0;			break;
     71          			case 4:*_data = ((int32_t*)queue->data)[queue->end];
     72          											((int32_t*)queue->data)[queue->end] = 0;break;
     73          			default:return -1;
     74          		}
     75          		queue->end = ((++queue->end) % queue->count);
     76          		queue->num --;
     77          		return 0;
     78          }*/
     79          #define QUEUE_LOCK do{if(queue->locked == 1) return -1;else queue->locked = 1;}while(0);
     80          #define QUEUE_UNLOCK do{queue->locked = 0;}while(0);
     81          /****************************************************
     82          	函数名:	queue_put 
     83          	功能:	数据插入到队列
     84          	参数:	队列句柄，数据
     85          	作者:	liyao 2015年9月8日14:10:51
     86          ****************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     87          int8_t Queue_Put(QUEUE_T* queue,void* _data){
   \                     Queue_Put:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
     88          		if(queue->full_flag == 1)  
   \   000009   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   00000C   6401         XRL     A,#0x1
   \   00000E   7004         JNZ     ??Queue_Put_0
     89          			return -1;
   \   000010   79FF         MOV     R1,#-0x1
   \   000012   806E         SJMP    ??Queue_Put_1
     90          		//QUEUE_LOCK;
     91          		memcpy((char*)queue->data + (queue->start * queue->single_size),_data,queue->single_size);
   \                     ??Queue_Put_0:
   \   000014   8E82         MOV     DPL,R6
   \   000016   8F83         MOV     DPH,R7
   \   000018   A3           INC     DPTR
   \   000019   A3           INC     DPTR
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   F5..         MOV     ?V2,A
   \   00001D   75..00       MOV     ?V3,#0x0
   \   000020   EE           MOV     A,R6
   \   000021   2405         ADD     A,#0x5
   \   000023   F5..         MOV     ?V0,A
   \   000025   E4           CLR     A
   \   000026   3F           ADDC    A,R7
   \   000027   F5..         MOV     ?V1,A
   \   000029                ; Setup parameters for call to function memcpy
   \   000029   78..         MOV     R0,#?V2
   \   00002B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002E   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   000031   AAF0         MOV     R2,B
   \   000033   85..F0       MOV     B,?V2
   \   000036   E9           MOV     A,R1
   \   000037   A4           MUL     AB
   \   000038   2A           ADD     A,R2
   \   000039   F9           MOV     R1,A
   \   00003A   8E82         MOV     DPL,R6
   \   00003C   8F83         MOV     DPH,R7
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   28           ADD     A,R0
   \   000040   FA           MOV     R2,A
   \   000041   A3           INC     DPTR
   \   000042   E0           MOVX    A,@DPTR
   \   000043   39           ADDC    A,R1
   \   000044   FB           MOV     R3,A
   \   000045   12....       LCALL   `??memcpy::?relay`   ; Banked call to: memcpy
   \   000048   7402         MOV     A,#0x2
   \   00004A   12....       LCALL   ?DEALLOC_XSTACK8
     92          		queue->start = ((++queue->start) % queue->count);
                 		^
Warning[Pa079]: undefined behavior: parameter "queue" (declared at line 87)
          (or a value reached by some form of indirection through it) is
          modified more than once without an intervening sequence point in
          this statement
   \   00004D   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   000050   12....       LCALL   ?US_DIV_MOD
   \   000053   8A..         MOV     ?V2,R2
   \   000055   8B..         MOV     ?V3,R3
   \   000057   A8..         MOV     R0,?V2
   \   000059   A9..         MOV     R1,?V3
   \   00005B   85..82       MOV     DPL,?V0
   \   00005E   85..83       MOV     DPH,?V1
   \   000061   E8           MOV     A,R0
   \   000062   F0           MOVX    @DPTR,A
   \   000063   A3           INC     DPTR
   \   000064   E9           MOV     A,R1
   \   000065   F0           MOVX    @DPTR,A
     93          		if(queue->start == queue->end)
   \   000066   8E82         MOV     DPL,R6
   \   000068   8F83         MOV     DPH,R7
   \   00006A   A3           INC     DPTR
   \   00006B   A3           INC     DPTR
   \   00006C   A3           INC     DPTR
   \   00006D   A3           INC     DPTR
   \   00006E   A3           INC     DPTR
   \   00006F   A3           INC     DPTR
   \   000070   A3           INC     DPTR
   \   000071   E0           MOVX    A,@DPTR
   \   000072   68           XRL     A,R0
   \   000073   7003         JNZ     ??Queue_Put_2
   \   000075   A3           INC     DPTR
   \   000076   E0           MOVX    A,@DPTR
   \   000077   69           XRL     A,R1
   \                     ??Queue_Put_2:
   \   000078   7006         JNZ     ??Queue_Put_3
     94          			queue->full_flag = 1;
   \   00007A   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   00007D   7401         MOV     A,#0x1
   \   00007F   F0           MOVX    @DPTR,A
     95          		//queue->num ++;
     96          		//QUEUE_UNLOCK
     97          		return 0;
   \                     ??Queue_Put_3:
   \   000080   7900         MOV     R1,#0x0
   \                     ??Queue_Put_1:
   \   000082                REQUIRE ?Subroutine0
   \   000082                ; // Fall through to label ?Subroutine0
     98          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F04         MOV     R7,#0x4
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   EE           MOV     A,R6
   \   000001   240B         ADD     A,#0xb
   \   000003   F582         MOV     DPL,A
   \   000005   E4           CLR     A
   \   000006   3F           ADDC    A,R7
   \   000007   F583         MOV     DPH,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   85..82       MOV     DPL,?V0
   \   000003   85..83       MOV     DPH,?V1
   \   000006   E0           MOVX    A,@DPTR
   \   000007   F8           MOV     R0,A
   \   000008   A3           INC     DPTR
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   F9           MOV     R1,A
   \   00000B   E8           MOV     A,R0
   \   00000C   85..F0       MOV     B,?V2
   \   00000F   A4           MUL     AB
   \   000010   F8           MOV     R0,A
   \   000011   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   85..82       MOV     DPL,?V0
   \   000003   85..83       MOV     DPH,?V1
   \   000006   E0           MOVX    A,@DPTR
   \   000007   2401         ADD     A,#0x1
   \   000009   F0           MOVX    @DPTR,A
   \   00000A   A3           INC     DPTR
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   3400         ADDC    A,#0x0
   \   00000E   F0           MOVX    @DPTR,A
   \   00000F   85..82       MOV     DPL,?V0
   \   000012   85..83       MOV     DPH,?V1
   \   000015   E0           MOVX    A,@DPTR
   \   000016   F8           MOV     R0,A
   \   000017   A3           INC     DPTR
   \   000018   E0           MOVX    A,@DPTR
   \   000019   F9           MOV     R1,A
   \   00001A   8E82         MOV     DPL,R6
   \   00001C   8F83         MOV     DPH,R7
   \   00001E   A3           INC     DPTR
   \   00001F   A3           INC     DPTR
   \   000020   A3           INC     DPTR
   \   000021   E0           MOVX    A,@DPTR
   \   000022   FA           MOV     R2,A
   \   000023   A3           INC     DPTR
   \   000024   E0           MOVX    A,@DPTR
   \   000025   FB           MOV     R3,A
   \   000026   22           RET
     99          
    100          /****************************************************
    101          	函数名:	queue_get
    102          	功能:	从队列取出数据
    103          	参数:	队列句柄，数据容器（回填）
    104          	作者:	liyao 2015年9月8日14:10:51
    105          ****************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    106          int8_t Queue_Get(QUEUE_T* queue, void* _data){
   \                     Queue_Get:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   EC           MOV     A,R4
   \   00000A   FA           MOV     R2,A
   \   00000B   ED           MOV     A,R5
   \   00000C   FB           MOV     R3,A
    107          		if(queue->full_flag == 0 && queue->start == queue->end) 
   \   00000D   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   000010   701F         JNZ     ??Queue_Get_0
   \   000012   8E82         MOV     DPL,R6
   \   000014   8F83         MOV     DPH,R7
   \   000016   12....       LCALL   ??Subroutine14_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   000019   8E82         MOV     DPL,R6
   \   00001B   8F83         MOV     DPH,R7
   \   00001D   A3           INC     DPTR
   \   00001E   A3           INC     DPTR
   \   00001F   A3           INC     DPTR
   \   000020   A3           INC     DPTR
   \   000021   A3           INC     DPTR
   \   000022   A3           INC     DPTR
   \   000023   A3           INC     DPTR
   \   000024   E0           MOVX    A,@DPTR
   \   000025   68           XRL     A,R0
   \   000026   7003         JNZ     ??Queue_Get_1
   \   000028   A3           INC     DPTR
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   69           XRL     A,R1
   \                     ??Queue_Get_1:
   \   00002B   7004         JNZ     ??Queue_Get_0
    108          			return -1;
   \   00002D   79FF         MOV     R1,#-0x1
   \   00002F   8050         SJMP    ??Queue_Get_2
    109          		//QUEUE_LOCK;
    110          		memcpy(_data,(char*)queue->data + (queue->end * queue->single_size),queue->single_size);
   \                     ??Queue_Get_0:
   \   000031   8E82         MOV     DPL,R6
   \   000033   8F83         MOV     DPH,R7
   \   000035   A3           INC     DPTR
   \   000036   A3           INC     DPTR
   \   000037   E0           MOVX    A,@DPTR
   \   000038   F5..         MOV     ?V2,A
   \   00003A   75..00       MOV     ?V3,#0x0
   \   00003D   EE           MOV     A,R6
   \   00003E   2407         ADD     A,#0x7
   \   000040   F5..         MOV     ?V0,A
   \   000042   E4           CLR     A
   \   000043   3F           ADDC    A,R7
   \   000044   F5..         MOV     ?V1,A
   \   000046                ; Setup parameters for call to function memcpy
   \   000046   78..         MOV     R0,#?V2
   \   000048   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004B   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   00004E   ACF0         MOV     R4,B
   \   000050   85..F0       MOV     B,?V2
   \   000053   E9           MOV     A,R1
   \   000054   A4           MUL     AB
   \   000055   2C           ADD     A,R4
   \   000056   F9           MOV     R1,A
   \   000057   8E82         MOV     DPL,R6
   \   000059   8F83         MOV     DPH,R7
   \   00005B   E0           MOVX    A,@DPTR
   \   00005C   28           ADD     A,R0
   \   00005D   FC           MOV     R4,A
   \   00005E   A3           INC     DPTR
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   39           ADDC    A,R1
   \   000061   FD           MOV     R5,A
   \   000062   12....       LCALL   `??memcpy::?relay`   ; Banked call to: memcpy
   \   000065   7402         MOV     A,#0x2
   \   000067   12....       LCALL   ?DEALLOC_XSTACK8
    111          		queue->end = ((++queue->end) % queue->count);
                 		^
Warning[Pa079]: undefined behavior: parameter "queue" (declared at line 106)
          (or a value reached by some form of indirection through it) is
          modified more than once without an intervening sequence point in
          this statement
   \   00006A   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   00006D   12....       LCALL   ?US_DIV_MOD
   \   000070   85..82       MOV     DPL,?V0
   \   000073   85..83       MOV     DPH,?V1
   \   000076   EA           MOV     A,R2
   \   000077   F0           MOVX    @DPTR,A
   \   000078   A3           INC     DPTR
   \   000079   EB           MOV     A,R3
   \   00007A   F0           MOVX    @DPTR,A
    112          		queue->full_flag = 0;
   \   00007B   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   00007E   E4           CLR     A
   \   00007F   F0           MOVX    @DPTR,A
    113          		//queue->num --;
    114          		//QUEUE_UNLOCK;
    115          		return 0;
   \   000080   F9           MOV     R1,A
   \                     ??Queue_Get_2:
   \   000081   02....       LJMP    ?Subroutine0 & 0xFFFF
    116          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine14_0:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003                REQUIRE ??Subroutine15_0
   \   000003                ; // Fall through to label ??Subroutine15_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine15_0:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   E0           MOVX    A,@DPTR
   \   000003   F8           MOV     R0,A
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   F9           MOV     R1,A
   \   000007   22           RET
    117          
    118          /****************************************************
    119          	函数名:	queue_size
    120          	功能:		获取队列当前成员个数
    121          	参数:	队列句柄
    122          	返回值：队列现有成员个数
    123          	作者:	liyao 2015年9月8日14:10:51
    124          ****************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004                REQUIRE ??Subroutine13_0
   \   000004                ; // Fall through to label ??Subroutine13_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine13_0:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002                REQUIRE ??Subroutine14_0
   \   000002                ; // Fall through to label ??Subroutine14_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    125          uint16_t Queue_Size(QUEUE_T* queue){
   \                     Queue_Size:
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    126          	if(queue->full_flag == 1)
   \   000004   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   000007   E0           MOVX    A,@DPTR
   \   000008   6401         XRL     A,#0x1
   \   00000A   8A82         MOV     DPL,R2
   \   00000C   8B83         MOV     DPH,R3
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   7006         JNZ     ??Queue_Size_0
    127          		return queue->count;
   \   000013   E0           MOVX    A,@DPTR
   \   000014   FA           MOV     R2,A
   \   000015   A3           INC     DPTR
   \   000016   E0           MOVX    A,@DPTR
   \   000017   8069         SJMP    ??Queue_Size_1
    128          	else if(queue->start == queue->end)
   \                     ??Queue_Size_0:
   \   000019   12....       LCALL   ??Subroutine15_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   00001C   8A82         MOV     DPL,R2
   \   00001E   8B83         MOV     DPH,R3
   \   000020   A3           INC     DPTR
   \   000021   A3           INC     DPTR
   \   000022   A3           INC     DPTR
   \   000023   A3           INC     DPTR
   \   000024   A3           INC     DPTR
   \   000025   A3           INC     DPTR
   \   000026   A3           INC     DPTR
   \   000027   E0           MOVX    A,@DPTR
   \   000028   68           XRL     A,R0
   \   000029   7003         JNZ     ??Queue_Size_2
   \   00002B   A3           INC     DPTR
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   69           XRL     A,R1
   \                     ??Queue_Size_2:
   \   00002E   6055         JZ      ??Queue_Size_3
    129          		return 0;
    130          	else if(queue->start > queue->end)
   \   000030   8A82         MOV     DPL,R2
   \   000032   8B83         MOV     DPH,R3
   \   000034   A3           INC     DPTR
   \   000035   A3           INC     DPTR
   \   000036   A3           INC     DPTR
   \   000037   A3           INC     DPTR
   \   000038   A3           INC     DPTR
   \   000039   A3           INC     DPTR
   \   00003A   A3           INC     DPTR
   \   00003B   C3           CLR     C
   \   00003C   E0           MOVX    A,@DPTR
   \   00003D   98           SUBB    A,R0
   \   00003E   A3           INC     DPTR
   \   00003F   E0           MOVX    A,@DPTR
   \   000040   99           SUBB    A,R1
   \   000041   8A82         MOV     DPL,R2
   \   000043   8B83         MOV     DPH,R3
   \   000045   A3           INC     DPTR
   \   000046   A3           INC     DPTR
   \   000047   A3           INC     DPTR
   \   000048   5016         JNC     ??Queue_Size_4
    131          		return queue->start - queue->end;
   \   00004A   A3           INC     DPTR
   \   00004B   A3           INC     DPTR
   \   00004C   C082         PUSH    DPL
   \   00004E   C083         PUSH    DPH
   \   000050   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   000053   D083         POP     DPH
   \   000055   D082         POP     DPL
   \   000057   E0           MOVX    A,@DPTR
   \   000058   C3           CLR     C
   \   000059   98           SUBB    A,R0
   \   00005A   FA           MOV     R2,A
   \   00005B   A3           INC     DPTR
   \   00005C   E0           MOVX    A,@DPTR
   \   00005D   99           SUBB    A,R1
   \   00005E   8022         SJMP    ??Queue_Size_1
    132          	else if(queue->start < queue->end)
    133          		return queue->count - queue->end + queue->start;
   \                     ??Queue_Size_4:
   \   000060   C082         PUSH    DPL
   \   000062   C083         PUSH    DPH
   \   000064   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   000067   D083         POP     DPH
   \   000069   D082         POP     DPL
   \   00006B   E0           MOVX    A,@DPTR
   \   00006C   C3           CLR     C
   \   00006D   98           SUBB    A,R0
   \   00006E   F8           MOV     R0,A
   \   00006F   A3           INC     DPTR
   \   000070   E0           MOVX    A,@DPTR
   \   000071   99           SUBB    A,R1
   \   000072   F9           MOV     R1,A
   \   000073   8A82         MOV     DPL,R2
   \   000075   8B83         MOV     DPH,R3
   \   000077   A3           INC     DPTR
   \   000078   A3           INC     DPTR
   \   000079   A3           INC     DPTR
   \   00007A   A3           INC     DPTR
   \   00007B   A3           INC     DPTR
   \   00007C   E0           MOVX    A,@DPTR
   \   00007D   28           ADD     A,R0
   \   00007E   FA           MOV     R2,A
   \   00007F   A3           INC     DPTR
   \   000080   E0           MOVX    A,@DPTR
   \   000081   39           ADDC    A,R1
   \                     ??Queue_Size_1:
   \   000082   FB           MOV     R3,A
   \   000083   8004         SJMP    ??Queue_Size_5
    134          	return 0;
   \                     ??Queue_Size_3:
   \   000085   7A00         MOV     R2,#0x0
   \   000087   7B00         MOV     R3,#0x0
   \                     ??Queue_Size_5:
   \   000089                REQUIRE ?Subroutine1
   \   000089                ; // Fall through to label ?Subroutine1
    135          	//return queue->num;
    136          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    137          
    138          /****************************************************
    139          	函数名:	queue_empty_size
    140          	功能:	获取队列剩余空位个数
    141          	参数:	队列句柄
    142          	返回值：队列剩余空位个数
    143          	作者:	liyao 2015年9月8日14:10:51
    144          ****************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    145          uint16_t Queue_Empty_Size(QUEUE_T* queue){
   \                     Queue_Empty_Size:
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    146          	return queue->count - queue->num;
   \   000004   8A82         MOV     DPL,R2
   \   000006   8B83         MOV     DPH,R3
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   C082         PUSH    DPL
   \   00000D   C083         PUSH    DPH
   \   00000F   8A82         MOV     DPL,R2
   \   000011   8B83         MOV     DPH,R3
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   12....       LCALL   ??Subroutine13_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   000018   D083         POP     DPH
   \   00001A   D082         POP     DPL
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   C3           CLR     C
   \   00001E   98           SUBB    A,R0
   \   00001F   FA           MOV     R2,A
   \   000020   A3           INC     DPTR
   \   000021   E0           MOVX    A,@DPTR
   \   000022   99           SUBB    A,R1
   \   000023   FB           MOV     R3,A
   \   000024   80..         SJMP    ?Subroutine1
    147          }
    148          
    149          /****************************************************
    150          	函数名:queue_free
    151          	功能:	释放队列
    152          	参数:	队列句柄
    153          	作者:	liyao 2015年9月8日14:10:51
    154          ****************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    155          void Queue_Free(QUEUE_T* queue){
   \                     Queue_Free:
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    156          	queue->use_state = 0;
   \   000004   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   000007   E4           CLR     A
   \   000008   F0           MOVX    @DPTR,A
    157          }
   \   000009   80..         SJMP    ?Subroutine1

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??Queue_Init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Queue_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??Queue_Put::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Queue_Put

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??Queue_Get::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Queue_Get

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??Queue_Size::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Queue_Size

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??Queue_Empty_Size::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Queue_Empty_Size

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??Queue_Free::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Queue_Free
    158          /* Usage:
    159          	QUEUE_T* queue = queue_init(test ,sizeof(uint8_t)  ,10 );  
    160          	queue_put(queue,(int8_t)200,0,0);
    161          	queue_put(queue,(int8_t)201,0,0);
    162          	queue_get(queue,(int8_t*)&i,NULL,NULL); */
    163          
    164          
    165          
    166          
    167          
    168          
    169          
    170          
    171          
    172          
    173          
    174          
    175          
    176          
    177          
    178          
    179          
    180          
    181          
    182          
    183          
    184          
    185          
    186          
    187          
    188          
    189          
    190          
    191          
    192          
    193          
    194          
    195          
    196          
    197          
    198          
    199          
    200          
    201          
    202          
    203          
    204          
    205          
    206          
    207          
    208          
    209          
    210          
    211          

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      4      0   Queue_Empty_Size
      2      0   Queue_Free
      0     14   Queue_Get
        0     14   -> memcpy
      1     11   Queue_Init
      0     14   Queue_Put
        0     14   -> memcpy
      4      0   Queue_Size


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       2  ??Subroutine13_0
       3  ??Subroutine14_0
       8  ??Subroutine15_0
       5  ?Subroutine0
       7  ?Subroutine1
       4  ?Subroutine10
       9  ?Subroutine11
      10  ?Subroutine12
      39  ?Subroutine2
       8  ?Subroutine3
      18  ?Subroutine4
       4  ?Subroutine5
       5  ?Subroutine6
      10  ?Subroutine7
       4  ?Subroutine8
      10  ?Subroutine9
      38  Queue_Empty_Size
       6  Queue_Empty_Size::?relay
      11  Queue_Free
       6  Queue_Free::?relay
     132  Queue_Get
       6  Queue_Get::?relay
     130  Queue_Init
       6  Queue_Init::?relay
     130  Queue_Put
       6  Queue_Put::?relay
     137  Queue_Size
       6  Queue_Size::?relay
      70  queue_list
       1  queue_locd

 
 724 bytes in segment BANKED_CODE
  36 bytes in segment BANK_RELAYS
  71 bytes in segment XDATA_Z
 
 760 bytes of CODE  memory
  71 bytes of XDATA memory

Errors: none
Warnings: 2
