///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V9.30.1.3056 for 8051               24/Oct/2016  15:11:57
// Copyright 2004-2015 IAR Systems AB.
// Standalone license - IAR Embedded Workbench for 8051
//
//    Core               =  plain
//    Code model         =  banked
//    Data model         =  large
//    Calling convention =  xdata reentrant
//    Constant location  =  data_rom
//    Dptr setup         =  1,16
//                          
//    Source file        =  
//        E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\ZMain\TI2530DB\OnBoard.c
//    Command line       =  
//        -f "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V1.7饮水机控制增加uart\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"
//        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
//        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f
//        "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V1.7饮水机控制增加uart\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
//        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
//        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
//        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
//        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
//        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
//        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
//        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
//        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
//        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
//        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
//        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
//        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
//        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
//        -DPOLL_RATE=50 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
//        -DREJOIN_POLL_RATE=440 "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack
//        Mesh 1.0.0\Projects\zstack\ZMain\TI2530DB\OnBoard.c" -D LOG_OUT -D
//        UART1_PROTOCOL_RESOLVER=1 -D xISQC -D NWK_AUTO_POLL -D ZTOOL_P1 -D
//        ISR_KEYINTERRUPT -D xMT_TASK -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D
//        xLCD_SUPPORTED=DEBUG -D xPOWER_SAVING -lC
//        "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V1.7饮水机控制增加uart\CC2530DB\WaterMachine\List"
//        -lA "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V1.7饮水机控制增加uart\CC2530DB\WaterMachine\List"
//        --diag_suppress Pe001,Pa010 -o
//        "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V1.7饮水机控制增加uart\CC2530DB\WaterMachine\Obj"
//        -e --no_code_motion --debug --core=plain --dptr=16,1
//        --data_model=large --code_model=banked
//        --calling_convention=xdata_reentrant --place_constants=data_rom
//        --nr_virtual_regs 8 -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack
//        Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V1.7饮水机控制增加uart\CC2530DB\"
//        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V1.7饮水机控制增加uart\CC2530DB\..\Source\"
//        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V1.7饮水机控制增加uart\CC2530DB\..\Frame\"
//        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V1.7饮水机控制增加uart\CC2530DB\..\Module\WaterMachine\"
//        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V1.7饮水机控制增加uart\CC2530DB\..\..\..\ZMain\TI2530DB\"
//        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V1.7饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\hal\include\"
//        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V1.7饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
//        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V1.7饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\mac\include\"
//        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V1.7饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
//        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V1.7饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
//        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V1.7饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
//        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V1.7饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\mt\"
//        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V1.7饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\osal\include\"
//        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V1.7饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\services\saddr\"
//        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V1.7饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\services\sdata\"
//        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V1.7饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\stack\af\"
//        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V1.7饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
//        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V1.7饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
//        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V1.7饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\stack\sec\"
//        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V1.7饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\stack\sys\"
//        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V1.7饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
//        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V1.7饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\zmac\"
//        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V1.7饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
//        -Ohz
//    List file          =  
//        E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V1.7饮水机控制增加uart\CC2530DB\WaterMachine\List\OnBoard.s51
//
///////////////////////////////////////////////////////////////////////////////

        NAME OnBoard

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:DATA:REORDER:NOROOT(0)

        EXTERN ?V0
        EXTERN ?V1
        EXTERN ?V2
        EXTERN ?V3
        EXTERN ?V4
        EXTERN ?V5
        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?US_DIV_MOD
        EXTERN ?XSP
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        PUBLIC `??BigLight_Off::?relay`
        FUNCTION `??BigLight_Off::?relay`,0203H
        PUBLIC `??BigLight_On::?relay`
        FUNCTION `??BigLight_On::?relay`,0203H
        PUBLIC `??BuzzerControl::?relay`
        FUNCTION `??BuzzerControl::?relay`,0203H
        PUBLIC `??Dimmer::?relay`
        FUNCTION `??Dimmer::?relay`,0203H
        PUBLIC `??GetUserDipSw::?relay`
        FUNCTION `??GetUserDipSw::?relay`,0203H
        PUBLIC `??InitBoard::?relay`
        FUNCTION `??InitBoard::?relay`,0203H
        PUBLIC `??OnBoard_KeyCallback::?relay`
        FUNCTION `??OnBoard_KeyCallback::?relay`,0203H
        PUBLIC `??OnBoard_SendKeys::?relay`
        FUNCTION `??OnBoard_SendKeys::?relay`,0203H
        PUBLIC `??OnBoard_stack_used::?relay`
        FUNCTION `??OnBoard_stack_used::?relay`,0203H
        PUBLIC `??Onboard_rand::?relay`
        FUNCTION `??Onboard_rand::?relay`,0203H
        PUBLIC `??Onboard_wait::?relay`
        FUNCTION `??Onboard_wait::?relay`,0203H
        PUBLIC `??RegisterForKeys::?relay`
        FUNCTION `??RegisterForKeys::?relay`,0203H
        PUBLIC `??_itoa::?relay`
        FUNCTION `??_itoa::?relay`,0203H
        PUBLIC BigLight_Off
        FUNCTION BigLight_Off,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC BigLight_On
        FUNCTION BigLight_On,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC BuzzerControl
        FUNCTION BuzzerControl,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBWEAK DMAARM
        PUBLIC Dimmer
        FUNCTION Dimmer,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC GetUserDipSw
        FUNCTION GetUserDipSw,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC InitBoard
        FUNCTION InitBoard,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC OnBoard_KeyCallback
        FUNCTION OnBoard_KeyCallback,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC OnBoard_SendKeys
        FUNCTION OnBoard_SendKeys,0a1203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC OnBoard_stack_used
        FUNCTION OnBoard_stack_used,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC Onboard_rand
        FUNCTION Onboard_rand,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC Onboard_soft_reset
        FUNCTION Onboard_soft_reset,080203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC Onboard_wait
        FUNCTION Onboard_wait,080203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC RegisterForKeys
        FUNCTION RegisterForKeys,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBWEAK SLEEPSTA
        PUBWEAK _A_IEN0
        PUBLIC _itoa
        FUNCTION _itoa,080203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 19, STACK
        PUBLIC _lockBits
        PUBLIC _nvIEEE
        PUBLIC _reserved
        PUBLIC aExtendedAddress
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource SP:8, PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT SameValue
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon1
        
HalKeyConfig        SYMBOL "HalKeyConfig"
`??HalKeyConfig::?relay` SYMBOL "?relay", HalKeyConfig
halAssertHandler    SYMBOL "halAssertHandler"
`??halAssertHandler::?relay` SYMBOL "?relay", halAssertHandler
macMcuRandomWord    SYMBOL "macMcuRandomWord"
`??macMcuRandomWord::?relay` SYMBOL "?relay", macMcuRandomWord
osal_int_disable    SYMBOL "osal_int_disable"
`??osal_int_disable::?relay` SYMBOL "?relay", osal_int_disable
osal_msg_allocate   SYMBOL "osal_msg_allocate"
`??osal_msg_allocate::?relay` SYMBOL "?relay", osal_msg_allocate
osal_msg_send       SYMBOL "osal_msg_send"
`??osal_msg_send::?relay` SYMBOL "?relay", osal_msg_send
BigLight_Off        SYMBOL "BigLight_Off"
`??BigLight_Off::?relay` SYMBOL "?relay", BigLight_Off
BigLight_On         SYMBOL "BigLight_On"
`??BigLight_On::?relay` SYMBOL "?relay", BigLight_On
BuzzerControl       SYMBOL "BuzzerControl"
`??BuzzerControl::?relay` SYMBOL "?relay", BuzzerControl
Dimmer              SYMBOL "Dimmer"
`??Dimmer::?relay`  SYMBOL "?relay", Dimmer
GetUserDipSw        SYMBOL "GetUserDipSw"
`??GetUserDipSw::?relay` SYMBOL "?relay", GetUserDipSw
InitBoard           SYMBOL "InitBoard"
`??InitBoard::?relay` SYMBOL "?relay", InitBoard
OnBoard_KeyCallback SYMBOL "OnBoard_KeyCallback"
`??OnBoard_KeyCallback::?relay` SYMBOL "?relay", OnBoard_KeyCallback
OnBoard_SendKeys    SYMBOL "OnBoard_SendKeys"
`??OnBoard_SendKeys::?relay` SYMBOL "?relay", OnBoard_SendKeys
OnBoard_stack_used  SYMBOL "OnBoard_stack_used"
`??OnBoard_stack_used::?relay` SYMBOL "?relay", OnBoard_stack_used
Onboard_rand        SYMBOL "Onboard_rand"
`??Onboard_rand::?relay` SYMBOL "?relay", Onboard_rand
Onboard_wait        SYMBOL "Onboard_wait"
`??Onboard_wait::?relay` SYMBOL "?relay", Onboard_wait
RegisterForKeys     SYMBOL "RegisterForKeys"
`??RegisterForKeys::?relay` SYMBOL "?relay", RegisterForKeys
_itoa               SYMBOL "_itoa"
`??_itoa::?relay`   SYMBOL "?relay", _itoa

        EXTERN `??HalKeyConfig::?relay`
        FUNCTION `??HalKeyConfig::?relay`,00H
        EXTERN `??halAssertHandler::?relay`
        FUNCTION `??halAssertHandler::?relay`,00H
        EXTERN `??macMcuRandomWord::?relay`
        FUNCTION `??macMcuRandomWord::?relay`,00H
        EXTERN `??osal_int_disable::?relay`
        FUNCTION `??osal_int_disable::?relay`,00H
        EXTERN `??osal_msg_allocate::?relay`
        FUNCTION `??osal_msg_allocate::?relay`,00H
        EXTERN `??osal_msg_send::?relay`
        FUNCTION `??osal_msg_send::?relay`,00H
        EXTERN HalKeyConfig
        FUNCTION HalKeyConfig,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN halAssertHandler
        FUNCTION halAssertHandler,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN macMcuRandomWord
        FUNCTION macMcuRandomWord,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_int_disable
        FUNCTION osal_int_disable,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_allocate
        FUNCTION osal_msg_allocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_send
        FUNCTION osal_msg_send,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC

// E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh 1.0.0\Projects\zstack\ZMain\TI2530DB\OnBoard.c
//    1 #include "ZComDef.h"
//    2 #include "ZGlobals.h"
//    3 #include "OnBoard.h"

        ASEGN SFR_AN:DATA:NOROOT,09dH
// unsigned char volatile __sfr SLEEPSTA
SLEEPSTA:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0a8H
// union <unnamed> volatile __sfr _A_IEN0
_A_IEN0:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0d6H
// unsigned char volatile __sfr DMAARM
DMAARM:
        DATA8
        DS 1
//    4 #include "OSAL.h"
//    5 #include "MT.h"
//    6 #include "MT_SYS.h"
//    7 #include "DebugTrace.h"
//    8 
//    9 /* Hal */
//   10 #include "hal_lcd.h"
//   11 #include "hal_mcu.h"
//   12 #include "hal_timer.h"
//   13 #include "hal_key.h"
//   14 #include "hal_led.h"
//   15 
//   16 /* Allow access macRandomByte() */
//   17 #include "mac_radio_defs.h"
//   18 
//   19 /*********************************************************************
//   20  * CONSTANTS
//   21  */
//   22 
//   23 // Task ID not initialized
//   24 #define NO_TASK_ID 0xFF
//   25 
//   26 // Minimum length RAM "pattern" for Stack check
//   27 #define MIN_RAM_INIT 12
//   28 
//   29 /*********************************************************************
//   30  * GLOBAL VARIABLES
//   31  */
//   32 
//   33 #if defined MAKE_CRC_SHDW
//   34 #pragma location="CRC_SHDW"
//   35 const CODE uint16 _crcShdw = 0xFFFF;
//   36 #pragma required=_crcShdw
//   37 
//   38 #elif !defined MT_UBL_FUNC
//   39 
//   40 #pragma location="LOCK_BITS_ADDRESS_SPACE"

        RSEG LOCK_BITS_ADDRESS_SPACE:XDATA:REORDER:NOROOT(0)
        DATA8
//   41 __no_init uint8 _lockBits[16];
_lockBits:
        DS 16
//   42 #pragma required=_lockBits
//   43 
//   44 #if defined ZCL_KEY_ESTABLISH
//   45 #include "zcl_cert_data.c"
//   46 #else
//   47 #pragma location="IEEE_ADDRESS_SPACE"

        RSEG IEEE_ADDRESS_SPACE:XDATA:REORDER:NOROOT(0)
        DATA8
//   48 __no_init uint8 _nvIEEE[Z_EXTADDR_LEN];
_nvIEEE:
        DS 8
        REQUIRE _lockBits
//   49 #pragma required=_nvIEEE
//   50 #endif
//   51 
//   52 #pragma location="RESERVED_ADDRESS_SPACE"

        RSEG RESERVED_ADDRESS_SPACE:XDATA:REORDER:NOROOT(0)
        DATA8
//   53 __no_init uint8 _reserved[1932];
_reserved:
        DS 1932
        REQUIRE _nvIEEE
//   54 #pragma required=_reserved
//   55 #endif
//   56 
//   57 // 64-bit Extended Address of this device

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   58 uint8 aExtendedAddress[8];
aExtendedAddress:
        DS 8
        REQUIRE __INIT_XDATA_Z
        REQUIRE _reserved
//   59 
//   60 /*********************************************************************
//   61  * LOCAL VARIABLES
//   62  */
//   63 
//   64 // Registered keys task ID, initialized to NOT USED.

        RSEG XDATA_I:XDATA:NOROOT(0)
//   65 static uint8 registeredKeysTaskID = NO_TASK_ID;
registeredKeysTaskID:
        DATA8
        DS 1
        REQUIRE `?<Initializer for registeredKeysTaskID>`
        REQUIRE __INIT_XDATA_I
//   66 
//   67 /*********************************************************************
//   68  * LOCAL FUNCTIONS
//   69  */
//   70 
//   71 static void ChkReset( void );
//   72 
//   73 /*********************************************************************
//   74  * @fn      InitBoard()
//   75  * @brief   Initialize the CC2420DB Board Peripherals
//   76  * @param   level: COLD,WARM,READY
//   77  * @return  None
//   78  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   79 void InitBoard( uint8 level )
InitBoard:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function InitBoard
        CODE
//   80 {
        FUNCALL InitBoard, osal_int_disable
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL InitBoard, halAssertHandler
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL InitBoard, HalKeyConfig
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
//   81   if ( level == OB_COLD )
        JNZ     ??InitBoard_0
//   82   {
//   83     // IAR does not zero-out this byte below the XSTACK.
//   84     *(uint8 *)0x0 = 0;
        MOV     DPTR,#0x0
        CLR     A
        MOVX    @DPTR,A
//   85     // Interrupts off
//   86     osal_int_disable( INTS_ALL );
        ; Setup parameters for call to function osal_int_disable
        MOV     R1,#-0x1
        LCALL   `??osal_int_disable::?relay`; Banked call to: osal_int_disable
//   87     // Check for Brown-Out reset
//   88     ChkReset();
        MOV     A,0x9d
        ANL     A,#0x18
        MOV     R0,A
        JZ      ??InitBoard_1
        MOV     A,#0x8
        XRL     A,R0
        JZ      ??InitBoard_1
        MOV     A,#0x10
        XRL     A,R0
        JZ      ??InitBoard_1
        ; Setup parameters for call to function halAssertHandler
        LCALL   `??halAssertHandler::?relay`; Banked call to: halAssertHandler
        SJMP    ??InitBoard_1
//   89   }
//   90   else  // !OB_COLD
//   91   {
//   92     /* Initialize Key stuff */
//   93     #if defined (ISR_KEYINTERRUPT)
//   94     HalKeyConfig(HAL_KEY_INTERRUPT_ENABLE , OnBoard_KeyCallback);
??InitBoard_0:
        ; Setup parameters for call to function HalKeyConfig
        MOV     R2,#`??OnBoard_KeyCallback::?relay` & 0xff
        MOV     R3,#(`??OnBoard_KeyCallback::?relay` >> 8) & 0xff
        MOV     R1,#0x1
        LCALL   `??HalKeyConfig::?relay`; Banked call to: HalKeyConfig
//   95     #else
//   96     HalKeyConfig(HAL_KEY_INTERRUPT_DISABLE, OnBoard_KeyCallback);
//   97     #endif
//   98   }
//   99 }
??InitBoard_1:
          CFI EndBlock cfiBlock0
        REQUIRE ?Subroutine0
        REQUIRE SLEEPSTA
        ; // Fall through to label ?Subroutine0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock1
//  100 
//  101 /*********************************************************************
//  102  * @fn      ChkReset()
//  103  * @brief   Check reset bits - if reset cause is unknown, assume a
//  104  *          brown-out (low power), assume batteries are not reliable,
//  105  *          hang in a loop and sequence through the LEDs.
//  106  * @param   None
//  107  * @return  None
//  108  *********************************************************************/
//  109 void ChkReset( void )
//  110 {
//  111   uint8 rib;
//  112 
//  113   // Isolate reset indicator bits
//  114   rib = SLEEPSTA & LRESET;
//  115 
//  116   if ( rib == RESETPO )
//  117   {
//  118     // Put code here to handle Power-On reset
//  119   }
//  120   else if ( rib == RESETEX )
//  121   {
//  122     // Put code here to handle External reset
//  123   }
//  124   else if ( rib == RESETWD )
//  125   {
//  126     // Put code here to handle WatchDog reset
//  127   }
//  128   else  // Unknown reason - not expected.
//  129   {
//  130     HAL_ASSERT(0);
//  131   }
//  132 }
//  133 
//  134 /*********************************************************************
//  135  *                        "Keyboard" Support
//  136  *********************************************************************/
//  137 
//  138 /*********************************************************************
//  139  * Keyboard Register function
//  140  *
//  141  * The keyboard handler is setup to send all keyboard changes to
//  142  * one task (if a task is registered).
//  143  *
//  144  * If a task registers, it will get all the keys. You can change this
//  145  * to register for individual keys.
//  146  *********************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  147 uint8 RegisterForKeys( uint8 task_id )
RegisterForKeys:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI Function RegisterForKeys
        CODE
//  148 {
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
        MOV     A,R1
        MOV     R0,A
//  149   // Allow only the first task
//  150   if ( registeredKeysTaskID == NO_TASK_ID )
        MOV     DPTR,#registeredKeysTaskID
        MOVX    A,@DPTR
        CPL     A
        JNZ     ??RegisterForKeys_0
//  151   {
//  152     registeredKeysTaskID = task_id;
        MOV     A,R0
        MOVX    @DPTR,A
//  153     return ( true );
        MOV     R1,#0x1
        SJMP    ??RegisterForKeys_1
//  154   }
//  155   else
//  156     return ( false );
??RegisterForKeys_0:
        MOV     R1,#0x0
??RegisterForKeys_1:
          CFI EndBlock cfiBlock2
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1
//  157 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
          CFI Block cfiBlock3 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        POP     DPH
          CFI CFA_SP SP+-4
          CFI DPH0 SameValue
        POP     DPL
          CFI CFA_SP SP+-3
          CFI DPL0 SameValue
        LJMP    ?BRET
          CFI EndBlock cfiBlock3
//  158 
//  159 /*********************************************************************
//  160  * @fn      OnBoard_SendKeys
//  161  *
//  162  * @brief   Send "Key Pressed" message to application.
//  163  *
//  164  * @param   keys  - keys that were pressed
//  165  *          state - shifted
//  166  *
//  167  * @return  status
//  168  *********************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  169 uint8 OnBoard_SendKeys( uint8 keys, uint8 state )
OnBoard_SendKeys:
          CFI Block cfiBlock4 Using cfiCommon0
          CFI Function OnBoard_SendKeys
        CODE
//  170 {
        FUNCALL OnBoard_SendKeys, osal_msg_allocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL OnBoard_SendKeys, osal_msg_send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
        MOV     A,R2
        MOV     R7,A
//  171   keyChange_t *msgPtr;
//  172 
//  173   if ( registeredKeysTaskID != NO_TASK_ID )
        MOV     DPTR,#registeredKeysTaskID
        MOVX    A,@DPTR
        CPL     A
        JZ      ??OnBoard_SendKeys_0
//  174   {
//  175     // Send the address to the task
//  176     msgPtr = (keyChange_t *)osal_msg_allocate( sizeof(keyChange_t) );
        ; Setup parameters for call to function osal_msg_allocate
        MOV     R2,#0x4
        MOV     R3,#0x0
        LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
//  177     if ( msgPtr )
        MOV     A,R2
        ORL     A,R3
        JZ      ??OnBoard_SendKeys_1
//  178     {
//  179       msgPtr->hdr.event = KEY_CHANGE;
        MOV     DPL,R2
        MOV     DPH,R3
        MOV     A,#-0x40
        MOVX    @DPTR,A
//  180       msgPtr->state = state;
        MOV     A,R7
        INC     DPTR
        INC     DPTR
        MOVX    @DPTR,A
//  181       msgPtr->keys = keys;
        MOV     A,R6
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    @DPTR,A
//  182 
//  183       osal_msg_send( registeredKeysTaskID, (uint8 *)msgPtr );
        ; Setup parameters for call to function osal_msg_send
        MOV     DPTR,#registeredKeysTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_msg_send::?relay`; Banked call to: osal_msg_send
//  184     }
//  185     return ( ZSuccess );
??OnBoard_SendKeys_1:
        MOV     R1,#0x0
        SJMP    ??OnBoard_SendKeys_2
//  186   }
//  187   else
//  188     return ( ZFailure );
??OnBoard_SendKeys_0:
        MOV     R1,#0x1
??OnBoard_SendKeys_2:
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
//  189 }
          CFI EndBlock cfiBlock4
//  190 
//  191 /*********************************************************************
//  192  * @fn      OnBoard_KeyCallback
//  193  *
//  194  * @brief   Callback service for keys
//  195  *
//  196  * @param   keys  - keys that were pressed
//  197  *          state - shifted
//  198  *
//  199  * @return  void
//  200  *********************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  201 void OnBoard_KeyCallback ( uint8 keys, uint8 state )
OnBoard_KeyCallback:
          CFI Block cfiBlock5 Using cfiCommon0
          CFI Function OnBoard_KeyCallback
        CODE
//  202 {
        FUNCALL OnBoard_KeyCallback, OnBoard_SendKeys
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
//  203   uint8 shift;
//  204   (void)state;
//  205 
//  206   shift = (keys & HAL_KEY_SW_6) ? true : false;
//  207 
//  208   if ( OnBoard_SendKeys( keys, shift ) != ZSuccess )
        ; Setup parameters for call to function OnBoard_SendKeys
        MOV     C,0xE0 /* A   */.5
        CLR     A
        RLC     A
        MOV     R2,A
        LCALL   `??OnBoard_SendKeys::?relay`; Banked call to: OnBoard_SendKeys
//  209   {
//  210     // Process SW1 here
//  211     if ( keys & HAL_KEY_SW_1 )  // Switch 1
//  212     {
//  213     }
//  214     // Process SW2 here
//  215     if ( keys & HAL_KEY_SW_2 )  // Switch 2
//  216     {
//  217     }
//  218     // Process SW3 here
//  219     if ( keys & HAL_KEY_SW_3 )  // Switch 3
//  220     {
//  221     }
//  222     // Process SW4 here
//  223     if ( keys & HAL_KEY_SW_4 )  // Switch 4
//  224     {
//  225     }
//  226     // Process SW5 here
//  227     if ( keys & HAL_KEY_SW_5 )  // Switch 5
//  228     {
//  229     }
//  230     // Process SW6 here
//  231     if ( keys & HAL_KEY_SW_6 )  // Switch 6
//  232     {
//  233     }
//  234   }
//  235 }
        SJMP    ?Subroutine0
          CFI EndBlock cfiBlock5
//  236 
//  237 /*********************************************************************
//  238  * @fn      OnBoard_stack_used
//  239  *
//  240  * @brief   Runs through the stack looking for touched memory.
//  241  *
//  242  * @param   none
//  243  *
//  244  * @return  Maximum number of bytes used by the stack.
//  245  *********************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  246 uint16 OnBoard_stack_used(void)
OnBoard_stack_used:
          CFI Block cfiBlock6 Using cfiCommon0
          CFI Function OnBoard_stack_used
        CODE
//  247 {
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  248   uint8 const *ptr;
//  249   uint8 cnt = 0;
        MOV     R0,#0x0
//  250 
//  251   for (ptr = CSTACK_END; ptr > CSTACK_BEG; ptr--)
        MOV     DPL,#(SFE(XSTACK) + 255) & 0xff
        MOV     DPH,#((SFE(XSTACK) - 1) >> 8) & 0xff
        SJMP    ??OnBoard_stack_used_0
//  252   {
//  253     if (STACK_INIT_VALUE == *ptr)
//  254     {
//  255       if (++cnt >= MIN_RAM_INIT)
//  256       {
//  257         ptr += MIN_RAM_INIT;
//  258         break;
//  259       }
//  260     }
//  261     else
//  262     {
//  263       cnt = 0;
??OnBoard_stack_used_1:
        MOV     R0,#0x0
//  264     }
??OnBoard_stack_used_2:
        MOV     A,DPL
        ADD     A,#-0x1
        MOV     DPL,A
        MOV     A,DPH
        ADDC    A,#-0x1
        MOV     DPH,A
??OnBoard_stack_used_0:
        CLR     C
        MOV     A,#SFB(XSTACK) & 0xff
        SUBB    A,DPL
        MOV     A,#(SFB(XSTACK) >> 8) & 0xff
        SUBB    A,DPH
        JNC     ??OnBoard_stack_used_3
        MOVX    A,@DPTR
        XRL     A,#0xcd
        JNZ     ??OnBoard_stack_used_1
        INC     R0
        MOV     A,R0
        CLR     C
        SUBB    A,#0xc
        JC      ??OnBoard_stack_used_2
        MOV     A,DPL
        ADD     A,#0xc
        MOV     DPL,A
        JNC     ??OnBoard_stack_used_3
        INC     DPH
//  265   }
//  266 
//  267   return (uint16)(CSTACK_END - ptr + 1);
??OnBoard_stack_used_3:
        MOV     A,#(SFE(XSTACK) + 255) & 0xff
        CLR     C
        SUBB    A,DPL
        MOV     R0,A
        MOV     A,#((SFE(XSTACK) - 1) >> 8) & 0xff
        SUBB    A,DPH
        MOV     R1,A
        MOV     A,R0
        ADD     A,#0x1
        MOV     R2,A
        CLR     A
        ADDC    A,R1
        MOV     R3,A
        LJMP    ?Subroutine1 & 0xFFFF
//  268 }
          CFI EndBlock cfiBlock6
//  269 
//  270 /*********************************************************************
//  271  * @fn      _itoa
//  272  *
//  273  * @brief   convert a 16bit number to ASCII
//  274  *
//  275  * @param   num -
//  276  *          buf -
//  277  *          radix -
//  278  *
//  279  * @return  void
//  280  *
//  281  *********************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  282 void _itoa(uint16 num, uint8 *buf, uint8 radix)
_itoa:
          CFI Block cfiBlock7 Using cfiCommon0
          CFI Function _itoa
        CODE
//  283 {
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 5
        MOV     A,#-0x5
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 19)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     ?V0,R1
//  284   char c,i;
//  285   uint8 *p, rst[5];
//  286 
//  287   p = rst;
        MOV     R0,?XSP + 0
        MOV     R1,?XSP + 1
        MOV     ?V4,R0
        MOV     ?V5,R1
//  288   for ( i=0; i<5; i++,p++ )
        MOV     ?V1,#0x0
//  289   {
//  290     c = num % radix;  // Isolate a digit
??_itoa_0:
        MOV     A,R6
        MOV     R0,A
        MOV     A,R7
        MOV     R1,A
        MOV     R2,?V0
        MOV     R3,#0x0
        LCALL   ?US_DIV_MOD
        MOV     A,R2
        MOV     R0,A
//  291     *p = c + (( c < 10 ) ? '0' : '7');  // Convert to Ascii
        SUBB    A,#0xa
        JNC     ??_itoa_1
        MOV     R2,#0x30
        SJMP    ??_itoa_2
??_itoa_1:
        MOV     R2,#0x37
??_itoa_2:
        MOV     A,R2
        ADD     A,R0
        MOV     DPL,?V4
        MOV     DPH,?V5
        MOVX    @DPTR,A
//  292     num /= radix;
        MOV     A,R6
        MOV     R0,A
        MOV     A,R7
        MOV     R1,A
        MOV     R2,?V0
        MOV     R3,#0x0
        LCALL   ?US_DIV_MOD
        MOV     ?V2,R0
        MOV     ?V3,R1
        MOV     R6,?V2
        MOV     R7,?V3
//  293     if ( !num )
        MOV     A,R6
        ORL     A,R7
        JZ      ??_itoa_3
//  294       break;
//  295   }
        INC     ?V1
        INC     DPTR
        MOV     ?V4,DPL
        MOV     ?V5,DPH
        MOV     A,?V1
        SUBB    A,#0x5
        JC      ??_itoa_0
//  296 
//  297   for ( c=0 ; c<=i; c++ )
??_itoa_3:
        MOV     R0,#0x0
//  298     *buf++ = *p--;  // Reverse character order
??_itoa_4:
        MOV     DPL,?V4
        MOV     DPH,?V5
        MOVX    A,@DPTR
        MOV     DPL,R4
        MOV     DPH,R5
        MOVX    @DPTR,A
        MOV     A,?V4
        ADD     A,#-0x1
        MOV     ?V4,A
        MOV     A,?V5
        ADDC    A,#-0x1
        MOV     ?V5,A
        INC     DPTR
        MOV     R4,DPL
        MOV     R5,DPH
        INC     R0
        MOV     A,?V1
        CLR     C
        SUBB    A,R0
        JNC     ??_itoa_4
//  299 
//  300   *buf = '\0';
        CLR     A
        MOVX    @DPTR,A
//  301 }
        MOV     A,#0x5
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     R7,#0x6
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock7
//  302 
//  303 /*********************************************************************
//  304  * @fn        Onboard_rand
//  305  *
//  306  * @brief    Random number generator
//  307  *
//  308  * @param   none
//  309  *
//  310  * @return  uint16 - new random number
//  311  *
//  312  *********************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  313 uint16 Onboard_rand( void )
Onboard_rand:
          CFI Block cfiBlock8 Using cfiCommon0
          CFI Function Onboard_rand
        CODE
//  314 {
        FUNCALL Onboard_rand, macMcuRandomWord
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  315   return ( MAC_RADIO_RANDOM_WORD() );
        ; Setup parameters for call to function macMcuRandomWord
        LCALL   `??macMcuRandomWord::?relay`; Banked call to: macMcuRandomWord
        LJMP    ?Subroutine1 & 0xFFFF
//  316 }
          CFI EndBlock cfiBlock8
//  317 
//  318 /*********************************************************************
//  319  * @fn        Onboard_wait
//  320  *
//  321  * @brief    Delay wait
//  322  *
//  323  * @param   uint16 - time to wait
//  324  *
//  325  * @return  none
//  326  *
//  327  *********************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  328 void Onboard_wait( uint16 timeout )
Onboard_wait:
          CFI Block cfiBlock9 Using cfiCommon0
          CFI Function Onboard_wait
        CODE
//  329 {
        ; Saved register size: 0
        ; Auto size: 0
        SJMP    ??Onboard_wait_0
//  330   while (timeout--)
//  331   {
//  332     asm("NOP");
??Onboard_wait_1:
        NOP
//  333     asm("NOP");
        NOP
//  334     asm("NOP");
        NOP
//  335   }
??Onboard_wait_0:
        MOV     A,R2
        MOV     R0,A
        MOV     A,R3
        MOV     R1,A
        MOV     A,R0
        ADD     A,#-0x1
        DEC     R2
        MOV     A,R1
        ADDC    A,#-0x1
        MOV     R3,A
        MOV     A,R0
        ORL     A,R1
        JNZ     ??Onboard_wait_1
//  336 }
        LJMP    ?BRET
          CFI EndBlock cfiBlock9
//  337 
//  338 /*********************************************************************
//  339  * @fn      Onboard_soft_reset
//  340  *
//  341  * @brief   Effect a soft reset.
//  342  *
//  343  * @param   none
//  344  *
//  345  * @return  none
//  346  *
//  347  *********************************************************************/

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  348 __near_func void Onboard_soft_reset( void )
Onboard_soft_reset:
          CFI Block cfiBlock10 Using cfiCommon1
          CFI Function Onboard_soft_reset
        CODE
//  349 {
        ; Saved register size: 0
        ; Auto size: 0
//  350   HAL_DISABLE_INTERRUPTS();
        CLR     0xa8.7
//  351   // Abort all DMA channels to insure that ongoing operations do not
//  352   // interfere with re-configuration.
//  353   DMAARM = 0x80 | 0x1F;
        MOV     0xd6,#-0x61
//  354   asm("LJMP 0x0");
        LJMP 0x0
//  355 }
        RET
          CFI EndBlock cfiBlock10
        REQUIRE _A_IEN0
        REQUIRE DMAARM
//  356 
//  357 #if defined MT_UBL_FUNC
//  358 #if !defined UBL_RC_IMG_PG_BEG
//  359 #define UBL_RC_IMG_PG_BEG  (HAL_SB_CRC_ADDR / HAL_FLASH_PAGE_SIZE)
//  360 #endif
//  361 #if !defined UBL_MD_PG_OFFSET
//  362 #define UBL_MD_PG_OFFSET   (HAL_SB_CRC_ADDR % HAL_FLASH_PAGE_SIZE + 2)
//  363 #endif
//  364 #if !defined UBL_ADDR
//  365 #define UBL_MD_ADDR        (HAL_SB_CRC_ADDR + 2)
//  366 #endif
//  367 
//  368 /*********************************************************************
//  369  * @fn      MT_UblCommandProcessing
//  370  *
//  371  * @brief   Effect a soft reset.
//  372  *
//  373  * @param   pBuf - Pointer to the received MT buffer.
//  374  *
//  375  * @return  MT_RPC_ERR_COMMAND_ID if the MT command is not MT_UBL_ERASE.
//  376  *
//  377  *********************************************************************/
//  378 uint8 MT_UblCommandProcessing(uint8 *pBuf);
//  379 uint8 MT_UblCommandProcessing(uint8 *pBuf)
//  380 {
//  381   if (pBuf[MT_RPC_POS_CMD1] == MT_UBL_ERASE)
//  382   {
//  383     uint16 crc[2];
//  384     HalFlashRead(UBL_RC_IMG_PG_BEG, UBL_MD_PG_OFFSET, (uint8 *)(crc+1), 2);
//  385 
//  386     if (crc[1] != 0)
//  387     {
//  388       crc[1] ^= 0xFFFF;  // Only write to zero bits that are not already zero.
//  389       crc[0] = 0xFFFF;
//  390       HalFlashWrite((UBL_MD_ADDR - 2) / HAL_FLASH_WORD_SIZE, (uint8 *)crc, 1);
//  391     }
//  392 
//  393     Onboard_soft_reset();
//  394   }
//  395 
//  396   return MT_RPC_ERR_COMMAND_ID;
//  397 }
//  398 #endif
//  399 
//  400 /*********************************************************************
//  401  *                    EXTERNAL I/O FUNCTIONS
//  402  *
//  403  * User defined functions to control external devices. Add your code
//  404  * to the following functions to control devices wired to DB outputs.
//  405  *
//  406  *********************************************************************/
//  407 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  408 void BigLight_On( void )
BigLight_On:
          CFI Block cfiBlock11 Using cfiCommon0
          CFI Function BigLight_On
        CODE
//  409 {
        ; Saved register size: 0
        ; Auto size: 0
//  410   // Put code here to turn on an external light
//  411 }
        LJMP    ?BRET
          CFI EndBlock cfiBlock11
//  412 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  413 void BigLight_Off( void )
BigLight_Off:
          CFI Block cfiBlock12 Using cfiCommon0
          CFI Function BigLight_Off
        CODE
//  414 {
        ; Saved register size: 0
        ; Auto size: 0
//  415   // Put code here to turn off an external light
//  416 }
        LJMP    ?BRET
          CFI EndBlock cfiBlock12
//  417 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  418 void BuzzerControl( uint8 on )
BuzzerControl:
          CFI Block cfiBlock13 Using cfiCommon0
          CFI Function BuzzerControl
        CODE
//  419 {
        ; Saved register size: 0
        ; Auto size: 0
//  420   // Put code here to turn a buzzer on/off
//  421   (void)on;
//  422 }
        LJMP    ?BRET
          CFI EndBlock cfiBlock13
//  423 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  424 void Dimmer( uint8 lvl )
Dimmer:
          CFI Block cfiBlock14 Using cfiCommon0
          CFI Function Dimmer
        CODE
//  425 {
        ; Saved register size: 0
        ; Auto size: 0
//  426   // Put code here to control a dimmer
//  427   (void)lvl;
//  428 }
        LJMP    ?BRET
          CFI EndBlock cfiBlock14
//  429 
//  430 // No dip switches on this board

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  431 uint8 GetUserDipSw( void )
GetUserDipSw:
          CFI Block cfiBlock15 Using cfiCommon0
          CFI Function GetUserDipSw
        CODE
//  432 {
        ; Saved register size: 0
        ; Auto size: 0
//  433   return 0;
        MOV     R1,#0x0
        LJMP    ?BRET
//  434 }
          CFI EndBlock cfiBlock15

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for registeredKeysTaskID>`:
        DATA8
        DB 255

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??InitBoard::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    InitBoard

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??RegisterForKeys::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    RegisterForKeys

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??OnBoard_SendKeys::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    OnBoard_SendKeys

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??OnBoard_KeyCallback::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    OnBoard_KeyCallback

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??OnBoard_stack_used::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    OnBoard_stack_used

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??_itoa::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    _itoa

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??Onboard_rand::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    Onboard_rand

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??Onboard_wait::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    Onboard_wait

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??BigLight_On::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    BigLight_On

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??BigLight_Off::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    BigLight_Off

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??BuzzerControl::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    BuzzerControl

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??Dimmer::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    Dimmer

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??GetUserDipSw::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    GetUserDipSw

        RSEG XSTACK:DATA:REORDER:NOROOT(0)

        END
//  435 
//  436 /*********************************************************************
//  437 *********************************************************************/
// 
//   444 bytes in segment BANKED_CODE
//    78 bytes in segment BANK_RELAYS
//     8 bytes in segment IEEE_ADDRESS_SPACE
//    16 bytes in segment LOCK_BITS_ADDRESS_SPACE
//     9 bytes in segment NEAR_CODE
// 1 932 bytes in segment RESERVED_ADDRESS_SPACE
//     3 bytes in segment SFR_AN
//     1 byte  in segment XDATA_I
//     1 byte  in segment XDATA_ID
//     8 bytes in segment XDATA_Z
// 
//   532 bytes of CODE  memory
//     0 bytes of DATA  memory (+ 3 bytes shared)
// 1 965 bytes of XDATA memory
//
//Errors: none
//Warnings: none
