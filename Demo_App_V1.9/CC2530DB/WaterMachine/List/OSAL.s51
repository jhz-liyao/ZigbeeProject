///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V9.30.1.3056 for 8051               25/Oct/2016  15:28:51
// Copyright 2004-2015 IAR Systems AB.
// Standalone license - IAR Embedded Workbench for 8051
//
//    Core               =  plain
//    Code model         =  banked
//    Data model         =  large
//    Calling convention =  xdata reentrant
//    Constant location  =  data_rom
//    Dptr setup         =  1,16
//                          
//    Source file        =  
//        E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Components\osal\common\OSAL.c
//    Command line       =  
//        -f "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"
//        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
//        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f
//        "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
//        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
//        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
//        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
//        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
//        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
//        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
//        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
//        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
//        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
//        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
//        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
//        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
//        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
//        -DPOLL_RATE=50 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
//        -DREJOIN_POLL_RATE=440 "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack
//        Mesh 1.0.0\Components\osal\common\OSAL.c" -D HAL_UART=TRUE -D
//        HAL_UART_ISR=1 -D HAL_UART_DMA=0 -D LOG_OUT -D
//        UART1_PROTOCOL_RESOLVER=1 -D xISQC -D NWK_AUTO_POLL -D xZTOOL_P1 -D
//        ISR_KEYINTERRUPT -D xMT_TASK -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D
//        xLCD_SUPPORTED=DEBUG -D xPOWER_SAVING -lC
//        "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\WaterMachine\List"
//        -lA "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\WaterMachine\List"
//        --diag_suppress Pe001,Pa010 -o
//        "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\WaterMachine\Obj"
//        -e --no_code_motion --debug --core=plain --dptr=16,1
//        --data_model=large --code_model=banked
//        --calling_convention=xdata_reentrant --place_constants=data_rom
//        --nr_virtual_regs 8 -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack
//        Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\"
//        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\..\Source\"
//        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\..\Frame\"
//        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\..\Module\WaterMachine\"
//        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\..\..\..\ZMain\TI2530DB\"
//        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\hal\include\"
//        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
//        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\mac\include\"
//        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
//        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
//        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
//        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\mt\"
//        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\osal\include\"
//        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\services\saddr\"
//        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\services\sdata\"
//        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\stack\af\"
//        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
//        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
//        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\stack\sec\"
//        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\stack\sys\"
//        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
//        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\zmac\"
//        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
//        -Ohz
//    List file          =  
//        E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\WaterMachine\List\OSAL.s51
//
///////////////////////////////////////////////////////////////////////////////

        NAME OSAL

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?V0
        EXTERN ?V1
        EXTERN ?V2
        EXTERN ?V4
        EXTERN ?V5
        EXTERN ?V6
        EXTERN ?V7
        EXTERN ?V3
        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?CALL_IND
        EXTERN ?C_GPTR_LOAD
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?L_ADD
        EXTERN ?L_MOV_X
        EXTERN ?L_SHL
        EXTERN ?MOVE_LONG8_XDATA_XDATA
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?UL_DIV_MOD
        EXTERN ?UL_SHR
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN ?XSTACK_DISP101_8
        EXTERN ?XSTACK_DISP102_8
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        PUBLIC `??_ltoa::?relay`
        FUNCTION `??_ltoa::?relay`,0203H
        PUBLIC `??osal_buffer_uint24::?relay`
        FUNCTION `??osal_buffer_uint24::?relay`,0203H
        PUBLIC `??osal_buffer_uint32::?relay`
        FUNCTION `??osal_buffer_uint32::?relay`,0203H
        PUBLIC `??osal_build_uint16::?relay`
        FUNCTION `??osal_build_uint16::?relay`,0203H
        PUBLIC `??osal_build_uint32::?relay`
        FUNCTION `??osal_build_uint32::?relay`,0203H
        PUBLIC `??osal_clear_event::?relay`
        FUNCTION `??osal_clear_event::?relay`,0203H
        PUBLIC `??osal_init_system::?relay`
        FUNCTION `??osal_init_system::?relay`,0203H
        PUBLIC `??osal_int_disable::?relay`
        FUNCTION `??osal_int_disable::?relay`,0203H
        PUBLIC `??osal_int_enable::?relay`
        FUNCTION `??osal_int_enable::?relay`,0203H
        PUBLIC `??osal_isbufset::?relay`
        FUNCTION `??osal_isbufset::?relay`,0203H
        PUBLIC `??osal_isr_register::?relay`
        FUNCTION `??osal_isr_register::?relay`,0203H
        PUBLIC `??osal_memcmp::?relay`
        FUNCTION `??osal_memcmp::?relay`,0203H
        PUBLIC `??osal_memcpy::?relay`
        FUNCTION `??osal_memcpy::?relay`,0203H
        PUBLIC `??osal_memdup::?relay`
        FUNCTION `??osal_memdup::?relay`,0203H
        PUBLIC `??osal_memset::?relay`
        FUNCTION `??osal_memset::?relay`,0203H
        PUBLIC `??osal_msg_allocate::?relay`
        FUNCTION `??osal_msg_allocate::?relay`,0203H
        PUBLIC `??osal_msg_count::?relay`
        FUNCTION `??osal_msg_count::?relay`,0203H
        PUBLIC `??osal_msg_deallocate::?relay`
        FUNCTION `??osal_msg_deallocate::?relay`,0203H
        PUBLIC `??osal_msg_dequeue::?relay`
        FUNCTION `??osal_msg_dequeue::?relay`,0203H
        PUBLIC `??osal_msg_enqueue::?relay`
        FUNCTION `??osal_msg_enqueue::?relay`,0203H
        PUBLIC `??osal_msg_enqueue_max::?relay`
        FUNCTION `??osal_msg_enqueue_max::?relay`,0203H
        FUNCTION `??osal_msg_enqueue_push::?relay`,0203H
        PUBLIC `??osal_msg_extract::?relay`
        FUNCTION `??osal_msg_extract::?relay`,0203H
        PUBLIC `??osal_msg_find::?relay`
        FUNCTION `??osal_msg_find::?relay`,0203H
        PUBLIC `??osal_msg_push::?relay`
        FUNCTION `??osal_msg_push::?relay`,0203H
        PUBLIC `??osal_msg_push_front::?relay`
        FUNCTION `??osal_msg_push_front::?relay`,0203H
        PUBLIC `??osal_msg_receive::?relay`
        FUNCTION `??osal_msg_receive::?relay`,0203H
        PUBLIC `??osal_msg_send::?relay`
        FUNCTION `??osal_msg_send::?relay`,0203H
        PUBLIC `??osal_rand::?relay`
        FUNCTION `??osal_rand::?relay`,0203H
        PUBLIC `??osal_revmemcpy::?relay`
        FUNCTION `??osal_revmemcpy::?relay`,0203H
        PUBLIC `??osal_run_system::?relay`
        FUNCTION `??osal_run_system::?relay`,0203H
        PUBLIC `??osal_self::?relay`
        FUNCTION `??osal_self::?relay`,0203H
        PUBLIC `??osal_set_event::?relay`
        FUNCTION `??osal_set_event::?relay`,0203H
        PUBLIC `??osal_start_system::?relay`
        FUNCTION `??osal_start_system::?relay`,0203H
        PUBLIC `??osal_strlen::?relay`
        FUNCTION `??osal_strlen::?relay`,0203H
        PUBWEAK _A_IEN0
        PUBWEAK __Constant_2710
        PUBWEAK __Constant_5f5e100
        PUBLIC _ltoa
        FUNCTION _ltoa,0a1203H
        ARGFRAME XSTACK, 2, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 53, STACK
        PUBLIC osal_buffer_uint24
        FUNCTION osal_buffer_uint24,080203H
        ARGFRAME XSTACK, 4, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 16, STACK
        PUBLIC osal_buffer_uint32
        FUNCTION osal_buffer_uint32,080203H
        ARGFRAME XSTACK, 4, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 16, STACK
        PUBLIC osal_build_uint16
        FUNCTION osal_build_uint16,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC osal_build_uint32
        FUNCTION osal_build_uint32,080203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        PUBLIC osal_clear_event
        FUNCTION osal_clear_event,0203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC osal_init_system
        FUNCTION osal_init_system,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC osal_int_disable
        FUNCTION osal_int_disable,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC osal_int_enable
        FUNCTION osal_int_enable,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC osal_isbufset
        FUNCTION osal_isbufset,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC osal_isr_register
        FUNCTION osal_isr_register,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC osal_memcmp
        FUNCTION osal_memcmp,080203H
        ARGFRAME XSTACK, 3, STACK
        LOCFRAME XSTACK, 18, STACK
        PUBLIC osal_memcpy
        FUNCTION osal_memcpy,0203H
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC osal_memdup
        FUNCTION osal_memdup,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        PUBLIC osal_memset
        FUNCTION osal_memset,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC osal_msg_allocate
        FUNCTION osal_msg_allocate,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC osal_msg_count
        FUNCTION osal_msg_count,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC osal_msg_deallocate
        FUNCTION osal_msg_deallocate,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC osal_msg_dequeue
        FUNCTION osal_msg_dequeue,080203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC osal_msg_enqueue
        FUNCTION osal_msg_enqueue,0203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC osal_msg_enqueue_max
        FUNCTION osal_msg_enqueue_max,080203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        FUNCTION osal_msg_enqueue_push,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC osal_msg_extract
        FUNCTION osal_msg_extract,0203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC osal_msg_find
        FUNCTION osal_msg_find,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC osal_msg_push
        FUNCTION osal_msg_push,0203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC osal_msg_push_front
        FUNCTION osal_msg_push_front,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC osal_msg_receive
        FUNCTION osal_msg_receive,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC osal_msg_send
        FUNCTION osal_msg_send,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC osal_qHead
        PUBLIC osal_rand
        FUNCTION osal_rand,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC osal_revmemcpy
        FUNCTION osal_revmemcpy,0203H
        ARGFRAME XSTACK, 3, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC osal_run_system
        FUNCTION osal_run_system,0a1203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 12, STACK
        PUBLIC osal_self
        FUNCTION osal_self,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC osal_set_event
        FUNCTION osal_set_event,0203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC osal_start_system
        FUNCTION osal_start_system,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC osal_strlen
        FUNCTION osal_strlen,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource SP:8, PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B SameValue
          CFI A SameValue
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT SameValue
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon1
        
Hal_ProcessPoll     SYMBOL "Hal_ProcessPoll"
`??Hal_ProcessPoll::?relay` SYMBOL "?relay", Hal_ProcessPoll
Onboard_rand        SYMBOL "Onboard_rand"
`??Onboard_rand::?relay` SYMBOL "?relay", Onboard_rand
_itoa               SYMBOL "_itoa"
`??_itoa::?relay`   SYMBOL "?relay", _itoa
memset              SYMBOL "memset"
`??memset::?relay`  SYMBOL "?relay", memset
osalInitTasks       SYMBOL "osalInitTasks"
`??osalInitTasks::?relay` SYMBOL "?relay", osalInitTasks
osalTimeUpdate      SYMBOL "osalTimeUpdate"
`??osalTimeUpdate::?relay` SYMBOL "?relay", osalTimeUpdate
osalTimerInit       SYMBOL "osalTimerInit"
`??osalTimerInit::?relay` SYMBOL "?relay", osalTimerInit
osal_mem_alloc      SYMBOL "osal_mem_alloc"
`??osal_mem_alloc::?relay` SYMBOL "?relay", osal_mem_alloc
osal_mem_free       SYMBOL "osal_mem_free"
`??osal_mem_free::?relay` SYMBOL "?relay", osal_mem_free
osal_mem_init       SYMBOL "osal_mem_init"
`??osal_mem_init::?relay` SYMBOL "?relay", osal_mem_init
osal_mem_kick       SYMBOL "osal_mem_kick"
`??osal_mem_kick::?relay` SYMBOL "?relay", osal_mem_kick
osal_pwrmgr_init    SYMBOL "osal_pwrmgr_init"
`??osal_pwrmgr_init::?relay` SYMBOL "?relay", osal_pwrmgr_init
strcat              SYMBOL "strcat"
`??strcat::?relay`  SYMBOL "?relay", strcat
strcpy              SYMBOL "strcpy"
`??strcpy::?relay`  SYMBOL "?relay", strcpy
strlen              SYMBOL "strlen"
`??strlen::?relay`  SYMBOL "?relay", strlen
_ltoa               SYMBOL "_ltoa"
`??_ltoa::?relay`   SYMBOL "?relay", _ltoa
osal_buffer_uint24  SYMBOL "osal_buffer_uint24"
`??osal_buffer_uint24::?relay` SYMBOL "?relay", osal_buffer_uint24
osal_buffer_uint32  SYMBOL "osal_buffer_uint32"
`??osal_buffer_uint32::?relay` SYMBOL "?relay", osal_buffer_uint32
osal_build_uint16   SYMBOL "osal_build_uint16"
`??osal_build_uint16::?relay` SYMBOL "?relay", osal_build_uint16
osal_build_uint32   SYMBOL "osal_build_uint32"
`??osal_build_uint32::?relay` SYMBOL "?relay", osal_build_uint32
osal_clear_event    SYMBOL "osal_clear_event"
`??osal_clear_event::?relay` SYMBOL "?relay", osal_clear_event
osal_init_system    SYMBOL "osal_init_system"
`??osal_init_system::?relay` SYMBOL "?relay", osal_init_system
osal_int_disable    SYMBOL "osal_int_disable"
`??osal_int_disable::?relay` SYMBOL "?relay", osal_int_disable
osal_int_enable     SYMBOL "osal_int_enable"
`??osal_int_enable::?relay` SYMBOL "?relay", osal_int_enable
osal_isbufset       SYMBOL "osal_isbufset"
`??osal_isbufset::?relay` SYMBOL "?relay", osal_isbufset
osal_isr_register   SYMBOL "osal_isr_register"
`??osal_isr_register::?relay` SYMBOL "?relay", osal_isr_register
osal_memcmp         SYMBOL "osal_memcmp"
`??osal_memcmp::?relay` SYMBOL "?relay", osal_memcmp
osal_memcpy         SYMBOL "osal_memcpy"
`??osal_memcpy::?relay` SYMBOL "?relay", osal_memcpy
osal_memdup         SYMBOL "osal_memdup"
`??osal_memdup::?relay` SYMBOL "?relay", osal_memdup
osal_memset         SYMBOL "osal_memset"
`??osal_memset::?relay` SYMBOL "?relay", osal_memset
osal_msg_allocate   SYMBOL "osal_msg_allocate"
`??osal_msg_allocate::?relay` SYMBOL "?relay", osal_msg_allocate
osal_msg_count      SYMBOL "osal_msg_count"
`??osal_msg_count::?relay` SYMBOL "?relay", osal_msg_count
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
`??osal_msg_deallocate::?relay` SYMBOL "?relay", osal_msg_deallocate
osal_msg_dequeue    SYMBOL "osal_msg_dequeue"
`??osal_msg_dequeue::?relay` SYMBOL "?relay", osal_msg_dequeue
osal_msg_enqueue    SYMBOL "osal_msg_enqueue"
`??osal_msg_enqueue::?relay` SYMBOL "?relay", osal_msg_enqueue
osal_msg_enqueue_max SYMBOL "osal_msg_enqueue_max"
`??osal_msg_enqueue_max::?relay` SYMBOL "?relay", osal_msg_enqueue_max
osal_msg_extract    SYMBOL "osal_msg_extract"
`??osal_msg_extract::?relay` SYMBOL "?relay", osal_msg_extract
osal_msg_find       SYMBOL "osal_msg_find"
`??osal_msg_find::?relay` SYMBOL "?relay", osal_msg_find
osal_msg_push       SYMBOL "osal_msg_push"
`??osal_msg_push::?relay` SYMBOL "?relay", osal_msg_push
osal_msg_push_front SYMBOL "osal_msg_push_front"
`??osal_msg_push_front::?relay` SYMBOL "?relay", osal_msg_push_front
osal_msg_receive    SYMBOL "osal_msg_receive"
`??osal_msg_receive::?relay` SYMBOL "?relay", osal_msg_receive
osal_msg_send       SYMBOL "osal_msg_send"
`??osal_msg_send::?relay` SYMBOL "?relay", osal_msg_send
osal_rand           SYMBOL "osal_rand"
`??osal_rand::?relay` SYMBOL "?relay", osal_rand
osal_revmemcpy      SYMBOL "osal_revmemcpy"
`??osal_revmemcpy::?relay` SYMBOL "?relay", osal_revmemcpy
osal_run_system     SYMBOL "osal_run_system"
`??osal_run_system::?relay` SYMBOL "?relay", osal_run_system
osal_self           SYMBOL "osal_self"
`??osal_self::?relay` SYMBOL "?relay", osal_self
osal_set_event      SYMBOL "osal_set_event"
`??osal_set_event::?relay` SYMBOL "?relay", osal_set_event
osal_start_system   SYMBOL "osal_start_system"
`??osal_start_system::?relay` SYMBOL "?relay", osal_start_system
osal_strlen         SYMBOL "osal_strlen"
`??osal_strlen::?relay` SYMBOL "?relay", osal_strlen

        EXTERN `??Hal_ProcessPoll::?relay`
        FUNCTION `??Hal_ProcessPoll::?relay`,00H
        EXTERN `??Onboard_rand::?relay`
        FUNCTION `??Onboard_rand::?relay`,00H
        EXTERN `??_itoa::?relay`
        FUNCTION `??_itoa::?relay`,00H
        EXTERN `??memset::?relay`
        FUNCTION `??memset::?relay`,00H
        EXTERN `??osalInitTasks::?relay`
        FUNCTION `??osalInitTasks::?relay`,00H
        EXTERN `??osalTimeUpdate::?relay`
        FUNCTION `??osalTimeUpdate::?relay`,00H
        EXTERN `??osalTimerInit::?relay`
        FUNCTION `??osalTimerInit::?relay`,00H
        EXTERN `??osal_mem_alloc::?relay`
        FUNCTION `??osal_mem_alloc::?relay`,00H
        EXTERN `??osal_mem_free::?relay`
        FUNCTION `??osal_mem_free::?relay`,00H
        EXTERN `??osal_mem_init::?relay`
        FUNCTION `??osal_mem_init::?relay`,00H
        EXTERN `??osal_mem_kick::?relay`
        FUNCTION `??osal_mem_kick::?relay`,00H
        EXTERN `??osal_pwrmgr_init::?relay`
        FUNCTION `??osal_pwrmgr_init::?relay`,00H
        EXTERN `??strcat::?relay`
        FUNCTION `??strcat::?relay`,00H
        EXTERN `??strcpy::?relay`
        FUNCTION `??strcpy::?relay`,00H
        EXTERN `??strlen::?relay`
        FUNCTION `??strlen::?relay`,00H
        EXTERN Hal_ProcessPoll
        FUNCTION Hal_ProcessPoll,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN Onboard_rand
        FUNCTION Onboard_rand,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN _itoa
        FUNCTION _itoa,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 53, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN memset
        FUNCTION memset,010202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osalInitTasks
        FUNCTION osalInitTasks,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osalTimeUpdate
        FUNCTION osalTimeUpdate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osalTimerInit
        FUNCTION osalTimerInit,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_alloc
        FUNCTION osal_mem_alloc,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_free
        FUNCTION osal_mem_free,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_init
        FUNCTION osal_mem_init,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_kick
        FUNCTION osal_mem_kick,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_pwrmgr_init
        FUNCTION osal_pwrmgr_init,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN strcat
        FUNCTION strcat,010202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 53, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN strcpy
        FUNCTION strcpy,010202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 53, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN strlen
        FUNCTION strlen,010202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 53, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN tasksArr
        EXTERN tasksCnt
        EXTERN tasksEvents

// E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh 1.0.0\Components\osal\common\OSAL.c
//    1 #include <string.h>
//    2 
//    3 #include "comdef.h"
//    4 #include "hal_board.h"

        ASEGN SFR_AN:DATA:NOROOT,0a8H
// union <unnamed> volatile __sfr _A_IEN0
_A_IEN0:
        DATA8
        DS 1
//    5 #include "OSAL.h"
//    6 #include "OSAL_Tasks.h"
//    7 #include "OSAL_Memory.h"
//    8 #include "OSAL_PwrMgr.h"
//    9 #include "OSAL_Clock.h"
//   10 
//   11 #include "OnBoard.h"
//   12 
//   13 /* HAL */
//   14 #include "hal_drivers.h"
//   15 
//   16 #ifdef IAR_ARMCM3_LM
//   17   #include "FreeRTOSConfig.h"
//   18   #include "osal_task.h"
//   19 #endif
//   20 
//   21 /*********************************************************************
//   22  * MACROS
//   23  */
//   24 
//   25 /*********************************************************************
//   26  * CONSTANTS
//   27  */
//   28 
//   29 /*********************************************************************
//   30  * TYPEDEFS
//   31  */
//   32 
//   33 /*********************************************************************
//   34  * GLOBAL VARIABLES
//   35  */
//   36 
//   37 // Message Pool Definitions

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//   38 osal_msg_q_t osal_qHead;
osal_qHead:
        DS 2
        REQUIRE __INIT_XDATA_Z
//   39 
//   40 /*********************************************************************
//   41  * EXTERNAL VARIABLES
//   42  */
//   43 
//   44 /*********************************************************************
//   45  * EXTERNAL FUNCTIONS
//   46  */
//   47 
//   48 /*********************************************************************
//   49  * LOCAL VARIABLES
//   50  */
//   51 
//   52 // Index of active task

        RSEG XDATA_I:XDATA:NOROOT(0)
//   53 static uint8 activeTaskID = TASK_NO_TASK;
activeTaskID:
        DATA8
        DS 1
        REQUIRE `?<Initializer for activeTaskID>`
        REQUIRE __INIT_XDATA_I
//   54 
//   55 /*********************************************************************
//   56  * LOCAL FUNCTION PROTOTYPES
//   57  */
//   58 
//   59 static uint8 osal_msg_enqueue_push( uint8 destination_task, uint8 *msg_ptr, uint8 urgent );
//   60 
//   61 /*********************************************************************
//   62  * HELPER FUNCTIONS
//   63  */
//   64 /* very ugly stub so Keil can compile */
//   65 #ifdef __KEIL__
//   66 char *  itoa ( int value, char * buffer, int radix )
//   67 {
//   68   return(buffer);
//   69 }
//   70 #endif
//   71 
//   72 /*********************************************************************
//   73  * @fn      osal_strlen
//   74  *
//   75  * @brief
//   76  *
//   77  *   Calculates the length of a string.  The string must be null
//   78  *   terminated.
//   79  *
//   80  * @param   char *pString - pointer to text string
//   81  *
//   82  * @return  int - number of characters
//   83  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   84 int osal_strlen( char *pString )
osal_strlen:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function osal_strlen
        CODE
//   85 {
        FUNCALL osal_strlen, strlen
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//   86   return (int)( strlen( pString ) );
        ; Setup parameters for call to function strlen
        LCALL   `??strlen::?relay`   ; Banked call to: strlen
        LJMP    ?Subroutine0 & 0xFFFF
//   87 }
          CFI EndBlock cfiBlock0
//   88 
//   89 /*********************************************************************
//   90  * @fn      osal_memcpy
//   91  *
//   92  * @brief
//   93  *
//   94  *   Generic memory copy.
//   95  *
//   96  *   Note: This function differs from the standard memcpy(), since
//   97  *         it returns the pointer to the next destination uint8. The
//   98  *         standard memcpy() returns the original destination address.
//   99  *
//  100  * @param   dst - destination address
//  101  * @param   src - source address
//  102  * @param   len - number of bytes to copy
//  103  *
//  104  * @return  pointer to end of destination buffer
//  105  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  106 void *osal_memcpy( void *dst, const void GENERIC *src, unsigned int len )
osal_memcpy:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function osal_memcpy
        CODE
//  107 {
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  108   uint8 *pDst;
//  109   const uint8 GENERIC *pSrc;
//  110 
//  111   pSrc = src;
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine9 & 0xFFFF
//  112   pDst = dst;
??CrossCallReturnLabel_2:
        MOV     DPL,R6
        MOV     DPH,R7
        SJMP    ??osal_memcpy_0
//  113 
//  114   while ( len-- )
//  115     *pDst++ = *pSrc++;
??osal_memcpy_1:
        LCALL   ?C_GPTR_LOAD
        MOVX    @DPTR,A
        MOV     A,R1
        ADD     A,#0x1
        INC     R1
        CLR     A
        ADDC    A,R2
        MOV     R2,A
        INC     DPTR
??osal_memcpy_0:
        LCALL   ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_19:
        JNZ     ??osal_memcpy_1
//  116 
//  117   return ( pDst );
          CFI EndBlock cfiBlock1
        REQUIRE ?Subroutine5
        ; // Fall through to label ?Subroutine5
//  118 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R2,DPL
        MOV     R3,DPH
        LJMP    ??Subroutine32_0 & 0xFFFF
          CFI EndBlock cfiBlock2
//  119 
//  120 /*********************************************************************
//  121  * @fn      osal_revmemcpy
//  122  *
//  123  * @brief   Generic reverse memory copy.  Starts at the end of the
//  124  *   source buffer, by taking the source address pointer and moving
//  125  *   pointer ahead "len" bytes, then decrementing the pointer.
//  126  *
//  127  *   Note: This function differs from the standard memcpy(), since
//  128  *         it returns the pointer to the next destination uint8. The
//  129  *         standard memcpy() returns the original destination address.
//  130  *
//  131  * @param   dst - destination address
//  132  * @param   src - source address
//  133  * @param   len - number of bytes to copy
//  134  *
//  135  * @return  pointer to end of destination buffer
//  136  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  137 void *osal_revmemcpy( void *dst, const void GENERIC *src, unsigned int len )
osal_revmemcpy:
          CFI Block cfiBlock3 Using cfiCommon0
          CFI Function osal_revmemcpy
        CODE
//  138 {
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  139   uint8 *pDst;
//  140   const uint8 GENERIC *pSrc;
//  141 
//  142   pSrc = src;
//  143   pSrc += (len-1);
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_3:
        MOV     A,R1
        ADD     A,R4
        MOV     R1,A
        MOV     A,R2
        ADDC    A,R5
        MOV     R2,A
        MOV     A,R1
        ADD     A,#-0x1
        DEC     R1
        MOV     A,R2
        ADDC    A,#-0x1
        MOV     R2,A
//  144   pDst = dst;
        MOV     DPL,R6
        MOV     DPH,R7
        SJMP    ??osal_revmemcpy_0
//  145 
//  146   while ( len-- )
//  147     *pDst++ = *pSrc--;
??osal_revmemcpy_1:
        LCALL   ?C_GPTR_LOAD
        MOVX    @DPTR,A
        MOV     A,R1
        ADD     A,#-0x1
        DEC     R1
        MOV     A,R2
        ADDC    A,#-0x1
        MOV     R2,A
        INC     DPTR
??osal_revmemcpy_0:
        LCALL   ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_20:
        JNZ     ??osal_revmemcpy_1
//  148 
//  149   return ( pDst );
        SJMP    ?Subroutine5
//  150 }
          CFI EndBlock cfiBlock3

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine18:
          CFI Block cfiCond4 Using cfiCommon0
          CFI Function osal_memcpy
          CFI Conditional ??CrossCallReturnLabel_19
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond5 Using cfiCommon0
          CFI (cfiCond5) Function osal_revmemcpy
          CFI (cfiCond5) Conditional ??CrossCallReturnLabel_20
          CFI (cfiCond5) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond5) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond5) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond5) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond5) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond5) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond5) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond5) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond5) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond5) CFA_SP SP+-2
          CFI (cfiCond5) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker6 Using cfiCommon1
          CFI (cfiPicker6) NoFunction
          CFI (cfiPicker6) Picker
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
        MOV     A,R6
        ADD     A,#-0x1
        DEC     R4
        MOV     A,R7
        ADDC    A,#-0x1
        MOV     R5,A
        MOV     A,R6
        ORL     A,R7
        RET
          CFI EndBlock cfiCond4
          CFI EndBlock cfiCond5
          CFI EndBlock cfiPicker6

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine9:
          CFI Block cfiCond7 Using cfiCommon0
          CFI Function osal_memcpy
          CFI Conditional ??CrossCallReturnLabel_2
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond8 Using cfiCommon0
          CFI (cfiCond8) Function osal_revmemcpy
          CFI (cfiCond8) Conditional ??CrossCallReturnLabel_3
          CFI (cfiCond8) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond8) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond8) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond8) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond8) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond8) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond8) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond8) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond8) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond8) CFA_SP SP+-2
          CFI (cfiCond8) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond9 Using cfiCommon0
          CFI (cfiCond9) Function osal_memcmp
          CFI (cfiCond9) Conditional ??CrossCallReturnLabel_4
          CFI (cfiCond9) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond9) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond9) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond9) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond9) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond9) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond9) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond9) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond9) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond9) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond9) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond9) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond9) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond9) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond9) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond9) CFA_SP SP+-2
          CFI (cfiCond9) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiPicker10 Using cfiCommon1
          CFI (cfiPicker10) NoFunction
          CFI (cfiPicker10) Picker
        MOVX    A,@DPTR
        MOV     R1,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        RET
          CFI EndBlock cfiCond7
          CFI EndBlock cfiCond8
          CFI EndBlock cfiCond9
          CFI EndBlock cfiPicker10
//  151 
//  152 /*********************************************************************
//  153  * @fn      osal_memdup
//  154  *
//  155  * @brief   Allocates a buffer [with osal_mem_alloc()] and copies
//  156  *          the src buffer into the newly allocated space.
//  157  *
//  158  * @param   src - source address
//  159  * @param   len - number of bytes to copy
//  160  *
//  161  * @return  pointer to the new allocated buffer, or NULL if
//  162  *          allocation problem.
//  163  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  164 void *osal_memdup( const void GENERIC *src, unsigned int len )
osal_memdup:
          CFI Block cfiBlock11 Using cfiCommon0
          CFI Function osal_memdup
        CODE
//  165 {
        FUNCALL osal_memdup, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL osal_memdup, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
        MOV     ?V0,R1
        MOV     ?V1,R2
        MOV     ?V2,R3
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
//  166   uint8 *pDst;
//  167 
//  168   pDst = osal_mem_alloc( len );
        ; Setup parameters for call to function osal_mem_alloc
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV     ?V6,R2
        MOV     ?V7,R3
//  169   if ( pDst )
        MOV     A,R2
        ORL     A,?V7
        JZ      ??osal_memdup_0
//  170   {
//  171     VOID osal_memcpy( pDst, src, len );
        ; Setup parameters for call to function osal_memcpy
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 19)
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
//  172   }
//  173 
//  174   return ( (void *)pDst );
??osal_memdup_0:
        MOV     R2,?V6
        MOV     R3,?V7
        LJMP    ?Subroutine2 & 0xFFFF
//  175 }
          CFI EndBlock cfiBlock11
//  176 
//  177 /*********************************************************************
//  178  * @fn      osal_memcmp
//  179  *
//  180  * @brief
//  181  *
//  182  *   Generic memory compare.
//  183  *
//  184  * @param   src1 - source 1 addrexx
//  185  * @param   src2 - source 2 address
//  186  * @param   len - number of bytes to compare
//  187  *
//  188  * @return  TRUE - same, FALSE - different
//  189  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  190 uint8 osal_memcmp( const void GENERIC *src1, const void GENERIC *src2, unsigned int len )
osal_memcmp:
          CFI Block cfiBlock12 Using cfiCommon0
          CFI Function osal_memcmp
        CODE
//  191 {
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        MOV     A,#-0xf
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 3
        MOV     A,#-0x3
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 18)
        MOV     ?V0,R4
        MOV     ?V1,R5
//  192   const uint8 GENERIC *pSrc1;
//  193   const uint8 GENERIC *pSrc2;
//  194 
//  195   pSrc1 = src1;
        MOV     ?V4,R1
        MOV     ?V5,R2
        MOV     ?V6,R3
//  196   pSrc2 = src2;
        MOV     A,#0x12
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R6,A
//  197 
//  198   while ( len-- )
??osal_memcmp_0:
        MOV     R0,?V0
        MOV     R1,?V1
        MOV     A,R0
        ADD     A,#-0x1
        MOV     ?V0,A
        MOV     A,R1
        ADDC    A,#-0x1
        MOV     ?V1,A
        MOV     A,R0
        ORL     A,R1
        JZ      ??osal_memcmp_1
//  199   {
//  200     if( *pSrc1++ != *pSrc2++ )
        MOV     R1,?V4
        MOV     R2,?V5
        MOV     R3,?V6
        MOV     A,R1
        ADD     A,#0x1
        MOV     ?V4,A
        CLR     A
        ADDC    A,R2
        MOV     ?V5,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,R4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R5
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R6
        MOVX    @DPTR,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_8:
        ADD     A,#0x1
        INC     R4
        CLR     A
        ADDC    A,R5
        MOV     R5,A
        LCALL   ?C_GPTR_LOAD
        MOV     R0,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_4:
        LCALL   ?C_GPTR_LOAD
        XRL     A,R0
        JZ      ??osal_memcmp_0
//  201       return FALSE;
        MOV     R1,#0x0
        SJMP    ??osal_memcmp_2
//  202   }
//  203   return TRUE;
??osal_memcmp_1:
        MOV     R1,#0x1
??osal_memcmp_2:
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 15)
        MOV     R7,#0x7
        LJMP    ?BANKED_LEAVE_XDATA
//  204 }
          CFI EndBlock cfiBlock12
//  205 
//  206 
//  207 /*********************************************************************
//  208  * @fn      osal_memset
//  209  *
//  210  * @brief
//  211  *
//  212  *   Set memory buffer to value.
//  213  *
//  214  * @param   dest - pointer to buffer
//  215  * @param   value - what to set each uint8 of the message
//  216  * @param   size - how big
//  217  *
//  218  * @return  pointer to destination buffer
//  219  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  220 void *osal_memset( void *dest, uint8 value, int len )
osal_memset:
          CFI Block cfiBlock13 Using cfiCommon0
          CFI Function osal_memset
        CODE
//  221 {
        FUNCALL osal_memset, memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
//  222   return memset( dest, value, len );
        ; Setup parameters for call to function memset
        MOV     ?V0,R4
        MOV     ?V1,R5
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 12)
        MOV     A,R6
        MOV     R4,A
        MOV     R5,#0x0
        LCALL   `??memset::?relay`   ; Banked call to: memset
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
        LJMP    ?Subroutine3 & 0xFFFF
//  223 }
          CFI EndBlock cfiBlock13
//  224 
//  225 /*********************************************************************
//  226  * @fn      osal_build_uint16
//  227  *
//  228  * @brief
//  229  *
//  230  *   Build a uint16 out of 2 bytes (0 then 1).
//  231  *
//  232  * @param   swapped - 0 then 1
//  233  *
//  234  * @return  uint16
//  235  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  236 uint16 osal_build_uint16( uint8 *swapped )
osal_build_uint16:
          CFI Block cfiBlock14 Using cfiCommon0
          CFI Function osal_build_uint16
        CODE
//  237 {
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  238   return ( BUILD_UINT16( swapped[0], swapped[1] ) );
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        CLR     A
        XCH     A,R0
        MOV     R1,A
        MOV     A,R4
        ADD     A,R0
        MOV     R2,A
        CLR     A
        ADDC    A,R1
        MOV     R3,A
        LJMP    ?Subroutine0 & 0xFFFF
//  239 }
          CFI EndBlock cfiBlock14
//  240 
//  241 /*********************************************************************
//  242  * @fn      osal_build_uint32
//  243  *
//  244  * @brief
//  245  *
//  246  *   Build a uint32 out of sequential bytes.
//  247  *
//  248  * @param   swapped - sequential bytes
//  249  * @param   len - number of bytes in the uint8 array
//  250  *
//  251  * @return  uint32
//  252  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  253 uint32 osal_build_uint32( uint8 *swapped, uint8 len )
osal_build_uint32:
          CFI Block cfiBlock15 Using cfiCommon0
          CFI Function osal_build_uint32
        CODE
//  254 {
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
//  255   if ( len == 2 )
        MOV     A,#0x2
        XRL     A,R6
        JNZ     ??osal_build_uint32_0
//  256     return ( BUILD_UINT32( swapped[0], swapped[1], 0L, 0L ) );
        MOV     DPL,R2
        MOV     DPH,R3
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_0:
        LJMP    ??osal_build_uint32_1 & 0xFFFF
//  257   else if ( len == 3 )
??osal_build_uint32_0:
        MOV     A,#0x3
        XRL     A,R6
        JNZ     ??osal_build_uint32_2
//  258     return ( BUILD_UINT32( swapped[0], swapped[1], swapped[2], 0L ) );
        MOV     DPL,R2
        MOV     DPH,R3
        LCALL   ?Subroutine27 & 0xFFFF
??CrossCallReturnLabel_38:
        INC     DPTR
        LCALL   ?Subroutine28 & 0xFFFF
??CrossCallReturnLabel_40:
        MOV     A,#0x8
        MOV     R0,#?V0
        LCALL   ?L_SHL
        MOV     R0,#?V4
        MOV     R1,#?V0
        LCALL   ?L_ADD
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0,A
        CLR     A
        MOV     ?V1,A
        MOV     A,#0x10
        MOV     R0,#?V0
        LCALL   ?L_SHL
        MOV     R0,#?V4
        MOV     R1,#?V0
        LCALL   ?L_ADD
        MOV     R2,?V4
        MOV     R3,?V5
        MOV     R4,?V6
        MOV     R5,?V7
        SJMP    ??osal_build_uint32_3
//  259   else if ( len == 4 )
??osal_build_uint32_2:
        MOV     A,#0x4
        XRL     A,R6
        MOV     DPL,R2
        MOV     DPH,R3
        JNZ     ??osal_build_uint32_4
//  260     return ( BUILD_UINT32( swapped[0], swapped[1], swapped[2], swapped[3] ) );
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_1:
        MOV     R0,#?V4
        LCALL   ?L_SHL
        MOV     R0,#?V0
        MOV     R1,#?V4
        LCALL   ?L_ADD
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V4,A
        CLR     A
        MOV     ?V5,A
        MOV     A,#0x10
        MOV     R0,#?V4
        LCALL   ?L_SHL
        MOV     R0,#?V0
        MOV     R1,#?V4
        LCALL   ?L_ADD
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V4,A
        CLR     A
        MOV     ?V6,A
        MOV     A,#0x18
??osal_build_uint32_1:
        MOV     R0,#?V4
        LCALL   ?L_SHL
        MOV     R0,#?V0
        MOV     R1,#?V4
        LCALL   ?L_ADD
        MOV     R2,?V0
        MOV     R3,?V1
        MOV     R4,?V2
        MOV     R5,?V3
        SJMP    ??osal_build_uint32_3
//  261   else
//  262     return ( (uint32)swapped[0] );
??osal_build_uint32_4:
        MOVX    A,@DPTR
        MOV     R2,A
        CLR     A
        MOV     R3,A
        MOV     R4,A
        MOV     R5,A
??osal_build_uint32_3:
        LJMP    ?Subroutine2 & 0xFFFF
//  263 }
          CFI EndBlock cfiBlock15

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine8:
          CFI Block cfiCond16 Using cfiCommon0
          CFI Function osal_build_uint32
          CFI Conditional ??CrossCallReturnLabel_0
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond17 Using cfiCommon0
          CFI (cfiCond17) Function osal_build_uint32
          CFI (cfiCond17) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond17) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond17) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond17) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond17) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond17) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond17) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond17) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond17) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond17) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond17) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond17) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond17) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond17) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond17) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond17) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond17) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond17) CFA_SP SP+-2
          CFI (cfiCond17) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker18 Using cfiCommon1
          CFI (cfiPicker18) NoFunction
          CFI (cfiPicker18) Picker
        LCALL   ?Subroutine28 & 0xFFFF
??CrossCallReturnLabel_41:
        INC     DPTR
        LCALL   ?Subroutine27 & 0xFFFF
??CrossCallReturnLabel_39:
        MOV     A,#0x8
        RET
          CFI EndBlock cfiCond16
          CFI EndBlock cfiCond17
          CFI EndBlock cfiPicker18

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine28:
          CFI Block cfiCond19 Using cfiCommon0
          CFI Function osal_build_uint32
          CFI Conditional ??CrossCallReturnLabel_40
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond20 Using cfiCommon0
          CFI (cfiCond20) Function osal_build_uint32
          CFI (cfiCond20) Conditional ??CrossCallReturnLabel_41, ??CrossCallReturnLabel_0
          CFI (cfiCond20) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond20) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond20) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond20) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond20) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond20) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond20) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond20) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond20) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond20) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond20) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond20) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond20) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond20) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond20) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond20) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond20) CFA_SP SP+-4
          CFI (cfiCond20) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond21 Using cfiCommon0
          CFI (cfiCond21) Function osal_build_uint32
          CFI (cfiCond21) Conditional ??CrossCallReturnLabel_41, ??CrossCallReturnLabel_1
          CFI (cfiCond21) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond21) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond21) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond21) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond21) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond21) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond21) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond21) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond21) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond21) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond21) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond21) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond21) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond21) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond21) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond21) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond21) CFA_SP SP+-4
          CFI (cfiCond21) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker22 Using cfiCommon1
          CFI (cfiPicker22) NoFunction
          CFI (cfiPicker22) Picker
        MOVX    A,@DPTR
        MOV     ?V0,A
        CLR     A
        MOV     ?V1,A
        MOV     ?V2,A
        MOV     ?V3,A
        RET
          CFI EndBlock cfiCond19
          CFI EndBlock cfiCond20
          CFI EndBlock cfiCond21
          CFI EndBlock cfiPicker22

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine27:
          CFI Block cfiCond23 Using cfiCommon0
          CFI Function osal_build_uint32
          CFI Conditional ??CrossCallReturnLabel_38
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond24 Using cfiCommon0
          CFI (cfiCond24) Function osal_build_uint32
          CFI (cfiCond24) Conditional ??CrossCallReturnLabel_39, ??CrossCallReturnLabel_0
          CFI (cfiCond24) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond24) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond24) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond24) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond24) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond24) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond24) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond24) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond24) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond24) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond24) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond24) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond24) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond24) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond24) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond24) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond24) CFA_SP SP+-4
          CFI (cfiCond24) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond25 Using cfiCommon0
          CFI (cfiCond25) Function osal_build_uint32
          CFI (cfiCond25) Conditional ??CrossCallReturnLabel_39, ??CrossCallReturnLabel_1
          CFI (cfiCond25) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond25) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond25) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond25) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond25) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond25) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond25) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond25) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond25) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond25) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond25) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond25) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond25) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond25) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond25) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond25) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond25) CFA_SP SP+-4
          CFI (cfiCond25) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker26 Using cfiCommon1
          CFI (cfiPicker26) NoFunction
          CFI (cfiPicker26) Picker
        MOVX    A,@DPTR
        MOV     ?V4,A
        CLR     A
        MOV     ?V5,A
        MOV     ?V6,A
        MOV     ?V7,A
        RET
          CFI EndBlock cfiCond23
          CFI EndBlock cfiCond24
          CFI EndBlock cfiCond25
          CFI EndBlock cfiPicker26
//  264 
//  265 #if !defined ( ZBIT ) && !defined ( ZBIT2 ) && !defined (UBIT)
//  266 /*********************************************************************
//  267  * @fn      _ltoa
//  268  *
//  269  * @brief
//  270  *
//  271  *   convert a long unsigned int to a string.
//  272  *
//  273  * @param  l - long to convert
//  274  * @param  buf - buffer to convert to
//  275  * @param  radix - 10 dec, 16 hex
//  276  *
//  277  * @return  pointer to buffer
//  278  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  279 unsigned char * _ltoa(unsigned long l, unsigned char *buf, unsigned char radix)
_ltoa:
          CFI Block cfiBlock27 Using cfiCommon0
          CFI Function _ltoa
        CODE
//  280 {
        FUNCALL _ltoa, _itoa
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 53, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 53, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL _ltoa, _itoa
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 53, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 53, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL _ltoa, _itoa
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 53, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 53, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL _ltoa, strcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 53, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 53, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL _ltoa, strcat
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 53, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 53, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL _ltoa, strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 53, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 53, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL _ltoa, strcat
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 53, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 53, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL _ltoa, strcat
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 53, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 53, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL _ltoa, strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 53, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 53, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL _ltoa, strcat
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 53, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 53, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL _ltoa, _itoa
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 53, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 53, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL _ltoa, _itoa
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 53, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 53, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL _ltoa, strcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 53, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 53, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL _ltoa, strcat
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 53, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 53, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL _ltoa, strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 53, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 53, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL _ltoa, strcat
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 53, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 53, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL _ltoa, strcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 53, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 53, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 37
        MOV     A,#-0x25
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 53)
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R5
        MOVX    @DPTR,A
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R1
        MOVX    @DPTR,A
//  281 #if defined( __GNUC__ )
//  282   return ( (char*)ltoa( l, buf, radix ) );
//  283 #else
//  284   unsigned char tmp1[10] = "", tmp2[10] = "", tmp3[10] = "";
        MOV     DPTR,#`?<Constant "">`
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP102_8
        MOV     A,#0xa
        LCALL   ?MOVE_LONG8_XDATA_XDATA
        MOV     DPTR,#`?<Constant "">_1`
        MOV     A,#0xa
        LCALL   ?MOVE_LONG8_XDATA_XDATA
        MOV     DPTR,#`?<Constant "">_2`
        MOV     A,#0xa
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  285   unsigned short num1, num2, num3;
//  286   unsigned char i;
//  287 
//  288   buf[0] = '\0';
        MOV     A,#0x35
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_13:
        CLR     A
        MOVX    @DPTR,A
//  289 
//  290   if ( radix == 10 )
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        XRL     A,#0xa
        JZ      $+5
        LJMP    ??_ltoa_0 & 0xFFFF
//  291   {
//  292     num1 = l % 10000;
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V4
        LCALL   ?L_MOV_X
        MOV     DPTR,#__Constant_2710
        MOV     R0,#?V0
        LCALL   ?L_MOV_X
        MOV     R0,#?V4
        MOV     R1,#?V0
        LCALL   ?UL_DIV_MOD
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,?V0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V1
        MOVX    @DPTR,A
//  293     num2 = (l / 10000) % 10000;
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V4
        LCALL   ?L_MOV_X
        MOV     DPTR,#__Constant_2710
        MOV     R0,#?V0
        LCALL   ?L_MOV_X
        MOV     R0,#?V4
        MOV     R1,#?V0
        LCALL   ?UL_DIV_MOD
        MOV     DPTR,#__Constant_2710
        MOV     R0,#?V0
        LCALL   ?L_MOV_X
        MOV     R0,#?V4
        MOV     R1,#?V0
        LCALL   ?UL_DIV_MOD
        MOV     R6,?V0
        MOV     R7,?V1
//  294     num3 = (unsigned short)(l / 100000000);
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V4
        LCALL   ?L_MOV_X
        MOV     DPTR,#__Constant_5f5e100
        MOV     R0,#?V0
        LCALL   ?L_MOV_X
        MOV     R0,#?V4
        MOV     R1,#?V0
        LCALL   ?UL_DIV_MOD
        MOV     ?V6,?V4
        MOV     ?V7,?V5
//  295 
//  296     if (num3) _itoa(num3, tmp3, 10);
        MOV     A,?V6
        ORL     A,?V7
        JZ      ??_ltoa_1
        ; Setup parameters for call to function _itoa
        MOV     R1,#0xa
        MOV     A,#0x1b
        LCALL   ?XSTACK_DISP102_8
        MOV     R2,?V6
        MOV     R3,?V7
        LCALL   `??_itoa::?relay`    ; Banked call to: _itoa
//  297     if (num2) _itoa(num2, tmp2, 10);
??_ltoa_1:
        MOV     A,R6
        ORL     A,R7
        JZ      ??_ltoa_2
        ; Setup parameters for call to function _itoa
        MOV     R1,#0xa
        MOV     A,#0x11
        LCALL   ?XSTACK_DISP102_8
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??_itoa::?relay`    ; Banked call to: _itoa
//  298     if (num1) _itoa(num1, tmp1, 10);
??_ltoa_2:
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_69:
        JZ      ??_ltoa_3
        ; Setup parameters for call to function _itoa
        MOV     R1,#0xa
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP102_8
        LCALL   ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_83:
        LCALL   `??_itoa::?relay`    ; Banked call to: _itoa
//  299 
//  300     if (num3)
??_ltoa_3:
        MOV     A,?V6
        ORL     A,?V7
        JZ      ??_ltoa_4
//  301     {
//  302       strcpy((char*)buf, (char const*)tmp3);
        ; Setup parameters for call to function strcpy
        MOV     A,#0x1b
        LCALL   ?XSTACK_DISP102_8
        MOV     A,#0x35
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine39_0 & 0xFFFF
??CrossCallReturnLabel_72:
        LCALL   `??strcpy::?relay`   ; Banked call to: strcpy
//  303       for (i = 0; i < 4 - strlen((char const*)tmp2); i++)
        MOV     ?V2,#0x0
        SJMP    ??_ltoa_5
//  304         strcat((char*)buf, "0");
??_ltoa_6:
        ; Setup parameters for call to function strcat
        MOV     R4,#`?<Constant "0">` & 0xff
        MOV     R5,#(`?<Constant "0">` >> 8) & 0xff
        MOV     A,#0x35
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine39_0 & 0xFFFF
??CrossCallReturnLabel_73:
        LCALL   `??strcat::?relay`   ; Banked call to: strcat
        INC     ?V2
??_ltoa_5:
        MOV     ?V0,?V2
        ; Setup parameters for call to function strlen
        MOV     A,#0x11
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??strlen::?relay`   ; Banked call to: strlen
        LCALL   ?Subroutine22 & 0xFFFF
//  305     }
??CrossCallReturnLabel_27:
        JC      ??_ltoa_6
//  306     strcat((char*)buf, (char const*)tmp2);
??_ltoa_4:
        ; Setup parameters for call to function strcat
        MOV     A,#0x11
        LCALL   ?XSTACK_DISP102_8
        MOV     A,#0x35
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine39_0 & 0xFFFF
??CrossCallReturnLabel_74:
        LCALL   `??strcat::?relay`   ; Banked call to: strcat
//  307     if (num3 || num2)
        MOV     A,?V6
        ORL     A,?V7
        JNZ     ??_ltoa_7
        MOV     A,R6
        ORL     A,R7
        JZ      ??_ltoa_8
//  308     {
//  309       for (i = 0; i < 4 - strlen((char const*)tmp1); i++)
??_ltoa_7:
        MOV     ?V2,#0x0
        SJMP    ??_ltoa_9
//  310         strcat((char*)buf, "0");
??_ltoa_10:
        ; Setup parameters for call to function strcat
        MOV     R4,#`?<Constant "0">` & 0xff
        MOV     R5,#(`?<Constant "0">` >> 8) & 0xff
        MOV     A,#0x35
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine39_0 & 0xFFFF
??CrossCallReturnLabel_75:
        LCALL   `??strcat::?relay`   ; Banked call to: strcat
        INC     ?V2
??_ltoa_9:
        MOV     ?V0,?V2
        ; Setup parameters for call to function strlen
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??strlen::?relay`   ; Banked call to: strlen
        LCALL   ?Subroutine22 & 0xFFFF
//  311     }
??CrossCallReturnLabel_28:
        JC      ??_ltoa_10
//  312     strcat((char*)buf, (char const*)tmp1);
??_ltoa_8:
        ; Setup parameters for call to function strcat
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP102_8
        MOV     A,#0x35
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine39_0 & 0xFFFF
??CrossCallReturnLabel_76:
        LCALL   `??strcat::?relay`   ; Banked call to: strcat
//  313     if (!num3 && !num2 && !num1)
        MOV     A,?V6
        ORL     A,?V7
        JNZ     ??_ltoa_11
        MOV     A,R6
        ORL     A,R7
        JNZ     $+5
        LJMP    ??_ltoa_12 & 0xFFFF
//  314       strcpy((char*)buf, "0");
//  315   }
//  316   else if ( radix == 16 )
//  317   {
//  318     num1 = l & 0x0000FFFF;
//  319     num2 = l >> 16;
//  320 
//  321     if (num2) _itoa(num2, tmp2, 16);
//  322     if (num1) _itoa(num1, tmp1, 16);
//  323 
//  324     if (num2)
//  325     {
//  326       strcpy((char*)buf,(char const*)tmp2);
//  327       for (i = 0; i < 4 - strlen((char const*)tmp1); i++)
//  328         strcat((char*)buf, "0");
//  329     }
//  330     strcat((char*)buf, (char const*)tmp1);
//  331     if (!num2 && !num1)
//  332       strcpy((char*)buf, "0");
//  333   }
//  334   else
//  335     return NULL;
//  336 
//  337   return buf;
??_ltoa_11:
        MOV     A,#0x35
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine39_0 & 0xFFFF
??CrossCallReturnLabel_77:
        MOV     A,#0x25
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
        LJMP    ?Subroutine2 & 0xFFFF
          CFI CFA_XSP16 add(XSP16, 53)
??_ltoa_0:
        MOVX    A,@DPTR
        XRL     A,#0x10
        JZ      $+5
        LJMP    ??_ltoa_13 & 0xFFFF
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0
        LCALL   ?L_MOV_X
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,?V0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V1
        MOVX    @DPTR,A
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0
        LCALL   ?L_MOV_X
        MOV     A,#0x10
        MOV     R0,#?V0
        LCALL   ?UL_SHR
        MOV     R6,?V0
        MOV     R7,?V1
        MOV     A,R6
        ORL     A,R7
        JZ      ??_ltoa_14
        ; Setup parameters for call to function _itoa
        MOV     R1,#0x10
        MOV     A,#0x11
        LCALL   ?XSTACK_DISP102_8
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??_itoa::?relay`    ; Banked call to: _itoa
??_ltoa_14:
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_70:
        JZ      ??_ltoa_15
        ; Setup parameters for call to function _itoa
        MOV     R1,#0x10
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP102_8
        LCALL   ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_84:
        LCALL   `??_itoa::?relay`    ; Banked call to: _itoa
??_ltoa_15:
        MOV     A,R6
        ORL     A,R7
        JZ      ??_ltoa_16
        ; Setup parameters for call to function strcpy
        MOV     A,#0x11
        LCALL   ?XSTACK_DISP102_8
        MOV     A,#0x35
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine39_0 & 0xFFFF
??CrossCallReturnLabel_78:
        LCALL   `??strcpy::?relay`   ; Banked call to: strcpy
        MOV     ?V2,#0x0
        SJMP    ??_ltoa_17
??_ltoa_18:
        ; Setup parameters for call to function strcat
        MOV     R4,#`?<Constant "0">` & 0xff
        MOV     R5,#(`?<Constant "0">` >> 8) & 0xff
        MOV     A,#0x35
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine39_0 & 0xFFFF
??CrossCallReturnLabel_79:
        LCALL   `??strcat::?relay`   ; Banked call to: strcat
        INC     ?V2
??_ltoa_17:
        MOV     ?V0,?V2
        ; Setup parameters for call to function strlen
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??strlen::?relay`   ; Banked call to: strlen
        LCALL   ?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_29:
        JC      ??_ltoa_18
??_ltoa_16:
        ; Setup parameters for call to function strcat
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP102_8
        MOV     A,#0x35
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine39_0 & 0xFFFF
??CrossCallReturnLabel_80:
        LCALL   `??strcat::?relay`   ; Banked call to: strcat
        MOV     A,R6
        ORL     A,R7
        JZ      $+5
        LJMP    ??_ltoa_11 & 0xFFFF
??_ltoa_12:
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_71:
        JZ      $+5
        LJMP    ??_ltoa_11 & 0xFFFF
        ; Setup parameters for call to function strcpy
        MOV     R4,#`?<Constant "0">` & 0xff
        MOV     R5,#(`?<Constant "0">` >> 8) & 0xff
        MOV     A,#0x35
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine39_0 & 0xFFFF
??CrossCallReturnLabel_81:
        LCALL   `??strcpy::?relay`   ; Banked call to: strcpy
        LJMP    ??_ltoa_11 & 0xFFFF
??_ltoa_13:
        MOV     R2,#0x0
        MOV     R3,#0x0
        LJMP    ??CrossCallReturnLabel_77 & 0xFFFF
//  338 #endif
//  339 }
          CFI EndBlock cfiBlock27

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine22:
          CFI Block cfiCond28 Using cfiCommon0
          CFI Function _ltoa
          CFI Conditional ??CrossCallReturnLabel_27
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 53)
          CFI Block cfiCond29 Using cfiCommon0
          CFI (cfiCond29) Function _ltoa
          CFI (cfiCond29) Conditional ??CrossCallReturnLabel_28
          CFI (cfiCond29) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond29) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond29) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond29) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond29) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond29) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond29) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond29) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond29) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond29) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond29) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond29) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond29) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond29) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond29) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond29) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond29) CFA_SP SP+-2
          CFI (cfiCond29) CFA_XSP16 add(XSP16, 53)
          CFI Block cfiCond30 Using cfiCommon0
          CFI (cfiCond30) Function _ltoa
          CFI (cfiCond30) Conditional ??CrossCallReturnLabel_29
          CFI (cfiCond30) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond30) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond30) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond30) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond30) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond30) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond30) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond30) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond30) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond30) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond30) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond30) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond30) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond30) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond30) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond30) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond30) CFA_SP SP+-2
          CFI (cfiCond30) CFA_XSP16 add(XSP16, 53)
          CFI Block cfiPicker31 Using cfiCommon1
          CFI (cfiPicker31) NoFunction
          CFI (cfiPicker31) Picker
        MOV     ?V4,R2
        MOV     ?V5,R3
        MOV     A,#0x4
        CLR     C
        SUBB    A,?V4
        MOV     R0,A
        CLR     A
        SUBB    A,?V5
        MOV     R1,A
        CLR     C
        MOV     A,?V0
        SUBB    A,R0
        CLR     A
        SUBB    A,R1
        RET
          CFI EndBlock cfiCond28
          CFI EndBlock cfiCond29
          CFI EndBlock cfiCond30
          CFI EndBlock cfiPicker31
//  340 #endif // !defined(ZBIT) && !defined(ZBIT2)
//  341 
//  342 /*********************************************************************
//  343  * @fn        osal_rand
//  344  *
//  345  * @brief    Random number generator
//  346  *
//  347  * @param   none
//  348  *
//  349  * @return  uint16 - new random number
//  350  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  351 uint16 osal_rand( void )
osal_rand:
          CFI Block cfiBlock32 Using cfiCommon0
          CFI Function osal_rand
        CODE
//  352 {
        FUNCALL osal_rand, Onboard_rand
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  353   return ( Onboard_rand() );
        ; Setup parameters for call to function Onboard_rand
        LCALL   `??Onboard_rand::?relay`; Banked call to: Onboard_rand
        SJMP    ?Subroutine0
//  354 }
          CFI EndBlock cfiBlock32
//  355 
//  356 /*********************************************************************
//  357  * API FUNCTIONS
//  358  *********************************************************************/
//  359 
//  360 /*********************************************************************
//  361  * @fn      osal_msg_allocate
//  362  *
//  363  * @brief
//  364  *
//  365  *    This function is called by a task to allocate a message buffer
//  366  *    into which the task will encode the particular message it wishes
//  367  *    to send.  This common buffer scheme is used to strictly limit the
//  368  *    creation of message buffers within the system due to RAM size
//  369  *    limitations on the microprocessor.   Note that all message buffers
//  370  *    are a fixed size (at least initially).  The parameter len is kept
//  371  *    in case a message pool with varying fixed message sizes is later
//  372  *    created (for example, a pool of message buffers of size LARGE,
//  373  *    MEDIUM and SMALL could be maintained and allocated based on request
//  374  *    from the tasks).
//  375  *
//  376  *
//  377  * @param   uint8 len  - wanted buffer length
//  378  *
//  379  *
//  380  * @return  pointer to allocated buffer or NULL if allocation failed.
//  381  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  382 uint8 * osal_msg_allocate( uint16 len )
osal_msg_allocate:
          CFI Block cfiBlock33 Using cfiCommon0
          CFI Function osal_msg_allocate
        CODE
//  383 {
        FUNCALL osal_msg_allocate, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  384   osal_msg_hdr_t *hdr;
//  385 
//  386   if ( len == 0 )
        MOV     A,R6
        ORL     A,R7
        JZ      ??osal_msg_allocate_0
//  387     return ( NULL );
//  388 
//  389   hdr = (osal_msg_hdr_t *) osal_mem_alloc( (short)(len + sizeof( osal_msg_hdr_t )) );
        ; Setup parameters for call to function osal_mem_alloc
        MOV     A,R6
        ADD     A,#0x5
        MOV     R2,A
        CLR     A
        ADDC    A,R7
        MOV     R3,A
        LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     R0,?V0
        MOV     R1,?V1
//  390   if ( hdr )
        MOV     A,R0
        ORL     A,R1
        JZ      ??osal_msg_allocate_0
//  391   {
//  392     hdr->next = NULL;
        MOV     DPL,R0
        MOV     DPH,R1
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  393     hdr->len = len;
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        MOV     A,R6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R7
        MOVX    @DPTR,A
//  394     hdr->dest_id = TASK_NO_TASK;
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,#-0x1
        MOVX    @DPTR,A
//  395     return ( (uint8 *) (hdr + 1) );
        MOV     A,R0
        ADD     A,#0x5
        MOV     R2,A
        CLR     A
        ADDC    A,R1
        MOV     R3,A
        SJMP    ??osal_msg_allocate_1
//  396   }
//  397   else
//  398     return ( NULL );
??osal_msg_allocate_0:
        MOV     R2,#0x0
        MOV     R3,#0x0
??osal_msg_allocate_1:
        LJMP    ?Subroutine3 & 0xFFFF
//  399 }
          CFI EndBlock cfiBlock33
//  400 
//  401 /*********************************************************************
//  402  * @fn      osal_msg_deallocate
//  403  *
//  404  * @brief
//  405  *
//  406  *    This function is used to deallocate a message buffer. This function
//  407  *    is called by a task (or processing element) after it has finished
//  408  *    processing a received message.
//  409  *
//  410  *
//  411  * @param   uint8 *msg_ptr - pointer to new message buffer
//  412  *
//  413  * @return  SUCCESS, INVALID_MSG_POINTER
//  414  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  415 uint8 osal_msg_deallocate( uint8 *msg_ptr )
osal_msg_deallocate:
          CFI Block cfiBlock34 Using cfiCommon0
          CFI Function osal_msg_deallocate
        CODE
//  416 {
        FUNCALL osal_msg_deallocate, osal_mem_free
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  417   uint8 *x;
//  418 
//  419   if ( msg_ptr == NULL )
        MOV     A,R2
        ORL     A,R3
        JNZ     ??osal_msg_deallocate_0
//  420     return ( INVALID_MSG_POINTER );
        MOV     R1,#0x5
        SJMP    ??osal_msg_deallocate_1
//  421 
//  422   // don't deallocate queued buffer
//  423   if ( OSAL_MSG_ID( msg_ptr ) != TASK_NO_TASK )
??osal_msg_deallocate_0:
        LCALL   ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_15:
        JZ      ??osal_msg_deallocate_2
//  424     return ( MSG_BUFFER_NOT_AVAIL );
        MOV     R1,#0x4
        SJMP    ??osal_msg_deallocate_1
//  425 
//  426   x = (uint8 *)((uint8 *)msg_ptr - sizeof( osal_msg_hdr_t ));
//  427 
//  428   osal_mem_free( (void *)x );
??osal_msg_deallocate_2:
        ; Setup parameters for call to function osal_mem_free
        MOV     A,R2
        ADD     A,#-0x5
        MOV     R2,A
        MOV     A,R3
        ADDC    A,#-0x1
        MOV     R3,A
        LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
//  429 
//  430   return ( SUCCESS );
        MOV     R1,#0x0
??osal_msg_deallocate_1:
          CFI EndBlock cfiBlock34
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0
//  431 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
          CFI Block cfiBlock35 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        POP     DPH
          CFI CFA_SP SP+-4
          CFI DPH0 SameValue
        POP     DPL
          CFI CFA_SP SP+-3
          CFI DPL0 SameValue
        LJMP    ?BRET
          CFI EndBlock cfiBlock35
//  432 
//  433 /*********************************************************************
//  434  * @fn      osal_msg_send
//  435  *
//  436  * @brief
//  437  *
//  438  *    This function is called by a task to send a command message to
//  439  *    another task or processing element.  The sending_task field must
//  440  *    refer to a valid task, since the task ID will be used
//  441  *    for the response message.  This function will also set a message
//  442  *    ready event in the destination tasks event list.
//  443  *
//  444  *
//  445  * @param   uint8 destination_task - Send msg to Task ID
//  446  * @param   uint8 *msg_ptr - pointer to new message buffer
//  447  *
//  448  * @return  SUCCESS, INVALID_TASK, INVALID_MSG_POINTER
//  449  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  450 uint8 osal_msg_send( uint8 destination_task, uint8 *msg_ptr )
osal_msg_send:
          CFI Block cfiBlock36 Using cfiCommon0
          CFI Function osal_msg_send
        CODE
//  451 {
        FUNCALL osal_msg_send, osal_msg_enqueue_push
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  452   return ( osal_msg_enqueue_push( destination_task, msg_ptr, FALSE ) );
        ; Setup parameters for call to function osal_msg_enqueue_push
        MOV     R4,#0x0
          CFI EndBlock cfiBlock36
        REQUIRE ?Subroutine6
        ; // Fall through to label ?Subroutine6
//  453 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
          CFI Block cfiBlock37 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        LCALL   `??osal_msg_enqueue_push::?relay`; Banked call to: osal_msg_enqueue_push
        SJMP    ??Subroutine32_0
          CFI EndBlock cfiBlock37

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
          CFI Block cfiBlock38 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOVX    @DPTR,A
        MOV     A,R6
          CFI EndBlock cfiBlock38
        REQUIRE ??Subroutine30_0
        ; // Fall through to label ??Subroutine30_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine30_0:
          CFI Block cfiBlock39 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     C,0xE0 /* A   */.0
          CFI EndBlock cfiBlock39
        REQUIRE ??Subroutine31_0
        ; // Fall through to label ??Subroutine31_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine31_0:
          CFI Block cfiBlock40 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     0xa8.7,C
          CFI EndBlock cfiBlock40
        REQUIRE ??Subroutine32_0
        ; // Fall through to label ??Subroutine32_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine32_0:
          CFI Block cfiBlock41 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock41
//  454 
//  455 /*********************************************************************
//  456  * @fn      osal_msg_push_front
//  457  *
//  458  * @brief
//  459  *
//  460  *    This function is called by a task to push a command message
//  461  *    to the head of the OSAL queue. The destination_task field
//  462  *    must refer to a valid task, since the task ID will be used to
//  463  *    send the message to. This function will also set a message
//  464  *    ready event in the destination task's event list.
//  465  *
//  466  * @param   uint8 destination_task - Send msg to Task ID
//  467  * @param   uint8 *msg_ptr - pointer to message buffer
//  468  *
//  469  * @return  SUCCESS, INVALID_TASK, INVALID_MSG_POINTER
//  470  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  471 uint8 osal_msg_push_front( uint8 destination_task, uint8 *msg_ptr )
osal_msg_push_front:
          CFI Block cfiBlock42 Using cfiCommon0
          CFI Function osal_msg_push_front
        CODE
//  472 {
        FUNCALL osal_msg_push_front, osal_msg_enqueue_push
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  473   return ( osal_msg_enqueue_push( destination_task, msg_ptr, TRUE ) );
        ; Setup parameters for call to function osal_msg_enqueue_push
        MOV     R4,#0x1
        SJMP    ?Subroutine6
//  474 }
          CFI EndBlock cfiBlock42
//  475 
//  476 /*********************************************************************
//  477  * @fn      osal_msg_enqueue_push
//  478  *
//  479  * @brief
//  480  *
//  481  *    This function is called by a task to either enqueue (append to
//  482  *    queue) or push (prepend to queue) a command message to the OSAL
//  483  *    queue. The destination_task field must refer to a valid task,
//  484  *    since the task ID will be used to send the message to. This 
//  485  *    function will also set a message ready event in the destination
//  486  *    task's event list.
//  487  *
//  488  * @param   uint8 destination_task - Send msg to Task ID
//  489  * @param   uint8 *msg_ptr - pointer to message buffer
//  490  * @param   uint8 push - TRUE to push, otherwise enqueue
//  491  *
//  492  * @return  SUCCESS, INVALID_TASK, INVALID_MSG_POINTER
//  493  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  494 static uint8 osal_msg_enqueue_push( uint8 destination_task, uint8 *msg_ptr, uint8 push )
osal_msg_enqueue_push:
          CFI Block cfiBlock43 Using cfiCommon0
          CFI Function osal_msg_enqueue_push
        CODE
//  495 {
        FUNCALL osal_msg_enqueue_push, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL osal_msg_enqueue_push, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL osal_msg_enqueue_push, osal_msg_push
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL osal_msg_enqueue_push, osal_msg_enqueue
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL osal_msg_enqueue_push, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
        MOV     A,R4
        MOV     R7,A
//  496   if ( msg_ptr == NULL )
        MOV     A,R2
        ORL     A,R3
        JZ      ??osal_msg_enqueue_push_0
//  497   {
//  498     return ( INVALID_MSG_POINTER );
//  499   }
//  500 
//  501   if ( destination_task >= tasksCnt )
        MOV     DPTR,#tasksCnt
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,R6
        CLR     C
        SUBB    A,R0
        JC      ??osal_msg_enqueue_push_1
//  502   {
//  503     osal_msg_deallocate( msg_ptr );
        ; Setup parameters for call to function osal_msg_deallocate
        LCALL   `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
//  504     return ( INVALID_TASK );
        MOV     R1,#0x3
        SJMP    ??osal_msg_enqueue_push_2
//  505   }
//  506 
//  507   // Check the message header
//  508   if ( OSAL_MSG_NEXT( msg_ptr ) != NULL ||
//  509        OSAL_MSG_ID( msg_ptr ) != TASK_NO_TASK )
??osal_msg_enqueue_push_1:
        LCALL   ?Subroutine29 & 0xFFFF
??CrossCallReturnLabel_62:
        MOV     A,R3
        LCALL   ??Subroutine36_0 & 0xFFFF
??CrossCallReturnLabel_47:
        LCALL   ??Subroutine38_0 & 0xFFFF
??CrossCallReturnLabel_65:
        JNZ     ??osal_msg_enqueue_push_3
        LCALL   ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_16:
        JZ      ??osal_msg_enqueue_push_4
//  510   {
//  511     osal_msg_deallocate( msg_ptr );
??osal_msg_enqueue_push_3:
        ; Setup parameters for call to function osal_msg_deallocate
        LCALL   `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
//  512     return ( INVALID_MSG_POINTER );
??osal_msg_enqueue_push_0:
        MOV     R1,#0x5
        SJMP    ??osal_msg_enqueue_push_2
//  513   }
//  514 
//  515   OSAL_MSG_ID( msg_ptr ) = destination_task;
??osal_msg_enqueue_push_4:
        MOV     A,R6
        MOVX    @DPTR,A
//  516 
//  517   if ( push == TRUE )
        MOV     A,#0x1
        XRL     A,R7
        JNZ     ??osal_msg_enqueue_push_5
//  518   {
//  519     // prepend the message
//  520     osal_msg_push( &osal_qHead, msg_ptr );
        ; Setup parameters for call to function osal_msg_push
        MOV     A,R2
        MOV     R4,A
        MOV     A,R3
        MOV     R5,A
        MOV     R2,#osal_qHead & 0xff
        MOV     R3,#(osal_qHead >> 8) & 0xff
        LCALL   `??osal_msg_push::?relay`; Banked call to: osal_msg_push
        SJMP    ??osal_msg_enqueue_push_6
//  521   }
//  522   else
//  523   {
//  524     // append the message
//  525     osal_msg_enqueue( &osal_qHead, msg_ptr );
??osal_msg_enqueue_push_5:
        ; Setup parameters for call to function osal_msg_enqueue
        MOV     A,R2
        MOV     R4,A
        MOV     A,R3
        MOV     R5,A
        MOV     R2,#osal_qHead & 0xff
        MOV     R3,#(osal_qHead >> 8) & 0xff
        LCALL   `??osal_msg_enqueue::?relay`; Banked call to: osal_msg_enqueue
//  526   }
//  527 
//  528   // Signal the task that a message is waiting
//  529   osal_set_event( destination_task, SYS_EVENT_MSG );
??osal_msg_enqueue_push_6:
        ; Setup parameters for call to function osal_set_event
        MOV     R2,#0x0
        MOV     R3,#-0x80
        MOV     A,R6
        MOV     R1,A
        LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
//  530 
//  531   return ( SUCCESS );
        MOV     R1,#0x0
??osal_msg_enqueue_push_2:
        SJMP    ??Subroutine32_0
//  532 }
          CFI EndBlock cfiBlock43

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine16:
          CFI Block cfiCond44 Using cfiCommon0
          CFI Function osal_msg_deallocate
          CFI Conditional ??CrossCallReturnLabel_15
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI Block cfiCond45 Using cfiCommon0
          CFI (cfiCond45) Function osal_msg_enqueue_push
          CFI (cfiCond45) Conditional ??CrossCallReturnLabel_16
          CFI (cfiCond45) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond45) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond45) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond45) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond45) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond45) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond45) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond45) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond45) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond45) CFA_SP SP+-2
          CFI (cfiCond45) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker46 Using cfiCommon1
          CFI (cfiPicker46) NoFunction
          CFI (cfiPicker46) Picker
        LCALL   ?Subroutine26 & 0xFFFF
??CrossCallReturnLabel_36:
        MOVX    A,@DPTR
        CPL     A
        RET
          CFI EndBlock cfiCond44
          CFI EndBlock cfiCond45
          CFI EndBlock cfiPicker46
//  533 
//  534 /*********************************************************************
//  535  * @fn      osal_msg_receive
//  536  *
//  537  * @brief
//  538  *
//  539  *    This function is called by a task to retrieve a received command
//  540  *    message. The calling task must deallocate the message buffer after
//  541  *    processing the message using the osal_msg_deallocate() call.
//  542  *
//  543  * @param   uint8 task_id - receiving tasks ID
//  544  *
//  545  * @return  *uint8 - message information or NULL if no message
//  546  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  547 uint8 *osal_msg_receive( uint8 task_id )
osal_msg_receive:
          CFI Block cfiBlock47 Using cfiCommon0
          CFI Function osal_msg_receive
        CODE
//  548 {
        FUNCALL osal_msg_receive, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL osal_msg_receive, osal_clear_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL osal_msg_receive, osal_msg_extract
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     ?V0,R1
//  549   osal_msg_hdr_t *listHdr;
//  550   osal_msg_hdr_t *prevHdr = NULL;
        MOV     ?V2,#0x0
        MOV     ?V3,#0x0
//  551   osal_msg_hdr_t *foundHdr = NULL;
        MOV     R6,#0x0
        MOV     R7,#0x0
//  552   halIntState_t   intState;
//  553 
//  554   // Hold off interrupts
//  555   HAL_ENTER_CRITICAL_SECTION(intState);
        MOV     C,0xa8.7
        CLR     A
        RLC     A
        MOV     ?V1,A
        CLR     0xa8.7
//  556 
//  557   // Point to the top of the queue
//  558   listHdr = osal_qHead;
        MOV     DPTR,#osal_qHead
        SJMP    ??CrossCallReturnLabel_53
//  559 
//  560   // Look through the queue for a message that belongs to the asking task
//  561   while ( listHdr != NULL )
//  562   {
//  563     if ( (listHdr - 1)->dest_id == task_id )
//  564     {
//  565       if ( foundHdr == NULL )
//  566       {
//  567         // Save the first one
//  568         foundHdr = listHdr;
//  569       }
//  570       else
//  571       {
//  572         // Second msg found, stop looking
//  573         break;
//  574       }
//  575     }
//  576     if ( foundHdr == NULL )
??osal_msg_receive_0:
        MOV     A,R6
        ORL     A,R7
        JNZ     ??osal_msg_receive_1
//  577     {
//  578       prevHdr = listHdr;
        MOV     ?V2,R0
        MOV     ?V3,R1
//  579     }
//  580     listHdr = OSAL_MSG_NEXT( listHdr );
??osal_msg_receive_1:
        LCALL   ?Subroutine24 & 0xFFFF
??CrossCallReturnLabel_53:
        LCALL   ??Subroutine38_0 & 0xFFFF
??CrossCallReturnLabel_64:
        JZ      ??osal_msg_receive_2
        MOV     A,R0
        ADD     A,#-0x1
        LCALL   ??Subroutine35_0 & 0xFFFF
??CrossCallReturnLabel_52:
        MOVX    A,@DPTR
        XRL     A,?V0
        JNZ     ??osal_msg_receive_0
        MOV     A,R6
        ORL     A,R7
        JNZ     ??osal_msg_receive_3
        MOV     A,R0
        MOV     R6,A
        MOV     A,R1
        MOV     R7,A
        SJMP    ??osal_msg_receive_1
//  581   }
//  582 
//  583   // Is there more than one?
//  584   if ( listHdr != NULL )
//  585   {
//  586     // Yes, Signal the task that a message is waiting
//  587     osal_set_event( task_id, SYS_EVENT_MSG );
??osal_msg_receive_3:
        ; Setup parameters for call to function osal_set_event
        MOV     R2,#0x0
        MOV     R3,#-0x80
        MOV     R1,?V0
        LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
        SJMP    ??osal_msg_receive_4
//  588   }
//  589   else
//  590   {
//  591     // No more
//  592     osal_clear_event( task_id, SYS_EVENT_MSG );
??osal_msg_receive_2:
        ; Setup parameters for call to function osal_clear_event
        MOV     R2,#0x0
        MOV     R3,#-0x80
        MOV     R1,?V0
        LCALL   `??osal_clear_event::?relay`; Banked call to: osal_clear_event
//  593   }
//  594 
//  595   // Did we find a message?
//  596   if ( foundHdr != NULL )
        MOV     A,R6
        ORL     A,R7
        JZ      ??osal_msg_receive_5
//  597   {
//  598     // Take out of the link list
//  599     osal_msg_extract( &osal_qHead, foundHdr, prevHdr );
??osal_msg_receive_4:
        ; Setup parameters for call to function osal_msg_extract
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     R2,#osal_qHead & 0xff
        MOV     R3,#(osal_qHead >> 8) & 0xff
        LCALL   `??osal_msg_extract::?relay`; Banked call to: osal_msg_extract
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
//  600   }
//  601 
//  602   // Release interrupts
//  603   HAL_EXIT_CRITICAL_SECTION(intState);
??osal_msg_receive_5:
        MOV     A,?V1
        MOV     C,0xE0 /* A   */.0
        MOV     0xa8.7,C
//  604 
//  605   return ( (uint8*) foundHdr );
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
          CFI EndBlock cfiBlock47
        REQUIRE ?Subroutine4
        REQUIRE _A_IEN0
        ; // Fall through to label ?Subroutine4
//  606 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
          CFI Block cfiBlock48 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock48
//  607 
//  608 /**************************************************************************************************
//  609  * @fn          osal_msg_find
//  610  *
//  611  * @brief       This function finds in place an OSAL message matching the task_id and event
//  612  *              parameters.
//  613  *
//  614  * input parameters
//  615  *
//  616  * @param       task_id - The OSAL task id that the enqueued OSAL message must match.
//  617  * @param       event - The OSAL event id that the enqueued OSAL message must match.
//  618  *
//  619  * output parameters
//  620  *
//  621  * None.
//  622  *
//  623  * @return      NULL if no match, otherwise an in place pointer to the matching OSAL message.
//  624  **************************************************************************************************
//  625  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  626 osal_event_hdr_t *osal_msg_find(uint8 task_id, uint8 event)
osal_msg_find:
          CFI Block cfiBlock49 Using cfiCommon0
          CFI Function osal_msg_find
        CODE
//  627 {
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
        MOV     A,R2
        MOV     R4,A
//  628   osal_msg_hdr_t *pHdr;
//  629   halIntState_t intState;
//  630 
//  631   HAL_ENTER_CRITICAL_SECTION(intState);  // Hold off interrupts.
        MOV     C,0xa8.7
        CLR     A
        RLC     A
        MOV     R0,A
        CLR     0xa8.7
//  632 
//  633   pHdr = osal_qHead;  // Point to the top of the queue.
        MOV     DPTR,#osal_qHead
        SJMP    ??CrossCallReturnLabel_48
//  634 
//  635   // Look through the queue for a message that matches the task_id and event parameters.
//  636   while (pHdr != NULL)
//  637   {
//  638     if (((pHdr-1)->dest_id == task_id) && (((osal_event_hdr_t *)pHdr)->event == event))
//  639     {
//  640       break;
//  641     }
//  642 
//  643     pHdr = OSAL_MSG_NEXT(pHdr);
??osal_msg_find_0:
        LCALL   ?Subroutine29 & 0xFFFF
??CrossCallReturnLabel_63:
        MOV     A,R3
        LCALL   ??Subroutine36_0 & 0xFFFF
??CrossCallReturnLabel_48:
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_10:
        ORL     A,R3
        JZ      ??osal_msg_find_1
        LCALL   ?Subroutine19 & 0xFFFF
//  644   }
??CrossCallReturnLabel_21:
        MOVX    A,@DPTR
        XRL     A,R1
        JNZ     ??osal_msg_find_0
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        XRL     A,R4
        JNZ     ??osal_msg_find_0
//  645 
//  646   HAL_EXIT_CRITICAL_SECTION(intState);  // Release interrupts.
??osal_msg_find_1:
        MOV     A,R0
        MOV     C,0xE0 /* A   */.0
        MOV     0xa8.7,C
//  647 
//  648   return (osal_event_hdr_t *)pHdr;
        LJMP    ?Subroutine0 & 0xFFFF
          CFI EndBlock cfiBlock49
        REQUIRE _A_IEN0
//  649 }
//  650 
//  651 /**************************************************************************************************
//  652  * @fn          osal_msg_count
//  653  *
//  654  * @brief       This function counts the number of messages, in the OSAL message queue with a
//  655  *              a given task ID and message event type.
//  656  *
//  657  * input parameters
//  658  *
//  659  * @param       task_id - The OSAL task id that the enqueued OSAL message must match.
//  660  * @param       event - The OSAL event id that the enqueued OSAL message must match. 0xFF for 
//  661  *              all events.
//  662  *
//  663  * output parameters
//  664  *
//  665  * None.
//  666  *
//  667  * @return      The number of OSAL messages that match the task ID and Event.
//  668  **************************************************************************************************
//  669  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  670 uint8 osal_msg_count( uint8 task_id, uint8 event )
osal_msg_count:
          CFI Block cfiBlock50 Using cfiCommon0
          CFI Function osal_msg_count
        CODE
//  671 {
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R3,A
//  672   uint8 count = 0;
        MOV     R1,#0x0
//  673   osal_msg_hdr_t *pHdr;
//  674   halIntState_t intState;
//  675 
//  676   HAL_ENTER_CRITICAL_SECTION(intState);  // Hold off interrupts.
        MOV     C,0xa8.7
        CLR     A
        RLC     A
        MOV     R0,A
        CLR     0xa8.7
//  677 
//  678   pHdr = osal_qHead;  // Point to the top of the queue.
        MOV     DPTR,#osal_qHead
        SJMP    ??CrossCallReturnLabel_49
//  679 
//  680   // Look through the queue for a message that matches the task_id and event parameters.
//  681   while (pHdr != NULL)
//  682   {
//  683     if ( ((pHdr-1)->dest_id == task_id) 
//  684         && ((event == 0xFF) || (((osal_event_hdr_t *)pHdr)->event == event)) )
??osal_msg_count_0:
        LCALL   ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_23:
        MOVX    A,@DPTR
        XRL     A,R3
        JNZ     ??osal_msg_count_1
        MOV     A,#-0x1
        XRL     A,R2
        JZ      ??osal_msg_count_2
        MOV     DPL,R4
        MOV     DPH,R5
        MOVX    A,@DPTR
        XRL     A,R2
        JNZ     ??osal_msg_count_1
//  685     {
//  686       count++;
??osal_msg_count_2:
        INC     R1
//  687     }
//  688 
//  689     pHdr = OSAL_MSG_NEXT(pHdr);
??osal_msg_count_1:
        LCALL   ?Subroutine25 & 0xFFFF
//  690   }
??CrossCallReturnLabel_32:
        LCALL   ??Subroutine36_0 & 0xFFFF
??CrossCallReturnLabel_49:
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_7:
        ORL     A,R5
        JNZ     ??osal_msg_count_0
//  691 
//  692   HAL_EXIT_CRITICAL_SECTION(intState);  // Release interrupts.
        MOV     A,R0
        LJMP    ??Subroutine30_0 & 0xFFFF
          CFI EndBlock cfiBlock50
        REQUIRE _A_IEN0
//  693 
//  694   return ( count );
//  695 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine12:
          CFI Block cfiCond51 Using cfiCommon0
          CFI Function osal_memcmp
          CFI Conditional ??CrossCallReturnLabel_8
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond52 Using cfiCommon0
          CFI (cfiCond52) Function osal_msg_count
          CFI (cfiCond52) Conditional ??CrossCallReturnLabel_7
          CFI (cfiCond52) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond52) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond52) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond52) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond52) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond52) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond52) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond52) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond52) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond52) CFA_SP SP+-2
          CFI (cfiCond52) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond53 Using cfiCommon0
          CFI (cfiCond53) Function osal_msg_dequeue
          CFI (cfiCond53) Conditional ??CrossCallReturnLabel_9
          CFI (cfiCond53) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond53) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond53) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond53) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond53) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond53) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond53) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond53) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond53) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond53) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond53) CFA_SP SP+-2
          CFI (cfiCond53) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker54 Using cfiCommon1
          CFI (cfiPicker54) NoFunction
          CFI (cfiPicker54) Picker
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     A,R4
        RET
          CFI EndBlock cfiCond51
          CFI EndBlock cfiCond52
          CFI EndBlock cfiCond53
          CFI EndBlock cfiPicker54
//  696 
//  697 /*********************************************************************
//  698  * @fn      osal_msg_enqueue
//  699  *
//  700  * @brief
//  701  *
//  702  *    This function enqueues an OSAL message into an OSAL queue.
//  703  *
//  704  * @param   osal_msg_q_t *q_ptr - OSAL queue
//  705  * @param   void *msg_ptr  - OSAL message
//  706  *
//  707  * @return  none
//  708  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  709 void osal_msg_enqueue( osal_msg_q_t *q_ptr, void *msg_ptr )
osal_msg_enqueue:
          CFI Block cfiBlock55 Using cfiCommon0
          CFI Function osal_msg_enqueue
        CODE
//  710 {
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  711   void *list;
//  712   halIntState_t intState;
//  713 
//  714   // Hold off interrupts
//  715   HAL_ENTER_CRITICAL_SECTION(intState);
        MOV     C,0xa8.7
        CLR     A
        RLC     A
        MOV     R6,A
        CLR     0xa8.7
//  716 
//  717   OSAL_MSG_NEXT( msg_ptr ) = NULL;
        LCALL   ?Subroutine23 & 0xFFFF
//  718   // If first message in queue
//  719   if ( *q_ptr == NULL )
??CrossCallReturnLabel_30:
        MOV     DPL,R2
        MOV     DPH,R3
        LCALL   ??Subroutine38_0 & 0xFFFF
??CrossCallReturnLabel_66:
        JNZ     ??CrossCallReturnLabel_45
//  720   {
//  721     *q_ptr = msg_ptr;
        MOV     DPL,R2
        MOV     DPH,R3
        SJMP    ??CrossCallReturnLabel_55
//  722   }
//  723   else
//  724   {
//  725     // Find end of queue
//  726     for ( list = *q_ptr; OSAL_MSG_NEXT( list ) != NULL; list = OSAL_MSG_NEXT( list ) );
??osal_msg_enqueue_0:
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_45:
        LCALL   ?Subroutine24 & 0xFFFF
??CrossCallReturnLabel_54:
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_12:
        ORL     A,R3
        JNZ     ??osal_msg_enqueue_0
//  727 
//  728     // Add message to end of queue
//  729     OSAL_MSG_NEXT( list ) = msg_ptr;
        LCALL   ?Subroutine24 & 0xFFFF
//  730   }
??CrossCallReturnLabel_55:
        MOV     A,R4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R5
        LJMP    ?Subroutine1 & 0xFFFF
          CFI EndBlock cfiBlock55
        REQUIRE _A_IEN0
//  731 
//  732   // Re-enable interrupts
//  733   HAL_EXIT_CRITICAL_SECTION(intState);
//  734 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine13:
          CFI Block cfiCond56 Using cfiCommon0
          CFI Function osal_msg_find
          CFI Conditional ??CrossCallReturnLabel_10
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI Block cfiCond57 Using cfiCommon0
          CFI (cfiCond57) Function osal_msg_enqueue
          CFI (cfiCond57) Conditional ??CrossCallReturnLabel_12
          CFI (cfiCond57) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond57) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond57) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond57) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond57) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond57) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond57) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond57) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond57) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond57) CFA_SP SP+-2
          CFI (cfiCond57) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond58 Using cfiCommon0
          CFI (cfiCond58) Function osal_msg_dequeue
          CFI (cfiCond58) Conditional ??CrossCallReturnLabel_11
          CFI (cfiCond58) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond58) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond58) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond58) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond58) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond58) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond58) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond58) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond58) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond58) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond58) CFA_SP SP+-2
          CFI (cfiCond58) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker59 Using cfiCommon1
          CFI (cfiPicker59) NoFunction
          CFI (cfiPicker59) Picker
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     A,R2
        RET
          CFI EndBlock cfiCond56
          CFI EndBlock cfiCond57
          CFI EndBlock cfiCond58
          CFI EndBlock cfiPicker59

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine10:
          CFI Block cfiCond60 Using cfiCommon0
          CFI Function osal_msg_enqueue
          CFI Conditional ??CrossCallReturnLabel_45
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond61 Using cfiCommon0
          CFI (cfiCond61) Function osal_msg_enqueue_max
          CFI (cfiCond61) Conditional ??CrossCallReturnLabel_46
          CFI (cfiCond61) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond61) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond61) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond61) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond61) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond61) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond61) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond61) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond61) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond61) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond61) CFA_SP SP+-2
          CFI (cfiCond61) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker62 Using cfiCommon1
          CFI (cfiPicker62) NoFunction
          CFI (cfiPicker62) Picker
        MOV     A,R0
        LCALL   ??Subroutine37_0 & 0xFFFF
??CrossCallReturnLabel_59:
        MOV     A,R1
          CFI EndBlock cfiCond60
          CFI EndBlock cfiCond61
          CFI EndBlock cfiPicker62
        REQUIRE ??Subroutine33_0
        ; // Fall through to label ??Subroutine33_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine33_0:
          CFI Block cfiCond63 Using cfiCommon0
          CFI Function osal_msg_extract
          CFI Conditional ??CrossCallReturnLabel_43
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond64 Using cfiCommon0
          CFI (cfiCond64) Function osal_msg_extract
          CFI (cfiCond64) Conditional ??CrossCallReturnLabel_44
          CFI (cfiCond64) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond64) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond64) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond64) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond64) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond64) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond64) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond64) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond64) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond64) CFA_SP SP+-2
          CFI (cfiCond64) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond65 Using cfiCommon0
          CFI (cfiCond65) Function osal_msg_enqueue
          CFI (cfiCond65) Conditional ??CrossCallReturnLabel_45
          CFI (cfiCond65) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond65) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond65) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond65) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond65) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond65) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond65) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond65) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond65) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond65) CFA_SP SP+-2
          CFI (cfiCond65) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond66 Using cfiCommon0
          CFI (cfiCond66) Function osal_msg_enqueue_max
          CFI (cfiCond66) Conditional ??CrossCallReturnLabel_46
          CFI (cfiCond66) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond66) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond66) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond66) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond66) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond66) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond66) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond66) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond66) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond66) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond66) CFA_SP SP+-2
          CFI (cfiCond66) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker67 Using cfiCommon1
          CFI (cfiPicker67) NoFunction
          CFI (cfiPicker67) Picker
        ADDC    A,#-0x1
        MOV     DPH,A
          CFI EndBlock cfiCond63
          CFI EndBlock cfiCond64
          CFI EndBlock cfiCond65
          CFI EndBlock cfiCond66
          CFI EndBlock cfiPicker67
        REQUIRE ??Subroutine34_0
        ; // Fall through to label ??Subroutine34_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine34_0:
          CFI Block cfiCond68 Using cfiCommon0
          CFI Function osal_msg_extract
          CFI Conditional ??CrossCallReturnLabel_42
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond69 Using cfiCommon0
          CFI (cfiCond69) Function osal_msg_extract
          CFI (cfiCond69) Conditional ??CrossCallReturnLabel_43
          CFI (cfiCond69) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond69) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond69) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond69) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond69) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond69) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond69) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond69) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond69) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond69) CFA_SP SP+-2
          CFI (cfiCond69) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond70 Using cfiCommon0
          CFI (cfiCond70) Function osal_msg_extract
          CFI (cfiCond70) Conditional ??CrossCallReturnLabel_44
          CFI (cfiCond70) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond70) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond70) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond70) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond70) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond70) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond70) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond70) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond70) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond70) CFA_SP SP+-2
          CFI (cfiCond70) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond71 Using cfiCommon0
          CFI (cfiCond71) Function osal_msg_enqueue
          CFI (cfiCond71) Conditional ??CrossCallReturnLabel_45
          CFI (cfiCond71) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond71) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond71) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond71) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond71) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond71) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond71) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond71) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond71) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond71) CFA_SP SP+-2
          CFI (cfiCond71) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond72 Using cfiCommon0
          CFI (cfiCond72) Function osal_msg_enqueue_max
          CFI (cfiCond72) Conditional ??CrossCallReturnLabel_46
          CFI (cfiCond72) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond72) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond72) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond72) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond72) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond72) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond72) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond72) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond72) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond72) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond72) CFA_SP SP+-2
          CFI (cfiCond72) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker73 Using cfiCommon1
          CFI (cfiPicker73) NoFunction
          CFI (cfiPicker73) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        RET
          CFI EndBlock cfiCond68
          CFI EndBlock cfiCond69
          CFI EndBlock cfiCond70
          CFI EndBlock cfiCond71
          CFI EndBlock cfiCond72
          CFI EndBlock cfiPicker73
//  735 
//  736 /*********************************************************************
//  737  * @fn      osal_msg_dequeue
//  738  *
//  739  * @brief
//  740  *
//  741  *    This function dequeues an OSAL message from an OSAL queue.
//  742  *
//  743  * @param   osal_msg_q_t *q_ptr - OSAL queue
//  744  *
//  745  * @return  void * - pointer to OSAL message or NULL of queue is empty.
//  746  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  747 void *osal_msg_dequeue( osal_msg_q_t *q_ptr )
osal_msg_dequeue:
          CFI Block cfiBlock74 Using cfiCommon0
          CFI Function osal_msg_dequeue
        CODE
//  748 {
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R2
        MOV     R0,A
        MOV     A,R3
        MOV     R1,A
//  749   void *msg_ptr = NULL;
        MOV     R2,#0x0
        MOV     R3,#0x0
//  750   halIntState_t intState;
//  751 
//  752   // Hold off interrupts
//  753   HAL_ENTER_CRITICAL_SECTION(intState);
        MOV     C,0xa8.7
        CLR     A
        RLC     A
        MOV     R6,A
        CLR     0xa8.7
//  754 
//  755   if ( *q_ptr != NULL )
        MOV     DPL,R0
        MOV     DPH,R1
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_9:
        ORL     A,R5
        JZ      ??osal_msg_dequeue_0
//  756   {
//  757     // Dequeue message
//  758     msg_ptr = *q_ptr;
        MOV     DPL,R0
        MOV     DPH,R1
        LCALL   ?Subroutine13 & 0xFFFF
//  759     *q_ptr = OSAL_MSG_NEXT( msg_ptr );
??CrossCallReturnLabel_11:
        ADD     A,#-0x5
        MOV     R4,A
        MOV     A,R3
        ADDC    A,#-0x1
        MOV     R5,A
        MOV     DPL,R4
        MOV     DPH,R5
        MOVX    A,@DPTR
        MOV     ?V0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V1,A
        MOV     DPL,R0
        MOV     DPH,R1
        MOV     A,?V0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V1
        MOVX    @DPTR,A
//  760     OSAL_MSG_NEXT( msg_ptr ) = NULL;
        MOV     DPL,R4
        MOV     DPH,R5
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  761     OSAL_MSG_ID( msg_ptr ) = TASK_NO_TASK;
        LCALL   ?Subroutine19 & 0xFFFF
//  762   }
??CrossCallReturnLabel_22:
        MOV     A,#-0x1
        MOVX    @DPTR,A
//  763 
//  764   // Re-enable interrupts
//  765   HAL_EXIT_CRITICAL_SECTION(intState);
??osal_msg_dequeue_0:
        MOV     A,R6
        MOV     C,0xE0 /* A   */.0
        MOV     0xa8.7,C
//  766 
//  767   return msg_ptr;
          CFI EndBlock cfiBlock74
        REQUIRE ?Subroutine3
        REQUIRE _A_IEN0
        ; // Fall through to label ?Subroutine3
//  768 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
          CFI Block cfiBlock75 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock75

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine19:
          CFI Block cfiCond76 Using cfiCommon0
          CFI Function osal_msg_find
          CFI Conditional ??CrossCallReturnLabel_21
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI Block cfiCond77 Using cfiCommon0
          CFI (cfiCond77) Function osal_msg_dequeue
          CFI (cfiCond77) Conditional ??CrossCallReturnLabel_22
          CFI (cfiCond77) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond77) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond77) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond77) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond77) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond77) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond77) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond77) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond77) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond77) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond77) CFA_SP SP+-2
          CFI (cfiCond77) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker78 Using cfiCommon1
          CFI (cfiPicker78) NoFunction
          CFI (cfiPicker78) Picker
        LCALL   ?Subroutine26 & 0xFFFF
??CrossCallReturnLabel_37:
        RET
          CFI EndBlock cfiCond76
          CFI EndBlock cfiCond77
          CFI EndBlock cfiPicker78

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine26:
          CFI Block cfiCond79 Using cfiCommon0
          CFI Function osal_msg_deallocate
          CFI Conditional ??CrossCallReturnLabel_36, ??CrossCallReturnLabel_15
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-9
          CFI Block cfiCond80 Using cfiCommon0
          CFI (cfiCond80) Function osal_msg_enqueue_push
          CFI (cfiCond80) Conditional ??CrossCallReturnLabel_36, ??CrossCallReturnLabel_16
          CFI (cfiCond80) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond80) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond80) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond80) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond80) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond80) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond80) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond80) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond80) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond80) CFA_SP SP+-4
          CFI (cfiCond80) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond81 Using cfiCommon0
          CFI (cfiCond81) Function osal_msg_find
          CFI (cfiCond81) Conditional ??CrossCallReturnLabel_37, ??CrossCallReturnLabel_21
          CFI (cfiCond81) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond81) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond81) CFA_SP SP+-9
          CFI Block cfiCond82 Using cfiCommon0
          CFI (cfiCond82) Function osal_msg_dequeue
          CFI (cfiCond82) Conditional ??CrossCallReturnLabel_37, ??CrossCallReturnLabel_22
          CFI (cfiCond82) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond82) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond82) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond82) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond82) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond82) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond82) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond82) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond82) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond82) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond82) CFA_SP SP+-4
          CFI (cfiCond82) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker83 Using cfiCommon1
          CFI (cfiPicker83) NoFunction
          CFI (cfiPicker83) Picker
        MOV     A,R2
        ADD     A,#-0x1
        MOV     DPL,A
        MOV     A,R3
        ADDC    A,#-0x1
        MOV     DPH,A
        RET
          CFI EndBlock cfiCond79
          CFI EndBlock cfiCond80
          CFI EndBlock cfiCond81
          CFI EndBlock cfiCond82
          CFI EndBlock cfiPicker83
//  769 
//  770 /*********************************************************************
//  771  * @fn      osal_msg_push
//  772  *
//  773  * @brief
//  774  *
//  775  *    This function pushes an OSAL message to the head of an OSAL
//  776  *    queue.
//  777  *
//  778  * @param   osal_msg_q_t *q_ptr - OSAL queue
//  779  * @param   void *msg_ptr  - OSAL message
//  780  *
//  781  * @return  none
//  782  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  783 void osal_msg_push( osal_msg_q_t *q_ptr, void *msg_ptr )
osal_msg_push:
          CFI Block cfiBlock84 Using cfiCommon0
          CFI Function osal_msg_push
        CODE
//  784 {
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  785   halIntState_t intState;
//  786 
//  787   // Hold off interrupts
//  788   HAL_ENTER_CRITICAL_SECTION(intState);
        MOV     R0,0xa8+0x0
        CLR     0xa8.7
//  789 
//  790   // Push message to head of queue
//  791   OSAL_MSG_NEXT( msg_ptr ) = *q_ptr;
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
        LCALL   ?Subroutine25 & 0xFFFF
??CrossCallReturnLabel_33:
        LCALL   ??Subroutine36_0 & 0xFFFF
??CrossCallReturnLabel_50:
        MOV     A,R6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R7
        MOVX    @DPTR,A
//  792   *q_ptr = msg_ptr;
        MOV     DPL,R2
        MOV     DPH,R3
        MOV     A,R4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R5
        LCALL   ?Subroutine17 & 0xFFFF
//  793 
//  794   // Re-enable interrupts
//  795   HAL_EXIT_CRITICAL_SECTION(intState);
??CrossCallReturnLabel_17:
        LJMP    ??Subroutine31_0 & 0xFFFF
          CFI EndBlock cfiBlock84
        REQUIRE _A_IEN0
//  796 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine25:
          CFI Block cfiCond85 Using cfiCommon0
          CFI Function osal_msg_count
          CFI Conditional ??CrossCallReturnLabel_32
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond86 Using cfiCommon0
          CFI (cfiCond86) Function osal_msg_push
          CFI (cfiCond86) Conditional ??CrossCallReturnLabel_33
          CFI (cfiCond86) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond86) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond86) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond86) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond86) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond86) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond86) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond86) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond86) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond86) CFA_SP SP+-2
          CFI (cfiCond86) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond87 Using cfiCommon0
          CFI (cfiCond87) Function osal_msg_extract
          CFI (cfiCond87) Conditional ??CrossCallReturnLabel_34
          CFI (cfiCond87) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond87) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond87) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond87) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond87) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond87) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond87) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond87) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond87) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond87) CFA_SP SP+-2
          CFI (cfiCond87) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond88 Using cfiCommon0
          CFI (cfiCond88) Function osal_msg_extract
          CFI (cfiCond88) Conditional ??CrossCallReturnLabel_35
          CFI (cfiCond88) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond88) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond88) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond88) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond88) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond88) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond88) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond88) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond88) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond88) CFA_SP SP+-2
          CFI (cfiCond88) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker89 Using cfiCommon1
          CFI (cfiPicker89) NoFunction
          CFI (cfiPicker89) Picker
        MOV     A,R4
        LCALL   ??Subroutine37_0 & 0xFFFF
??CrossCallReturnLabel_61:
        MOV     A,R5
        RET
          CFI EndBlock cfiCond85
          CFI EndBlock cfiCond86
          CFI EndBlock cfiCond87
          CFI EndBlock cfiCond88
          CFI EndBlock cfiPicker89
//  797 
//  798 /*********************************************************************
//  799  * @fn      osal_msg_extract
//  800  *
//  801  * @brief
//  802  *
//  803  *    This function extracts and removes an OSAL message from the
//  804  *    middle of an OSAL queue.
//  805  *
//  806  * @param   osal_msg_q_t *q_ptr - OSAL queue
//  807  * @param   void *msg_ptr  - OSAL message to be extracted
//  808  * @param   void *prev_ptr  - OSAL message before msg_ptr in queue
//  809  *
//  810  * @return  none
//  811  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  812 void osal_msg_extract( osal_msg_q_t *q_ptr, void *msg_ptr, void *prev_ptr )
osal_msg_extract:
          CFI Block cfiBlock90 Using cfiCommon0
          CFI Function osal_msg_extract
        CODE
//  813 {
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  814   halIntState_t intState;
//  815 
//  816   // Hold off interrupts
//  817   HAL_ENTER_CRITICAL_SECTION(intState);
        MOV     C,0xa8.7
        CLR     A
        RLC     A
        MOV     R6,A
        CLR     0xa8.7
//  818 
//  819   if ( msg_ptr == *q_ptr )
        MOV     DPL,R2
        MOV     DPH,R3
        LCALL   ??Subroutine34_0 & 0xFFFF
??CrossCallReturnLabel_42:
        MOV     A,R4
        XRL     A,R0
        JNZ     ??osal_msg_extract_0
        MOV     A,R5
        XRL     A,R1
??osal_msg_extract_0:
        JNZ     ??osal_msg_extract_1
//  820   {
//  821     // remove from first
//  822     *q_ptr = OSAL_MSG_NEXT( msg_ptr );
        LCALL   ?Subroutine25 & 0xFFFF
//  823   }
??CrossCallReturnLabel_34:
        LCALL   ??Subroutine33_0 & 0xFFFF
??CrossCallReturnLabel_43:
        MOV     DPL,R2
        MOV     DPH,R3
        SJMP    ??CrossCallReturnLabel_51
//  824   else
//  825   {
//  826     // remove from middle
//  827     OSAL_MSG_NEXT( prev_ptr ) = OSAL_MSG_NEXT( msg_ptr );
??osal_msg_extract_1:
        LCALL   ?Subroutine25 & 0xFFFF
//  828   }
??CrossCallReturnLabel_35:
        LCALL   ??Subroutine33_0 & 0xFFFF
??CrossCallReturnLabel_44:
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R2
        LCALL   ??Subroutine37_0 & 0xFFFF
??CrossCallReturnLabel_58:
        MOV     A,R2
        LCALL   ??Subroutine36_0 & 0xFFFF
??CrossCallReturnLabel_51:
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  829   OSAL_MSG_NEXT( msg_ptr ) = NULL;
        LCALL   ?Subroutine23 & 0xFFFF
//  830   OSAL_MSG_ID( msg_ptr ) = TASK_NO_TASK;
??CrossCallReturnLabel_31:
        LCALL   ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_24:
        MOV     A,#-0x1
        LJMP    ?Subroutine1 & 0xFFFF
          CFI EndBlock cfiBlock90
        REQUIRE _A_IEN0
//  831 
//  832   // Re-enable interrupts
//  833   HAL_EXIT_CRITICAL_SECTION(intState);
//  834 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine24:
          CFI Block cfiCond91 Using cfiCommon0
          CFI Function osal_msg_receive
          CFI Conditional ??CrossCallReturnLabel_53
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond92 Using cfiCommon0
          CFI (cfiCond92) Function osal_msg_enqueue
          CFI (cfiCond92) Conditional ??CrossCallReturnLabel_54
          CFI (cfiCond92) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond92) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond92) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond92) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond92) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond92) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond92) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond92) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond92) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond92) CFA_SP SP+-2
          CFI (cfiCond92) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond93 Using cfiCommon0
          CFI (cfiCond93) Function osal_msg_enqueue
          CFI (cfiCond93) Conditional ??CrossCallReturnLabel_55
          CFI (cfiCond93) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond93) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond93) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond93) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond93) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond93) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond93) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond93) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond93) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond93) CFA_SP SP+-2
          CFI (cfiCond93) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond94 Using cfiCommon0
          CFI (cfiCond94) Function osal_msg_enqueue_max
          CFI (cfiCond94) Conditional ??CrossCallReturnLabel_56
          CFI (cfiCond94) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond94) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond94) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond94) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond94) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond94) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond94) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond94) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond94) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond94) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond94) CFA_SP SP+-2
          CFI (cfiCond94) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond95 Using cfiCommon0
          CFI (cfiCond95) Function osal_msg_enqueue_max
          CFI (cfiCond95) Conditional ??CrossCallReturnLabel_57
          CFI (cfiCond95) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond95) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond95) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond95) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond95) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond95) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond95) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond95) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond95) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond95) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond95) CFA_SP SP+-2
          CFI (cfiCond95) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker96 Using cfiCommon1
          CFI (cfiPicker96) NoFunction
          CFI (cfiPicker96) Picker
        MOV     A,R0
        ADD     A,#-0x5
          CFI EndBlock cfiCond91
          CFI EndBlock cfiCond92
          CFI EndBlock cfiCond93
          CFI EndBlock cfiCond94
          CFI EndBlock cfiCond95
          CFI EndBlock cfiPicker96
        REQUIRE ??Subroutine35_0
        ; // Fall through to label ??Subroutine35_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine35_0:
          CFI Block cfiCond97 Using cfiCommon0
          CFI Function osal_msg_receive
          CFI Conditional ??CrossCallReturnLabel_52
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond98 Using cfiCommon0
          CFI (cfiCond98) Function osal_msg_receive
          CFI (cfiCond98) Conditional ??CrossCallReturnLabel_53
          CFI (cfiCond98) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond98) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond98) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond98) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond98) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond98) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond98) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond98) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond98) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond98) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond98) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond98) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond98) CFA_SP SP+-2
          CFI (cfiCond98) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond99 Using cfiCommon0
          CFI (cfiCond99) Function osal_msg_enqueue
          CFI (cfiCond99) Conditional ??CrossCallReturnLabel_54
          CFI (cfiCond99) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond99) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond99) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond99) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond99) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond99) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond99) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond99) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond99) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond99) CFA_SP SP+-2
          CFI (cfiCond99) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond100 Using cfiCommon0
          CFI (cfiCond100) Function osal_msg_enqueue
          CFI (cfiCond100) Conditional ??CrossCallReturnLabel_55
          CFI (cfiCond100) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond100) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond100) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond100) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond100) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond100) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond100) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond100) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond100) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond100) CFA_SP SP+-2
          CFI (cfiCond100) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond101 Using cfiCommon0
          CFI (cfiCond101) Function osal_msg_enqueue_max
          CFI (cfiCond101) Conditional ??CrossCallReturnLabel_56
          CFI (cfiCond101) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond101) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond101) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond101) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond101) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond101) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond101) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond101) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond101) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond101) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond101) CFA_SP SP+-2
          CFI (cfiCond101) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond102 Using cfiCommon0
          CFI (cfiCond102) Function osal_msg_enqueue_max
          CFI (cfiCond102) Conditional ??CrossCallReturnLabel_57
          CFI (cfiCond102) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond102) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond102) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond102) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond102) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond102) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond102) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond102) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond102) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond102) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond102) CFA_SP SP+-2
          CFI (cfiCond102) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker103 Using cfiCommon1
          CFI (cfiPicker103) NoFunction
          CFI (cfiPicker103) Picker
        MOV     DPL,A
        MOV     A,R1
          CFI EndBlock cfiCond97
          CFI EndBlock cfiCond98
          CFI EndBlock cfiCond99
          CFI EndBlock cfiCond100
          CFI EndBlock cfiCond101
          CFI EndBlock cfiCond102
          CFI EndBlock cfiPicker103
        REQUIRE ??Subroutine36_0
        ; // Fall through to label ??Subroutine36_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine36_0:
          CFI Block cfiCond104 Using cfiCommon0
          CFI Function osal_msg_enqueue_push
          CFI Conditional ??CrossCallReturnLabel_47
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond105 Using cfiCommon0
          CFI (cfiCond105) Function osal_msg_find
          CFI (cfiCond105) Conditional ??CrossCallReturnLabel_48
          CFI (cfiCond105) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond105) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond105) CFA_SP SP+-7
          CFI Block cfiCond106 Using cfiCommon0
          CFI (cfiCond106) Function osal_msg_count
          CFI (cfiCond106) Conditional ??CrossCallReturnLabel_49
          CFI (cfiCond106) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond106) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond106) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond106) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond106) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond106) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond106) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond106) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond106) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond106) CFA_SP SP+-2
          CFI (cfiCond106) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond107 Using cfiCommon0
          CFI (cfiCond107) Function osal_msg_push
          CFI (cfiCond107) Conditional ??CrossCallReturnLabel_50
          CFI (cfiCond107) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond107) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond107) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond107) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond107) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond107) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond107) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond107) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond107) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond107) CFA_SP SP+-2
          CFI (cfiCond107) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond108 Using cfiCommon0
          CFI (cfiCond108) Function osal_msg_extract
          CFI (cfiCond108) Conditional ??CrossCallReturnLabel_51
          CFI (cfiCond108) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond108) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond108) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond108) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond108) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond108) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond108) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond108) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond108) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond108) CFA_SP SP+-2
          CFI (cfiCond108) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond109 Using cfiCommon0
          CFI (cfiCond109) Function osal_msg_receive
          CFI (cfiCond109) Conditional ??CrossCallReturnLabel_52
          CFI (cfiCond109) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond109) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond109) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond109) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond109) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond109) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond109) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond109) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond109) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond109) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond109) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond109) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond109) CFA_SP SP+-2
          CFI (cfiCond109) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond110 Using cfiCommon0
          CFI (cfiCond110) Function osal_msg_receive
          CFI (cfiCond110) Conditional ??CrossCallReturnLabel_53
          CFI (cfiCond110) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond110) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond110) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond110) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond110) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond110) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond110) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond110) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond110) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond110) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond110) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond110) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond110) CFA_SP SP+-2
          CFI (cfiCond110) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond111 Using cfiCommon0
          CFI (cfiCond111) Function osal_msg_enqueue
          CFI (cfiCond111) Conditional ??CrossCallReturnLabel_54
          CFI (cfiCond111) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond111) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond111) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond111) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond111) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond111) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond111) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond111) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond111) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond111) CFA_SP SP+-2
          CFI (cfiCond111) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond112 Using cfiCommon0
          CFI (cfiCond112) Function osal_msg_enqueue
          CFI (cfiCond112) Conditional ??CrossCallReturnLabel_55
          CFI (cfiCond112) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond112) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond112) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond112) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond112) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond112) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond112) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond112) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond112) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond112) CFA_SP SP+-2
          CFI (cfiCond112) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond113 Using cfiCommon0
          CFI (cfiCond113) Function osal_msg_enqueue_max
          CFI (cfiCond113) Conditional ??CrossCallReturnLabel_56
          CFI (cfiCond113) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond113) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond113) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond113) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond113) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond113) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond113) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond113) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond113) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond113) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond113) CFA_SP SP+-2
          CFI (cfiCond113) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond114 Using cfiCommon0
          CFI (cfiCond114) Function osal_msg_enqueue_max
          CFI (cfiCond114) Conditional ??CrossCallReturnLabel_57
          CFI (cfiCond114) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond114) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond114) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond114) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond114) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond114) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond114) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond114) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond114) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond114) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond114) CFA_SP SP+-2
          CFI (cfiCond114) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker115 Using cfiCommon1
          CFI (cfiPicker115) NoFunction
          CFI (cfiPicker115) Picker
        ADDC    A,#-0x1
        MOV     DPH,A
        RET
          CFI EndBlock cfiCond104
          CFI EndBlock cfiCond105
          CFI EndBlock cfiCond106
          CFI EndBlock cfiCond107
          CFI EndBlock cfiCond108
          CFI EndBlock cfiCond109
          CFI EndBlock cfiCond110
          CFI EndBlock cfiCond111
          CFI EndBlock cfiCond112
          CFI EndBlock cfiCond113
          CFI EndBlock cfiCond114
          CFI EndBlock cfiPicker115

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine23:
          CFI Block cfiCond116 Using cfiCommon0
          CFI Function osal_msg_enqueue
          CFI Conditional ??CrossCallReturnLabel_30
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond117 Using cfiCommon0
          CFI (cfiCond117) Function osal_msg_extract
          CFI (cfiCond117) Conditional ??CrossCallReturnLabel_31
          CFI (cfiCond117) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond117) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond117) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond117) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond117) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond117) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond117) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond117) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond117) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond117) CFA_SP SP+-2
          CFI (cfiCond117) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker118 Using cfiCommon1
          CFI (cfiPicker118) NoFunction
          CFI (cfiPicker118) Picker
        MOV     A,R4
        LCALL   ??Subroutine37_0 & 0xFFFF
??CrossCallReturnLabel_60:
        MOV     A,R5
        ADDC    A,#-0x1
        MOV     DPH,A
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        RET
          CFI EndBlock cfiCond116
          CFI EndBlock cfiCond117
          CFI EndBlock cfiPicker118

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine29:
          CFI Block cfiCond119 Using cfiCommon0
          CFI Function osal_msg_enqueue_push
          CFI Conditional ??CrossCallReturnLabel_62
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond120 Using cfiCommon0
          CFI (cfiCond120) Function osal_msg_find
          CFI (cfiCond120) Conditional ??CrossCallReturnLabel_63
          CFI (cfiCond120) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond120) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond120) CFA_SP SP+-7
          CFI Block cfiPicker121 Using cfiCommon1
          CFI (cfiPicker121) NoFunction
          CFI (cfiPicker121) Picker
        MOV     A,R2
          CFI EndBlock cfiCond119
          CFI EndBlock cfiCond120
          CFI EndBlock cfiPicker121
        REQUIRE ??Subroutine37_0
        ; // Fall through to label ??Subroutine37_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine37_0:
          CFI Block cfiCond122 Using cfiCommon0
          CFI Function osal_msg_enqueue
          CFI Conditional ??CrossCallReturnLabel_59, ??CrossCallReturnLabel_45
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond123 Using cfiCommon0
          CFI (cfiCond123) Function osal_msg_enqueue_max
          CFI (cfiCond123) Conditional ??CrossCallReturnLabel_59, ??CrossCallReturnLabel_46
          CFI (cfiCond123) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond123) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond123) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond123) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond123) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond123) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond123) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond123) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond123) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond123) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond123) CFA_SP SP+-4
          CFI (cfiCond123) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond124 Using cfiCommon0
          CFI (cfiCond124) Function osal_msg_count
          CFI (cfiCond124) Conditional ??CrossCallReturnLabel_61, ??CrossCallReturnLabel_32
          CFI (cfiCond124) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond124) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond124) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond124) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond124) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond124) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond124) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond124) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond124) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond124) CFA_SP SP+-4
          CFI (cfiCond124) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond125 Using cfiCommon0
          CFI (cfiCond125) Function osal_msg_push
          CFI (cfiCond125) Conditional ??CrossCallReturnLabel_61, ??CrossCallReturnLabel_33
          CFI (cfiCond125) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond125) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond125) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond125) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond125) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond125) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond125) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond125) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond125) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond125) CFA_SP SP+-4
          CFI (cfiCond125) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond126 Using cfiCommon0
          CFI (cfiCond126) Function osal_msg_extract
          CFI (cfiCond126) Conditional ??CrossCallReturnLabel_61, ??CrossCallReturnLabel_34
          CFI (cfiCond126) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond126) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond126) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond126) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond126) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond126) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond126) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond126) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond126) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond126) CFA_SP SP+-4
          CFI (cfiCond126) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond127 Using cfiCommon0
          CFI (cfiCond127) Function osal_msg_extract
          CFI (cfiCond127) Conditional ??CrossCallReturnLabel_61, ??CrossCallReturnLabel_35
          CFI (cfiCond127) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond127) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond127) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond127) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond127) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond127) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond127) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond127) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond127) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond127) CFA_SP SP+-4
          CFI (cfiCond127) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond128 Using cfiCommon0
          CFI (cfiCond128) Function osal_msg_extract
          CFI (cfiCond128) Conditional ??CrossCallReturnLabel_58
          CFI (cfiCond128) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond128) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond128) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond128) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond128) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond128) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond128) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond128) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond128) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond128) CFA_SP SP+-2
          CFI (cfiCond128) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond129 Using cfiCommon0
          CFI (cfiCond129) Function osal_msg_enqueue
          CFI (cfiCond129) Conditional ??CrossCallReturnLabel_60, ??CrossCallReturnLabel_30
          CFI (cfiCond129) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond129) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond129) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond129) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond129) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond129) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond129) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond129) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond129) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond129) CFA_SP SP+-4
          CFI (cfiCond129) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond130 Using cfiCommon0
          CFI (cfiCond130) Function osal_msg_extract
          CFI (cfiCond130) Conditional ??CrossCallReturnLabel_60, ??CrossCallReturnLabel_31
          CFI (cfiCond130) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond130) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond130) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond130) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond130) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond130) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond130) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond130) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond130) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond130) CFA_SP SP+-4
          CFI (cfiCond130) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond131 Using cfiCommon0
          CFI (cfiCond131) Function osal_msg_enqueue_push
          CFI (cfiCond131) Conditional ??CrossCallReturnLabel_62
          CFI (cfiCond131) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond131) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond131) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond131) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond131) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond131) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond131) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond131) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond131) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond131) CFA_SP SP+-2
          CFI (cfiCond131) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond132 Using cfiCommon0
          CFI (cfiCond132) Function osal_msg_find
          CFI (cfiCond132) Conditional ??CrossCallReturnLabel_63
          CFI (cfiCond132) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond132) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond132) CFA_SP SP+-7
          CFI Block cfiPicker133 Using cfiCommon1
          CFI (cfiPicker133) NoFunction
          CFI (cfiPicker133) Picker
        ADD     A,#-0x5
        MOV     DPL,A
        RET
          CFI EndBlock cfiCond122
          CFI EndBlock cfiCond123
          CFI EndBlock cfiCond124
          CFI EndBlock cfiCond125
          CFI EndBlock cfiCond126
          CFI EndBlock cfiCond127
          CFI EndBlock cfiCond128
          CFI EndBlock cfiCond129
          CFI EndBlock cfiCond130
          CFI EndBlock cfiCond131
          CFI EndBlock cfiCond132
          CFI EndBlock cfiPicker133

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine20:
          CFI Block cfiCond134 Using cfiCommon0
          CFI Function osal_msg_count
          CFI Conditional ??CrossCallReturnLabel_23
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond135 Using cfiCommon0
          CFI (cfiCond135) Function osal_msg_extract
          CFI (cfiCond135) Conditional ??CrossCallReturnLabel_24
          CFI (cfiCond135) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond135) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond135) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond135) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond135) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond135) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond135) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond135) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond135) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond135) CFA_SP SP+-2
          CFI (cfiCond135) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker136 Using cfiCommon1
          CFI (cfiPicker136) NoFunction
          CFI (cfiPicker136) Picker
        MOV     A,R4
        ADD     A,#-0x1
        MOV     DPL,A
        MOV     A,R5
        ADDC    A,#-0x1
        MOV     DPH,A
        RET
          CFI EndBlock cfiCond134
          CFI EndBlock cfiCond135
          CFI EndBlock cfiPicker136
//  835 
//  836 /*********************************************************************
//  837  * @fn      osal_msg_enqueue_max
//  838  *
//  839  * @brief
//  840  *
//  841  *    This function enqueues an OSAL message into an OSAL queue if
//  842  *    the length of the queue is less than max.
//  843  *
//  844  * @param   osal_msg_q_t *q_ptr - OSAL queue
//  845  * @param   void *msg_ptr  - OSAL message
//  846  * @param   uint8 max - maximum length of queue
//  847  *
//  848  * @return  TRUE if message was enqueued, FALSE otherwise
//  849  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  850 uint8 osal_msg_enqueue_max( osal_msg_q_t *q_ptr, void *msg_ptr, uint8 max )
osal_msg_enqueue_max:
          CFI Block cfiBlock137 Using cfiCommon0
          CFI Function osal_msg_enqueue_max
        CODE
//  851 {
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     A,R1
        MOV     R6,A
//  852   void *list;
//  853   uint8 ret = FALSE;
        MOV     R2,#0x0
//  854   halIntState_t intState;
//  855 
//  856   // Hold off interrupts
//  857   HAL_ENTER_CRITICAL_SECTION(intState);
        MOV     C,0xa8.7
        CLR     A
        RLC     A
        MOV     R3,A
        CLR     0xa8.7
//  858 
//  859   // If first message in queue
//  860   if ( *q_ptr == NULL )
        MOV     DPL,?V0
        MOV     DPH,?V1
        LCALL   ??Subroutine38_0 & 0xFFFF
??CrossCallReturnLabel_67:
        JNZ     ??CrossCallReturnLabel_46
//  861   {
//  862     *q_ptr = msg_ptr;
        MOV     DPL,?V0
        MOV     DPH,?V1
        SJMP    ??CrossCallReturnLabel_57
//  863     ret = TRUE;
//  864   }
//  865   else
//  866   {
//  867     // Find end of queue or max
//  868     list = *q_ptr;
//  869     max--;
//  870     while ( (OSAL_MSG_NEXT( list ) != NULL) && (max > 0) )
??osal_msg_enqueue_max_0:
        MOV     A,R6
        JZ      ??osal_msg_enqueue_max_1
//  871     {
//  872       list = OSAL_MSG_NEXT( list );
        LCALL   ?Subroutine10 & 0xFFFF
//  873       max--;
??CrossCallReturnLabel_46:
        DEC     R6
//  874     }
        LCALL   ?Subroutine24 & 0xFFFF
??CrossCallReturnLabel_56:
        MOVX    A,@DPTR
        MOV     ?V0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V1,A
        MOV     A,?V0
        ORL     A,?V1
        JNZ     ??osal_msg_enqueue_max_0
//  875 
//  876     // Add message to end of queue if max not reached
//  877     if ( max != 0 )
        MOV     A,R6
        JZ      ??osal_msg_enqueue_max_1
//  878     {
//  879       OSAL_MSG_NEXT( list ) = msg_ptr;
        LCALL   ?Subroutine24 & 0xFFFF
??CrossCallReturnLabel_57:
        MOV     A,R4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R5
        MOVX    @DPTR,A
//  880       ret = TRUE;
        MOV     R2,#0x1
//  881     }
//  882   }
//  883 
//  884   // Re-enable interrupts
//  885   HAL_EXIT_CRITICAL_SECTION(intState);
??osal_msg_enqueue_max_1:
        MOV     A,R3
        MOV     C,0xE0 /* A   */.0
        MOV     0xa8.7,C
//  886 
//  887   return ret;
        MOV     A,R2
        MOV     R1,A
        LJMP    ?Subroutine3 & 0xFFFF
          CFI EndBlock cfiBlock137
        REQUIRE _A_IEN0
//  888 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
          CFI Block cfiCond138 Using cfiCommon0
          CFI Function _ltoa
          CFI Conditional ??CrossCallReturnLabel_69
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 53)
          CFI Block cfiCond139 Using cfiCommon0
          CFI (cfiCond139) Function _ltoa
          CFI (cfiCond139) Conditional ??CrossCallReturnLabel_70
          CFI (cfiCond139) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond139) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond139) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond139) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond139) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond139) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond139) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond139) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond139) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond139) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond139) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond139) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond139) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond139) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond139) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond139) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond139) CFA_SP SP+-2
          CFI (cfiCond139) CFA_XSP16 add(XSP16, 53)
          CFI Block cfiCond140 Using cfiCommon0
          CFI (cfiCond140) Function _ltoa
          CFI (cfiCond140) Conditional ??CrossCallReturnLabel_71
          CFI (cfiCond140) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond140) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond140) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond140) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond140) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond140) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond140) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond140) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond140) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond140) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond140) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond140) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond140) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond140) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond140) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond140) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond140) CFA_SP SP+-2
          CFI (cfiCond140) CFA_XSP16 add(XSP16, 53)
          CFI Block cfiPicker141 Using cfiCommon1
          CFI (cfiPicker141) NoFunction
          CFI (cfiPicker141) Picker
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
          CFI EndBlock cfiCond138
          CFI EndBlock cfiCond139
          CFI EndBlock cfiCond140
          CFI EndBlock cfiPicker141
        REQUIRE ??Subroutine38_0
        ; // Fall through to label ??Subroutine38_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine38_0:
          CFI Block cfiCond142 Using cfiCommon0
          CFI Function osal_msg_enqueue_push
          CFI Conditional ??CrossCallReturnLabel_65
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond143 Using cfiCommon0
          CFI (cfiCond143) Function osal_msg_receive
          CFI (cfiCond143) Conditional ??CrossCallReturnLabel_64
          CFI (cfiCond143) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond143) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond143) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond143) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond143) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond143) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond143) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond143) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond143) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond143) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond143) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond143) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond143) CFA_SP SP+-2
          CFI (cfiCond143) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond144 Using cfiCommon0
          CFI (cfiCond144) Function osal_msg_enqueue
          CFI (cfiCond144) Conditional ??CrossCallReturnLabel_66
          CFI (cfiCond144) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond144) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond144) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond144) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond144) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond144) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond144) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond144) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond144) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond144) CFA_SP SP+-2
          CFI (cfiCond144) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond145 Using cfiCommon0
          CFI (cfiCond145) Function osal_msg_enqueue_max
          CFI (cfiCond145) Conditional ??CrossCallReturnLabel_67
          CFI (cfiCond145) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond145) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond145) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond145) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond145) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond145) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond145) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond145) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond145) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond145) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond145) CFA_SP SP+-2
          CFI (cfiCond145) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond146 Using cfiCommon0
          CFI (cfiCond146) Function osal_run_system
          CFI (cfiCond146) Conditional ??CrossCallReturnLabel_68
          CFI (cfiCond146) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond146) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond146) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond146) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond146) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond146) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond146) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond146) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond146) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond146) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond146) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond146) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond146) CFA_SP SP+-2
          CFI (cfiCond146) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond147 Using cfiCommon0
          CFI (cfiCond147) Function _ltoa
          CFI (cfiCond147) Conditional ??CrossCallReturnLabel_69
          CFI (cfiCond147) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond147) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond147) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond147) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond147) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond147) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond147) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond147) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond147) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond147) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond147) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond147) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond147) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond147) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond147) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond147) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond147) CFA_SP SP+-2
          CFI (cfiCond147) CFA_XSP16 add(XSP16, 53)
          CFI Block cfiCond148 Using cfiCommon0
          CFI (cfiCond148) Function _ltoa
          CFI (cfiCond148) Conditional ??CrossCallReturnLabel_70
          CFI (cfiCond148) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond148) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond148) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond148) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond148) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond148) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond148) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond148) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond148) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond148) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond148) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond148) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond148) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond148) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond148) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond148) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond148) CFA_SP SP+-2
          CFI (cfiCond148) CFA_XSP16 add(XSP16, 53)
          CFI Block cfiCond149 Using cfiCommon0
          CFI (cfiCond149) Function _ltoa
          CFI (cfiCond149) Conditional ??CrossCallReturnLabel_71
          CFI (cfiCond149) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond149) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond149) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond149) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond149) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond149) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond149) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond149) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond149) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond149) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond149) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond149) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond149) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond149) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond149) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond149) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond149) CFA_SP SP+-2
          CFI (cfiCond149) CFA_XSP16 add(XSP16, 53)
          CFI Block cfiPicker150 Using cfiCommon1
          CFI (cfiPicker150) NoFunction
          CFI (cfiPicker150) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        RET
          CFI EndBlock cfiCond142
          CFI EndBlock cfiCond143
          CFI EndBlock cfiCond144
          CFI EndBlock cfiCond145
          CFI EndBlock cfiCond146
          CFI EndBlock cfiCond147
          CFI EndBlock cfiCond148
          CFI EndBlock cfiCond149
          CFI EndBlock cfiPicker150
//  889 
//  890 /*********************************************************************
//  891  * @fn      osal_set_event
//  892  *
//  893  * @brief
//  894  *
//  895  *    This function is called to set the event flags for a task. The
//  896  *    event passed in is OR'd into the task's event variable.
//  897  *
//  898  * @param   uint8 task_id - receiving tasks ID
//  899  * @param   uint8 event_flag - what event to set
//  900  *
//  901  * @return  SUCCESS, INVALID_TASK
//  902  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  903 uint8 osal_set_event( uint8 task_id, uint16 event_flag )
osal_set_event:
          CFI Block cfiBlock151 Using cfiCommon0
          CFI Function osal_set_event
        CODE
//  904 {
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
//  905   if ( task_id < tasksCnt )
        MOV     DPTR,#tasksCnt
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,R6
        CLR     C
        SUBB    A,R0
        JNC     ??osal_set_event_0
//  906   {
//  907     halIntState_t   intState;
//  908     HAL_ENTER_CRITICAL_SECTION(intState);    // Hold off interrupts
        MOV     R4,0xa8+0x0
        CLR     0xa8.7
//  909     tasksEvents[task_id] |= event_flag;  // Stuff the event bit(s)
        MOV     A,R6
        ADD     A,R1
        MOV     R0,A
        CLR     A
        RLC     A
        MOV     R1,A
        MOV     DPTR,#tasksEvents
        MOVX    A,@DPTR
        ADD     A,R0
        MOV     R5,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R1
        MOV     DPL,R5
        MOV     DPH,A
        MOVX    A,@DPTR
        ORL     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    A,@DPTR
        ORL     A,R3
        MOVX    @DPTR,A
//  910     HAL_EXIT_CRITICAL_SECTION(intState);     // Release interrupts
        MOV     A,R4
        MOV     C,0xE0 /* A   */.7
        CLR     A
        RLC     A
        MOV     R0,A
        MOV     A,R4
        MOV     C,0xE0 /* A   */.7
        MOV     0xa8.7,C
//  911     return ( SUCCESS );
        MOV     R1,#0x0
        SJMP    ??osal_set_event_1
//  912   }
//  913    else
//  914   {
//  915     return ( INVALID_TASK );
??osal_set_event_0:
        MOV     R1,#0x3
//  916   }
??osal_set_event_1:
        LJMP    ??Subroutine32_0 & 0xFFFF
          CFI EndBlock cfiBlock151
        REQUIRE _A_IEN0
//  917 }
//  918 
//  919 /*********************************************************************
//  920  * @fn      osal_clear_event
//  921  *
//  922  * @brief
//  923  *
//  924  *    This function is called to clear the event flags for a task. The
//  925  *    event passed in is masked out of the task's event variable.
//  926  *
//  927  * @param   uint8 task_id - receiving tasks ID
//  928  * @param   uint8 event_flag - what event to clear
//  929  *
//  930  * @return  SUCCESS, INVALID_TASK
//  931  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  932 uint8 osal_clear_event( uint8 task_id, uint16 event_flag )
osal_clear_event:
          CFI Block cfiBlock152 Using cfiCommon0
          CFI Function osal_clear_event
        CODE
//  933 {
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R7,A
//  934   if ( task_id < tasksCnt )
        MOV     DPTR,#tasksCnt
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,R7
        CLR     C
        SUBB    A,R0
        JNC     ??osal_clear_event_0
//  935   {
//  936     halIntState_t   intState;
//  937     HAL_ENTER_CRITICAL_SECTION(intState);    // Hold off interrupts
        MOV     R6,0xa8+0x0
        CLR     0xa8.7
//  938     tasksEvents[task_id] &= ~(event_flag);   // Clear the event bit(s)
        MOV     A,R2
        CPL     A
        MOV     R4,A
        MOV     A,R3
        CPL     A
        MOV     R5,A
        MOV     A,R7
        ADD     A,R1
        LCALL   ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_5:
        MOVX    A,@DPTR
        ANL     A,R4
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    A,@DPTR
        ANL     A,R5
        MOVX    @DPTR,A
//  939     HAL_EXIT_CRITICAL_SECTION(intState);     // Release interrupts
        MOV     A,R6
        MOV     C,0xE0 /* A   */.7
        CLR     A
        RLC     A
        MOV     R0,A
        MOV     A,R6
        MOV     C,0xE0 /* A   */.7
        MOV     0xa8.7,C
//  940     return ( SUCCESS );
        MOV     R1,#0x0
        SJMP    ??osal_clear_event_1
//  941   }
//  942    else
//  943   {
//  944     return ( INVALID_TASK );
??osal_clear_event_0:
        MOV     R1,#0x3
//  945   }
??osal_clear_event_1:
        LJMP    ??Subroutine32_0 & 0xFFFF
          CFI EndBlock cfiBlock152
        REQUIRE _A_IEN0
//  946 }
//  947 
//  948 /*********************************************************************
//  949  * @fn      osal_isr_register
//  950  *
//  951  * @brief
//  952  *
//  953  *   This function is called to register a service routine with an
//  954  *   interrupt. When the interrupt occurs, this service routine is called.
//  955  *
//  956  * @param   uint8 interrupt_id - Interrupt number
//  957  * @param   void (*isr_ptr)( uint8* ) - function pointer to ISR
//  958  *
//  959  * @return  SUCCESS, INVALID_INTERRUPT_ID,
//  960  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  961 uint8 osal_isr_register( uint8 interrupt_id, void (*isr_ptr)( uint8* ) )
osal_isr_register:
          CFI Block cfiBlock153 Using cfiCommon0
          CFI Function osal_isr_register
        CODE
//  962 {
        ; Saved register size: 0
        ; Auto size: 0
//  963   // Remove these statements when functionality is complete
//  964   (void)interrupt_id;
//  965   (void)isr_ptr;
//  966   return ( SUCCESS );
        MOV     R1,#0x0
        LJMP    ?BRET
//  967 }
          CFI EndBlock cfiBlock153
//  968 
//  969 /*********************************************************************
//  970  * @fn      osal_int_enable
//  971  *
//  972  * @brief
//  973  *
//  974  *   This function is called to enable an interrupt. Once enabled,
//  975  *   occurrence of the interrupt causes the service routine associated
//  976  *   with that interrupt to be called.
//  977  *
//  978  *   If INTS_ALL is the interrupt_id, interrupts (in general) are enabled.
//  979  *   If a single interrupt is passed in, then interrupts still have
//  980  *   to be enabled with another call to INTS_ALL.
//  981  *
//  982  * @param   uint8 interrupt_id - Interrupt number
//  983  *
//  984  * @return  SUCCESS or INVALID_INTERRUPT_ID
//  985  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  986 uint8 osal_int_enable( uint8 interrupt_id )
osal_int_enable:
          CFI Block cfiBlock154 Using cfiCommon0
          CFI Function osal_int_enable
        CODE
//  987 {
        ; Saved register size: 0
        ; Auto size: 0
        MOV     A,R1
        MOV     R0,A
//  988 
//  989   if ( interrupt_id == INTS_ALL )
        MOV     A,#-0x1
        XRL     A,R0
        JNZ     ??osal_int_enable_0
//  990   {
//  991     HAL_ENABLE_INTERRUPTS();
        SETB    0xa8.7
//  992     return ( SUCCESS );
        MOV     R1,#0x0
        SJMP    ??osal_int_enable_1
//  993   }
//  994   else
//  995   {
//  996     return ( INVALID_INTERRUPT_ID );
??osal_int_enable_0:
        MOV     R1,#0x7
??osal_int_enable_1:
        LJMP    ?BRET
          CFI EndBlock cfiBlock154
        REQUIRE _A_IEN0
//  997   }
//  998 }
//  999 
// 1000 /*********************************************************************
// 1001  * @fn      osal_int_disable
// 1002  *
// 1003  * @brief
// 1004  *
// 1005  *   This function is called to disable an interrupt. When a disabled
// 1006  *   interrupt occurs, the service routine associated with that
// 1007  *   interrupt is not called.
// 1008  *
// 1009  *   If INTS_ALL is the interrupt_id, interrupts (in general) are disabled.
// 1010  *   If a single interrupt is passed in, then just that interrupt is disabled.
// 1011  *
// 1012  * @param   uint8 interrupt_id - Interrupt number
// 1013  *
// 1014  * @return  SUCCESS or INVALID_INTERRUPT_ID
// 1015  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1016 uint8 osal_int_disable( uint8 interrupt_id )
osal_int_disable:
          CFI Block cfiBlock155 Using cfiCommon0
          CFI Function osal_int_disable
        CODE
// 1017 {
        ; Saved register size: 0
        ; Auto size: 0
        MOV     A,R1
        MOV     R0,A
// 1018 
// 1019   if ( interrupt_id == INTS_ALL )
        MOV     A,#-0x1
        XRL     A,R0
        JNZ     ??osal_int_disable_0
// 1020   {
// 1021     HAL_DISABLE_INTERRUPTS();
        CLR     0xa8.7
// 1022     return ( SUCCESS );
        MOV     R1,#0x0
        SJMP    ??osal_int_disable_1
// 1023   }
// 1024   else
// 1025   {
// 1026     return ( INVALID_INTERRUPT_ID );
??osal_int_disable_0:
        MOV     R1,#0x7
??osal_int_disable_1:
        LJMP    ?BRET
          CFI EndBlock cfiBlock155
        REQUIRE _A_IEN0
// 1027   }
// 1028 }
// 1029 
// 1030 /*********************************************************************
// 1031  * @fn      osal_init_system
// 1032  *
// 1033  * @brief
// 1034  *
// 1035  *   This function initializes the "task" system by creating the
// 1036  *   tasks defined in the task table (OSAL_Tasks.h).
// 1037  *
// 1038  * @param   void
// 1039  *
// 1040  * @return  SUCCESS
// 1041  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1042 uint8 osal_init_system( void )
osal_init_system:
          CFI Block cfiBlock156 Using cfiCommon0
          CFI Function osal_init_system
        CODE
// 1043 {
        FUNCALL osal_init_system, osal_mem_init
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL osal_init_system, osalTimerInit
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL osal_init_system, osal_pwrmgr_init
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL osal_init_system, osalInitTasks
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL osal_init_system, osal_mem_kick
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1044   // Initialize the Memory Allocation System
// 1045   osal_mem_init();
        ; Setup parameters for call to function osal_mem_init
        LCALL   `??osal_mem_init::?relay`; Banked call to: osal_mem_init
// 1046 
// 1047   // Initialize the message queue
// 1048   osal_qHead = NULL;
        MOV     DPTR,#osal_qHead
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
// 1049 
// 1050   // Initialize the timers
// 1051   osalTimerInit();
        ; Setup parameters for call to function osalTimerInit
        LCALL   `??osalTimerInit::?relay`; Banked call to: osalTimerInit
// 1052 
// 1053   // Initialize the Power Management System
// 1054   osal_pwrmgr_init();
        ; Setup parameters for call to function osal_pwrmgr_init
        LCALL   `??osal_pwrmgr_init::?relay`; Banked call to: osal_pwrmgr_init
// 1055 
// 1056   // Initialize the system tasks.
// 1057   osalInitTasks();
        ; Setup parameters for call to function osalInitTasks
        LCALL   `??osalInitTasks::?relay`; Banked call to: osalInitTasks
// 1058 
// 1059   // Setup efficient search for the first free block of heap.
// 1060   osal_mem_kick();
        ; Setup parameters for call to function osal_mem_kick
        LCALL   `??osal_mem_kick::?relay`; Banked call to: osal_mem_kick
// 1061 
// 1062   return ( SUCCESS );
        MOV     R1,#0x0
        LJMP    ?Subroutine0 & 0xFFFF
// 1063 }
          CFI EndBlock cfiBlock156
// 1064 
// 1065 /*********************************************************************
// 1066  * @fn      osal_start_system
// 1067  *
// 1068  * @brief
// 1069  *
// 1070  *   This function is the main loop function of the task system (if
// 1071  *   ZBIT and UBIT are not defined). This Function doesn't return.
// 1072  *
// 1073  * @param   void
// 1074  *
// 1075  * @return  none
// 1076  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1077 void osal_start_system( void )
osal_start_system:
          CFI Block cfiBlock157 Using cfiCommon0
          CFI Function osal_start_system
        CODE
// 1078 {
        FUNCALL osal_start_system, osal_run_system
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1079 #if !defined ( ZBIT ) && !defined ( UBIT )
// 1080   for(;;)  // Forever Loop
// 1081 #endif
// 1082   {
// 1083     osal_run_system();
??osal_start_system_0:
        ; Setup parameters for call to function osal_run_system
        LCALL   `??osal_run_system::?relay`; Banked call to: osal_run_system
        SJMP    ??osal_start_system_0
// 1084   }
// 1085 }
          CFI EndBlock cfiBlock157
// 1086 
// 1087 /*********************************************************************
// 1088  * @fn      osal_run_system
// 1089  *
// 1090  * @brief
// 1091  *
// 1092  *   This function will make one pass through the OSAL taskEvents table
// 1093  *   and call the task_event_processor() function for the first task that
// 1094  *   is found with at least one event pending. If there are no pending
// 1095  *   events (all tasks), this function puts the processor into Sleep.
// 1096  *
// 1097  * @param   void
// 1098  *
// 1099  * @return  none
// 1100  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1101 void osal_run_system( void )
osal_run_system:
          CFI Block cfiBlock158 Using cfiCommon0
          CFI Function osal_run_system
        CODE
// 1102 {
        FUNCALL osal_run_system, osalTimeUpdate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL osal_run_system, Hal_ProcessPoll
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
// 1103   uint8 idx = 0;
        MOV     ?V0,#0x0
// 1104 
// 1105 #ifndef HAL_BOARD_CC2538
// 1106   osalTimeUpdate();
        ; Setup parameters for call to function osalTimeUpdate
        LCALL   `??osalTimeUpdate::?relay`; Banked call to: osalTimeUpdate
// 1107 #endif
// 1108   
// 1109   Hal_ProcessPoll();
        ; Setup parameters for call to function Hal_ProcessPoll
        LCALL   `??Hal_ProcessPoll::?relay`; Banked call to: Hal_ProcessPoll
// 1110 
// 1111   do {
// 1112     if (tasksEvents[idx])  // Task is highest priority that is ready.
??osal_run_system_0:
        MOV     R0,?V0
        MOV     A,R0
        ADD     A,R0
        LCALL   ?Subroutine11 & 0xFFFF
// 1113     {
// 1114       break;
// 1115     }
// 1116   } while (++idx < tasksCnt);
??CrossCallReturnLabel_6:
        LCALL   ??Subroutine38_0 & 0xFFFF
??CrossCallReturnLabel_68:
        JNZ     ??osal_run_system_1
        INC     ?V0
        MOV     DPTR,#tasksCnt
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,?V0
        CLR     C
        SUBB    A,R0
        JC      ??osal_run_system_0
// 1117 
// 1118   if (idx < tasksCnt)
??osal_run_system_1:
        MOV     DPTR,#tasksCnt
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,?V0
        CLR     C
        SUBB    A,R0
        JNC     ??osal_run_system_2
// 1119   {
// 1120     uint16 events;
// 1121     halIntState_t intState;
// 1122 
// 1123     HAL_ENTER_CRITICAL_SECTION(intState);
        MOV     R4,0xa8+0x0
        CLR     0xa8.7
// 1124     events = tasksEvents[idx];
        MOV     R6,?V0
        MOV     A,R6
        ADD     A,R6
        MOV     R6,A
        CLR     A
        RLC     A
        MOV     R7,A
        MOV     DPTR,#tasksEvents
        MOVX    A,@DPTR
        ADD     A,R6
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R7
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
        LCALL   ??Subroutine39_0 & 0xFFFF
// 1125     tasksEvents[idx] = 0;  // Clear the Events for this task.
??CrossCallReturnLabel_82:
        MOV     DPL,R0
        MOV     DPH,R1
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
// 1126     HAL_EXIT_CRITICAL_SECTION(intState);
        MOV     A,R4
        MOV     C,0xE0 /* A   */.7
        CLR     A
        RLC     A
        MOV     ?V1,A
        MOV     A,R4
        MOV     C,0xE0 /* A   */.7
        MOV     0xa8.7,C
// 1127 
// 1128     activeTaskID = idx;
        MOV     A,?V0
        MOV     DPTR,#activeTaskID
        MOVX    @DPTR,A
// 1129     events = (tasksArr[idx])( idx, events );
        ; Setup parameters for indirect call
        MOV     R1,A
        MOV     A,#tasksArr & 0xff
        ADD     A,R6
        MOV     DPL,A
        MOV     A,#(tasksArr >> 8) & 0xff
        ADDC    A,R7
        MOV     DPH,A
        LCALL   ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_14:
        LCALL   ?CALL_IND
// 1130     activeTaskID = TASK_NO_TASK;
        MOV     DPTR,#activeTaskID
        MOV     A,#-0x1
        MOVX    @DPTR,A
// 1131 
// 1132     HAL_ENTER_CRITICAL_SECTION(intState);
        MOV     R0,0xa8+0x0
        CLR     0xa8.7
// 1133     tasksEvents[idx] |= events;  // Add back unprocessed events to the current task.
        MOV     DPTR,#tasksEvents
        MOVX    A,@DPTR
        ADD     A,R6
        MOV     R1,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R7
        MOV     DPL,R1
        MOV     DPH,A
        MOVX    A,@DPTR
        ORL     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    A,@DPTR
        ORL     A,R3
        LCALL   ?Subroutine17 & 0xFFFF
// 1134     HAL_EXIT_CRITICAL_SECTION(intState);
??CrossCallReturnLabel_18:
        MOV     0xa8.7,C
// 1135   }
// 1136 #if defined( POWER_SAVING )
// 1137   else  // Complete pass through all task events with no activity?
// 1138   {
// 1139     osal_pwrmgr_powerconserve();  // Put the processor/system into sleep
// 1140   }
// 1141 #endif
// 1142 
// 1143   /* Yield in case cooperative scheduling is being used. */
// 1144 #if defined (configUSE_PREEMPTION) && (configUSE_PREEMPTION == 0)
// 1145   {
// 1146     osal_task_yield();
// 1147   }
// 1148 #endif
// 1149 }
??osal_run_system_2:
        LJMP    ?Subroutine4 & 0xFFFF
          CFI EndBlock cfiBlock158
        REQUIRE _A_IEN0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine17:
          CFI Block cfiCond159 Using cfiCommon0
          CFI Function osal_msg_push
          CFI Conditional ??CrossCallReturnLabel_17
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond160 Using cfiCommon0
          CFI (cfiCond160) Function osal_run_system
          CFI (cfiCond160) Conditional ??CrossCallReturnLabel_18
          CFI (cfiCond160) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond160) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond160) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond160) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond160) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond160) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond160) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond160) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond160) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond160) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond160) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond160) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond160) CFA_SP SP+-2
          CFI (cfiCond160) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker161 Using cfiCommon1
          CFI (cfiPicker161) NoFunction
          CFI (cfiPicker161) Picker
        MOVX    @DPTR,A
        MOV     A,R0
        MOV     C,0xE0 /* A   */.7
        CLR     A
        RLC     A
        MOV     R1,A
        MOV     A,R0
        MOV     C,0xE0 /* A   */.7
        RET
          CFI EndBlock cfiCond159
          CFI EndBlock cfiCond160
          CFI EndBlock cfiPicker161

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine15:
          CFI Block cfiCond162 Using cfiCommon0
          CFI Function _ltoa
          CFI Conditional ??CrossCallReturnLabel_13
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 53)
          CFI Block cfiCond163 Using cfiCommon0
          CFI (cfiCond163) Function osal_run_system
          CFI (cfiCond163) Conditional ??CrossCallReturnLabel_14
          CFI (cfiCond163) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond163) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond163) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond163) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond163) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond163) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond163) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond163) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond163) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond163) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond163) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond163) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond163) CFA_SP SP+-2
          CFI (cfiCond163) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker164 Using cfiCommon1
          CFI (cfiPicker164) NoFunction
          CFI (cfiPicker164) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        RET
          CFI EndBlock cfiCond162
          CFI EndBlock cfiCond163
          CFI EndBlock cfiPicker164

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine14:
          CFI Block cfiCond165 Using cfiCommon0
          CFI Function _ltoa
          CFI Conditional ??CrossCallReturnLabel_83
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 53)
          CFI Block cfiCond166 Using cfiCommon0
          CFI (cfiCond166) Function _ltoa
          CFI (cfiCond166) Conditional ??CrossCallReturnLabel_84
          CFI (cfiCond166) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond166) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond166) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond166) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond166) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond166) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond166) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond166) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond166) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond166) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond166) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond166) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond166) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond166) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond166) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond166) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond166) CFA_SP SP+-2
          CFI (cfiCond166) CFA_XSP16 add(XSP16, 53)
          CFI Block cfiPicker167 Using cfiCommon1
          CFI (cfiPicker167) NoFunction
          CFI (cfiPicker167) Picker
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
          CFI EndBlock cfiCond165
          CFI EndBlock cfiCond166
          CFI EndBlock cfiPicker167
        REQUIRE ??Subroutine39_0
        ; // Fall through to label ??Subroutine39_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine39_0:
          CFI Block cfiCond168 Using cfiCommon0
          CFI Function _ltoa
          CFI Conditional ??CrossCallReturnLabel_72
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 53)
          CFI Block cfiCond169 Using cfiCommon0
          CFI (cfiCond169) Function _ltoa
          CFI (cfiCond169) Conditional ??CrossCallReturnLabel_73
          CFI (cfiCond169) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond169) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond169) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond169) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond169) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond169) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond169) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond169) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond169) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond169) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond169) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond169) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond169) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond169) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond169) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond169) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond169) CFA_SP SP+-2
          CFI (cfiCond169) CFA_XSP16 add(XSP16, 53)
          CFI Block cfiCond170 Using cfiCommon0
          CFI (cfiCond170) Function _ltoa
          CFI (cfiCond170) Conditional ??CrossCallReturnLabel_74
          CFI (cfiCond170) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond170) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond170) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond170) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond170) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond170) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond170) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond170) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond170) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond170) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond170) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond170) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond170) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond170) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond170) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond170) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond170) CFA_SP SP+-2
          CFI (cfiCond170) CFA_XSP16 add(XSP16, 53)
          CFI Block cfiCond171 Using cfiCommon0
          CFI (cfiCond171) Function _ltoa
          CFI (cfiCond171) Conditional ??CrossCallReturnLabel_75
          CFI (cfiCond171) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond171) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond171) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond171) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond171) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond171) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond171) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond171) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond171) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond171) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond171) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond171) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond171) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond171) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond171) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond171) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond171) CFA_SP SP+-2
          CFI (cfiCond171) CFA_XSP16 add(XSP16, 53)
          CFI Block cfiCond172 Using cfiCommon0
          CFI (cfiCond172) Function _ltoa
          CFI (cfiCond172) Conditional ??CrossCallReturnLabel_76
          CFI (cfiCond172) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond172) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond172) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond172) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond172) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond172) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond172) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond172) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond172) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond172) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond172) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond172) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond172) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond172) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond172) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond172) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond172) CFA_SP SP+-2
          CFI (cfiCond172) CFA_XSP16 add(XSP16, 53)
          CFI Block cfiCond173 Using cfiCommon0
          CFI (cfiCond173) Function _ltoa
          CFI (cfiCond173) Conditional ??CrossCallReturnLabel_77
          CFI (cfiCond173) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond173) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond173) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond173) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond173) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond173) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond173) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond173) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond173) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond173) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond173) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond173) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond173) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond173) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond173) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond173) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond173) CFA_SP SP+-2
          CFI (cfiCond173) CFA_XSP16 add(XSP16, 53)
          CFI Block cfiCond174 Using cfiCommon0
          CFI (cfiCond174) Function _ltoa
          CFI (cfiCond174) Conditional ??CrossCallReturnLabel_78
          CFI (cfiCond174) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond174) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond174) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond174) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond174) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond174) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond174) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond174) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond174) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond174) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond174) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond174) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond174) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond174) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond174) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond174) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond174) CFA_SP SP+-2
          CFI (cfiCond174) CFA_XSP16 add(XSP16, 53)
          CFI Block cfiCond175 Using cfiCommon0
          CFI (cfiCond175) Function _ltoa
          CFI (cfiCond175) Conditional ??CrossCallReturnLabel_79
          CFI (cfiCond175) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond175) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond175) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond175) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond175) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond175) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond175) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond175) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond175) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond175) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond175) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond175) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond175) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond175) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond175) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond175) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond175) CFA_SP SP+-2
          CFI (cfiCond175) CFA_XSP16 add(XSP16, 53)
          CFI Block cfiCond176 Using cfiCommon0
          CFI (cfiCond176) Function _ltoa
          CFI (cfiCond176) Conditional ??CrossCallReturnLabel_80
          CFI (cfiCond176) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond176) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond176) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond176) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond176) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond176) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond176) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond176) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond176) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond176) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond176) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond176) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond176) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond176) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond176) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond176) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond176) CFA_SP SP+-2
          CFI (cfiCond176) CFA_XSP16 add(XSP16, 53)
          CFI Block cfiCond177 Using cfiCommon0
          CFI (cfiCond177) Function _ltoa
          CFI (cfiCond177) Conditional ??CrossCallReturnLabel_81
          CFI (cfiCond177) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond177) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond177) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond177) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond177) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond177) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond177) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond177) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond177) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond177) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond177) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond177) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond177) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond177) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond177) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond177) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond177) CFA_SP SP+-2
          CFI (cfiCond177) CFA_XSP16 add(XSP16, 53)
          CFI Block cfiCond178 Using cfiCommon0
          CFI (cfiCond178) Function osal_run_system
          CFI (cfiCond178) Conditional ??CrossCallReturnLabel_82
          CFI (cfiCond178) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond178) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond178) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond178) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond178) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond178) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond178) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond178) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond178) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond178) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond178) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond178) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond178) CFA_SP SP+-2
          CFI (cfiCond178) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond179 Using cfiCommon0
          CFI (cfiCond179) Function _ltoa
          CFI (cfiCond179) Conditional ??CrossCallReturnLabel_83
          CFI (cfiCond179) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond179) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond179) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond179) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond179) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond179) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond179) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond179) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond179) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond179) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond179) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond179) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond179) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond179) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond179) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond179) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond179) CFA_SP SP+-2
          CFI (cfiCond179) CFA_XSP16 add(XSP16, 53)
          CFI Block cfiCond180 Using cfiCommon0
          CFI (cfiCond180) Function _ltoa
          CFI (cfiCond180) Conditional ??CrossCallReturnLabel_84
          CFI (cfiCond180) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond180) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond180) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond180) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond180) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond180) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond180) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond180) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond180) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond180) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond180) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond180) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond180) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond180) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond180) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond180) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond180) CFA_SP SP+-2
          CFI (cfiCond180) CFA_XSP16 add(XSP16, 53)
          CFI Block cfiPicker181 Using cfiCommon1
          CFI (cfiPicker181) NoFunction
          CFI (cfiPicker181) Picker
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        RET
          CFI EndBlock cfiCond168
          CFI EndBlock cfiCond169
          CFI EndBlock cfiCond170
          CFI EndBlock cfiCond171
          CFI EndBlock cfiCond172
          CFI EndBlock cfiCond173
          CFI EndBlock cfiCond174
          CFI EndBlock cfiCond175
          CFI EndBlock cfiCond176
          CFI EndBlock cfiCond177
          CFI EndBlock cfiCond178
          CFI EndBlock cfiCond179
          CFI EndBlock cfiCond180
          CFI EndBlock cfiPicker181

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine11:
          CFI Block cfiCond182 Using cfiCommon0
          CFI Function osal_clear_event
          CFI Conditional ??CrossCallReturnLabel_5
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond183 Using cfiCommon0
          CFI (cfiCond183) Function osal_run_system
          CFI (cfiCond183) Conditional ??CrossCallReturnLabel_6
          CFI (cfiCond183) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond183) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond183) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond183) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond183) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond183) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond183) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond183) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond183) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond183) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond183) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond183) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond183) CFA_SP SP+-2
          CFI (cfiCond183) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker184 Using cfiCommon1
          CFI (cfiPicker184) NoFunction
          CFI (cfiPicker184) Picker
        MOV     R0,A
        CLR     A
        RLC     A
        MOV     R1,A
        MOV     DPTR,#tasksEvents
        MOVX    A,@DPTR
        ADD     A,R0
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R1
        MOV     DPL,R2
        MOV     DPH,A
        RET
          CFI EndBlock cfiCond182
          CFI EndBlock cfiCond183
          CFI EndBlock cfiPicker184
// 1150 
// 1151 /*********************************************************************
// 1152  * @fn      osal_buffer_uint32
// 1153  *
// 1154  * @brief
// 1155  *
// 1156  *   Buffer an uint32 value - LSB first.
// 1157  *
// 1158  * @param   buf - buffer
// 1159  * @param   val - uint32 value
// 1160  *
// 1161  * @return  pointer to end of destination buffer
// 1162  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1163 uint8* osal_buffer_uint32( uint8 *buf, uint32 val )
osal_buffer_uint32:
          CFI Block cfiBlock185 Using cfiCommon0
          CFI Function osal_buffer_uint32
        CODE
// 1164 {
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
        MOV     A,#0x10
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V4
        LCALL   ?L_MOV_X
// 1165   *buf++ = BREAK_UINT32( val, 0 );
        LCALL   ?Subroutine21 & 0xFFFF
// 1166   *buf++ = BREAK_UINT32( val, 1 );
// 1167   *buf++ = BREAK_UINT32( val, 2 );
??CrossCallReturnLabel_25:
        MOV     ?V0,?V4
        MOV     ?V2,?V6
        MOV     ?V3,?V7
        MOV     A,#0x10
        MOV     R0,#?V0
        LCALL   ?UL_SHR
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOV     A,?V0
        MOVX    @DPTR,A
// 1168   *buf++ = BREAK_UINT32( val, 3 );
        MOV     A,#0x18
        MOV     R0,#?V4
        LCALL   ?UL_SHR
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,?V4
        MOVX    @DPTR,A
// 1169 
// 1170   return buf;
        MOV     A,R2
        ADD     A,#0x4
        MOV     R2,A
        JNC     ??osal_buffer_uint32_0
        INC     R3
??osal_buffer_uint32_0:
          CFI EndBlock cfiBlock185
        REQUIRE ?Subroutine2
        ; // Fall through to label ?Subroutine2
// 1171 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
          CFI Block cfiBlock186 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x8
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock186
// 1172 
// 1173 /*********************************************************************
// 1174  * @fn      osal_buffer_uint24
// 1175  *
// 1176  * @brief
// 1177  *
// 1178  *   Buffer an uint24 value - LSB first. Note that type uint24 is
// 1179  *   typedef to uint32 in comdef.h
// 1180  *
// 1181  * @param   buf - buffer
// 1182  * @param   val - uint24 value
// 1183  *
// 1184  * @return  pointer to end of destination buffer
// 1185  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1186 uint8* osal_buffer_uint24( uint8 *buf, uint24 val )
osal_buffer_uint24:
          CFI Block cfiBlock187 Using cfiCommon0
          CFI Function osal_buffer_uint24
        CODE
// 1187 {
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
        MOV     A,#0x10
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V4
        LCALL   ?L_MOV_X
// 1188   *buf++ = BREAK_UINT32( val, 0 );
        LCALL   ?Subroutine21 & 0xFFFF
// 1189   *buf++ = BREAK_UINT32( val, 1 );
// 1190   *buf++ = BREAK_UINT32( val, 2 );
??CrossCallReturnLabel_26:
        MOV     A,#0x10
        MOV     R0,#?V4
        LCALL   ?UL_SHR
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOV     A,?V4
        MOVX    @DPTR,A
// 1191 
// 1192   return buf;
        MOV     A,R2
        ADD     A,#0x3
        MOV     R2,A
        JNC     ??osal_buffer_uint24_0
        INC     R3
??osal_buffer_uint24_0:
        SJMP    ?Subroutine2
// 1193 }
          CFI EndBlock cfiBlock187

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine21:
          CFI Block cfiCond188 Using cfiCommon0
          CFI Function osal_buffer_uint32
          CFI Conditional ??CrossCallReturnLabel_25
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond189 Using cfiCommon0
          CFI (cfiCond189) Function osal_buffer_uint24
          CFI (cfiCond189) Conditional ??CrossCallReturnLabel_26
          CFI (cfiCond189) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond189) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond189) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond189) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond189) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond189) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond189) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond189) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond189) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond189) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond189) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond189) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond189) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond189) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond189) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond189) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond189) CFA_SP SP+-2
          CFI (cfiCond189) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker190 Using cfiCommon1
          CFI (cfiPicker190) NoFunction
          CFI (cfiPicker190) Picker
        MOV     DPL,R2
        MOV     DPH,R3
        MOV     A,?V4
        MOVX    @DPTR,A
        MOV     ?V1,?V5
        MOV     A,?V1
        INC     DPTR
        MOVX    @DPTR,A
        RET
          CFI EndBlock cfiCond188
          CFI EndBlock cfiCond189
          CFI EndBlock cfiPicker190
// 1194 
// 1195 /*********************************************************************
// 1196  * @fn      osal_isbufset
// 1197  *
// 1198  * @brief
// 1199  *
// 1200  *   Is all of the array elements set to a value?
// 1201  *
// 1202  * @param   buf - buffer to check
// 1203  * @param   val - value to check each array element for
// 1204  * @param   len - length to check
// 1205  *
// 1206  * @return  TRUE if all "val"
// 1207  *          FALSE otherwise
// 1208  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1209 uint8 osal_isbufset( uint8 *buf, uint8 val, uint8 len )
osal_isbufset:
          CFI Block cfiBlock191 Using cfiCommon0
          CFI Function osal_isbufset
        CODE
// 1210 {
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
// 1211   uint8 x;
// 1212 
// 1213   if ( buf == NULL )
        MOV     A,R2
        ORL     A,R3
        JZ      ??osal_isbufset_0
// 1214   {
// 1215     return ( FALSE );
// 1216   }
// 1217 
// 1218   for ( x = 0; x < len; x++ )
        MOV     R5,#0x0
        SJMP    ??osal_isbufset_1
??osal_isbufset_2:
        INC     R5
??osal_isbufset_1:
        MOV     A,R5
        CLR     C
        SUBB    A,R4
        JNC     ??osal_isbufset_3
// 1219   {
// 1220     // Check for non-initialized value
// 1221     if ( buf[x] != val )
        MOV     A,R5
        MOV     R0,A
        MOV     A,R2
        ADD     A,R0
        MOV     DPL,A
        CLR     A
        ADDC    A,R3
        MOV     DPH,A
        MOVX    A,@DPTR
        XRL     A,R6
        JZ      ??osal_isbufset_2
// 1222     {
// 1223       return ( FALSE );
??osal_isbufset_0:
        MOV     R1,#0x0
        SJMP    ??osal_isbufset_4
// 1224     }
// 1225   }
// 1226   return ( TRUE );
??osal_isbufset_3:
        MOV     R1,#0x1
??osal_isbufset_4:
        LJMP    ??Subroutine32_0 & 0xFFFF
// 1227 }
          CFI EndBlock cfiBlock191
// 1228 
// 1229 /*********************************************************************
// 1230  * @fn      osal_self
// 1231  *
// 1232  * @brief
// 1233  *
// 1234  *   This function returns the task ID of the current (active) task.
// 1235  *
// 1236  * @param   void
// 1237  *
// 1238  * @return   active task ID or TASK_NO_TASK if no task is active
// 1239  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1240 uint8 osal_self( void )
osal_self:
          CFI Block cfiBlock192 Using cfiCommon0
          CFI Function osal_self
        CODE
// 1241 {
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1242   return ( activeTaskID );
        MOV     DPTR,#activeTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LJMP    ?Subroutine0 & 0xFFFF
// 1243 }
          CFI EndBlock cfiBlock192

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for activeTaskID>`:
        DATA8
        DB 255

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??osal_strlen::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    osal_strlen

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??osal_memcpy::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    osal_memcpy

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??osal_revmemcpy::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    osal_revmemcpy

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??osal_memdup::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    osal_memdup

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??osal_memcmp::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    osal_memcmp

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??osal_memset::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    osal_memset

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??osal_build_uint16::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    osal_build_uint16

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??osal_build_uint32::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    osal_build_uint32

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??_ltoa::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    _ltoa

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??osal_rand::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    osal_rand

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??osal_msg_allocate::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    osal_msg_allocate

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??osal_msg_deallocate::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    osal_msg_deallocate

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??osal_msg_send::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    osal_msg_send

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??osal_msg_push_front::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    osal_msg_push_front

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??osal_msg_enqueue_push::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    osal_msg_enqueue_push

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??osal_msg_receive::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    osal_msg_receive

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??osal_msg_find::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    osal_msg_find

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??osal_msg_count::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    osal_msg_count

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??osal_msg_enqueue::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    osal_msg_enqueue

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??osal_msg_dequeue::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    osal_msg_dequeue

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??osal_msg_push::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    osal_msg_push

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??osal_msg_extract::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    osal_msg_extract

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??osal_msg_enqueue_max::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    osal_msg_enqueue_max

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??osal_set_event::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    osal_set_event

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??osal_clear_event::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    osal_clear_event

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??osal_isr_register::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    osal_isr_register

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??osal_int_enable::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    osal_int_enable

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??osal_int_disable::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    osal_int_disable

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??osal_init_system::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    osal_init_system

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??osal_start_system::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    osal_start_system

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??osal_run_system::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    osal_run_system

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??osal_buffer_uint32::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    osal_buffer_uint32

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??osal_buffer_uint24::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    osal_buffer_uint24

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??osal_isbufset::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    osal_isbufset

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??osal_self::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    osal_self

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "">`:
        DB ""
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "">_1`:
        DB ""
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "">_2`:
        DB ""
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA16
`?<Constant "0">`:
        DB "0"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_2710:
        DD 10000

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_5f5e100:
        DD 100000000

        END
// 1244 
// 1245 /*********************************************************************
// 1246  */
// 
// 2 803 bytes in segment BANKED_CODE
//   210 bytes in segment BANK_RELAYS
//     1 byte  in segment SFR_AN
//     1 byte  in segment XDATA_I
//     1 byte  in segment XDATA_ID
//    40 bytes in segment XDATA_ROM_C
//     2 bytes in segment XDATA_Z
// 
// 3 014 bytes of CODE  memory
//    32 bytes of CONST memory (+ 8 bytes shared)
//     0 bytes of DATA  memory (+ 1 byte  shared)
//     3 bytes of XDATA memory
//
//Errors: none
//Warnings: none
