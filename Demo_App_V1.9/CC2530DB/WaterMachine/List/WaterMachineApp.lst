###############################################################################
#
# IAR C/C++ Compiler V9.30.1.3056 for 8051                25/Oct/2016  15:32:59
# Copyright 2004-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\Module\WaterMachine\WaterMachineApp.c
#    Command line       =  
#        -f "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f
#        "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=50 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
#        -DREJOIN_POLL_RATE=440 "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack
#        Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\Module\WaterMachine\WaterMachineApp.c"
#        -D HAL_UART=TRUE -D HAL_UART_ISR=1 -D HAL_UART_DMA=0 -D LOG_OUT -D
#        UART1_PROTOCOL_RESOLVER=1 -D xISQC -D NWK_AUTO_POLL -D xZTOOL_P1 -D
#        ISR_KEYINTERRUPT -D xMT_TASK -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D
#        xLCD_SUPPORTED=DEBUG -D xPOWER_SAVING -lC
#        "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\WaterMachine\List"
#        -lA "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\WaterMachine\List"
#        --diag_suppress Pe001,Pa010 -o
#        "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\WaterMachine\Obj"
#        -e --no_code_motion --debug --core=plain --dptr=16,1
#        --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 8 -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack
#        Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\"
#        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\..\Source\"
#        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\..\Frame\"
#        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\..\Module\WaterMachine\"
#        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -Ohz
#    List file          =  
#        E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\WaterMachine\List\WaterMachineApp.lst
#    Object file        =  
#        E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\WaterMachine\Obj\WaterMachineApp.r51
#
###############################################################################

E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh 1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\Module\WaterMachine\WaterMachineApp.c
      1          #include "OSAL.h"
      2          #include "AF.h"
      3          #include "ZDApp.h"
      4          #include "ZDObject.h"
      5          #include "ZDProfile.h"
      6          
      7          #include "DemoApp.h"
      8          #include "DebugTrace.h"
      9          
     10          #if !defined( WIN32 ) || defined( ZBIT )
     11            #include "OnBoard.h"

   \                                 In  segment SFR_AN, at 0x90
   \   union <unnamed> volatile __sfr _A_P1
   \                     _A_P1:
   \   000000                DS 1
     12          #endif
     13           
     14          /* HAL */
     15          #include "hal_led.h"
     16          #include "hal_key.h"
     17          #include "hal_uart.h" 
     18          #include "Tool.h"  
     19          #include "Protocol.h"
     20          #include "ProtocolFrame.h"
     21          #include "LOG.h"
     22          #include "ModuleManager.h"
     23          #include "WaterMachineDriver.h"
     24          
     25          #define APP_SEND_MSG_TIMEOUT   1000     
     26          #define HEARTBEAT_CHECK_TIMEOUT 3000
     27          #define HEARTBEAT_SEND_TIMEOUT  1000
     28          #define WATER_MACHINE_STATE_CHECK_TIMEOUT 100
     29          #define APP_SEND_MSG_EVT                     (BV(0))
     30          #define WATER_MACHINE_STATE_CHECK_EVT             (BV(1))
     31          #define HEARTBEAT_CHECK_EVT                       (BV(2))
     32          #define HEARTBEAT_SEND_EVT                       (BV(3))
     33          
     34          /*********************************************************************
     35           * GLOBAL VARIABLES
     36           */ 

   \                                 In  segment XDATA_ROM_C, align 1
     37          const cId_t App_ClusterList[APP_MAX_CLUSTERS] = { APP_CLUSTERID };//簇列表
   \                     App_ClusterList:
   \   000000   0100         DW 1
     38          

   \                                 In  segment XDATA_ROM_C, align 1
     39          const SimpleDescriptionFormat_t App_SimpleDesc =       //简单描述符
   \                     App_SimpleDesc:
   \   000000   0A           DB 10
   \   000001   040F         DW 3844
   \   000003   0100         DW 1
   \   000005   00           DB 0
   \   000006   01           DB 1
   \   000007   ....         DW App_ClusterList
   \   000009   01           DB 1
   \   00000A   ....         DW App_ClusterList
     40          {
     41            APP_ENDPOINT,              //  int Endpoint;
     42            APP_PROFID,                //  uint16 AppProfId[2];
     43            APP_DEVICEID,              //  uint16 AppDeviceId[2];
     44            APP_DEVICE_VERSION,        //  int   AppDevVer:4;
     45            APP_FLAGS,                 //  int   AppFlags:4;
     46            APP_MAX_CLUSTERS,          //  byte  AppNumInClusters;
     47            (cId_t *)App_ClusterList,  //  byte *pAppInClusterList;
     48            APP_MAX_CLUSTERS,          //  byte  AppNumInClusters;
     49            (cId_t *)App_ClusterList   //  byte *pAppInClusterList;
     50          };
     51          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     52          endPointDesc_t App_epDesc; //端点描述符
   \                     App_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
     53          /*********************************************************************
     54           * 本地变量
     55           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     56          byte App_TaskId; 
   \                     App_TaskId:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     57          devStates_t App_NwkState; 
   \                     App_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     58          byte App_TransID; 
   \                     App_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     59          afAddrType_t App_DstAddr; 
   \                     App_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
     60           

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     61          PROTOCOL_T protocol = {0}; 
   \                     protocol:
   \   000000                DS 3
   \   000003                REQUIRE __INIT_XDATA_Z
     62          /*********************************************************************
     63           * LOCAL FUNCTIONS
     64           */
     65          static void App_ProcessZDOMsgs( zdoIncomingMsg_t *inMsg );
     66          static void App_HandleKeys( byte shift, byte keys );
     67          static void App_ReceiveHandle( afIncomingMSGPacket_t *pckt );
     68          static void App_SendHandle( void );
     69          
     70           

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     71          void SendHandle(uint8_t* data, uint8_t len){
   \                     SendHandle:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
     72            
     73            App_DstAddr.addr.shortAddr = 0x00;
   \   000007   90....       MOV     DPTR,#App_DstAddr
   \   00000A   E4           CLR     A
   \   00000B   F0           MOVX    @DPTR,A
   \   00000C   A3           INC     DPTR
   \   00000D   F0           MOVX    @DPTR,A
     74            //Protocol_Printf(data, len);
     75            if ( AF_DataRequest( &App_DstAddr, &App_epDesc,
     76                                 APP_CLUSTERID,
     77                                 len,
     78                                 (byte *)data,
     79                                 &App_TransID,
     80                                 AF_DISCV_ROUTE, AF_DEFAULT_RADIUS ) == afStatus_SUCCESS );
   \   00000E                ; Setup parameters for call to function AF_DataRequest
   \   00000E   75..1E       MOV     ?V0,#0x1e
   \   000011   78..         MOV     R0,#?V0
   \   000013   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000016   75....       MOV     ?V0,#App_TransID & 0xff
   \   000019   75....       MOV     ?V1,#(App_TransID >> 8) & 0xff
   \   00001C   78..         MOV     R0,#?V0
   \   00001E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000021   8A..         MOV     ?V0,R2
   \   000023   8B..         MOV     ?V1,R3
   \   000025   78..         MOV     R0,#?V0
   \   000027   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002A   8E..         MOV     ?V0,R6
   \   00002C   75..00       MOV     ?V1,#0x0
   \   00002F   78..         MOV     R0,#?V0
   \   000031   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000034   75..01       MOV     ?V0,#0x1
   \   000037   78..         MOV     R0,#?V0
   \   000039   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003C   7900         MOV     R1,#0x0
   \   00003E   7C..         MOV     R4,#App_epDesc & 0xff
   \   000040   7D..         MOV     R5,#(App_epDesc >> 8) & 0xff
   \   000042   7A..         MOV     R2,#App_DstAddr & 0xff
   \   000044   7B..         MOV     R3,#(App_DstAddr >> 8) & 0xff
   \   000046   12....       LCALL   `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
   \   000049   7409         MOV     A,#0x9
   \   00004B                REQUIRE ?Subroutine0
   \   00004B                ; // Fall through to label ?Subroutine0
     81          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F02         MOV     R7,#0x2
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA
     82          /****************************************************
     83          *      函数名: App_Init
     84          *        功能: 应用初始化
     85          *        参数: 应用层任务ID 
     86          ****************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     87          void App_Init( uint8 task_id ){
   \                     App_Init:
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
     88            
     89            App_TaskId = task_id;
   \   000006   90....       MOV     DPTR,#App_TaskId
   \   000009   F0           MOVX    @DPTR,A
     90            App_NwkState = DEV_INIT;
   \   00000A   90....       MOV     DPTR,#App_NwkState
   \   00000D   7401         MOV     A,#0x1
   \   00000F   F0           MOVX    @DPTR,A
     91            App_TransID = 0; 
   \   000010   90....       MOV     DPTR,#App_TransID
   \   000013   E4           CLR     A
   \   000014   F0           MOVX    @DPTR,A
     92          
     93            App_DstAddr.addrMode = (afAddrMode_t)Addr16Bit;
   \   000015   90....       MOV     DPTR,#App_DstAddr + 8
   \   000018   7402         MOV     A,#0x2
   \   00001A   F0           MOVX    @DPTR,A
     94            App_DstAddr.endPoint = APP_ENDPOINT;
   \   00001B   A3           INC     DPTR
   \   00001C   740A         MOV     A,#0xa
   \   00001E   F0           MOVX    @DPTR,A
     95            App_DstAddr.addr.shortAddr = 0;
   \   00001F   90....       MOV     DPTR,#App_DstAddr
   \   000022   E4           CLR     A
   \   000023   F0           MOVX    @DPTR,A
   \   000024   A3           INC     DPTR
   \   000025   F0           MOVX    @DPTR,A
     96           
     97            App_epDesc.endPoint = APP_ENDPOINT;
   \   000026   90....       MOV     DPTR,#App_epDesc
   \   000029   740A         MOV     A,#0xa
   \   00002B   F0           MOVX    @DPTR,A
     98            App_epDesc.task_id = &App_TaskId;
   \   00002C   A3           INC     DPTR
   \   00002D   74..         MOV     A,#App_TaskId & 0xff
   \   00002F   F0           MOVX    @DPTR,A
   \   000030   A3           INC     DPTR
   \   000031   74..         MOV     A,#(App_TaskId >> 8) & 0xff
   \   000033   F0           MOVX    @DPTR,A
     99            App_epDesc.simpleDesc = (SimpleDescriptionFormat_t *)&App_SimpleDesc;
   \   000034   A3           INC     DPTR
   \   000035   74..         MOV     A,#App_SimpleDesc & 0xff
   \   000037   F0           MOVX    @DPTR,A
   \   000038   A3           INC     DPTR
   \   000039   74..         MOV     A,#(App_SimpleDesc >> 8) & 0xff
   \   00003B   F0           MOVX    @DPTR,A
    100            App_epDesc.latencyReq = noLatencyReqs;
   \   00003C   A3           INC     DPTR
   \   00003D   E4           CLR     A
   \   00003E   F0           MOVX    @DPTR,A
    101           
    102            afRegister( &App_epDesc );
   \   00003F                ; Setup parameters for call to function afRegister
   \   00003F   7A..         MOV     R2,#App_epDesc & 0xff
   \   000041   7B..         MOV     R3,#(App_epDesc >> 8) & 0xff
   \   000043   12....       LCALL   `??afRegister::?relay`; Banked call to: afRegister
    103           
    104            RegisterForKeys( App_TaskId );
   \   000046                ; Setup parameters for call to function RegisterForKeys
   \   000046   90....       MOV     DPTR,#App_TaskId
   \   000049   E0           MOVX    A,@DPTR
   \   00004A   F9           MOV     R1,A
   \   00004B   12....       LCALL   `??RegisterForKeys::?relay`; Banked call to: RegisterForKeys
    105           
    106            Device_Info();
   \   00004E                ; Setup parameters for call to function Device_Info
   \   00004E   12....       LCALL   `??Device_Info::?relay`; Banked call to: Device_Info
    107           
    108          
    109          //  ZDO_RegisterForZDOMsg( App_TaskId, End_Device_Bind_rsp );
    110          //  ZDO_RegisterForZDOMsg( App_TaskId, Match_Desc_req );
    111          //  ZDO_RegisterForZDOMsg( App_TaskId, Match_Desc_rsp );
    112           
    113            Log_Init();
   \   000051                ; Setup parameters for call to function Log_Init
   \   000051   12....       LCALL   `??Log_Init::?relay` ; Banked call to: Log_Init
    114            ProtocolFrame_Init();
   \   000054                ; Setup parameters for call to function ProtocolFrame_Init
   \   000054   12....       LCALL   `??ProtocolFrame_Init::?relay`; Banked call to: ProtocolFrame_Init
    115            WaterMachine_Init();
   \   000057                ; Setup parameters for call to function WaterMachine_Init
   \   000057   12....       LCALL   `??WaterMachine_Init::?relay`; Banked call to: WaterMachine_Init
    116            
    117            
    118          }
   \   00005A   7F01         MOV     R7,#0x1
   \   00005C   02....       LJMP    ?BANKED_LEAVE_XDATA
    119          
    120          
    121          /****************************************************
    122          *      函数名: App_GetTaskID
    123          *      功能: 获得APP层的ID
    124          ****************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    125          uint8* App_GetTaskID(){
   \                     App_GetTaskID:
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    126              return (uint8*)&App_TaskId;
   \   000000   7A..         MOV     R2,#App_TaskId & 0xff
   \   000002   7B..         MOV     R3,#(App_TaskId >> 8) & 0xff
   \   000004   02....       LJMP    ?BRET
    127          }
    128          
    129          /****************************************************
    130          *      函数名: App_GetepDesc
    131          *      功能: 获得APP层的简单描述符
    132          ****************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    133          endPointDesc_t App_GetepDesc(){
   \                     App_GetepDesc:
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   90....       MOV     DPTR,#App_epDesc
   \   000007   EA           MOV     A,R2
   \   000008   FC           MOV     R4,A
   \   000009   EB           MOV     A,R3
   \   00000A   FD           MOV     R5,A
   \   00000B   7406         MOV     A,#0x6
   \   00000D   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
   \   000010   D083         POP     DPH
   \   000012   D082         POP     DPL
   \   000014   02....       LJMP    ?BRET
    134              return App_epDesc;
    135          }
    136          
    137          
    138          /****************************************************
    139          *      函数名: App_HandleKeys
    140          *        功能: 按键事件处理函数
    141          ****************************************************/
    142          void App_HandleKeys( uint8 shift, uint8 keys )
    143          { 
    144            if ( shift ){
    145              if ( keys & HAL_KEY_SW_1 ) {}
    146              if ( keys & HAL_KEY_SW_2 ) {}
    147              if ( keys & HAL_KEY_SW_3 ) {}
    148              if ( keys & HAL_KEY_SW_4 ) {}
    149            }else{
    150              if ( keys & HAL_KEY_SW_1 ){ 
    151                printf("HAL_KEY_SW_1\r\n"); 
    152              }
    153          
    154              if ( keys & HAL_KEY_SW_2 ){
    155                printf("HAL_KEY_SW_2\r\n"); 
    156              } 
    157              if ( keys & HAL_KEY_SW_3 ){ } 
    158              if ( keys & HAL_KEY_SW_4 ){ }
    159            }
    160          }
    161          
    162          /****************************************************
    163          *      函数名: App_ReceiveHandle
    164          *        功能: 数据接收处理函数
    165          ****************************************************/ 
    166          static void App_ReceiveHandle( afIncomingMSGPacket_t *pkt )
    167          {
    168            switch ( pkt->clusterId ){
    169              case APP_CLUSTERID:  
    170                printf("收到数据:");
    171                Protocol_Printf(pkt->cmd.Data, pkt->cmd.DataLength);
    172                if(pkt->cmd.DataLength > 1)
    173                  UART1_Resolver->Protocol_Put(UART1_Resolver,pkt->cmd.Data, pkt->cmd.DataLength);
    174                HeartBeat_Set(COORDINATOR_MODULE);
    175                break;
    176            }
    177          }
    178          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    179          void SendHearBeat(void){
   \                     SendHearBeat:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    180            static uint8_t cnt = 0;  
    181            PROTOCOL_T protocol = {0}; 
   \   00000A   90....       MOV     DPTR,#`?<Constant {{0}}>`
   \   00000D   AC..         MOV     R4,?XSP + 0
   \   00000F   AD..         MOV     R5,?XSP + 1
   \   000011   7403         MOV     A,#0x3
   \   000013   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    182            
    183            uint16 ShortAddr = NLME_GetShortAddr(); 
   \   000016                ; Setup parameters for call to function NLME_GetShortAddr
   \   000016   12....       LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
    184            protocol.Heartbeat_P.para1 = cnt++;
   \   000019   90....       MOV     DPTR,#??cnt
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   85..82       MOV     DPL,?XSP + 0
   \   000020   85..83       MOV     DPH,?XSP + 1
   \   000023   F0           MOVX    @DPTR,A
   \   000024   90....       MOV     DPTR,#??cnt
   \   000027   E0           MOVX    A,@DPTR
   \   000028   04           INC     A
   \   000029   F0           MOVX    @DPTR,A
    185            protocol.Heartbeat_P.para2 = ShortAddr >> 8;
   \   00002A   7401         MOV     A,#0x1
   \   00002C   12....       LCALL   ?XSTACK_DISP0_8
   \   00002F   EB           MOV     A,R3
   \   000030   F0           MOVX    @DPTR,A
    186            protocol.Heartbeat_P.para3 = ShortAddr & 0xff;
   \   000031   7402         MOV     A,#0x2
   \   000033   12....       LCALL   ?XSTACK_DISP0_8
   \   000036   EA           MOV     A,R2
   \   000037   F0           MOVX    @DPTR,A
    187            Protocol_Send(HEARTBEAT_PROTOCOL, &protocol, sizeof(protocol.Heartbeat_P));
   \   000038                ; Setup parameters for call to function Protocol_Send
   \   000038   7903         MOV     R1,#0x3
   \   00003A   AC..         MOV     R4,?XSP + 0
   \   00003C   AD..         MOV     R5,?XSP + 1
   \   00003E   7A31         MOV     R2,#0x31
   \   000040   7B10         MOV     R3,#0x10
   \   000042   12....       LCALL   `??Protocol_Send::?relay`; Banked call to: Protocol_Send
    188          }
   \   000045   7403         MOV     A,#0x3
   \   000047   02....       LJMP    ?Subroutine0 & 0xFFFF

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??cnt:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {{0}}>`:
   \   000000   00           DB 0
   \   000001   0000         DB 0, 0
    189          
    190          /****************************************************
    191          *      函数名: App_SendHandle
    192          *        功能: 数据发送函数
    193          ****************************************************/ 
    194          static void App_SendHandle( void )
    195          {
    196            if(App_NwkState != DEV_END_DEVICE)
    197              return; 

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    198            static uint8_t cnt = 0;  
   \                     ??cnt_1:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    199            uint16 Short_Addr = NLME_GetShortAddr();
    200            protocol.Heartbeat_P.para1 = cnt++;
    201            protocol.Heartbeat_P.para2 = Short_Addr >> 8;
    202            protocol.Heartbeat_P.para3 = Short_Addr & 0xff;
    203            Protocol_Send(HEARTBEAT_PROTOCOL, &protocol, sizeof(protocol.Heartbeat_P));
    204            printf("本机地址：%X,%X\r\n",Short_Addr >> 8, Short_Addr & 0x00ff);
    205          //  if ( AF_DataRequest( &App_DstAddr, &App_epDesc, APP_CLUSTERID,
    206          //                       10, (byte *)&shortaddr,
    207          //                       &App_TransID, AF_ACK_REQUEST, AF_DEFAULT_RADIUS ) == afStatus_SUCCESS );
    208            
    209            
    210          //  Protocol_Send(HEARTBEAT_PROTOCOL, &protocol, sizeof(protocol.Heartbeat_P)); 
    211          //  Protocol_Send(STATE_PROTOCOL, &protocol, sizeof(protocol.State_P));
    212          //  Protocol_Send(ACK_PROTOCOL, &protocol, sizeof(protocol.Ack_P));  
    213              
    214          //  LED_Flag = ~LED_Flag;
    215          //  P1_0 = LED_Flag;
    216          //  P1_1 = LED_Flag;
    217          //  P1_4 = LED_Flag;
    218          //  //P0_4 = LED_Flag;
    219          //  P0_6 = LED_Flag;
    220            printf("温控输入:%d\r\n", P1_3); 
    221          }
    222          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    223          void BrodcastData(uint8* data,uint8 len){
   \                     BrodcastData:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 18
   \   000005   74EE         MOV     A,#-0x12
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
    224            static uint8_t cnt = 0; 
    225            afAddrType_t Broadcast_DstAddr;  //地址描述符
    226            endPointDesc_t Broadcast_epDesc; //端点描述符 
    227            
    228            Broadcast_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
   \   00000C   740E         MOV     A,#0xe
   \   00000E   12....       LCALL   ?XSTACK_DISP0_8
   \   000011   740F         MOV     A,#0xf
   \   000013   F0           MOVX    @DPTR,A
    229            Broadcast_DstAddr.endPoint = APP_ENDPOINT;
   \   000014   12....       LCALL   ?XSTACK_DISP0_8
   \   000017   740A         MOV     A,#0xa
   \   000019   F0           MOVX    @DPTR,A
    230            Broadcast_DstAddr.addr.shortAddr = 0xFFFF;
   \   00001A   7406         MOV     A,#0x6
   \   00001C   12....       LCALL   ?XSTACK_DISP0_8
   \   00001F   74FF         MOV     A,#-0x1
   \   000021   F0           MOVX    @DPTR,A
   \   000022   A3           INC     DPTR
   \   000023   F0           MOVX    @DPTR,A
    231           
    232            Broadcast_epDesc.endPoint = APP_ENDPOINT;
   \   000024   85..82       MOV     DPL,?XSP + 0
   \   000027   85..83       MOV     DPH,?XSP + 1
   \   00002A   740A         MOV     A,#0xa
   \   00002C   F0           MOVX    @DPTR,A
    233            Broadcast_epDesc.task_id = &App_TaskId;
   \   00002D   7401         MOV     A,#0x1
   \   00002F   12....       LCALL   ?XSTACK_DISP0_8
   \   000032   74..         MOV     A,#App_TaskId & 0xff
   \   000034   F0           MOVX    @DPTR,A
   \   000035   A3           INC     DPTR
   \   000036   74..         MOV     A,#(App_TaskId >> 8) & 0xff
   \   000038   F0           MOVX    @DPTR,A
    234            Broadcast_epDesc.simpleDesc = (SimpleDescriptionFormat_t *)&App_SimpleDesc;
   \   000039   7403         MOV     A,#0x3
   \   00003B   12....       LCALL   ?XSTACK_DISP0_8
   \   00003E   74..         MOV     A,#App_SimpleDesc & 0xff
   \   000040   F0           MOVX    @DPTR,A
   \   000041   A3           INC     DPTR
   \   000042   74..         MOV     A,#(App_SimpleDesc >> 8) & 0xff
   \   000044   F0           MOVX    @DPTR,A
    235            Broadcast_epDesc.latencyReq = noLatencyReqs;
   \   000045   7405         MOV     A,#0x5
   \   000047   12....       LCALL   ?XSTACK_DISP0_8
   \   00004A   E4           CLR     A
   \   00004B   F0           MOVX    @DPTR,A
    236            cnt++;
   \   00004C   90....       MOV     DPTR,#??cnt_2
   \   00004F   E0           MOVX    A,@DPTR
   \   000050   04           INC     A
   \   000051   F0           MOVX    @DPTR,A
    237            if ( AF_DataRequest( &Broadcast_DstAddr, &Broadcast_epDesc, APP_CLUSTERID, len, (byte *)data, &App_TransID, AF_DISCV_ROUTE, AF_DEFAULT_RADIUS ) == afStatus_SUCCESS );
   \   000052                ; Setup parameters for call to function AF_DataRequest
   \   000052   75..1E       MOV     ?V0,#0x1e
   \   000055   78..         MOV     R0,#?V0
   \   000057   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00005A   75....       MOV     ?V0,#App_TransID & 0xff
   \   00005D   75....       MOV     ?V1,#(App_TransID >> 8) & 0xff
   \   000060   78..         MOV     R0,#?V0
   \   000062   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000065   8A..         MOV     ?V0,R2
   \   000067   8B..         MOV     ?V1,R3
   \   000069   78..         MOV     R0,#?V0
   \   00006B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00006E   8E..         MOV     ?V0,R6
   \   000070   75..00       MOV     ?V1,#0x0
   \   000073   78..         MOV     R0,#?V0
   \   000075   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000078   75..01       MOV     ?V0,#0x1
   \   00007B   78..         MOV     R0,#?V0
   \   00007D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000080   7900         MOV     R1,#0x0
   \   000082   7409         MOV     A,#0x9
   \   000084   12....       LCALL   ?XSTACK_DISP102_8
   \   000087   740F         MOV     A,#0xf
   \   000089   12....       LCALL   ?XSTACK_DISP101_8
   \   00008C   12....       LCALL   `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
   \   00008F   7409         MOV     A,#0x9
   \   000091   12....       LCALL   ?DEALLOC_XSTACK8
    238          
    239          }
   \   000094   7412         MOV     A,#0x12
   \   000096   02....       LJMP    ?Subroutine0 & 0xFFFF

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??cnt_2:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    240           
    241          
    242          /****************************************************
    243          *      函数名: App_ProcessEvent
    244          *        功能: 应用初事件处理函数
    245          *        参数: 应用层任务ID， 事件源
    246          ****************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    247          uint16 App_ProcessEvent( uint8 task_id, uint16 events ){
   \                     App_ProcessEvent:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    248            afIncomingMSGPacket_t *MSGpkt;
    249            afDataConfirm_t *afDataConfirm;
    250           
    251            if ( events & SYS_EVENT_MSG ){
   \   000009   5480         ANL     A,#0x80
   \   00000B   7003         JNZ     $+5
   \   00000D   02....       LJMP    ??App_ProcessEvent_0 & 0xFFFF
    252              MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( App_TaskId );
   \   000010                ; Setup parameters for call to function osal_msg_receive
   \   000010   8068         SJMP    ??App_ProcessEvent_1
    253              while ( MSGpkt ){
    254                switch ( MSGpkt->hdr.event )
    255                {
    256                  case ZDO_CB_MSG:
    257                    App_ProcessZDOMsgs( (zdoIncomingMsg_t *)MSGpkt );
    258                    break;
    259          
    260                  case KEY_CHANGE:
    261                    App_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
    262                    break;
    263          
    264                  case AF_DATA_CONFIRM_CMD:
    265                    afDataConfirm = (afDataConfirm_t *)MSGpkt;
    266          //          byte sentEP = afDataConfirm->endpoint; (void)sentEP;
    267          //          byte sentTransID = afDataConfirm->transID;(void)sentTransID;  
    268                    if ( afDataConfirm->hdr.status != ZSuccess ){
    269                      printf("发送失败\r\n");
    270                    }
    271                    break; 
    272                  case AF_INCOMING_MSG_CMD:
    273                    App_ReceiveHandle( MSGpkt );
    274                    break;
    275          
    276                  case ZDO_STATE_CHANGE:
    277                    App_NwkState = (devStates_t)(MSGpkt->hdr.status);
   \                     ??App_ProcessEvent_2:
   \   000012   A3           INC     DPTR
   \   000013   E0           MOVX    A,@DPTR
   \   000014   90....       MOV     DPTR,#App_NwkState
   \   000017   F0           MOVX    @DPTR,A
    278                    ZdoStateChange_printf(App_NwkState); 
   \   000018                ; Setup parameters for call to function ZdoStateChange_printf
   \   000018   F9           MOV     R1,A
   \   000019   12....       LCALL   `??ZdoStateChange_printf::?relay`; Banked call to: ZdoStateChange_printf
    279                    if ( (App_NwkState == DEV_ZB_COORD) || (App_NwkState == DEV_ROUTER) || (App_NwkState == DEV_END_DEVICE) ){ 
   \   00001C   90....       MOV     DPTR,#App_NwkState
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   6409         XRL     A,#0x9
   \   000022   600A         JZ      ??App_ProcessEvent_3
   \   000024   E0           MOVX    A,@DPTR
   \   000025   6407         XRL     A,#0x7
   \   000027   6005         JZ      ??App_ProcessEvent_3
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   6406         XRL     A,#0x6
   \   00002C   7045         JNZ     ??App_ProcessEvent_4
    280                      //osal_start_timerEx( App_TaskId, APP_SEND_MSG_EVT, APP_SEND_MSG_TIMEOUT ); 
    281                      
    282                      osal_start_timerEx( App_TaskId, HEARTBEAT_SEND_EVT , HEARTBEAT_SEND_TIMEOUT ); //发送心跳
   \                     ??App_ProcessEvent_3:
   \   00002E                ; Setup parameters for call to function osal_start_timerEx
   \   00002E   90....       MOV     DPTR,#__Constant_3e8
   \   000031   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   000034   7A08         MOV     R2,#0x8
   \   000036   7B00         MOV     R3,#0x0
   \   000038   90....       MOV     DPTR,#App_TaskId
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   F9           MOV     R1,A
   \   00003D   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000040   7404         MOV     A,#0x4
   \   000042   12....       LCALL   ?DEALLOC_XSTACK8
    283                      osal_start_timerEx( App_TaskId, HEARTBEAT_CHECK_EVT, HEARTBEAT_CHECK_TIMEOUT );//启动心跳检查 
   \   000045                ; Setup parameters for call to function osal_start_timerEx
   \   000045   90....       MOV     DPTR,#__Constant_bb8
   \   000048   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   00004B   7A04         MOV     R2,#0x4
   \   00004D   7B00         MOV     R3,#0x0
   \   00004F   90....       MOV     DPTR,#App_TaskId
   \   000052   E0           MOVX    A,@DPTR
   \   000053   F9           MOV     R1,A
   \   000054   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000057   7404         MOV     A,#0x4
   \   000059   12....       LCALL   ?DEALLOC_XSTACK8
    284                      osal_start_timerEx( App_TaskId, WATER_MACHINE_STATE_CHECK_EVT, 100 );
   \   00005C                ; Setup parameters for call to function osal_start_timerEx
   \   00005C   90....       MOV     DPTR,#__Constant_64
   \   00005F   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   000062   7A02         MOV     R2,#0x2
   \   000064   7B00         MOV     R3,#0x0
   \   000066   90....       MOV     DPTR,#App_TaskId
   \   000069   E0           MOVX    A,@DPTR
   \   00006A   F9           MOV     R1,A
   \   00006B   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   00006E   7404         MOV     A,#0x4
   \   000070   12....       LCALL   ?DEALLOC_XSTACK8
    285                    }
    286                    break; 
    287                  default:
    288                    break;
    289                } 
    290                osal_msg_deallocate( (uint8 *)MSGpkt ); 
   \                     ??App_ProcessEvent_4:
   \   000073                ; Setup parameters for call to function osal_msg_deallocate
   \   000073   AA..         MOV     R2,?V0
   \   000075   AB..         MOV     R3,?V1
   \   000077   12....       LCALL   `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
    291                MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( App_TaskId );
   \   00007A                ; Setup parameters for call to function osal_msg_receive
   \                     ??App_ProcessEvent_1:
   \   00007A   90....       MOV     DPTR,#App_TaskId
   \   00007D   E0           MOVX    A,@DPTR
   \   00007E   F9           MOV     R1,A
   \   00007F   12....       LCALL   `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
   \   000082   8A..         MOV     ?V0,R2
   \   000084   8B..         MOV     ?V1,R3
   \   000086   E5..         MOV     A,?V0
   \   000088   45..         ORL     A,?V1
   \   00008A   7003         JNZ     $+5
   \   00008C   02....       LJMP    ??App_ProcessEvent_5 & 0xFFFF
   \   00008F   85..82       MOV     DPL,?V0
   \   000092   85..83       MOV     DPH,?V1
   \   000095   E0           MOVX    A,@DPTR
   \   000096   24E6         ADD     A,#-0x1a
   \   000098   6055         JZ      ??App_ProcessEvent_6
   \   00009A   245A         ADD     A,#0x5a
   \   00009C   601A         JZ      ??App_ProcessEvent_7
   \   00009E   24EF         ADD     A,#-0x11
   \   0000A0   7003         JNZ     $+5
   \   0000A2   02....       LJMP    ??App_ProcessEvent_2 & 0xFFFF
   \   0000A5   24FE         ADD     A,#-0x2
   \   0000A7   6006         JZ      ??App_ProcessEvent_8
   \   0000A9   24D6         ADD     A,#-0x2a
   \   0000AB   6038         JZ      ??App_ProcessEvent_9
   \   0000AD   80C4         SJMP    ??App_ProcessEvent_4
   \                     ??App_ProcessEvent_8:
   \   0000AF                ; Setup parameters for call to function App_ProcessZDOMsgs
   \   0000AF   AA..         MOV     R2,?V0
   \   0000B1   AB..         MOV     R3,?V1
   \   0000B3   12....       LCALL   `??App_ProcessZDOMsgs::?relay`; Banked call to: App_ProcessZDOMsgs
   \   0000B6   80BB         SJMP    ??App_ProcessEvent_4
   \                     ??App_ProcessEvent_7:
   \   0000B8   A3           INC     DPTR
   \   0000B9   A3           INC     DPTR
   \   0000BA   A3           INC     DPTR
   \   0000BB   E0           MOVX    A,@DPTR
   \   0000BC   F5..         MOV     ?V2,A
   \   0000BE   85..82       MOV     DPL,?V0
   \   0000C1   85..83       MOV     DPH,?V1
   \   0000C4   A3           INC     DPTR
   \   0000C5   A3           INC     DPTR
   \   0000C6   E0           MOVX    A,@DPTR
   \   0000C7   70AA         JNZ     ??App_ProcessEvent_4
   \   0000C9   E5..         MOV     A,?V2
   \   0000CB   A2E0         MOV     C,0xE0 /* A   */.0
   \   0000CD   5007         JNC     ??App_ProcessEvent_10
   \   0000CF                ; Setup parameters for call to function printf
   \   0000CF   7A..         MOV     R2,#`?<Constant "HAL_KEY_SW_1\\r\\n">` & 0xff
   \   0000D1   7B..         MOV     R3,#(`?<Constant "HAL_KEY_SW_1\\r\\n">` >> 8) & 0xff
   \   0000D3   12....       LCALL   `??printf::?relay`   ; Banked call to: printf
   \                     ??App_ProcessEvent_10:
   \   0000D6   E5..         MOV     A,?V2
   \   0000D8   A2E1         MOV     C,0xE0 /* A   */.1
   \   0000DA   5097         JNC     ??App_ProcessEvent_4
   \   0000DC                ; Setup parameters for call to function printf
   \   0000DC   7A..         MOV     R2,#`?<Constant "HAL_KEY_SW_2\\r\\n">` & 0xff
   \   0000DE   7B..         MOV     R3,#(`?<Constant "HAL_KEY_SW_2\\r\\n">` >> 8) & 0xff
   \                     ??App_ProcessEvent_11:
   \   0000E0   12....       LCALL   `??printf::?relay`   ; Banked call to: printf
   \   0000E3   808E         SJMP    ??App_ProcessEvent_4
   \                     ??App_ProcessEvent_9:
   \   0000E5   A3           INC     DPTR
   \   0000E6   E0           MOVX    A,@DPTR
   \   0000E7   608A         JZ      ??App_ProcessEvent_4
   \   0000E9                ; Setup parameters for call to function printf
   \   0000E9   7A..         MOV     R2,#`?<Constant "\\267\\242\\313\\315\\312\\247\\260\\334\\r` & 0xff
   \   0000EB   7B..         MOV     R3,#(`?<Constant "\\267\\242\\313\\315\\312\\247\\260\\334\\r` >> 8) & 0xff
   \   0000ED   80F1         SJMP    ??App_ProcessEvent_11
   \                     ??App_ProcessEvent_6:
   \   0000EF   A3           INC     DPTR
   \   0000F0   A3           INC     DPTR
   \   0000F1   A3           INC     DPTR
   \   0000F2   A3           INC     DPTR
   \   0000F3   E0           MOVX    A,@DPTR
   \   0000F4   6401         XRL     A,#0x1
   \   0000F6   7002         JNZ     ??App_ProcessEvent_12
   \   0000F8   A3           INC     DPTR
   \   0000F9   E0           MOVX    A,@DPTR
   \                     ??App_ProcessEvent_12:
   \   0000FA   6003         JZ      $+5
   \   0000FC   02....       LJMP    ??App_ProcessEvent_4 & 0xFFFF
   \   0000FF                ; Setup parameters for call to function printf
   \   0000FF   7A..         MOV     R2,#`?<Constant "\\312\\325\\265\\275\\312\\375\\276\\335:"` & 0xff
   \   000101   7B..         MOV     R3,#(`?<Constant "\\312\\325\\265\\275\\312\\375\\276\\335:"` >> 8) & 0xff
   \   000103   12....       LCALL   `??printf::?relay`   ; Banked call to: printf
   \   000106   E5..         MOV     A,?V0
   \   000108   2420         ADD     A,#0x20
   \   00010A   F5..         MOV     ?V2,A
   \   00010C   E4           CLR     A
   \   00010D   35..         ADDC    A,?V1
   \   00010F   F5..         MOV     ?V3,A
   \   000111                ; Setup parameters for call to function Protocol_Printf
   \   000111   85..82       MOV     DPL,?V2
   \   000114   12....       LCALL   ?Subroutine2 & 0xFFFF
    292              } 
   \                     ??CrossCallReturnLabel_0:
   \   000117   FA           MOV     R2,A
   \   000118   A3           INC     DPTR
   \   000119   E0           MOVX    A,@DPTR
   \   00011A   FB           MOV     R3,A
   \   00011B   12....       LCALL   `??Protocol_Printf::?relay`; Banked call to: Protocol_Printf
   \   00011E   85..82       MOV     DPL,?V2
   \   000121   85..83       MOV     DPH,?V3
   \   000124   C3           CLR     C
   \   000125   E0           MOVX    A,@DPTR
   \   000126   9402         SUBB    A,#0x2
   \   000128   A3           INC     DPTR
   \   000129   E0           MOVX    A,@DPTR
   \   00012A   9400         SUBB    A,#0x0
   \   00012C   402C         JC      ??App_ProcessEvent_13
   \   00012E                ; Setup parameters for indirect call
   \   00012E   E5..         MOV     A,?V0
   \   000130   2420         ADD     A,#0x20
   \   000132   F582         MOV     DPL,A
   \   000134   E4           CLR     A
   \   000135   35..         ADDC    A,?V1
   \   000137   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   00013A   FC           MOV     R4,A
   \   00013B   A3           INC     DPTR
   \   00013C   E0           MOVX    A,@DPTR
   \   00013D   FD           MOV     R5,A
   \   00013E   90....       MOV     DPTR,#UART1_Resolver
   \   000141   E0           MOVX    A,@DPTR
   \   000142   FA           MOV     R2,A
   \   000143   A3           INC     DPTR
   \   000144   E0           MOVX    A,@DPTR
   \   000145   FB           MOV     R3,A
   \   000146   90....       MOV     DPTR,#UART1_Resolver
   \   000149   E0           MOVX    A,@DPTR
   \   00014A   F8           MOV     R0,A
   \   00014B   A3           INC     DPTR
   \   00014C   E0           MOVX    A,@DPTR
   \   00014D   C8           XCH     A,R0
   \   00014E   241D         ADD     A,#0x1d
   \   000150   F582         MOV     DPL,A
   \   000152   E4           CLR     A
   \   000153   38           ADDC    A,R0
   \   000154   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   000157   12....       LCALL   ?CALL_IND
   \                     ??App_ProcessEvent_13:
   \   00015A                ; Setup parameters for call to function HeartBeat_Set
   \   00015A   7900         MOV     R1,#0x0
   \   00015C   12....       LCALL   `??HeartBeat_Set::?relay`; Banked call to: HeartBeat_Set
   \   00015F   02....       LJMP    ??App_ProcessEvent_4 & 0xFFFF
    293              return (events ^ SYS_EVENT_MSG);
   \                     ??App_ProcessEvent_5:
   \   000162   EE           MOV     A,R6
   \   000163   FA           MOV     R2,A
   \   000164   EF           MOV     A,R7
   \   000165   6480         XRL     A,#0x80
   \   000167   02....       LJMP    ??App_ProcessEvent_14 & 0xFFFF
    294            }
    295            
    296            if ( events & APP_SEND_MSG_EVT ){ 
   \                     ??App_ProcessEvent_0:
   \   00016A   EE           MOV     A,R6
   \   00016B   A2E0         MOV     C,0xE0 /* A   */.0
   \   00016D   4003         JC      $+5
   \   00016F   02....       LJMP    ??App_ProcessEvent_15 & 0xFFFF
    297              App_SendHandle(); 
   \   000172   90....       MOV     DPTR,#App_NwkState
   \   000175   E0           MOVX    A,@DPTR
   \   000176   6406         XRL     A,#0x6
   \   000178   705D         JNZ     ??App_ProcessEvent_16
   \   00017A                ; Setup parameters for call to function NLME_GetShortAddr
   \   00017A   12....       LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   00017D   8B..         MOV     ?V3,R3
   \   00017F   8A..         MOV     ?V0,R2
   \   000181   90....       MOV     DPTR,#??cnt_1
   \   000184   E0           MOVX    A,@DPTR
   \   000185   90....       MOV     DPTR,#protocol
   \   000188   F0           MOVX    @DPTR,A
   \   000189   90....       MOV     DPTR,#??cnt_1
   \   00018C   04           INC     A
   \   00018D   F0           MOVX    @DPTR,A
   \   00018E   E4           CLR     A
   \   00018F   C5..         XCH     A,?V3
   \   000191   F5..         MOV     ?V2,A
   \   000193   90....       MOV     DPTR,#protocol + 1
   \   000196   F0           MOVX    @DPTR,A
   \   000197   EA           MOV     A,R2
   \   000198   A3           INC     DPTR
   \   000199   F0           MOVX    @DPTR,A
   \   00019A                ; Setup parameters for call to function Protocol_Send
   \   00019A   7903         MOV     R1,#0x3
   \   00019C   7C..         MOV     R4,#protocol & 0xff
   \   00019E   7D..         MOV     R5,#(protocol >> 8) & 0xff
   \   0001A0   7A31         MOV     R2,#0x31
   \   0001A2   7B10         MOV     R3,#0x10
   \   0001A4   12....       LCALL   `??Protocol_Send::?relay`; Banked call to: Protocol_Send
   \   0001A7                ; Setup parameters for call to function printf
   \   0001A7   75..00       MOV     ?V1,#0x0
   \   0001AA   78..         MOV     R0,#?V0
   \   0001AC   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001AF   78..         MOV     R0,#?V2
   \   0001B1   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001B4   7A..         MOV     R2,#`?<Constant "\\261\\276\\273\\372\\265\\330\\326\\267\\2` & 0xff
   \   0001B6   7B..         MOV     R3,#(`?<Constant "\\261\\276\\273\\372\\265\\330\\326\\267\\2` >> 8) & 0xff
   \   0001B8   12....       LCALL   `??printf::?relay`   ; Banked call to: printf
   \   0001BB   7404         MOV     A,#0x4
   \   0001BD   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001C0                ; Setup parameters for call to function printf
   \   0001C0   A293         MOV     C,0x90.3
   \   0001C2   E4           CLR     A
   \   0001C3   33           RLC     A
   \   0001C4   F5..         MOV     ?V0,A
   \   0001C6   78..         MOV     R0,#?V0
   \   0001C8   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001CB   7A..         MOV     R2,#`?<Constant "\\316\\302\\277\\330\\312\\344\\310\\353:%` & 0xff
   \   0001CD   7B..         MOV     R3,#(`?<Constant "\\316\\302\\277\\330\\312\\344\\310\\353:%` >> 8) & 0xff
   \   0001CF   12....       LCALL   `??printf::?relay`   ; Banked call to: printf
   \   0001D2   7402         MOV     A,#0x2
   \   0001D4   12....       LCALL   ?DEALLOC_XSTACK8
    298              osal_start_timerEx( App_TaskId, APP_SEND_MSG_EVT, APP_SEND_MSG_TIMEOUT ); 
   \                     ??App_ProcessEvent_16:
   \   0001D7                ; Setup parameters for call to function osal_start_timerEx
   \   0001D7   90....       MOV     DPTR,#__Constant_3e8
   \   0001DA   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   0001DD   7A01         MOV     R2,#0x1
   \   0001DF   7B00         MOV     R3,#0x0
   \   0001E1   90....       MOV     DPTR,#App_TaskId
   \   0001E4   E0           MOVX    A,@DPTR
   \   0001E5   F9           MOV     R1,A
   \   0001E6   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   0001E9   7404         MOV     A,#0x4
   \   0001EB   12....       LCALL   ?DEALLOC_XSTACK8
    299              return (events ^ APP_SEND_MSG_EVT);
   \   0001EE   EE           MOV     A,R6
   \   0001EF   6401         XRL     A,#0x1
   \   0001F1   8069         SJMP    ??App_ProcessEvent_17
    300            }
    301            
    302            if( events & WATER_MACHINE_STATE_CHECK_EVT){
   \                     ??App_ProcessEvent_15:
   \   0001F3   5402         ANL     A,#0x2
   \   0001F5   601F         JZ      ??App_ProcessEvent_18
    303              State_Check();
   \   0001F7                ; Setup parameters for call to function State_Check
   \   0001F7   12....       LCALL   `??State_Check::?relay`; Banked call to: State_Check
    304              osal_start_timerEx( App_TaskId, WATER_MACHINE_STATE_CHECK_EVT, 100 );
   \   0001FA                ; Setup parameters for call to function osal_start_timerEx
   \   0001FA   90....       MOV     DPTR,#__Constant_64
   \   0001FD   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   000200   7A02         MOV     R2,#0x2
   \   000202   7B00         MOV     R3,#0x0
   \   000204   90....       MOV     DPTR,#App_TaskId
   \   000207   E0           MOVX    A,@DPTR
   \   000208   F9           MOV     R1,A
   \   000209   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   00020C   7404         MOV     A,#0x4
   \   00020E   12....       LCALL   ?DEALLOC_XSTACK8
    305              return (events ^ WATER_MACHINE_STATE_CHECK_EVT);
   \   000211   EE           MOV     A,R6
   \   000212   6402         XRL     A,#0x2
   \   000214   8046         SJMP    ??App_ProcessEvent_17
    306            }
    307            
    308            if ( events & HEARTBEAT_CHECK_EVT ){ 
   \                     ??App_ProcessEvent_18:
   \   000216   EE           MOV     A,R6
   \   000217   5404         ANL     A,#0x4
   \   000219   601F         JZ      ??App_ProcessEvent_19
    309              HeartBeat_Check(); 
   \   00021B                ; Setup parameters for call to function HeartBeat_Check
   \   00021B   12....       LCALL   `??HeartBeat_Check::?relay`; Banked call to: HeartBeat_Check
    310              osal_start_timerEx( App_TaskId, HEARTBEAT_CHECK_EVT, HEARTBEAT_CHECK_TIMEOUT ); 
   \   00021E                ; Setup parameters for call to function osal_start_timerEx
   \   00021E   90....       MOV     DPTR,#__Constant_bb8
   \   000221   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   000224   7A04         MOV     R2,#0x4
   \   000226   7B00         MOV     R3,#0x0
   \   000228   90....       MOV     DPTR,#App_TaskId
   \   00022B   E0           MOVX    A,@DPTR
   \   00022C   F9           MOV     R1,A
   \   00022D   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000230   7404         MOV     A,#0x4
   \   000232   12....       LCALL   ?DEALLOC_XSTACK8
    311              return (events ^ HEARTBEAT_CHECK_EVT);
   \   000235   EE           MOV     A,R6
   \   000236   6404         XRL     A,#0x4
   \   000238   8022         SJMP    ??App_ProcessEvent_17
    312            }
    313            
    314            if ( events & HEARTBEAT_SEND_EVT ){ 
   \                     ??App_ProcessEvent_19:
   \   00023A   EE           MOV     A,R6
   \   00023B   5408         ANL     A,#0x8
   \   00023D   6022         JZ      ??App_ProcessEvent_20
    315              SendHearBeat(); 
   \   00023F                ; Setup parameters for call to function SendHearBeat
   \   00023F   12....       LCALL   `??SendHearBeat::?relay`; Banked call to: SendHearBeat
    316              osal_start_timerEx( App_TaskId, HEARTBEAT_SEND_EVT, HEARTBEAT_SEND_TIMEOUT ); 
   \   000242                ; Setup parameters for call to function osal_start_timerEx
   \   000242   90....       MOV     DPTR,#__Constant_3e8
   \   000245   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   000248   7A08         MOV     R2,#0x8
   \   00024A   7B00         MOV     R3,#0x0
   \   00024C   90....       MOV     DPTR,#App_TaskId
   \   00024F   E0           MOVX    A,@DPTR
   \   000250   F9           MOV     R1,A
   \   000251   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000254   7404         MOV     A,#0x4
   \   000256   12....       LCALL   ?DEALLOC_XSTACK8
    317              return (events ^ HEARTBEAT_SEND_EVT);
   \   000259   EE           MOV     A,R6
   \   00025A   6408         XRL     A,#0x8
   \                     ??App_ProcessEvent_17:
   \   00025C   FA           MOV     R2,A
   \   00025D   EF           MOV     A,R7
   \                     ??App_ProcessEvent_14:
   \   00025E   FB           MOV     R3,A
   \   00025F   8004         SJMP    ??App_ProcessEvent_21
    318            }
    319            
    320            return 0;
   \                     ??App_ProcessEvent_20:
   \   000261   7A00         MOV     R2,#0x0
   \   000263   7B00         MOV     R3,#0x0
   \                     ??App_ProcessEvent_21:
   \   000265                REQUIRE ?Subroutine1
   \   000265                REQUIRE _A_P1
   \   000265                ; // Fall through to label ?Subroutine1
    321          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7F04         MOV     R7,#0x4
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   F583         MOV     DPH,A
   \   000002   E0           MOVX    A,@DPTR
   \   000003   F9           MOV     R1,A
   \   000004   E5..         MOV     A,?V0
   \   000006   2422         ADD     A,#0x22
   \   000008   F582         MOV     DPL,A
   \   00000A   E4           CLR     A
   \   00000B   35..         ADDC    A,?V1
   \   00000D   F583         MOV     DPH,A
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   F583         MOV     DPH,A
   \   000002   E0           MOVX    A,@DPTR
   \   000003   F8           MOV     R0,A
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   F583         MOV     DPH,A
   \   000008   8882         MOV     DPL,R0
   \   00000A   22           RET
    322          
    323          /****************************************************
    324          *      函数名: App_ProcessZDOMsgs
    325          *        功能: ZDO设备对象层消息处理 
    326          ****************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    327          static void App_ProcessZDOMsgs( zdoIncomingMsg_t *inMsg ){
   \                     App_ProcessZDOMsgs:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
    328            switch ( inMsg->clusterID ){
   \   000005   EA           MOV     A,R2
   \   000006   240C         ADD     A,#0xc
   \   000008   F582         MOV     DPL,A
   \   00000A   E4           CLR     A
   \   00000B   3B           ADDC    A,R3
   \   00000C   F583         MOV     DPH,A
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   F5..         MOV     ?V0,A
   \   000011   A3           INC     DPTR
   \   000012   E0           MOVX    A,@DPTR
   \   000013   F5..         MOV     ?V1,A
   \   000015   78..         MOV     R0,#?V0
   \   000017   12....       LCALL   ?US_SWITCH_SPARSE
   \                     `?<Jumptable for App_ProcessZDOMsgs>_0`:
   \   00001A   0000         DW        0
   \   00001C   0300         DW        3
   \   00001E   0600         DW        6
   \   000020   ....         DW        ??App_ProcessZDOMsgs_0
   \   000022   0680         DW        32774
   \   000024   ....         DW        ??App_ProcessZDOMsgs_1
   \   000026   2080         DW        32800
   \   000028   ....         DW        ??App_ProcessZDOMsgs_2
   \   00002A   ....         DW        ??App_ProcessZDOMsgs_3
    329              case End_Device_Bind_rsp:
    330                if ( ZDO_ParseBindRsp( inMsg ) == ZSuccess ){
   \                     ??App_ProcessZDOMsgs_2:
   \   00002C   EA           MOV     A,R2
   \   00002D   2413         ADD     A,#0x13
   \   00002F   F582         MOV     DPL,A
   \   000031   E4           CLR     A
   \   000032   3B           ADDC    A,R3
   \   000033   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   000036   E0           MOVX    A,@DPTR
   \   000037   6003         JZ      $+5
   \   000039   02....       LJMP    ??App_ProcessZDOMsgs_3 & 0xFFFF
    331                  // Light LED
    332                  HalLedSet( HAL_LED_4, HAL_LED_MODE_ON );
   \   00003C                ; Setup parameters for call to function HalLedSet
   \   00003C   7A01         MOV     R2,#0x1
   \   00003E   7908         MOV     R1,#0x8
   \   000040   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
   \   000043   02....       LJMP    ??App_ProcessZDOMsgs_3 & 0xFFFF
    333                }
    334                break;
    335          
    336              case Match_Desc_rsp:
    337                {
    338                  ZDO_ActiveEndpointRsp_t *pRsp = ZDO_ParseEPListRsp( inMsg );
   \                     ??App_ProcessZDOMsgs_1:
   \   000046                ; Setup parameters for call to function ZDO_ParseEPListRsp
   \   000046   12....       LCALL   `??ZDO_ParseEPListRsp::?relay`; Banked call to: ZDO_ParseEPListRsp
   \   000049   8A..         MOV     ?V0,R2
   \   00004B   8B..         MOV     ?V1,R3
   \   00004D   AE..         MOV     R6,?V0
   \   00004F   AF..         MOV     R7,?V1
    339                  if ( pRsp ){
   \   000051   EE           MOV     A,R6
   \   000052   4F           ORL     A,R7
   \   000053   6077         JZ      ??App_ProcessZDOMsgs_3
    340                    if ( pRsp->status == ZSuccess && pRsp->cnt ){
   \   000055   8E82         MOV     DPL,R6
   \   000057   8F83         MOV     DPH,R7
   \   000059   E0           MOVX    A,@DPTR
   \   00005A   7032         JNZ     ??App_ProcessZDOMsgs_4
   \   00005C   A3           INC     DPTR
   \   00005D   A3           INC     DPTR
   \   00005E   A3           INC     DPTR
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   602C         JZ      ??App_ProcessZDOMsgs_4
    341                      App_DstAddr.addrMode = (afAddrMode_t)Addr16Bit;
   \   000062   90....       MOV     DPTR,#App_DstAddr + 8
   \   000065   7402         MOV     A,#0x2
   \   000067   F0           MOVX    @DPTR,A
    342                      App_DstAddr.addr.shortAddr = pRsp->nwkAddr; 
   \   000068   8E82         MOV     DPL,R6
   \   00006A   8F83         MOV     DPH,R7
   \   00006C   A3           INC     DPTR
   \   00006D   E0           MOVX    A,@DPTR
   \   00006E   F8           MOV     R0,A
   \   00006F   A3           INC     DPTR
   \   000070   E0           MOVX    A,@DPTR
   \   000071   F9           MOV     R1,A
   \   000072   90....       MOV     DPTR,#App_DstAddr
   \   000075   E8           MOV     A,R0
   \   000076   F0           MOVX    @DPTR,A
   \   000077   A3           INC     DPTR
   \   000078   E9           MOV     A,R1
   \   000079   F0           MOVX    @DPTR,A
    343                      App_DstAddr.endPoint = pRsp->epList[0];
   \   00007A   8E82         MOV     DPL,R6
   \   00007C   8F83         MOV     DPH,R7
   \   00007E   A3           INC     DPTR
   \   00007F   A3           INC     DPTR
   \   000080   A3           INC     DPTR
   \   000081   A3           INC     DPTR
   \   000082   E0           MOVX    A,@DPTR
   \   000083   90....       MOV     DPTR,#App_DstAddr + 9
   \   000086   F0           MOVX    @DPTR,A
    344          
    345                      // Light LED
    346                      HalLedSet( HAL_LED_4, HAL_LED_MODE_ON );
   \   000087                ; Setup parameters for call to function HalLedSet
   \   000087   7A01         MOV     R2,#0x1
   \   000089   7908         MOV     R1,#0x8
   \   00008B   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
   \                     ??App_ProcessZDOMsgs_4:
   \   00008E   8E82         MOV     DPL,R6
   \   000090   8F83         MOV     DPH,R7
   \   000092   A3           INC     DPTR
   \   000093   E0           MOVX    A,@DPTR
   \   000094   F5..         MOV     ?V0,A
   \   000096   A3           INC     DPTR
   \   000097   E0           MOVX    A,@DPTR
   \   000098   F5..         MOV     ?V1,A
   \   00009A                ; Setup parameters for call to function printf
   \   00009A   E5..         MOV     A,?V0
   \   00009C   F5..         MOV     ?V2,A
   \   00009E   75..00       MOV     ?V3,#0x0
   \   0000A1   78..         MOV     R0,#?V2
   \   0000A3   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000A6   E4           CLR     A
   \   0000A7   C5..         XCH     A,?V1
   \   0000A9   F5..         MOV     ?V0,A
   \   0000AB   78..         MOV     R0,#?V0
   \   0000AD   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000B0   7A..         MOV     R2,#`?<Constant "Match_Desc_rsp,addr:%...">` & 0xff
   \   0000B2   7B..         MOV     R3,#(`?<Constant "Match_Desc_rsp,addr:%...">` >> 8) & 0xff
    347                    }
    348                    printf("Match_Desc_rsp,addr:%X,%X\r\n", pRsp->nwkAddr >> 8, pRsp->nwkAddr & 0x00FF);
   \   0000B4   12....       LCALL   `??printf::?relay`   ; Banked call to: printf
   \   0000B7   7404         MOV     A,#0x4
   \   0000B9   12....       LCALL   ?DEALLOC_XSTACK8
    349                    osal_mem_free( pRsp );
   \   0000BC                ; Setup parameters for call to function osal_mem_free
   \   0000BC   EE           MOV     A,R6
   \   0000BD   FA           MOV     R2,A
   \   0000BE   EF           MOV     A,R7
   \   0000BF   FB           MOV     R3,A
   \   0000C0   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0000C3   8007         SJMP    ??App_ProcessZDOMsgs_3
    350                  }
    351                }
    352                break;
    353              case Match_Desc_req:
    354                printf("Match_Desc_rsp\r\n");
   \                     ??App_ProcessZDOMsgs_0:
   \   0000C5                ; Setup parameters for call to function printf
   \   0000C5   7A..         MOV     R2,#`?<Constant "Match_Desc_rsp\\r\\n">` & 0xff
   \   0000C7   7B..         MOV     R3,#(`?<Constant "Match_Desc_rsp\\r\\n">` >> 8) & 0xff
   \   0000C9   12....       LCALL   `??printf::?relay`   ; Banked call to: printf
    355                break;
    356            }
    357          }
   \                     ??App_ProcessZDOMsgs_3:
   \   0000CC   02....       LJMP    ?Subroutine1 & 0xFFFF

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SendHandle::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SendHandle

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??App_Init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    App_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??App_GetTaskID::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    App_GetTaskID

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??App_GetepDesc::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    App_GetepDesc

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SendHearBeat::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SendHearBeat

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??BrodcastData::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    BrodcastData

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??App_ProcessEvent::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    App_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??App_ProcessZDOMsgs::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    App_ProcessZDOMsgs

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "HAL_KEY_SW_1\\r\\n">`:
   \   000000   48414C5F     DB "HAL_KEY_SW_1\015\012"
   \            4B45595F
   \            53575F31
   \            0D0A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "HAL_KEY_SW_2\\r\\n">`:
   \   000000   48414C5F     DB "HAL_KEY_SW_2\015\012"
   \            4B45595F
   \            53575F32
   \            0D0A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\312\\325\\265\\275\\312\\375\\276\\335:"`:
   \   000000   CAD5B5BD     DB "\312\325\265\275\312\375\276\335:"
   \            CAFDBEDD
   \            3A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\261\\276\\273\\372\\265\\330\\326\\267\\2`:
   \   000000   B1BEBBFA     DB "\261\276\273\372\265\330\326\267\243\272%X,%X\015\012"
   \            B5D8D6B7
   \            A3BA2558
   \            2C25580D
   \            0A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\316\\302\\277\\330\\312\\344\\310\\353:%`:
   \   000000   CEC2BFD8     DB "\316\302\277\330\312\344\310\353:%d\015\012"
   \            CAE4C8EB
   \            3A25640D
   \            0A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\267\\242\\313\\315\\312\\247\\260\\334\\r`:
   \   000000   B7A2CBCD     DB "\267\242\313\315\312\247\260\334\015\012"
   \            CAA7B0DC
   \            0D0A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Match_Desc_rsp,addr:%...">`:
   \   000000   4D617463     DB "Match_Desc_rsp,addr:%X,%X\015\012"
   \            685F4465
   \            73635F72
   \            73702C61
   \            6464723A
   \            25582C25
   \            580D0A00

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Match_Desc_rsp\\r\\n">`:
   \   000000   4D617463     DB "Match_Desc_rsp\015\012"
   \            685F4465
   \            73635F72
   \            73700D0A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_3e8:
   \   000000   E8030000     DD 1000

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_bb8:
   \   000000   B80B0000     DD 3000

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_64:
   \   000000   64000000     DD 100

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0      0   App_GetTaskID
      2      0   App_GetepDesc
      0      9   App_Init
        0      9   -> Device_Info
        0      9   -> Log_Init
        0      9   -> ProtocolFrame_Init
        0      9   -> RegisterForKeys
        0      9   -> WaterMachine_Init
        0      9   -> afRegister
      0     16   App_ProcessEvent
        0     12   -> App_ProcessZDOMsgs
        0     12   -> HeartBeat_Check
        0     12   -> HeartBeat_Set
        0     12   -> NLME_GetShortAddr
        0     12   -> Protocol_Printf
        0     12   -> Protocol_Send
        0     12   -> SendHearBeat
        0     12   -> State_Check
        0     12   -> ZdoStateChange_printf
        0     12   -> osal_msg_deallocate
        0     12   -> osal_msg_receive
        0     16   -> osal_start_timerEx
        0     12   -> printf
        0     14   -> printf
        0     16   -> printf
      0     28   App_ProcessZDOMsgs
        0     12   -> HalLedSet
        0     12   -> ZDO_ParseEPListRsp
        0     12   -> osal_mem_free
        0     12   -> printf
        0     16   -> printf
      0     37   BrodcastData
        0     37   -> AF_DataRequest
      0     19   SendHandle
        0     19   -> AF_DataRequest
      1     25   SendHearBeat
        0     13   -> NLME_GetShortAddr
        0     13   -> Protocol_Send


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      15  ?<Constant "HAL_KEY_SW_1\r\n">
      15  ?<Constant "HAL_KEY_SW_2\r\n">
      28  ?<Constant "Match_Desc_rsp,addr:%...">
      17  ?<Constant "Match_Desc_rsp\r\n">
      18  ?<Constant "\261\276\273\372\265\330\326\267\2
      11  ?<Constant "\267\242\313\315\312\247\260\334\r
      10  ?<Constant "\312\325\265\275\312\375\276\335:"
      14  ?<Constant "\316\302\277\330\312\344\310\353:%
       3  ?<Constant {{0}}>
       8  ?Subroutine0
       5  ?Subroutine1
      17  ?Subroutine2
      11  ?Subroutine3
       2  App_ClusterList
      12  App_DstAddr
       7  App_GetTaskID
       6  App_GetTaskID::?relay
      23  App_GetepDesc
       6  App_GetepDesc::?relay
      95  App_Init
       6  App_Init::?relay
       1  App_NwkState
     613  App_ProcessEvent
       6  App_ProcessEvent::?relay
     207  App_ProcessZDOMsgs
       6  App_ProcessZDOMsgs::?relay
      12  App_SimpleDesc
       1  App_TaskId
       1  App_TransID
       6  App_epDesc
     153  BrodcastData
       6  BrodcastData::?relay
      75  SendHandle
       6  SendHandle::?relay
      74  SendHearBeat
       6  SendHearBeat::?relay
       1  _A_P1
       4  __Constant_3e8
       4  __Constant_64
       4  __Constant_bb8
       1  cnt
       1  cnt
       1  cnt
       3  protocol

 
 1 288 bytes in segment BANKED_CODE
    48 bytes in segment BANK_RELAYS
     1 byte  in segment SFR_AN
   157 bytes in segment XDATA_ROM_C
    27 bytes in segment XDATA_Z
 
 1 336 bytes of CODE  memory
   145 bytes of CONST memory (+ 12 bytes shared)
     0 bytes of DATA  memory (+  1 byte  shared)
    27 bytes of XDATA memory

Errors: none
Warnings: none
