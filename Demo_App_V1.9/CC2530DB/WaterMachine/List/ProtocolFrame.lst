###############################################################################
#
# IAR C/C++ Compiler V9.30.1.3056 for 8051                25/Oct/2016  15:28:52
# Copyright 2004-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\Frame\ProtocolFrame.c
#    Command line       =  
#        -f "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f
#        "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=50 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
#        -DREJOIN_POLL_RATE=440 "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack
#        Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\Frame\ProtocolFrame.c"
#        -D HAL_UART=TRUE -D HAL_UART_ISR=1 -D HAL_UART_DMA=0 -D LOG_OUT -D
#        UART1_PROTOCOL_RESOLVER=1 -D xISQC -D NWK_AUTO_POLL -D xZTOOL_P1 -D
#        ISR_KEYINTERRUPT -D xMT_TASK -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D
#        xLCD_SUPPORTED=DEBUG -D xPOWER_SAVING -lC
#        "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\WaterMachine\List"
#        -lA "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\WaterMachine\List"
#        --diag_suppress Pe001,Pa010 -o
#        "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\WaterMachine\Obj"
#        -e --no_code_motion --debug --core=plain --dptr=16,1
#        --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 8 -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack
#        Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\"
#        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\..\Source\"
#        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\..\Frame\"
#        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\..\Module\WaterMachine\"
#        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -Ohz
#    List file          =  
#        E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\WaterMachine\List\ProtocolFrame.lst
#    Object file        =  
#        E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\WaterMachine\Obj\ProtocolFrame.r51
#
###############################################################################

E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh 1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\Frame\ProtocolFrame.c
      1          #include "ProtocolFrame.h" 
      2          #include "ProtocolHandle.h"
      3          #include "LOG.h"
      4          #include "Protocol.h"
      5           
      6          //###################################对外变量区###################################
      7          //PROTOCOL_INFO_T protocol_send_infos[SEND_PROTOCOL_NUM] = {0};//发送协议栈
      8          //PROTOCOL_INFO_T recv_protocol_infos[RECV_PROTOCOL_NUM] = {0};//接收协议栈 
      9          //static uint8_t _Recv_Protocol_Arr[RECV_PROTOCOL_NUM] = {0};//已经接收到协议的索引  
     10          //PROTOCOL_DESC_T Send_Desc_P[SEND_PROTOCOL_NUM];//发送协议栈
     11          //PROTOCOL_DESC_T Recv_Desc_P[RECV_PROTOCOL_NUM];//接收协议栈 
     12          //PROTOCOL_DESC_T Transpond_Desc_P[TRANSPOND_PROTOCOL_NUM];//接收协议栈 

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     13          PROTOCOL_DESC_T Desc_P_Arr[PROTOCOL_NUM];//协议栈
   \                     Desc_P_Arr:
   \   000000                DS 120
   \   000078                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     14          uint8_t Protocol_Size = 0;
   \                     Protocol_Size:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     15          //###################################对内变量区################################### 
     16           
     17          
     18          
     19          #if UART1_PROTOCOL_RESOLVER
     20          	#define UART1_RPQUEUE_SIZE		1 //接收协议缓冲区（存储多条协议） 

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     21          	Protocol_Resolver_T _UART1_Resolver;
   \                     _UART1_Resolver:
   \   000000                DS 33
   \   000021                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     22          	PROTOCOL_INFO_T _UART1_Protocol_QueueBuf[UART1_RPQUEUE_SIZE] = {0}; 
   \                     _UART1_Protocol_QueueBuf:
   \   000000                DS 19
   \   000013                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_I, align 1, keep-with-next
     23          	Protocol_Resolver_T *UART1_Resolver = &_UART1_Resolver;
   \                     UART1_Resolver:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for UART1_Resolver>`
   \   000002                REQUIRE __INIT_XDATA_I
     24          #endif
     25          #if UART2_PROTOCOL_RESOLVER
     26          	#define UART2_RPQUEUE_SIZE		30 //接收协议缓冲区（存储多条协议） 
     27          	Protocol_Resolver_T _UART2_Resolver;
     28          	PROTOCOL_INFO_T _UART2_Protocol_QueueBuf[UART2_RPQUEUE_SIZE] = {0}; 
     29          	Protocol_Resolver_T *UART2_Resolver = &_UART2_Resolver;
     30          #endif
     31          #if UART3_PROTOCOL_RESOLVER
     32          	#define UART3_RPQUEUE_SIZE		30 //接收协议缓冲区（存储多条协议） 
     33          	Protocol_Resolver_T _UART3_Resolver;
     34          	PROTOCOL_INFO_T _UART3_Protocol_QueueBuf[UART3_RPQUEUE_SIZE] = {0}; 
     35          	Protocol_Resolver_T *UART3_Resolver = &_UART3_Resolver;
     36          #endif
     37          #if UART4_PROTOCOL_RESOLVER
     38          	#define UART4_RPQUEUE_SIZE		30 //接收协议缓冲区（存储多条协议） 
     39          	Protocol_Resolver_T _UART4_Resolver;
     40          	PROTOCOL_INFO_T _UART4_Protocol_QueueBuf[UART4_RPQUEUE_SIZE] = {0}; 
     41          	Protocol_Resolver_T *UART1_Resolver = &_UART4_Resolver;
     42          #endif
     43          //-----------------------------------------------------  
     44          //###################################对内函数区###################################
     45          /****************************************************
     46          	函数名:	clean_recv_buf
     47          	功能:		清除协议栈正在写入的协议
     48          	作者:		liyao 2015年9月8日14:10:51
     49          ****************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     50          void _clean_recv_buf(Protocol_Resolver_T* pr){  
   \                     _clean_recv_buf:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
     51          	memset(&pr->pi, 0, sizeof(PROTOCOL_INFO_T)); 
   \   000009                ; Setup parameters for call to function memset
   \   000009   75..13       MOV     ?V0,#0x13
   \   00000C   75..00       MOV     ?V1,#0x0
   \   00000F   78..         MOV     R0,#?V0
   \   000011   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000014   7C00         MOV     R4,#0x0
   \   000016   7D00         MOV     R5,#0x0
   \   000018   EE           MOV     A,R6
   \   000019   2404         ADD     A,#0x4
   \   00001B   FA           MOV     R2,A
   \   00001C   E4           CLR     A
   \   00001D   3F           ADDC    A,R7
   \   00001E   FB           MOV     R3,A
   \   00001F   12....       LCALL   `??memset::?relay`   ; Banked call to: memset
   \   000022   7402         MOV     A,#0x2
   \   000024   12....       LCALL   ?DEALLOC_XSTACK8
     52          	pr->Recv_State = 0;
   \   000027   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   00002A   E4           CLR     A
   \   00002B   12....       LCALL   ?Subroutine3 & 0xFFFF
     53          	pr->cnt = 0;
   \                     ??CrossCallReturnLabel_0:
   \   00002E   E4           CLR     A
   \   00002F   F0           MOVX    @DPTR,A
     54          	pr->index = 0;
   \   000030   EE           MOV     A,R6
   \   000031   2418         ADD     A,#0x18
   \   000033   F582         MOV     DPL,A
   \   000035   E4           CLR     A
   \   000036   3F           ADDC    A,R7
   \   000037   F583         MOV     DPH,A
   \   000039   E4           CLR     A
   \   00003A   F0           MOVX    @DPTR,A
     55          	pr->Is_FE = 0;
   \   00003B   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   00003E   E4           CLR     A
   \   00003F   12....       LCALL   ?Subroutine7 & 0xFFFF
     56          	pr->CheckSum = 0;
   \                     ??CrossCallReturnLabel_12:
   \   000042   E4           CLR     A
   \   000043   F0           MOVX    @DPTR,A
   \   000044   A3           INC     DPTR
   \   000045                REQUIRE ?Subroutine0
   \   000045                ; // Fall through to label ?Subroutine0
     57          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   7F02         MOV     R7,#0x2
   \   000003   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   EE           MOV     A,R6
   \   000001   241A         ADD     A,#0x1a
   \   000003   F582         MOV     DPL,A
   \   000005   E4           CLR     A
   \   000006   3F           ADDC    A,R7
   \   000007   F583         MOV     DPH,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   EE           MOV     A,R6
   \   000001   2419         ADD     A,#0x19
   \   000003   F582         MOV     DPL,A
   \   000005   E4           CLR     A
   \   000006   3F           ADDC    A,R7
   \   000007   F583         MOV     DPH,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   EE           MOV     A,R6
   \   000001   241C         ADD     A,#0x1c
   \   000003   F582         MOV     DPL,A
   \   000005   E4           CLR     A
   \   000006   3F           ADDC    A,R7
   \   000007   F583         MOV     DPH,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   EE           MOV     A,R6
   \   000002   2417         ADD     A,#0x17
   \   000004   F582         MOV     DPL,A
   \   000006   E4           CLR     A
   \   000007   3F           ADDC    A,R7
   \   000008   F583         MOV     DPH,A
   \   00000A   22           RET
     58          
     59          /****************************************************
     60          	函数名:	_Fetch_Protocol
     61          	功能:		提取并执行已经缓存的协议
     62          	作者:		liyao 2016年9月8日10:54:34
     63          ****************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     64          void _Fetch_Protocol(Protocol_Resolver_T* pr){
   \                     _Fetch_Protocol:
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 19
   \   000005   74ED         MOV     A,#-0x13
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   \   00000E   8012         SJMP    ??_Fetch_Protocol_0
     65          	PROTOCOL_INFO_T pi;
     66          	while(Queue_Get(pr->Protocol_Queue,&pi) == 0){
     67          		if(pi.check != NULL){
     68          			if(pi.check(&pi) < 0){
     69          				Log.error("协议校验不通过\r\n");
     70          				break;
     71          			}
     72          		}
     73          		if(pi.handle != NULL){
     74          			pi.handle(&pi);
   \                     ??_Fetch_Protocol_1:
   \   000010                ; Setup parameters for indirect call
   \   000010   AA..         MOV     R2,?XSP + 0
   \   000012   AB..         MOV     R3,?XSP + 1
   \   000014   740F         MOV     A,#0xf
   \   000016   12....       LCALL   ?XSTACK_DISP0_8
   \                     ??_Fetch_Protocol_2:
   \   000019   A3           INC     DPTR
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   F583         MOV     DPH,A
   \   00001D   8882         MOV     DPL,R0
   \   00001F   12....       LCALL   ?CALL_IND
     75          		}else{
   \                     ??_Fetch_Protocol_0:
   \   000022                ; Setup parameters for call to function Queue_Get
   \   000022   AC..         MOV     R4,?XSP + 0
   \   000024   AD..         MOV     R5,?XSP + 1
   \   000026   8E82         MOV     DPL,R6
   \   000028   8F83         MOV     DPH,R7
   \   00002A   12....       LCALL   ??Subroutine28_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_45:
   \   00002D   12....       LCALL   `??Queue_Get::?relay`; Banked call to: Queue_Get
   \   000030   E9           MOV     A,R1
   \   000031   7031         JNZ     ??_Fetch_Protocol_3
   \   000033   7411         MOV     A,#0x11
   \   000035   12....       LCALL   ?XSTACK_DISP0_8
   \   000038   12....       LCALL   ??Subroutine26_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_37:
   \   00003B   602F         JZ      ??_Fetch_Protocol_4
   \   00003D                ; Setup parameters for indirect call
   \   00003D   AA..         MOV     R2,?XSP + 0
   \   00003F   AB..         MOV     R3,?XSP + 1
   \   000041   7411         MOV     A,#0x11
   \   000043   12....       LCALL   ?XSTACK_DISP0_8
   \   000046   A3           INC     DPTR
   \   000047   E0           MOVX    A,@DPTR
   \   000048   F583         MOV     DPH,A
   \   00004A   8882         MOV     DPL,R0
   \   00004C   12....       LCALL   ?CALL_IND
   \   00004F   E9           MOV     A,R1
   \   000050   C3           CLR     C
   \   000051   9400         SUBB    A,#0x0
   \   000053   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000055   65D0         XRL     A,PSW
   \   000057   33           RLC     A
   \   000058   5012         JNC     ??_Fetch_Protocol_4
   \   00005A                ; Setup parameters for indirect call
   \   00005A   7A..         MOV     R2,#`?<Constant "\\320\\255\\322\\351\\320\\243\\321\\351\\2` & 0xff
   \   00005C   7B..         MOV     R3,#(`?<Constant "\\320\\255\\322\\351\\320\\243\\321\\351\\2` >> 8) & 0xff
   \   00005E   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_53:
   \   000061   12....       LCALL   ?CALL_IND
     76          			Log.error("收到协议但是无处理函数\r\n");
     77          		}
     78          	}
     79          }
   \                     ??_Fetch_Protocol_3:
   \   000064   7413         MOV     A,#0x13
   \   000066   12....       LCALL   ?DEALLOC_XSTACK8
   \   000069   02....       LJMP    ?Subroutine1 & 0xFFFF
   \                     ??_Fetch_Protocol_4:
   \   00006C   740F         MOV     A,#0xf
   \   00006E   12....       LCALL   ?XSTACK_DISP0_8
   \   000071   12....       LCALL   ??Subroutine26_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   000074   709A         JNZ     ??_Fetch_Protocol_1
   \   000076                ; Setup parameters for indirect call
   \   000076   7A..         MOV     R2,#`?<Constant "\\312\\325\\265\\275\\320\\255\\322\\351\\2` & 0xff
   \   000078   7B..         MOV     R3,#(`?<Constant "\\312\\325\\265\\275\\320\\255\\322\\351\\2` >> 8) & 0xff
   \   00007A   90....       MOV     DPTR,#Log + 2
   \   00007D   E0           MOVX    A,@DPTR
   \   00007E   F8           MOV     R0,A
   \   00007F   8098         SJMP    ??_Fetch_Protocol_2

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine26_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   E8           MOV     A,R0
   \   000006   49           ORL     A,R1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine28_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FB           MOV     R3,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   90....       MOV     DPTR,#Log + 2
   \   000003                REQUIRE ??Subroutine29_0
   \   000003                ; // Fall through to label ??Subroutine29_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine29_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F583         MOV     DPH,A
   \   000006   8882         MOV     DPL,R0
   \   000008   22           RET
     80           
     81          /****************************************************
     82          	函数名:	Protocol_Put
     83          	功能:		接收协议数据并解析封装
     84          	参数:		协议数据
     85          	注意: 	通过protocol_flag标志位标示是否解析出新的协议
     86          	作者:		liyao 2015年9月8日14:10:51
     87          ****************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     88          int8_t _Protocol_Put(Protocol_Resolver_T* pr,uint8_t* datas,uint8_t len){
   \                     _Protocol_Put:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000   74F3         MOV     A,#-0xd
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 13
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   8C..         MOV     ?V2,R4
   \   00000B   8D..         MOV     ?V3,R5
   \   00000D   89..         MOV     ?V1,R1
     89          	uint8_t i,j, data; 
     90          	uint16_t src_board_action;
     91          	
     92          	for(i = 0; i < len; i++){
   \   00000F   75..00       MOV     ?V0,#0x0
   \   000012   02....       LJMP    ??_Protocol_Put_0 & 0xFFFF
     93          		data = datas[i];
     94                          if(pr->pi.head != 0xFD && data != 0xFD)
   \                     ??_Protocol_Put_1:
   \   000015   74FD         MOV     A,#-0x3
   \   000017   68           XRL     A,R0
   \   000018   7016         JNZ     ??_Protocol_Put_2
     95                            continue;
     96          		if(pr->pi.head == 0xFD && data == 0xFD){ //协议被切断抛弃
     97          			_clean_recv_buf(pr);
   \   00001A                ; Setup parameters for call to function _clean_recv_buf
   \   00001A   EE           MOV     A,R6
   \   00001B   FA           MOV     R2,A
   \   00001C   EF           MOV     A,R7
   \   00001D   FB           MOV     R3,A
   \   00001E   12....       LCALL   `??_clean_recv_buf::?relay`; Banked call to: _clean_recv_buf
     98          			Log.error("协议中途出现0xFD\r\n");
   \   000021                ; Setup parameters for indirect call
   \   000021   7A..         MOV     R2,#`?<Constant "\\320\\255\\322\\351\\326\\320\\315\\276\\2` & 0xff
   \   000023   7B..         MOV     R3,#(`?<Constant "\\320\\255\\322\\351\\326\\320\\315\\276\\2` >> 8) & 0xff
   \   000025   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_54:
   \   000028   12....       LCALL   ?CALL_IND
     99          			return -1;
   \   00002B   79FF         MOV     R1,#-0x1
   \   00002D   02....       LJMP    ??_Protocol_Put_3 & 0xFFFF
    100          		}
    101          		if(data == 0xFE){//处理转义
   \                     ??_Protocol_Put_2:
   \   000030   74FE         MOV     A,#-0x2
   \   000032   68           XRL     A,R0
   \   000033   6003         JZ      $+5
   \   000035   02....       LJMP    ??_Protocol_Put_4 & 0xFFFF
    102          			pr->Is_FE = 1;
   \   000038   12....       LCALL   ?Subroutine6 & 0xFFFF
    103          			continue;
    104          		}else if(pr->Is_FE){
   \                     ??CrossCallReturnLabel_10:
   \   00003B   7401         MOV     A,#0x1
   \   00003D   02....       LJMP    ??_Protocol_Put_5 & 0xFFFF
    105          			switch(data){
    106          				case 0x7D: data = 0xFD;break;
    107          				case 0x78: data = 0xF8;break;
   \                     ??_Protocol_Put_6:
   \   000040   78F8         MOV     R0,#-0x8
   \   000042   8002         SJMP    ??_Protocol_Put_7
    108          				case 0x7E: data = 0xFE;break;
   \                     ??_Protocol_Put_8:
   \   000044   78FE         MOV     R0,#-0x2
    109          			} 
    110          			pr->Is_FE = 0;
   \                     ??_Protocol_Put_7:
   \   000046   E4           CLR     A
   \   000047   F0           MOVX    @DPTR,A
    111          		}
    112          			
    113          		if(pr->Recv_State > 0 && pr->Recv_State < 7)//排除帧头帧尾计算校验和
   \                     ??_Protocol_Put_9:
   \   000048   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   00004B   6044         JZ      ??_Protocol_Put_10
   \   00004D   C3           CLR     C
   \   00004E   9407         SUBB    A,#0x7
   \   000050   500D         JNC     ??_Protocol_Put_11
    114          			pr->CheckSum += data; 
   \   000052   E8           MOV     A,R0
   \   000053   FA           MOV     R2,A
   \   000054   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   000057   E0           MOVX    A,@DPTR
   \   000058   2A           ADD     A,R2
   \   000059   F0           MOVX    @DPTR,A
   \   00005A   A3           INC     DPTR
   \   00005B   E0           MOVX    A,@DPTR
   \   00005C   3400         ADDC    A,#0x0
   \   00005E   F0           MOVX    @DPTR,A
    115          	//协议解析状态机
    116          		switch(pr->Recv_State){
   \                     ??_Protocol_Put_11:
   \   00005F   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   000062   602D         JZ      ??_Protocol_Put_10
   \   000064   14           DEC     A
   \   000065   603A         JZ      ??_Protocol_Put_12
   \   000067   14           DEC     A
   \   000068   603F         JZ      ??_Protocol_Put_13
   \   00006A   14           DEC     A
   \   00006B   7003         JNZ     $+5
   \   00006D   02....       LJMP    ??_Protocol_Put_14 & 0xFFFF
   \   000070   14           DEC     A
   \   000071   7003         JNZ     $+5
   \   000073   02....       LJMP    ??_Protocol_Put_15 & 0xFFFF
   \   000076   14           DEC     A
   \   000077   7003         JNZ     $+5
   \   000079   02....       LJMP    ??_Protocol_Put_16 & 0xFFFF
   \   00007C   14           DEC     A
   \   00007D   7003         JNZ     $+5
   \   00007F   02....       LJMP    ??_Protocol_Put_17 & 0xFFFF
   \   000082   14           DEC     A
   \   000083   7003         JNZ     $+5
   \   000085   02....       LJMP    ??_Protocol_Put_18 & 0xFFFF
   \   000088   14           DEC     A
   \   000089   7003         JNZ     $+5
   \   00008B   02....       LJMP    ??_Protocol_Put_19 & 0xFFFF
   \   00008E   02....       LJMP    ??_Protocol_Put_20 & 0xFFFF
    117          			case 0:	//处理帧头
    118          						pr->pi.head = data;
   \                     ??_Protocol_Put_10:
   \   000091   E8           MOV     A,R0
   \   000092   8E82         MOV     DPL,R6
   \   000094   8F83         MOV     DPH,R7
   \                     ??_Protocol_Put_21:
   \   000096   A3           INC     DPTR
   \   000097   A3           INC     DPTR
   \   000098   A3           INC     DPTR
   \   000099   A3           INC     DPTR
   \   00009A   F0           MOVX    @DPTR,A
    119          						pr->Recv_State++; 
    120          						break;
    121          			case 1:	//处理预留位
    122          						pr->pi.standby1 = data;
    123          						pr->Recv_State++; 
    124          						break;
    125          			case 2: //处理帧长(从ID到数据位最后一个)
    126          						pr->Recv_State++; 
    127          						pr->pi.plen = data;
    128          						if(data < 4){
    129          							_clean_recv_buf(pr);
    130          							Log.error("处理帧长错误\r\n");
    131          							return -2;
    132          						}
    133          						else
    134          							pr->cnt = pr->pi.paralen = data - 3;//计算结果为参数个数
    135          							pr->pi.alen = data + 5;//计算结果为协议总长度包括FD、F8
    136          						break;
    137          			case 3: //处理目标板
    138          						pr->pi.module = data;
    139          						pr->Recv_State++; 
    140          						break;
    141          			case 4: //处理编号
    142          						pr->pi.serial = data;
    143          						pr->Recv_State++; 
    144          						break;
    145          			case 5: //处理指令码(ACTION)
    146          						pr->pi.action = data;
    147          						pr->Recv_State++; 
    148          						break;
    149          			case 6: //处理参数 
    150          						((uint8_t *)(&pr->pi.protocol))[pr->index++] = data;  
    151          						if(--pr->cnt == 0)
    152          							pr->Recv_State++;
    153          						break;
    154          			case 7: //处理校验和校验  
    155          						pr->pi.checksum = data;
    156          						/*校验和暂时关闭*/
    157          						if(((uint8_t)pr->CheckSum & 0xff) != data){
    158                                                            printf("计算结果:%x\r\n",(uint8_t)pr->CheckSum);
    159                                                                  printf("%x,%x,%x,%x,%x,%x,%x,%x,%x,%x\r\n",
    160                                                                         pr->pi.head,
    161                                                                         pr->pi.standby1,
    162                                                                         pr->pi.plen,
    163                                                                         pr->pi.module,
    164                                                                         pr->pi.serial,
    165                                                                         pr->pi.action,
    166                                                                         pr->pi.protocol.AddrReport_P.para1,
    167                                                                         pr->pi.protocol.AddrReport_P.para2,
    168                                                                         pr->pi.checksum,
    169                                                                         pr->pi.tail);
    170          							_clean_recv_buf(pr);
    171          							Log.error("协议校验和错误\r\n");
    172          							return -3;
    173          						}else{ 
    174          							pr->Recv_State++; 
   \                     ??_Protocol_Put_22:
   \   00009B   12....       LCALL   ?Subroutine4 & 0xFFFF
    175          						} 
   \                     ??CrossCallReturnLabel_5:
   \   00009E   04           INC     A
   \   00009F   804F         SJMP    ??_Protocol_Put_5
   \                     ??_Protocol_Put_12:
   \   0000A1   E8           MOV     A,R0
   \   0000A2   8E82         MOV     DPL,R6
   \   0000A4   8F83         MOV     DPH,R7
   \                     ??_Protocol_Put_23:
   \   0000A6   A3           INC     DPTR
   \   0000A7   80ED         SJMP    ??_Protocol_Put_21
   \                     ??_Protocol_Put_13:
   \   0000A9   E0           MOVX    A,@DPTR
   \   0000AA   04           INC     A
   \   0000AB   F0           MOVX    @DPTR,A
   \   0000AC   E8           MOV     A,R0
   \   0000AD   8E82         MOV     DPL,R6
   \   0000AF   8F83         MOV     DPH,R7
   \   0000B1   A3           INC     DPTR
   \   0000B2   A3           INC     DPTR
   \   0000B3   A3           INC     DPTR
   \   0000B4   A3           INC     DPTR
   \   0000B5   A3           INC     DPTR
   \   0000B6   A3           INC     DPTR
   \   0000B7   F0           MOVX    @DPTR,A
   \   0000B8   C3           CLR     C
   \   0000B9   9404         SUBB    A,#0x4
   \   0000BB   5016         JNC     ??_Protocol_Put_24
   \   0000BD                ; Setup parameters for call to function _clean_recv_buf
   \   0000BD   EE           MOV     A,R6
   \   0000BE   FA           MOV     R2,A
   \   0000BF   EF           MOV     A,R7
   \   0000C0   FB           MOV     R3,A
   \   0000C1   12....       LCALL   `??_clean_recv_buf::?relay`; Banked call to: _clean_recv_buf
   \   0000C4                ; Setup parameters for indirect call
   \   0000C4   7A..         MOV     R2,#`?<Constant "\\264\\246\\300\\355\\326\\241\\263\\244\\2` & 0xff
   \   0000C6   7B..         MOV     R3,#(`?<Constant "\\264\\246\\300\\355\\326\\241\\263\\244\\2` >> 8) & 0xff
   \   0000C8   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_55:
   \   0000CB   12....       LCALL   ?CALL_IND
   \   0000CE   79FE         MOV     R1,#-0x2
   \   0000D0   02....       LJMP    ??_Protocol_Put_3 & 0xFFFF
   \                     ??_Protocol_Put_24:
   \   0000D3   74FD         MOV     A,#-0x3
   \   0000D5   28           ADD     A,R0
   \   0000D6   F9           MOV     R1,A
   \   0000D7   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   0000DA   E9           MOV     A,R1
   \   0000DB   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   0000DE   E9           MOV     A,R1
   \   0000DF   F0           MOVX    @DPTR,A
   \   0000E0   7405         MOV     A,#0x5
   \   0000E2   28           ADD     A,R0
   \   0000E3   C0E0         PUSH    A
   \   0000E5   EE           MOV     A,R6
   \   0000E6   2410         ADD     A,#0x10
   \   0000E8   F582         MOV     DPL,A
   \   0000EA   E4           CLR     A
   \   0000EB   3F           ADDC    A,R7
   \   0000EC   F583         MOV     DPH,A
   \   0000EE   D0E0         POP     A
   \                     ??_Protocol_Put_5:
   \   0000F0   F0           MOVX    @DPTR,A
   \   0000F1   02....       LJMP    ??_Protocol_Put_20 & 0xFFFF
   \                     ??_Protocol_Put_14:
   \   0000F4   E8           MOV     A,R0
   \   0000F5   8E82         MOV     DPL,R6
   \   0000F7   8F83         MOV     DPH,R7
   \                     ??_Protocol_Put_25:
   \   0000F9   A3           INC     DPTR
   \   0000FA   A3           INC     DPTR
   \   0000FB   80A9         SJMP    ??_Protocol_Put_23
   \                     ??_Protocol_Put_15:
   \   0000FD   E8           MOV     A,R0
   \   0000FE   8E82         MOV     DPL,R6
   \   000100   8F83         MOV     DPH,R7
   \                     ??_Protocol_Put_26:
   \   000102   A3           INC     DPTR
   \   000103   80F4         SJMP    ??_Protocol_Put_25
   \                     ??_Protocol_Put_16:
   \   000105   E8           MOV     A,R0
   \   000106   8E82         MOV     DPL,R6
   \   000108   8F83         MOV     DPH,R7
   \   00010A   A3           INC     DPTR
   \   00010B   80F5         SJMP    ??_Protocol_Put_26
   \                     ??_Protocol_Put_17:
   \   00010D   EE           MOV     A,R6
   \   00010E   2418         ADD     A,#0x18
   \   000110   FA           MOV     R2,A
   \   000111   E4           CLR     A
   \   000112   3F           ADDC    A,R7
   \   000113   FB           MOV     R3,A
   \   000114   E8           MOV     A,R0
   \   000115   C0E0         PUSH    A
   \   000117   8A82         MOV     DPL,R2
   \   000119   8B83         MOV     DPH,R3
   \   00011B   E0           MOVX    A,@DPTR
   \   00011C   F8           MOV     R0,A
   \   00011D   EE           MOV     A,R6
   \   00011E   28           ADD     A,R0
   \   00011F   F582         MOV     DPL,A
   \   000121   E4           CLR     A
   \   000122   3F           ADDC    A,R7
   \   000123   F583         MOV     DPH,A
   \   000125   A3           INC     DPTR
   \   000126   A3           INC     DPTR
   \   000127   A3           INC     DPTR
   \   000128   A3           INC     DPTR
   \   000129   A3           INC     DPTR
   \   00012A   A3           INC     DPTR
   \   00012B   A3           INC     DPTR
   \   00012C   A3           INC     DPTR
   \   00012D   A3           INC     DPTR
   \   00012E   A3           INC     DPTR
   \   00012F   D0E0         POP     A
   \   000131   F0           MOVX    @DPTR,A
   \   000132   8A82         MOV     DPL,R2
   \   000134   8B83         MOV     DPH,R3
   \   000136   E0           MOVX    A,@DPTR
   \   000137   04           INC     A
   \   000138   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   00013B   E0           MOVX    A,@DPTR
   \   00013C   14           DEC     A
   \   00013D   F0           MOVX    @DPTR,A
   \   00013E   6003         JZ      $+5
   \   000140   02....       LJMP    ??_Protocol_Put_20 & 0xFFFF
   \   000143   02....       LJMP    ??_Protocol_Put_22 & 0xFFFF
   \                     ??_Protocol_Put_18:
   \   000146   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   000149   E8           MOV     A,R0
   \   00014A   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   00014D   E0           MOVX    A,@DPTR
   \   00014E   68           XRL     A,R0
   \   00014F   7003         JNZ     $+5
   \   000151   02....       LJMP    ??_Protocol_Put_22 & 0xFFFF
   \   000154                ; Setup parameters for call to function printf
   \   000154   E0           MOVX    A,@DPTR
   \   000155   F5..         MOV     ?V2,A
   \   000157   75..00       MOV     ?V3,#0x0
   \   00015A   78..         MOV     R0,#?V2
   \   00015C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00015F   7A..         MOV     R2,#`?<Constant "\\274\\306\\313\\343\\275\\341\\271\\373:%` & 0xff
   \   000161   7B..         MOV     R3,#(`?<Constant "\\274\\306\\313\\343\\275\\341\\271\\373:%` >> 8) & 0xff
   \   000163   12....       LCALL   `??printf::?relay`   ; Banked call to: printf
   \   000166   7402         MOV     A,#0x2
   \   000168   12....       LCALL   ?DEALLOC_XSTACK8
   \   00016B                ; Setup parameters for call to function printf
   \   00016B   EE           MOV     A,R6
   \   00016C   240E         ADD     A,#0xe
   \   00016E   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   000171   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000174   EE           MOV     A,R6
   \   000175   240D         ADD     A,#0xd
   \   000177   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   00017A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00017D   EE           MOV     A,R6
   \   00017E   240B         ADD     A,#0xb
   \   000180   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   000183   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000186   8E82         MOV     DPL,R6
   \   000188   8F83         MOV     DPH,R7
   \   00018A   A3           INC     DPTR
   \   00018B   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_35:
   \   00018E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000191   8E82         MOV     DPL,R6
   \   000193   8F83         MOV     DPH,R7
   \   000195   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_36:
   \   000198   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00019B   8E82         MOV     DPL,R6
   \   00019D   8F83         MOV     DPH,R7
   \   00019F   12....       LCALL   ??Subroutine21_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   0001A2   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001A5   8E82         MOV     DPL,R6
   \   0001A7   8F83         MOV     DPH,R7
   \   0001A9   12....       LCALL   ??Subroutine22_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   0001AC   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001AF   8E82         MOV     DPL,R6
   \   0001B1   8F83         MOV     DPH,R7
   \   0001B3   12....       LCALL   ??Subroutine23_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   0001B6   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001B9   8E82         MOV     DPL,R6
   \   0001BB   8F83         MOV     DPH,R7
   \   0001BD   12....       LCALL   ??Subroutine24_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   0001C0   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001C3   8E82         MOV     DPL,R6
   \   0001C5   8F83         MOV     DPH,R7
   \   0001C7   12....       LCALL   ??Subroutine25_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   0001CA   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001CD   7A..         MOV     R2,#`?<Constant "%x,%x,%x,%x,%x,%x,%x,...">` & 0xff
   \   0001CF   7B..         MOV     R3,#(`?<Constant "%x,%x,%x,%x,%x,%x,%x,...">` >> 8) & 0xff
   \   0001D1   12....       LCALL   `??printf::?relay`   ; Banked call to: printf
   \   0001D4   7414         MOV     A,#0x14
   \   0001D6   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001D9                ; Setup parameters for call to function _clean_recv_buf
   \   0001D9   EE           MOV     A,R6
   \   0001DA   FA           MOV     R2,A
   \   0001DB   EF           MOV     A,R7
   \   0001DC   FB           MOV     R3,A
   \   0001DD   12....       LCALL   `??_clean_recv_buf::?relay`; Banked call to: _clean_recv_buf
   \   0001E0                ; Setup parameters for indirect call
   \   0001E0   7A..         MOV     R2,#`?<Constant "\\320\\255\\322\\351\\320\\243\\321\\351\\2_1` & 0xff
   \   0001E2   7B..         MOV     R3,#(`?<Constant "\\320\\255\\322\\351\\320\\243\\321\\351\\2_1` >> 8) & 0xff
   \   0001E4   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_56:
   \   0001E7   12....       LCALL   ?CALL_IND
   \   0001EA   79FD         MOV     R1,#-0x3
   \   0001EC   02....       LJMP    ??_Protocol_Put_3 & 0xFFFF
    176          						break;
    177          			case 8: //处理帧尾 帧类型和长度进行匹配 
    178          						if(data != 0xF8){
   \                     ??_Protocol_Put_19:
   \   0001EF   74F8         MOV     A,#-0x8
   \   0001F1   68           XRL     A,R0
   \   0001F2   6016         JZ      ??_Protocol_Put_27
    179          							_clean_recv_buf(pr);
   \   0001F4                ; Setup parameters for call to function _clean_recv_buf
   \   0001F4   EE           MOV     A,R6
   \   0001F5   FA           MOV     R2,A
   \   0001F6   EF           MOV     A,R7
   \   0001F7   FB           MOV     R3,A
   \   0001F8   12....       LCALL   `??_clean_recv_buf::?relay`; Banked call to: _clean_recv_buf
    180          							Log.error("帧尾位置非0xF8错误\r\n");
   \   0001FB                ; Setup parameters for indirect call
   \   0001FB   7A..         MOV     R2,#`?<Constant "\\326\\241\\316\\262\\316\\273\\326\\303\\2` & 0xff
   \   0001FD   7B..         MOV     R3,#(`?<Constant "\\326\\241\\316\\262\\316\\273\\326\\303\\2` >> 8) & 0xff
   \   0001FF   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_57:
   \   000202   12....       LCALL   ?CALL_IND
    181          							return -4;
   \   000205   79FC         MOV     R1,#-0x4
   \   000207   02....       LJMP    ??_Protocol_Put_3 & 0xFFFF
    182          						}
    183          						pr->pi.tail = data;
   \                     ??_Protocol_Put_27:
   \   00020A   EE           MOV     A,R6
   \   00020B   240E         ADD     A,#0xe
   \   00020D   F582         MOV     DPL,A
   \   00020F   E4           CLR     A
   \   000210   3F           ADDC    A,R7
   \   000211   F583         MOV     DPH,A
   \   000213   74F8         MOV     A,#-0x8
   \   000215   F0           MOVX    @DPTR,A
    184          						src_board_action = pr->pi.module << 8 | pr->pi.action; 
   \   000216   8E82         MOV     DPL,R6
   \   000218   8F83         MOV     DPH,R7
   \   00021A   A3           INC     DPTR
   \   00021B   A3           INC     DPTR
   \   00021C   A3           INC     DPTR
   \   00021D   A3           INC     DPTR
   \   00021E   A3           INC     DPTR
   \   00021F   A3           INC     DPTR
   \   000220   A3           INC     DPTR
   \   000221   E0           MOVX    A,@DPTR
   \   000222   F9           MOV     R1,A
   \   000223   8E82         MOV     DPL,R6
   \   000225   8F83         MOV     DPH,R7
   \   000227   A3           INC     DPTR
   \   000228   A3           INC     DPTR
   \   000229   A3           INC     DPTR
   \   00022A   A3           INC     DPTR
   \   00022B   A3           INC     DPTR
   \   00022C   A3           INC     DPTR
   \   00022D   A3           INC     DPTR
   \   00022E   A3           INC     DPTR
   \   00022F   A3           INC     DPTR
   \   000230   E0           MOVX    A,@DPTR
   \   000231   FC           MOV     R4,A
   \   000232   E9           MOV     A,R1
   \   000233   FD           MOV     R5,A
    185          						for(j = 0; j < Protocol_Size; j++){
   \   000234   7A00         MOV     R2,#0x0
   \   000236   8001         SJMP    ??_Protocol_Put_28
   \                     ??_Protocol_Put_29:
   \   000238   0A           INC     R2
   \                     ??_Protocol_Put_28:
   \   000239   90....       MOV     DPTR,#Protocol_Size
   \   00023C   E0           MOVX    A,@DPTR
   \   00023D   F8           MOV     R0,A
   \   00023E   EA           MOV     A,R2
   \   00023F   C3           CLR     C
   \   000240   98           SUBB    A,R0
   \   000241   4003         JC      $+5
   \   000243   02....       LJMP    ??_Protocol_Put_30 & 0xFFFF
    186          							if(	src_board_action ==  Desc_P_Arr[j].ModuleAction &&//目标板匹配,动作匹配 
    187          									pr->pi.paralen == Desc_P_Arr[j].ProtocolSize)//帧长度匹配
   \   000246   EA           MOV     A,R2
   \   000247   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   00024A   6C           XRL     A,R4
   \   00024B   7003         JNZ     ??_Protocol_Put_31
   \   00024D   A3           INC     DPTR
   \   00024E   E0           MOVX    A,@DPTR
   \   00024F   6D           XRL     A,R5
   \                     ??_Protocol_Put_31:
   \   000250   70E6         JNZ     ??_Protocol_Put_29
   \   000252   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   000255   E0           MOVX    A,@DPTR
   \   000256   F5..         MOV     ?V4,A
   \   000258   74..         MOV     A,#(Desc_P_Arr + 4) & 0xff
   \   00025A   28           ADD     A,R0
   \   00025B   F582         MOV     DPL,A
   \   00025D   74..         MOV     A,#((Desc_P_Arr + 4) >> 8) & 0xff
   \   00025F   39           ADDC    A,R1
   \   000260   F583         MOV     DPH,A
   \   000262   E0           MOVX    A,@DPTR
   \   000263   65..         XRL     A,?V4
   \   000265   70D1         JNZ     ??_Protocol_Put_29
    188          							{
    189          								pr->pi.handle = Desc_P_Arr[j].handle;
   \   000267   74..         MOV     A,#Desc_P_Arr & 0xff
   \   000269   28           ADD     A,R0
   \   00026A   F8           MOV     R0,A
   \   00026B   74..         MOV     A,#(Desc_P_Arr >> 8) & 0xff
   \   00026D   39           ADDC    A,R1
   \   00026E   F9           MOV     R1,A
   \   00026F   8882         MOV     DPL,R0
   \   000271   8983         MOV     DPH,R1
   \   000273   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_47:
   \   000276   EE           MOV     A,R6
   \   000277   2413         ADD     A,#0x13
   \   000279   12....       LCALL   ?Subroutine9 & 0xFFFF
    190          								pr->pi.check = Desc_P_Arr[j].check;
   \                     ??CrossCallReturnLabel_16:
   \   00027C   8882         MOV     DPL,R0
   \   00027E   8983         MOV     DPH,R1
   \   000280   A3           INC     DPTR
   \   000281   A3           INC     DPTR
   \   000282   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_48:
   \   000285   EE           MOV     A,R6
   \   000286   2415         ADD     A,#0x15
   \   000288   12....       LCALL   ?Subroutine9 & 0xFFFF
    191          								pr->pi.Desc_T = &Desc_P_Arr[j];
   \                     ??CrossCallReturnLabel_17:
   \   00028B   EE           MOV     A,R6
   \   00028C   2411         ADD     A,#0x11
   \   00028E   F582         MOV     DPL,A
   \   000290   E4           CLR     A
   \   000291   3F           ADDC    A,R7
   \   000292   F583         MOV     DPH,A
   \   000294   E8           MOV     A,R0
   \   000295   F0           MOVX    @DPTR,A
   \   000296   A3           INC     DPTR
   \   000297   E9           MOV     A,R1
   \   000298   F0           MOVX    @DPTR,A
    192          								break;
    193          							}
    194          						}
    195          						if(j == Protocol_Size){//校验不通过
    196          							_clean_recv_buf(pr);
    197          							Log.error("现有协议库无匹配当前协议\r\n");
    198          							return -5;
    199          						}else{
    200          							//Queue_Put(pr->Protocol_Queue, &pr->pi);//将协议信息放入协议缓冲队列
    201                                                                  pr->pi.handle(&pr->pi);
   \                     ??_Protocol_Put_32:
   \   000299                ; Setup parameters for indirect call
   \   000299   EE           MOV     A,R6
   \   00029A   2404         ADD     A,#0x4
   \   00029C   FA           MOV     R2,A
   \   00029D   E4           CLR     A
   \   00029E   3F           ADDC    A,R7
   \   00029F   FB           MOV     R3,A
   \   0002A0   EE           MOV     A,R6
   \   0002A1   2413         ADD     A,#0x13
   \   0002A3   F582         MOV     DPL,A
   \   0002A5   E4           CLR     A
   \   0002A6   3F           ADDC    A,R7
   \   0002A7   F583         MOV     DPH,A
   \   0002A9   12....       LCALL   ??Subroutine29_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_49:
   \   0002AC   12....       LCALL   ?CALL_IND
    202          							_clean_recv_buf(pr); 
   \   0002AF                ; Setup parameters for call to function _clean_recv_buf
   \   0002AF   EE           MOV     A,R6
   \   0002B0   FA           MOV     R2,A
   \   0002B1   EF           MOV     A,R7
   \   0002B2   FB           MOV     R3,A
   \   0002B3   12....       LCALL   `??_clean_recv_buf::?relay`; Banked call to: _clean_recv_buf
    203          						}
    204          						break;
   \                     ??_Protocol_Put_20:
   \   0002B6   05..         INC     ?V0
   \                     ??_Protocol_Put_0:
   \   0002B8   E5..         MOV     A,?V0
   \   0002BA   C3           CLR     C
   \   0002BB   95..         SUBB    A,?V1
   \   0002BD   505F         JNC     ??_Protocol_Put_33
   \   0002BF   A8..         MOV     R0,?V0
   \   0002C1   E5..         MOV     A,?V2
   \   0002C3   28           ADD     A,R0
   \   0002C4   F582         MOV     DPL,A
   \   0002C6   E4           CLR     A
   \   0002C7   35..         ADDC    A,?V3
   \   0002C9   F583         MOV     DPH,A
   \   0002CB   E0           MOVX    A,@DPTR
   \   0002CC   F8           MOV     R0,A
   \   0002CD   8E82         MOV     DPL,R6
   \   0002CF   8F83         MOV     DPH,R7
   \   0002D1   A3           INC     DPTR
   \   0002D2   A3           INC     DPTR
   \   0002D3   A3           INC     DPTR
   \   0002D4   A3           INC     DPTR
   \   0002D5   E0           MOVX    A,@DPTR
   \   0002D6   64FD         XRL     A,#0xfd
   \   0002D8   7003         JNZ     $+5
   \   0002DA   02....       LJMP    ??_Protocol_Put_1 & 0xFFFF
   \   0002DD   74FD         MOV     A,#-0x3
   \   0002DF   68           XRL     A,R0
   \   0002E0   70D4         JNZ     ??_Protocol_Put_20
   \                     ??_Protocol_Put_4:
   \   0002E2   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   0002E5   E0           MOVX    A,@DPTR
   \   0002E6   7003         JNZ     $+5
   \   0002E8   02....       LJMP    ??_Protocol_Put_9 & 0xFFFF
   \   0002EB   E8           MOV     A,R0
   \   0002EC   2488         ADD     A,#-0x78
   \   0002EE   7003         JNZ     $+5
   \   0002F0   02....       LJMP    ??_Protocol_Put_6 & 0xFFFF
   \   0002F3   24FB         ADD     A,#-0x5
   \   0002F5   6009         JZ      ??_Protocol_Put_34
   \   0002F7   14           DEC     A
   \   0002F8   7003         JNZ     $+5
   \   0002FA   02....       LJMP    ??_Protocol_Put_8 & 0xFFFF
   \   0002FD   02....       LJMP    ??_Protocol_Put_7 & 0xFFFF
   \                     ??_Protocol_Put_34:
   \   000300   78FD         MOV     R0,#-0x3
   \   000302   02....       LJMP    ??_Protocol_Put_7 & 0xFFFF
   \                     ??_Protocol_Put_30:
   \   000305   E0           MOVX    A,@DPTR
   \   000306   6A           XRL     A,R2
   \   000307   7090         JNZ     ??_Protocol_Put_32
   \   000309                ; Setup parameters for call to function _clean_recv_buf
   \   000309   EE           MOV     A,R6
   \   00030A   FA           MOV     R2,A
   \   00030B   EF           MOV     A,R7
   \   00030C   FB           MOV     R3,A
   \   00030D   12....       LCALL   `??_clean_recv_buf::?relay`; Banked call to: _clean_recv_buf
   \   000310                ; Setup parameters for indirect call
   \   000310   7A..         MOV     R2,#`?<Constant "\\317\\326\\323\\320\\320\\255\\322\\351\\2` & 0xff
   \   000312   7B..         MOV     R3,#(`?<Constant "\\317\\326\\323\\320\\320\\255\\322\\351\\2` >> 8) & 0xff
   \   000314   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   000317   12....       LCALL   ?CALL_IND
   \   00031A   79FB         MOV     R1,#-0x5
   \   00031C   8002         SJMP    ??_Protocol_Put_3
    205          		}
    206          	}; 
    207          	return 0;
   \                     ??_Protocol_Put_33:
   \   00031E   7900         MOV     R1,#0x0
   \                     ??_Protocol_Put_3:
   \   000320   7F05         MOV     R7,#0x5
   \   000322   02....       LJMP    ?BANKED_LEAVE_XDATA
    208          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   EE           MOV     A,R6
   \   000001   240F         ADD     A,#0xf
   \   000003   F582         MOV     DPL,A
   \   000005   E4           CLR     A
   \   000006   3F           ADDC    A,R7
   \   000007   F583         MOV     DPH,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine21_0
   \   000001                ; // Fall through to label ??Subroutine21_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine21_0:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine22_0
   \   000001                ; // Fall through to label ??Subroutine22_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine22_0:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine23_0
   \   000001                ; // Fall through to label ??Subroutine23_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine23_0:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine24_0
   \   000001                ; // Fall through to label ??Subroutine24_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine24_0:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine25_0
   \   000001                ; // Fall through to label ??Subroutine25_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine25_0:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V2,A
   \   000007   78..         MOV     R0,#?V2
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   F582         MOV     DPL,A
   \   000002   E4           CLR     A
   \   000003   3F           ADDC    A,R7
   \   000004   F583         MOV     DPH,A
   \   000006   EA           MOV     A,R2
   \   000007   F0           MOVX    @DPTR,A
   \   000008   A3           INC     DPTR
   \   000009   EB           MOV     A,R3
   \   00000A   F0           MOVX    @DPTR,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   F582         MOV     DPL,A
   \   000002   E4           CLR     A
   \   000003   3F           ADDC    A,R7
   \   000004   F583         MOV     DPH,A
   \   000006   E0           MOVX    A,@DPTR
   \   000007   F5..         MOV     ?V2,A
   \   000009   78..         MOV     R0,#?V2
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   75F00C       MOV     B,#0xc
   \   000003   A4           MUL     AB
   \   000004   F8           MOV     R0,A
   \   000005   A9F0         MOV     R1,B
   \   000007   74..         MOV     A,#Desc_P_Arr & 0xff
   \   000009   28           ADD     A,R0
   \   00000A   F582         MOV     DPL,A
   \   00000C   74..         MOV     A,#(Desc_P_Arr >> 8) & 0xff
   \   00000E   39           ADDC    A,R1
   \   00000F   F583         MOV     DPH,A
   \   000011   E0           MOVX    A,@DPTR
   \   000012   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   EE           MOV     A,R6
   \   000001   240D         ADD     A,#0xd
   \   000003   F582         MOV     DPL,A
   \   000005   E4           CLR     A
   \   000006   3F           ADDC    A,R7
   \   000007   F583         MOV     DPH,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008                REQUIRE ??Subroutine28_0
   \   000008                ; // Fall through to label ??Subroutine28_0
    209          /****************************************************
    210          	函数名:	char_special
    211          	参数:		原字符
    212          	功能: 	字符转义
    213          ****************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    214          uint16_t char_special(uint8_t num){
   \                     char_special:
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    215          	switch(num){
   \   000000   E9           MOV     A,R1
   \   000001   2408         ADD     A,#0x8
   \   000003   600D         JZ      ??char_special_0
   \   000005   24FB         ADD     A,#-0x5
   \   000007   6005         JZ      ??char_special_1
   \   000009   14           DEC     A
   \   00000A   600A         JZ      ??char_special_2
   \   00000C   800E         SJMP    ??char_special_3
    216          		case 0xFD:return 0xFE<<8 | 0x7D;
   \                     ??char_special_1:
   \   00000E   7A7D         MOV     R2,#0x7d
   \   000010   8006         SJMP    ??char_special_4
    217          		case 0xF8:return 0xFE<<8 | 0x78;
   \                     ??char_special_0:
   \   000012   7A78         MOV     R2,#0x78
   \   000014   8002         SJMP    ??char_special_4
    218          		case 0xFE:return 0xFE<<8 | 0x7E;
   \                     ??char_special_2:
   \   000016   7A7E         MOV     R2,#0x7e
   \                     ??char_special_4:
   \   000018   7BFE         MOV     R3,#-0x2
   \   00001A   8004         SJMP    ??char_special_5
    219          	}
    220          	return num;
   \                     ??char_special_3:
   \   00001C   E9           MOV     A,R1
   \   00001D   FA           MOV     R2,A
   \   00001E   7B00         MOV     R3,#0x0
   \                     ??char_special_5:
   \   000020   02....       LJMP    ?BRET
    221          }
    222          
    223          
    224          //###################################对外函数区###################################
    225          
    226          /****************************************************
    227          	函数名:	getCheckSum_ByProtocolInfo
    228          	功能:		根据协议信息获得校验和
    229          	参数:		PROTOCOL_INFO_T协议描述信息
    230          	返回值:	校验和结果
    231          	注意：	只返回低8位
    232          	作者:		liyao 2015年9月8日14:10:51
    233          ****************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    234          uint8_t getCheckSum_ByProtocolInfo(PROTOCOL_INFO_T* pi){
   \                     getCheckSum_ByProtocolInfo:
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    235          	uint8_t i, sum = 0; 
   \   000005   7E00         MOV     R6,#0x0
    236          	for(i = 1; i < pi->plen + 3;i++)
   \   000007   7F01         MOV     R7,#0x1
   \   000009   800C         SJMP    ??getCheckSum_ByProtocolInfo_0
    237          		sum+=((uint8_t*)pi)[i]; 
   \                     ??getCheckSum_ByProtocolInfo_1:
   \   00000B   EA           MOV     A,R2
   \   00000C   28           ADD     A,R0
   \   00000D   F582         MOV     DPL,A
   \   00000F   E4           CLR     A
   \   000010   3B           ADDC    A,R3
   \   000011   F583         MOV     DPH,A
   \   000013   E0           MOVX    A,@DPTR
   \   000014   2E           ADD     A,R6
   \   000015   FE           MOV     R6,A
   \   000016   0F           INC     R7
   \                     ??getCheckSum_ByProtocolInfo_0:
   \   000017   EF           MOV     A,R7
   \   000018   F8           MOV     R0,A
   \   000019   8A82         MOV     DPL,R2
   \   00001B   8B83         MOV     DPH,R3
   \   00001D   A3           INC     DPTR
   \   00001E   A3           INC     DPTR
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   7D00         MOV     R5,#0x0
   \   000022   2403         ADD     A,#0x3
   \   000024   FC           MOV     R4,A
   \   000025   5001         JNC     ??getCheckSum_ByProtocolInfo_2
   \   000027   0D           INC     R5
   \                     ??getCheckSum_ByProtocolInfo_2:
   \   000028   C3           CLR     C
   \   000029   E8           MOV     A,R0
   \   00002A   9C           SUBB    A,R4
   \   00002B   E4           CLR     A
   \   00002C   9D           SUBB    A,R5
   \   00002D   A2D2         MOV     C,0xD0 /* PSW */.2
   \   00002F   65D0         XRL     A,PSW
   \   000031   33           RLC     A
   \   000032   40D7         JC      ??getCheckSum_ByProtocolInfo_1
    238          	return (uint8_t)sum;
   \   000034   EE           MOV     A,R6
   \   000035   F9           MOV     R1,A
   \   000036                REQUIRE ?Subroutine1
   \   000036                ; // Fall through to label ?Subroutine1
    239          }
    240          
    241          /****************************************************
    242          	函数名:	Protocol_Register
    243          	功能:		协议注册
    244          	作者:		liyao 2016年9月18日16:12:16  
    245          ****************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    246          int8_t Protocol_Register(PROTOCOL_DESC_T* Desc_T,PROTOCOL_TYPE Protocol_Type){
   \                     Protocol_Register:
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    247          	uint8_t i = 0 ;
   \   000004   7C00         MOV     R4,#0x0
    248          	PROTOCOL_DESC_T* tmp_Desc_T;
    249          //	switch((uint8_t)Protocol_Type){
    250          //		case (uint8_t)SEND:
    251          //			Max_Count = SEND_PROTOCOL_NUM;
    252          //			tmp_Desc_T = Send_Desc_P;
    253          //			break;
    254          //		case (uint8_t)RECEIVE:
    255          //			Max_Count = RECV_PROTOCOL_NUM;
    256          //			tmp_Desc_T = Recv_Desc_P;
    257          //			break;
    258          //		case (uint8_t)TRANSPOND:
    259          //			Max_Count = TRANSPOND_PROTOCOL_NUM;
    260          //			tmp_Desc_T = Transpond_Desc_P;
    261          //			break;  
    262          //	}
    263                   
    264                  tmp_Desc_T = Desc_P_Arr;
    265          	for(i = 0; i < PROTOCOL_NUM; i++){
    266          		if(tmp_Desc_T[i].ModuleAction == 0){
   \                     ??Protocol_Register_0:
   \   000006   EC           MOV     A,R4
   \   000007   75F00C       MOV     B,#0xc
   \   00000A   A4           MUL     AB
   \   00000B   F8           MOV     R0,A
   \   00000C   ADF0         MOV     R5,B
   \   00000E   ED           MOV     A,R5
   \   00000F   F9           MOV     R1,A
   \   000010   74..         MOV     A,#Desc_P_Arr & 0xff
   \   000012   28           ADD     A,R0
   \   000013   F582         MOV     DPL,A
   \   000015   74..         MOV     A,#(Desc_P_Arr >> 8) & 0xff
   \   000017   39           ADDC    A,R1
   \   000018   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_39:
   \   00001B   7023         JNZ     ??Protocol_Register_1
    267          			tmp_Desc_T[i] = *Desc_T;
   \   00001D   8A82         MOV     DPL,R2
   \   00001F   8B83         MOV     DPH,R3
   \   000021   EC           MOV     A,R4
   \   000022   75F00C       MOV     B,#0xc
   \   000025   A4           MUL     AB
   \   000026   F8           MOV     R0,A
   \   000027   ED           MOV     A,R5
   \   000028   F9           MOV     R1,A
   \   000029   74..         MOV     A,#Desc_P_Arr & 0xff
   \   00002B   28           ADD     A,R0
   \   00002C   FC           MOV     R4,A
   \   00002D   74..         MOV     A,#(Desc_P_Arr >> 8) & 0xff
   \   00002F   39           ADDC    A,R1
   \   000030   FD           MOV     R5,A
   \   000031   740C         MOV     A,#0xc
   \   000033   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    268                                  Protocol_Size++;
   \   000036   90....       MOV     DPTR,#Protocol_Size
   \   000039   E0           MOVX    A,@DPTR
   \   00003A   04           INC     A
   \   00003B   F0           MOVX    @DPTR,A
    269          			return 0;
   \   00003C   7900         MOV     R1,#0x0
   \   00003E   8013         SJMP    ??Protocol_Register_2
    270          		}
    271          	}
   \                     ??Protocol_Register_1:
   \   000040   0C           INC     R4
   \   000041   EC           MOV     A,R4
   \   000042   C3           CLR     C
   \   000043   940A         SUBB    A,#0xa
   \   000045   40BF         JC      ??Protocol_Register_0
    272          	Log.error("协议注册失败,数组满\r\n");
   \   000047                ; Setup parameters for indirect call
   \   000047   7A..         MOV     R2,#`?<Constant "\\320\\255\\322\\351\\327\\242\\262\\341\\3` & 0xff
   \   000049   7B..         MOV     R3,#(`?<Constant "\\320\\255\\322\\351\\327\\242\\262\\341\\3` >> 8) & 0xff
   \   00004B   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_59:
   \   00004E   12....       LCALL   ?CALL_IND
    273          	return -1;
   \   000051   79FF         MOV     R1,#-0x1
   \                     ??Protocol_Register_2:
   \   000053   02....       LJMP    ?Subroutine2 & 0xFFFF
    274          	
    275          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   F583         MOV     DPH,A
   \   000002                REQUIRE ??Subroutine26_0
   \   000002                ; // Fall through to label ??Subroutine26_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    276          
    277          /****************************************************
    278          	函数名:	Get_Protocol_Description
    279          	功能:		获取协议描述信息
    280          	作者:		liyao 2016年9月18日16:12:16  
    281          ****************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    282          PROTOCOL_DESC_T* Get_Protocol_Description(MODULE_ACTION ModuleAction,PROTOCOL_TYPE Protocol_Type){
   \                     Get_Protocol_Description:
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    283          	uint8_t i = 0 ;
   \   000004   7C00         MOV     R4,#0x0
    284          	PROTOCOL_DESC_T* tmp_Desc_T;
    285          //	switch((uint8_t)Protocol_Type){
    286          //		case (uint8_t)SEND:
    287          //			Max_Count = SEND_PROTOCOL_NUM;
    288          //			tmp_Desc_T = Send_Desc_P;
    289          //			break;
    290          //		case (uint8_t)RECEIVE:
    291          //			Max_Count = RECV_PROTOCOL_NUM;
    292          //			tmp_Desc_T = Recv_Desc_P;
    293          //			break;
    294          //		case (uint8_t)TRANSPOND:
    295          //			Max_Count = TRANSPOND_PROTOCOL_NUM;
    296          //			tmp_Desc_T = Transpond_Desc_P;
    297          //			break;  
    298          //	} 
    299                  tmp_Desc_T = Desc_P_Arr;
    300          	for(i = 0; i < Protocol_Size; i++){
   \   000006   8001         SJMP    ??Get_Protocol_Description_0
   \                     ??Get_Protocol_Description_1:
   \   000008   0C           INC     R4
   \                     ??Get_Protocol_Description_0:
   \   000009   90....       MOV     DPTR,#Protocol_Size
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   F8           MOV     R0,A
   \   00000E   EC           MOV     A,R4
   \   00000F   C3           CLR     C
   \   000010   98           SUBB    A,R0
   \   000011   5016         JNC     ??Get_Protocol_Description_2
    301          		if(ModuleAction == tmp_Desc_T[i].ModuleAction)
   \   000013   EC           MOV     A,R4
   \   000014   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   000017   6A           XRL     A,R2
   \   000018   7003         JNZ     ??Get_Protocol_Description_3
   \   00001A   A3           INC     DPTR
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   6B           XRL     A,R3
   \                     ??Get_Protocol_Description_3:
   \   00001D   70E9         JNZ     ??Get_Protocol_Description_1
    302          			return &tmp_Desc_T[i];
   \   00001F   74..         MOV     A,#Desc_P_Arr & 0xff
   \   000021   28           ADD     A,R0
   \   000022   FA           MOV     R2,A
   \   000023   74..         MOV     A,#(Desc_P_Arr >> 8) & 0xff
   \   000025   39           ADDC    A,R1
   \   000026   FB           MOV     R3,A
   \   000027   800E         SJMP    ??Get_Protocol_Description_4
    303          	}
    304          	Log.error("Get_Protocol_Description未找到协议描述\r\n");
   \                     ??Get_Protocol_Description_2:
   \   000029                ; Setup parameters for indirect call
   \   000029   7A..         MOV     R2,#`?<Constant "Get_Protocol_Descript...">` & 0xff
   \   00002B   7B..         MOV     R3,#(`?<Constant "Get_Protocol_Descript...">` >> 8) & 0xff
   \   00002D   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_60:
   \   000030   12....       LCALL   ?CALL_IND
    305          	return NULL;
   \   000033   7A00         MOV     R2,#0x0
   \   000035   7B00         MOV     R3,#0x0
   \                     ??Get_Protocol_Description_4:
   \   000037   02....       LJMP    ?Subroutine2 & 0xFFFF
    306          	
    307          }
    308          
    309          
    310          
    311          /****************************************************
    312          	函数名:	ProtocolFrame_Init
    313          	功能:		初始化全部协议和相关校验、执行函数
    314          	作者:		liyao 2015年9月8日14:10:51      
    315          ****************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    316          void ProtocolFrame_Init(){
   \                     ProtocolFrame_Init:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    317          //	memset(Send_Desc_P,0,sizeof(PROTOCOL_DESC_T) * SEND_PROTOCOL_NUM);
    318          //	memset(Recv_Desc_P,0,sizeof(PROTOCOL_DESC_T) * RECV_PROTOCOL_NUM);
    319          //	memset(Transpond_Desc_P,0,sizeof(PROTOCOL_DESC_T) * TRANSPOND_PROTOCOL_NUM);
    320                  memset(Desc_P_Arr,0,sizeof(PROTOCOL_DESC_T) * PROTOCOL_NUM);
   \   000005                ; Setup parameters for call to function memset
   \   000005   75..78       MOV     ?V0,#0x78
   \   000008   75..00       MOV     ?V1,#0x0
   \   00000B   78..         MOV     R0,#?V0
   \   00000D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000010   7C00         MOV     R4,#0x0
   \   000012   7D00         MOV     R5,#0x0
   \   000014   7A..         MOV     R2,#Desc_P_Arr & 0xff
   \   000016   7B..         MOV     R3,#(Desc_P_Arr >> 8) & 0xff
   \   000018   12....       LCALL   `??memset::?relay`   ; Banked call to: memset
   \   00001B   7402         MOV     A,#0x2
   \   00001D   12....       LCALL   ?DEALLOC_XSTACK8
    321          	//协议列表初始化
    322          	Protocol_Init();
   \   000020                ; Setup parameters for call to function Protocol_Init
   \   000020   12....       LCALL   `??Protocol_Init::?relay`; Banked call to: Protocol_Init
    323          	//发送数据队列初始化 
    324          #if UART1_PROTOCOL_RESOLVER
    325          	UART1_Resolver->Protocol_Queue = Queue_Init( _UART1_Protocol_QueueBuf,sizeof(PROTOCOL_INFO_T), UART1_RPQUEUE_SIZE);
   \   000023                ; Setup parameters for call to function Queue_Init
   \   000023   7C01         MOV     R4,#0x1
   \   000025   7D00         MOV     R5,#0x0
   \   000027   7913         MOV     R1,#0x13
   \   000029   7A..         MOV     R2,#_UART1_Protocol_QueueBuf & 0xff
   \   00002B   7B..         MOV     R3,#(_UART1_Protocol_QueueBuf >> 8) & 0xff
   \   00002D   12....       LCALL   `??Queue_Init::?relay`; Banked call to: Queue_Init
   \   000030   8A..         MOV     ?V0,R2
   \   000032   90....       MOV     DPTR,#UART1_Resolver
   \   000035   E0           MOVX    A,@DPTR
   \   000036   FA           MOV     R2,A
   \   000037   A3           INC     DPTR
   \   000038   E0           MOVX    A,@DPTR
   \   000039   F583         MOV     DPH,A
   \   00003B   8A82         MOV     DPL,R2
   \   00003D   E5..         MOV     A,?V0
   \   00003F   F0           MOVX    @DPTR,A
   \   000040   A3           INC     DPTR
   \   000041   EB           MOV     A,R3
   \   000042   F0           MOVX    @DPTR,A
    326          	UART1_Resolver->RPQueue_Size = UART1_RPQUEUE_SIZE; 
   \   000043   90....       MOV     DPTR,#UART1_Resolver
   \   000046   12....       LCALL   ??Subroutine29_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_50:
   \   000049   A3           INC     DPTR
   \   00004A   A3           INC     DPTR
   \   00004B   7401         MOV     A,#0x1
   \   00004D   F0           MOVX    @DPTR,A
   \   00004E   A3           INC     DPTR
   \   00004F   E4           CLR     A
   \   000050   12....       LCALL   ?Subroutine8 & 0xFFFF
    327          	UART1_Resolver->Protocol_Put = _Protocol_Put;
   \                     ??CrossCallReturnLabel_14:
   \   000053   241D         ADD     A,#0x1d
   \   000055   F582         MOV     DPL,A
   \   000057   E4           CLR     A
   \   000058   38           ADDC    A,R0
   \   000059   F583         MOV     DPH,A
   \   00005B   74..         MOV     A,#`??_Protocol_Put::?relay` & 0xff
   \   00005D   F0           MOVX    @DPTR,A
   \   00005E   A3           INC     DPTR
   \   00005F   74..         MOV     A,#(`??_Protocol_Put::?relay` >> 8) & 0xff
   \   000061   12....       LCALL   ?Subroutine8 & 0xFFFF
    328          	UART1_Resolver->Fetch_Protocol = _Fetch_Protocol;
   \                     ??CrossCallReturnLabel_15:
   \   000064   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   000067   74..         MOV     A,#`??_Fetch_Protocol::?relay` & 0xff
   \   000069   F0           MOVX    @DPTR,A
   \   00006A   A3           INC     DPTR
   \   00006B   74..         MOV     A,#(`??_Fetch_Protocol::?relay` >> 8) & 0xff
   \   00006D   02....       LJMP    ?Subroutine0 & 0xFFFF
    329          #endif  
    330          
    331          #if UART2_PROTOCOL_RESOLVER
    332          	UART2_Resolver->Protocol_Queue = Queue_Init( _UART2_Protocol_QueueBuf,sizeof(PROTOCOL_INFO_T), UART2_RPQUEUE_SIZE);
    333          	UART2_Resolver->RPQueue_Size = UART2_RPQUEUE_SIZE; 
    334          	UART2_Resolver->Protocol_Put = _Protocol_Put;
    335          	UART2_Resolver->Fetch_Protocol = _Fetch_Protocol;
    336          #endif  
    337          	
    338          #if UART3_PROTOCOL_RESOLVER
    339          	UART3_Resolver->Protocol_Queue = Queue_Init( _UART3_Protocol_QueueBuf,sizeof(PROTOCOL_INFO_T), UART3_RPQUEUE_SIZE);
    340          	UART3_Resolver->RPQueue_Size = UART3_RPQUEUE_SIZE; 
    341          	UART3_Resolver->Protocol_Put = _Protocol_Put;
    342          	UART3_Resolver->Fetch_Protocol = _Fetch_Protocol;
    343          #endif 
    344          	
    345          #if UART4_PROTOCOL_RESOLVER
    346          	UART4_Resolver->Protocol_Queue = Queue_Init( _UART4_Protocol_QueueBuf,sizeof(PROTOCOL_INFO_T), UART4_RPQUEUE_SIZE);
    347          	UART4_Resolver->RPQueue_Size = UART4_RPQUEUE_SIZE; 
    348          	UART4_Resolver->Protocol_Put = _Protocol_Put;
    349          	UART4_Resolver->Fetch_Protocol = _Fetch_Protocol;
    350          #endif 
    351          	
    352          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   90....       MOV     DPTR,#UART1_Resolver
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F8           MOV     R0,A
   \   000006   A3           INC     DPTR
   \   000007   E0           MOVX    A,@DPTR
   \   000008   C8           XCH     A,R0
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   241F         ADD     A,#0x1f
   \   000002   F582         MOV     DPL,A
   \   000004   E4           CLR     A
   \   000005   38           ADDC    A,R0
   \   000006   F583         MOV     DPH,A
   \   000008   22           RET
    353          
    354          /****************************************************
    355          	函数名:	Protocol_To_Uart
    356          	功能:		向缓冲区写入待发送至串口
    357          	参数:		PROTOCOL_INFO_T协议描述信息
    358          	作者:		liyao 2015年9月8日14:10:51
    359          ****************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    360          int8_t Protocol_To_Uart(PROTOCOL_INFO_T* pi){ 
   \                     Protocol_To_Uart:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 100
   \   000005   749C         MOV     A,#-0x64
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    361          	uint8_t data[100] = {0};
   \   00000E   90....       MOV     DPTR,#`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0`
   \   000011   AC..         MOV     R4,?XSP + 0
   \   000013   AD..         MOV     R5,?XSP + 1
   \   000015   7464         MOV     A,#0x64
   \   000017   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    362          	uint8_t i = 0,special_H,special_L, index = 0,tmp_val;
    363          	uint16_t special_char; 
    364          	data[index++] = pi->head;
   \   00001A   8E82         MOV     DPL,R6
   \   00001C   8F83         MOV     DPH,R7
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   85..82       MOV     DPL,?XSP + 0
   \   000022   85..83       MOV     DPH,?XSP + 1
   \   000025   F0           MOVX    @DPTR,A
   \   000026   75..01       MOV     ?V0,#0x1
    365          	for(i = 1; i < pi->alen-1;i++){
   \   000029   75..01       MOV     ?V1,#0x1
   \   00002C   8009         SJMP    ??Protocol_To_Uart_0
    366                      if(i == pi->alen - 2)
    367                          tmp_val = pi->checksum;
    368                      else
    369          		tmp_val = ((uint8_t *)pi)[i];
    370          		if(tmp_val == 0xFD || tmp_val == 0xF8 || tmp_val == 0xFE){//转义
    371          			special_char = char_special(tmp_val); 
    372          			special_H =  special_char >> 8;
    373          			special_L =  special_char & 0x00ff;
    374          			data[index++] = special_H;
    375          			data[index++] = special_L;
    376          		}else{
    377          			data[index++] = tmp_val;
   \                     ??Protocol_To_Uart_1:
   \   00002E   12....       LCALL   ?Subroutine14 & 0xFFFF
    378          		}
   \                     ??CrossCallReturnLabel_42:
   \   000031   E9           MOV     A,R1
   \                     ??Protocol_To_Uart_2:
   \   000032   F0           MOVX    @DPTR,A
   \   000033   05..         INC     ?V0
   \   000035   05..         INC     ?V1
   \                     ??Protocol_To_Uart_0:
   \   000037   EE           MOV     A,R6
   \   000038   240C         ADD     A,#0xc
   \   00003A   F582         MOV     DPL,A
   \   00003C   E4           CLR     A
   \   00003D   3F           ADDC    A,R7
   \   00003E   F583         MOV     DPH,A
   \   000040   E0           MOVX    A,@DPTR
   \   000041   24FF         ADD     A,#-0x1
   \   000043   FA           MOV     R2,A
   \   000044   E4           CLR     A
   \   000045   34FF         ADDC    A,#-0x1
   \   000047   FB           MOV     R3,A
   \   000048   C3           CLR     C
   \   000049   E5..         MOV     A,?V1
   \   00004B   9A           SUBB    A,R2
   \   00004C   E4           CLR     A
   \   00004D   9B           SUBB    A,R3
   \   00004E   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000050   65D0         XRL     A,PSW
   \   000052   33           RLC     A
   \   000053   5048         JNC     ??Protocol_To_Uart_3
   \   000055   A8..         MOV     R0,?V1
   \   000057   E0           MOVX    A,@DPTR
   \   000058   24FE         ADD     A,#-0x2
   \   00005A   1A           DEC     R2
   \   00005B   E4           CLR     A
   \   00005C   34FF         ADDC    A,#-0x1
   \   00005E   FB           MOV     R3,A
   \   00005F   EA           MOV     A,R2
   \   000060   68           XRL     A,R0
   \   000061   4B           ORL     A,R3
   \   000062   700F         JNZ     ??Protocol_To_Uart_4
   \   000064   8E82         MOV     DPL,R6
   \   000066   8F83         MOV     DPH,R7
   \   000068   A3           INC     DPTR
   \   000069   A3           INC     DPTR
   \   00006A   A3           INC     DPTR
   \   00006B   A3           INC     DPTR
   \   00006C   A3           INC     DPTR
   \   00006D   A3           INC     DPTR
   \   00006E   A3           INC     DPTR
   \   00006F   A3           INC     DPTR
   \   000070   A3           INC     DPTR
   \   000071   8008         SJMP    ??Protocol_To_Uart_5
   \                     ??Protocol_To_Uart_4:
   \   000073   EE           MOV     A,R6
   \   000074   28           ADD     A,R0
   \   000075   F582         MOV     DPL,A
   \   000077   E4           CLR     A
   \   000078   3F           ADDC    A,R7
   \   000079   F583         MOV     DPH,A
   \                     ??Protocol_To_Uart_5:
   \   00007B   E0           MOVX    A,@DPTR
   \   00007C   F9           MOV     R1,A
   \   00007D   74FD         MOV     A,#-0x3
   \   00007F   69           XRL     A,R1
   \   000080   600A         JZ      ??Protocol_To_Uart_6
   \   000082   74F8         MOV     A,#-0x8
   \   000084   69           XRL     A,R1
   \   000085   6005         JZ      ??Protocol_To_Uart_6
   \   000087   74FE         MOV     A,#-0x2
   \   000089   69           XRL     A,R1
   \   00008A   70A2         JNZ     ??Protocol_To_Uart_1
   \                     ??Protocol_To_Uart_6:
   \   00008C                ; Setup parameters for call to function char_special
   \   00008C   12....       LCALL   `??char_special::?relay`; Banked call to: char_special
   \   00008F   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_43:
   \   000092   EB           MOV     A,R3
   \   000093   F0           MOVX    @DPTR,A
   \   000094   05..         INC     ?V0
   \   000096   08           INC     R0
   \   000097   12....       LCALL   ??Subroutine27_0 & 0xFFFF
    379          	}
   \                     ??CrossCallReturnLabel_41:
   \   00009A   EA           MOV     A,R2
   \   00009B   8095         SJMP    ??Protocol_To_Uart_2
    380          	//data[index++] = pi->checksum;
    381          	data[index++] = pi->tail;
   \                     ??Protocol_To_Uart_3:
   \   00009D   8E82         MOV     DPL,R6
   \   00009F   8F83         MOV     DPH,R7
   \   0000A1   A3           INC     DPTR
   \   0000A2   A3           INC     DPTR
   \   0000A3   A3           INC     DPTR
   \   0000A4   A3           INC     DPTR
   \   0000A5   A3           INC     DPTR
   \   0000A6   A3           INC     DPTR
   \   0000A7   A3           INC     DPTR
   \   0000A8   A3           INC     DPTR
   \   0000A9   A3           INC     DPTR
   \   0000AA   A3           INC     DPTR
   \   0000AB   E0           MOVX    A,@DPTR
   \   0000AC   C0E0         PUSH    A
   \   0000AE   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_44:
   \   0000B1   D0E0         POP     A
   \   0000B3   F0           MOVX    @DPTR,A
    382                  if(pi->Desc_T != NULL)
   \   0000B4   EE           MOV     A,R6
   \   0000B5   240D         ADD     A,#0xd
   \   0000B7   F582         MOV     DPL,A
   \   0000B9   E4           CLR     A
   \   0000BA   3F           ADDC    A,R7
   \   0000BB   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_40:
   \   0000BE   601D         JZ      ??Protocol_To_Uart_7
    383                      pi->Desc_T->send(data, index);
   \   0000C0                ; Setup parameters for indirect call
   \   0000C0   7401         MOV     A,#0x1
   \   0000C2   25..         ADD     A,?V0
   \   0000C4   F9           MOV     R1,A
   \   0000C5   AA..         MOV     R2,?XSP + 0
   \   0000C7   AB..         MOV     R3,?XSP + 1
   \   0000C9   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   0000CC   A3           INC     DPTR
   \   0000CD   E0           MOVX    A,@DPTR
   \   0000CE   C8           XCH     A,R0
   \   0000CF   2406         ADD     A,#0x6
   \   0000D1   F582         MOV     DPL,A
   \   0000D3   E4           CLR     A
   \   0000D4   38           ADDC    A,R0
   \   0000D5   F583         MOV     DPH,A
   \   0000D7   12....       LCALL   ??Subroutine29_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_51:
   \   0000DA   12....       LCALL   ?CALL_IND
    384          	return 0;
   \                     ??Protocol_To_Uart_7:
   \   0000DD   7900         MOV     R1,#0x0
   \   0000DF   7464         MOV     A,#0x64
   \   0000E1   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000E4   7F04         MOV     R7,#0x4
   \   0000E6   02....       LJMP    ?BANKED_LEAVE_XDATA
    385          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   A8..         MOV     R0,?V0
   \   000002                REQUIRE ??Subroutine27_0
   \   000002                ; // Fall through to label ??Subroutine27_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine27_0:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006   E582         MOV     A,DPL
   \   000008   28           ADD     A,R0
   \   000009   F582         MOV     DPL,A
   \   00000B   E4           CLR     A
   \   00000C   3583         ADDC    A,DPH
   \   00000E   F583         MOV     DPH,A
   \   000010   22           RET
    386          
    387          //###################################自定义扩展函数区###################################
    388          /****************************************************
    389          	函数名:	Protocol_Send
    390          	功能:		发送协议
    391          	参数:		目标板,参数结构体,参数结构体长度
    392          	注：协议历史编号统一处理
    393          	作者:		liyao 2016年9月18日11:50:55
    394          ****************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    395          void Protocol_Send(MODULE_ACTION ModuleAction,PROTOCOL_T* Protocol_t,u8 Len){ 
   \                     Protocol_Send:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 19
   \   000005   74ED         MOV     A,#-0x13
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   \   00000E   8C..         MOV     ?V2,R4
   \   000010   8D..         MOV     ?V3,R5
   \   000012   89..         MOV     ?V0,R1
    396          	PROTOCOL_INFO_T pi = {0}; 
   \   000014   90....       MOV     DPTR,#`?<Constant {0}>`
   \   000017   AC..         MOV     R4,?XSP + 0
   \   000019   AD..         MOV     R5,?XSP + 1
   \   00001B   7413         MOV     A,#0x13
   \   00001D   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    397          	PROTOCOL_DESC_T* Desc_T = Get_Protocol_Description(ModuleAction, SEND);
   \   000020                ; Setup parameters for call to function Get_Protocol_Description
   \   000020   F9           MOV     R1,A
   \   000021   12....       LCALL   `??Get_Protocol_Description::?relay`; Banked call to: Get_Protocol_Description
    398          	pi.Desc_T = Desc_T;
   \   000024   EA           MOV     A,R2
   \   000025   F8           MOV     R0,A
   \   000026   EB           MOV     A,R3
   \   000027   F9           MOV     R1,A
   \   000028   740D         MOV     A,#0xd
   \   00002A   12....       LCALL   ?XSTACK_DISP0_8
   \   00002D   E8           MOV     A,R0
   \   00002E   F0           MOVX    @DPTR,A
   \   00002F   A3           INC     DPTR
   \   000030   E9           MOV     A,R1
   \   000031   F0           MOVX    @DPTR,A
    399          	pi.head = 0xFD;
   \   000032   85..82       MOV     DPL,?XSP + 0
   \   000035   85..83       MOV     DPH,?XSP + 1
   \   000038   74FD         MOV     A,#-0x3
   \   00003A   F0           MOVX    @DPTR,A
    400          	pi.plen = Len + 3;//参数个数+3   帧长度
   \   00003B   7403         MOV     A,#0x3
   \   00003D   25..         ADD     A,?V0
   \   00003F   C0E0         PUSH    A
   \   000041   7402         MOV     A,#0x2
   \   000043   12....       LCALL   ?XSTACK_DISP0_8
   \   000046   D0E0         POP     A
   \   000048   F0           MOVX    @DPTR,A
    401          	pi.module = ModuleAction >> 8; 
   \   000049   8E..         MOV     ?V4,R6
   \   00004B   8F..         MOV     ?V5,R7
   \   00004D   7408         MOV     A,#0x8
   \   00004F   78..         MOV     R0,#?V4
   \   000051   12....       LCALL   ?SS_SHR
   \   000054   7403         MOV     A,#0x3
   \   000056   12....       LCALL   ?XSTACK_DISP0_8
   \   000059   E5..         MOV     A,?V4
   \   00005B   F0           MOVX    @DPTR,A
    402          	pi.serial = Desc_T->Serial++;
   \   00005C   EA           MOV     A,R2
   \   00005D   2405         ADD     A,#0x5
   \   00005F   F8           MOV     R0,A
   \   000060   E4           CLR     A
   \   000061   3B           ADDC    A,R3
   \   000062   F9           MOV     R1,A
   \   000063   8882         MOV     DPL,R0
   \   000065   8983         MOV     DPH,R1
   \   000067   E0           MOVX    A,@DPTR
   \   000068   C0E0         PUSH    A
   \   00006A   7404         MOV     A,#0x4
   \   00006C   12....       LCALL   ?XSTACK_DISP0_8
   \   00006F   D0E0         POP     A
   \   000071   F0           MOVX    @DPTR,A
   \   000072   8882         MOV     DPL,R0
   \   000074   8983         MOV     DPH,R1
   \   000076   E0           MOVX    A,@DPTR
   \   000077   04           INC     A
   \   000078   F0           MOVX    @DPTR,A
    403          	pi.action = ModuleAction & 0x00ff;
   \   000079   7405         MOV     A,#0x5
   \   00007B   12....       LCALL   ?XSTACK_DISP0_8
   \   00007E   EE           MOV     A,R6
   \   00007F   F0           MOVX    @DPTR,A
    404          	pi.protocol = *Protocol_t; 
   \   000080   85..82       MOV     DPL,?V2
   \   000083   85..83       MOV     DPH,?V3
   \   000086   C082         PUSH    DPL
   \   000088   C083         PUSH    DPH
   \   00008A   7406         MOV     A,#0x6
   \   00008C   12....       LCALL   ?XSTACK_DISP0_8
   \   00008F   AC82         MOV     R4,DPL
   \   000091   AD83         MOV     R5,DPH
   \   000093   D083         POP     DPH
   \   000095   D082         POP     DPL
   \   000097   7403         MOV     A,#0x3
   \   000099   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    405          	pi.checksum = getCheckSum_ByProtocolInfo(&pi);
   \   00009C                ; Setup parameters for call to function getCheckSum_ByProtocolInfo
   \   00009C   AA..         MOV     R2,?XSP + 0
   \   00009E   AB..         MOV     R3,?XSP + 1
   \   0000A0   12....       LCALL   `??getCheckSum_ByProtocolInfo::?relay`; Banked call to: getCheckSum_ByProtocolInfo
   \   0000A3   7409         MOV     A,#0x9
   \   0000A5   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A8   E9           MOV     A,R1
   \   0000A9   F0           MOVX    @DPTR,A
    406          	pi.tail = 0xF8;
   \   0000AA   740A         MOV     A,#0xa
   \   0000AC   12....       LCALL   ?XSTACK_DISP0_8
   \   0000AF   74F8         MOV     A,#-0x8
   \   0000B1   F0           MOVX    @DPTR,A
    407          	pi.paralen = Len;
   \   0000B2   740B         MOV     A,#0xb
   \   0000B4   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B7   E5..         MOV     A,?V0
   \   0000B9   F0           MOVX    @DPTR,A
    408          	pi.alen = pi.plen + 5; 
   \   0000BA   7402         MOV     A,#0x2
   \   0000BC   12....       LCALL   ?XSTACK_DISP0_8
   \   0000BF   E0           MOVX    A,@DPTR
   \   0000C0   2405         ADD     A,#0x5
   \   0000C2   C0E0         PUSH    A
   \   0000C4   740C         MOV     A,#0xc
   \   0000C6   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C9   D0E0         POP     A
   \   0000CB   F0           MOVX    @DPTR,A
    409          //         printf("%x,%x,%x,%x,%x,%x,%x,%x,%x,%x\r\n",
    410          //                                                               pi.head,
    411          //                                                               pi.standby1,
    412          //                                                               pi.plen,
    413          //                                                               pi.module,
    414          //                                                               pi.serial,
    415          //                                                               pi.action,
    416          //                                                               pi.protocol.AddrReport_P.para1,
    417          //                                                               pi.protocol.AddrReport_P.para2,
    418          //                                                               pi.checksum,
    419          //                                                               pi.tail);
    420          	Protocol_To_Uart(&pi);	
   \   0000CC                ; Setup parameters for call to function Protocol_To_Uart
   \   0000CC   AA..         MOV     R2,?XSP + 0
   \   0000CE   AB..         MOV     R3,?XSP + 1
   \   0000D0   12....       LCALL   `??Protocol_To_Uart::?relay`; Banked call to: Protocol_To_Uart
    421          }
   \   0000D3   7413         MOV     A,#0x13
   \   0000D5   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000D8   7F06         MOV     R7,#0x6
   \   0000DA   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0}>`:
   \   000000   00           DB 0
   \   000001   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000009   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000011   0000         DB 0, 0
    422          
    423          /****************************************************
    424          	函数名:	Protocol_Send_Transpond
    425          	功能:		转发协议
    426          	参数:		PROTOCOL_INFO_T结构体
    427          	作者:		liyao 2016年9月18日11:51:35
    428          ****************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    429          void Protocol_Send_Transpond(PROTOCOL_INFO_T* pi){  
   \                     Protocol_Send_Transpond:
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    430          	Protocol_To_Uart(pi);	
   \   000004                ; Setup parameters for call to function Protocol_To_Uart
   \   000004   12....       LCALL   `??Protocol_To_Uart::?relay`; Banked call to: Protocol_To_Uart
    431          }
   \   000007                REQUIRE ?Subroutine2
   \   000007                ; // Fall through to label ?Subroutine2
    432          
    433          /*****************************************************************
    434          函数名:FetchProtocols
    435          备注: 处理上位机串口命令总函数
    436          ******************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    437          void FetchProtocols(void)
   \                     FetchProtocols:
    438          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    439          	#if UART1_PROTOCOL_RESOLVER
    440          		UART1_Resolver->Fetch_Protocol(UART1_Resolver);
   \   000004                ; Setup parameters for indirect call
   \   000004   90....       MOV     DPTR,#UART1_Resolver
   \   000007   12....       LCALL   ??Subroutine28_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_46:
   \   00000A   90....       MOV     DPTR,#UART1_Resolver
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   F8           MOV     R0,A
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   C8           XCH     A,R0
   \   000012   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   000015   12....       LCALL   ??Subroutine29_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_52:
   \   000018   12....       LCALL   ?CALL_IND
    441          	#endif
    442          	#if UART2_PROTOCOL_RESOLVER
    443          		UART2_Resolver->Fetch_Protocol(UART2_Resolver);
    444          	#endif
    445          	#if UART3_PROTOCOL_RESOLVER
    446          		UART3_Resolver->Fetch_Protocol(UART3_Resolver);
    447          	#endif
    448          	#if UART4_PROTOCOL_RESOLVER
    449          		UART4_Resolver->Fetch_Protocol(UART4_Resolver);
    450          	#endif
    451          }
   \   00001B   80..         SJMP    ?Subroutine2

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for UART1_Resolver>`:
   \   000000   ....         DW _UART1_Resolver

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??_clean_recv_buf::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    _clean_recv_buf

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??_Fetch_Protocol::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    _Fetch_Protocol

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??_Protocol_Put::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    _Protocol_Put

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??char_special::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    char_special

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??getCheckSum_ByProtocolInfo::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    getCheckSum_ByProtocolInfo

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??Protocol_Register::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Protocol_Register

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??Get_Protocol_Description::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Get_Protocol_Description

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ProtocolFrame_Init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ProtocolFrame_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??Protocol_To_Uart::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Protocol_To_Uart

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??Protocol_Send::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Protocol_Send

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??Protocol_Send_Transpond::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Protocol_Send_Transpond

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??FetchProtocols::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    FetchProtocols

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\320\\255\\322\\351\\320\\243\\321\\351\\2`:
   \   000000   D0ADD2E9     DB "\320\255\322\351\320\243\321\351\262\273\315\250\271\375\015\012"
   \            D0A3D1E9
   \            B2BBCDA8
   \            B9FD0D0A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\312\\325\\265\\275\\320\\255\\322\\351\\2`:
   \   000000   CAD5B5BD     DB "\312\325\265\275\320\255\322\351\265\253\312\307\316\336\264\246\300\355\272\257\312\375\015\012"
   \            D0ADD2E9
   \            B5ABCAC7
   \            CEDEB4A6
   \            C0EDBAAF
   \            CAFD0D0A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\320\\255\\322\\351\\326\\320\\315\\276\\2`:
   \   000000   D0ADD2E9     DB "\320\255\322\351\326\320\315\276\263\366\317\3260xFD\015\012"
   \            D6D0CDBE
   \            B3F6CFD6
   \            30784644
   \            0D0A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\264\\246\\300\\355\\326\\241\\263\\244\\2`:
   \   000000   B4A6C0ED     DB "\264\246\300\355\326\241\263\244\264\355\316\363\015\012"
   \            D6A1B3A4
   \            B4EDCEF3
   \            0D0A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\274\\306\\313\\343\\275\\341\\271\\373:%`:
   \   000000   BCC6CBE3     DB "\274\306\313\343\275\341\271\373:%x\015\012"
   \            BDE1B9FB
   \            3A25780D
   \            0A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "%x,%x,%x,%x,%x,%x,%x,...">`:
   \   000000   25782C25     DB "%x,%x,%x,%x,%x,%x,%x,%x,%x,%x\015\012"
   \            782C2578
   \            2C25782C
   \            25782C25
   \            782C2578
   \            2C25782C
   \            25782C25
   \            780D0A00

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\320\\255\\322\\351\\320\\243\\321\\351\\2_1`:
   \   000000   D0ADD2E9     DB "\320\255\322\351\320\243\321\351\272\315\264\355\316\363\015\012"
   \            D0A3D1E9
   \            BACDB4ED
   \            CEF30D0A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\326\\241\\316\\262\\316\\273\\326\\303\\2`:
   \   000000   D6A1CEB2     DB "\326\241\316\262\316\273\326\303\267\3070xF8\264\355\316\363\015\012"
   \            CEBBD6C3
   \            B7C73078
   \            4638B4ED
   \            CEF30D0A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\317\\326\\323\\320\\320\\255\\322\\351\\2`:
   \   000000   CFD6D3D0     DB "\317\326\323\320\320\255\322\351\277\342\316\336\306\245\305\344\265\261\307\260\320\255\322\351\015\012"
   \            D0ADD2E9
   \            BFE2CEDE
   \            C6A5C5E4
   \            B5B1C7B0
   \            D0ADD2E9
   \            0D0A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\320\\255\\322\\351\\327\\242\\262\\341\\3`:
   \   000000   D0ADD2E9     DB "\320\255\322\351\327\242\262\341\312\247\260\334,\312\375\327\351\302\372\015\012"
   \            D7A2B2E1
   \            CAA7B0DC
   \            2CCAFDD7
   \            E9C2FA0D
   \            0A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Get_Protocol_Descript...">`:
   \   000000   4765745F     DB "Get_Protocol_Description\316\264\325\322\265\275\320\255\322\351\303\350\312\366\015\012"
   \            50726F74
   \            6F636F6C
   \            5F446573
   \            63726970
   \            74696F6E
   \            CEB4D5D2
   \            B5BDD0AD
   \            D2E9C3E8
   \            CAF60D0A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0`:
   \   000000   00           DB 0
   \   000001   00           DB 0
   \   000002   00           DB 0
   \   000003   00           DB 0
   \   000004   00           DB 0
   \   000005   00           DB 0
   \   000006   00           DB 0
   \   000007   00           DB 0
   \   000008   00           DB 0
   \   000009   00           DB 0
   \   00000A   00           DB 0
   \   00000B   00           DB 0
   \   00000C   00           DB 0
   \   00000D   00           DB 0
   \   00000E   00           DB 0
   \   00000F   00           DB 0
   \   000010   00           DB 0
   \   000011   00           DB 0
   \   000012   00           DB 0
   \   000013   00           DB 0
   \   000014   00           DB 0
   \   000015   00           DB 0
   \   000016   00           DB 0
   \   000017   00           DB 0
   \   000018   00           DB 0
   \   000019   00           DB 0
   \   00001A   00           DB 0
   \   00001B   00           DB 0
   \   00001C   00           DB 0
   \   00001D   00           DB 0
   \   00001E   00           DB 0
   \   00001F   00           DB 0
   \   000020   00           DB 0
   \   000021   00           DB 0
   \   000022   00           DB 0
   \   000023   00           DB 0
   \   000024   00           DB 0
   \   000025   00           DB 0
   \   000026   00           DB 0
   \   000027   00           DB 0
   \   000028   00           DB 0
   \   000029   00           DB 0
   \   00002A   00           DB 0
   \   00002B   00           DB 0
   \   00002C   00           DB 0
   \   00002D   00           DB 0
   \   00002E   00           DB 0
   \   00002F   00           DB 0
   \   000030   00           DB 0
   \   000031   00           DB 0
   \   000032   00           DB 0
   \   000033   00           DB 0
   \   000034   00           DB 0
   \   000035   00           DB 0
   \   000036   00           DB 0
   \   000037   00           DB 0
   \   000038   00           DB 0
   \   000039   00           DB 0
   \   00003A   00           DB 0
   \   00003B   00           DB 0
   \   00003C   00           DB 0
   \   00003D   00           DB 0
   \   00003E   00           DB 0
   \   00003F   00           DB 0
   \   000040   00           DB 0
   \   000041   00           DB 0
   \   000042   00           DB 0
   \   000043   00           DB 0
   \   000044   00           DB 0
   \   000045   00           DB 0
   \   000046   00           DB 0
   \   000047   00           DB 0
   \   000048   00           DB 0
   \   000049   00           DB 0
   \   00004A   00           DB 0
   \   00004B   00           DB 0
   \   00004C   00           DB 0
   \   00004D   00           DB 0
   \   00004E   00           DB 0
   \   00004F   00           DB 0
   \   000050   00           DB 0
   \   000051   00           DB 0
   \   000052   00           DB 0
   \   000053   00           DB 0
   \   000054   00           DB 0
   \   000055   00           DB 0
   \   000056   00           DB 0
   \   000057   00           DB 0
   \   000058   00           DB 0
   \   000059   00           DB 0
   \   00005A   00           DB 0
   \   00005B   00           DB 0
   \   00005C   00           DB 0
   \   00005D   00           DB 0
   \   00005E   00           DB 0
   \   00005F   00           DB 0
   \   000060   00           DB 0
   \   000061   00           DB 0
   \   000062   00           DB 0
   \   000063   00           DB 0

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      2      0   FetchProtocols
      2     33   Get_Protocol_Description
      0     12   ProtocolFrame_Init
        0     10   -> Protocol_Init
        0     10   -> Queue_Init
        0     12   -> memset
      2      0   Protocol_Register
      2     33   Protocol_Send
        0     33   -> Get_Protocol_Description
        0     33   -> Protocol_To_Uart
        0     33   -> getCheckSum_ByProtocolInfo
      2      0   Protocol_Send_Transpond
        2      0   -> Protocol_To_Uart
      1    145   Protocol_To_Uart
        0    112   -> char_special
      0     28   _Fetch_Protocol
        0     28   -> Queue_Get
      1     33   _Protocol_Put
        0     13   -> _clean_recv_buf
        0     15   -> printf
        0     33   -> printf
      0     25   _clean_recv_buf
        0     12   -> memset
      0    112   char_special
      0     42   getCheckSum_ByProtocolInfo


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      32  ?<Constant "%x,%x,%x,%x,%x,%x,%x,...">
      41  ?<Constant "Get_Protocol_Descript...">
      15  ?<Constant "\264\246\300\355\326\241\263\244\2
      14  ?<Constant "\274\306\313\343\275\341\271\373:%
      25  ?<Constant "\312\325\265\275\320\255\322\351\2
      27  ?<Constant "\317\326\323\320\320\255\322\351\2
      17  ?<Constant "\320\255\322\351\320\243\321\351\2
      17  ?<Constant "\320\255\322\351\320\243\321\351\2_1
      19  ?<Constant "\320\255\322\351\326\320\315\276\2
      22  ?<Constant "\320\255\322\351\327\242\262\341\3
      21  ?<Constant "\326\241\316\262\316\273\326\303\2
     100  ?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
      19  ?<Constant {0}>
       2  ?<Initializer for UART1_Resolver>
       1  ??Subroutine21_0
       1  ??Subroutine22_0
       1  ??Subroutine23_0
       1  ??Subroutine24_0
      10  ??Subroutine25_0
       8  ??Subroutine26_0
      17  ??Subroutine27_0
       6  ??Subroutine28_0
       9  ??Subroutine29_0
       6  ?Subroutine0
       5  ?Subroutine1
       3  ?Subroutine10
       2  ?Subroutine11
       1  ?Subroutine12
       8  ?Subroutine13
       2  ?Subroutine14
      19  ?Subroutine15
      10  ?Subroutine16
      10  ?Subroutine17
       9  ?Subroutine18
      10  ?Subroutine19
       7  ?Subroutine2
      10  ?Subroutine20
      11  ?Subroutine3
       5  ?Subroutine4
      12  ?Subroutine5
      10  ?Subroutine6
       5  ?Subroutine7
      10  ?Subroutine8
      12  ?Subroutine9
     120  Desc_P_Arr
      29  FetchProtocols
       6  FetchProtocols::?relay
      58  Get_Protocol_Description
       6  Get_Protocol_Description::?relay
     112  ProtocolFrame_Init
       6  ProtocolFrame_Init::?relay
      86  Protocol_Register
       6  Protocol_Register::?relay
     221  Protocol_Send
       6  Protocol_Send::?relay
       7  Protocol_Send_Transpond
       6  Protocol_Send_Transpond::?relay
       1  Protocol_Size
     233  Protocol_To_Uart
       6  Protocol_To_Uart::?relay
       2  UART1_Resolver
     129  _Fetch_Protocol
       6  _Fetch_Protocol::?relay
     805  _Protocol_Put
       6  _Protocol_Put::?relay
      19  _UART1_Protocol_QueueBuf
      33  _UART1_Resolver
      69  _clean_recv_buf
       6  _clean_recv_buf::?relay
      35  char_special
       6  char_special::?relay
      54  getCheckSum_ByProtocolInfo
       6  getCheckSum_ByProtocolInfo::?relay

 
 2 059 bytes in segment BANKED_CODE
    72 bytes in segment BANK_RELAYS
     2 bytes in segment XDATA_I
     2 bytes in segment XDATA_ID
   369 bytes in segment XDATA_ROM_C
   173 bytes in segment XDATA_Z
 
 2 133 bytes of CODE  memory
   369 bytes of CONST memory
   175 bytes of XDATA memory

Errors: none
Warnings: none
