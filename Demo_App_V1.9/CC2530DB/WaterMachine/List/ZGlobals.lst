###############################################################################
#
# IAR C/C++ Compiler V9.30.1.3056 for 8051                25/Oct/2016  15:28:54
# Copyright 2004-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Components\stack\sys\ZGlobals.c
#    Command line       =  
#        -f "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f
#        "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=50 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
#        -DREJOIN_POLL_RATE=440 "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack
#        Mesh 1.0.0\Components\stack\sys\ZGlobals.c" -D HAL_UART=TRUE -D
#        HAL_UART_ISR=1 -D HAL_UART_DMA=0 -D LOG_OUT -D
#        UART1_PROTOCOL_RESOLVER=1 -D xISQC -D NWK_AUTO_POLL -D xZTOOL_P1 -D
#        ISR_KEYINTERRUPT -D xMT_TASK -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D
#        xLCD_SUPPORTED=DEBUG -D xPOWER_SAVING -lC
#        "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\WaterMachine\List"
#        -lA "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\WaterMachine\List"
#        --diag_suppress Pe001,Pa010 -o
#        "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\WaterMachine\Obj"
#        -e --no_code_motion --debug --core=plain --dptr=16,1
#        --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 8 -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack
#        Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\"
#        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\..\Source\"
#        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\..\Frame\"
#        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\..\Module\WaterMachine\"
#        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -Ohz
#    List file          =  
#        E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\WaterMachine\List\ZGlobals.lst
#    Object file        =  
#        E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\WaterMachine\Obj\ZGlobals.r51
#
###############################################################################

E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh 1.0.0\Components\stack\sys\ZGlobals.c
      1          /**************************************************************************************************
      2            Filename:       ZGlobals.c
      3            Revised:        $Date: 2014-03-13 10:55:58 -0700 (Thu, 13 Mar 2014) $
      4            Revision:       $Revision: 37665 $
      5          
      6            Description:    User definable Z-Stack parameters.
      7          
      8          
      9            Copyright 2007-2014 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product. Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          
     44          #include "ZComDef.h"
     45          #include "OSAL_Nv.h"
     46          #include "ZDObject.h"
     47          #include "ZGlobals.h"
     48          #include "ZDNwkMgr.h"
     49          #include "OnBoard.h"
     50          #include "ZDSecMgr.h"
     51          
     52          /*********************************************************************
     53           * MACROS
     54           */
     55          
     56          /*********************************************************************
     57           * CONSTANTS
     58           */
     59          
     60          /*********************************************************************
     61           * TYPEDEFS
     62           */
     63          
     64          typedef struct zgItem
     65          {
     66            uint16 id;
     67            uint16 len;
     68            void *buf;
     69          } zgItem_t;
     70          
     71          /*********************************************************************
     72           * NWK GLOBAL VARIABLES
     73           */
     74          
     75          // Polling values

   \                                 In  segment XDATA_I, align 1, keep-with-next
     76          uint16 zgPollRate = POLL_RATE;
   \                     zgPollRate:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for zgPollRate>`
   \   000002                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
     77          uint16 zgQueuedPollRate = QUEUED_POLL_RATE;
   \                     zgQueuedPollRate:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for zgQueuedPollRate>`
   \   000002                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
     78          uint16 zgResponsePollRate = RESPONSE_POLL_RATE;
   \                     zgResponsePollRate:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for zgResponsePollRate>`
   \   000002                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
     79          uint16 zgRejoinPollRate = REJOIN_POLL_RATE;
   \                     zgRejoinPollRate:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for zgRejoinPollRate>`
   \   000002                REQUIRE __INIT_XDATA_I
     80          
     81          // Transmission retries numbers

   \                                 In  segment XDATA_I, align 1, keep-with-next
     82          uint8 zgMaxDataRetries = NWK_MAX_DATA_RETRIES;
   \                     zgMaxDataRetries:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgMaxDataRetries>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
     83          uint8 zgMaxPollFailureRetries = MAX_POLL_FAILURE_RETRIES;
   \                     zgMaxPollFailureRetries:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgMaxPollFailureRetries>`
   \   000001                REQUIRE __INIT_XDATA_I
     84          
     85          // Default channel list

   \                                 In  segment XDATA_I, align 1, keep-with-next
     86          uint32 zgDefaultChannelList = DEFAULT_CHANLIST;
   \                     zgDefaultChannelList:
   \   000000                DS 4
   \   000004                REQUIRE `?<Initializer for zgDefaultChannelList>`
   \   000004                REQUIRE __INIT_XDATA_I
     87          
     88          // Default starting scan duration

   \                                 In  segment XDATA_I, align 1, keep-with-next
     89          uint8 zgDefaultStartingScanDuration = STARTING_SCAN_DURATION;
   \                     zgDefaultStartingScanDuration:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgDefaultStartingScanDuratio`
   \   000001                REQUIRE __INIT_XDATA_I
     90          
     91          // Stack profile Id

   \                                 In  segment XDATA_I, align 1, keep-with-next
     92          uint8 zgStackProfile = STACK_PROFILE_ID;
   \                     zgStackProfile:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgStackProfile>`
   \   000001                REQUIRE __INIT_XDATA_I
     93          
     94          // Default indirect message holding timeout

   \                                 In  segment XDATA_I, align 1, keep-with-next
     95          uint8 zgIndirectMsgTimeout = NWK_INDIRECT_MSG_TIMEOUT;
   \                     zgIndirectMsgTimeout:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgIndirectMsgTimeout>`
   \   000001                REQUIRE __INIT_XDATA_I
     96          
     97          // Security mode

   \                                 In  segment XDATA_I, align 1, keep-with-next
     98          uint8 zgSecurityMode = ZG_SECURITY_MODE;
   \                     zgSecurityMode:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgSecurityMode>`
   \   000001                REQUIRE __INIT_XDATA_I
     99          
    100          // Secure permit join

   \                                 In  segment XDATA_I, align 1, keep-with-next
    101          uint8 zgSecurePermitJoin = TRUE;
   \                     zgSecurePermitJoin:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgSecurePermitJoin>`
   \   000001                REQUIRE __INIT_XDATA_I
    102          
    103          // Trust center address

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    104          uint8 zgApsTrustCenterAddr[Z_EXTADDR_LEN] = { 0 };
   \                     zgApsTrustCenterAddr:
   \   000000                DS 8
   \   000008                REQUIRE __INIT_XDATA_Z
    105          
    106          // Route Discovery Time - amount of time that a route request lasts

   \                                 In  segment XDATA_I, align 1, keep-with-next
    107          uint8 zgRouteDiscoveryTime = ROUTE_DISCOVERY_TIME;
   \                     zgRouteDiscoveryTime:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgRouteDiscoveryTime>`
   \   000001                REQUIRE __INIT_XDATA_I
    108          
    109          // Route expiry

   \                                 In  segment XDATA_I, align 1, keep-with-next
    110          uint8 zgRouteExpiryTime = ROUTE_EXPIRY_TIME;
   \                     zgRouteExpiryTime:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgRouteExpiryTime>`
   \   000001                REQUIRE __INIT_XDATA_I
    111          
    112          // Extended PAN Id

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    113          uint8 zgExtendedPANID[Z_EXTADDR_LEN];
   \                     zgExtendedPANID:
   \   000000                DS 8
   \   000008                REQUIRE __INIT_XDATA_Z
    114          
    115          // Broadcast parameters

   \                                 In  segment XDATA_I, align 1, keep-with-next
    116          uint8 zgMaxBcastRetires   = MAX_BCAST_RETRIES;
   \                     zgMaxBcastRetires:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgMaxBcastRetires>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
    117          uint8 zgPassiveAckTimeout = PASSIVE_ACK_TIMEOUT;
   \                     zgPassiveAckTimeout:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgPassiveAckTimeout>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
    118          uint8 zgBcastDeliveryTime = BCAST_DELIVERY_TIME;
   \                     zgBcastDeliveryTime:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgBcastDeliveryTime>`
   \   000001                REQUIRE __INIT_XDATA_I
    119          
    120          // Network mode

   \                                 In  segment XDATA_I, align 1, keep-with-next
    121          uint8 zgNwkMode = NWK_MODE;
   \                     zgNwkMode:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgNwkMode>`
   \   000001                REQUIRE __INIT_XDATA_I
    122          
    123          // Many-to-one values

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    124          uint8 zgConcentratorEnable = CONCENTRATOR_ENABLE;
   \                     zgConcentratorEnable:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    125          uint8 zgConcentratorDiscoveryTime = CONCENTRATOR_DISCOVERY_TIME;
   \                     zgConcentratorDiscoveryTime:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_I, align 1, keep-with-next
    126          uint8 zgConcentratorRadius = CONCENTRATOR_RADIUS;
   \                     zgConcentratorRadius:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgConcentratorRadius>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    127          uint8 zgConcentratorRC = CONCENTRATOR_ROUTE_CACHE;   // concentrator with route cache (no memory constraints)
   \                     zgConcentratorRC:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_I, align 1, keep-with-next
    128          uint8 zgNwkSrcRtgExpiryTime = SRC_RTG_EXPIRY_TIME;
   \                     zgNwkSrcRtgExpiryTime:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgNwkSrcRtgExpiryTime>`
   \   000001                REQUIRE __INIT_XDATA_I
    129          
    130          // Cleanup Child Table according to routing traffic

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    131          uint8 zgRouterOffAssocCleanup = FALSE;
   \                     zgRouterOffAssocCleanup:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    132          
    133          // Determines whether or not a remote NWK leave request command frame received
    134          // by the local device is accepted .

   \                                 In  segment XDATA_I, align 1, keep-with-next
    135          uint8 zgNwkLeaveRequestAllowed = TRUE;
   \                     zgNwkLeaveRequestAllowed:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgNwkLeaveRequestAllowed>`
   \   000001                REQUIRE __INIT_XDATA_I
    136          
    137          // Determines if the Child Aging Table Management process is active or not.
    138          // This feature is optional and it is disabled by default.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    139          uint8 zgChildAgingEnable = FALSE;
   \                     zgChildAgingEnable:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    140          
    141          /*********************************************************************
    142           * APS GLOBAL VARIABLES
    143           */
    144          
    145          // The maximum number of retries allowed after a transmission failure

   \                                 In  segment XDATA_I, align 1, keep-with-next
    146          uint8 zgApscMaxFrameRetries = APSC_MAX_FRAME_RETRIES;
   \                     zgApscMaxFrameRetries:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgApscMaxFrameRetries>`
   \   000001                REQUIRE __INIT_XDATA_I
    147          
    148          // The maximum number of seconds (milliseconds) to wait for an
    149          // acknowledgement to a transmitted frame.
    150          
    151          // This number is used by polled devices.

   \                                 In  segment XDATA_I, align 1, keep-with-next
    152          uint16 zgApscAckWaitDurationPolled = APSC_ACK_WAIT_DURATION_POLLED;
   \                     zgApscAckWaitDurationPolled:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for zgApscAckWaitDurationPolled>`
   \   000002                REQUIRE __INIT_XDATA_I
    153          
    154          // This number is used by non-polled devices in the following formula:
    155          //   (100 mSec) * (_NIB.MaxDepth * zgApsAckWaitMultiplier)

   \                                 In  segment XDATA_I, align 1, keep-with-next
    156          uint8 zgApsAckWaitMultiplier = 2;
   \                     zgApsAckWaitMultiplier:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgApsAckWaitMultiplier>`
   \   000001                REQUIRE __INIT_XDATA_I
    157          
    158          // The maximum number of milliseconds for the end device binding

   \                                 In  segment XDATA_I, align 1, keep-with-next
    159          uint16 zgApsDefaultMaxBindingTime = APS_DEFAULT_MAXBINDING_TIME;
   \                     zgApsDefaultMaxBindingTime:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for zgApsDefaultMaxBindingTime>`
   \   000002                REQUIRE __INIT_XDATA_I
    160          
    161          // The 64-big identifier of the network to join or form.
    162          // Default set to all zeros

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    163          uint8 zgApsUseExtendedPANID[Z_EXTADDR_LEN] = {00,00,00,00,00,00,00,00};
   \                     zgApsUseExtendedPANID:
   \   000000                DS 8
   \   000008                REQUIRE __INIT_XDATA_Z
    164          
    165          // A boolean flag that indicates whether it is OK to use insecure join
    166          // on startup. Default set to TRUE

   \                                 In  segment XDATA_I, align 1, keep-with-next
    167          uint8 zgApsUseInsecureJoin = TRUE;
   \                     zgApsUseInsecureJoin:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgApsUseInsecureJoin>`
   \   000001                REQUIRE __INIT_XDATA_I
    168          
    169          // The radius of broadcast multicast transmissions

   \                                 In  segment XDATA_I, align 1, keep-with-next
    170          uint8 zgApsNonMemberRadius = APS_DEFAULT_NONMEMBER_RADIUS;
   \                     zgApsNonMemberRadius:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgApsNonMemberRadius>`
   \   000001                REQUIRE __INIT_XDATA_I
    171          
    172          // Commissioned Network Address

   \                                 In  segment XDATA_I, align 1, keep-with-next
    173          uint16 zgNwkCommissionedNwkAddr = INVALID_NODE_ADDR;
   \                     zgNwkCommissionedNwkAddr:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for zgNwkCommissionedNwkAddr>`
   \   000002                REQUIRE __INIT_XDATA_I
    174          
    175          // APS Duplication Rejection table variables

   \                                 In  segment XDATA_I, align 1, keep-with-next
    176          uint16 zgApscDupRejTimeoutInc = DEFAULT_APS_DUP_REJ_TIMEOUT_INCREMENT;
   \                     zgApscDupRejTimeoutInc:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for zgApscDupRejTimeoutInc>`
   \   000002                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
    177          uint8  zgApscDupRejTimeoutCount = DEFAULT_APS_DUP_REJ_TIMEOUT;
   \                     zgApscDupRejTimeoutCount:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgApscDupRejTimeoutCount>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
    178          uint16 zgApsMinDupRejTableSize = APS_DUP_REJ_ENTRIES;
   \                     zgApsMinDupRejTableSize:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for zgApsMinDupRejTableSize>`
   \   000002                REQUIRE __INIT_XDATA_I
    179          
    180          
    181          
    182          /*********************************************************************
    183           * SECURITY GLOBAL VARIABLES
    184           */
    185          
    186          // If TRUE, preConfigKey should be configured on all devices on the network
    187          // If false, it is configured only on the coordinator and sent to other
    188          // devices upon joining.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    189          uint8 zgPreConfigKeys = FALSE;
   \                     zgPreConfigKeys:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    190          
    191          // The type of link key in use.  This will determine the security
    192          // policies associated with sending and receiving APS messages.
    193          // If ZG_GLOBAL_LINK_KEY APS TCLK security may be used for specific APS commands
    194          // If ZG_UNIQUE_LINK_KEY APS TCLK security is required for specific APS commands

   \                                 In  segment XDATA_I, align 1, keep-with-next
    195          uint8 zgApsLinkKeyType = ZG_GLOBAL_LINK_KEY;
   \                     zgApsLinkKeyType:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgApsLinkKeyType>`
   \   000001                REQUIRE __INIT_XDATA_I
    196          
    197          // With changes introduced in R20 of the ZigBee specification,
    198          // boolean value of zgUseDefaultTCLK is set depending on zgApsLinkKeyType value.
    199          //
    200          // For zgApsLinkKeyType = ZG_GLOBAL_LINK_KEY, zgUseDefaultTCLK = TRUE
    201          // For zgApsLinkKeyType = ZG_UNIQUE_LINK_KEY, different devices have
    202          // different value:
    203          //      ZC should have             zgUseDefaultTCLK = FALSE
    204          //      Other devices should have  zgUseDefaultTCLK = TRUE
    205          // This is initialized in zgInitItems()
    206          // If ZG_UNIQUE_LINK_KEY, individual trust center link key between each device
    207          // and the trust center should be manually configured via MT_SYS_OSAL_NV_WRITE

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    208          uint8 zgUseDefaultTCLK;
   \                     zgUseDefaultTCLK:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    209          
    210          #if defined ( APP_TP2_TEST_MODE )
    211          uint8 guTxApsSecON = FALSE;
    212          uint8 guEnforceRxApsSec = TP_GU_ALL;
    213          #endif
    214          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    215          uint8 zgApsAllowR19Sec = FALSE;
   \                     zgApsAllowR19Sec:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    216          
    217          /*********************************************************************
    218           * ZDO GLOBAL VARIABLES
    219           */
    220          
    221          // Configured PAN ID

   \                                 In  segment XDATA_I, align 1, keep-with-next
    222          uint16 zgConfigPANID = ZDAPP_CONFIG_PAN_ID;
   \                     zgConfigPANID:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for zgConfigPANID>`
   \   000002                REQUIRE __INIT_XDATA_I
    223          
    224          // Device Logical Type

   \                                 In  segment XDATA_I, align 1, keep-with-next
    225          uint8 zgDeviceLogicalType = DEVICE_LOGICAL_TYPE;
   \                     zgDeviceLogicalType:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgDeviceLogicalType>`
   \   000001                REQUIRE __INIT_XDATA_I
    226          
    227          // Startup Delay

   \                                 In  segment XDATA_I, align 1, keep-with-next
    228          uint8 zgStartDelay = START_DELAY;
   \                     zgStartDelay:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgStartDelay>`
   \   000001                REQUIRE __INIT_XDATA_I
    229          
    230          #if !defined MT_TASK
    231          // Flag to use verbose (i.e. "cc2480-style") direct MT callbacks in ZDProfile.c, ZDP_IncomingData().

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    232          uint8 zgZdoDirectCB = FALSE;
   \                     zgZdoDirectCB:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    233          #endif
    234          
    235          // Min number of attempted transmissions for Channel Interference detection

   \                                 In  segment XDATA_I, align 1, keep-with-next
    236          uint8 zgNwkMgrMinTransmissions = ZDNWKMGR_MIN_TRANSMISSIONS;
   \                     zgNwkMgrMinTransmissions:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgNwkMgrMinTransmissions>`
   \   000001                REQUIRE __INIT_XDATA_I
    237          
    238          /*********************************************************************
    239           * APPLICATION GLOBAL VARIABLES
    240           */
    241          
    242          // Network Manager Mode

   \                                 In  segment XDATA_I, align 1, keep-with-next
    243          uint8 zgNwkMgrMode = ZDNWKMGR_ENABLE;
   \                     zgNwkMgrMode:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgNwkMgrMode>`
   \   000001                REQUIRE __INIT_XDATA_I
    244          
    245          /*********************************************************************
    246           * NON-STANDARD GLOBAL VARIABLES
    247           */
    248          
    249          // Simple API Endpoint

   \                                 In  segment XDATA_I, align 1, keep-with-next
    250          uint8 zgSapiEndpoint = SAPI_ENDPOINT;
   \                     zgSapiEndpoint:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgSapiEndpoint>`
   \   000001                REQUIRE __INIT_XDATA_I
    251          
    252          /*********************************************************************
    253           * LOCAL VARIABLES
    254           */
    255          
    256          /*********************************************************************
    257           * ZGlobal Item Table
    258           */

   \                                 In  segment CODE_C, align 1
    259          static CONST zgItem_t zgItemTable[] =
   \                     zgItemTable:
   \   000000   0000         DW 0
   \   000002   0000         DW 0
   \   000004   0000         DW 0H
    260          {
    261          #if defined ( NV_INIT )
    262          #if !defined MT_TASK
    263            {
    264              ZCD_NV_ZDO_DIRECT_CB, sizeof(zgZdoDirectCB), &zgZdoDirectCB
    265            },
    266          #endif
    267            {
    268              ZCD_NV_LOGICAL_TYPE, sizeof(zgDeviceLogicalType), &zgDeviceLogicalType
    269            },
    270            {
    271              ZCD_NV_POLL_RATE, sizeof(zgPollRate), &zgPollRate
    272            },
    273            {
    274              ZCD_NV_QUEUED_POLL_RATE, sizeof(zgQueuedPollRate), &zgQueuedPollRate
    275            },
    276            {
    277              ZCD_NV_RESPONSE_POLL_RATE, sizeof(zgResponsePollRate), &zgResponsePollRate
    278            },
    279            {
    280              ZCD_NV_REJOIN_POLL_RATE, sizeof(zgRejoinPollRate), &zgRejoinPollRate
    281            },
    282            {
    283              ZCD_NV_DATA_RETRIES, sizeof(zgMaxDataRetries), &zgMaxDataRetries
    284            },
    285            {
    286              ZCD_NV_POLL_FAILURE_RETRIES, sizeof(zgMaxPollFailureRetries), &zgMaxPollFailureRetries
    287            },
    288            {
    289              ZCD_NV_CHANLIST, sizeof(zgDefaultChannelList), &zgDefaultChannelList
    290            },
    291            {
    292              ZCD_NV_SCAN_DURATION, sizeof(zgDefaultStartingScanDuration), &zgDefaultStartingScanDuration
    293            },
    294            {
    295              ZCD_NV_STACK_PROFILE, sizeof(zgStackProfile), &zgStackProfile
    296            },
    297            {
    298              ZCD_NV_INDIRECT_MSG_TIMEOUT, sizeof(zgIndirectMsgTimeout), &zgIndirectMsgTimeout
    299            },
    300            {
    301              ZCD_NV_ROUTE_EXPIRY_TIME, sizeof(zgRouteExpiryTime), &zgRouteExpiryTime
    302            },
    303            {
    304              ZCD_NV_EXTENDED_PAN_ID, Z_EXTADDR_LEN, zgExtendedPANID
    305            },
    306            {
    307              ZCD_NV_BCAST_RETRIES, sizeof(zgMaxBcastRetires), &zgMaxBcastRetires
    308            },
    309            {
    310              ZCD_NV_PASSIVE_ACK_TIMEOUT, sizeof(zgPassiveAckTimeout), &zgPassiveAckTimeout
    311            },
    312            {
    313              ZCD_NV_BCAST_DELIVERY_TIME, sizeof(zgBcastDeliveryTime), &zgBcastDeliveryTime
    314            },
    315            {
    316              ZCD_NV_NWK_MODE, sizeof(zgNwkMode), &zgNwkMode
    317            },
    318            {
    319              ZCD_NV_CONCENTRATOR_ENABLE, sizeof(zgConcentratorEnable), &zgConcentratorEnable
    320            },
    321            {
    322              ZCD_NV_CONCENTRATOR_DISCOVERY, sizeof(zgConcentratorDiscoveryTime), &zgConcentratorDiscoveryTime
    323            },
    324            {
    325              ZCD_NV_CONCENTRATOR_RADIUS, sizeof(zgConcentratorRadius), &zgConcentratorRadius
    326            },
    327            {
    328              ZCD_NV_CONCENTRATOR_RC, sizeof(zgConcentratorRC), &zgConcentratorRC
    329            },
    330            {
    331              ZCD_NV_SRC_RTG_EXPIRY_TIME, sizeof(zgNwkSrcRtgExpiryTime), &zgNwkSrcRtgExpiryTime
    332            },
    333            {
    334              ZCD_NV_ROUTE_DISCOVERY_TIME, sizeof(zgRouteDiscoveryTime), &zgRouteDiscoveryTime
    335            },
    336          #ifndef NONWK
    337            {
    338              ZCD_NV_PANID, sizeof(zgConfigPANID), &zgConfigPANID
    339            },
    340            {
    341              ZCD_NV_PRECFGKEYS_ENABLE, sizeof(zgPreConfigKeys), &zgPreConfigKeys
    342            },
    343            {
    344              ZCD_NV_SECURITY_MODE, sizeof(zgSecurityMode), &zgSecurityMode
    345            },
    346            {
    347              ZCD_NV_SECURE_PERMIT_JOIN, sizeof(zgSecurePermitJoin), &zgSecurePermitJoin
    348            },
    349            {
    350              ZCD_NV_USE_DEFAULT_TCLK, sizeof(zgUseDefaultTCLK), &zgUseDefaultTCLK
    351            },
    352            {
    353              ZCD_NV_TRUSTCENTER_ADDR, Z_EXTADDR_LEN, zgApsTrustCenterAddr
    354            },
    355            {
    356              ZCD_NV_APS_LINK_KEY_TYPE, sizeof(zgApsLinkKeyType), &zgApsLinkKeyType
    357            },
    358          #endif // NONWK
    359            {
    360              ZCD_NV_APS_FRAME_RETRIES, sizeof(zgApscMaxFrameRetries), &zgApscMaxFrameRetries
    361            },
    362            {
    363              ZCD_NV_APS_ACK_WAIT_DURATION, sizeof(zgApscAckWaitDurationPolled), &zgApscAckWaitDurationPolled
    364            },
    365            {
    366              ZCD_NV_APS_ACK_WAIT_MULTIPLIER, sizeof(zgApsAckWaitMultiplier), &zgApsAckWaitMultiplier
    367            },
    368            {
    369              ZCD_NV_BINDING_TIME, sizeof(zgApsDefaultMaxBindingTime), &zgApsDefaultMaxBindingTime
    370            },
    371            {
    372              ZCD_NV_APS_USE_EXT_PANID, Z_EXTADDR_LEN, zgApsUseExtendedPANID
    373            },
    374            {
    375              ZCD_NV_APS_USE_INSECURE_JOIN, sizeof(zgApsUseInsecureJoin), &zgApsUseInsecureJoin
    376            },
    377            {
    378              ZCD_NV_APS_NONMEMBER_RADIUS, sizeof(zgApsNonMemberRadius), &zgApsNonMemberRadius
    379            },
    380            {
    381              ZCD_NV_START_DELAY, sizeof(zgStartDelay), &zgStartDelay
    382            },
    383            {
    384              ZCD_NV_SAPI_ENDPOINT, sizeof(zgSapiEndpoint), &zgSapiEndpoint
    385            },
    386            {
    387              ZCD_NV_NWK_MGR_MODE, sizeof(zgNwkMgrMode), &zgNwkMgrMode
    388            },
    389            {
    390              ZCD_NV_NWKMGR_MIN_TX, sizeof(zgNwkMgrMinTransmissions), &zgNwkMgrMinTransmissions
    391            },
    392            {
    393              ZCD_NV_ROUTER_OFF_ASSOC_CLEANUP, sizeof(zgRouterOffAssocCleanup), &zgRouterOffAssocCleanup
    394            },
    395            {
    396              ZCD_NV_NWK_LEAVE_REQ_ALLOWED, sizeof(zgNwkLeaveRequestAllowed), &zgNwkLeaveRequestAllowed
    397            },
    398            {
    399              ZCD_NV_COMMISSIONED_NWK_ADDR, sizeof(zgNwkCommissionedNwkAddr), &zgNwkCommissionedNwkAddr
    400            },
    401            {
    402              ZCD_NV_APS_ALLOW_R19_SECURITY, sizeof(zgApsAllowR19Sec), &zgApsAllowR19Sec
    403            },
    404            {
    405              ZCD_NV_APS_DUPREJ_TIMEOUT_INC, sizeof(zgApscDupRejTimeoutInc), &zgApscDupRejTimeoutInc
    406            },
    407            {
    408              ZCD_NV_APS_DUPREJ_TIMEOUT_COUNT, sizeof(zgApscDupRejTimeoutCount), &zgApscDupRejTimeoutCount
    409            },
    410            {
    411              ZCD_NV_APS_DUPREJ_TABLE_SIZE, sizeof(zgApsMinDupRejTableSize), &zgApsMinDupRejTableSize
    412            },
    413          #if defined ( ZIGBEE_CHILD_AGING )
    414            {
    415              ZCD_NV_NWK_CHILD_AGE_ENABLE, sizeof(zgChildAgingEnable), &zgChildAgingEnable
    416            },
    417          #endif // ZIGBEE_CHILD_AGING
    418          #endif // NV_INIT
    419            // Last item -- DO NOT MOVE IT!
    420            {
    421              0x00, 0, NULL
    422            }
    423          };
    424          
    425          /*********************************************************************
    426           * LOCAL FUNCTIONS
    427           */
    428          
    429          static uint8 zgItemInit( uint16 id, uint16 len, void *buf, uint8 setDefault );
    430          
    431          #ifndef NONWK
    432          static uint8 zgPreconfigKeyInit( uint8 setDefault );
    433          #endif
    434          
    435          /*********************************************************************
    436           * @fn       zgItemInit()
    437           *
    438           * @brief
    439           *
    440           *   Initialize a global item. If the item doesn't exist in NV memory,
    441           *   write the system default (value passed in) into NV memory. But if
    442           *   it exists, set the item to the value stored in NV memory.
    443           *
    444           *   Also, if setDefault is TRUE and the item exists, we will write
    445           *   the default value to NV space.
    446           *
    447           * @param   id - item id
    448           * @param   len - item len
    449           * @param   buf - pointer to the item
    450           * @param   setDefault - TRUE to set default, not read
    451           *
    452           * @return  ZSUCCESS if successful, NV_ITEM_UNINIT if item did not
    453           *          exist in NV, NV_OPER_FAILED if failure.
    454           */
    455          static uint8 zgItemInit( uint16 id, uint16 len, void *buf, uint8 setDefault )
    456          {
    457            uint8 status;
    458          
    459            // If the item doesn't exist in NV memory, create and initialize
    460            // it with the value passed in.
    461            status = osal_nv_item_init( id, len, buf );
    462            if ( status == ZSUCCESS )
    463            {
    464              if ( setDefault )
    465              {
    466                // Write the default value back to NV
    467                status = osal_nv_write( id, 0, len, buf );
    468              }
    469              else
    470              {
    471                // The item exists in NV memory, read it from NV memory
    472                status = osal_nv_read( id, 0, len, buf );
    473              }
    474            }
    475          
    476            return (status);
    477          }
    478          
    479          /*********************************************************************
    480           * API FUNCTIONS
    481           */
    482          
    483          /*********************************************************************
    484           * @fn          zgInit
    485           *
    486           * @brief
    487           *
    488           *   Initialize the Z-Stack Globals. If an item doesn't exist in
    489           *   NV memory, write the system default into NV memory. But if
    490           *   it exists, set the item to the value stored in NV memory.
    491           *
    492           * NOTE: The Startup Options (ZCD_NV_STARTUP_OPTION) indicate
    493           *       that the Config state items (zgItemTable) need to be
    494           *       set to defaults (ZCD_STARTOPT_DEFAULT_CONFIG_STATE). The
    495           *
    496           * @param       none
    497           *
    498           * @return      ZSUCCESS if successful, NV_ITEM_UNINIT if item did not
    499           *              exist in NV, NV_OPER_FAILED if failure.
    500           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    501          uint8 zgInit( void )
   \                     zgInit:
    502          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 16
   \   000005   74F0         MOV     A,#-0x10
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    503            uint8  setDefault = FALSE;
   \   00000A   7E00         MOV     R6,#0x0
    504          
    505            // Do we want to default the Config state values
    506            if ( zgReadStartupOptions() & ZCD_STARTOPT_DEFAULT_CONFIG_STATE )
   \   00000C                ; Setup parameters for call to function zgReadStartupOptions
   \   00000C   12....       LCALL   `??zgReadStartupOptions::?relay`; Banked call to: zgReadStartupOptions
   \   00000F   E9           MOV     A,R1
   \   000010   F8           MOV     R0,A
   \   000011   A2E0         MOV     C,0xE0 /* A   */.0
   \   000013   5002         JNC     ??zgInit_0
    507            {
    508              setDefault = TRUE;
   \   000015   7E01         MOV     R6,#0x1
    509            }
    510          
    511          #if defined ( FEATURE_SYSTEM_STATS )
    512            // This sections tracks the number of resets
    513            uint16 bootCnt = 0;
    514          
    515            // Update the Boot Counter
    516            if ( osal_nv_item_init( ZCD_NV_BOOTCOUNTER, sizeof(bootCnt), &bootCnt ) == ZSUCCESS )
    517            {
    518              // Get the old value from NV memory
    519              osal_nv_read( ZCD_NV_BOOTCOUNTER, 0, sizeof(bootCnt), &bootCnt );
    520            }
    521          
    522            // Increment the Boot Counter and store it into NV memory
    523            if ( setDefault )
    524            {
    525              bootCnt = 0;
    526            }
    527            else
    528            {
    529              bootCnt++;
    530            }
    531          
    532            osal_nv_write( ZCD_NV_BOOTCOUNTER, 0, sizeof(bootCnt), &bootCnt );
    533          #endif  // FEATURE_SYSTEM_STATS
    534          
    535            // Initialize the Extended PAN ID as my own extended address
    536            ZMacGetReq( ZMacExtAddr, zgExtendedPANID );
   \                     ??zgInit_0:
   \   000017                ; Setup parameters for call to function ZMacGetReq
   \   000017   7A..         MOV     R2,#zgExtendedPANID & 0xff
   \   000019   7B..         MOV     R3,#(zgExtendedPANID >> 8) & 0xff
   \   00001B   79E2         MOV     R1,#-0x1e
   \   00001D   12....       LCALL   `??ZMacGetReq::?relay`; Banked call to: ZMacGetReq
    537          
    538            // Initialize the items table
    539            zgInitItems( setDefault );
   \   000020                ; Setup parameters for call to function zgInitItems
   \   000020   EE           MOV     A,R6
   \   000021   F9           MOV     R1,A
   \   000022   12....       LCALL   `??zgInitItems::?relay`; Banked call to: zgInitItems
    540          
    541          #ifndef NONWK
    542            if ( ZG_SECURE_ENABLED )
    543            {
    544              // Initialize the Pre-Configured Key to the default key
    545              zgPreconfigKeyInit( setDefault );
   \   000025                ; Setup parameters for call to function osal_memcpy
   \   000025   75....       MOV     ?V0,#defaultKey & 0xff
   \   000028   75....       MOV     ?V1,#(defaultKey >> 8) & 0xff
   \   00002B   75..80       MOV     ?V2,#-0x80
   \   00002E   78..         MOV     R0,#?V0
   \   000030   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000033   7C10         MOV     R4,#0x10
   \   000035   7D00         MOV     R5,#0x0
   \   000037   7403         MOV     A,#0x3
   \   000039   12....       LCALL   ?XSTACK_DISP101_8
   \   00003C   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00003F   7403         MOV     A,#0x3
   \   000041   12....       LCALL   ?DEALLOC_XSTACK8
   \   000044                ; Setup parameters for call to function osal_nv_item_init
   \   000044   A8..         MOV     R0,?XSP + 0
   \   000046   A9..         MOV     R1,?XSP + 1
   \   000048   88..         MOV     ?V0,R0
   \   00004A   89..         MOV     ?V1,R1
   \   00004C   78..         MOV     R0,#?V0
   \   00004E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000051   7C10         MOV     R4,#0x10
   \   000053   7D00         MOV     R5,#0x0
   \   000055   7A62         MOV     R2,#0x62
   \   000057   7B00         MOV     R3,#0x0
   \   000059   12....       LCALL   `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   00005C   7402         MOV     A,#0x2
   \   00005E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000061   E9           MOV     A,R1
   \   000062   7025         JNZ     ??zgInit_1
   \   000064   EE           MOV     A,R6
   \   000065   A2E0         MOV     C,0xE0 /* A   */.0
   \   000067   5020         JNC     ??zgInit_1
   \   000069                ; Setup parameters for call to function osal_nv_write
   \   000069   78..         MOV     R0,#?V0
   \   00006B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00006E   75..10       MOV     ?V0,#0x10
   \   000071   75..00       MOV     ?V1,#0x0
   \   000074   78..         MOV     R0,#?V0
   \   000076   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000079   7C00         MOV     R4,#0x0
   \   00007B   7D00         MOV     R5,#0x0
   \   00007D   7A62         MOV     R2,#0x62
   \   00007F   7B00         MOV     R3,#0x0
   \   000081   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000084   7404         MOV     A,#0x4
   \   000086   12....       LCALL   ?DEALLOC_XSTACK8
   \                     ??zgInit_1:
   \   000089                ; Setup parameters for call to function osal_memset
   \   000089   7C10         MOV     R4,#0x10
   \   00008B   7D00         MOV     R5,#0x0
   \   00008D   7900         MOV     R1,#0x0
   \   00008F   AA..         MOV     R2,?XSP + 0
   \   000091   AB..         MOV     R3,?XSP + 1
   \   000093   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
    546          
    547              // Initialize NV items for all Keys: NWK, APS, TCLK and Master
    548              ZDSecMgrInitNVKeyTables( setDefault );
   \   000096                ; Setup parameters for call to function ZDSecMgrInitNVKeyTables
   \   000096   EE           MOV     A,R6
   \   000097   F9           MOV     R1,A
   \   000098   12....       LCALL   `??ZDSecMgrInitNVKeyTables::?relay`; Banked call to: ZDSecMgrInitNVKeyTables
    549            }
    550          #endif // NONWK
    551          
    552            // Clear the Config State default
    553            if ( setDefault )
   \   00009B   EE           MOV     A,R6
   \   00009C   A2E0         MOV     C,0xE0 /* A   */.0
   \   00009E   5007         JNC     ??zgInit_2
    554            {
    555              zgWriteStartupOptions( ZG_STARTUP_CLEAR, ZCD_STARTOPT_DEFAULT_CONFIG_STATE );
   \   0000A0                ; Setup parameters for call to function zgWriteStartupOptions
   \   0000A0   7A01         MOV     R2,#0x1
   \   0000A2   7900         MOV     R1,#0x0
   \   0000A4   12....       LCALL   `??zgWriteStartupOptions::?relay`; Banked call to: zgWriteStartupOptions
    556            }
    557          
    558            return ( ZSUCCESS );
   \                     ??zgInit_2:
   \   0000A7   7900         MOV     R1,#0x0
   \   0000A9   7410         MOV     A,#0x10
   \   0000AB   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000AE                REQUIRE ?Subroutine0
   \   0000AE                ; // Fall through to label ?Subroutine0
    559          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F03         MOV     R7,#0x3
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    560          
    561          /*********************************************************************
    562           * @fn          zgInitItems
    563           *
    564           * @brief       Initializes RAM variables from NV.  If NV items don't
    565           *              exist, then the NV is initialize with what is in RAM
    566           *              variables.
    567           *
    568           * @param       none
    569           *
    570           * @return      none
    571           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    572          void zgInitItems( uint8 setDefault )
   \                     zgInitItems:
    573          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V3,R1
    574            uint8  i = 0;
   \   000007   75..00       MOV     ?V2,#0x0
    575          
    576            if ( ZG_BUILD_COORDINATOR_TYPE && ( zgApsLinkKeyType == ZG_UNIQUE_LINK_KEY ) )
    577            {
    578              zgUseDefaultTCLK = FALSE;
    579            }
    580            else
    581            {
    582              // Most of the time default TCLK will be used
    583              zgUseDefaultTCLK = TRUE;
   \   00000A   90....       MOV     DPTR,#zgUseDefaultTCLK
   \   00000D   7401         MOV     A,#0x1
   \   00000F   F0           MOVX    @DPTR,A
   \   000010   801A         SJMP    ??zgInitItems_0
    584            }
    585          
    586            while ( zgItemTable[i].id != 0x00 )
    587            {
   \                     ??zgInitItems_1:
   \   000012                ; Setup parameters for call to function osal_nv_read
   \   000012   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000015   78..         MOV     R0,#?V0
   \   000017   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001A   7C00         MOV     R4,#0x0
   \   00001C   7D00         MOV     R5,#0x0
   \   00001E   EE           MOV     A,R6
   \   00001F   FA           MOV     R2,A
   \   000020   EF           MOV     A,R7
   \   000021   FB           MOV     R3,A
   \   000022   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \                     ??zgInitItems_2:
   \   000025   7404         MOV     A,#0x4
   \   000027   12....       LCALL   ?DEALLOC_XSTACK8
    588              // Initialize the item
    589              zgItemInit( zgItemTable[i].id, zgItemTable[i].len, zgItemTable[i].buf, setDefault  );
    590          
    591              // Move on to the next item
    592              i++;
   \                     ??zgInitItems_3:
   \   00002A   05..         INC     ?V2
   \                     ??zgInitItems_0:
   \   00002C   E5..         MOV     A,?V2
   \   00002E   75F006       MOV     B,#0x6
   \   000031   A4           MUL     AB
   \   000032   F8           MOV     R0,A
   \   000033   AAF0         MOV     R2,B
   \   000035   EA           MOV     A,R2
   \   000036   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   000039   607F         JZ      ??zgInitItems_4
   \   00003B   E5..         MOV     A,?V2
   \   00003D   75F006       MOV     B,#0x6
   \   000040   A4           MUL     AB
   \   000041   F8           MOV     R0,A
   \   000042   EA           MOV     A,R2
   \   000043   F9           MOV     R1,A
   \   000044   74..         MOV     A,#zgItemTable & 0xff
   \   000046   28           ADD     A,R0
   \   000047   F8           MOV     R0,A
   \   000048   74..         MOV     A,#(zgItemTable >> 8) & 0xff
   \   00004A   39           ADDC    A,R1
   \   00004B   F9           MOV     R1,A
   \   00004C   A3           INC     DPTR
   \   00004D   A3           INC     DPTR
   \   00004E   A3           INC     DPTR
   \   00004F   A3           INC     DPTR
   \   000050   E4           CLR     A
   \   000051   93           MOVC    A,@A+DPTR
   \   000052   F5..         MOV     ?V4,A
   \   000054   7401         MOV     A,#0x1
   \   000056   93           MOVC    A,@A+DPTR
   \   000057   F5..         MOV     ?V5,A
   \   000059   8882         MOV     DPL,R0
   \   00005B   8983         MOV     DPH,R1
   \   00005D   A3           INC     DPTR
   \   00005E   A3           INC     DPTR
   \   00005F   E4           CLR     A
   \   000060   93           MOVC    A,@A+DPTR
   \   000061   C0E0         PUSH    A
   \   000063   7401         MOV     A,#0x1
   \   000065   93           MOVC    A,@A+DPTR
   \   000066   F583         MOV     DPH,A
   \   000068   D082         POP     DPL
   \   00006A   8582..       MOV     ?V0,DPL
   \   00006D   8583..       MOV     ?V1,DPH
   \   000070   8882         MOV     DPL,R0
   \   000072   8983         MOV     DPH,R1
   \   000074   E4           CLR     A
   \   000075   93           MOVC    A,@A+DPTR
   \   000076   C0E0         PUSH    A
   \   000078   7401         MOV     A,#0x1
   \   00007A   93           MOVC    A,@A+DPTR
   \   00007B   F583         MOV     DPH,A
   \   00007D   D082         POP     DPL
   \   00007F   AE82         MOV     R6,DPL
   \   000081   AF83         MOV     R7,DPH
   \   000083                ; Setup parameters for call to function osal_nv_item_init
   \   000083   78..         MOV     R0,#?V4
   \   000085   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000088   AC..         MOV     R4,?V0
   \   00008A   AD..         MOV     R5,?V1
   \   00008C   EE           MOV     A,R6
   \   00008D   FA           MOV     R2,A
   \   00008E   EF           MOV     A,R7
   \   00008F   FB           MOV     R3,A
   \   000090   12....       LCALL   `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   000093   7402         MOV     A,#0x2
   \   000095   12....       LCALL   ?DEALLOC_XSTACK8
   \   000098   E9           MOV     A,R1
   \   000099   708F         JNZ     ??zgInitItems_3
   \   00009B   E5..         MOV     A,?V3
   \   00009D   78..         MOV     R0,#?V4
   \   00009F   7003         JNZ     $+5
   \   0000A1   02....       LJMP    ??zgInitItems_1 & 0xFFFF
   \   0000A4                ; Setup parameters for call to function osal_nv_write
   \   0000A4   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000A7   78..         MOV     R0,#?V0
   \   0000A9   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000AC   7C00         MOV     R4,#0x0
   \   0000AE   7D00         MOV     R5,#0x0
   \   0000B0   EE           MOV     A,R6
   \   0000B1   FA           MOV     R2,A
   \   0000B2   EF           MOV     A,R7
   \   0000B3   FB           MOV     R3,A
   \   0000B4   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   0000B7   02....       LJMP    ??zgInitItems_2 & 0xFFFF
    593            }
    594          }
   \                     ??zgInitItems_4:
   \   0000BA   7F06         MOV     R7,#0x6
   \   0000BC   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   F9           MOV     R1,A
   \   000001   74..         MOV     A,#zgItemTable & 0xff
   \   000003   28           ADD     A,R0
   \   000004   F582         MOV     DPL,A
   \   000006   74..         MOV     A,#(zgItemTable >> 8) & 0xff
   \   000008   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   00000B   E8           MOV     A,R0
   \   00000C   49           ORL     A,R1
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   39           ADDC    A,R1
   \   000001   F583         MOV     DPH,A
   \   000003   E4           CLR     A
   \   000004   93           MOVC    A,@A+DPTR
   \   000005   F8           MOV     R0,A
   \   000006   7401         MOV     A,#0x1
   \   000008   93           MOVC    A,@A+DPTR
   \   000009   F9           MOV     R1,A
   \   00000A   22           RET
    595          
    596          /*********************************************************************
    597           * @fn          zgReadStartupOptions
    598           *
    599           * @brief       Reads the ZCD_NV_STARTUP_OPTION NV Item.
    600           *
    601           * @param       none
    602           *
    603           * @return      the ZCD_NV_STARTUP_OPTION NV item
    604           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    605          uint8 zgReadStartupOptions( void )
   \                     zgReadStartupOptions:
    606          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    607            // Default to Use Config State and Use Network State
    608            uint8 startupOption = 0;
   \   00000A   12....       LCALL   ?Subroutine2 & 0xFFFF
    609          
    610            // This should have been done in ZMain.c, but just in case.
    611            if ( osal_nv_item_init( ZCD_NV_STARTUP_OPTION,
    612                                        sizeof(startupOption),
    613                                        &startupOption ) == ZSUCCESS )
   \                     ??CrossCallReturnLabel_4:
   \   00000D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000010   7C01         MOV     R4,#0x1
   \   000012   7D00         MOV     R5,#0x0
   \   000014   7A03         MOV     R2,#0x3
   \   000016   7B00         MOV     R3,#0x0
   \   000018   12....       LCALL   `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   00001B   7402         MOV     A,#0x2
   \   00001D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000020   E9           MOV     A,R1
   \   000021   7020         JNZ     ??zgReadStartupOptions_0
    614            {
    615              // Read saved startup control
    616              osal_nv_read( ZCD_NV_STARTUP_OPTION,
    617                            0,
    618                            sizeof( startupOption ),
    619                            &startupOption);
   \   000023                ; Setup parameters for call to function osal_nv_read
   \   000023   78..         MOV     R0,#?V0
   \   000025   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000028   75..01       MOV     ?V0,#0x1
   \   00002B   75..00       MOV     ?V1,#0x0
   \   00002E   78..         MOV     R0,#?V0
   \   000030   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000033   7C00         MOV     R4,#0x0
   \   000035   7D00         MOV     R5,#0x0
   \   000037   7A03         MOV     R2,#0x3
   \   000039   7B00         MOV     R3,#0x0
   \   00003B   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   00003E   7404         MOV     A,#0x4
   \   000040   12....       LCALL   ?DEALLOC_XSTACK8
    620            }
    621            return ( startupOption );
   \                     ??zgReadStartupOptions_0:
   \   000043   85..82       MOV     DPL,?XSP + 0
   \   000046   85..83       MOV     DPH,?XSP + 1
   \   000049   E0           MOVX    A,@DPTR
   \   00004A   F9           MOV     R1,A
   \   00004B                REQUIRE ?Subroutine1
   \   00004B                ; // Fall through to label ?Subroutine1
    622          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7401         MOV     A,#0x1
   \   000002   12....       LCALL   ?DEALLOC_XSTACK8
   \   000005   7F02         MOV     R7,#0x2
   \   000007   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006   E4           CLR     A
   \   000007                REQUIRE ??Subroutine5_0
   \   000007                ; // Fall through to label ??Subroutine5_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine5_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function osal_nv_item_init
   \   000001                ; Setup parameters for call to function osal_nv_read
   \   000001                ; Setup parameters for call to function osal_nv_write
   \   000001   A8..         MOV     R0,?XSP + 0
   \   000003   A9..         MOV     R1,?XSP + 1
   \   000005   88..         MOV     ?V0,R0
   \   000007   89..         MOV     ?V1,R1
   \   000009   78..         MOV     R0,#?V0
   \   00000B   22           RET
    623          
    624          /*********************************************************************
    625           * @fn          zgWriteStartupOptions
    626           *
    627           * @brief       Writes bits into the ZCD_NV_STARTUP_OPTION NV Item.
    628           *
    629           * @param       action - ZG_STARTUP_SET set bit, ZG_STARTUP_CLEAR to
    630           *               clear bit. The set bit is an OR operation, and the
    631           *               clear bit is an AND ~(bitOptions) operation.
    632           *
    633           * @param       bitOptions - which bits to perform action on:
    634           *                      ZCD_STARTOPT_DEFAULT_CONFIG_STATE
    635           *                      ZCD_STARTOPT_DEFAULT_NETWORK_STATE
    636           *
    637           * @return      ZSUCCESS if successful
    638           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    639          uint8 zgWriteStartupOptions( uint8 action, uint8 bitOptions )
   \                     zgWriteStartupOptions:
    640          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
   \   00000C   EA           MOV     A,R2
   \   00000D   FF           MOV     R7,A
    641            uint8 status;
    642            uint8 startupOptions = 0;
   \   00000E   12....       LCALL   ?Subroutine2 & 0xFFFF
    643          
    644            status = osal_nv_read( ZCD_NV_STARTUP_OPTION,
    645                          0,
    646                          sizeof( startupOptions ),
    647                          &startupOptions );
   \                     ??CrossCallReturnLabel_5:
   \   000011   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000014   75..01       MOV     ?V0,#0x1
   \   000017   75..00       MOV     ?V1,#0x0
   \   00001A   78..         MOV     R0,#?V0
   \   00001C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001F   7C00         MOV     R4,#0x0
   \   000021   7D00         MOV     R5,#0x0
   \   000023   7A03         MOV     R2,#0x3
   \   000025   7B00         MOV     R3,#0x0
   \   000027   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   00002A   7404         MOV     A,#0x4
   \   00002C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00002F   E9           MOV     A,R1
   \   000030   F9           MOV     R1,A
    648          
    649            if ( status == ZSUCCESS )
   \   000031   703E         JNZ     ??zgWriteStartupOptions_0
    650            {
    651              if ( action == ZG_STARTUP_SET )
   \   000033   74FF         MOV     A,#-0x1
   \   000035   6E           XRL     A,R6
   \   000036   700A         JNZ     ??zgWriteStartupOptions_1
    652              {
    653                // Set bits
    654                startupOptions |= bitOptions;
   \   000038   85..82       MOV     DPL,?XSP + 0
   \   00003B   85..83       MOV     DPH,?XSP + 1
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   4F           ORL     A,R7
   \   000040   800C         SJMP    ??zgWriteStartupOptions_2
    655              }
    656              else
    657              {
    658                // Clear bits
    659                startupOptions &= (bitOptions ^ 0xFF);
   \                     ??zgWriteStartupOptions_1:
   \   000042   74FF         MOV     A,#-0x1
   \   000044   6F           XRL     A,R7
   \   000045   F8           MOV     R0,A
   \   000046   85..82       MOV     DPL,?XSP + 0
   \   000049   85..83       MOV     DPH,?XSP + 1
   \   00004C   E0           MOVX    A,@DPTR
   \   00004D   58           ANL     A,R0
    660              }
    661          
    662              // Changed?
    663              status = osal_nv_write( ZCD_NV_STARTUP_OPTION,
    664                           0,
    665                           sizeof( startupOptions ),
    666                           &startupOptions );
    667            }
   \                     ??zgWriteStartupOptions_2:
   \   00004E   12....       LCALL   ??Subroutine5_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   000051   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000054   75..01       MOV     ?V0,#0x1
   \   000057   75..00       MOV     ?V1,#0x0
   \   00005A   78..         MOV     R0,#?V0
   \   00005C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005F   7C00         MOV     R4,#0x0
   \   000061   7D00         MOV     R5,#0x0
   \   000063   7A03         MOV     R2,#0x3
   \   000065   7B00         MOV     R3,#0x0
   \   000067   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   00006A   7404         MOV     A,#0x4
   \   00006C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00006F   E9           MOV     A,R1
   \   000070   F9           MOV     R1,A
    668          
    669            return ( status );
   \                     ??zgWriteStartupOptions_0:
   \   000071   02....       LJMP    ?Subroutine1 & 0xFFFF
    670          }
    671          
    672          /*********************************************************************
    673           * @fn          zgSetItem
    674           *
    675           * @brief       Set RAM variables from set-NV, if it exist in the zgItemTable
    676           *
    677           * @param       id - NV ID
    678           *              len - NV item length
    679           *              buf - pointer to the input buffer
    680           *
    681           * @return      none
    682           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    683          void zgSetItem( uint16 id, uint16 len, void *buf )
   \                     zgSetItem:
    684          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
    685          
    686            uint8  i = 0;
   \   000005   7E00         MOV     R6,#0x0
   \   000007   8001         SJMP    ??zgSetItem_0
    687          
    688            // Look up the NV item table
    689            while ( zgItemTable[i].id != 0x00 )
    690            {
    691              if( zgItemTable[i].id == id )
    692              {
    693                if ( zgItemTable[i].len == len )
    694                {
    695                  osal_memcpy( zgItemTable[i].buf, buf, len );
    696                }
    697                break;
    698              }
    699              // Move on to the next item
    700              i++;
   \                     ??zgSetItem_1:
   \   000009   0E           INC     R6
   \                     ??zgSetItem_0:
   \   00000A   EE           MOV     A,R6
   \   00000B   75F006       MOV     B,#0x6
   \   00000E   A4           MUL     AB
   \   00000F   F8           MOV     R0,A
   \   000010   AFF0         MOV     R7,B
   \   000012   EF           MOV     A,R7
   \   000013   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   000016   605E         JZ      ??zgSetItem_2
   \   000018   E4           CLR     A
   \   000019   93           MOVC    A,@A+DPTR
   \   00001A   F8           MOV     R0,A
   \   00001B   7401         MOV     A,#0x1
   \   00001D   93           MOVC    A,@A+DPTR
   \   00001E   F9           MOV     R1,A
   \   00001F   EA           MOV     A,R2
   \   000020   68           XRL     A,R0
   \   000021   7002         JNZ     ??zgSetItem_3
   \   000023   EB           MOV     A,R3
   \   000024   69           XRL     A,R1
   \                     ??zgSetItem_3:
   \   000025   70E2         JNZ     ??zgSetItem_1
   \   000027   EE           MOV     A,R6
   \   000028   75F006       MOV     B,#0x6
   \   00002B   A4           MUL     AB
   \   00002C   F8           MOV     R0,A
   \   00002D   EF           MOV     A,R7
   \   00002E   F9           MOV     R1,A
   \   00002F   74..         MOV     A,#(zgItemTable + 2) & 0xff
   \   000031   28           ADD     A,R0
   \   000032   F582         MOV     DPL,A
   \   000034   74..         MOV     A,#((zgItemTable + 2) >> 8) & 0xff
   \   000036   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   000039   EC           MOV     A,R4
   \   00003A   68           XRL     A,R0
   \   00003B   7002         JNZ     ??zgSetItem_4
   \   00003D   ED           MOV     A,R5
   \   00003E   69           XRL     A,R1
   \                     ??zgSetItem_4:
   \   00003F   7035         JNZ     ??zgSetItem_2
   \   000041                ; Setup parameters for call to function osal_memcpy
   \   000041   740B         MOV     A,#0xb
   \   000043   12....       LCALL   ?XSTACK_DISP0_8
   \   000046   E0           MOVX    A,@DPTR
   \   000047   F5..         MOV     ?V0,A
   \   000049   A3           INC     DPTR
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   F5..         MOV     ?V1,A
   \   00004D   75..00       MOV     ?V2,#0x0
   \   000050   78..         MOV     R0,#?V0
   \   000052   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000055   EE           MOV     A,R6
   \   000056   75F006       MOV     B,#0x6
   \   000059   A4           MUL     AB
   \   00005A   F8           MOV     R0,A
   \   00005B   EF           MOV     A,R7
   \   00005C   F9           MOV     R1,A
   \   00005D   74..         MOV     A,#(zgItemTable + 4) & 0xff
   \   00005F   28           ADD     A,R0
   \   000060   F582         MOV     DPL,A
   \   000062   74..         MOV     A,#((zgItemTable + 4) >> 8) & 0xff
   \   000064   39           ADDC    A,R1
   \   000065   F583         MOV     DPH,A
   \   000067   E4           CLR     A
   \   000068   93           MOVC    A,@A+DPTR
   \   000069   FA           MOV     R2,A
   \   00006A   7401         MOV     A,#0x1
   \   00006C   93           MOVC    A,@A+DPTR
   \   00006D   FB           MOV     R3,A
   \   00006E   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000071   7403         MOV     A,#0x3
   \   000073   12....       LCALL   ?DEALLOC_XSTACK8
    701            }
    702          }
   \                     ??zgSetItem_2:
   \   000076   02....       LJMP    ?Subroutine0 & 0xFFFF

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgPollRate>`:
   \   000000   3200         DW 50

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgQueuedPollRate>`:
   \   000000   6400         DW 100

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgResponsePollRate>`:
   \   000000   6400         DW 100

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgRejoinPollRate>`:
   \   000000   B801         DW 440

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgMaxDataRetries>`:
   \   000000   02           DB 2

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgMaxPollFailureRetries>`:
   \   000000   02           DB 2

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgDefaultChannelList>`:
   \   000000   00080000     DD 2048

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgDefaultStartingScanDuratio`:
   \   000000   05           DB 5

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgStackProfile>`:
   \   000000   02           DB 2

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgIndirectMsgTimeout>`:
   \   000000   07           DB 7

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgSecurityMode>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgSecurePermitJoin>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgRouteDiscoveryTime>`:
   \   000000   05           DB 5

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgRouteExpiryTime>`:
   \   000000   1E           DB 30

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgMaxBcastRetires>`:
   \   000000   02           DB 2

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgPassiveAckTimeout>`:
   \   000000   05           DB 5

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgBcastDeliveryTime>`:
   \   000000   1E           DB 30

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgNwkMode>`:
   \   000000   02           DB 2

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgConcentratorRadius>`:
   \   000000   0A           DB 10

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgNwkSrcRtgExpiryTime>`:
   \   000000   0A           DB 10

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgNwkLeaveRequestAllowed>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgApscMaxFrameRetries>`:
   \   000000   03           DB 3

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgApscAckWaitDurationPolled>`:
   \   000000   B80B         DW 3000

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgApsAckWaitMultiplier>`:
   \   000000   02           DB 2

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgApsDefaultMaxBindingTime>`:
   \   000000   803E         DW 16000

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgApsUseInsecureJoin>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgApsNonMemberRadius>`:
   \   000000   02           DB 2

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgNwkCommissionedNwkAddr>`:
   \   000000   FEFF         DW 65534

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgApscDupRejTimeoutInc>`:
   \   000000   E803         DW 1000

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgApscDupRejTimeoutCount>`:
   \   000000   0A           DB 10

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgApsMinDupRejTableSize>`:
   \   000000   0500         DW 5

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgApsLinkKeyType>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgConfigPANID>`:
   \   000000   FFFF         DW 65535

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgDeviceLogicalType>`:
   \   000000   02           DB 2

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgStartDelay>`:
   \   000000   0A           DB 10

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgNwkMgrMinTransmissions>`:
   \   000000   14           DB 20

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgNwkMgrMode>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgSapiEndpoint>`:
   \   000000   E0           DB 224

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zgInit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zgInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zgInitItems::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zgInitItems

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zgReadStartupOptions::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zgReadStartupOptions

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zgWriteStartupOptions::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zgWriteStartupOptions

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zgSetItem::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zgSetItem
    703          
    704          #ifndef NONWK
    705          /*********************************************************************
    706           * @fn       zgPreconfigKeyInit()
    707           *
    708           * @brief
    709           *
    710           *   Initialize ZCD_NV_PRECFGKEY NV item. If the item doesn't exist in NV memory,
    711           *   write the system default (value passed in) into NV memory. But if
    712           *   it exists do not overwrite it.
    713           *
    714           *   Also, if setDefault is TRUE and the item exists, we will write
    715           *   the default value to NV space.
    716           *
    717           * @param   setDefault - TRUE to set default
    718           *
    719           * @return  ZSUCCESS if successful, NV_ITEM_UNINIT if item did not
    720           *          exist in NV, NV_OPER_FAILED if failure.
    721           */
    722          static uint8 zgPreconfigKeyInit( uint8 setDefault )
    723          {
    724            uint8 zgPreConfigKey[SEC_KEY_LEN];
    725            uint8 status;
    726          
    727            // Initialize the Pre-Configured Key to the default key
    728            osal_memcpy( zgPreConfigKey, defaultKey, SEC_KEY_LEN );
    729          
    730            // If the item doesn't exist in NV memory, create and initialize it
    731            status = osal_nv_item_init( ZCD_NV_PRECFGKEY, SEC_KEY_LEN, zgPreConfigKey );
    732            if ( status == ZSUCCESS )
    733            {
    734              if ( setDefault )
    735              {
    736                // Write the default value back to NV
    737                status =  osal_nv_write( ZCD_NV_PRECFGKEY, 0, SEC_KEY_LEN, zgPreConfigKey );
    738              }
    739            }
    740          
    741            // clear local copy of default key
    742            osal_memset(zgPreConfigKey, 0x00, SEC_KEY_LEN);
    743          
    744            return (status);
    745          }
    746          #endif
    747          
    748          /*********************************************************************
    749          *********************************************************************/

   Maximum stack usage in bytes:

   XSTACK Function
   ------ --------
     31   zgInit
       27   -> ZDSecMgrInitNVKeyTables
       27   -> ZMacGetReq
       30   -> osal_memcpy
       27   -> osal_memset
       29   -> osal_nv_item_init
       31   -> osal_nv_write
       27   -> zgInitItems
       27   -> zgReadStartupOptions
       27   -> zgWriteStartupOptions
     45   zgInitItems
       16   -> osal_nv_item_init
       18   -> osal_nv_read
       18   -> osal_nv_write
     42   zgReadStartupOptions
       13   -> osal_nv_item_init
       15   -> osal_nv_read
     16   zgSetItem
       14   -> osal_memcpy
     42   zgWriteStartupOptions
       15   -> osal_nv_read
       15   -> osal_nv_write


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       1  ?<Initializer for zgApsAckWaitMultiplier>
       2  ?<Initializer for zgApsDefaultMaxBindingTime>
       1  ?<Initializer for zgApsLinkKeyType>
       2  ?<Initializer for zgApsMinDupRejTableSize>
       1  ?<Initializer for zgApsNonMemberRadius>
       1  ?<Initializer for zgApsUseInsecureJoin>
       2  ?<Initializer for zgApscAckWaitDurationPolled>
       1  ?<Initializer for zgApscDupRejTimeoutCount>
       2  ?<Initializer for zgApscDupRejTimeoutInc>
       1  ?<Initializer for zgApscMaxFrameRetries>
       1  ?<Initializer for zgBcastDeliveryTime>
       1  ?<Initializer for zgConcentratorRadius>
       2  ?<Initializer for zgConfigPANID>
       4  ?<Initializer for zgDefaultChannelList>
       1  ?<Initializer for zgDefaultStartingScanDuratio
       1  ?<Initializer for zgDeviceLogicalType>
       1  ?<Initializer for zgIndirectMsgTimeout>
       1  ?<Initializer for zgMaxBcastRetires>
       1  ?<Initializer for zgMaxDataRetries>
       1  ?<Initializer for zgMaxPollFailureRetries>
       2  ?<Initializer for zgNwkCommissionedNwkAddr>
       1  ?<Initializer for zgNwkLeaveRequestAllowed>
       1  ?<Initializer for zgNwkMgrMinTransmissions>
       1  ?<Initializer for zgNwkMgrMode>
       1  ?<Initializer for zgNwkMode>
       1  ?<Initializer for zgNwkSrcRtgExpiryTime>
       1  ?<Initializer for zgPassiveAckTimeout>
       2  ?<Initializer for zgPollRate>
       2  ?<Initializer for zgQueuedPollRate>
       2  ?<Initializer for zgRejoinPollRate>
       2  ?<Initializer for zgResponsePollRate>
       1  ?<Initializer for zgRouteDiscoveryTime>
       1  ?<Initializer for zgRouteExpiryTime>
       1  ?<Initializer for zgSapiEndpoint>
       1  ?<Initializer for zgSecurePermitJoin>
       1  ?<Initializer for zgSecurityMode>
       1  ?<Initializer for zgStackProfile>
       1  ?<Initializer for zgStartDelay>
      12  ??Subroutine5_0
       5  ?Subroutine0
      10  ?Subroutine1
       7  ?Subroutine2
      14  ?Subroutine3
      11  ?Subroutine4
       1  zgApsAckWaitMultiplier
       1  zgApsAllowR19Sec
       2  zgApsDefaultMaxBindingTime
       1  zgApsLinkKeyType
       2  zgApsMinDupRejTableSize
       1  zgApsNonMemberRadius
       8  zgApsTrustCenterAddr
       8  zgApsUseExtendedPANID
       1  zgApsUseInsecureJoin
       2  zgApscAckWaitDurationPolled
       1  zgApscDupRejTimeoutCount
       2  zgApscDupRejTimeoutInc
       1  zgApscMaxFrameRetries
       1  zgBcastDeliveryTime
       1  zgChildAgingEnable
       1  zgConcentratorDiscoveryTime
       1  zgConcentratorEnable
       1  zgConcentratorRC
       1  zgConcentratorRadius
       2  zgConfigPANID
       4  zgDefaultChannelList
       1  zgDefaultStartingScanDuration
       1  zgDeviceLogicalType
       8  zgExtendedPANID
       1  zgIndirectMsgTimeout
     174  zgInit
       6  zgInit::?relay
     191  zgInitItems
       6  zgInitItems::?relay
       6  zgItemTable
       1  zgMaxBcastRetires
       1  zgMaxDataRetries
       1  zgMaxPollFailureRetries
       2  zgNwkCommissionedNwkAddr
       1  zgNwkLeaveRequestAllowed
       1  zgNwkMgrMinTransmissions
       1  zgNwkMgrMode
       1  zgNwkMode
       1  zgNwkSrcRtgExpiryTime
       1  zgPassiveAckTimeout
       2  zgPollRate
       1  zgPreConfigKeys
       2  zgQueuedPollRate
      75  zgReadStartupOptions
       6  zgReadStartupOptions::?relay
       2  zgRejoinPollRate
       2  zgResponsePollRate
       1  zgRouteDiscoveryTime
       1  zgRouteExpiryTime
       1  zgRouterOffAssocCleanup
       1  zgSapiEndpoint
       1  zgSecurePermitJoin
       1  zgSecurityMode
     121  zgSetItem
       6  zgSetItem::?relay
       1  zgStackProfile
       1  zgStartDelay
       1  zgUseDefaultTCLK
     116  zgWriteStartupOptions
       6  zgWriteStartupOptions::?relay
       1  zgZdoDirectCB

 
 736 bytes in segment BANKED_CODE
  30 bytes in segment BANK_RELAYS
   6 bytes in segment CODE_C
  51 bytes in segment XDATA_I
  51 bytes in segment XDATA_ID
  33 bytes in segment XDATA_Z
 
 823 bytes of CODE  memory
  84 bytes of XDATA memory

Errors: none
Warnings: none
