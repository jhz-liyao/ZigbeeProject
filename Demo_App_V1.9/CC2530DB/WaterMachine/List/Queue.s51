///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V9.30.1.3056 for 8051               25/Oct/2016  15:28:52
// Copyright 2004-2015 IAR Systems AB.
// Standalone license - IAR Embedded Workbench for 8051
//
//    Core               =  plain
//    Code model         =  banked
//    Data model         =  large
//    Calling convention =  xdata reentrant
//    Constant location  =  data_rom
//    Dptr setup         =  1,16
//                          
//    Source file        =  
//        E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\Frame\Queue.c
//    Command line       =  
//        -f "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"
//        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
//        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f
//        "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
//        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
//        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
//        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
//        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
//        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
//        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
//        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
//        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
//        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
//        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
//        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
//        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
//        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
//        -DPOLL_RATE=50 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
//        -DREJOIN_POLL_RATE=440 "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack
//        Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\Frame\Queue.c"
//        -D HAL_UART=TRUE -D HAL_UART_ISR=1 -D HAL_UART_DMA=0 -D LOG_OUT -D
//        UART1_PROTOCOL_RESOLVER=1 -D xISQC -D NWK_AUTO_POLL -D xZTOOL_P1 -D
//        ISR_KEYINTERRUPT -D xMT_TASK -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D
//        xLCD_SUPPORTED=DEBUG -D xPOWER_SAVING -lC
//        "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\WaterMachine\List"
//        -lA "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\WaterMachine\List"
//        --diag_suppress Pe001,Pa010 -o
//        "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\WaterMachine\Obj"
//        -e --no_code_motion --debug --core=plain --dptr=16,1
//        --data_model=large --code_model=banked
//        --calling_convention=xdata_reentrant --place_constants=data_rom
//        --nr_virtual_regs 8 -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack
//        Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\"
//        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\..\Source\"
//        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\..\Frame\"
//        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\..\Module\WaterMachine\"
//        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\..\..\..\ZMain\TI2530DB\"
//        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\hal\include\"
//        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
//        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\mac\include\"
//        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
//        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
//        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
//        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\mt\"
//        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\osal\include\"
//        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\services\saddr\"
//        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\services\sdata\"
//        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\stack\af\"
//        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
//        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
//        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\stack\sec\"
//        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\stack\sys\"
//        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
//        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\zmac\"
//        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
//        -Ohz
//    List file          =  
//        E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\WaterMachine\List\Queue.s51
//
///////////////////////////////////////////////////////////////////////////////

        NAME Queue

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?V0
        EXTERN ?V1
        EXTERN ?V2
        EXTERN ?V3
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?US_DIV_MOD
        EXTERN __INIT_XDATA_Z

        PUBLIC `??Queue_Empty_Size::?relay`
        FUNCTION `??Queue_Empty_Size::?relay`,0203H
        PUBLIC `??Queue_Free::?relay`
        FUNCTION `??Queue_Free::?relay`,0203H
        PUBLIC `??Queue_Get::?relay`
        FUNCTION `??Queue_Get::?relay`,0203H
        PUBLIC `??Queue_Init::?relay`
        FUNCTION `??Queue_Init::?relay`,0203H
        PUBLIC `??Queue_Put::?relay`
        FUNCTION `??Queue_Put::?relay`,0203H
        PUBLIC `??Queue_Size::?relay`
        FUNCTION `??Queue_Size::?relay`,0203H
        PUBLIC Queue_Empty_Size
        FUNCTION Queue_Empty_Size,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 4, STACK
        PUBLIC Queue_Free
        FUNCTION Queue_Free,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC Queue_Get
        FUNCTION Queue_Get,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC Queue_Init
        FUNCTION Queue_Init,080203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 11, STACK
        PUBLIC Queue_Put
        FUNCTION Queue_Put,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC Queue_Size
        FUNCTION Queue_Size,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 4, STACK
        PUBLIC queue_list
        PUBLIC queue_locd
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource SP:8, PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B SameValue
          CFI A SameValue
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT SameValue
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon1
        
memcpy              SYMBOL "memcpy"
`??memcpy::?relay`  SYMBOL "?relay", memcpy
Queue_Empty_Size    SYMBOL "Queue_Empty_Size"
`??Queue_Empty_Size::?relay` SYMBOL "?relay", Queue_Empty_Size
Queue_Free          SYMBOL "Queue_Free"
`??Queue_Free::?relay` SYMBOL "?relay", Queue_Free
Queue_Get           SYMBOL "Queue_Get"
`??Queue_Get::?relay` SYMBOL "?relay", Queue_Get
Queue_Init          SYMBOL "Queue_Init"
`??Queue_Init::?relay` SYMBOL "?relay", Queue_Init
Queue_Put           SYMBOL "Queue_Put"
`??Queue_Put::?relay` SYMBOL "?relay", Queue_Put
Queue_Size          SYMBOL "Queue_Size"
`??Queue_Size::?relay` SYMBOL "?relay", Queue_Size

        EXTERN `??memcpy::?relay`
        FUNCTION `??memcpy::?relay`,00H
        EXTERN memcpy
        FUNCTION memcpy,010202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC

// E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh 1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\Frame\Queue.c
//    1 #include <stdio.h>
//    2 #include <string.h>
//    3 #include "Queue.h"  
//    4 /*
//    5  *工具包
//    6  *author：李尧 
//    7  *time：2015年8月26日10:41:23
//    8  */
//    9 
//   10 //###################################队列相关函数###################################
//   11 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   12 QUEUE_T queue_list[QUEUE_MAXNUM] = {0}; 
queue_list:
        DS 70
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   13 u8 queue_locd = 0;
queue_locd:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   14 /****************************************************
//   15 	函数名:	queue_init
//   16 	功能:	队列初始化
//   17 	参数:	数组名，数组单个元素大小，数组元素个数
//   18 	返回值:	队列句柄 或 NULL
//   19 	作者:	liyao 2015年9月8日14:10:51
//   20 ****************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   21 QUEUE_T* Queue_Init(void* _array,uint8_t _single_size ,uint16_t _count){ 
Queue_Init:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function Queue_Init
        CODE
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        MOV     A,#-0xb
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     ?V0,R1
//   22 	uint8_t i = 0;
        MOV     ?V1,#0x0
//   23 	QUEUE_T* queue = NULL;
        MOV     R2,#0x0
        MOV     R3,#0x0
//   24 	for(i = 0; i < QUEUE_MAXNUM; i++)
//   25 		if(queue_list[i].use_state == 0)
??Queue_Init_0:
        MOV     A,?V1
        MOV     B,#0xe
        MUL     AB
        MOV     R0,A
        MOV     ?V2,B
        MOV     R1,?V2
        MOV     A,#(queue_list + 12) & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#((queue_list + 12) >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        MOVX    A,@DPTR
        JNZ     ??Queue_Init_1
//   26 			queue = &queue_list[i];
        MOV     A,#queue_list & 0xff
        ADD     A,R0
        MOV     R2,A
        MOV     A,#(queue_list >> 8) & 0xff
        ADDC    A,R1
        MOV     R3,A
??Queue_Init_1:
        INC     ?V1
        MOV     A,?V1
        CLR     C
        SUBB    A,#0x5
        JC      ??Queue_Init_0
//   27 	if(queue == NULL)
        MOV     A,R2
        ORL     A,R3
        JNZ     ??Queue_Init_2
//   28 		return NULL;
        MOV     R2,#0x0
        MOV     R3,#0x0
        SJMP    ??Queue_Init_3
//   29 	queue->use_state = 1;
??Queue_Init_2:
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_8:
        MOV     A,#0x1
        MOVX    @DPTR,A
//   30 	queue->single_size = _single_size;
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOV     A,?V0
        LCALL   ?Subroutine8 & 0xFFFF
//   31 	queue->count = _count;
??CrossCallReturnLabel_10:
        MOV     A,R4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R5
        MOVX    @DPTR,A
//   32 	queue->start = queue->end = queue->num = queue->full_flag =0; 
        LCALL   ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_12:
        CLR     A
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_2:
        INC     DPTR
        INC     DPTR
        MOVX    @DPTR,A
        INC     DPTR
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_3:
        MOVX    @DPTR,A
        INC     DPTR
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_11:
        INC     DPTR
        INC     DPTR
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//   33 	queue->data = _array;
        MOV     DPL,R2
        MOV     DPH,R3
        MOV     A,R6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R7
        MOVX    @DPTR,A
//   34 	return queue;
??Queue_Init_3:
        MOV     R7,#0x3
        LJMP    ?BANKED_LEAVE_XDATA
//   35 }
          CFI EndBlock cfiBlock0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine8:
          CFI Block cfiCond1 Using cfiCommon0
          CFI Function Queue_Init
          CFI Conditional ??CrossCallReturnLabel_10
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond2 Using cfiCommon0
          CFI (cfiCond2) Function Queue_Init
          CFI (cfiCond2) Conditional ??CrossCallReturnLabel_11
          CFI (cfiCond2) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond2) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond2) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond2) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond2) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond2) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond2) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond2) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond2) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond2) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond2) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond2) CFA_SP SP+-2
          CFI (cfiCond2) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiPicker3 Using cfiCommon1
          CFI (cfiPicker3) NoFunction
          CFI (cfiPicker3) Picker
        LCALL   ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_16:
        RET
          CFI EndBlock cfiCond1
          CFI EndBlock cfiCond2
          CFI EndBlock cfiPicker3

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine11:
          CFI Block cfiCond4 Using cfiCommon0
          CFI Function Queue_Init
          CFI Conditional ??CrossCallReturnLabel_16, ??CrossCallReturnLabel_10
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond5 Using cfiCommon0
          CFI (cfiCond5) Function Queue_Init
          CFI (cfiCond5) Conditional ??CrossCallReturnLabel_16, ??CrossCallReturnLabel_11
          CFI (cfiCond5) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond5) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond5) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond5) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond5) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond5) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond5) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond5) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond5) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond5) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond5) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond5) CFA_SP SP+-4
          CFI (cfiCond5) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond6 Using cfiCommon0
          CFI (cfiCond6) Function Queue_Init
          CFI (cfiCond6) Conditional ??CrossCallReturnLabel_17, ??CrossCallReturnLabel_2
          CFI (cfiCond6) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond6) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond6) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond6) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond6) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond6) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond6) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond6) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond6) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond6) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond6) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond6) CFA_SP SP+-4
          CFI (cfiCond6) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond7 Using cfiCommon0
          CFI (cfiCond7) Function Queue_Init
          CFI (cfiCond7) Conditional ??CrossCallReturnLabel_17, ??CrossCallReturnLabel_3
          CFI (cfiCond7) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond7) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond7) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond7) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond7) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond7) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond7) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond7) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond7) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond7) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond7) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond7) CFA_SP SP+-4
          CFI (cfiCond7) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiPicker8 Using cfiCommon1
          CFI (cfiPicker8) NoFunction
          CFI (cfiPicker8) Picker
        MOVX    @DPTR,A
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        RET
          CFI EndBlock cfiCond4
          CFI EndBlock cfiCond5
          CFI EndBlock cfiCond6
          CFI EndBlock cfiCond7
          CFI EndBlock cfiPicker8

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
          CFI Block cfiCond9 Using cfiCommon0
          CFI Function Queue_Init
          CFI Conditional ??CrossCallReturnLabel_2
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond10 Using cfiCommon0
          CFI (cfiCond10) Function Queue_Init
          CFI (cfiCond10) Conditional ??CrossCallReturnLabel_3
          CFI (cfiCond10) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond10) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond10) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond10) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond10) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond10) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond10) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond10) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond10) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond10) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond10) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond10) CFA_SP SP+-2
          CFI (cfiCond10) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiPicker11 Using cfiCommon1
          CFI (cfiPicker11) NoFunction
          CFI (cfiPicker11) Picker
        LCALL   ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_17:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        RET
          CFI EndBlock cfiCond9
          CFI EndBlock cfiCond10
          CFI EndBlock cfiPicker11
//   36 
//   37 /****************************************************
//   38 	函数名:	queue_put
//   39 	功能:	数据插入到队列
//   40 	参数:	队列句柄，数据
//   41 	作者:	liyao 2015年9月8日14:10:51
//   42 ****************************************************/
//   43 /*int8_t queue_put(QUEUE_T* queue,int32* _data){
//   44 		if(queue->num == queue->count)  
//   45 			return -1;
//   46 		switch(queue->single_size){ 
//   47 			case 1:((int8_t*)queue->data)[queue->start] = (int8_t)_data ;	break;
//   48 			case 2:((int16_t*)queue->data)[queue->start] = (int16_t)_data;	break;
//   49 			case 4:((int32_t*)queue->data)[queue->start] = (int32_t)_data;	break;
//   50 			default:return -1;
//   51 		}
//   52 		queue->start = ((++queue->start) % queue->count);
//   53 		queue->num ++;
//   54 		return 0;
//   55 }*/
//   56 
//   57 /****************************************************
//   58 	函数名:	queue_get
//   59 	功能:	从队列取出数据
//   60 	参数:	队列句柄，数据容器（回填）
//   61 	作者:	liyao 2015年9月8日14:10:51
//   62 ****************************************************/
//   63 /*int8_t queue_get(QUEUE_T* queue, int32_t* _data){
//   64 		if(queue->num == 0) 
//   65 			return -1;
//   66 		switch(queue->single_size){
//   67 			case 1:*_data = ((int8_t*)queue->data)[queue->end];
//   68 										  ((int8_t*)queue->data)[queue->end] = 0;	break;
//   69 			case 2:*_data = ((int16_t*)queue->data)[queue->end];
//   70 											((int16_t*)queue->data)[queue->end] = 0;			break;
//   71 			case 4:*_data = ((int32_t*)queue->data)[queue->end];
//   72 											((int32_t*)queue->data)[queue->end] = 0;break;
//   73 			default:return -1;
//   74 		}
//   75 		queue->end = ((++queue->end) % queue->count);
//   76 		queue->num --;
//   77 		return 0;
//   78 }*/
//   79 #define QUEUE_LOCK do{if(queue->locked == 1) return -1;else queue->locked = 1;}while(0);
//   80 #define QUEUE_UNLOCK do{queue->locked = 0;}while(0);
//   81 /****************************************************
//   82 	函数名:	queue_put 
//   83 	功能:	数据插入到队列
//   84 	参数:	队列句柄，数据
//   85 	作者:	liyao 2015年9月8日14:10:51
//   86 ****************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   87 int8_t Queue_Put(QUEUE_T* queue,void* _data){
Queue_Put:
          CFI Block cfiBlock12 Using cfiCommon0
          CFI Function Queue_Put
        CODE
        FUNCALL Queue_Put, memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//   88 		if(queue->full_flag == 1)  
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_6:
        XRL     A,#0x1
        JNZ     ??Queue_Put_0
//   89 			return -1;
        MOV     R1,#-0x1
        SJMP    ??Queue_Put_1
//   90 		//QUEUE_LOCK;
//   91 		memcpy((char*)queue->data + (queue->start * queue->single_size),_data,queue->single_size);
??Queue_Put_0:
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V2,A
        MOV     ?V3,#0x0
        MOV     A,R6
        ADD     A,#0x5
        MOV     ?V0,A
        CLR     A
        ADDC    A,R7
        MOV     ?V1,A
        ; Setup parameters for call to function memcpy
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_4:
        MOV     R2,B
        MOV     B,?V2
        MOV     A,R1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        ADD     A,R0
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R1
        MOV     R3,A
        LCALL   `??memcpy::?relay`   ; Banked call to: memcpy
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
//   92 		queue->start = ((++queue->start) % queue->count);
        LCALL   ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_0:
        LCALL   ?US_DIV_MOD
        MOV     ?V2,R2
        MOV     ?V3,R3
        MOV     R0,?V2
        MOV     R1,?V3
        MOV     DPL,?V0
        MOV     DPH,?V1
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//   93 		if(queue->start == queue->end)
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R0
        JNZ     ??Queue_Put_2
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R1
??Queue_Put_2:
        JNZ     ??Queue_Put_3
//   94 			queue->full_flag = 1;
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_14:
        MOV     A,#0x1
        MOVX    @DPTR,A
//   95 		//queue->num ++;
//   96 		//QUEUE_UNLOCK
//   97 		return 0;
??Queue_Put_3:
        MOV     R1,#0x0
??Queue_Put_1:
          CFI EndBlock cfiBlock12
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0
//   98 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
          CFI Block cfiBlock13 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock13
//   99 
//  100 /****************************************************
//  101 	函数名:	queue_get
//  102 	功能:	从队列取出数据
//  103 	参数:	队列句柄，数据容器（回填）
//  104 	作者:	liyao 2015年9月8日14:10:51
//  105 ****************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  106 int8_t Queue_Get(QUEUE_T* queue, void* _data){
Queue_Get:
          CFI Block cfiBlock14 Using cfiCommon0
          CFI Function Queue_Get
        CODE
        FUNCALL Queue_Get, memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     A,R4
        MOV     R2,A
        MOV     A,R5
        MOV     R3,A
//  107 		if(queue->full_flag == 0 && queue->start == queue->end) 
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_7:
        JNZ     ??Queue_Get_0
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ??Subroutine14_0 & 0xFFFF
??CrossCallReturnLabel_21:
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R0
        JNZ     ??Queue_Get_1
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R1
??Queue_Get_1:
        JNZ     ??Queue_Get_0
//  108 			return -1;
        MOV     R1,#-0x1
        SJMP    ??Queue_Get_2
//  109 		//QUEUE_LOCK;
//  110 		memcpy(_data,(char*)queue->data + (queue->end * queue->single_size),queue->single_size);
??Queue_Get_0:
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V2,A
        MOV     ?V3,#0x0
        MOV     A,R6
        ADD     A,#0x7
        MOV     ?V0,A
        CLR     A
        ADDC    A,R7
        MOV     ?V1,A
        ; Setup parameters for call to function memcpy
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_5:
        MOV     R4,B
        MOV     B,?V2
        MOV     A,R1
        MUL     AB
        ADD     A,R4
        MOV     R1,A
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        ADD     A,R0
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R1
        MOV     R5,A
        LCALL   `??memcpy::?relay`   ; Banked call to: memcpy
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
//  111 		queue->end = ((++queue->end) % queue->count);
        LCALL   ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_1:
        LCALL   ?US_DIV_MOD
        MOV     DPL,?V0
        MOV     DPH,?V1
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
//  112 		queue->full_flag = 0;
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_15:
        CLR     A
        MOVX    @DPTR,A
//  113 		//queue->num --;
//  114 		//QUEUE_UNLOCK;
//  115 		return 0;
        MOV     R1,A
??Queue_Get_2:
        LJMP    ?Subroutine0 & 0xFFFF
//  116 }
          CFI EndBlock cfiBlock14

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine10:
          CFI Block cfiCond15 Using cfiCommon0
          CFI Function Queue_Put
          CFI Conditional ??CrossCallReturnLabel_14
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond16 Using cfiCommon0
          CFI (cfiCond16) Function Queue_Get
          CFI (cfiCond16) Conditional ??CrossCallReturnLabel_15
          CFI (cfiCond16) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond16) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond16) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond16) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond16) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond16) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond16) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond16) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond16) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond16) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond16) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond16) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond16) CFA_SP SP+-2
          CFI (cfiCond16) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker17 Using cfiCommon1
          CFI (cfiPicker17) NoFunction
          CFI (cfiPicker17) Picker
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_19:
        RET
          CFI EndBlock cfiCond15
          CFI EndBlock cfiCond16
          CFI EndBlock cfiPicker17

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine12:
          CFI Block cfiCond18 Using cfiCommon0
          CFI Function Queue_Put
          CFI Conditional ??CrossCallReturnLabel_19, ??CrossCallReturnLabel_14
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond19 Using cfiCommon0
          CFI (cfiCond19) Function Queue_Get
          CFI (cfiCond19) Conditional ??CrossCallReturnLabel_19, ??CrossCallReturnLabel_15
          CFI (cfiCond19) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond19) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond19) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond19) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond19) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond19) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond19) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond19) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond19) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond19) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond19) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond19) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond19) CFA_SP SP+-4
          CFI (cfiCond19) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond20 Using cfiCommon0
          CFI (cfiCond20) Function Queue_Put
          CFI (cfiCond20) Conditional ??CrossCallReturnLabel_18, ??CrossCallReturnLabel_6
          CFI (cfiCond20) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond20) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond20) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond20) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond20) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond20) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond20) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond20) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond20) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond20) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond20) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond20) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond20) CFA_SP SP+-4
          CFI (cfiCond20) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond21 Using cfiCommon0
          CFI (cfiCond21) Function Queue_Get
          CFI (cfiCond21) Conditional ??CrossCallReturnLabel_18, ??CrossCallReturnLabel_7
          CFI (cfiCond21) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond21) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond21) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond21) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond21) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond21) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond21) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond21) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond21) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond21) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond21) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond21) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond21) CFA_SP SP+-4
          CFI (cfiCond21) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker22 Using cfiCommon1
          CFI (cfiPicker22) NoFunction
          CFI (cfiPicker22) Picker
        MOV     A,R6
        ADD     A,#0xb
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        RET
          CFI EndBlock cfiCond18
          CFI EndBlock cfiCond19
          CFI EndBlock cfiCond20
          CFI EndBlock cfiCond21
          CFI EndBlock cfiPicker22

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
          CFI Block cfiCond23 Using cfiCommon0
          CFI Function Queue_Put
          CFI Conditional ??CrossCallReturnLabel_6
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond24 Using cfiCommon0
          CFI (cfiCond24) Function Queue_Get
          CFI (cfiCond24) Conditional ??CrossCallReturnLabel_7
          CFI (cfiCond24) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond24) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond24) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond24) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond24) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond24) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond24) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond24) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond24) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond24) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond24) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond24) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond24) CFA_SP SP+-2
          CFI (cfiCond24) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker25 Using cfiCommon1
          CFI (cfiPicker25) NoFunction
          CFI (cfiPicker25) Picker
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_18:
        MOVX    A,@DPTR
        RET
          CFI EndBlock cfiCond23
          CFI EndBlock cfiCond24
          CFI EndBlock cfiPicker25
//  117 
//  118 /****************************************************
//  119 	函数名:	queue_size
//  120 	功能:		获取队列当前成员个数
//  121 	参数:	队列句柄
//  122 	返回值：队列现有成员个数
//  123 	作者:	liyao 2015年9月8日14:10:51
//  124 ****************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
          CFI Block cfiCond26 Using cfiCommon0
          CFI Function Queue_Size
          CFI Conditional ??CrossCallReturnLabel_23
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-9
          CFI Block cfiCond27 Using cfiCommon0
          CFI (cfiCond27) Function Queue_Size
          CFI (cfiCond27) Conditional ??CrossCallReturnLabel_24
          CFI (cfiCond27) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond27) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond27) CFA_SP SP+-9
          CFI Block cfiPicker28 Using cfiCommon1
          CFI (cfiPicker28) NoFunction
          CFI (cfiPicker28) Picker
        MOV     DPL,R2
        MOV     DPH,R3
          CFI EndBlock cfiCond26
          CFI EndBlock cfiCond27
          CFI EndBlock cfiPicker28
        REQUIRE ??Subroutine13_0
        ; // Fall through to label ??Subroutine13_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine13_0:
          CFI Block cfiCond29 Using cfiCommon0
          CFI Function Queue_Empty_Size
          CFI Conditional ??CrossCallReturnLabel_22
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-9
          CFI Block cfiCond30 Using cfiCommon0
          CFI (cfiCond30) Function Queue_Size
          CFI (cfiCond30) Conditional ??CrossCallReturnLabel_23
          CFI (cfiCond30) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond30) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond30) CFA_SP SP+-9
          CFI Block cfiCond31 Using cfiCommon0
          CFI (cfiCond31) Function Queue_Size
          CFI (cfiCond31) Conditional ??CrossCallReturnLabel_24
          CFI (cfiCond31) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond31) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond31) CFA_SP SP+-9
          CFI Block cfiPicker32 Using cfiCommon1
          CFI (cfiPicker32) NoFunction
          CFI (cfiPicker32) Picker
        INC     DPTR
        INC     DPTR
          CFI EndBlock cfiCond29
          CFI EndBlock cfiCond30
          CFI EndBlock cfiCond31
          CFI EndBlock cfiPicker32
        REQUIRE ??Subroutine14_0
        ; // Fall through to label ??Subroutine14_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine14_0:
          CFI Block cfiCond33 Using cfiCommon0
          CFI Function Queue_Get
          CFI Conditional ??CrossCallReturnLabel_21
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond34 Using cfiCommon0
          CFI (cfiCond34) Function Queue_Empty_Size
          CFI (cfiCond34) Conditional ??CrossCallReturnLabel_22
          CFI (cfiCond34) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond34) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond34) CFA_SP SP+-9
          CFI Block cfiCond35 Using cfiCommon0
          CFI (cfiCond35) Function Queue_Size
          CFI (cfiCond35) Conditional ??CrossCallReturnLabel_23
          CFI (cfiCond35) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond35) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond35) CFA_SP SP+-9
          CFI Block cfiCond36 Using cfiCommon0
          CFI (cfiCond36) Function Queue_Size
          CFI (cfiCond36) Conditional ??CrossCallReturnLabel_24
          CFI (cfiCond36) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond36) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond36) CFA_SP SP+-9
          CFI Block cfiPicker37 Using cfiCommon1
          CFI (cfiPicker37) NoFunction
          CFI (cfiPicker37) Picker
        INC     DPTR
        INC     DPTR
        INC     DPTR
          CFI EndBlock cfiCond33
          CFI EndBlock cfiCond34
          CFI EndBlock cfiCond35
          CFI EndBlock cfiCond36
          CFI EndBlock cfiPicker37
        REQUIRE ??Subroutine15_0
        ; // Fall through to label ??Subroutine15_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine15_0:
          CFI Block cfiCond38 Using cfiCommon0
          CFI Function Queue_Size
          CFI Conditional ??CrossCallReturnLabel_20
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI Block cfiCond39 Using cfiCommon0
          CFI (cfiCond39) Function Queue_Get
          CFI (cfiCond39) Conditional ??CrossCallReturnLabel_21
          CFI (cfiCond39) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond39) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond39) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond39) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond39) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond39) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond39) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond39) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond39) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond39) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond39) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond39) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond39) CFA_SP SP+-2
          CFI (cfiCond39) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond40 Using cfiCommon0
          CFI (cfiCond40) Function Queue_Empty_Size
          CFI (cfiCond40) Conditional ??CrossCallReturnLabel_22
          CFI (cfiCond40) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond40) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond40) CFA_SP SP+-9
          CFI Block cfiCond41 Using cfiCommon0
          CFI (cfiCond41) Function Queue_Size
          CFI (cfiCond41) Conditional ??CrossCallReturnLabel_23
          CFI (cfiCond41) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond41) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond41) CFA_SP SP+-9
          CFI Block cfiCond42 Using cfiCommon0
          CFI (cfiCond42) Function Queue_Size
          CFI (cfiCond42) Conditional ??CrossCallReturnLabel_24
          CFI (cfiCond42) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond42) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond42) CFA_SP SP+-9
          CFI Block cfiPicker43 Using cfiCommon1
          CFI (cfiPicker43) NoFunction
          CFI (cfiPicker43) Picker
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        RET
          CFI EndBlock cfiCond38
          CFI EndBlock cfiCond39
          CFI EndBlock cfiCond40
          CFI EndBlock cfiCond41
          CFI EndBlock cfiCond42
          CFI EndBlock cfiPicker43

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
          CFI Block cfiCond44 Using cfiCommon0
          CFI Function Queue_Put
          CFI Conditional ??CrossCallReturnLabel_4
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond45 Using cfiCommon0
          CFI (cfiCond45) Function Queue_Get
          CFI (cfiCond45) Conditional ??CrossCallReturnLabel_5
          CFI (cfiCond45) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond45) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond45) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond45) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond45) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond45) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond45) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond45) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond45) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond45) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond45) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond45) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond45) CFA_SP SP+-2
          CFI (cfiCond45) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker46 Using cfiCommon1
          CFI (cfiPicker46) NoFunction
          CFI (cfiPicker46) Picker
        MOV     DPL,?V0
        MOV     DPH,?V1
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        MOV     B,?V2
        MUL     AB
        MOV     R0,A
        RET
          CFI EndBlock cfiCond44
          CFI EndBlock cfiCond45
          CFI EndBlock cfiPicker46

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
          CFI Block cfiCond47 Using cfiCommon0
          CFI Function Queue_Put
          CFI Conditional ??CrossCallReturnLabel_0
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond48 Using cfiCommon0
          CFI (cfiCond48) Function Queue_Get
          CFI (cfiCond48) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond48) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond48) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond48) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond48) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond48) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond48) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond48) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond48) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond48) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond48) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond48) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond48) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond48) CFA_SP SP+-2
          CFI (cfiCond48) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker49 Using cfiCommon1
          CFI (cfiPicker49) NoFunction
          CFI (cfiPicker49) Picker
        MOV     DPL,?V0
        MOV     DPH,?V1
        MOVX    A,@DPTR
        ADD     A,#0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOVX    @DPTR,A
        MOV     DPL,?V0
        MOV     DPH,?V1
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        RET
          CFI EndBlock cfiCond47
          CFI EndBlock cfiCond48
          CFI EndBlock cfiPicker49

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  125 uint16_t Queue_Size(QUEUE_T* queue){
Queue_Size:
          CFI Block cfiBlock50 Using cfiCommon0
          CFI Function Queue_Size
        CODE
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  126 	if(queue->full_flag == 1)
        LCALL   ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_13:
        MOVX    A,@DPTR
        XRL     A,#0x1
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        JNZ     ??Queue_Size_0
//  127 		return queue->count;
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        SJMP    ??Queue_Size_1
//  128 	else if(queue->start == queue->end)
??Queue_Size_0:
        LCALL   ??Subroutine15_0 & 0xFFFF
??CrossCallReturnLabel_20:
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R0
        JNZ     ??Queue_Size_2
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R1
??Queue_Size_2:
        JZ      ??Queue_Size_3
//  129 		return 0;
//  130 	else if(queue->start > queue->end)
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        CLR     C
        MOVX    A,@DPTR
        SUBB    A,R0
        INC     DPTR
        MOVX    A,@DPTR
        SUBB    A,R1
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        JNC     ??Queue_Size_4
//  131 		return queue->start - queue->end;
        INC     DPTR
        INC     DPTR
        PUSH    DPL
          CFI CFA_SP SP+-6
        PUSH    DPH
          CFI CFA_SP SP+-7
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_23:
        POP     DPH
          CFI CFA_SP SP+-6
        POP     DPL
          CFI CFA_SP SP+-5
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,R0
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        SUBB    A,R1
        SJMP    ??Queue_Size_1
//  132 	else if(queue->start < queue->end)
//  133 		return queue->count - queue->end + queue->start;
??Queue_Size_4:
        PUSH    DPL
          CFI CFA_SP SP+-6
        PUSH    DPH
          CFI CFA_SP SP+-7
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_24:
        POP     DPH
          CFI CFA_SP SP+-6
        POP     DPL
          CFI CFA_SP SP+-5
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,R0
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        SUBB    A,R1
        MOV     R1,A
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        ADD     A,R0
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R1
??Queue_Size_1:
        MOV     R3,A
        SJMP    ??Queue_Size_5
//  134 	return 0;
??Queue_Size_3:
        MOV     R2,#0x0
        MOV     R3,#0x0
??Queue_Size_5:
          CFI EndBlock cfiBlock50
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1
//  135 	//return queue->num;
//  136 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
          CFI Block cfiBlock51 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        POP     DPH
          CFI CFA_SP SP+-4
          CFI DPH0 SameValue
        POP     DPL
          CFI CFA_SP SP+-3
          CFI DPL0 SameValue
        LJMP    ?BRET
          CFI EndBlock cfiBlock51

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine9:
          CFI Block cfiCond52 Using cfiCommon0
          CFI Function Queue_Init
          CFI Conditional ??CrossCallReturnLabel_12
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond53 Using cfiCommon0
          CFI (cfiCond53) Function Queue_Size
          CFI (cfiCond53) Conditional ??CrossCallReturnLabel_13
          CFI (cfiCond53) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond53) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond53) CFA_SP SP+-7
          CFI Block cfiPicker54 Using cfiCommon1
          CFI (cfiPicker54) NoFunction
          CFI (cfiPicker54) Picker
        MOV     A,R2
        ADD     A,#0xb
        MOV     DPL,A
        CLR     A
        ADDC    A,R3
        MOV     DPH,A
        RET
          CFI EndBlock cfiCond52
          CFI EndBlock cfiCond53
          CFI EndBlock cfiPicker54
//  137 
//  138 /****************************************************
//  139 	函数名:	queue_empty_size
//  140 	功能:	获取队列剩余空位个数
//  141 	参数:	队列句柄
//  142 	返回值：队列剩余空位个数
//  143 	作者:	liyao 2015年9月8日14:10:51
//  144 ****************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  145 uint16_t Queue_Empty_Size(QUEUE_T* queue){
Queue_Empty_Size:
          CFI Block cfiBlock55 Using cfiCommon0
          CFI Function Queue_Empty_Size
        CODE
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  146 	return queue->count - queue->num;
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        PUSH    DPL
          CFI CFA_SP SP+-6
        PUSH    DPH
          CFI CFA_SP SP+-7
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        LCALL   ??Subroutine13_0 & 0xFFFF
??CrossCallReturnLabel_22:
        POP     DPH
          CFI CFA_SP SP+-6
        POP     DPL
          CFI CFA_SP SP+-5
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,R0
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        SUBB    A,R1
        MOV     R3,A
        SJMP    ?Subroutine1
//  147 }
          CFI EndBlock cfiBlock55
//  148 
//  149 /****************************************************
//  150 	函数名:queue_free
//  151 	功能:	释放队列
//  152 	参数:	队列句柄
//  153 	作者:	liyao 2015年9月8日14:10:51
//  154 ****************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  155 void Queue_Free(QUEUE_T* queue){
Queue_Free:
          CFI Block cfiBlock56 Using cfiCommon0
          CFI Function Queue_Free
        CODE
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  156 	queue->use_state = 0;
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_9:
        CLR     A
        MOVX    @DPTR,A
//  157 }
        SJMP    ?Subroutine1
          CFI EndBlock cfiBlock56

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
          CFI Block cfiCond57 Using cfiCommon0
          CFI Function Queue_Init
          CFI Conditional ??CrossCallReturnLabel_8
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond58 Using cfiCommon0
          CFI (cfiCond58) Function Queue_Free
          CFI (cfiCond58) Conditional ??CrossCallReturnLabel_9
          CFI (cfiCond58) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond58) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond58) CFA_SP SP+-7
          CFI Block cfiPicker59 Using cfiCommon1
          CFI (cfiPicker59) NoFunction
          CFI (cfiPicker59) Picker
        MOV     A,R2
        ADD     A,#0xc
        MOV     DPL,A
        CLR     A
        ADDC    A,R3
        MOV     DPH,A
        RET
          CFI EndBlock cfiCond57
          CFI EndBlock cfiCond58
          CFI EndBlock cfiPicker59

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??Queue_Init::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    Queue_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??Queue_Put::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    Queue_Put

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??Queue_Get::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    Queue_Get

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??Queue_Size::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    Queue_Size

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??Queue_Empty_Size::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    Queue_Empty_Size

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??Queue_Free::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    Queue_Free

        END
//  158 /* Usage:
//  159 	QUEUE_T* queue = queue_init(test ,sizeof(uint8_t)  ,10 );  
//  160 	queue_put(queue,(int8_t)200,0,0);
//  161 	queue_put(queue,(int8_t)201,0,0);
//  162 	queue_get(queue,(int8_t*)&i,NULL,NULL); */
//  163 
//  164 
//  165 
//  166 
//  167 
//  168 
//  169 
//  170 
//  171 
//  172 
//  173 
//  174 
//  175 
//  176 
//  177 
//  178 
//  179 
//  180 
//  181 
//  182 
//  183 
//  184 
//  185 
//  186 
//  187 
//  188 
//  189 
//  190 
//  191 
//  192 
//  193 
//  194 
//  195 
//  196 
//  197 
//  198 
//  199 
//  200 
//  201 
//  202 
//  203 
//  204 
//  205 
//  206 
//  207 
//  208 
//  209 
//  210 
//  211 
// 
// 724 bytes in segment BANKED_CODE
//  36 bytes in segment BANK_RELAYS
//  71 bytes in segment XDATA_Z
// 
// 760 bytes of CODE  memory
//  71 bytes of XDATA memory
//
//Errors: none
//Warnings: 2
