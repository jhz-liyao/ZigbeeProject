///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V9.30.1.3056 for 8051               25/Oct/2016  15:28:52
// Copyright 2004-2015 IAR Systems AB.
// Standalone license - IAR Embedded Workbench for 8051
//
//    Core               =  plain
//    Code model         =  banked
//    Data model         =  large
//    Calling convention =  xdata reentrant
//    Constant location  =  data_rom
//    Dptr setup         =  1,16
//                          
//    Source file        =  
//        E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\Frame\ProtocolFrame.c
//    Command line       =  
//        -f "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"
//        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
//        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f
//        "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
//        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
//        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
//        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
//        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
//        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
//        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
//        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
//        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
//        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
//        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
//        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
//        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
//        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
//        -DPOLL_RATE=50 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
//        -DREJOIN_POLL_RATE=440 "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack
//        Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\Frame\ProtocolFrame.c"
//        -D HAL_UART=TRUE -D HAL_UART_ISR=1 -D HAL_UART_DMA=0 -D LOG_OUT -D
//        UART1_PROTOCOL_RESOLVER=1 -D xISQC -D NWK_AUTO_POLL -D xZTOOL_P1 -D
//        ISR_KEYINTERRUPT -D xMT_TASK -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D
//        xLCD_SUPPORTED=DEBUG -D xPOWER_SAVING -lC
//        "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\WaterMachine\List"
//        -lA "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\WaterMachine\List"
//        --diag_suppress Pe001,Pa010 -o
//        "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\WaterMachine\Obj"
//        -e --no_code_motion --debug --core=plain --dptr=16,1
//        --data_model=large --code_model=banked
//        --calling_convention=xdata_reentrant --place_constants=data_rom
//        --nr_virtual_regs 8 -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack
//        Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\"
//        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\..\Source\"
//        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\..\Frame\"
//        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\..\Module\WaterMachine\"
//        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\..\..\..\ZMain\TI2530DB\"
//        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\hal\include\"
//        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
//        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\mac\include\"
//        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
//        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
//        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
//        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\mt\"
//        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\osal\include\"
//        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\services\saddr\"
//        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\services\sdata\"
//        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\stack\af\"
//        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
//        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
//        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\stack\sec\"
//        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\stack\sys\"
//        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
//        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\zmac\"
//        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
//        -Ohz
//    List file          =  
//        E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\CC2530DB\WaterMachine\List\ProtocolFrame.s51
//
///////////////////////////////////////////////////////////////////////////////

        NAME ProtocolFrame

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__iar_require _formatted_write", ""
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?V0
        EXTERN ?V1
        EXTERN ?V2
        EXTERN ?V3
        EXTERN ?V4
        EXTERN ?V5
        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?CALL_IND
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?MOVE_LONG8_XDATA_XDATA
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?SS_SHR
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        PUBLIC `??FetchProtocols::?relay`
        FUNCTION `??FetchProtocols::?relay`,0203H
        PUBLIC `??Get_Protocol_Description::?relay`
        FUNCTION `??Get_Protocol_Description::?relay`,0203H
        PUBLIC `??ProtocolFrame_Init::?relay`
        FUNCTION `??ProtocolFrame_Init::?relay`,0203H
        PUBLIC `??Protocol_Register::?relay`
        FUNCTION `??Protocol_Register::?relay`,0203H
        PUBLIC `??Protocol_Send::?relay`
        FUNCTION `??Protocol_Send::?relay`,0203H
        PUBLIC `??Protocol_Send_Transpond::?relay`
        FUNCTION `??Protocol_Send_Transpond::?relay`,0203H
        PUBLIC `??Protocol_To_Uart::?relay`
        FUNCTION `??Protocol_To_Uart::?relay`,0203H
        PUBLIC `??_Fetch_Protocol::?relay`
        FUNCTION `??_Fetch_Protocol::?relay`,0203H
        PUBLIC `??_Protocol_Put::?relay`
        FUNCTION `??_Protocol_Put::?relay`,0203H
        PUBLIC `??_clean_recv_buf::?relay`
        FUNCTION `??_clean_recv_buf::?relay`,0203H
        PUBLIC `??char_special::?relay`
        FUNCTION `??char_special::?relay`,0203H
        PUBLIC `??getCheckSum_ByProtocolInfo::?relay`
        FUNCTION `??getCheckSum_ByProtocolInfo::?relay`,0203H
        PUBLIC Desc_P_Arr
        PUBLIC FetchProtocols
        FUNCTION FetchProtocols,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC Get_Protocol_Description
        FUNCTION Get_Protocol_Description,0203H
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ProtocolFrame_Init
        FUNCTION ProtocolFrame_Init,0a1201H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC Protocol_Register
        FUNCTION Protocol_Register,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC Protocol_Send
        FUNCTION Protocol_Send,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 33, STACK
        PUBLIC Protocol_Send_Transpond
        FUNCTION Protocol_Send_Transpond,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC Protocol_Size
        PUBLIC Protocol_To_Uart
        FUNCTION Protocol_To_Uart,0a1203H
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 112, STACK
        PUBLIC UART1_Resolver
        PUBLIC _Fetch_Protocol
        FUNCTION _Fetch_Protocol,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        PUBLIC _Protocol_Put
        FUNCTION _Protocol_Put,0a1603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 33, STACK
        PUBLIC _UART1_Protocol_QueueBuf
        PUBLIC _UART1_Resolver
        PUBLIC _clean_recv_buf
        FUNCTION _clean_recv_buf,0a1203H
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 12, STACK
        PUBLIC char_special
        FUNCTION char_special,0203H
        ARGFRAME XSTACK, 112, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUBLIC getCheckSum_ByProtocolInfo
        FUNCTION getCheckSum_ByProtocolInfo,0203H
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource SP:8, PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B SameValue
          CFI A SameValue
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT SameValue
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon1
        
Protocol_Init       SYMBOL "Protocol_Init"
`??Protocol_Init::?relay` SYMBOL "?relay", Protocol_Init
Queue_Get           SYMBOL "Queue_Get"
`??Queue_Get::?relay` SYMBOL "?relay", Queue_Get
Queue_Init          SYMBOL "Queue_Init"
`??Queue_Init::?relay` SYMBOL "?relay", Queue_Init
memset              SYMBOL "memset"
`??memset::?relay`  SYMBOL "?relay", memset
printf              SYMBOL "printf"
`??printf::?relay`  SYMBOL "?relay", printf
FetchProtocols      SYMBOL "FetchProtocols"
`??FetchProtocols::?relay` SYMBOL "?relay", FetchProtocols
Get_Protocol_Description SYMBOL "Get_Protocol_Description"
`??Get_Protocol_Description::?relay` SYMBOL "?relay", Get_Protocol_Description
ProtocolFrame_Init  SYMBOL "ProtocolFrame_Init"
`??ProtocolFrame_Init::?relay` SYMBOL "?relay", ProtocolFrame_Init
Protocol_Register   SYMBOL "Protocol_Register"
`??Protocol_Register::?relay` SYMBOL "?relay", Protocol_Register
Protocol_Send       SYMBOL "Protocol_Send"
`??Protocol_Send::?relay` SYMBOL "?relay", Protocol_Send
Protocol_Send_Transpond SYMBOL "Protocol_Send_Transpond"
`??Protocol_Send_Transpond::?relay` SYMBOL "?relay", Protocol_Send_Transpond
Protocol_To_Uart    SYMBOL "Protocol_To_Uart"
`??Protocol_To_Uart::?relay` SYMBOL "?relay", Protocol_To_Uart
_Fetch_Protocol     SYMBOL "_Fetch_Protocol"
`??_Fetch_Protocol::?relay` SYMBOL "?relay", _Fetch_Protocol
_Protocol_Put       SYMBOL "_Protocol_Put"
`??_Protocol_Put::?relay` SYMBOL "?relay", _Protocol_Put
_clean_recv_buf     SYMBOL "_clean_recv_buf"
`??_clean_recv_buf::?relay` SYMBOL "?relay", _clean_recv_buf
char_special        SYMBOL "char_special"
`??char_special::?relay` SYMBOL "?relay", char_special
getCheckSum_ByProtocolInfo SYMBOL "getCheckSum_ByProtocolInfo"
`??getCheckSum_ByProtocolInfo::?relay` SYMBOL "?relay", getCheckSum_ByProtocolInfo

        EXTERN `??Protocol_Init::?relay`
        FUNCTION `??Protocol_Init::?relay`,00H
        EXTERN `??Queue_Get::?relay`
        FUNCTION `??Queue_Get::?relay`,00H
        EXTERN `??Queue_Init::?relay`
        FUNCTION `??Queue_Init::?relay`,00H
        EXTERN `??memset::?relay`
        FUNCTION `??memset::?relay`,00H
        EXTERN `??printf::?relay`
        FUNCTION `??printf::?relay`,00H
        EXTERN Log
        EXTERN Protocol_Init
        FUNCTION Protocol_Init,0200H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN Queue_Get
        FUNCTION Queue_Get,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN Queue_Init
        FUNCTION Queue_Init,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN memset
        FUNCTION memset,010202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN printf
        FUNCTION printf,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC

// E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh 1.0.0\Projects\zstack\Samples\Demo_App_V1.8饮水机控制增加uart\Frame\ProtocolFrame.c
//    1 #include "ProtocolFrame.h" 
//    2 #include "ProtocolHandle.h"
//    3 #include "LOG.h"
//    4 #include "Protocol.h"
//    5  
//    6 //###################################对外变量区###################################
//    7 //PROTOCOL_INFO_T protocol_send_infos[SEND_PROTOCOL_NUM] = {0};//发送协议栈
//    8 //PROTOCOL_INFO_T recv_protocol_infos[RECV_PROTOCOL_NUM] = {0};//接收协议栈 
//    9 //static uint8_t _Recv_Protocol_Arr[RECV_PROTOCOL_NUM] = {0};//已经接收到协议的索引  
//   10 //PROTOCOL_DESC_T Send_Desc_P[SEND_PROTOCOL_NUM];//发送协议栈
//   11 //PROTOCOL_DESC_T Recv_Desc_P[RECV_PROTOCOL_NUM];//接收协议栈 
//   12 //PROTOCOL_DESC_T Transpond_Desc_P[TRANSPOND_PROTOCOL_NUM];//接收协议栈 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   13 PROTOCOL_DESC_T Desc_P_Arr[PROTOCOL_NUM];//协议栈
Desc_P_Arr:
        DS 120
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   14 uint8_t Protocol_Size = 0;
Protocol_Size:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   15 //###################################对内变量区################################### 
//   16  
//   17 
//   18 
//   19 #if UART1_PROTOCOL_RESOLVER
//   20 	#define UART1_RPQUEUE_SIZE		1 //接收协议缓冲区（存储多条协议） 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   21 	Protocol_Resolver_T _UART1_Resolver;
_UART1_Resolver:
        DS 33
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   22 	PROTOCOL_INFO_T _UART1_Protocol_QueueBuf[UART1_RPQUEUE_SIZE] = {0}; 
_UART1_Protocol_QueueBuf:
        DS 19
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_I:XDATA:NOROOT(0)
//   23 	Protocol_Resolver_T *UART1_Resolver = &_UART1_Resolver;
UART1_Resolver:
        DATA16
        DS 2
        REQUIRE `?<Initializer for UART1_Resolver>`
        REQUIRE __INIT_XDATA_I
//   24 #endif
//   25 #if UART2_PROTOCOL_RESOLVER
//   26 	#define UART2_RPQUEUE_SIZE		30 //接收协议缓冲区（存储多条协议） 
//   27 	Protocol_Resolver_T _UART2_Resolver;
//   28 	PROTOCOL_INFO_T _UART2_Protocol_QueueBuf[UART2_RPQUEUE_SIZE] = {0}; 
//   29 	Protocol_Resolver_T *UART2_Resolver = &_UART2_Resolver;
//   30 #endif
//   31 #if UART3_PROTOCOL_RESOLVER
//   32 	#define UART3_RPQUEUE_SIZE		30 //接收协议缓冲区（存储多条协议） 
//   33 	Protocol_Resolver_T _UART3_Resolver;
//   34 	PROTOCOL_INFO_T _UART3_Protocol_QueueBuf[UART3_RPQUEUE_SIZE] = {0}; 
//   35 	Protocol_Resolver_T *UART3_Resolver = &_UART3_Resolver;
//   36 #endif
//   37 #if UART4_PROTOCOL_RESOLVER
//   38 	#define UART4_RPQUEUE_SIZE		30 //接收协议缓冲区（存储多条协议） 
//   39 	Protocol_Resolver_T _UART4_Resolver;
//   40 	PROTOCOL_INFO_T _UART4_Protocol_QueueBuf[UART4_RPQUEUE_SIZE] = {0}; 
//   41 	Protocol_Resolver_T *UART1_Resolver = &_UART4_Resolver;
//   42 #endif
//   43 //-----------------------------------------------------  
//   44 //###################################对内函数区###################################
//   45 /****************************************************
//   46 	函数名:	clean_recv_buf
//   47 	功能:		清除协议栈正在写入的协议
//   48 	作者:		liyao 2015年9月8日14:10:51
//   49 ****************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   50 void _clean_recv_buf(Protocol_Resolver_T* pr){  
_clean_recv_buf:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function _clean_recv_buf
        CODE
        FUNCALL _clean_recv_buf, memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//   51 	memset(&pr->pi, 0, sizeof(PROTOCOL_INFO_T)); 
        ; Setup parameters for call to function memset
        MOV     ?V0,#0x13
        MOV     ?V1,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 12)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     A,R6
        ADD     A,#0x4
        MOV     R2,A
        CLR     A
        ADDC    A,R7
        MOV     R3,A
        LCALL   `??memset::?relay`   ; Banked call to: memset
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
//   52 	pr->Recv_State = 0;
        LCALL   ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_26:
        CLR     A
        LCALL   ?Subroutine3 & 0xFFFF
//   53 	pr->cnt = 0;
??CrossCallReturnLabel_0:
        CLR     A
        MOVX    @DPTR,A
//   54 	pr->index = 0;
        MOV     A,R6
        ADD     A,#0x18
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        CLR     A
        MOVX    @DPTR,A
//   55 	pr->Is_FE = 0;
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_9:
        CLR     A
        LCALL   ?Subroutine7 & 0xFFFF
//   56 	pr->CheckSum = 0;
??CrossCallReturnLabel_12:
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
          CFI EndBlock cfiBlock0
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0
//   57 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOVX    @DPTR,A
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock1
//   58 
//   59 /****************************************************
//   60 	函数名:	_Fetch_Protocol
//   61 	功能:		提取并执行已经缓存的协议
//   62 	作者:		liyao 2016年9月8日10:54:34
//   63 ****************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   64 void _Fetch_Protocol(Protocol_Resolver_T* pr){
_Fetch_Protocol:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI Function _Fetch_Protocol
        CODE
        FUNCALL _Fetch_Protocol, Queue_Get
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 19
        MOV     A,#-0x13
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 28)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        SJMP    ??_Fetch_Protocol_0
//   65 	PROTOCOL_INFO_T pi;
//   66 	while(Queue_Get(pr->Protocol_Queue,&pi) == 0){
//   67 		if(pi.check != NULL){
//   68 			if(pi.check(&pi) < 0){
//   69 				Log.error("协议校验不通过\r\n");
//   70 				break;
//   71 			}
//   72 		}
//   73 		if(pi.handle != NULL){
//   74 			pi.handle(&pi);
??_Fetch_Protocol_1:
        ; Setup parameters for indirect call
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        MOV     A,#0xf
        LCALL   ?XSTACK_DISP0_8
??_Fetch_Protocol_2:
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        LCALL   ?CALL_IND
//   75 		}else{
??_Fetch_Protocol_0:
        ; Setup parameters for call to function Queue_Get
        MOV     R4,?XSP + 0
        MOV     R5,?XSP + 1
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ??Subroutine28_0 & 0xFFFF
??CrossCallReturnLabel_45:
        LCALL   `??Queue_Get::?relay`; Banked call to: Queue_Get
        MOV     A,R1
        JNZ     ??_Fetch_Protocol_3
        MOV     A,#0x11
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine26_0 & 0xFFFF
??CrossCallReturnLabel_37:
        JZ      ??_Fetch_Protocol_4
        ; Setup parameters for indirect call
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        MOV     A,#0x11
        LCALL   ?XSTACK_DISP0_8
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        LCALL   ?CALL_IND
        MOV     A,R1
        CLR     C
        SUBB    A,#0x0
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JNC     ??_Fetch_Protocol_4
        ; Setup parameters for indirect call
        MOV     R2,#`?<Constant "\\320\\255\\322\\351\\320\\243\\321\\351\\2` & 0xff
        MOV     R3,#(`?<Constant "\\320\\255\\322\\351\\320\\243\\321\\351\\2` >> 8) & 0xff
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_53:
        LCALL   ?CALL_IND
//   76 			Log.error("收到协议但是无处理函数\r\n");
//   77 		}
//   78 	}
//   79 }
??_Fetch_Protocol_3:
        MOV     A,#0x13
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 9)
        LJMP    ?Subroutine1 & 0xFFFF
          CFI CFA_XSP16 add(XSP16, 28)
??_Fetch_Protocol_4:
        MOV     A,#0xf
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine26_0 & 0xFFFF
??CrossCallReturnLabel_38:
        JNZ     ??_Fetch_Protocol_1
        ; Setup parameters for indirect call
        MOV     R2,#`?<Constant "\\312\\325\\265\\275\\320\\255\\322\\351\\2` & 0xff
        MOV     R3,#(`?<Constant "\\312\\325\\265\\275\\320\\255\\322\\351\\2` >> 8) & 0xff
        MOV     DPTR,#Log + 2
        MOVX    A,@DPTR
        MOV     R0,A
        SJMP    ??_Fetch_Protocol_2
          CFI EndBlock cfiBlock2
//   80  
//   81 /****************************************************
//   82 	函数名:	Protocol_Put
//   83 	功能:		接收协议数据并解析封装
//   84 	参数:		协议数据
//   85 	注意: 	通过protocol_flag标志位标示是否解析出新的协议
//   86 	作者:		liyao 2015年9月8日14:10:51
//   87 ****************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   88 int8_t _Protocol_Put(Protocol_Resolver_T* pr,uint8_t* datas,uint8_t len){
_Protocol_Put:
          CFI Block cfiBlock3 Using cfiCommon0
          CFI Function _Protocol_Put
        CODE
        FUNCALL _Protocol_Put, _clean_recv_buf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL _Protocol_Put, _clean_recv_buf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL _Protocol_Put, printf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL _Protocol_Put, printf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL _Protocol_Put, _clean_recv_buf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL _Protocol_Put, _clean_recv_buf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL _Protocol_Put, _clean_recv_buf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL _Protocol_Put, _clean_recv_buf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        MOV     A,#-0xd
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 13)
        ; Saved register size: 13
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     ?V2,R4
        MOV     ?V3,R5
        MOV     ?V1,R1
//   89 	uint8_t i,j, data; 
//   90 	uint16_t src_board_action;
//   91 	
//   92 	for(i = 0; i < len; i++){
        MOV     ?V0,#0x0
        LJMP    ??_Protocol_Put_0 & 0xFFFF
//   93 		data = datas[i];
//   94                 if(pr->pi.head != 0xFD && data != 0xFD)
??_Protocol_Put_1:
        MOV     A,#-0x3
        XRL     A,R0
        JNZ     ??_Protocol_Put_2
//   95                   continue;
//   96 		if(pr->pi.head == 0xFD && data == 0xFD){ //协议被切断抛弃
//   97 			_clean_recv_buf(pr);
        ; Setup parameters for call to function _clean_recv_buf
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??_clean_recv_buf::?relay`; Banked call to: _clean_recv_buf
//   98 			Log.error("协议中途出现0xFD\r\n");
        ; Setup parameters for indirect call
        MOV     R2,#`?<Constant "\\320\\255\\322\\351\\326\\320\\315\\276\\2` & 0xff
        MOV     R3,#(`?<Constant "\\320\\255\\322\\351\\326\\320\\315\\276\\2` >> 8) & 0xff
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_54:
        LCALL   ?CALL_IND
//   99 			return -1;
        MOV     R1,#-0x1
        LJMP    ??_Protocol_Put_3 & 0xFFFF
//  100 		}
//  101 		if(data == 0xFE){//处理转义
??_Protocol_Put_2:
        MOV     A,#-0x2
        XRL     A,R0
        JZ      $+5
        LJMP    ??_Protocol_Put_4 & 0xFFFF
//  102 			pr->Is_FE = 1;
        LCALL   ?Subroutine6 & 0xFFFF
//  103 			continue;
//  104 		}else if(pr->Is_FE){
??CrossCallReturnLabel_10:
        MOV     A,#0x1
        LJMP    ??_Protocol_Put_5 & 0xFFFF
//  105 			switch(data){
//  106 				case 0x7D: data = 0xFD;break;
//  107 				case 0x78: data = 0xF8;break;
??_Protocol_Put_6:
        MOV     R0,#-0x8
        SJMP    ??_Protocol_Put_7
//  108 				case 0x7E: data = 0xFE;break;
??_Protocol_Put_8:
        MOV     R0,#-0x2
//  109 			} 
//  110 			pr->Is_FE = 0;
??_Protocol_Put_7:
        CLR     A
        MOVX    @DPTR,A
//  111 		}
//  112 			
//  113 		if(pr->Recv_State > 0 && pr->Recv_State < 7)//排除帧头帧尾计算校验和
??_Protocol_Put_9:
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_3:
        JZ      ??_Protocol_Put_10
        CLR     C
        SUBB    A,#0x7
        JNC     ??_Protocol_Put_11
//  114 			pr->CheckSum += data; 
        MOV     A,R0
        MOV     R2,A
        LCALL   ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_28:
        MOVX    A,@DPTR
        ADD     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOVX    @DPTR,A
//  115 	//协议解析状态机
//  116 		switch(pr->Recv_State){
??_Protocol_Put_11:
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_4:
        JZ      ??_Protocol_Put_10
        DEC     A
        JZ      ??_Protocol_Put_12
        DEC     A
        JZ      ??_Protocol_Put_13
        DEC     A
        JNZ     $+5
        LJMP    ??_Protocol_Put_14 & 0xFFFF
        DEC     A
        JNZ     $+5
        LJMP    ??_Protocol_Put_15 & 0xFFFF
        DEC     A
        JNZ     $+5
        LJMP    ??_Protocol_Put_16 & 0xFFFF
        DEC     A
        JNZ     $+5
        LJMP    ??_Protocol_Put_17 & 0xFFFF
        DEC     A
        JNZ     $+5
        LJMP    ??_Protocol_Put_18 & 0xFFFF
        DEC     A
        JNZ     $+5
        LJMP    ??_Protocol_Put_19 & 0xFFFF
        LJMP    ??_Protocol_Put_20 & 0xFFFF
//  117 			case 0:	//处理帧头
//  118 						pr->pi.head = data;
??_Protocol_Put_10:
        MOV     A,R0
        MOV     DPL,R6
        MOV     DPH,R7
??_Protocol_Put_21:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    @DPTR,A
//  119 						pr->Recv_State++; 
//  120 						break;
//  121 			case 1:	//处理预留位
//  122 						pr->pi.standby1 = data;
//  123 						pr->Recv_State++; 
//  124 						break;
//  125 			case 2: //处理帧长(从ID到数据位最后一个)
//  126 						pr->Recv_State++; 
//  127 						pr->pi.plen = data;
//  128 						if(data < 4){
//  129 							_clean_recv_buf(pr);
//  130 							Log.error("处理帧长错误\r\n");
//  131 							return -2;
//  132 						}
//  133 						else
//  134 							pr->cnt = pr->pi.paralen = data - 3;//计算结果为参数个数
//  135 							pr->pi.alen = data + 5;//计算结果为协议总长度包括FD、F8
//  136 						break;
//  137 			case 3: //处理目标板
//  138 						pr->pi.module = data;
//  139 						pr->Recv_State++; 
//  140 						break;
//  141 			case 4: //处理编号
//  142 						pr->pi.serial = data;
//  143 						pr->Recv_State++; 
//  144 						break;
//  145 			case 5: //处理指令码(ACTION)
//  146 						pr->pi.action = data;
//  147 						pr->Recv_State++; 
//  148 						break;
//  149 			case 6: //处理参数 
//  150 						((uint8_t *)(&pr->pi.protocol))[pr->index++] = data;  
//  151 						if(--pr->cnt == 0)
//  152 							pr->Recv_State++;
//  153 						break;
//  154 			case 7: //处理校验和校验  
//  155 						pr->pi.checksum = data;
//  156 						/*校验和暂时关闭*/
//  157 						if(((uint8_t)pr->CheckSum & 0xff) != data){
//  158                                                   printf("计算结果:%x\r\n",(uint8_t)pr->CheckSum);
//  159                                                         printf("%x,%x,%x,%x,%x,%x,%x,%x,%x,%x\r\n",
//  160                                                                pr->pi.head,
//  161                                                                pr->pi.standby1,
//  162                                                                pr->pi.plen,
//  163                                                                pr->pi.module,
//  164                                                                pr->pi.serial,
//  165                                                                pr->pi.action,
//  166                                                                pr->pi.protocol.AddrReport_P.para1,
//  167                                                                pr->pi.protocol.AddrReport_P.para2,
//  168                                                                pr->pi.checksum,
//  169                                                                pr->pi.tail);
//  170 							_clean_recv_buf(pr);
//  171 							Log.error("协议校验和错误\r\n");
//  172 							return -3;
//  173 						}else{ 
//  174 							pr->Recv_State++; 
??_Protocol_Put_22:
        LCALL   ?Subroutine4 & 0xFFFF
//  175 						} 
??CrossCallReturnLabel_5:
        INC     A
        SJMP    ??_Protocol_Put_5
??_Protocol_Put_12:
        MOV     A,R0
        MOV     DPL,R6
        MOV     DPH,R7
??_Protocol_Put_23:
        INC     DPTR
        SJMP    ??_Protocol_Put_21
??_Protocol_Put_13:
        MOVX    A,@DPTR
        INC     A
        MOVX    @DPTR,A
        MOV     A,R0
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    @DPTR,A
        CLR     C
        SUBB    A,#0x4
        JNC     ??_Protocol_Put_24
        ; Setup parameters for call to function _clean_recv_buf
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??_clean_recv_buf::?relay`; Banked call to: _clean_recv_buf
        ; Setup parameters for indirect call
        MOV     R2,#`?<Constant "\\264\\246\\300\\355\\326\\241\\263\\244\\2` & 0xff
        MOV     R3,#(`?<Constant "\\264\\246\\300\\355\\326\\241\\263\\244\\2` >> 8) & 0xff
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_55:
        LCALL   ?CALL_IND
        MOV     R1,#-0x2
        LJMP    ??_Protocol_Put_3 & 0xFFFF
??_Protocol_Put_24:
        MOV     A,#-0x3
        ADD     A,R0
        MOV     R1,A
        LCALL   ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_20:
        MOV     A,R1
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_2:
        MOV     A,R1
        MOVX    @DPTR,A
        MOV     A,#0x5
        ADD     A,R0
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,R6
        ADD     A,#0x10
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        POP     A
          CFI CFA_SP SP+0
??_Protocol_Put_5:
        MOVX    @DPTR,A
        LJMP    ??_Protocol_Put_20 & 0xFFFF
??_Protocol_Put_14:
        MOV     A,R0
        MOV     DPL,R6
        MOV     DPH,R7
??_Protocol_Put_25:
        INC     DPTR
        INC     DPTR
        SJMP    ??_Protocol_Put_23
??_Protocol_Put_15:
        MOV     A,R0
        MOV     DPL,R6
        MOV     DPH,R7
??_Protocol_Put_26:
        INC     DPTR
        SJMP    ??_Protocol_Put_25
??_Protocol_Put_16:
        MOV     A,R0
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        SJMP    ??_Protocol_Put_26
??_Protocol_Put_17:
        MOV     A,R6
        ADD     A,#0x18
        MOV     R2,A
        CLR     A
        ADDC    A,R7
        MOV     R3,A
        MOV     A,R0
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,R6
        ADD     A,R0
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        INC     A
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_1:
        MOVX    A,@DPTR
        DEC     A
        MOVX    @DPTR,A
        JZ      $+5
        LJMP    ??_Protocol_Put_20 & 0xFFFF
        LJMP    ??_Protocol_Put_22 & 0xFFFF
??_Protocol_Put_18:
        LCALL   ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_22:
        MOV     A,R0
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_13:
        MOVX    A,@DPTR
        XRL     A,R0
        JNZ     $+5
        LJMP    ??_Protocol_Put_22 & 0xFFFF
        ; Setup parameters for call to function printf
        MOVX    A,@DPTR
        MOV     ?V2,A
        MOV     ?V3,#0x0
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 15)
        MOV     R2,#`?<Constant "\\274\\306\\313\\343\\275\\341\\271\\373:%` & 0xff
        MOV     R3,#(`?<Constant "\\274\\306\\313\\343\\275\\341\\271\\373:%` >> 8) & 0xff
        LCALL   `??printf::?relay`   ; Banked call to: printf
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 13)
        ; Setup parameters for call to function printf
        MOV     A,R6
        ADD     A,#0xe
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_6:
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 15)
        MOV     A,R6
        ADD     A,#0xd
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_7:
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 17)
        MOV     A,R6
        ADD     A,#0xb
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_8:
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 19)
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_35:
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 21)
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_36:
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 23)
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ??Subroutine21_0 & 0xFFFF
??CrossCallReturnLabel_34:
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 25)
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ??Subroutine22_0 & 0xFFFF
??CrossCallReturnLabel_33:
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 27)
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ??Subroutine23_0 & 0xFFFF
??CrossCallReturnLabel_32:
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 29)
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ??Subroutine24_0 & 0xFFFF
??CrossCallReturnLabel_31:
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 31)
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ??Subroutine25_0 & 0xFFFF
??CrossCallReturnLabel_30:
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 33)
        MOV     R2,#`?<Constant "%x,%x,%x,%x,%x,%x,%x,...">` & 0xff
        MOV     R3,#(`?<Constant "%x,%x,%x,%x,%x,%x,%x,...">` >> 8) & 0xff
        LCALL   `??printf::?relay`   ; Banked call to: printf
        MOV     A,#0x14
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 13)
        ; Setup parameters for call to function _clean_recv_buf
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??_clean_recv_buf::?relay`; Banked call to: _clean_recv_buf
        ; Setup parameters for indirect call
        MOV     R2,#`?<Constant "\\320\\255\\322\\351\\320\\243\\321\\351\\2_1` & 0xff
        MOV     R3,#(`?<Constant "\\320\\255\\322\\351\\320\\243\\321\\351\\2_1` >> 8) & 0xff
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_56:
        LCALL   ?CALL_IND
        MOV     R1,#-0x3
        LJMP    ??_Protocol_Put_3 & 0xFFFF
//  176 						break;
//  177 			case 8: //处理帧尾 帧类型和长度进行匹配 
//  178 						if(data != 0xF8){
??_Protocol_Put_19:
        MOV     A,#-0x8
        XRL     A,R0
        JZ      ??_Protocol_Put_27
//  179 							_clean_recv_buf(pr);
        ; Setup parameters for call to function _clean_recv_buf
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??_clean_recv_buf::?relay`; Banked call to: _clean_recv_buf
//  180 							Log.error("帧尾位置非0xF8错误\r\n");
        ; Setup parameters for indirect call
        MOV     R2,#`?<Constant "\\326\\241\\316\\262\\316\\273\\326\\303\\2` & 0xff
        MOV     R3,#(`?<Constant "\\326\\241\\316\\262\\316\\273\\326\\303\\2` >> 8) & 0xff
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_57:
        LCALL   ?CALL_IND
//  181 							return -4;
        MOV     R1,#-0x4
        LJMP    ??_Protocol_Put_3 & 0xFFFF
//  182 						}
//  183 						pr->pi.tail = data;
??_Protocol_Put_27:
        MOV     A,R6
        ADD     A,#0xe
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOV     A,#-0x8
        MOVX    @DPTR,A
//  184 						src_board_action = pr->pi.module << 8 | pr->pi.action; 
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     A,R1
        MOV     R5,A
//  185 						for(j = 0; j < Protocol_Size; j++){
        MOV     R2,#0x0
        SJMP    ??_Protocol_Put_28
??_Protocol_Put_29:
        INC     R2
??_Protocol_Put_28:
        MOV     DPTR,#Protocol_Size
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,R2
        CLR     C
        SUBB    A,R0
        JC      $+5
        LJMP    ??_Protocol_Put_30 & 0xFFFF
//  186 							if(	src_board_action ==  Desc_P_Arr[j].ModuleAction &&//目标板匹配,动作匹配 
//  187 									pr->pi.paralen == Desc_P_Arr[j].ProtocolSize)//帧长度匹配
        MOV     A,R2
        LCALL   ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_18:
        XRL     A,R4
        JNZ     ??_Protocol_Put_31
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R5
??_Protocol_Put_31:
        JNZ     ??_Protocol_Put_29
        LCALL   ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_21:
        MOVX    A,@DPTR
        MOV     ?V4,A
        MOV     A,#(Desc_P_Arr + 4) & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#((Desc_P_Arr + 4) >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        MOVX    A,@DPTR
        XRL     A,?V4
        JNZ     ??_Protocol_Put_29
//  188 							{
//  189 								pr->pi.handle = Desc_P_Arr[j].handle;
        MOV     A,#Desc_P_Arr & 0xff
        ADD     A,R0
        MOV     R0,A
        MOV     A,#(Desc_P_Arr >> 8) & 0xff
        ADDC    A,R1
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_47:
        MOV     A,R6
        ADD     A,#0x13
        LCALL   ?Subroutine9 & 0xFFFF
//  190 								pr->pi.check = Desc_P_Arr[j].check;
??CrossCallReturnLabel_16:
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_48:
        MOV     A,R6
        ADD     A,#0x15
        LCALL   ?Subroutine9 & 0xFFFF
//  191 								pr->pi.Desc_T = &Desc_P_Arr[j];
??CrossCallReturnLabel_17:
        MOV     A,R6
        ADD     A,#0x11
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  192 								break;
//  193 							}
//  194 						}
//  195 						if(j == Protocol_Size){//校验不通过
//  196 							_clean_recv_buf(pr);
//  197 							Log.error("现有协议库无匹配当前协议\r\n");
//  198 							return -5;
//  199 						}else{
//  200 							//Queue_Put(pr->Protocol_Queue, &pr->pi);//将协议信息放入协议缓冲队列
//  201                                                         pr->pi.handle(&pr->pi);
??_Protocol_Put_32:
        ; Setup parameters for indirect call
        MOV     A,R6
        ADD     A,#0x4
        MOV     R2,A
        CLR     A
        ADDC    A,R7
        MOV     R3,A
        MOV     A,R6
        ADD     A,#0x13
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        LCALL   ??Subroutine29_0 & 0xFFFF
??CrossCallReturnLabel_49:
        LCALL   ?CALL_IND
//  202 							_clean_recv_buf(pr); 
        ; Setup parameters for call to function _clean_recv_buf
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??_clean_recv_buf::?relay`; Banked call to: _clean_recv_buf
//  203 						}
//  204 						break;
??_Protocol_Put_20:
        INC     ?V0
??_Protocol_Put_0:
        MOV     A,?V0
        CLR     C
        SUBB    A,?V1
        JNC     ??_Protocol_Put_33
        MOV     R0,?V0
        MOV     A,?V2
        ADD     A,R0
        MOV     DPL,A
        CLR     A
        ADDC    A,?V3
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0xfd
        JNZ     $+5
        LJMP    ??_Protocol_Put_1 & 0xFFFF
        MOV     A,#-0x3
        XRL     A,R0
        JNZ     ??_Protocol_Put_20
??_Protocol_Put_4:
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_11:
        MOVX    A,@DPTR
        JNZ     $+5
        LJMP    ??_Protocol_Put_9 & 0xFFFF
        MOV     A,R0
        ADD     A,#-0x78
        JNZ     $+5
        LJMP    ??_Protocol_Put_6 & 0xFFFF
        ADD     A,#-0x5
        JZ      ??_Protocol_Put_34
        DEC     A
        JNZ     $+5
        LJMP    ??_Protocol_Put_8 & 0xFFFF
        LJMP    ??_Protocol_Put_7 & 0xFFFF
??_Protocol_Put_34:
        MOV     R0,#-0x3
        LJMP    ??_Protocol_Put_7 & 0xFFFF
??_Protocol_Put_30:
        MOVX    A,@DPTR
        XRL     A,R2
        JNZ     ??_Protocol_Put_32
        ; Setup parameters for call to function _clean_recv_buf
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??_clean_recv_buf::?relay`; Banked call to: _clean_recv_buf
        ; Setup parameters for indirect call
        MOV     R2,#`?<Constant "\\317\\326\\323\\320\\320\\255\\322\\351\\2` & 0xff
        MOV     R3,#(`?<Constant "\\317\\326\\323\\320\\320\\255\\322\\351\\2` >> 8) & 0xff
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_58:
        LCALL   ?CALL_IND
        MOV     R1,#-0x5
        SJMP    ??_Protocol_Put_3
//  205 		}
//  206 	}; 
//  207 	return 0;
??_Protocol_Put_33:
        MOV     R1,#0x0
??_Protocol_Put_3:
        MOV     R7,#0x5
        LJMP    ?BANKED_LEAVE_XDATA
//  208 }
          CFI EndBlock cfiBlock3

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine16:
          CFI Block cfiCond4 Using cfiCommon0
          CFI Function _Protocol_Put
          CFI Conditional ??CrossCallReturnLabel_20
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 13)
          CFI Block cfiCond5 Using cfiCommon0
          CFI (cfiCond5) Function _Protocol_Put
          CFI (cfiCond5) Conditional ??CrossCallReturnLabel_21
          CFI (cfiCond5) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond5) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond5) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond5) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond5) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond5) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond5) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond5) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond5) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond5) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond5) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond5) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond5) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond5) CFA_SP SP+-2
          CFI (cfiCond5) CFA_XSP16 add(XSP16, 13)
          CFI Block cfiPicker6 Using cfiCommon1
          CFI (cfiPicker6) NoFunction
          CFI (cfiPicker6) Picker
        MOV     A,R6
        ADD     A,#0xf
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        RET
          CFI EndBlock cfiCond4
          CFI EndBlock cfiCond5
          CFI EndBlock cfiPicker6

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine12:
          CFI Block cfiCond7 Using cfiCommon0
          CFI Function _Protocol_Put
          CFI Conditional ??CrossCallReturnLabel_35
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond8 Using cfiCommon0
          CFI (cfiCond8) Function _Protocol_Put
          CFI (cfiCond8) Conditional ??CrossCallReturnLabel_36
          CFI (cfiCond8) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond8) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond8) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond8) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond8) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond8) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond8) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond8) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond8) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond8) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond8) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond8) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond8) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond8) CFA_SP SP+-2
          CFI (cfiCond8) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiPicker9 Using cfiCommon1
          CFI (cfiPicker9) NoFunction
          CFI (cfiPicker9) Picker
        INC     DPTR
          CFI EndBlock cfiCond7
          CFI EndBlock cfiCond8
          CFI EndBlock cfiPicker9
        REQUIRE ??Subroutine21_0
        ; // Fall through to label ??Subroutine21_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine21_0:
          CFI Block cfiCond10 Using cfiCommon0
          CFI Function _Protocol_Put
          CFI Conditional ??CrossCallReturnLabel_34
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 23)
          CFI Block cfiCond11 Using cfiCommon0
          CFI (cfiCond11) Function _Protocol_Put
          CFI (cfiCond11) Conditional ??CrossCallReturnLabel_35
          CFI (cfiCond11) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond11) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond11) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond11) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond11) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond11) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond11) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond11) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond11) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond11) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond11) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond11) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond11) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond11) CFA_SP SP+-2
          CFI (cfiCond11) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond12 Using cfiCommon0
          CFI (cfiCond12) Function _Protocol_Put
          CFI (cfiCond12) Conditional ??CrossCallReturnLabel_36
          CFI (cfiCond12) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond12) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond12) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond12) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond12) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond12) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond12) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond12) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond12) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond12) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond12) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond12) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond12) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond12) CFA_SP SP+-2
          CFI (cfiCond12) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiPicker13 Using cfiCommon1
          CFI (cfiPicker13) NoFunction
          CFI (cfiPicker13) Picker
        INC     DPTR
          CFI EndBlock cfiCond10
          CFI EndBlock cfiCond11
          CFI EndBlock cfiCond12
          CFI EndBlock cfiPicker13
        REQUIRE ??Subroutine22_0
        ; // Fall through to label ??Subroutine22_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine22_0:
          CFI Block cfiCond14 Using cfiCommon0
          CFI Function _Protocol_Put
          CFI Conditional ??CrossCallReturnLabel_33
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond15 Using cfiCommon0
          CFI (cfiCond15) Function _Protocol_Put
          CFI (cfiCond15) Conditional ??CrossCallReturnLabel_34
          CFI (cfiCond15) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond15) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond15) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond15) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond15) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond15) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond15) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond15) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond15) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond15) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond15) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond15) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond15) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond15) CFA_SP SP+-2
          CFI (cfiCond15) CFA_XSP16 add(XSP16, 23)
          CFI Block cfiCond16 Using cfiCommon0
          CFI (cfiCond16) Function _Protocol_Put
          CFI (cfiCond16) Conditional ??CrossCallReturnLabel_35
          CFI (cfiCond16) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond16) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond16) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond16) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond16) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond16) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond16) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond16) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond16) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond16) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond16) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond16) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond16) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond16) CFA_SP SP+-2
          CFI (cfiCond16) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond17 Using cfiCommon0
          CFI (cfiCond17) Function _Protocol_Put
          CFI (cfiCond17) Conditional ??CrossCallReturnLabel_36
          CFI (cfiCond17) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond17) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond17) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond17) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond17) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond17) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond17) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond17) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond17) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond17) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond17) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond17) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond17) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond17) CFA_SP SP+-2
          CFI (cfiCond17) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiPicker18 Using cfiCommon1
          CFI (cfiPicker18) NoFunction
          CFI (cfiPicker18) Picker
        INC     DPTR
          CFI EndBlock cfiCond14
          CFI EndBlock cfiCond15
          CFI EndBlock cfiCond16
          CFI EndBlock cfiCond17
          CFI EndBlock cfiPicker18
        REQUIRE ??Subroutine23_0
        ; // Fall through to label ??Subroutine23_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine23_0:
          CFI Block cfiCond19 Using cfiCommon0
          CFI Function _Protocol_Put
          CFI Conditional ??CrossCallReturnLabel_32
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 27)
          CFI Block cfiCond20 Using cfiCommon0
          CFI (cfiCond20) Function _Protocol_Put
          CFI (cfiCond20) Conditional ??CrossCallReturnLabel_33
          CFI (cfiCond20) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond20) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond20) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond20) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond20) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond20) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond20) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond20) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond20) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond20) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond20) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond20) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond20) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond20) CFA_SP SP+-2
          CFI (cfiCond20) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond21 Using cfiCommon0
          CFI (cfiCond21) Function _Protocol_Put
          CFI (cfiCond21) Conditional ??CrossCallReturnLabel_34
          CFI (cfiCond21) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond21) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond21) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond21) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond21) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond21) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond21) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond21) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond21) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond21) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond21) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond21) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond21) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond21) CFA_SP SP+-2
          CFI (cfiCond21) CFA_XSP16 add(XSP16, 23)
          CFI Block cfiCond22 Using cfiCommon0
          CFI (cfiCond22) Function _Protocol_Put
          CFI (cfiCond22) Conditional ??CrossCallReturnLabel_35
          CFI (cfiCond22) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond22) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond22) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond22) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond22) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond22) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond22) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond22) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond22) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond22) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond22) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond22) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond22) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond22) CFA_SP SP+-2
          CFI (cfiCond22) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond23 Using cfiCommon0
          CFI (cfiCond23) Function _Protocol_Put
          CFI (cfiCond23) Conditional ??CrossCallReturnLabel_36
          CFI (cfiCond23) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond23) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond23) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond23) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond23) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond23) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond23) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond23) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond23) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond23) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond23) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond23) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond23) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond23) CFA_SP SP+-2
          CFI (cfiCond23) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiPicker24 Using cfiCommon1
          CFI (cfiPicker24) NoFunction
          CFI (cfiPicker24) Picker
        INC     DPTR
          CFI EndBlock cfiCond19
          CFI EndBlock cfiCond20
          CFI EndBlock cfiCond21
          CFI EndBlock cfiCond22
          CFI EndBlock cfiCond23
          CFI EndBlock cfiPicker24
        REQUIRE ??Subroutine24_0
        ; // Fall through to label ??Subroutine24_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine24_0:
          CFI Block cfiCond25 Using cfiCommon0
          CFI Function _Protocol_Put
          CFI Conditional ??CrossCallReturnLabel_31
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 29)
          CFI Block cfiCond26 Using cfiCommon0
          CFI (cfiCond26) Function _Protocol_Put
          CFI (cfiCond26) Conditional ??CrossCallReturnLabel_32
          CFI (cfiCond26) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond26) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond26) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond26) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond26) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond26) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond26) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond26) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond26) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond26) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond26) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond26) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond26) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond26) CFA_SP SP+-2
          CFI (cfiCond26) CFA_XSP16 add(XSP16, 27)
          CFI Block cfiCond27 Using cfiCommon0
          CFI (cfiCond27) Function _Protocol_Put
          CFI (cfiCond27) Conditional ??CrossCallReturnLabel_33
          CFI (cfiCond27) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond27) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond27) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond27) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond27) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond27) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond27) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond27) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond27) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond27) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond27) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond27) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond27) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond27) CFA_SP SP+-2
          CFI (cfiCond27) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond28 Using cfiCommon0
          CFI (cfiCond28) Function _Protocol_Put
          CFI (cfiCond28) Conditional ??CrossCallReturnLabel_34
          CFI (cfiCond28) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond28) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond28) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond28) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond28) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond28) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond28) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond28) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond28) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond28) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond28) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond28) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond28) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond28) CFA_SP SP+-2
          CFI (cfiCond28) CFA_XSP16 add(XSP16, 23)
          CFI Block cfiCond29 Using cfiCommon0
          CFI (cfiCond29) Function _Protocol_Put
          CFI (cfiCond29) Conditional ??CrossCallReturnLabel_35
          CFI (cfiCond29) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond29) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond29) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond29) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond29) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond29) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond29) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond29) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond29) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond29) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond29) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond29) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond29) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond29) CFA_SP SP+-2
          CFI (cfiCond29) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond30 Using cfiCommon0
          CFI (cfiCond30) Function _Protocol_Put
          CFI (cfiCond30) Conditional ??CrossCallReturnLabel_36
          CFI (cfiCond30) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond30) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond30) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond30) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond30) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond30) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond30) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond30) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond30) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond30) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond30) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond30) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond30) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond30) CFA_SP SP+-2
          CFI (cfiCond30) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiPicker31 Using cfiCommon1
          CFI (cfiPicker31) NoFunction
          CFI (cfiPicker31) Picker
        INC     DPTR
          CFI EndBlock cfiCond25
          CFI EndBlock cfiCond26
          CFI EndBlock cfiCond27
          CFI EndBlock cfiCond28
          CFI EndBlock cfiCond29
          CFI EndBlock cfiCond30
          CFI EndBlock cfiPicker31
        REQUIRE ??Subroutine25_0
        ; // Fall through to label ??Subroutine25_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine25_0:
          CFI Block cfiCond32 Using cfiCommon0
          CFI Function _Protocol_Put
          CFI Conditional ??CrossCallReturnLabel_30
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 31)
          CFI Block cfiCond33 Using cfiCommon0
          CFI (cfiCond33) Function _Protocol_Put
          CFI (cfiCond33) Conditional ??CrossCallReturnLabel_31
          CFI (cfiCond33) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond33) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond33) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond33) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond33) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond33) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond33) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond33) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond33) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond33) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond33) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond33) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond33) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond33) CFA_SP SP+-2
          CFI (cfiCond33) CFA_XSP16 add(XSP16, 29)
          CFI Block cfiCond34 Using cfiCommon0
          CFI (cfiCond34) Function _Protocol_Put
          CFI (cfiCond34) Conditional ??CrossCallReturnLabel_32
          CFI (cfiCond34) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond34) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond34) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond34) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond34) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond34) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond34) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond34) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond34) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond34) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond34) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond34) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond34) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond34) CFA_SP SP+-2
          CFI (cfiCond34) CFA_XSP16 add(XSP16, 27)
          CFI Block cfiCond35 Using cfiCommon0
          CFI (cfiCond35) Function _Protocol_Put
          CFI (cfiCond35) Conditional ??CrossCallReturnLabel_33
          CFI (cfiCond35) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond35) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond35) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond35) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond35) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond35) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond35) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond35) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond35) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond35) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond35) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond35) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond35) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond35) CFA_SP SP+-2
          CFI (cfiCond35) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond36 Using cfiCommon0
          CFI (cfiCond36) Function _Protocol_Put
          CFI (cfiCond36) Conditional ??CrossCallReturnLabel_34
          CFI (cfiCond36) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond36) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond36) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond36) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond36) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond36) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond36) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond36) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond36) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond36) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond36) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond36) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond36) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond36) CFA_SP SP+-2
          CFI (cfiCond36) CFA_XSP16 add(XSP16, 23)
          CFI Block cfiCond37 Using cfiCommon0
          CFI (cfiCond37) Function _Protocol_Put
          CFI (cfiCond37) Conditional ??CrossCallReturnLabel_35
          CFI (cfiCond37) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond37) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond37) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond37) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond37) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond37) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond37) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond37) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond37) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond37) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond37) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond37) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond37) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond37) CFA_SP SP+-2
          CFI (cfiCond37) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond38 Using cfiCommon0
          CFI (cfiCond38) Function _Protocol_Put
          CFI (cfiCond38) Conditional ??CrossCallReturnLabel_36
          CFI (cfiCond38) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond38) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond38) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond38) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond38) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond38) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond38) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond38) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond38) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond38) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond38) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond38) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond38) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond38) CFA_SP SP+-2
          CFI (cfiCond38) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiPicker39 Using cfiCommon1
          CFI (cfiPicker39) NoFunction
          CFI (cfiPicker39) Picker
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V2,A
        MOV     R0,#?V2
        RET
          CFI EndBlock cfiCond32
          CFI EndBlock cfiCond33
          CFI EndBlock cfiCond34
          CFI EndBlock cfiCond35
          CFI EndBlock cfiCond36
          CFI EndBlock cfiCond37
          CFI EndBlock cfiCond38
          CFI EndBlock cfiPicker39

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine9:
          CFI Block cfiCond40 Using cfiCommon0
          CFI Function _Protocol_Put
          CFI Conditional ??CrossCallReturnLabel_16
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 13)
          CFI Block cfiCond41 Using cfiCommon0
          CFI (cfiCond41) Function _Protocol_Put
          CFI (cfiCond41) Conditional ??CrossCallReturnLabel_17
          CFI (cfiCond41) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond41) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond41) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond41) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond41) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond41) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond41) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond41) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond41) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond41) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond41) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond41) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond41) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond41) CFA_SP SP+-2
          CFI (cfiCond41) CFA_XSP16 add(XSP16, 13)
          CFI Block cfiPicker42 Using cfiCommon1
          CFI (cfiPicker42) NoFunction
          CFI (cfiPicker42) Picker
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
        RET
          CFI EndBlock cfiCond40
          CFI EndBlock cfiCond41
          CFI EndBlock cfiPicker42

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
          CFI Block cfiCond43 Using cfiCommon0
          CFI Function _clean_recv_buf
          CFI Conditional ??CrossCallReturnLabel_12
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond44 Using cfiCommon0
          CFI (cfiCond44) Function _Protocol_Put
          CFI (cfiCond44) Conditional ??CrossCallReturnLabel_13
          CFI (cfiCond44) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond44) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond44) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond44) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond44) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond44) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond44) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond44) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond44) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond44) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond44) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond44) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond44) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond44) CFA_SP SP+-2
          CFI (cfiCond44) CFA_XSP16 add(XSP16, 13)
          CFI Block cfiPicker45 Using cfiCommon1
          CFI (cfiPicker45) NoFunction
          CFI (cfiPicker45) Picker
        MOVX    @DPTR,A
        LCALL   ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_29:
        RET
          CFI EndBlock cfiCond43
          CFI EndBlock cfiCond44
          CFI EndBlock cfiPicker45

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine20:
          CFI Block cfiCond46 Using cfiCommon0
          CFI Function _Protocol_Put
          CFI Conditional ??CrossCallReturnLabel_28
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 13)
          CFI Block cfiCond47 Using cfiCommon0
          CFI (cfiCond47) Function _clean_recv_buf
          CFI (cfiCond47) Conditional ??CrossCallReturnLabel_29, ??CrossCallReturnLabel_12
          CFI (cfiCond47) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond47) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond47) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond47) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond47) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond47) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond47) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond47) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond47) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond47) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond47) CFA_SP SP+-4
          CFI (cfiCond47) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond48 Using cfiCommon0
          CFI (cfiCond48) Function _Protocol_Put
          CFI (cfiCond48) Conditional ??CrossCallReturnLabel_29, ??CrossCallReturnLabel_13
          CFI (cfiCond48) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond48) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond48) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond48) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond48) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond48) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond48) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond48) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond48) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond48) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond48) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond48) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond48) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond48) CFA_SP SP+-4
          CFI (cfiCond48) CFA_XSP16 add(XSP16, 13)
          CFI Block cfiPicker49 Using cfiCommon1
          CFI (cfiPicker49) NoFunction
          CFI (cfiPicker49) Picker
        MOV     A,R6
        ADD     A,#0x1a
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        RET
          CFI EndBlock cfiCond46
          CFI EndBlock cfiCond47
          CFI EndBlock cfiCond48
          CFI EndBlock cfiPicker49

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
          CFI Block cfiCond50 Using cfiCommon0
          CFI Function _clean_recv_buf
          CFI Conditional ??CrossCallReturnLabel_9
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond51 Using cfiCommon0
          CFI (cfiCond51) Function _Protocol_Put
          CFI (cfiCond51) Conditional ??CrossCallReturnLabel_10
          CFI (cfiCond51) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond51) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond51) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond51) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond51) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond51) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond51) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond51) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond51) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond51) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond51) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond51) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond51) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond51) CFA_SP SP+-2
          CFI (cfiCond51) CFA_XSP16 add(XSP16, 13)
          CFI Block cfiCond52 Using cfiCommon0
          CFI (cfiCond52) Function _Protocol_Put
          CFI (cfiCond52) Conditional ??CrossCallReturnLabel_11
          CFI (cfiCond52) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond52) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond52) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond52) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond52) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond52) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond52) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond52) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond52) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond52) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond52) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond52) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond52) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond52) CFA_SP SP+-2
          CFI (cfiCond52) CFA_XSP16 add(XSP16, 13)
          CFI Block cfiPicker53 Using cfiCommon1
          CFI (cfiPicker53) NoFunction
          CFI (cfiPicker53) Picker
        MOV     A,R6
        ADD     A,#0x19
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        RET
          CFI EndBlock cfiCond50
          CFI EndBlock cfiCond51
          CFI EndBlock cfiCond52
          CFI EndBlock cfiPicker53

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
          CFI Block cfiCond54 Using cfiCommon0
          CFI Function _Protocol_Put
          CFI Conditional ??CrossCallReturnLabel_6
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 13)
          CFI Block cfiCond55 Using cfiCommon0
          CFI (cfiCond55) Function _Protocol_Put
          CFI (cfiCond55) Conditional ??CrossCallReturnLabel_7
          CFI (cfiCond55) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond55) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond55) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond55) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond55) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond55) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond55) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond55) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond55) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond55) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond55) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond55) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond55) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond55) CFA_SP SP+-2
          CFI (cfiCond55) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond56 Using cfiCommon0
          CFI (cfiCond56) Function _Protocol_Put
          CFI (cfiCond56) Conditional ??CrossCallReturnLabel_8
          CFI (cfiCond56) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond56) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond56) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond56) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond56) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond56) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond56) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond56) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond56) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond56) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond56) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond56) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond56) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond56) CFA_SP SP+-2
          CFI (cfiCond56) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiPicker57 Using cfiCommon1
          CFI (cfiPicker57) NoFunction
          CFI (cfiPicker57) Picker
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     ?V2,A
        MOV     R0,#?V2
        RET
          CFI EndBlock cfiCond54
          CFI EndBlock cfiCond55
          CFI EndBlock cfiCond56
          CFI EndBlock cfiPicker57

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
          CFI Block cfiCond58 Using cfiCommon0
          CFI Function _Protocol_Put
          CFI Conditional ??CrossCallReturnLabel_3
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 13)
          CFI Block cfiCond59 Using cfiCommon0
          CFI (cfiCond59) Function _Protocol_Put
          CFI (cfiCond59) Conditional ??CrossCallReturnLabel_4
          CFI (cfiCond59) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond59) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond59) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond59) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond59) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond59) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond59) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond59) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond59) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond59) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond59) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond59) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond59) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond59) CFA_SP SP+-2
          CFI (cfiCond59) CFA_XSP16 add(XSP16, 13)
          CFI Block cfiCond60 Using cfiCommon0
          CFI (cfiCond60) Function _Protocol_Put
          CFI (cfiCond60) Conditional ??CrossCallReturnLabel_5
          CFI (cfiCond60) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond60) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond60) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond60) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond60) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond60) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond60) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond60) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond60) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond60) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond60) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond60) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond60) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond60) CFA_SP SP+-2
          CFI (cfiCond60) CFA_XSP16 add(XSP16, 13)
          CFI Block cfiPicker61 Using cfiCommon1
          CFI (cfiPicker61) NoFunction
          CFI (cfiPicker61) Picker
        LCALL   ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_27:
        MOVX    A,@DPTR
        RET
          CFI EndBlock cfiCond58
          CFI EndBlock cfiCond59
          CFI EndBlock cfiCond60
          CFI EndBlock cfiPicker61

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine19:
          CFI Block cfiCond62 Using cfiCommon0
          CFI Function _clean_recv_buf
          CFI Conditional ??CrossCallReturnLabel_26
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond63 Using cfiCommon0
          CFI (cfiCond63) Function _Protocol_Put
          CFI (cfiCond63) Conditional ??CrossCallReturnLabel_27, ??CrossCallReturnLabel_3
          CFI (cfiCond63) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond63) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond63) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond63) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond63) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond63) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond63) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond63) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond63) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond63) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond63) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond63) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond63) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond63) CFA_SP SP+-4
          CFI (cfiCond63) CFA_XSP16 add(XSP16, 13)
          CFI Block cfiCond64 Using cfiCommon0
          CFI (cfiCond64) Function _Protocol_Put
          CFI (cfiCond64) Conditional ??CrossCallReturnLabel_27, ??CrossCallReturnLabel_4
          CFI (cfiCond64) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond64) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond64) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond64) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond64) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond64) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond64) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond64) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond64) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond64) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond64) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond64) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond64) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond64) CFA_SP SP+-4
          CFI (cfiCond64) CFA_XSP16 add(XSP16, 13)
          CFI Block cfiCond65 Using cfiCommon0
          CFI (cfiCond65) Function _Protocol_Put
          CFI (cfiCond65) Conditional ??CrossCallReturnLabel_27, ??CrossCallReturnLabel_5
          CFI (cfiCond65) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond65) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond65) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond65) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond65) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond65) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond65) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond65) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond65) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond65) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond65) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond65) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond65) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond65) CFA_SP SP+-4
          CFI (cfiCond65) CFA_XSP16 add(XSP16, 13)
          CFI Block cfiPicker66 Using cfiCommon1
          CFI (cfiPicker66) NoFunction
          CFI (cfiPicker66) Picker
        MOV     A,R6
        ADD     A,#0x1c
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        RET
          CFI EndBlock cfiCond62
          CFI EndBlock cfiCond63
          CFI EndBlock cfiCond64
          CFI EndBlock cfiCond65
          CFI EndBlock cfiPicker66

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
          CFI Block cfiCond67 Using cfiCommon0
          CFI Function _clean_recv_buf
          CFI Conditional ??CrossCallReturnLabel_0
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond68 Using cfiCommon0
          CFI (cfiCond68) Function _Protocol_Put
          CFI (cfiCond68) Conditional ??CrossCallReturnLabel_2
          CFI (cfiCond68) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond68) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond68) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond68) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond68) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond68) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond68) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond68) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond68) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond68) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond68) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond68) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond68) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond68) CFA_SP SP+-2
          CFI (cfiCond68) CFA_XSP16 add(XSP16, 13)
          CFI Block cfiCond69 Using cfiCommon0
          CFI (cfiCond69) Function _Protocol_Put
          CFI (cfiCond69) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond69) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond69) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond69) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond69) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond69) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond69) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond69) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond69) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond69) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond69) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond69) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond69) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond69) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond69) CFA_SP SP+-2
          CFI (cfiCond69) CFA_XSP16 add(XSP16, 13)
          CFI Block cfiPicker70 Using cfiCommon1
          CFI (cfiPicker70) NoFunction
          CFI (cfiPicker70) Picker
        MOVX    @DPTR,A
        MOV     A,R6
        ADD     A,#0x17
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        RET
          CFI EndBlock cfiCond67
          CFI EndBlock cfiCond68
          CFI EndBlock cfiCond69
          CFI EndBlock cfiPicker70
//  209 /****************************************************
//  210 	函数名:	char_special
//  211 	参数:		原字符
//  212 	功能: 	字符转义
//  213 ****************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  214 uint16_t char_special(uint8_t num){
char_special:
          CFI Block cfiBlock71 Using cfiCommon0
          CFI Function char_special
        CODE
        ; Saved register size: 0
        ; Auto size: 0
//  215 	switch(num){
        MOV     A,R1
        ADD     A,#0x8
        JZ      ??char_special_0
        ADD     A,#-0x5
        JZ      ??char_special_1
        DEC     A
        JZ      ??char_special_2
        SJMP    ??char_special_3
//  216 		case 0xFD:return 0xFE<<8 | 0x7D;
??char_special_1:
        MOV     R2,#0x7d
        SJMP    ??char_special_4
//  217 		case 0xF8:return 0xFE<<8 | 0x78;
??char_special_0:
        MOV     R2,#0x78
        SJMP    ??char_special_4
//  218 		case 0xFE:return 0xFE<<8 | 0x7E;
??char_special_2:
        MOV     R2,#0x7e
??char_special_4:
        MOV     R3,#-0x2
        SJMP    ??char_special_5
//  219 	}
//  220 	return num;
??char_special_3:
        MOV     A,R1
        MOV     R2,A
        MOV     R3,#0x0
??char_special_5:
        LJMP    ?BRET
//  221 }
          CFI EndBlock cfiBlock71
//  222 
//  223 
//  224 //###################################对外函数区###################################
//  225 
//  226 /****************************************************
//  227 	函数名:	getCheckSum_ByProtocolInfo
//  228 	功能:		根据协议信息获得校验和
//  229 	参数:		PROTOCOL_INFO_T协议描述信息
//  230 	返回值:	校验和结果
//  231 	注意：	只返回低8位
//  232 	作者:		liyao 2015年9月8日14:10:51
//  233 ****************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  234 uint8_t getCheckSum_ByProtocolInfo(PROTOCOL_INFO_T* pi){
getCheckSum_ByProtocolInfo:
          CFI Block cfiBlock72 Using cfiCommon0
          CFI Function getCheckSum_ByProtocolInfo
        CODE
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  235 	uint8_t i, sum = 0; 
        MOV     R6,#0x0
//  236 	for(i = 1; i < pi->plen + 3;i++)
        MOV     R7,#0x1
        SJMP    ??getCheckSum_ByProtocolInfo_0
//  237 		sum+=((uint8_t*)pi)[i]; 
??getCheckSum_ByProtocolInfo_1:
        MOV     A,R2
        ADD     A,R0
        MOV     DPL,A
        CLR     A
        ADDC    A,R3
        MOV     DPH,A
        MOVX    A,@DPTR
        ADD     A,R6
        MOV     R6,A
        INC     R7
??getCheckSum_ByProtocolInfo_0:
        MOV     A,R7
        MOV     R0,A
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,#0x0
        ADD     A,#0x3
        MOV     R4,A
        JNC     ??getCheckSum_ByProtocolInfo_2
        INC     R5
??getCheckSum_ByProtocolInfo_2:
        CLR     C
        MOV     A,R0
        SUBB    A,R4
        CLR     A
        SUBB    A,R5
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JC      ??getCheckSum_ByProtocolInfo_1
//  238 	return (uint8_t)sum;
        MOV     A,R6
        MOV     R1,A
          CFI EndBlock cfiBlock72
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1
//  239 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
          CFI Block cfiBlock73 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock73
//  240 
//  241 /****************************************************
//  242 	函数名:	Protocol_Register
//  243 	功能:		协议注册
//  244 	作者:		liyao 2016年9月18日16:12:16  
//  245 ****************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  246 int8_t Protocol_Register(PROTOCOL_DESC_T* Desc_T,PROTOCOL_TYPE Protocol_Type){
Protocol_Register:
          CFI Block cfiBlock74 Using cfiCommon0
          CFI Function Protocol_Register
        CODE
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  247 	uint8_t i = 0 ;
        MOV     R4,#0x0
//  248 	PROTOCOL_DESC_T* tmp_Desc_T;
//  249 //	switch((uint8_t)Protocol_Type){
//  250 //		case (uint8_t)SEND:
//  251 //			Max_Count = SEND_PROTOCOL_NUM;
//  252 //			tmp_Desc_T = Send_Desc_P;
//  253 //			break;
//  254 //		case (uint8_t)RECEIVE:
//  255 //			Max_Count = RECV_PROTOCOL_NUM;
//  256 //			tmp_Desc_T = Recv_Desc_P;
//  257 //			break;
//  258 //		case (uint8_t)TRANSPOND:
//  259 //			Max_Count = TRANSPOND_PROTOCOL_NUM;
//  260 //			tmp_Desc_T = Transpond_Desc_P;
//  261 //			break;  
//  262 //	}
//  263          
//  264         tmp_Desc_T = Desc_P_Arr;
//  265 	for(i = 0; i < PROTOCOL_NUM; i++){
//  266 		if(tmp_Desc_T[i].ModuleAction == 0){
??Protocol_Register_0:
        MOV     A,R4
        MOV     B,#0xc
        MUL     AB
        MOV     R0,A
        MOV     R5,B
        MOV     A,R5
        MOV     R1,A
        MOV     A,#Desc_P_Arr & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#(Desc_P_Arr >> 8) & 0xff
        ADDC    A,R1
        LCALL   ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_39:
        JNZ     ??Protocol_Register_1
//  267 			tmp_Desc_T[i] = *Desc_T;
        MOV     DPL,R2
        MOV     DPH,R3
        MOV     A,R4
        MOV     B,#0xc
        MUL     AB
        MOV     R0,A
        MOV     A,R5
        MOV     R1,A
        MOV     A,#Desc_P_Arr & 0xff
        ADD     A,R0
        MOV     R4,A
        MOV     A,#(Desc_P_Arr >> 8) & 0xff
        ADDC    A,R1
        MOV     R5,A
        MOV     A,#0xc
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  268                         Protocol_Size++;
        MOV     DPTR,#Protocol_Size
        MOVX    A,@DPTR
        INC     A
        MOVX    @DPTR,A
//  269 			return 0;
        MOV     R1,#0x0
        SJMP    ??Protocol_Register_2
//  270 		}
//  271 	}
??Protocol_Register_1:
        INC     R4
        MOV     A,R4
        CLR     C
        SUBB    A,#0xa
        JC      ??Protocol_Register_0
//  272 	Log.error("协议注册失败,数组满\r\n");
        ; Setup parameters for indirect call
        MOV     R2,#`?<Constant "\\320\\255\\322\\351\\327\\242\\262\\341\\3` & 0xff
        MOV     R3,#(`?<Constant "\\320\\255\\322\\351\\327\\242\\262\\341\\3` >> 8) & 0xff
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_59:
        LCALL   ?CALL_IND
//  273 	return -1;
        MOV     R1,#-0x1
??Protocol_Register_2:
        LJMP    ?Subroutine2 & 0xFFFF
//  274 	
//  275 }
          CFI EndBlock cfiBlock74

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine11:
          CFI Block cfiCond75 Using cfiCommon0
          CFI Function Protocol_Register
          CFI Conditional ??CrossCallReturnLabel_39
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI Block cfiCond76 Using cfiCommon0
          CFI (cfiCond76) Function Protocol_To_Uart
          CFI (cfiCond76) Conditional ??CrossCallReturnLabel_40
          CFI (cfiCond76) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond76) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond76) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond76) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond76) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond76) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond76) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond76) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond76) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond76) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond76) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond76) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond76) CFA_SP SP+-2
          CFI (cfiCond76) CFA_XSP16 add(XSP16, 112)
          CFI Block cfiPicker77 Using cfiCommon1
          CFI (cfiPicker77) NoFunction
          CFI (cfiPicker77) Picker
        MOV     DPH,A
          CFI EndBlock cfiCond75
          CFI EndBlock cfiCond76
          CFI EndBlock cfiPicker77
        REQUIRE ??Subroutine26_0
        ; // Fall through to label ??Subroutine26_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine26_0:
          CFI Block cfiCond78 Using cfiCommon0
          CFI Function _Fetch_Protocol
          CFI Conditional ??CrossCallReturnLabel_37
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond79 Using cfiCommon0
          CFI (cfiCond79) Function _Fetch_Protocol
          CFI (cfiCond79) Conditional ??CrossCallReturnLabel_38
          CFI (cfiCond79) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond79) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond79) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond79) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond79) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond79) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond79) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond79) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond79) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond79) CFA_SP SP+-2
          CFI (cfiCond79) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond80 Using cfiCommon0
          CFI (cfiCond80) Function Protocol_Register
          CFI (cfiCond80) Conditional ??CrossCallReturnLabel_39
          CFI (cfiCond80) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond80) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond80) CFA_SP SP+-7
          CFI Block cfiCond81 Using cfiCommon0
          CFI (cfiCond81) Function Protocol_To_Uart
          CFI (cfiCond81) Conditional ??CrossCallReturnLabel_40
          CFI (cfiCond81) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond81) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond81) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond81) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond81) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond81) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond81) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond81) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond81) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond81) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond81) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond81) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond81) CFA_SP SP+-2
          CFI (cfiCond81) CFA_XSP16 add(XSP16, 112)
          CFI Block cfiPicker82 Using cfiCommon1
          CFI (cfiPicker82) NoFunction
          CFI (cfiPicker82) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        RET
          CFI EndBlock cfiCond78
          CFI EndBlock cfiCond79
          CFI EndBlock cfiCond80
          CFI EndBlock cfiCond81
          CFI EndBlock cfiPicker82
//  276 
//  277 /****************************************************
//  278 	函数名:	Get_Protocol_Description
//  279 	功能:		获取协议描述信息
//  280 	作者:		liyao 2016年9月18日16:12:16  
//  281 ****************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  282 PROTOCOL_DESC_T* Get_Protocol_Description(MODULE_ACTION ModuleAction,PROTOCOL_TYPE Protocol_Type){
Get_Protocol_Description:
          CFI Block cfiBlock83 Using cfiCommon0
          CFI Function Get_Protocol_Description
        CODE
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  283 	uint8_t i = 0 ;
        MOV     R4,#0x0
//  284 	PROTOCOL_DESC_T* tmp_Desc_T;
//  285 //	switch((uint8_t)Protocol_Type){
//  286 //		case (uint8_t)SEND:
//  287 //			Max_Count = SEND_PROTOCOL_NUM;
//  288 //			tmp_Desc_T = Send_Desc_P;
//  289 //			break;
//  290 //		case (uint8_t)RECEIVE:
//  291 //			Max_Count = RECV_PROTOCOL_NUM;
//  292 //			tmp_Desc_T = Recv_Desc_P;
//  293 //			break;
//  294 //		case (uint8_t)TRANSPOND:
//  295 //			Max_Count = TRANSPOND_PROTOCOL_NUM;
//  296 //			tmp_Desc_T = Transpond_Desc_P;
//  297 //			break;  
//  298 //	} 
//  299         tmp_Desc_T = Desc_P_Arr;
//  300 	for(i = 0; i < Protocol_Size; i++){
        SJMP    ??Get_Protocol_Description_0
??Get_Protocol_Description_1:
        INC     R4
??Get_Protocol_Description_0:
        MOV     DPTR,#Protocol_Size
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,R4
        CLR     C
        SUBB    A,R0
        JNC     ??Get_Protocol_Description_2
//  301 		if(ModuleAction == tmp_Desc_T[i].ModuleAction)
        MOV     A,R4
        LCALL   ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_19:
        XRL     A,R2
        JNZ     ??Get_Protocol_Description_3
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R3
??Get_Protocol_Description_3:
        JNZ     ??Get_Protocol_Description_1
//  302 			return &tmp_Desc_T[i];
        MOV     A,#Desc_P_Arr & 0xff
        ADD     A,R0
        MOV     R2,A
        MOV     A,#(Desc_P_Arr >> 8) & 0xff
        ADDC    A,R1
        MOV     R3,A
        SJMP    ??Get_Protocol_Description_4
//  303 	}
//  304 	Log.error("Get_Protocol_Description未找到协议描述\r\n");
??Get_Protocol_Description_2:
        ; Setup parameters for indirect call
        MOV     R2,#`?<Constant "Get_Protocol_Descript...">` & 0xff
        MOV     R3,#(`?<Constant "Get_Protocol_Descript...">` >> 8) & 0xff
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_60:
        LCALL   ?CALL_IND
//  305 	return NULL;
        MOV     R2,#0x0
        MOV     R3,#0x0
??Get_Protocol_Description_4:
        LJMP    ?Subroutine2 & 0xFFFF
//  306 	
//  307 }
          CFI EndBlock cfiBlock83

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine15:
          CFI Block cfiCond84 Using cfiCommon0
          CFI Function _Protocol_Put
          CFI Conditional ??CrossCallReturnLabel_18
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 13)
          CFI Block cfiCond85 Using cfiCommon0
          CFI (cfiCond85) Function Get_Protocol_Description
          CFI (cfiCond85) Conditional ??CrossCallReturnLabel_19
          CFI (cfiCond85) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond85) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond85) CFA_SP SP+-7
          CFI Block cfiPicker86 Using cfiCommon1
          CFI (cfiPicker86) NoFunction
          CFI (cfiPicker86) Picker
        MOV     B,#0xc
        MUL     AB
        MOV     R0,A
        MOV     R1,B
        MOV     A,#Desc_P_Arr & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#(Desc_P_Arr >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        MOVX    A,@DPTR
        RET
          CFI EndBlock cfiCond84
          CFI EndBlock cfiCond85
          CFI EndBlock cfiPicker86
//  308 
//  309 
//  310 
//  311 /****************************************************
//  312 	函数名:	ProtocolFrame_Init
//  313 	功能:		初始化全部协议和相关校验、执行函数
//  314 	作者:		liyao 2015年9月8日14:10:51      
//  315 ****************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  316 void ProtocolFrame_Init(){
ProtocolFrame_Init:
          CFI Block cfiBlock87 Using cfiCommon0
          CFI Function ProtocolFrame_Init
        CODE
        FUNCALL ProtocolFrame_Init, memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ProtocolFrame_Init, Protocol_Init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ProtocolFrame_Init, Queue_Init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//  317 //	memset(Send_Desc_P,0,sizeof(PROTOCOL_DESC_T) * SEND_PROTOCOL_NUM);
//  318 //	memset(Recv_Desc_P,0,sizeof(PROTOCOL_DESC_T) * RECV_PROTOCOL_NUM);
//  319 //	memset(Transpond_Desc_P,0,sizeof(PROTOCOL_DESC_T) * TRANSPOND_PROTOCOL_NUM);
//  320         memset(Desc_P_Arr,0,sizeof(PROTOCOL_DESC_T) * PROTOCOL_NUM);
        ; Setup parameters for call to function memset
        MOV     ?V0,#0x78
        MOV     ?V1,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 12)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#Desc_P_Arr & 0xff
        MOV     R3,#(Desc_P_Arr >> 8) & 0xff
        LCALL   `??memset::?relay`   ; Banked call to: memset
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
//  321 	//协议列表初始化
//  322 	Protocol_Init();
        ; Setup parameters for call to function Protocol_Init
        LCALL   `??Protocol_Init::?relay`; Banked call to: Protocol_Init
//  323 	//发送数据队列初始化 
//  324 #if UART1_PROTOCOL_RESOLVER
//  325 	UART1_Resolver->Protocol_Queue = Queue_Init( _UART1_Protocol_QueueBuf,sizeof(PROTOCOL_INFO_T), UART1_RPQUEUE_SIZE);
        ; Setup parameters for call to function Queue_Init
        MOV     R4,#0x1
        MOV     R5,#0x0
        MOV     R1,#0x13
        MOV     R2,#_UART1_Protocol_QueueBuf & 0xff
        MOV     R3,#(_UART1_Protocol_QueueBuf >> 8) & 0xff
        LCALL   `??Queue_Init::?relay`; Banked call to: Queue_Init
        MOV     ?V0,R2
        MOV     DPTR,#UART1_Resolver
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R2
        MOV     A,?V0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
//  326 	UART1_Resolver->RPQueue_Size = UART1_RPQUEUE_SIZE; 
        MOV     DPTR,#UART1_Resolver
        LCALL   ??Subroutine29_0 & 0xFFFF
??CrossCallReturnLabel_50:
        INC     DPTR
        INC     DPTR
        MOV     A,#0x1
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        LCALL   ?Subroutine8 & 0xFFFF
//  327 	UART1_Resolver->Protocol_Put = _Protocol_Put;
??CrossCallReturnLabel_14:
        ADD     A,#0x1d
        MOV     DPL,A
        CLR     A
        ADDC    A,R0
        MOV     DPH,A
        MOV     A,#`??_Protocol_Put::?relay` & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(`??_Protocol_Put::?relay` >> 8) & 0xff
        LCALL   ?Subroutine8 & 0xFFFF
//  328 	UART1_Resolver->Fetch_Protocol = _Fetch_Protocol;
??CrossCallReturnLabel_15:
        LCALL   ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_24:
        MOV     A,#`??_Fetch_Protocol::?relay` & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(`??_Fetch_Protocol::?relay` >> 8) & 0xff
        LJMP    ?Subroutine0 & 0xFFFF
//  329 #endif  
//  330 
//  331 #if UART2_PROTOCOL_RESOLVER
//  332 	UART2_Resolver->Protocol_Queue = Queue_Init( _UART2_Protocol_QueueBuf,sizeof(PROTOCOL_INFO_T), UART2_RPQUEUE_SIZE);
//  333 	UART2_Resolver->RPQueue_Size = UART2_RPQUEUE_SIZE; 
//  334 	UART2_Resolver->Protocol_Put = _Protocol_Put;
//  335 	UART2_Resolver->Fetch_Protocol = _Fetch_Protocol;
//  336 #endif  
//  337 	
//  338 #if UART3_PROTOCOL_RESOLVER
//  339 	UART3_Resolver->Protocol_Queue = Queue_Init( _UART3_Protocol_QueueBuf,sizeof(PROTOCOL_INFO_T), UART3_RPQUEUE_SIZE);
//  340 	UART3_Resolver->RPQueue_Size = UART3_RPQUEUE_SIZE; 
//  341 	UART3_Resolver->Protocol_Put = _Protocol_Put;
//  342 	UART3_Resolver->Fetch_Protocol = _Fetch_Protocol;
//  343 #endif 
//  344 	
//  345 #if UART4_PROTOCOL_RESOLVER
//  346 	UART4_Resolver->Protocol_Queue = Queue_Init( _UART4_Protocol_QueueBuf,sizeof(PROTOCOL_INFO_T), UART4_RPQUEUE_SIZE);
//  347 	UART4_Resolver->RPQueue_Size = UART4_RPQUEUE_SIZE; 
//  348 	UART4_Resolver->Protocol_Put = _Protocol_Put;
//  349 	UART4_Resolver->Fetch_Protocol = _Fetch_Protocol;
//  350 #endif 
//  351 	
//  352 }
          CFI EndBlock cfiBlock87

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine8:
          CFI Block cfiCond88 Using cfiCommon0
          CFI Function ProtocolFrame_Init
          CFI Conditional ??CrossCallReturnLabel_14
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond89 Using cfiCommon0
          CFI (cfiCond89) Function ProtocolFrame_Init
          CFI (cfiCond89) Conditional ??CrossCallReturnLabel_15
          CFI (cfiCond89) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond89) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond89) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond89) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond89) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond89) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond89) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond89) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond89) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond89) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond89) CFA_SP SP+-2
          CFI (cfiCond89) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker90 Using cfiCommon1
          CFI (cfiPicker90) NoFunction
          CFI (cfiPicker90) Picker
        MOVX    @DPTR,A
        MOV     DPTR,#UART1_Resolver
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R0
        RET
          CFI EndBlock cfiCond88
          CFI EndBlock cfiCond89
          CFI EndBlock cfiPicker90
//  353 
//  354 /****************************************************
//  355 	函数名:	Protocol_To_Uart
//  356 	功能:		向缓冲区写入待发送至串口
//  357 	参数:		PROTOCOL_INFO_T协议描述信息
//  358 	作者:		liyao 2015年9月8日14:10:51
//  359 ****************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  360 int8_t Protocol_To_Uart(PROTOCOL_INFO_T* pi){ 
Protocol_To_Uart:
          CFI Block cfiBlock91 Using cfiCommon0
          CFI Function Protocol_To_Uart
        CODE
        FUNCALL Protocol_To_Uart, char_special
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 112, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 112, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 100
        MOV     A,#-0x64
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 112)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  361 	uint8_t data[100] = {0};
        MOV     DPTR,#`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0`
        MOV     R4,?XSP + 0
        MOV     R5,?XSP + 1
        MOV     A,#0x64
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  362 	uint8_t i = 0,special_H,special_L, index = 0,tmp_val;
//  363 	uint16_t special_char; 
//  364 	data[index++] = pi->head;
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
        MOV     ?V0,#0x1
//  365 	for(i = 1; i < pi->alen-1;i++){
        MOV     ?V1,#0x1
        SJMP    ??Protocol_To_Uart_0
//  366             if(i == pi->alen - 2)
//  367                 tmp_val = pi->checksum;
//  368             else
//  369 		tmp_val = ((uint8_t *)pi)[i];
//  370 		if(tmp_val == 0xFD || tmp_val == 0xF8 || tmp_val == 0xFE){//转义
//  371 			special_char = char_special(tmp_val); 
//  372 			special_H =  special_char >> 8;
//  373 			special_L =  special_char & 0x00ff;
//  374 			data[index++] = special_H;
//  375 			data[index++] = special_L;
//  376 		}else{
//  377 			data[index++] = tmp_val;
??Protocol_To_Uart_1:
        LCALL   ?Subroutine14 & 0xFFFF
//  378 		}
??CrossCallReturnLabel_42:
        MOV     A,R1
??Protocol_To_Uart_2:
        MOVX    @DPTR,A
        INC     ?V0
        INC     ?V1
??Protocol_To_Uart_0:
        MOV     A,R6
        ADD     A,#0xc
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOVX    A,@DPTR
        ADD     A,#-0x1
        MOV     R2,A
        CLR     A
        ADDC    A,#-0x1
        MOV     R3,A
        CLR     C
        MOV     A,?V1
        SUBB    A,R2
        CLR     A
        SUBB    A,R3
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JNC     ??Protocol_To_Uart_3
        MOV     R0,?V1
        MOVX    A,@DPTR
        ADD     A,#-0x2
        DEC     R2
        CLR     A
        ADDC    A,#-0x1
        MOV     R3,A
        MOV     A,R2
        XRL     A,R0
        ORL     A,R3
        JNZ     ??Protocol_To_Uart_4
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        SJMP    ??Protocol_To_Uart_5
??Protocol_To_Uart_4:
        MOV     A,R6
        ADD     A,R0
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
??Protocol_To_Uart_5:
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,#-0x3
        XRL     A,R1
        JZ      ??Protocol_To_Uart_6
        MOV     A,#-0x8
        XRL     A,R1
        JZ      ??Protocol_To_Uart_6
        MOV     A,#-0x2
        XRL     A,R1
        JNZ     ??Protocol_To_Uart_1
??Protocol_To_Uart_6:
        ; Setup parameters for call to function char_special
        LCALL   `??char_special::?relay`; Banked call to: char_special
        LCALL   ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_43:
        MOV     A,R3
        MOVX    @DPTR,A
        INC     ?V0
        INC     R0
        LCALL   ??Subroutine27_0 & 0xFFFF
//  379 	}
??CrossCallReturnLabel_41:
        MOV     A,R2
        SJMP    ??Protocol_To_Uart_2
//  380 	//data[index++] = pi->checksum;
//  381 	data[index++] = pi->tail;
??Protocol_To_Uart_3:
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        LCALL   ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_44:
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  382         if(pi->Desc_T != NULL)
        MOV     A,R6
        ADD     A,#0xd
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        LCALL   ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_40:
        JZ      ??Protocol_To_Uart_7
//  383             pi->Desc_T->send(data, index);
        ; Setup parameters for indirect call
        MOV     A,#0x1
        ADD     A,?V0
        MOV     R1,A
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_23:
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R0
        ADD     A,#0x6
        MOV     DPL,A
        CLR     A
        ADDC    A,R0
        MOV     DPH,A
        LCALL   ??Subroutine29_0 & 0xFFFF
??CrossCallReturnLabel_51:
        LCALL   ?CALL_IND
//  384 	return 0;
??Protocol_To_Uart_7:
        MOV     R1,#0x0
        MOV     A,#0x64
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
//  385 }
          CFI EndBlock cfiBlock91

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine17:
          CFI Block cfiCond92 Using cfiCommon0
          CFI Function _Protocol_Put
          CFI Conditional ??CrossCallReturnLabel_22
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 13)
          CFI Block cfiCond93 Using cfiCommon0
          CFI (cfiCond93) Function Protocol_To_Uart
          CFI (cfiCond93) Conditional ??CrossCallReturnLabel_23
          CFI (cfiCond93) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond93) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond93) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond93) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond93) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond93) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond93) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond93) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond93) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond93) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond93) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond93) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond93) CFA_SP SP+-2
          CFI (cfiCond93) CFA_XSP16 add(XSP16, 112)
          CFI Block cfiPicker94 Using cfiCommon1
          CFI (cfiPicker94) NoFunction
          CFI (cfiPicker94) Picker
        MOV     A,R6
        ADD     A,#0xd
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        RET
          CFI EndBlock cfiCond92
          CFI EndBlock cfiCond93
          CFI EndBlock cfiPicker94

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine14:
          CFI Block cfiCond95 Using cfiCommon0
          CFI Function Protocol_To_Uart
          CFI Conditional ??CrossCallReturnLabel_42
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 112)
          CFI Block cfiCond96 Using cfiCommon0
          CFI (cfiCond96) Function Protocol_To_Uart
          CFI (cfiCond96) Conditional ??CrossCallReturnLabel_43
          CFI (cfiCond96) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond96) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond96) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond96) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond96) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond96) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond96) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond96) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond96) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond96) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond96) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond96) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond96) CFA_SP SP+-2
          CFI (cfiCond96) CFA_XSP16 add(XSP16, 112)
          CFI Block cfiCond97 Using cfiCommon0
          CFI (cfiCond97) Function Protocol_To_Uart
          CFI (cfiCond97) Conditional ??CrossCallReturnLabel_44
          CFI (cfiCond97) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond97) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond97) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond97) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond97) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond97) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond97) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond97) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond97) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond97) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond97) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond97) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond97) CFA_XSP16 add(XSP16, 112)
          CFI Block cfiPicker98 Using cfiCommon1
          CFI (cfiPicker98) NoFunction
          CFI (cfiPicker98) Picker
        MOV     R0,?V0
          CFI EndBlock cfiCond95
          CFI EndBlock cfiCond96
          CFI EndBlock cfiCond97
          CFI EndBlock cfiPicker98
        REQUIRE ??Subroutine27_0
        ; // Fall through to label ??Subroutine27_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine27_0:
          CFI Block cfiCond99 Using cfiCommon0
          CFI Function Protocol_To_Uart
          CFI Conditional ??CrossCallReturnLabel_41
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 112)
          CFI Block cfiCond100 Using cfiCommon0
          CFI (cfiCond100) Function Protocol_To_Uart
          CFI (cfiCond100) Conditional ??CrossCallReturnLabel_42
          CFI (cfiCond100) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond100) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond100) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond100) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond100) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond100) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond100) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond100) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond100) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond100) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond100) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond100) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond100) CFA_SP SP+-2
          CFI (cfiCond100) CFA_XSP16 add(XSP16, 112)
          CFI Block cfiCond101 Using cfiCommon0
          CFI (cfiCond101) Function Protocol_To_Uart
          CFI (cfiCond101) Conditional ??CrossCallReturnLabel_43
          CFI (cfiCond101) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond101) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond101) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond101) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond101) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond101) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond101) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond101) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond101) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond101) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond101) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond101) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond101) CFA_SP SP+-2
          CFI (cfiCond101) CFA_XSP16 add(XSP16, 112)
          CFI Block cfiCond102 Using cfiCommon0
          CFI (cfiCond102) Function Protocol_To_Uart
          CFI (cfiCond102) Conditional ??CrossCallReturnLabel_44
          CFI (cfiCond102) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond102) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond102) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond102) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond102) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond102) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond102) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond102) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond102) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond102) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond102) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond102) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond102) CFA_XSP16 add(XSP16, 112)
          CFI Block cfiPicker103 Using cfiCommon1
          CFI (cfiPicker103) NoFunction
          CFI (cfiPicker103) Picker
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,DPL
        ADD     A,R0
        MOV     DPL,A
        CLR     A
        ADDC    A,DPH
        MOV     DPH,A
        RET
          CFI EndBlock cfiCond99
          CFI EndBlock cfiCond100
          CFI EndBlock cfiCond101
          CFI EndBlock cfiCond102
          CFI EndBlock cfiPicker103
//  386 
//  387 //###################################自定义扩展函数区###################################
//  388 /****************************************************
//  389 	函数名:	Protocol_Send
//  390 	功能:		发送协议
//  391 	参数:		目标板,参数结构体,参数结构体长度
//  392 	注：协议历史编号统一处理
//  393 	作者:		liyao 2016年9月18日11:50:55
//  394 ****************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  395 void Protocol_Send(MODULE_ACTION ModuleAction,PROTOCOL_T* Protocol_t,u8 Len){ 
Protocol_Send:
          CFI Block cfiBlock104 Using cfiCommon0
          CFI Function Protocol_Send
        CODE
        FUNCALL Protocol_Send, Get_Protocol_Description
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Protocol_Send, getCheckSum_ByProtocolInfo
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Protocol_Send, Protocol_To_Uart
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 19
        MOV     A,#-0x13
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 33)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     ?V2,R4
        MOV     ?V3,R5
        MOV     ?V0,R1
//  396 	PROTOCOL_INFO_T pi = {0}; 
        MOV     DPTR,#`?<Constant {0}>`
        MOV     R4,?XSP + 0
        MOV     R5,?XSP + 1
        MOV     A,#0x13
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  397 	PROTOCOL_DESC_T* Desc_T = Get_Protocol_Description(ModuleAction, SEND);
        ; Setup parameters for call to function Get_Protocol_Description
        MOV     R1,A
        LCALL   `??Get_Protocol_Description::?relay`; Banked call to: Get_Protocol_Description
//  398 	pi.Desc_T = Desc_T;
        MOV     A,R2
        MOV     R0,A
        MOV     A,R3
        MOV     R1,A
        MOV     A,#0xd
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  399 	pi.head = 0xFD;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#-0x3
        MOVX    @DPTR,A
//  400 	pi.plen = Len + 3;//参数个数+3   帧长度
        MOV     A,#0x3
        ADD     A,?V0
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  401 	pi.module = ModuleAction >> 8; 
        MOV     ?V4,R6
        MOV     ?V5,R7
        MOV     A,#0x8
        MOV     R0,#?V4
        LCALL   ?SS_SHR
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,?V4
        MOVX    @DPTR,A
//  402 	pi.serial = Desc_T->Serial++;
        MOV     A,R2
        ADD     A,#0x5
        MOV     R0,A
        CLR     A
        ADDC    A,R3
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        INC     A
        MOVX    @DPTR,A
//  403 	pi.action = ModuleAction & 0x00ff;
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R6
        MOVX    @DPTR,A
//  404 	pi.protocol = *Protocol_t; 
        MOV     DPL,?V2
        MOV     DPH,?V3
        PUSH    DPL
          CFI CFA_SP SP+-1
        PUSH    DPH
          CFI CFA_SP SP+-2
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        POP     DPH
          CFI CFA_SP SP+-1
        POP     DPL
          CFI CFA_SP SP+0
        MOV     A,#0x3
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  405 	pi.checksum = getCheckSum_ByProtocolInfo(&pi);
        ; Setup parameters for call to function getCheckSum_ByProtocolInfo
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??getCheckSum_ByProtocolInfo::?relay`; Banked call to: getCheckSum_ByProtocolInfo
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R1
        MOVX    @DPTR,A
//  406 	pi.tail = 0xF8;
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x8
        MOVX    @DPTR,A
//  407 	pi.paralen = Len;
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        MOV     A,?V0
        MOVX    @DPTR,A
//  408 	pi.alen = pi.plen + 5; 
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        ADD     A,#0x5
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  409 //         printf("%x,%x,%x,%x,%x,%x,%x,%x,%x,%x\r\n",
//  410 //                                                               pi.head,
//  411 //                                                               pi.standby1,
//  412 //                                                               pi.plen,
//  413 //                                                               pi.module,
//  414 //                                                               pi.serial,
//  415 //                                                               pi.action,
//  416 //                                                               pi.protocol.AddrReport_P.para1,
//  417 //                                                               pi.protocol.AddrReport_P.para2,
//  418 //                                                               pi.checksum,
//  419 //                                                               pi.tail);
//  420 	Protocol_To_Uart(&pi);	
        ; Setup parameters for call to function Protocol_To_Uart
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??Protocol_To_Uart::?relay`; Banked call to: Protocol_To_Uart
//  421 }
        MOV     A,#0x13
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     R7,#0x6
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock104

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {0}>`:
        DB 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0
//  422 
//  423 /****************************************************
//  424 	函数名:	Protocol_Send_Transpond
//  425 	功能:		转发协议
//  426 	参数:		PROTOCOL_INFO_T结构体
//  427 	作者:		liyao 2016年9月18日11:51:35
//  428 ****************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  429 void Protocol_Send_Transpond(PROTOCOL_INFO_T* pi){  
Protocol_Send_Transpond:
          CFI Block cfiBlock105 Using cfiCommon0
          CFI Function Protocol_Send_Transpond
        CODE
        FUNCALL Protocol_Send_Transpond, Protocol_To_Uart
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  430 	Protocol_To_Uart(pi);	
        ; Setup parameters for call to function Protocol_To_Uart
        LCALL   `??Protocol_To_Uart::?relay`; Banked call to: Protocol_To_Uart
//  431 }
          CFI EndBlock cfiBlock105
        REQUIRE ?Subroutine2
        ; // Fall through to label ?Subroutine2

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
          CFI Block cfiBlock106 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        POP     DPH
          CFI CFA_SP SP+-4
          CFI DPH0 SameValue
        POP     DPL
          CFI CFA_SP SP+-3
          CFI DPL0 SameValue
        LJMP    ?BRET
          CFI EndBlock cfiBlock106
//  432 
//  433 /*****************************************************************
//  434 函数名:FetchProtocols
//  435 备注: 处理上位机串口命令总函数
//  436 ******************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  437 void FetchProtocols(void)
FetchProtocols:
          CFI Block cfiBlock107 Using cfiCommon0
          CFI Function FetchProtocols
        CODE
//  438 {
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  439 	#if UART1_PROTOCOL_RESOLVER
//  440 		UART1_Resolver->Fetch_Protocol(UART1_Resolver);
        ; Setup parameters for indirect call
        MOV     DPTR,#UART1_Resolver
        LCALL   ??Subroutine28_0 & 0xFFFF
??CrossCallReturnLabel_46:
        MOV     DPTR,#UART1_Resolver
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R0
        LCALL   ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_25:
        LCALL   ??Subroutine29_0 & 0xFFFF
??CrossCallReturnLabel_52:
        LCALL   ?CALL_IND
//  441 	#endif
//  442 	#if UART2_PROTOCOL_RESOLVER
//  443 		UART2_Resolver->Fetch_Protocol(UART2_Resolver);
//  444 	#endif
//  445 	#if UART3_PROTOCOL_RESOLVER
//  446 		UART3_Resolver->Fetch_Protocol(UART3_Resolver);
//  447 	#endif
//  448 	#if UART4_PROTOCOL_RESOLVER
//  449 		UART4_Resolver->Fetch_Protocol(UART4_Resolver);
//  450 	#endif
//  451 }
        SJMP    ?Subroutine2
          CFI EndBlock cfiBlock107

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine18:
          CFI Block cfiCond108 Using cfiCommon0
          CFI Function ProtocolFrame_Init
          CFI Conditional ??CrossCallReturnLabel_24
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond109 Using cfiCommon0
          CFI (cfiCond109) Function FetchProtocols
          CFI (cfiCond109) Conditional ??CrossCallReturnLabel_25
          CFI (cfiCond109) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond109) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond109) CFA_SP SP+-7
          CFI Block cfiPicker110 Using cfiCommon1
          CFI (cfiPicker110) NoFunction
          CFI (cfiPicker110) Picker
        ADD     A,#0x1f
        MOV     DPL,A
        CLR     A
        ADDC    A,R0
        MOV     DPH,A
        RET
          CFI EndBlock cfiCond108
          CFI EndBlock cfiCond109
          CFI EndBlock cfiPicker110

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine13:
          CFI Block cfiCond111 Using cfiCommon0
          CFI Function _Protocol_Put
          CFI Conditional ??CrossCallReturnLabel_47
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 13)
          CFI Block cfiCond112 Using cfiCommon0
          CFI (cfiCond112) Function _Protocol_Put
          CFI (cfiCond112) Conditional ??CrossCallReturnLabel_48
          CFI (cfiCond112) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond112) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond112) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond112) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond112) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond112) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond112) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond112) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond112) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond112) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond112) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond112) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond112) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond112) CFA_SP SP+-2
          CFI (cfiCond112) CFA_XSP16 add(XSP16, 13)
          CFI Block cfiPicker113 Using cfiCommon1
          CFI (cfiPicker113) NoFunction
          CFI (cfiPicker113) Picker
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
          CFI EndBlock cfiCond111
          CFI EndBlock cfiCond112
          CFI EndBlock cfiPicker113
        REQUIRE ??Subroutine28_0
        ; // Fall through to label ??Subroutine28_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine28_0:
          CFI Block cfiCond114 Using cfiCommon0
          CFI Function _Fetch_Protocol
          CFI Conditional ??CrossCallReturnLabel_45
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond115 Using cfiCommon0
          CFI (cfiCond115) Function FetchProtocols
          CFI (cfiCond115) Conditional ??CrossCallReturnLabel_46
          CFI (cfiCond115) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond115) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond115) CFA_SP SP+-7
          CFI Block cfiCond116 Using cfiCommon0
          CFI (cfiCond116) Function _Protocol_Put
          CFI (cfiCond116) Conditional ??CrossCallReturnLabel_47
          CFI (cfiCond116) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond116) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond116) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond116) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond116) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond116) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond116) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond116) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond116) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond116) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond116) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond116) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond116) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond116) CFA_SP SP+-2
          CFI (cfiCond116) CFA_XSP16 add(XSP16, 13)
          CFI Block cfiCond117 Using cfiCommon0
          CFI (cfiCond117) Function _Protocol_Put
          CFI (cfiCond117) Conditional ??CrossCallReturnLabel_48
          CFI (cfiCond117) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond117) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond117) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond117) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond117) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond117) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond117) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond117) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond117) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond117) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond117) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond117) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond117) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond117) CFA_SP SP+-2
          CFI (cfiCond117) CFA_XSP16 add(XSP16, 13)
          CFI Block cfiPicker118 Using cfiCommon1
          CFI (cfiPicker118) NoFunction
          CFI (cfiPicker118) Picker
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        RET
          CFI EndBlock cfiCond114
          CFI EndBlock cfiCond115
          CFI EndBlock cfiCond116
          CFI EndBlock cfiCond117
          CFI EndBlock cfiPicker118

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine10:
          CFI Block cfiCond119 Using cfiCommon0
          CFI Function _Fetch_Protocol
          CFI Conditional ??CrossCallReturnLabel_53
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond120 Using cfiCommon0
          CFI (cfiCond120) Function _Protocol_Put
          CFI (cfiCond120) Conditional ??CrossCallReturnLabel_54
          CFI (cfiCond120) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond120) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond120) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond120) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond120) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond120) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond120) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond120) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond120) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond120) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond120) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond120) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond120) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond120) CFA_SP SP+-2
          CFI (cfiCond120) CFA_XSP16 add(XSP16, 13)
          CFI Block cfiCond121 Using cfiCommon0
          CFI (cfiCond121) Function _Protocol_Put
          CFI (cfiCond121) Conditional ??CrossCallReturnLabel_55
          CFI (cfiCond121) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond121) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond121) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond121) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond121) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond121) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond121) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond121) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond121) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond121) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond121) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond121) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond121) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond121) CFA_SP SP+-2
          CFI (cfiCond121) CFA_XSP16 add(XSP16, 13)
          CFI Block cfiCond122 Using cfiCommon0
          CFI (cfiCond122) Function _Protocol_Put
          CFI (cfiCond122) Conditional ??CrossCallReturnLabel_56
          CFI (cfiCond122) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond122) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond122) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond122) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond122) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond122) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond122) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond122) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond122) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond122) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond122) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond122) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond122) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond122) CFA_SP SP+-2
          CFI (cfiCond122) CFA_XSP16 add(XSP16, 13)
          CFI Block cfiCond123 Using cfiCommon0
          CFI (cfiCond123) Function _Protocol_Put
          CFI (cfiCond123) Conditional ??CrossCallReturnLabel_57
          CFI (cfiCond123) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond123) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond123) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond123) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond123) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond123) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond123) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond123) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond123) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond123) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond123) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond123) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond123) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond123) CFA_SP SP+-2
          CFI (cfiCond123) CFA_XSP16 add(XSP16, 13)
          CFI Block cfiCond124 Using cfiCommon0
          CFI (cfiCond124) Function _Protocol_Put
          CFI (cfiCond124) Conditional ??CrossCallReturnLabel_58
          CFI (cfiCond124) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond124) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond124) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond124) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond124) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond124) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond124) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond124) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond124) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond124) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond124) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond124) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond124) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond124) CFA_SP SP+-2
          CFI (cfiCond124) CFA_XSP16 add(XSP16, 13)
          CFI Block cfiCond125 Using cfiCommon0
          CFI (cfiCond125) Function Protocol_Register
          CFI (cfiCond125) Conditional ??CrossCallReturnLabel_59
          CFI (cfiCond125) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond125) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond125) CFA_SP SP+-7
          CFI Block cfiCond126 Using cfiCommon0
          CFI (cfiCond126) Function Get_Protocol_Description
          CFI (cfiCond126) Conditional ??CrossCallReturnLabel_60
          CFI (cfiCond126) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond126) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond126) CFA_SP SP+-7
          CFI Block cfiPicker127 Using cfiCommon1
          CFI (cfiPicker127) NoFunction
          CFI (cfiPicker127) Picker
        MOV     DPTR,#Log + 2
          CFI EndBlock cfiCond119
          CFI EndBlock cfiCond120
          CFI EndBlock cfiCond121
          CFI EndBlock cfiCond122
          CFI EndBlock cfiCond123
          CFI EndBlock cfiCond124
          CFI EndBlock cfiCond125
          CFI EndBlock cfiCond126
          CFI EndBlock cfiPicker127
        REQUIRE ??Subroutine29_0
        ; // Fall through to label ??Subroutine29_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine29_0:
          CFI Block cfiCond128 Using cfiCommon0
          CFI Function _Protocol_Put
          CFI Conditional ??CrossCallReturnLabel_49
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 13)
          CFI Block cfiCond129 Using cfiCommon0
          CFI (cfiCond129) Function ProtocolFrame_Init
          CFI (cfiCond129) Conditional ??CrossCallReturnLabel_50
          CFI (cfiCond129) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond129) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond129) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond129) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond129) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond129) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond129) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond129) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond129) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond129) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond129) CFA_SP SP+-2
          CFI (cfiCond129) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond130 Using cfiCommon0
          CFI (cfiCond130) Function Protocol_To_Uart
          CFI (cfiCond130) Conditional ??CrossCallReturnLabel_51
          CFI (cfiCond130) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond130) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond130) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond130) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond130) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond130) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond130) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond130) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond130) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond130) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond130) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond130) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond130) CFA_SP SP+-2
          CFI (cfiCond130) CFA_XSP16 add(XSP16, 112)
          CFI Block cfiCond131 Using cfiCommon0
          CFI (cfiCond131) Function FetchProtocols
          CFI (cfiCond131) Conditional ??CrossCallReturnLabel_52
          CFI (cfiCond131) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond131) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond131) CFA_SP SP+-7
          CFI Block cfiCond132 Using cfiCommon0
          CFI (cfiCond132) Function _Fetch_Protocol
          CFI (cfiCond132) Conditional ??CrossCallReturnLabel_53
          CFI (cfiCond132) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond132) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond132) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond132) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond132) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond132) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond132) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond132) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond132) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond132) CFA_SP SP+-2
          CFI (cfiCond132) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond133 Using cfiCommon0
          CFI (cfiCond133) Function _Protocol_Put
          CFI (cfiCond133) Conditional ??CrossCallReturnLabel_54
          CFI (cfiCond133) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond133) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond133) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond133) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond133) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond133) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond133) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond133) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond133) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond133) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond133) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond133) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond133) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond133) CFA_SP SP+-2
          CFI (cfiCond133) CFA_XSP16 add(XSP16, 13)
          CFI Block cfiCond134 Using cfiCommon0
          CFI (cfiCond134) Function _Protocol_Put
          CFI (cfiCond134) Conditional ??CrossCallReturnLabel_55
          CFI (cfiCond134) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond134) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond134) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond134) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond134) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond134) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond134) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond134) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond134) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond134) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond134) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond134) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond134) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond134) CFA_SP SP+-2
          CFI (cfiCond134) CFA_XSP16 add(XSP16, 13)
          CFI Block cfiCond135 Using cfiCommon0
          CFI (cfiCond135) Function _Protocol_Put
          CFI (cfiCond135) Conditional ??CrossCallReturnLabel_56
          CFI (cfiCond135) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond135) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond135) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond135) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond135) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond135) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond135) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond135) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond135) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond135) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond135) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond135) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond135) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond135) CFA_SP SP+-2
          CFI (cfiCond135) CFA_XSP16 add(XSP16, 13)
          CFI Block cfiCond136 Using cfiCommon0
          CFI (cfiCond136) Function _Protocol_Put
          CFI (cfiCond136) Conditional ??CrossCallReturnLabel_57
          CFI (cfiCond136) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond136) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond136) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond136) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond136) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond136) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond136) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond136) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond136) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond136) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond136) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond136) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond136) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond136) CFA_SP SP+-2
          CFI (cfiCond136) CFA_XSP16 add(XSP16, 13)
          CFI Block cfiCond137 Using cfiCommon0
          CFI (cfiCond137) Function _Protocol_Put
          CFI (cfiCond137) Conditional ??CrossCallReturnLabel_58
          CFI (cfiCond137) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond137) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond137) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond137) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond137) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond137) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond137) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond137) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond137) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond137) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond137) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond137) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond137) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond137) CFA_SP SP+-2
          CFI (cfiCond137) CFA_XSP16 add(XSP16, 13)
          CFI Block cfiCond138 Using cfiCommon0
          CFI (cfiCond138) Function Protocol_Register
          CFI (cfiCond138) Conditional ??CrossCallReturnLabel_59
          CFI (cfiCond138) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond138) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond138) CFA_SP SP+-7
          CFI Block cfiCond139 Using cfiCommon0
          CFI (cfiCond139) Function Get_Protocol_Description
          CFI (cfiCond139) Conditional ??CrossCallReturnLabel_60
          CFI (cfiCond139) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond139) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond139) CFA_SP SP+-7
          CFI Block cfiPicker140 Using cfiCommon1
          CFI (cfiPicker140) NoFunction
          CFI (cfiPicker140) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        RET
          CFI EndBlock cfiCond128
          CFI EndBlock cfiCond129
          CFI EndBlock cfiCond130
          CFI EndBlock cfiCond131
          CFI EndBlock cfiCond132
          CFI EndBlock cfiCond133
          CFI EndBlock cfiCond134
          CFI EndBlock cfiCond135
          CFI EndBlock cfiCond136
          CFI EndBlock cfiCond137
          CFI EndBlock cfiCond138
          CFI EndBlock cfiCond139
          CFI EndBlock cfiPicker140

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for UART1_Resolver>`:
        DATA16
        DW _UART1_Resolver

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??_clean_recv_buf::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    _clean_recv_buf

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??_Fetch_Protocol::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    _Fetch_Protocol

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??_Protocol_Put::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    _Protocol_Put

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??char_special::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    char_special

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??getCheckSum_ByProtocolInfo::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    getCheckSum_ByProtocolInfo

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??Protocol_Register::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    Protocol_Register

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??Get_Protocol_Description::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    Get_Protocol_Description

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ProtocolFrame_Init::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ProtocolFrame_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??Protocol_To_Uart::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    Protocol_To_Uart

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??Protocol_Send::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    Protocol_Send

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??Protocol_Send_Transpond::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    Protocol_Send_Transpond

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??FetchProtocols::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    FetchProtocols

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "\\320\\255\\322\\351\\320\\243\\321\\351\\2`:
        DB "\320\255\322\351\320\243\321\351\262\273\315\250\271\375\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "\\312\\325\\265\\275\\320\\255\\322\\351\\2`:
        DB "\312\325\265\275\320\255\322\351\265\253\312\307\316\336\264\246\300\355\272\257\312\375\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "\\320\\255\\322\\351\\326\\320\\315\\276\\2`:
        DB "\320\255\322\351\326\320\315\276\263\366\317\3260xFD\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "\\264\\246\\300\\355\\326\\241\\263\\244\\2`:
        DB "\264\246\300\355\326\241\263\244\264\355\316\363\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "\\274\\306\\313\\343\\275\\341\\271\\373:%`:
        DB "\274\306\313\343\275\341\271\373:%x\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "%x,%x,%x,%x,%x,%x,%x,...">`:
        DB "%x,%x,%x,%x,%x,%x,%x,%x,%x,%x\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "\\320\\255\\322\\351\\320\\243\\321\\351\\2_1`:
        DB "\320\255\322\351\320\243\321\351\272\315\264\355\316\363\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "\\326\\241\\316\\262\\316\\273\\326\\303\\2`:
        DB "\326\241\316\262\316\273\326\303\267\3070xF8\264\355\316\363\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "\\317\\326\\323\\320\\320\\255\\322\\351\\2`:
        DB "\317\326\323\320\320\255\322\351\277\342\316\336\306\245\305\344\265\261\307\260\320\255\322\351\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "\\320\\255\\322\\351\\327\\242\\262\\341\\3`:
        DB "\320\255\322\351\327\242\262\341\312\247\260\334,\312\375\327\351\302\372\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Get_Protocol_Descript...">`:
        DB "Get_Protocol_Description\316\264\325\322\265\275\320\255\322\351\303\350\312\366\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0`:
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0

        END
// 
// 2 059 bytes in segment BANKED_CODE
//    72 bytes in segment BANK_RELAYS
//     2 bytes in segment XDATA_I
//     2 bytes in segment XDATA_ID
//   369 bytes in segment XDATA_ROM_C
//   173 bytes in segment XDATA_Z
// 
// 2 133 bytes of CODE  memory
//   369 bytes of CONST memory
//   175 bytes of XDATA memory
//
//Errors: none
//Warnings: none
