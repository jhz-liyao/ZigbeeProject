###############################################################################
#
# IAR C/C++ Compiler V9.30.1.3056 for 8051                24/Oct/2016  15:11:58
# Copyright 2004-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.7饮水机控制增加uart\Frame\Tool.c
#    Command line       =  
#        -f "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.7饮水机控制增加uart\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f
#        "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.7饮水机控制增加uart\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=50 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
#        -DREJOIN_POLL_RATE=440 "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack
#        Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.7饮水机控制增加uart\Frame\Tool.c"
#        -D LOG_OUT -D UART1_PROTOCOL_RESOLVER=1 -D xISQC -D NWK_AUTO_POLL -D
#        ZTOOL_P1 -D ISR_KEYINTERRUPT -D xMT_TASK -D xMT_SYS_FUNC -D
#        xMT_ZDO_FUNC -D xLCD_SUPPORTED=DEBUG -D xPOWER_SAVING -lC
#        "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.7饮水机控制增加uart\CC2530DB\WaterMachine\List"
#        -lA "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.7饮水机控制增加uart\CC2530DB\WaterMachine\List"
#        --diag_suppress Pe001,Pa010 -o
#        "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.7饮水机控制增加uart\CC2530DB\WaterMachine\Obj"
#        -e --no_code_motion --debug --core=plain --dptr=16,1
#        --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 8 -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack
#        Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.7饮水机控制增加uart\CC2530DB\"
#        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.7饮水机控制增加uart\CC2530DB\..\Source\"
#        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.7饮水机控制增加uart\CC2530DB\..\Frame\"
#        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.7饮水机控制增加uart\CC2530DB\..\Module\WaterMachine\"
#        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.7饮水机控制增加uart\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.7饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.7饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.7饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.7饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.7饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.7饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.7饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.7饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.7饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.7饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.7饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.7饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.7饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.7饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.7饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.7饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.7饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.7饮水机控制增加uart\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -Ohz
#    List file          =  
#        E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.7饮水机控制增加uart\CC2530DB\WaterMachine\List\Tool.lst
#    Object file        =  
#        E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.7饮水机控制增加uart\CC2530DB\WaterMachine\Obj\Tool.r51
#
###############################################################################

E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh 1.0.0\Projects\zstack\Samples\Demo_App_V1.7饮水机控制增加uart\Frame\Tool.c
      1          #include "Tool.h"
      2          #include "ESP8266_Driver.h"
      3          #include "ProtocolFrame.h" 

   \                                 In  segment XDATA_Z, align 1, keep-with-next
      4          afAddrType_t Liyao_DstAddr;
   \                     Liyao_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
      5          

   \                                 In  segment XDATA_ROM_C, align 1
      6          const cId_t Liyao_ClusterList[LIYAO_MAX_CLUSTERS] =
   \                     Liyao_ClusterList:
   \   000000   0100         DW 1
   \   000002   0200         DW 2
      7          {
      8            LIYAO_PERIODIC_CLUSTERID,
      9            LIYAO_FLASH_CLUSTERID
     10          };
     11          

   \                                 In  segment XDATA_ROM_C, align 1
     12          const SimpleDescriptionFormat_t Liyao_SimpleDesc =
   \                     Liyao_SimpleDesc:
   \   000000   14           DB 20
   \   000001   080F         DW 3848
   \   000003   0100         DW 1
   \   000005   00           DB 0
   \   000006   02           DB 2
   \   000007   ....         DW Liyao_ClusterList
   \   000009   02           DB 2
   \   00000A   ....         DW Liyao_ClusterList
     13          {
     14            LIYAO_ENDPOINT,              //  int Endpoint;
     15            LIYAO_PROFID,                //  uint16 AppProfId[2];
     16            LIYAO_DEVICEID,              //  uint16 AppDeviceId[2];
     17            LIYAO_DEVICE_VERSION,        //  int   AppDevVer:4;
     18            LIYAO_FLAGS,                 //  int   AppFlags:4;
     19            LIYAO_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
     20            (cId_t *)Liyao_ClusterList,  //  uint8 *pAppInClusterList;
     21            LIYAO_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
     22            (cId_t *)Liyao_ClusterList   //  uint8 *pAppInClusterList; 
     23          };
     24          

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
     25          __near_func int putchar(int c)
   \                     putchar:
     26          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 2
   \   000004   74FE         MOV     A,#-0x2
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
   \   000009   85..82       MOV     DPL,?XSP + 0
   \   00000C   85..83       MOV     DPH,?XSP + 1
   \   00000F   EA           MOV     A,R2
   \   000010   F0           MOVX    @DPTR,A
   \   000011   A3           INC     DPTR
   \   000012   EB           MOV     A,R3
   \   000013   F0           MOVX    @DPTR,A
     27              HalUARTWrite(HAL_UART_PORT_0,(unsigned char*)&c,1);
   \   000014                ; Setup parameters for call to function HalUARTWrite
   \   000014   7C01         MOV     R4,#0x1
   \   000016   7D00         MOV     R5,#0x0
   \   000018   AA..         MOV     R2,?XSP + 0
   \   00001A   AB..         MOV     R3,?XSP + 1
   \   00001C   7900         MOV     R1,#0x0
   \   00001E   12....       LCALL   `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
     28              //HalUARTWrite(HAL_UART_PORT_1,(unsigned char*)&c,1);
     29              return(c);
   \   000021   85..82       MOV     DPL,?XSP + 0
   \   000024   85..83       MOV     DPH,?XSP + 1
   \   000027   E0           MOVX    A,@DPTR
   \   000028   FA           MOV     R2,A
   \   000029   A3           INC     DPTR
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   FB           MOV     R3,A
   \   00002C   7402         MOV     A,#0x2
   \   00002E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000031   D083         POP     DPH
   \   000033   D082         POP     DPL
   \   000035   22           RET
     30          }
     31          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     32          void Device_Info(void){
   \                     Device_Info:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
     33            Liyao_DstAddr.addrMode = (afAddrMode_t)Addr16Bit;
   \   000005   90....       MOV     DPTR,#Liyao_DstAddr + 8
   \   000008   7402         MOV     A,#0x2
   \   00000A   F0           MOVX    @DPTR,A
     34            Liyao_DstAddr.endPoint = LIYAO_ENDPOINT;
   \   00000B   A3           INC     DPTR
   \   00000C   7414         MOV     A,#0x14
   \   00000E   F0           MOVX    @DPTR,A
     35            Liyao_DstAddr.addr.shortAddr = 0x0000;
   \   00000F   90....       MOV     DPTR,#Liyao_DstAddr
   \   000012   E4           CLR     A
   \   000013   F0           MOVX    @DPTR,A
   \   000014   A3           INC     DPTR
   \   000015   F0           MOVX    @DPTR,A
     36            UART_Config_L();
   \   000016                ; Setup parameters for call to function UART_Config_L
   \   000016   12....       LCALL   `??UART_Config_L::?relay`; Banked call to: UART_Config_L
     37            //uint16 short_Addr = NLME_GetShortAddr();
     38            //byte* shortAddr_byte = (byte*)&short_Addr;
     39            byte* longAddr = NLME_GetExtAddr();
   \   000019                ; Setup parameters for call to function NLME_GetExtAddr
   \   000019   12....       LCALL   `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
     40            #if defined(ZDO_COORDINATOR)
     41              printf("协调器节点,长地址:%X %X %X %X %X %X %X %X \r\n",
     42                     longAddr[0], longAddr[1], longAddr[2], longAddr[3], longAddr[4], longAddr[5], longAddr[6], longAddr[7] );
     43            #elif defined(RTR_NWK) 
     44                printf("路由器节点, 长地址:%X %X %X %X %X %X %X %X \r\n",
     45                     longAddr[0], longAddr[1], longAddr[2], longAddr[3], longAddr[4], longAddr[5], longAddr[6], longAddr[7] );
     46            #else
     47                printf("终端节点, 长地址:%X %X %X %X %X %X %X %X \r\n",
     48                     longAddr[0], longAddr[1], longAddr[2], longAddr[3], longAddr[4], longAddr[5], longAddr[6], longAddr[7] );
   \   00001C                ; Setup parameters for call to function printf
   \   00001C   8A82         MOV     DPL,R2
   \   00001E   8B83         MOV     DPH,R3
   \   000020   A3           INC     DPTR
   \   000021   A3           INC     DPTR
   \   000022   A3           INC     DPTR
   \   000023   A3           INC     DPTR
   \   000024   A3           INC     DPTR
   \   000025   A3           INC     DPTR
   \   000026   A3           INC     DPTR
   \   000027   E0           MOVX    A,@DPTR
   \   000028   F5..         MOV     ?V0,A
   \   00002A   75..00       MOV     ?V1,#0x0
   \   00002D   78..         MOV     R0,#?V0
   \   00002F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000032   8A82         MOV     DPL,R2
   \   000034   8B83         MOV     DPH,R3
   \   000036   A3           INC     DPTR
   \   000037   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   00003A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003D   8A82         MOV     DPL,R2
   \   00003F   8B83         MOV     DPH,R3
   \   000041   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   000044   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000047   8A82         MOV     DPL,R2
   \   000049   8B83         MOV     DPH,R3
   \   00004B   12....       LCALL   ??Subroutine3_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   00004E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000051   8A82         MOV     DPL,R2
   \   000053   8B83         MOV     DPH,R3
   \   000055   12....       LCALL   ??Subroutine4_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   000058   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005B   8A82         MOV     DPL,R2
   \   00005D   8B83         MOV     DPH,R3
   \   00005F   12....       LCALL   ??Subroutine5_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   000062   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000065   8A82         MOV     DPL,R2
   \   000067   8B83         MOV     DPH,R3
   \   000069   12....       LCALL   ??Subroutine6_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   00006C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00006F   8A82         MOV     DPL,R2
   \   000071   8B83         MOV     DPH,R3
   \   000073   12....       LCALL   ??Subroutine7_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   000076   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000079   7A..         MOV     R2,#`?<Constant "\\326\\325\\266\\313\\275\\332\\265\\343, ` & 0xff
   \   00007B   7B..         MOV     R3,#(`?<Constant "\\326\\325\\266\\313\\275\\332\\265\\343, ` >> 8) & 0xff
   \   00007D   12....       LCALL   `??printf::?relay`   ; Banked call to: printf
   \   000080   7410         MOV     A,#0x10
   \   000082                REQUIRE ?Subroutine0
   \   000082                ; // Fall through to label ?Subroutine0
     49            #endif
     50          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F02         MOV     R7,#0x2
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine3_0
   \   000001                ; // Fall through to label ??Subroutine3_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine3_0:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine4_0
   \   000001                ; // Fall through to label ??Subroutine4_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine4_0:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine5_0
   \   000001                ; // Fall through to label ??Subroutine5_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine5_0:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine6_0
   \   000001                ; // Fall through to label ??Subroutine6_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine6_0:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine7_0
   \   000001                ; // Fall through to label ??Subroutine7_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine7_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0,A
   \   000003   78..         MOV     R0,#?V0
   \   000005   22           RET
     51          
     52          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     53          void SendDataToShortAddr(uint8 TaskID,uint16 shortAddr,unsigned char* data, uint16 len){
   \                     SendDataToShortAddr:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 7
   \   000005   74F9         MOV     A,#-0x7
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   85..82       MOV     DPL,?XSP + 0
   \   00000E   85..83       MOV     DPH,?XSP + 1
   \   000011   F0           MOVX    @DPTR,A
     54            Liyao_DstAddr.addr.shortAddr = shortAddr;
   \   000012   90....       MOV     DPTR,#Liyao_DstAddr
   \   000015   EA           MOV     A,R2
   \   000016   F0           MOVX    @DPTR,A
   \   000017   A3           INC     DPTR
   \   000018   EB           MOV     A,R3
   \   000019   F0           MOVX    @DPTR,A
     55            endPointDesc_t Liyao_epDesc;
     56            Liyao_epDesc.endPoint = LIYAO_ENDPOINT;
   \   00001A   7401         MOV     A,#0x1
   \   00001C   12....       LCALL   ?XSTACK_DISP0_8
   \   00001F   7414         MOV     A,#0x14
   \   000021   F0           MOVX    @DPTR,A
     57            Liyao_epDesc.task_id = &TaskID;
   \   000022   7402         MOV     A,#0x2
   \   000024   12....       LCALL   ?XSTACK_DISP0_8
   \   000027   E5..         MOV     A,?XSP + 0
   \   000029   F0           MOVX    @DPTR,A
   \   00002A   A3           INC     DPTR
   \   00002B   E5..         MOV     A,?XSP + 1
   \   00002D   F0           MOVX    @DPTR,A
     58            Liyao_epDesc.simpleDesc
     59                      = (SimpleDescriptionFormat_t *)&Liyao_SimpleDesc;
   \   00002E   7404         MOV     A,#0x4
   \   000030   12....       LCALL   ?XSTACK_DISP0_8
   \   000033   74..         MOV     A,#Liyao_SimpleDesc & 0xff
   \   000035   F0           MOVX    @DPTR,A
   \   000036   A3           INC     DPTR
   \   000037   74..         MOV     A,#(Liyao_SimpleDesc >> 8) & 0xff
   \   000039   F0           MOVX    @DPTR,A
     60            Liyao_epDesc.latencyReq = noLatencyReqs; 
   \   00003A   7406         MOV     A,#0x6
   \   00003C   12....       LCALL   ?XSTACK_DISP0_8
   \   00003F   E4           CLR     A
   \   000040   F0           MOVX    @DPTR,A
     61            if ( AF_DataRequest( &Liyao_DstAddr, &Liyao_epDesc,
     62                                 LIYAO_FLASH_CLUSTERID,
     63                                 len,
     64                                 data,
     65                                 (unsigned char*)&TaskID,
     66                                 AF_ACK_REQUEST,
     67                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   000041                ; Setup parameters for call to function AF_DataRequest
   \   000041   75..1E       MOV     ?V0,#0x1e
   \   000044   78..         MOV     R0,#?V0
   \   000046   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000049   7401         MOV     A,#0x1
   \   00004B   12....       LCALL   ?XSTACK_DISP100_8
   \   00004E   88..         MOV     ?V0,R0
   \   000050   89..         MOV     ?V1,R1
   \   000052   78..         MOV     R0,#?V0
   \   000054   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000057   8C..         MOV     ?V0,R4
   \   000059   8D..         MOV     ?V1,R5
   \   00005B   78..         MOV     R0,#?V0
   \   00005D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000060   7416         MOV     A,#0x16
   \   000062   12....       LCALL   ?XSTACK_DISP0_8
   \   000065   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000068   75..02       MOV     ?V0,#0x2
   \   00006B   75..00       MOV     ?V1,#0x0
   \   00006E   78..         MOV     R0,#?V0
   \   000070   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000073   7910         MOV     R1,#0x10
   \   000075   740A         MOV     A,#0xa
   \   000077   12....       LCALL   ?XSTACK_DISP102_8
   \   00007A   7A..         MOV     R2,#Liyao_DstAddr & 0xff
   \   00007C   7B..         MOV     R3,#(Liyao_DstAddr >> 8) & 0xff
   \   00007E   12....       LCALL   `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
   \   000081   7409         MOV     A,#0x9
   \   000083   12....       LCALL   ?DEALLOC_XSTACK8
     68            {
     69            }
     70          }
   \   000086   7407         MOV     A,#0x7
   \   000088   02....       LJMP    ?Subroutine0 & 0xFFFF
     71          
     72          /*
     73            功能：串口回环
     74            作者：李尧
     75            时间：2016年9月22日13:03:40
     76          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     77          void UART0_CallBack( uint8 port, uint8 event ){
   \                     UART0_CallBack:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 128
   \   000005   7480         MOV     A,#-0x80
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
     78            uint16 cnt = 0;
     79            uint8 data[MT_UART_DEFAULT_MAX_RX_BUFF] = {0}; 
   \   00000C   90....       MOV     DPTR,#`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0`
   \   00000F   AC..         MOV     R4,?XSP + 0
   \   000011   AD..         MOV     R5,?XSP + 1
   \   000013   7480         MOV     A,#-0x80
   \   000015   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
     80            cnt = Hal_UART_RxBufLen(port);
   \   000018                ; Setup parameters for call to function Hal_UART_RxBufLen
   \   000018   12....       LCALL   `??Hal_UART_RxBufLen::?relay`; Banked call to: Hal_UART_RxBufLen
   \   00001B   8A..         MOV     ?V0,R2
   \   00001D   8B..         MOV     ?V1,R3
   \   00001F   AC..         MOV     R4,?V0
   \   000021   AD..         MOV     R5,?V1
     81            cnt = HalUARTRead (port, data, cnt);
   \   000023                ; Setup parameters for call to function HalUARTRead
   \   000023   AA..         MOV     R2,?XSP + 0
   \   000025   AB..         MOV     R3,?XSP + 1
   \   000027   EE           MOV     A,R6
   \   000028   F9           MOV     R1,A
   \   000029   12....       LCALL   `??HalUARTRead::?relay`; Banked call to: HalUARTRead
   \   00002C   8A..         MOV     ?V0,R2
   \   00002E   8B..         MOV     ?V1,R3
   \   000030   AC..         MOV     R4,?V0
   \   000032   AD..         MOV     R5,?V1
     82            if(cnt > 0)
   \   000034   EC           MOV     A,R4
   \   000035   4D           ORL     A,R5
   \   000036   6009         JZ      ??UART0_CallBack_0
     83              HalUARTWrite( HAL_UART_PORT_1, data, cnt ); 
   \   000038                ; Setup parameters for call to function HalUARTWrite
   \   000038   AA..         MOV     R2,?XSP + 0
   \   00003A   AB..         MOV     R3,?XSP + 1
   \   00003C   7901         MOV     R1,#0x1
   \   00003E   12....       LCALL   `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
     84            //HalUARTWrite(port, data, cnt);
     85          }
   \                     ??UART0_CallBack_0:
   \   000041   7480         MOV     A,#-0x80
   \   000043   02....       LJMP    ?Subroutine0 & 0xFFFF
     86          
     87          extern void BrodcastData(uint8_t* data,uint8_t len);

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     88          void UART1_CallBack( uint8 port, uint8 event ){
   \                     UART1_CallBack:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 128
   \   000005   7480         MOV     A,#-0x80
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V0,R1
     89            uint16 cnt = 0;
     90            uint8 data[MT_UART_DEFAULT_MAX_RX_BUFF] = {0}; 
   \   00000C   90....       MOV     DPTR,#`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_1`
   \   00000F   AC..         MOV     R4,?XSP + 0
   \   000011   AD..         MOV     R5,?XSP + 1
   \   000013   7480         MOV     A,#-0x80
   \   000015   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
     91            cnt = Hal_UART_RxBufLen(port);
   \   000018                ; Setup parameters for call to function Hal_UART_RxBufLen
   \   000018   12....       LCALL   `??Hal_UART_RxBufLen::?relay`; Banked call to: Hal_UART_RxBufLen
   \   00001B   8A..         MOV     ?V2,R2
   \   00001D   8B..         MOV     ?V3,R3
     92            cnt = HalUARTRead (port, data, cnt);
   \   00001F                ; Setup parameters for call to function HalUARTRead
   \   00001F   AC..         MOV     R4,?V2
   \   000021   AD..         MOV     R5,?V3
   \   000023   AA..         MOV     R2,?XSP + 0
   \   000025   AB..         MOV     R3,?XSP + 1
   \   000027   A9..         MOV     R1,?V0
   \   000029   12....       LCALL   `??HalUARTRead::?relay`; Banked call to: HalUARTRead
   \   00002C   8A..         MOV     ?V2,R2
   \   00002E   8B..         MOV     ?V3,R3
   \   000030   AE..         MOV     R6,?V2
     93          //  for(i = 0;i < cnt; i++){
     94          //    HalUARTWrite(HAL_UART_PORT_0, &data[i], 1); 
     95          //  }
     96            HalUARTWrite( HAL_UART_PORT_0, data, cnt ); 
   \   000032                ; Setup parameters for call to function HalUARTWrite
   \   000032   EE           MOV     A,R6
   \   000033   FC           MOV     R4,A
   \   000034   AD..         MOV     R5,?V3
   \   000036   AA..         MOV     R2,?XSP + 0
   \   000038   AB..         MOV     R3,?XSP + 1
   \   00003A   7900         MOV     R1,#0x0
   \   00003C   12....       LCALL   `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
     97            UART1_Resolver->Protocol_Put(UART1_Resolver,data, cnt); 
   \   00003F                ; Setup parameters for indirect call
   \   00003F   EE           MOV     A,R6
   \   000040   F9           MOV     R1,A
   \   000041   AC..         MOV     R4,?XSP + 0
   \   000043   AD..         MOV     R5,?XSP + 1
   \   000045   90....       MOV     DPTR,#UART1_Resolver
   \   000048   E0           MOVX    A,@DPTR
   \   000049   FA           MOV     R2,A
   \   00004A   A3           INC     DPTR
   \   00004B   E0           MOVX    A,@DPTR
   \   00004C   FB           MOV     R3,A
   \   00004D   90....       MOV     DPTR,#UART1_Resolver
   \   000050   E0           MOVX    A,@DPTR
   \   000051   F8           MOV     R0,A
   \   000052   A3           INC     DPTR
   \   000053   E0           MOVX    A,@DPTR
   \   000054   C8           XCH     A,R0
   \   000055   241D         ADD     A,#0x1d
   \   000057   F582         MOV     DPL,A
   \   000059   E4           CLR     A
   \   00005A   38           ADDC    A,R0
   \   00005B   F583         MOV     DPH,A
   \   00005D   E0           MOVX    A,@DPTR
   \   00005E   F8           MOV     R0,A
   \   00005F   A3           INC     DPTR
   \   000060   E0           MOVX    A,@DPTR
   \   000061   F583         MOV     DPH,A
   \   000063   8882         MOV     DPL,R0
   \   000065   12....       LCALL   ?CALL_IND
     98            //BrodcastData(data, cnt);
     99          //  HalUARTWrite(port, data, cnt);
    100            ESP8266_Poll(data, cnt);
   \   000068                ; Setup parameters for call to function ESP8266_Poll
   \   000068   EE           MOV     A,R6
   \   000069   F9           MOV     R1,A
   \   00006A   AA..         MOV     R2,?XSP + 0
   \   00006C   AB..         MOV     R3,?XSP + 1
   \   00006E   12....       LCALL   `??ESP8266_Poll::?relay`; Banked call to: ESP8266_Poll
    101          }
   \   000071   7480         MOV     A,#-0x80
   \   000073                REQUIRE ?Subroutine1
   \   000073                ; // Fall through to label ?Subroutine1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine8_0
   \   000003                ; // Fall through to label ??Subroutine8_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine8_0:
   \   000000   7F04         MOV     R7,#0x4
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    102          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    103          void UART_Config_L(void){  
   \                     UART_Config_L:
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 29
   \   000004   74E3         MOV     A,#-0x1d
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
    104            halUARTCfg_t uartConfig;
    105            /* UART Configuration */
    106            uartConfig.configured           = TRUE;
   \   000009   85..82       MOV     DPL,?XSP + 0
   \   00000C   85..83       MOV     DPH,?XSP + 1
   \   00000F   7401         MOV     A,#0x1
   \   000011   F0           MOVX    @DPTR,A
    107            uartConfig.baudRate             = HAL_UART_BR_115200;
   \   000012   12....       LCALL   ?XSTACK_DISP0_8
   \   000015   7404         MOV     A,#0x4
   \   000017   F0           MOVX    @DPTR,A
    108            uartConfig.flowControl          = FALSE;
   \   000018   7402         MOV     A,#0x2
   \   00001A   12....       LCALL   ?XSTACK_DISP0_8
   \   00001D   E4           CLR     A
   \   00001E   F0           MOVX    @DPTR,A
    109            uartConfig.flowControlThreshold = MT_UART_DEFAULT_THRESHOLD;
   \   00001F   7403         MOV     A,#0x3
   \   000021   12....       LCALL   ?XSTACK_DISP0_8
   \   000024   7440         MOV     A,#0x40
   \   000026   F0           MOVX    @DPTR,A
   \   000027   A3           INC     DPTR
   \   000028   E4           CLR     A
   \   000029   F0           MOVX    @DPTR,A
    110            uartConfig.rx.maxBufSize        = MT_UART_DEFAULT_MAX_RX_BUFF;
   \   00002A   740A         MOV     A,#0xa
   \   00002C   12....       LCALL   ?XSTACK_DISP0_8
   \   00002F   7480         MOV     A,#-0x80
   \   000031   F0           MOVX    @DPTR,A
   \   000032   A3           INC     DPTR
   \   000033   E4           CLR     A
   \   000034   F0           MOVX    @DPTR,A
    111            uartConfig.tx.maxBufSize        = MT_UART_DEFAULT_MAX_TX_BUFF;
   \   000035   7412         MOV     A,#0x12
   \   000037   12....       LCALL   ?XSTACK_DISP0_8
   \   00003A   7480         MOV     A,#-0x80
   \   00003C   F0           MOVX    @DPTR,A
   \   00003D   A3           INC     DPTR
   \   00003E   E4           CLR     A
   \   00003F   F0           MOVX    @DPTR,A
    112            uartConfig.idleTimeout          = MT_UART_DEFAULT_IDLE_TIMEOUT;
   \   000040   7405         MOV     A,#0x5
   \   000042   12....       LCALL   ?XSTACK_DISP0_8
   \   000045   7406         MOV     A,#0x6
   \   000047   F0           MOVX    @DPTR,A
    113            uartConfig.intEnable            = TRUE; 
   \   000048   7416         MOV     A,#0x16
   \   00004A   12....       LCALL   ?XSTACK_DISP0_8
   \   00004D   7401         MOV     A,#0x1
   \   00004F   F0           MOVX    @DPTR,A
    114            uartConfig.callBackFunc         = UART0_CallBack;
   \   000050   741B         MOV     A,#0x1b
   \   000052   12....       LCALL   ?XSTACK_DISP0_8
   \   000055   74..         MOV     A,#`??UART0_CallBack::?relay` & 0xff
   \   000057   F0           MOVX    @DPTR,A
   \   000058   A3           INC     DPTR
   \   000059   74..         MOV     A,#(`??UART0_CallBack::?relay` >> 8) & 0xff
   \   00005B   F0           MOVX    @DPTR,A
    115            HalUARTOpen (HAL_UART_PORT_0, &uartConfig);
   \   00005C                ; Setup parameters for call to function HalUARTOpen
   \   00005C   AA..         MOV     R2,?XSP + 0
   \   00005E   AB..         MOV     R3,?XSP + 1
   \   000060   7900         MOV     R1,#0x0
   \   000062   12....       LCALL   `??HalUARTOpen::?relay`; Banked call to: HalUARTOpen
    116            uartConfig.callBackFunc         = UART1_CallBack;
   \   000065   741B         MOV     A,#0x1b
   \   000067   12....       LCALL   ?XSTACK_DISP0_8
   \   00006A   74..         MOV     A,#`??UART1_CallBack::?relay` & 0xff
   \   00006C   F0           MOVX    @DPTR,A
   \   00006D   A3           INC     DPTR
   \   00006E   74..         MOV     A,#(`??UART1_CallBack::?relay` >> 8) & 0xff
   \   000070   F0           MOVX    @DPTR,A
    117            HalUARTOpen (HAL_UART_PORT_1, &uartConfig);
   \   000071                ; Setup parameters for call to function HalUARTOpen
   \   000071   AA..         MOV     R2,?XSP + 0
   \   000073   AB..         MOV     R3,?XSP + 1
   \   000075   7901         MOV     R1,#0x1
   \   000077   12....       LCALL   `??HalUARTOpen::?relay`; Banked call to: HalUARTOpen
    118          }
   \   00007A   741D         MOV     A,#0x1d
   \   00007C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00007F   D083         POP     DPH
   \   000081   D082         POP     DPL
   \   000083   02....       LJMP    ?BRET
    119          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    120          void ZdoStateChange_printf(devStates_t devStates){
   \                     ZdoStateChange_printf:
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
    121            switch((uint8)devStates){
   \   000006   6020         JZ      ??ZdoStateChange_printf_0
   \   000008   14           DEC     A
   \   000009   6023         JZ      ??ZdoStateChange_printf_1
   \   00000B   14           DEC     A
   \   00000C   6026         JZ      ??ZdoStateChange_printf_2
   \   00000E   14           DEC     A
   \   00000F   6029         JZ      ??ZdoStateChange_printf_3
   \   000011   14           DEC     A
   \   000012   602C         JZ      ??ZdoStateChange_printf_4
   \   000014   14           DEC     A
   \   000015   602F         JZ      ??ZdoStateChange_printf_5
   \   000017   14           DEC     A
   \   000018   6032         JZ      ??ZdoStateChange_printf_6
   \   00001A   14           DEC     A
   \   00001B   6035         JZ      ??ZdoStateChange_printf_7
   \   00001D   14           DEC     A
   \   00001E   6038         JZ      ??ZdoStateChange_printf_8
   \   000020   14           DEC     A
   \   000021   603B         JZ      ??ZdoStateChange_printf_9
   \   000023   14           DEC     A
   \   000024   603E         JZ      ??ZdoStateChange_printf_10
   \   000026   8043         SJMP    ??ZdoStateChange_printf_11
    122              case (uint8)DEV_HOLD:
    123                printf("DEV_HOLD\r\n");
   \                     ??ZdoStateChange_printf_0:
   \   000028                ; Setup parameters for call to function printf
   \   000028   7A..         MOV     R2,#`?<Constant "DEV_HOLD\\r\\n">` & 0xff
   \   00002A   7B..         MOV     R3,#(`?<Constant "DEV_HOLD\\r\\n">` >> 8) & 0xff
   \   00002C   803A         SJMP    ??ZdoStateChange_printf_12
    124                break;
    125              case (uint8)DEV_INIT:
    126                printf("DEV_INIT\r\n"); 
   \                     ??ZdoStateChange_printf_1:
   \   00002E                ; Setup parameters for call to function printf
   \   00002E   7A..         MOV     R2,#`?<Constant "DEV_INIT\\r\\n">` & 0xff
   \   000030   7B..         MOV     R3,#(`?<Constant "DEV_INIT\\r\\n">` >> 8) & 0xff
   \   000032   8034         SJMP    ??ZdoStateChange_printf_12
    127                break;
    128              case (uint8)DEV_NWK_DISC:
    129                printf("DEV_NWK_DISC\r\n"); 
   \                     ??ZdoStateChange_printf_2:
   \   000034                ; Setup parameters for call to function printf
   \   000034   7A..         MOV     R2,#`?<Constant "DEV_NWK_DISC\\r\\n">` & 0xff
   \   000036   7B..         MOV     R3,#(`?<Constant "DEV_NWK_DISC\\r\\n">` >> 8) & 0xff
   \   000038   802E         SJMP    ??ZdoStateChange_printf_12
    130                break;
    131              case (uint8)DEV_NWK_JOINING:
    132                printf("DEV_NWK_JOINING\r\n"); 
   \                     ??ZdoStateChange_printf_3:
   \   00003A                ; Setup parameters for call to function printf
   \   00003A   7A..         MOV     R2,#`?<Constant "DEV_NWK_JOINING\\r\\n">` & 0xff
   \   00003C   7B..         MOV     R3,#(`?<Constant "DEV_NWK_JOINING\\r\\n">` >> 8) & 0xff
   \   00003E   8028         SJMP    ??ZdoStateChange_printf_12
    133                break;
    134              case (uint8)DEV_NWK_REJOIN:
    135                printf("DEV_NWK_REJOIN\r\n"); 
   \                     ??ZdoStateChange_printf_4:
   \   000040                ; Setup parameters for call to function printf
   \   000040   7A..         MOV     R2,#`?<Constant "DEV_NWK_REJOIN\\r\\n">` & 0xff
   \   000042   7B..         MOV     R3,#(`?<Constant "DEV_NWK_REJOIN\\r\\n">` >> 8) & 0xff
   \   000044   8022         SJMP    ??ZdoStateChange_printf_12
    136                break;
    137              case (uint8)DEV_END_DEVICE_UNAUTH:
    138                printf("DEV_END_DEVICE_UNAUTH 加入但尚未认证\r\n");  
   \                     ??ZdoStateChange_printf_5:
   \   000046                ; Setup parameters for call to function printf
   \   000046   7A..         MOV     R2,#`?<Constant "DEV_END_DEVICE_UNAUTH...">` & 0xff
   \   000048   7B..         MOV     R3,#(`?<Constant "DEV_END_DEVICE_UNAUTH...">` >> 8) & 0xff
   \   00004A   801C         SJMP    ??ZdoStateChange_printf_12
    139                break;
    140              case (uint8)DEV_END_DEVICE:
    141                printf("DEV_END_DEVICE 设备认证完成 \r\n"); 
   \                     ??ZdoStateChange_printf_6:
   \   00004C                ; Setup parameters for call to function printf
   \   00004C   7A..         MOV     R2,#`?<Constant "DEV_END_DEVICE \\311\\350\\261\\270\\31` & 0xff
   \   00004E   7B..         MOV     R3,#(`?<Constant "DEV_END_DEVICE \\311\\350\\261\\270\\31` >> 8) & 0xff
   \   000050   8016         SJMP    ??ZdoStateChange_printf_12
    142                break;
    143              case (uint8)DEV_ROUTER:
    144                printf("DEV_ROUTER 设备加入,进行验证,是一个路由器 \r\n");  
   \                     ??ZdoStateChange_printf_7:
   \   000052                ; Setup parameters for call to function printf
   \   000052   7A..         MOV     R2,#`?<Constant "DEV_ROUTER \\311\\350\\261\\270\\274\\32` & 0xff
   \   000054   7B..         MOV     R3,#(`?<Constant "DEV_ROUTER \\311\\350\\261\\270\\274\\32` >> 8) & 0xff
   \   000056   8010         SJMP    ??ZdoStateChange_printf_12
    145                break;
    146              case (uint8)DEV_COORD_STARTING: 
    147                printf("DEV_COORD_STARTING 协调器开始协调 \r\n");  
   \                     ??ZdoStateChange_printf_8:
   \   000058                ; Setup parameters for call to function printf
   \   000058   7A..         MOV     R2,#`?<Constant "DEV_COORD_STARTING \\320\\255...">` & 0xff
   \   00005A   7B..         MOV     R3,#(`?<Constant "DEV_COORD_STARTING \\320\\255...">` >> 8) & 0xff
   \   00005C   800A         SJMP    ??ZdoStateChange_printf_12
    148                break;
    149              case (uint8)DEV_ZB_COORD: 
    150                printf("DEV_ZB_COORD 协调器开始协调 \r\n");
   \                     ??ZdoStateChange_printf_9:
   \   00005E                ; Setup parameters for call to function printf
   \   00005E   7A..         MOV     R2,#`?<Constant "DEV_ZB_COORD \\320\\255\\265\\367\\306\\` & 0xff
   \   000060   7B..         MOV     R3,#(`?<Constant "DEV_ZB_COORD \\320\\255\\265\\367\\306\\` >> 8) & 0xff
   \   000062   8004         SJMP    ??ZdoStateChange_printf_12
    151                break; 
    152              case (uint8)DEV_NWK_ORPHAN:
    153                printf("DEV_NWK_ORPHAN 设备失去父节点连接. . \r\n");
   \                     ??ZdoStateChange_printf_10:
   \   000064                ; Setup parameters for call to function printf
   \   000064   7A..         MOV     R2,#`?<Constant "DEV_NWK_ORPHAN \\311\\350\\261\\270\\31` & 0xff
   \   000066   7B..         MOV     R3,#(`?<Constant "DEV_NWK_ORPHAN \\311\\350\\261\\270\\31` >> 8) & 0xff
   \                     ??ZdoStateChange_printf_12:
   \   000068   12....       LCALL   `??printf::?relay`   ; Banked call to: printf
    154                
    155                break;
    156            }
    157          }
   \                     ??ZdoStateChange_printf_11:
   \   00006B   7F01         MOV     R7,#0x1
   \   00006D   02....       LJMP    ?BANKED_LEAVE_XDATA
    158          
    159          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    160          void Meter_Leave(void)
   \                     Meter_Leave:
    161          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV     A,#-0x5
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    162            NLME_LeaveReq_t leaveReq = {0};
   \   00000A   90....       MOV     DPTR,#`?<Constant {(uint8 *)0}>`
   \   00000D   AC..         MOV     R4,?XSP + 0
   \   00000F   AD..         MOV     R5,?XSP + 1
   \   000011   7405         MOV     A,#0x5
   \   000013   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    163              //osal_memset((uint8 *)&leaveReq,0,sizeof(NLME_LeaveReq_t));
    164            osal_memcpy(leaveReq.extAddr,NLME_GetExtAddr(),Z_EXTADDR_LEN);
   \   000016                ; Setup parameters for call to function NLME_GetExtAddr
   \   000016   12....       LCALL   `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
   \   000019   8A..         MOV     ?V0,R2
   \   00001B   8B..         MOV     ?V1,R3
   \   00001D                ; Setup parameters for call to function osal_memcpy
   \   00001D   75..00       MOV     ?V2,#0x0
   \   000020   78..         MOV     R0,#?V0
   \   000022   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000025   7C08         MOV     R4,#0x8
   \   000027   7D00         MOV     R5,#0x0
   \   000029   7403         MOV     A,#0x3
   \   00002B   12....       LCALL   ?XSTACK_DISP0_8
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   FA           MOV     R2,A
   \   000030   A3           INC     DPTR
   \   000031   E0           MOVX    A,@DPTR
   \   000032   FB           MOV     R3,A
   \   000033   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000036   7403         MOV     A,#0x3
   \   000038   12....       LCALL   ?DEALLOC_XSTACK8
    165            leaveReq.removeChildren = 1;
   \   00003B   7402         MOV     A,#0x2
   \   00003D   12....       LCALL   ?XSTACK_DISP0_8
   \   000040   7401         MOV     A,#0x1
   \   000042   F0           MOVX    @DPTR,A
    166            leaveReq.rejoin = 0;
   \   000043   7403         MOV     A,#0x3
   \   000045   12....       LCALL   ?XSTACK_DISP0_8
   \   000048   E4           CLR     A
   \   000049   F0           MOVX    @DPTR,A
    167            leaveReq.silent = 0;
   \   00004A   7404         MOV     A,#0x4
   \   00004C   12....       LCALL   ?XSTACK_DISP0_8
   \   00004F   E4           CLR     A
   \   000050   F0           MOVX    @DPTR,A
    168            NLME_LeaveReq( &leaveReq );
   \   000051                ; Setup parameters for call to function NLME_LeaveReq
   \   000051   AA..         MOV     R2,?XSP + 0
   \   000053   AB..         MOV     R3,?XSP + 1
   \   000055   12....       LCALL   `??NLME_LeaveReq::?relay`; Banked call to: NLME_LeaveReq
    169          }
   \   000058   7405         MOV     A,#0x5
   \   00005A   02....       LJMP    ?Subroutine1 & 0xFFFF

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {(uint8 *)0}>`:
   \   000000   0000         DW 0H
   \   000002   000000       DB 0, 0, 0
    170          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    171          void Protocol_Printf(uint8 *data, uint8 len){
   \                     Protocol_Printf:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   89..         MOV     ?V1,R1
    172              uint8 i = 0;
   \   00000B   75..00       MOV     ?V0,#0x0
    173              for(i = 0; i < len; i++)
   \   00000E   8023         SJMP    ??Protocol_Printf_0
    174                printf("%X ",data[i]);
   \                     ??Protocol_Printf_1:
   \   000010                ; Setup parameters for call to function printf
   \   000010   A8..         MOV     R0,?V0
   \   000012   EE           MOV     A,R6
   \   000013   28           ADD     A,R0
   \   000014   F582         MOV     DPL,A
   \   000016   E4           CLR     A
   \   000017   3F           ADDC    A,R7
   \   000018   F583         MOV     DPH,A
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   F5..         MOV     ?V2,A
   \   00001D   75..00       MOV     ?V3,#0x0
   \   000020   78..         MOV     R0,#?V2
   \   000022   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000025   7A..         MOV     R2,#`?<Constant "%X ">` & 0xff
   \   000027   7B..         MOV     R3,#(`?<Constant "%X ">` >> 8) & 0xff
   \   000029   12....       LCALL   `??printf::?relay`   ; Banked call to: printf
   \   00002C   7402         MOV     A,#0x2
   \   00002E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000031   05..         INC     ?V0
   \                     ??Protocol_Printf_0:
   \   000033   E5..         MOV     A,?V0
   \   000035   C3           CLR     C
   \   000036   95..         SUBB    A,?V1
   \   000038   40D6         JC      ??Protocol_Printf_1
    175              printf("\r\n");
   \   00003A                ; Setup parameters for call to function printf
   \   00003A   7A..         MOV     R2,#`?<Constant "\\r\\n">` & 0xff
   \   00003C   7B..         MOV     R3,#(`?<Constant "\\r\\n">` >> 8) & 0xff
   \   00003E   12....       LCALL   `??printf::?relay`   ; Banked call to: printf
    176          }
   \   000041   02....       LJMP    ??Subroutine8_0 & 0xFFFF

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??Device_Info::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Device_Info

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SendDataToShortAddr::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SendDataToShortAddr

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??UART0_CallBack::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    UART0_CallBack

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??UART1_CallBack::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    UART1_CallBack

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??UART_Config_L::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    UART_Config_L

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZdoStateChange_printf::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZdoStateChange_printf

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??Meter_Leave::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Meter_Leave

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??Protocol_Printf::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Protocol_Printf

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\326\\325\\266\\313\\275\\332\\265\\343, `:
   \   000000   D6D5B6CB     DB "\326\325\266\313\275\332\265\343, \263\244\265\330\326\267:%X %X %X %X %X %X %X %X \015\012"
   \            BDDAB5E3
   \            2C20B3A4
   \            B5D8D6B7
   \            3A255820
   \            25582025
   \            58202558
   \            20255820
   \            25582025
   \            58202558
   \            200D0A00

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0`:
   \   000000   00           DB 0
   \   000001   00           DB 0
   \   000002   00           DB 0
   \   000003   00           DB 0
   \   000004   00           DB 0
   \   000005   00           DB 0
   \   000006   00           DB 0
   \   000007   00           DB 0
   \   000008   00           DB 0
   \   000009   00           DB 0
   \   00000A   00           DB 0
   \   00000B   00           DB 0
   \   00000C   00           DB 0
   \   00000D   00           DB 0
   \   00000E   00           DB 0
   \   00000F   00           DB 0
   \   000010   00           DB 0
   \   000011   00           DB 0
   \   000012   00           DB 0
   \   000013   00           DB 0
   \   000014   00           DB 0
   \   000015   00           DB 0
   \   000016   00           DB 0
   \   000017   00           DB 0
   \   000018   00           DB 0
   \   000019   00           DB 0
   \   00001A   00           DB 0
   \   00001B   00           DB 0
   \   00001C   00           DB 0
   \   00001D   00           DB 0
   \   00001E   00           DB 0
   \   00001F   00           DB 0
   \   000020   00           DB 0
   \   000021   00           DB 0
   \   000022   00           DB 0
   \   000023   00           DB 0
   \   000024   00           DB 0
   \   000025   00           DB 0
   \   000026   00           DB 0
   \   000027   00           DB 0
   \   000028   00           DB 0
   \   000029   00           DB 0
   \   00002A   00           DB 0
   \   00002B   00           DB 0
   \   00002C   00           DB 0
   \   00002D   00           DB 0
   \   00002E   00           DB 0
   \   00002F   00           DB 0
   \   000030   00           DB 0
   \   000031   00           DB 0
   \   000032   00           DB 0
   \   000033   00           DB 0
   \   000034   00           DB 0
   \   000035   00           DB 0
   \   000036   00           DB 0
   \   000037   00           DB 0
   \   000038   00           DB 0
   \   000039   00           DB 0
   \   00003A   00           DB 0
   \   00003B   00           DB 0
   \   00003C   00           DB 0
   \   00003D   00           DB 0
   \   00003E   00           DB 0
   \   00003F   00           DB 0
   \   000040   00           DB 0
   \   000041   00           DB 0
   \   000042   00           DB 0
   \   000043   00           DB 0
   \   000044   00           DB 0
   \   000045   00           DB 0
   \   000046   00           DB 0
   \   000047   00           DB 0
   \   000048   00           DB 0
   \   000049   00           DB 0
   \   00004A   00           DB 0
   \   00004B   00           DB 0
   \   00004C   00           DB 0
   \   00004D   00           DB 0
   \   00004E   00           DB 0
   \   00004F   00           DB 0
   \   000050   00           DB 0
   \   000051   00           DB 0
   \   000052   00           DB 0
   \   000053   00           DB 0
   \   000054   00           DB 0
   \   000055   00           DB 0
   \   000056   00           DB 0
   \   000057   00           DB 0
   \   000058   00           DB 0
   \   000059   00           DB 0
   \   00005A   00           DB 0
   \   00005B   00           DB 0
   \   00005C   00           DB 0
   \   00005D   00           DB 0
   \   00005E   00           DB 0
   \   00005F   00           DB 0
   \   000060   00           DB 0
   \   000061   00           DB 0
   \   000062   00           DB 0
   \   000063   00           DB 0
   \   000064   00           DB 0
   \   000065   00           DB 0
   \   000066   00           DB 0
   \   000067   00           DB 0
   \   000068   00           DB 0
   \   000069   00           DB 0
   \   00006A   00           DB 0
   \   00006B   00           DB 0
   \   00006C   00           DB 0
   \   00006D   00           DB 0
   \   00006E   00           DB 0
   \   00006F   00           DB 0
   \   000070   00           DB 0
   \   000071   00           DB 0
   \   000072   00           DB 0
   \   000073   00           DB 0
   \   000074   00           DB 0
   \   000075   00           DB 0
   \   000076   00           DB 0
   \   000077   00           DB 0
   \   000078   00           DB 0
   \   000079   00           DB 0
   \   00007A   00           DB 0
   \   00007B   00           DB 0
   \   00007C   00           DB 0
   \   00007D   00           DB 0
   \   00007E   00           DB 0
   \   00007F   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_1`:
   \   000000   00           DB 0
   \   000001   00           DB 0
   \   000002   00           DB 0
   \   000003   00           DB 0
   \   000004   00           DB 0
   \   000005   00           DB 0
   \   000006   00           DB 0
   \   000007   00           DB 0
   \   000008   00           DB 0
   \   000009   00           DB 0
   \   00000A   00           DB 0
   \   00000B   00           DB 0
   \   00000C   00           DB 0
   \   00000D   00           DB 0
   \   00000E   00           DB 0
   \   00000F   00           DB 0
   \   000010   00           DB 0
   \   000011   00           DB 0
   \   000012   00           DB 0
   \   000013   00           DB 0
   \   000014   00           DB 0
   \   000015   00           DB 0
   \   000016   00           DB 0
   \   000017   00           DB 0
   \   000018   00           DB 0
   \   000019   00           DB 0
   \   00001A   00           DB 0
   \   00001B   00           DB 0
   \   00001C   00           DB 0
   \   00001D   00           DB 0
   \   00001E   00           DB 0
   \   00001F   00           DB 0
   \   000020   00           DB 0
   \   000021   00           DB 0
   \   000022   00           DB 0
   \   000023   00           DB 0
   \   000024   00           DB 0
   \   000025   00           DB 0
   \   000026   00           DB 0
   \   000027   00           DB 0
   \   000028   00           DB 0
   \   000029   00           DB 0
   \   00002A   00           DB 0
   \   00002B   00           DB 0
   \   00002C   00           DB 0
   \   00002D   00           DB 0
   \   00002E   00           DB 0
   \   00002F   00           DB 0
   \   000030   00           DB 0
   \   000031   00           DB 0
   \   000032   00           DB 0
   \   000033   00           DB 0
   \   000034   00           DB 0
   \   000035   00           DB 0
   \   000036   00           DB 0
   \   000037   00           DB 0
   \   000038   00           DB 0
   \   000039   00           DB 0
   \   00003A   00           DB 0
   \   00003B   00           DB 0
   \   00003C   00           DB 0
   \   00003D   00           DB 0
   \   00003E   00           DB 0
   \   00003F   00           DB 0
   \   000040   00           DB 0
   \   000041   00           DB 0
   \   000042   00           DB 0
   \   000043   00           DB 0
   \   000044   00           DB 0
   \   000045   00           DB 0
   \   000046   00           DB 0
   \   000047   00           DB 0
   \   000048   00           DB 0
   \   000049   00           DB 0
   \   00004A   00           DB 0
   \   00004B   00           DB 0
   \   00004C   00           DB 0
   \   00004D   00           DB 0
   \   00004E   00           DB 0
   \   00004F   00           DB 0
   \   000050   00           DB 0
   \   000051   00           DB 0
   \   000052   00           DB 0
   \   000053   00           DB 0
   \   000054   00           DB 0
   \   000055   00           DB 0
   \   000056   00           DB 0
   \   000057   00           DB 0
   \   000058   00           DB 0
   \   000059   00           DB 0
   \   00005A   00           DB 0
   \   00005B   00           DB 0
   \   00005C   00           DB 0
   \   00005D   00           DB 0
   \   00005E   00           DB 0
   \   00005F   00           DB 0
   \   000060   00           DB 0
   \   000061   00           DB 0
   \   000062   00           DB 0
   \   000063   00           DB 0
   \   000064   00           DB 0
   \   000065   00           DB 0
   \   000066   00           DB 0
   \   000067   00           DB 0
   \   000068   00           DB 0
   \   000069   00           DB 0
   \   00006A   00           DB 0
   \   00006B   00           DB 0
   \   00006C   00           DB 0
   \   00006D   00           DB 0
   \   00006E   00           DB 0
   \   00006F   00           DB 0
   \   000070   00           DB 0
   \   000071   00           DB 0
   \   000072   00           DB 0
   \   000073   00           DB 0
   \   000074   00           DB 0
   \   000075   00           DB 0
   \   000076   00           DB 0
   \   000077   00           DB 0
   \   000078   00           DB 0
   \   000079   00           DB 0
   \   00007A   00           DB 0
   \   00007B   00           DB 0
   \   00007C   00           DB 0
   \   00007D   00           DB 0
   \   00007E   00           DB 0
   \   00007F   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "DEV_HOLD\\r\\n">`:
   \   000000   4445565F     DB "DEV_HOLD\015\012"
   \            484F4C44
   \            0D0A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "DEV_INIT\\r\\n">`:
   \   000000   4445565F     DB "DEV_INIT\015\012"
   \            494E4954
   \            0D0A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "DEV_NWK_DISC\\r\\n">`:
   \   000000   4445565F     DB "DEV_NWK_DISC\015\012"
   \            4E574B5F
   \            44495343
   \            0D0A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "DEV_NWK_JOINING\\r\\n">`:
   \   000000   4445565F     DB "DEV_NWK_JOINING\015\012"
   \            4E574B5F
   \            4A4F494E
   \            494E470D
   \            0A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "DEV_NWK_REJOIN\\r\\n">`:
   \   000000   4445565F     DB "DEV_NWK_REJOIN\015\012"
   \            4E574B5F
   \            52454A4F
   \            494E0D0A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "DEV_END_DEVICE_UNAUTH...">`:
   \   000000   4445565F     DB "DEV_END_DEVICE_UNAUTH \274\323\310\353\265\253\311\320\316\264\310\317\326\244\015\012"
   \            454E445F
   \            44455649
   \            43455F55
   \            4E415554
   \            4820BCD3
   \            C8EBB5AB
   \            C9D0CEB4
   \            C8CFD6A4
   \            0D0A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "DEV_END_DEVICE \\311\\350\\261\\270\\31`:
   \   000000   4445565F     DB "DEV_END_DEVICE \311\350\261\270\310\317\326\244\315\352\263\311 \015\012"
   \            454E445F
   \            44455649
   \            434520C9
   \            E8B1B8C8
   \            CFD6A4CD
   \            EAB3C920
   \            0D0A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "DEV_ROUTER \\311\\350\\261\\270\\274\\32`:
   \   000000   4445565F     DB "DEV_ROUTER \311\350\261\270\274\323\310\353,\275\370\320\320\321\351\326\244,\312\307\322\273\270\366\302\267\323\311\306\367 \015\012"
   \            524F5554
   \            455220C9
   \            E8B1B8BC
   \            D3C8EB2C
   \            BDF8D0D0
   \            D1E9D6A4
   \            2CCAC7D2
   \            BBB8F6C2
   \            B7D3C9C6
   \            F7200D0A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "DEV_COORD_STARTING \\320\\255...">`:
   \   000000   4445565F     DB "DEV_COORD_STARTING \320\255\265\367\306\367\277\252\312\274\320\255\265\367 \015\012"
   \            434F4F52
   \            445F5354
   \            41525449
   \            4E4720D0
   \            ADB5F7C6
   \            F7BFAACA
   \            BCD0ADB5
   \            F7200D0A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "DEV_ZB_COORD \\320\\255\\265\\367\\306\\`:
   \   000000   4445565F     DB "DEV_ZB_COORD \320\255\265\367\306\367\277\252\312\274\320\255\265\367 \015\012"
   \            5A425F43
   \            4F4F5244
   \            20D0ADB5
   \            F7C6F7BF
   \            AACABCD0
   \            ADB5F720
   \            0D0A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "DEV_NWK_ORPHAN \\311\\350\\261\\270\\31`:
   \   000000   4445565F     DB "DEV_NWK_ORPHAN \311\350\261\270\312\247\310\245\270\270\275\332\265\343\301\254\275\323. . \015\012"
   \            4E574B5F
   \            4F525048
   \            414E20C9
   \            E8B1B8CA
   \            A7C8A5B8
   \            B8BDDAB5
   \            E3C1ACBD
   \            D32E202E
   \            200D0A00

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "%X ">`:
   \   000000   25582000     DB "%X "

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\r\\n">`:
   \   000000   0D0A00       DB "\015\012"

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0     26   Device_Info
        0     10   -> NLME_GetExtAddr
        0     10   -> UART_Config_L
        0     26   -> printf
      0     20   Meter_Leave
        0     17   -> NLME_GetExtAddr
        0     17   -> NLME_LeaveReq
        0     20   -> osal_memcpy
      0     14   Protocol_Printf
        0     12   -> printf
        0     14   -> printf
      1     28   SendDataToShortAddr
        0     26   -> AF_DataRequest
      0    138   UART0_CallBack
        0    138   -> HalUARTRead
        0    138   -> HalUARTWrite
        0    138   -> Hal_UART_RxBufLen
      0    140   UART1_CallBack
        0    140   -> ESP8266_Poll
        0    140   -> HalUARTRead
        0    140   -> HalUARTWrite
        0    140   -> Hal_UART_RxBufLen
      2     39   UART_Config_L
        2     29   -> HalUARTOpen
      0      9   ZdoStateChange_printf
        0      9   -> printf
      2      2   putchar
        2      2   -> HalUARTWrite


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       4  ?<Constant "%X ">
      37  ?<Constant "DEV_COORD_STARTING \320\255...">
      31  ?<Constant "DEV_END_DEVICE \311\350\261\270\31
      39  ?<Constant "DEV_END_DEVICE_UNAUTH...">
      11  ?<Constant "DEV_HOLD\r\n">
      11  ?<Constant "DEV_INIT\r\n">
      15  ?<Constant "DEV_NWK_DISC\r\n">
      18  ?<Constant "DEV_NWK_JOINING\r\n">
      40  ?<Constant "DEV_NWK_ORPHAN \311\350\261\270\31
      17  ?<Constant "DEV_NWK_REJOIN\r\n">
      45  ?<Constant "DEV_ROUTER \311\350\261\270\274\32
      31  ?<Constant "DEV_ZB_COORD \320\255\265\367\306\
      44  ?<Constant "\326\325\266\313\275\332\265\343,
       3  ?<Constant "\r\n">
       5  ?<Constant {(uint8 *)0}>
     128  ?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
     128  ?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_1
       1  ??Subroutine3_0
       1  ??Subroutine4_0
       1  ??Subroutine5_0
       1  ??Subroutine6_0
       6  ??Subroutine7_0
       5  ??Subroutine8_0
       8  ?Subroutine0
       3  ?Subroutine1
       1  ?Subroutine2
     130  Device_Info
       6  Device_Info::?relay
       4  Liyao_ClusterList
      12  Liyao_DstAddr
      12  Liyao_SimpleDesc
      93  Meter_Leave
       6  Meter_Leave::?relay
      68  Protocol_Printf
       6  Protocol_Printf::?relay
     139  SendDataToShortAddr
       6  SendDataToShortAddr::?relay
      70  UART0_CallBack
       6  UART0_CallBack::?relay
     115  UART1_CallBack
       6  UART1_CallBack::?relay
     134  UART_Config_L
       6  UART_Config_L::?relay
     112  ZdoStateChange_printf
       6  ZdoStateChange_printf::?relay
      54  putchar

 
 888 bytes in segment BANKED_CODE
  48 bytes in segment BANK_RELAYS
  54 bytes in segment NEAR_CODE
 623 bytes in segment XDATA_ROM_C
  12 bytes in segment XDATA_Z
 
 990 bytes of CODE  memory
 623 bytes of CONST memory
  12 bytes of XDATA memory

Errors: none
Warnings: none
