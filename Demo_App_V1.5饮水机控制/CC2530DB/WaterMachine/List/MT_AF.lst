###############################################################################
#
# IAR C/C++ Compiler V9.30.1.3056 for 8051                24/Oct/2016  15:09:36
# Copyright 2004-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        E:\×ÊÔ´(G£º)\#¸öÈËÏîÄ¿\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Components\mt\MT_AF.c
#    Command line       =  
#        -f "E:\×ÊÔ´(G£º)\#¸öÈËÏîÄ¿\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.5ÒûË®»ú¿ØÖÆ\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f
#        "E:\×ÊÔ´(G£º)\#¸öÈËÏîÄ¿\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.5ÒûË®»ú¿ØÖÆ\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=50 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
#        -DREJOIN_POLL_RATE=440 "E:\×ÊÔ´(G£º)\#¸öÈËÏîÄ¿\ZigbeeProject\Z-Stack
#        Mesh 1.0.0\Components\mt\MT_AF.c" -D LOG_OUT -D
#        UART1_PROTOCOL_RESOLVER=1 -D xISQC -D NWK_AUTO_POLL -D ZTOOL_P1 -D
#        ISR_KEYINTERRUPT -D xMT_TASK -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D
#        xLCD_SUPPORTED=DEBUG -D xPOWER_SAVING -lC
#        "E:\×ÊÔ´(G£º)\#¸öÈËÏîÄ¿\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.5ÒûË®»ú¿ØÖÆ\CC2530DB\WaterMachine\List"
#        -lA "E:\×ÊÔ´(G£º)\#¸öÈËÏîÄ¿\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.5ÒûË®»ú¿ØÖÆ\CC2530DB\WaterMachine\List"
#        --diag_suppress Pe001,Pa010 -o
#        "E:\×ÊÔ´(G£º)\#¸öÈËÏîÄ¿\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.5ÒûË®»ú¿ØÖÆ\CC2530DB\WaterMachine\Obj"
#        -e --no_code_motion --debug --core=plain --dptr=16,1
#        --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 8 -I "E:\×ÊÔ´(G£º)\#¸öÈËÏîÄ¿\ZigbeeProject\Z-Stack
#        Mesh 1.0.0\Projects\zstack\Samples\Demo_App_V1.5ÒûË®»ú¿ØÖÆ\CC2530DB\"
#        -I "E:\×ÊÔ´(G£º)\#¸öÈËÏîÄ¿\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.5ÒûË®»ú¿ØÖÆ\CC2530DB\..\Source\"
#        -I "E:\×ÊÔ´(G£º)\#¸öÈËÏîÄ¿\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.5ÒûË®»ú¿ØÖÆ\CC2530DB\..\Frame\"
#        -I "E:\×ÊÔ´(G£º)\#¸öÈËÏîÄ¿\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.5ÒûË®»ú¿ØÖÆ\CC2530DB\..\Module\WaterMachine\"
#        -I "E:\×ÊÔ´(G£º)\#¸öÈËÏîÄ¿\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.5ÒûË®»ú¿ØÖÆ\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "E:\×ÊÔ´(G£º)\#¸öÈËÏîÄ¿\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.5ÒûË®»ú¿ØÖÆ\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "E:\×ÊÔ´(G£º)\#¸öÈËÏîÄ¿\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.5ÒûË®»ú¿ØÖÆ\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "E:\×ÊÔ´(G£º)\#¸öÈËÏîÄ¿\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.5ÒûË®»ú¿ØÖÆ\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "E:\×ÊÔ´(G£º)\#¸öÈËÏîÄ¿\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.5ÒûË®»ú¿ØÖÆ\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "E:\×ÊÔ´(G£º)\#¸öÈËÏîÄ¿\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.5ÒûË®»ú¿ØÖÆ\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "E:\×ÊÔ´(G£º)\#¸öÈËÏîÄ¿\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.5ÒûË®»ú¿ØÖÆ\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "E:\×ÊÔ´(G£º)\#¸öÈËÏîÄ¿\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.5ÒûË®»ú¿ØÖÆ\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "E:\×ÊÔ´(G£º)\#¸öÈËÏîÄ¿\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.5ÒûË®»ú¿ØÖÆ\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "E:\×ÊÔ´(G£º)\#¸öÈËÏîÄ¿\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.5ÒûË®»ú¿ØÖÆ\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "E:\×ÊÔ´(G£º)\#¸öÈËÏîÄ¿\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.5ÒûË®»ú¿ØÖÆ\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "E:\×ÊÔ´(G£º)\#¸öÈËÏîÄ¿\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.5ÒûË®»ú¿ØÖÆ\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "E:\×ÊÔ´(G£º)\#¸öÈËÏîÄ¿\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.5ÒûË®»ú¿ØÖÆ\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "E:\×ÊÔ´(G£º)\#¸öÈËÏîÄ¿\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.5ÒûË®»ú¿ØÖÆ\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "E:\×ÊÔ´(G£º)\#¸öÈËÏîÄ¿\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.5ÒûË®»ú¿ØÖÆ\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "E:\×ÊÔ´(G£º)\#¸öÈËÏîÄ¿\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.5ÒûË®»ú¿ØÖÆ\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "E:\×ÊÔ´(G£º)\#¸öÈËÏîÄ¿\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.5ÒûË®»ú¿ØÖÆ\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "E:\×ÊÔ´(G£º)\#¸öÈËÏîÄ¿\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.5ÒûË®»ú¿ØÖÆ\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "E:\×ÊÔ´(G£º)\#¸öÈËÏîÄ¿\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.5ÒûË®»ú¿ØÖÆ\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -Ohz
#    List file          =  
#        E:\×ÊÔ´(G£º)\#¸öÈËÏîÄ¿\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.5ÒûË®»ú¿ØÖÆ\CC2530DB\WaterMachine\List\MT_AF.lst
#    Object file        =  
#        E:\×ÊÔ´(G£º)\#¸öÈËÏîÄ¿\ZigbeeProject\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\Demo_App_V1.5ÒûË®»ú¿ØÖÆ\CC2530DB\WaterMachine\Obj\MT_AF.r51
#
###############################################################################

E:\×ÊÔ´(G£º)\#¸öÈËÏîÄ¿\ZigbeeProject\Z-Stack Mesh 1.0.0\Components\mt\MT_AF.c
      1          /**************************************************************************************************
      2            Filename:       MT_AF.c
      3            Revised:        $Date: 2014-08-21 13:23:51 -0700 (Thu, 21 Aug 2014) $
      4            Revision:       $Revision: 39843 $
      5          
      6          
      7            Description:    MonitorTest functions for the AF layer.
      8          
      9          
     10            Copyright 2007-2014 Texas Instruments Incorporated. All rights reserved.
     11          
     12            IMPORTANT: Your use of this Software is limited to those specific rights
     13            granted under the terms of a software license agreement between the user
     14            who downloaded the software, his/her employer (which must be your employer)
     15            and Texas Instruments Incorporated (the "License").  You may not use this
     16            Software unless you agree to abide by the terms of the License. The License
     17            limits your use, and you acknowledge, that the Software may not be modified,
     18            copied or distributed unless embedded on a Texas Instruments microcontroller
     19            or used solely and exclusively in conjunction with a Texas Instruments radio
     20            frequency transceiver, which is integrated into your product.  Other than for
     21            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     22            works of, modify, distribute, perform, display or sell this Software and/or
     23            its documentation for any purpose.
     24          
     25            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     26            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     27            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     28            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     29            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     30            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     31            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     32            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     33            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     34            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     35            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     36          
     37            Should you have any questions regarding your right to use this Software,
     38            contact Texas Instruments Incorporated at www.TI.com.
     39          
     40          **************************************************************************************************/
     41          
     42          /* ------------------------------------------------------------------------------------------------
     43           *                                          Includes
     44           * ------------------------------------------------------------------------------------------------
     45           */
     46          #include "ZComDef.h"
     47          #include "OSAL.h"
     48          #include "MT.h"
     49          #include "MT_AF.h"
     50          #include "MT_ZDO.h"
     51          #include "nwk.h"
     52          #include "OnBoard.h"
     53          #include "MT_UART.h"
     54          
     55          #if defined INTER_PAN
     56          #include "stub_aps.h"
     57          #endif
     58          
     59          #if defined ( MT_GP_FUNC )
     60          #include "MT_GP.h"
     61          #endif
     62          
     63          /* ------------------------------------------------------------------------------------------------
     64           *                                          Constants
     65           * ------------------------------------------------------------------------------------------------
     66           */
     67          
     68          #if !defined MT_AF_EXEC_CNT
     69          #define MT_AF_EXEC_CNT  15
     70          #endif
     71          
     72          #if !defined MT_AF_EXEC_DLY
     73          #define MT_AF_EXEC_DLY  1000
     74          #endif
     75          
     76          /* ------------------------------------------------------------------------------------------------
     77           *                                           Typedefs
     78           * ------------------------------------------------------------------------------------------------
     79           */
     80          
     81          typedef struct
     82          {
     83            uint8 *data;
     84            afAddrType_t dstAddr;
     85            endPointDesc_t *epDesc;
     86            uint16 cId;
     87            uint16 dataLen;
     88            uint8 transId;
     89            uint8 txOpts;
     90            uint8 radius;
     91            uint8 tick;
     92          } mtAfDataReq_t;
     93          
     94          typedef struct _mtAfInMsgList_t
     95          {
     96            struct _mtAfInMsgList_t *next;
     97            uint8 *data;
     98            uint32 timestamp;         // Receipt timestamp from MAC.
     99            uint8 tick;
    100          } mtAfInMsgList_t;
    101          
    102          /* ------------------------------------------------------------------------------------------------
    103           *                                        Local Variables
    104           * ------------------------------------------------------------------------------------------------
    105           */
    106          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    107          mtAfInMsgList_t *pMtAfInMsgList = NULL;
   \                     pMtAfInMsgList:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    108          mtAfDataReq_t *pMtAfDataReq = NULL;
   \                     pMtAfDataReq:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    109          
    110          /* ------------------------------------------------------------------------------------------------
    111           *                                        Global Variables
    112           * ------------------------------------------------------------------------------------------------
    113           */
    114          
    115          #if defined ( MT_AF_CB_FUNC )
    116          uint16 _afCallbackSub;
    117          #endif
    118          
    119          /* ------------------------------------------------------------------------------------------------
    120           *                                        Local Functions
    121           * ------------------------------------------------------------------------------------------------
    122           */
    123          
    124          void MT_AfRegister(uint8 *pBuf);
    125          void MT_AfDelete(uint8 *pBuf);
    126          void MT_AfDataRequest(uint8 *pBuf);
    127          
    128          #if defined ( ZIGBEE_SOURCE_ROUTING )
    129          void MT_AfDataRequestSrcRtg(uint8 *pBuf);
    130          #endif
    131          
    132          #if defined INTER_PAN
    133          static void MT_AfInterPanCtl(uint8 *pBuf);
    134          #endif
    135          
    136          static void MT_AfDataRetrieve(uint8 *pBuf);
    137          static void MT_AfDataStore(uint8 *pBuf);
    138          static void MT_AfAPSF_ConfigSet(uint8 *pBuf);
    139          static void MT_AfAPSF_ConfigGet(uint8 *pBuf);
    140          
    141          
    142          /**************************************************************************************************
    143           * @fn          MT_AfExec
    144           *
    145           * @brief       This function is invoked by an MT timer event.
    146           *
    147           * input parameters
    148           *
    149           * None.
    150           *
    151           * output parameters
    152           *
    153           * None.
    154           *
    155           * @return      None.
    156           **************************************************************************************************
    157           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    158          void MT_AfExec(void)
   \                     MT_AfExec:
    159          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    160            mtAfInMsgList_t *pPrev, *pItem = pMtAfInMsgList;
   \                     ??MT_AfExec_0:
   \   000005   90....       MOV     DPTR,#pMtAfInMsgList
   \   000008   8008         SJMP    ??MT_AfExec_1
    161          
    162            while (pItem != NULL)
    163            {
    164              if (--(pItem->tick) == 0)
    165              {
    166                if (pMtAfInMsgList == pItem)
    167                {
    168                  pMtAfInMsgList = pItem->next;
    169                  (void)osal_mem_free(pItem);
    170                  pItem = pMtAfInMsgList;
    171                }
    172                else
    173                {
    174                  pPrev->next = pItem->next;
    175                  (void)osal_mem_free(pItem);
    176                  pItem = pPrev->next;
    177                }
    178              }
    179              else
    180              {
    181                pPrev = pItem;
   \                     ??MT_AfExec_2:
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    182                pItem = pItem->next;
   \   00000E   8A82         MOV     DPL,R2
   \   000010   8B83         MOV     DPH,R3
    183              }
   \                     ??MT_AfExec_1:
   \   000012   12....       LCALL   ??Subroutine77_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_168:
   \   000015   EA           MOV     A,R2
   \   000016   4B           ORL     A,R3
   \   000017   6038         JZ      ??MT_AfExec_3
   \   000019   EA           MOV     A,R2
   \   00001A   2408         ADD     A,#0x8
   \   00001C   F582         MOV     DPL,A
   \   00001E   E4           CLR     A
   \   00001F   3B           ADDC    A,R3
   \   000020   F583         MOV     DPH,A
   \   000022   E0           MOVX    A,@DPTR
   \   000023   14           DEC     A
   \   000024   F0           MOVX    @DPTR,A
   \   000025   70E3         JNZ     ??MT_AfExec_2
   \   000027   12....       LCALL   ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_178:
   \   00002A   EA           MOV     A,R2
   \   00002B   68           XRL     A,R0
   \   00002C   7002         JNZ     ??MT_AfExec_4
   \   00002E   EB           MOV     A,R3
   \   00002F   69           XRL     A,R1
   \                     ??MT_AfExec_4:
   \   000030   8A82         MOV     DPL,R2
   \   000032   8B83         MOV     DPH,R3
   \   000034   7008         JNZ     ??MT_AfExec_5
   \   000036   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   000039                ; Setup parameters for call to function osal_mem_free
   \   000039   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   00003C   80C7         SJMP    ??MT_AfExec_0
   \                     ??MT_AfExec_5:
   \   00003E   12....       LCALL   ??Subroutine78_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_177:
   \   000041   8E82         MOV     DPL,R6
   \   000043   8F83         MOV     DPH,R7
   \   000045   12....       LCALL   ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_71:
   \   000048                ; Setup parameters for call to function osal_mem_free
   \   000048   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   00004B   8E82         MOV     DPL,R6
   \   00004D   8F83         MOV     DPH,R7
   \   00004F   80C1         SJMP    ??MT_AfExec_1
    184            }
    185          
    186            if (pMtAfDataReq != NULL)
   \                     ??MT_AfExec_3:
   \   000051   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_195:
   \   000054   601A         JZ      ??MT_AfExec_6
    187            {
    188              if (--(pMtAfDataReq->tick) == 0)
   \   000056   E0           MOVX    A,@DPTR
   \   000057   C8           XCH     A,R0
   \   000058   12....       LCALL   ?Subroutine60 & 0xFFFF
   \                     ??CrossCallReturnLabel_110:
   \   00005B   E0           MOVX    A,@DPTR
   \   00005C   14           DEC     A
   \   00005D   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   000060   E0           MOVX    A,@DPTR
   \   000061   700D         JNZ     ??MT_AfExec_6
    189              {
    190                (void)osal_mem_free(pMtAfDataReq);
   \   000063                ; Setup parameters for call to function osal_mem_free
   \   000063   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_175:
   \   000066   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    191                pMtAfDataReq = NULL;
   \   000069   90....       MOV     DPTR,#pMtAfDataReq
   \   00006C   E4           CLR     A
   \   00006D   F0           MOVX    @DPTR,A
   \   00006E   A3           INC     DPTR
   \   00006F   F0           MOVX    @DPTR,A
    192              }
    193            }
    194          
    195            if ((pMtAfInMsgList != NULL) || (pMtAfDataReq != NULL))
   \                     ??MT_AfExec_6:
   \   000070   90....       MOV     DPTR,#pMtAfInMsgList
   \   000073   12....       LCALL   ??Subroutine80_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_188:
   \   000076   7005         JNZ     ??MT_AfExec_7
   \   000078   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_196:
   \   00007B   6026         JZ      ??MT_AfExec_8
    196            {
    197              if (ZSuccess != osal_start_timerEx(MT_TaskID, MT_AF_EXEC_EVT, MT_AF_EXEC_DLY))
   \                     ??MT_AfExec_7:
   \   00007D                ; Setup parameters for call to function osal_start_timerEx
   \   00007D   90....       MOV     DPTR,#__Constant_3e8
   \   000080   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   000083   7A08         MOV     R2,#0x8
   \   000085   7B00         MOV     R3,#0x0
   \   000087   90....       MOV     DPTR,#MT_TaskID
   \   00008A   E0           MOVX    A,@DPTR
   \   00008B   F9           MOV     R1,A
   \   00008C   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   00008F   7404         MOV     A,#0x4
   \   000091   12....       LCALL   ?DEALLOC_XSTACK8
   \   000094   E9           MOV     A,R1
   \   000095   600C         JZ      ??MT_AfExec_8
    198              {
    199                osal_set_event(MT_TaskID, MT_AF_EXEC_EVT);
   \   000097                ; Setup parameters for call to function osal_set_event
   \   000097   7A08         MOV     R2,#0x8
   \   000099   7B00         MOV     R3,#0x0
   \   00009B   90....       MOV     DPTR,#MT_TaskID
   \   00009E   E0           MOVX    A,@DPTR
   \   00009F   F9           MOV     R1,A
   \   0000A0   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
    200              }
    201            }
    202          }
   \                     ??MT_AfExec_8:
   \   0000A3   02....       LJMP    ??Subroutine66_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine66_0:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   12....       LCALL   ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_209:
   \   000004   12....       LCALL   ?Subroutine60 & 0xFFFF
   \                     ??CrossCallReturnLabel_111:
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine60:
   \   000000   2417         ADD     A,#0x17
   \   000002   F582         MOV     DPL,A
   \   000004   E4           CLR     A
   \   000005   38           ADDC    A,R0
   \   000006   F583         MOV     DPH,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine41:
   \   000000   E8           MOV     A,R0
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   E9           MOV     A,R1
   \   000004   F0           MOVX    @DPTR,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   12....       LCALL   ?Subroutine53 & 0xFFFF
   \                     ??CrossCallReturnLabel_201:
   \   000003   90....       MOV     DPTR,#pMtAfInMsgList
   \   000006   E8           MOV     A,R0
   \   000007   F0           MOVX    @DPTR,A
   \   000008   A3           INC     DPTR
   \   000009   E9           MOV     A,R1
   \   00000A   F0           MOVX    @DPTR,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   90....       MOV     DPTR,#pMtAfDataReq
   \   000003                REQUIRE ??Subroutine77_0
   \   000003                ; // Fall through to label ??Subroutine77_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine77_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FB           MOV     R3,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   90....       MOV     DPTR,#pMtAfInMsgList
   \   000003                REQUIRE ??Subroutine78_0
   \   000003                ; // Fall through to label ??Subroutine78_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine78_0:
   \   000000   12....       LCALL   ?Subroutine53 & 0xFFFF
   \                     ??CrossCallReturnLabel_202:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine53:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   90....       MOV     DPTR,#pMtAfDataReq
   \   000003                REQUIRE ??Subroutine80_0
   \   000003                ; // Fall through to label ??Subroutine80_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine80_0:
   \   000000   12....       LCALL   ?Subroutine53 & 0xFFFF
   \                     ??CrossCallReturnLabel_203:
   \   000003   E8           MOV     A,R0
   \   000004   49           ORL     A,R1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine47:
   \   000000   90....       MOV     DPTR,#pMtAfDataReq
   \   000003                REQUIRE ??Subroutine81_0
   \   000003                ; // Fall through to label ??Subroutine81_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine81_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   C8           XCH     A,R0
   \   000005   22           RET
    203          
    204          /***************************************************************************************************
    205           * @fn      MT_AfCommandProcessing
    206           *
    207           * @brief   Process all the AF commands that are issued by test tool
    208           *
    209           * @param   pBuf - pointer to the received buffer
    210           *
    211           * @return  status
    212           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    213          uint8 MT_AfCommandProcessing(uint8 *pBuf)
   \                     MT_AfCommandProcessing:
    214          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV     A,#-0x5
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   F8           MOV     R0,A
   \   00000C   EB           MOV     A,R3
   \   00000D   F9           MOV     R1,A
    215            uint8 status = MT_RPC_SUCCESS;
   \   00000E   7E00         MOV     R6,#0x0
    216          
    217            switch (pBuf[MT_RPC_POS_CMD1])
   \   000010   8882         MOV     DPL,R0
   \   000012   8983         MOV     DPH,R1
   \   000014   A3           INC     DPTR
   \   000015   A3           INC     DPTR
   \   000016   E0           MOVX    A,@DPTR
   \   000017   601C         JZ      ??MT_AfCommandProcessing_0
   \   000019   14           DEC     A
   \   00001A   6025         JZ      ??MT_AfCommandProcessing_1
   \   00001C   14           DEC     A
   \   00001D   6022         JZ      ??MT_AfCommandProcessing_1
   \   00001F   14           DEC     A
   \   000020   6025         JZ      ??MT_AfCommandProcessing_2
   \   000022   14           DEC     A
   \   000023   6016         JZ      ??MT_AfCommandProcessing_3
   \   000025   24F3         ADD     A,#-0xd
   \   000027   602A         JZ      ??MT_AfCommandProcessing_4
   \   000029   14           DEC     A
   \   00002A   6021         JZ      ??MT_AfCommandProcessing_5
   \   00002C   14           DEC     A
   \   00002D   602A         JZ      ??MT_AfCommandProcessing_6
   \   00002F   14           DEC     A
   \   000030   6067         JZ      ??MT_AfCommandProcessing_7
   \   000032   02....       LJMP    ??MT_AfCommandProcessing_8 & 0xFFFF
    218            {
    219              case MT_AF_REGISTER:
    220                MT_AfRegister(pBuf);
   \                     ??MT_AfCommandProcessing_0:
   \   000035                ; Setup parameters for call to function MT_AfRegister
   \   000035   12....       LCALL   `??MT_AfRegister::?relay`; Banked call to: MT_AfRegister
    221                break;
   \   000038   02....       LJMP    ??MT_AfCommandProcessing_9 & 0xFFFF
    222          
    223              case MT_AF_DELETE:
    224                MT_AfDelete( pBuf );
   \                     ??MT_AfCommandProcessing_3:
   \   00003B                ; Setup parameters for call to function MT_AfDelete
   \   00003B   12....       LCALL   `??MT_AfDelete::?relay`; Banked call to: MT_AfDelete
    225                break;
   \   00003E   02....       LJMP    ??MT_AfCommandProcessing_9 & 0xFFFF
    226          
    227              case MT_AF_DATA_REQUEST:
    228              case MT_AF_DATA_REQUEST_EXT:
    229                MT_AfDataRequest(pBuf);
   \                     ??MT_AfCommandProcessing_1:
   \   000041                ; Setup parameters for call to function MT_AfDataRequest
   \   000041   12....       LCALL   `??MT_AfDataRequest::?relay`; Banked call to: MT_AfDataRequest
    230                break;
   \   000044   02....       LJMP    ??MT_AfCommandProcessing_9 & 0xFFFF
    231          
    232          #if defined ( ZIGBEE_SOURCE_ROUTING )
    233              case MT_AF_DATA_REQUEST_SRCRTG:
    234                MT_AfDataRequestSrcRtg(pBuf);
   \                     ??MT_AfCommandProcessing_2:
   \   000047                ; Setup parameters for call to function MT_AfDataRequestSrcRtg
   \   000047   12....       LCALL   `??MT_AfDataRequestSrcRtg::?relay`; Banked call to: MT_AfDataRequestSrcRtg
    235                break;
   \   00004A   02....       LJMP    ??MT_AfCommandProcessing_9 & 0xFFFF
    236          #endif
    237          
    238          #if defined INTER_PAN
    239              case MT_AF_INTER_PAN_CTL:
    240                MT_AfInterPanCtl(pBuf);
    241                break;
    242          #endif
    243          
    244              case MT_AF_DATA_RETRIEVE:
    245                MT_AfDataRetrieve(pBuf);
   \                     ??MT_AfCommandProcessing_5:
   \   00004D                ; Setup parameters for call to function MT_AfDataRetrieve
   \   00004D   12....       LCALL   `??MT_AfDataRetrieve::?relay`; Banked call to: MT_AfDataRetrieve
    246                break;
   \   000050   02....       LJMP    ??MT_AfCommandProcessing_9 & 0xFFFF
    247          
    248              case MT_AF_DATA_STORE:
    249                MT_AfDataStore(pBuf);
   \                     ??MT_AfCommandProcessing_4:
   \   000053                ; Setup parameters for call to function MT_AfDataStore
   \   000053   12....       LCALL   `??MT_AfDataStore::?relay`; Banked call to: MT_AfDataStore
    250                break;
   \   000056   02....       LJMP    ??MT_AfCommandProcessing_9 & 0xFFFF
    251          
    252              case MT_AF_APSF_CONFIG_SET:
    253                MT_AfAPSF_ConfigSet(pBuf);
   \                     ??MT_AfCommandProcessing_6:
   \   000059   8882         MOV     DPL,R0
   \   00005B   8983         MOV     DPH,R1
   \   00005D   A3           INC     DPTR
   \   00005E   A3           INC     DPTR
   \   00005F   A3           INC     DPTR
   \   000060   12....       LCALL   ?Subroutine56 & 0xFFFF
   \                     ??CrossCallReturnLabel_101:
   \   000063   8882         MOV     DPL,R0
   \   000065   8983         MOV     DPH,R1
   \   000067   A3           INC     DPTR
   \   000068   A3           INC     DPTR
   \   000069   A3           INC     DPTR
   \   00006A   A3           INC     DPTR
   \   00006B   A3           INC     DPTR
   \   00006C   E0           MOVX    A,@DPTR
   \   00006D   C0E0         PUSH    A
   \   00006F   7401         MOV     A,#0x1
   \   000071   12....       LCALL   ?XSTACK_DISP0_8
   \   000074   D0E0         POP     A
   \   000076   F0           MOVX    @DPTR,A
   \   000077                ; Setup parameters for call to function afAPSF_ConfigSet
   \   000077   AA..         MOV     R2,?XSP + 0
   \   000079   AB..         MOV     R3,?XSP + 1
   \   00007B   8882         MOV     DPL,R0
   \   00007D   8983         MOV     DPH,R1
   \   00007F   A3           INC     DPTR
   \   000080   A3           INC     DPTR
   \   000081   A3           INC     DPTR
   \   000082   E0           MOVX    A,@DPTR
   \   000083   F9           MOV     R1,A
   \   000084   12....       LCALL   `??afAPSF_ConfigSet::?relay`; Banked call to: afAPSF_ConfigSet
   \   000087   7402         MOV     A,#0x2
   \   000089   12....       LCALL   ?XSTACK_DISP0_8
   \   00008C   E9           MOV     A,R1
   \   00008D   F0           MOVX    @DPTR,A
   \   00008E                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00008E   7402         MOV     A,#0x2
   \   000090   12....       LCALL   ?XSTACK_DISP102_8
   \   000093   7B01         MOV     R3,#0x1
   \   000095   7A13         MOV     R2,#0x13
   \   000097   8046         SJMP    ??MT_AfCommandProcessing_10
    254                break;
    255          
    256              case MT_AF_APSF_CONFIG_GET:
    257                MT_AfAPSF_ConfigGet(pBuf);
   \                     ??MT_AfCommandProcessing_7:
   \   000099   90....       MOV     DPTR,#`?<Constant {0, 0}>`
   \   00009C   AC..         MOV     R4,?XSP + 0
   \   00009E   AD..         MOV     R5,?XSP + 1
   \   0000A0   7402         MOV     A,#0x2
   \   0000A2   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
   \   0000A5                ; Setup parameters for call to function afAPSF_ConfigGet
   \   0000A5   AA..         MOV     R2,?XSP + 0
   \   0000A7   AB..         MOV     R3,?XSP + 1
   \   0000A9   8882         MOV     DPL,R0
   \   0000AB   8983         MOV     DPH,R1
   \   0000AD   A3           INC     DPTR
   \   0000AE   A3           INC     DPTR
   \   0000AF   A3           INC     DPTR
   \   0000B0   E0           MOVX    A,@DPTR
   \   0000B1   F9           MOV     R1,A
   \   0000B2   12....       LCALL   `??afAPSF_ConfigGet::?relay`; Banked call to: afAPSF_ConfigGet
   \   0000B5   85..82       MOV     DPL,?XSP + 0
   \   0000B8   85..83       MOV     DPH,?XSP + 1
   \   0000BB   E0           MOVX    A,@DPTR
   \   0000BC   C0E0         PUSH    A
   \   0000BE   7403         MOV     A,#0x3
   \   0000C0   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C3   D0E0         POP     A
   \   0000C5   F0           MOVX    @DPTR,A
   \   0000C6   7401         MOV     A,#0x1
   \   0000C8   12....       LCALL   ?XSTACK_DISP0_8
   \   0000CB   E0           MOVX    A,@DPTR
   \   0000CC   C0E0         PUSH    A
   \   0000CE   7404         MOV     A,#0x4
   \   0000D0   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D3   D0E0         POP     A
   \   0000D5   F0           MOVX    @DPTR,A
   \   0000D6                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   0000D6   7403         MOV     A,#0x3
   \   0000D8   12....       LCALL   ?XSTACK_DISP102_8
   \   0000DB   7B03         MOV     R3,#0x3
   \   0000DD   7A14         MOV     R2,#0x14
   \                     ??MT_AfCommandProcessing_10:
   \   0000DF   7964         MOV     R1,#0x64
   \   0000E1   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    258                break;
   \   0000E4   8002         SJMP    ??MT_AfCommandProcessing_9
    259          
    260              default:
    261                status = MT_RPC_ERR_COMMAND_ID;
   \                     ??MT_AfCommandProcessing_8:
   \   0000E6   7E02         MOV     R6,#0x2
    262                break;
    263            }
    264          
    265            return status;
   \                     ??MT_AfCommandProcessing_9:
   \   0000E8   EE           MOV     A,R6
   \   0000E9   F9           MOV     R1,A
   \   0000EA   7405         MOV     A,#0x5
   \   0000EC                REQUIRE ?Subroutine0
   \   0000EC                ; // Fall through to label ?Subroutine0
    266          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine66_0
   \   000003                ; // Fall through to label ??Subroutine66_0
    267          
    268          /***************************************************************************************************
    269           * @fn      MT_AfRegister
    270           *
    271           * @brief   Process AF Register command
    272           *
    273           * @param   pBuf - pointer to the received buffer
    274           *
    275           * @return  none
    276           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    277          void MT_AfRegister(uint8 *pBuf)
   \                     MT_AfRegister:
    278          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V2,R2
   \   00000C   8B..         MOV     ?V3,R3
    279            uint8 cmdId;
    280            uint8 retValue = ZMemError;
   \   00000E   12....       LCALL   ?Subroutine34 & 0xFFFF
    281            endPointDesc_t *epDesc;
    282          
    283            /* parse header */
    284            cmdId = pBuf[MT_RPC_POS_CMD1];
   \                     ??CrossCallReturnLabel_122:
   \   000011   F5..         MOV     ?V0,A
    285            pBuf += MT_RPC_FRAME_HDR_SZ;
    286          
    287            epDesc = (endPointDesc_t *)osal_mem_alloc(sizeof(endPointDesc_t));
   \   000013                ; Setup parameters for call to function osal_mem_alloc
   \   000013   7A06         MOV     R2,#0x6
   \   000015   7B00         MOV     R3,#0x0
   \   000017   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00001A   8A..         MOV     ?V4,R2
   \   00001C   8B..         MOV     ?V5,R3
   \   00001E   AE..         MOV     R6,?V4
   \   000020   AF..         MOV     R7,?V5
    288            if ( epDesc )
   \   000022   EE           MOV     A,R6
   \   000023   4F           ORL     A,R7
   \   000024   603F         JZ      ??MT_AfRegister_0
    289            {
    290              epDesc->task_id = &MT_TaskID;
   \   000026   8E82         MOV     DPL,R6
   \   000028   8F83         MOV     DPH,R7
   \   00002A   A3           INC     DPTR
   \   00002B   74..         MOV     A,#MT_TaskID & 0xff
   \   00002D   F0           MOVX    @DPTR,A
   \   00002E   A3           INC     DPTR
   \   00002F   74..         MOV     A,#(MT_TaskID >> 8) & 0xff
   \   000031   F0           MOVX    @DPTR,A
    291              retValue = MT_BuildEndpointDesc( pBuf, epDesc );
   \   000032                ; Setup parameters for call to function MT_BuildEndpointDesc
   \   000032   EE           MOV     A,R6
   \   000033   FC           MOV     R4,A
   \   000034   EF           MOV     A,R7
   \   000035   FD           MOV     R5,A
   \   000036   E5..         MOV     A,?V2
   \   000038   2403         ADD     A,#0x3
   \   00003A   FA           MOV     R2,A
   \   00003B   E4           CLR     A
   \   00003C   35..         ADDC    A,?V3
   \   00003E   FB           MOV     R3,A
   \   00003F   12....       LCALL   `??MT_BuildEndpointDesc::?relay`; Banked call to: MT_BuildEndpointDesc
   \   000042   E9           MOV     A,R1
   \   000043   85..82       MOV     DPL,?XSP + 0
   \   000046   85..83       MOV     DPH,?XSP + 1
   \   000049   F0           MOVX    @DPTR,A
    292              if ( retValue == ZSuccess )
   \   00004A   700F         JNZ     ??MT_AfRegister_1
    293              {
    294                retValue = afRegister( epDesc );
   \   00004C                ; Setup parameters for call to function afRegister
   \   00004C   EE           MOV     A,R6
   \   00004D   FA           MOV     R2,A
   \   00004E   EF           MOV     A,R7
   \   00004F   FB           MOV     R3,A
   \   000050   12....       LCALL   `??afRegister::?relay`; Banked call to: afRegister
   \   000053   E9           MOV     A,R1
   \   000054   85..82       MOV     DPL,?XSP + 0
   \   000057   85..83       MOV     DPH,?XSP + 1
   \   00005A   F0           MOVX    @DPTR,A
    295              }
    296          
    297              if ( retValue != ZSuccess )
   \                     ??MT_AfRegister_1:
   \   00005B   E0           MOVX    A,@DPTR
   \   00005C   6007         JZ      ??MT_AfRegister_0
    298              {
    299                osal_mem_free( epDesc );
   \   00005E                ; Setup parameters for call to function osal_mem_free
   \   00005E   EE           MOV     A,R6
   \   00005F   FA           MOV     R2,A
   \   000060   EF           MOV     A,R7
   \   000061   FB           MOV     R3,A
   \   000062   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    300              }
    301            }
    302          
    303            /* Build and send back the response */
    304            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_AF), cmdId, 1, &retValue);
   \                     ??MT_AfRegister_0:
   \   000065                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000065   AC..         MOV     R4,?XSP + 0
   \   000067   AD..         MOV     R5,?XSP + 1
   \   000069   7B01         MOV     R3,#0x1
   \   00006B   AA..         MOV     R2,?V0
   \   00006D   7964         MOV     R1,#0x64
   \   00006F   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    305          }
   \   000072   7401         MOV     A,#0x1
   \   000074   12....       LCALL   ?DEALLOC_XSTACK8
   \   000077   7F06         MOV     R7,#0x6
   \   000079   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006   7410         MOV     A,#0x10
   \   000008                REQUIRE ??Subroutine67_0
   \   000008                ; // Fall through to label ??Subroutine67_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine67_0:
   \   000000   12....       LCALL   ?Subroutine64 & 0xFFFF
   \                     ??CrossCallReturnLabel_126:
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine64:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   A3           INC     DPTR
   \   000006   22           RET
    306          
    307          /***************************************************************************************************
    308           * @fn      MT_AfDelete
    309           *
    310           * @brief   Process AF Delete Endpoint command
    311           *
    312           * @param   pBuf - pointer to the received buffer
    313           *
    314           * @return  none
    315           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    316          void MT_AfDelete(uint8 *pBuf)
   \                     MT_AfDelete:
    317          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    318            uint8 cmdId;
    319            uint8 retValue = ZMemError;
   \   00000A   12....       LCALL   ?Subroutine34 & 0xFFFF
    320          
    321            /* parse header */
    322            cmdId = pBuf[MT_RPC_POS_CMD1];
   \                     ??CrossCallReturnLabel_123:
   \   00000D   FE           MOV     R6,A
    323            pBuf += MT_RPC_FRAME_HDR_SZ;
    324          
    325            retValue = afDelete( *pBuf );
   \   00000E                ; Setup parameters for call to function afDelete
   \   00000E   8A82         MOV     DPL,R2
   \   000010   8B83         MOV     DPH,R3
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   E0           MOVX    A,@DPTR
   \   000016   F9           MOV     R1,A
   \   000017   12....       LCALL   `??afDelete::?relay` ; Banked call to: afDelete
   \   00001A   E9           MOV     A,R1
   \   00001B   85..82       MOV     DPL,?XSP + 0
   \   00001E   85..83       MOV     DPH,?XSP + 1
   \   000021   12....       LCALL   ?Subroutine44 & 0xFFFF
    326          
    327            /* Build and send back the response */
    328            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_AF), cmdId, 1, &retValue);
   \                     ??CrossCallReturnLabel_80:
   \   000024   7B01         MOV     R3,#0x1
   \   000026   EE           MOV     A,R6
   \   000027   FA           MOV     R2,A
   \   000028   7964         MOV     R1,#0x64
   \   00002A   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    329          }
   \   00002D   7401         MOV     A,#0x1
   \   00002F   02....       LJMP    ?Subroutine0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine44:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001   AC..         MOV     R4,?XSP + 0
   \   000003   AD..         MOV     R5,?XSP + 1
   \   000005   22           RET
    330          
    331          /***************************************************************************************************
    332           * @fn      MT_AfDataRequest
    333           *
    334           * @brief   Process AF Register command
    335           *
    336           * @param   pBuf - pointer to the received buffer
    337           *
    338           * @return  none
    339           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    340          void MT_AfDataRequest(uint8 *pBuf)
   \                     MT_AfDataRequest:
    341          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 17
   \   000005   74EF         MOV     A,#-0x11
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8B..         MOV     ?V1,R3
    342            #define MT_AF_REQ_MSG_LEN  10
    343            #define MT_AF_REQ_MSG_EXT  10
    344          
    345            endPointDesc_t *epDesc;
    346            afAddrType_t dstAddr;
    347            cId_t cId;
    348            uint8 transId, txOpts, radius;
    349            uint8 cmd0, cmd1;
    350            uint8 retValue = ZFailure;
   \   00000C   85..82       MOV     DPL,?XSP + 0
   \   00000F   85..83       MOV     DPH,?XSP + 1
   \   000012   7401         MOV     A,#0x1
   \   000014   12....       LCALL   ?Subroutine64 & 0xFFFF
    351            uint16 dataLen, tempLen;
    352          
    353            /* Parse header */
    354            cmd0 = pBuf[MT_RPC_POS_CMD0];
   \                     ??CrossCallReturnLabel_127:
   \   000017   E0           MOVX    A,@DPTR
   \   000018   C0E0         PUSH    A
   \   00001A   7404         MOV     A,#0x4
   \   00001C   12....       LCALL   ?XSTACK_DISP0_8
   \   00001F   D0E0         POP     A
   \   000021   12....       LCALL   ??Subroutine67_0 & 0xFFFF
    355            cmd1 = pBuf[MT_RPC_POS_CMD1];
   \                     ??CrossCallReturnLabel_124:
   \   000024   F5..         MOV     ?V7,A
    356            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   000026   EA           MOV     A,R2
   \   000027   2403         ADD     A,#0x3
   \   000029   F5..         MOV     ?V0,A
   \   00002B   5002         JNC     ??MT_AfDataRequest_0
   \   00002D   05..         INC     ?V1
    357          
    358            if (cmd1 == MT_AF_DATA_REQUEST_EXT)
   \                     ??MT_AfDataRequest_0:
   \   00002F   7402         MOV     A,#0x2
   \   000031   65..         XRL     A,?V7
   \   000033   707E         JNZ     ??MT_AfDataRequest_1
    359            {
    360              dstAddr.addrMode = (afAddrMode_t)*pBuf++;
   \   000035   85..82       MOV     DPL,?V0
   \   000038   85..83       MOV     DPH,?V1
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   F8           MOV     R0,A
   \   00003D   740D         MOV     A,#0xd
   \   00003F   12....       LCALL   ?XSTACK_DISP0_8
   \   000042   E8           MOV     A,R0
   \   000043   12....       LCALL   ?Subroutine37 & 0xFFFF
    361          
    362              if (dstAddr.addrMode == afAddr64Bit)
   \                     ??CrossCallReturnLabel_64:
   \   000046   7403         MOV     A,#0x3
   \   000048   68           XRL     A,R0
   \   000049   7020         JNZ     ??MT_AfDataRequest_2
    363              {
    364                (void)osal_memcpy(dstAddr.addr.extAddr, pBuf, Z_EXTADDR_LEN);
   \   00004B                ; Setup parameters for call to function osal_memcpy
   \   00004B   85....       MOV     ?V4,?V0
   \   00004E   85....       MOV     ?V5,?V1
   \   000051   75..00       MOV     ?V6,#0x0
   \   000054   78..         MOV     R0,#?V4
   \   000056   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000059   7C08         MOV     R4,#0x8
   \   00005B   7D00         MOV     R5,#0x0
   \   00005D   EC           MOV     A,R4
   \   00005E   12....       LCALL   ?XSTACK_DISP101_8
   \   000061   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000064   7403         MOV     A,#0x3
   \   000066   12....       LCALL   ?DEALLOC_XSTACK8
   \   000069   8009         SJMP    ??CrossCallReturnLabel_72
    365              }
    366              else
    367              {
    368                dstAddr.addr.shortAddr = BUILD_UINT16(pBuf[0], pBuf[1]);
   \                     ??MT_AfDataRequest_2:
   \   00006B   12....       LCALL   ?Subroutine30 & 0xFFFF
    369              }
   \                     ??CrossCallReturnLabel_47:
   \   00006E   12....       LCALL   ?XSTACK_DISP0_8
   \   000071   12....       LCALL   ?Subroutine41 & 0xFFFF
    370              pBuf += Z_EXTADDR_LEN;
    371          
    372              dstAddr.endPoint = *pBuf++;
   \                     ??CrossCallReturnLabel_72:
   \   000074   85..82       MOV     DPL,?V0
   \   000077   85..83       MOV     DPH,?V1
   \   00007A   A3           INC     DPTR
   \   00007B   A3           INC     DPTR
   \   00007C   A3           INC     DPTR
   \   00007D   A3           INC     DPTR
   \   00007E   A3           INC     DPTR
   \   00007F   A3           INC     DPTR
   \   000080   A3           INC     DPTR
   \   000081   A3           INC     DPTR
   \   000082   E0           MOVX    A,@DPTR
   \   000083   C0E0         PUSH    A
   \   000085   740E         MOV     A,#0xe
   \   000087   12....       LCALL   ?XSTACK_DISP0_8
   \   00008A   D0E0         POP     A
   \   00008C   F0           MOVX    @DPTR,A
   \   00008D   E5..         MOV     A,?V0
   \   00008F   2409         ADD     A,#0x9
   \   000091   F5..         MOV     ?V0,A
   \   000093   5002         JNC     ??MT_AfDataRequest_3
   \   000095   05..         INC     ?V1
    373              dstAddr.panId = BUILD_UINT16(pBuf[0], pBuf[1]);
   \                     ??MT_AfDataRequest_3:
   \   000097   F582         MOV     DPL,A
   \   000099   85..83       MOV     DPH,?V1
   \   00009C   12....       LCALL   ?Subroutine48 & 0xFFFF
   \                     ??CrossCallReturnLabel_92:
   \   00009F   740F         MOV     A,#0xf
   \   0000A1   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A4   12....       LCALL   ?Subroutine41 & 0xFFFF
    374              pBuf += 2;
   \                     ??CrossCallReturnLabel_73:
   \   0000A7   E5..         MOV     A,?V0
   \   0000A9   2402         ADD     A,#0x2
   \   0000AB   F5..         MOV     ?V0,A
   \   0000AD   5032         JNC     ??MT_AfDataRequest_4
   \   0000AF   05..         INC     ?V1
   \   0000B1   802E         SJMP    ??MT_AfDataRequest_4
    375            }
    376            else
    377            {
    378              /* Destination address */
    379              dstAddr.addrMode = afAddr16Bit;
   \                     ??MT_AfDataRequest_1:
   \   0000B3   740D         MOV     A,#0xd
   \   0000B5   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B8   12....       LCALL   ?Subroutine39 & 0xFFFF
    380              dstAddr.addr.shortAddr = BUILD_UINT16(pBuf[0], pBuf[1]);
   \                     ??CrossCallReturnLabel_129:
   \   0000BB   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_48:
   \   0000BE   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C1   12....       LCALL   ?Subroutine38 & 0xFFFF
    381              pBuf += 2;
    382          
    383              /* Destination endpoint */
    384              dstAddr.endPoint = *pBuf++;
   \                     ??CrossCallReturnLabel_66:
   \   0000C4   C0E0         PUSH    A
   \   0000C6   740E         MOV     A,#0xe
   \   0000C8   12....       LCALL   ?XSTACK_DISP0_8
   \   0000CB   D0E0         POP     A
   \   0000CD   F0           MOVX    @DPTR,A
   \   0000CE   E5..         MOV     A,?V0
   \   0000D0   2403         ADD     A,#0x3
   \   0000D2   F5..         MOV     ?V0,A
   \   0000D4   5002         JNC     ??MT_AfDataRequest_5
   \   0000D6   05..         INC     ?V1
    385              dstAddr.panId = 0;
   \                     ??MT_AfDataRequest_5:
   \   0000D8   740F         MOV     A,#0xf
   \   0000DA   12....       LCALL   ?XSTACK_DISP0_8
   \   0000DD   E4           CLR     A
   \   0000DE   F0           MOVX    @DPTR,A
   \   0000DF   A3           INC     DPTR
   \   0000E0   F0           MOVX    @DPTR,A
    386            }
    387          
    388            /* Source endpoint */
    389            epDesc = afFindEndPointDesc(*pBuf++);
   \                     ??MT_AfDataRequest_4:
   \   0000E1                ; Setup parameters for call to function afFindEndPointDesc
   \   0000E1   85..82       MOV     DPL,?V0
   \   0000E4   85..83       MOV     DPH,?V1
   \   0000E7   E0           MOVX    A,@DPTR
   \   0000E8   F9           MOV     R1,A
   \   0000E9   12....       LCALL   `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
   \   0000EC   7402         MOV     A,#0x2
   \   0000EE   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F1   EA           MOV     A,R2
   \   0000F2   F0           MOVX    @DPTR,A
   \   0000F3   A3           INC     DPTR
   \   0000F4   EB           MOV     A,R3
   \   0000F5   12....       LCALL   ?Subroutine37 & 0xFFFF
    390          
    391            /* ClusterId */
    392            cId = BUILD_UINT16(pBuf[0], pBuf[1]);
   \                     ??CrossCallReturnLabel_65:
   \   0000F8   E0           MOVX    A,@DPTR
   \   0000F9   FA           MOV     R2,A
   \   0000FA   12....       LCALL   ??Subroutine70_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_136:
   \   0000FD   EA           MOV     A,R2
   \   0000FE   28           ADD     A,R0
   \   0000FF   F5..         MOV     ?V4,A
   \   000101   E4           CLR     A
   \   000102   39           ADDC    A,R1
   \   000103   F5..         MOV     ?V5,A
    393            pBuf +=2;
    394          
    395            /* TransId */
    396            transId = *pBuf++;
   \   000105   85..82       MOV     DPL,?V0
   \   000108   85..83       MOV     DPH,?V1
   \   00010B   A3           INC     DPTR
   \   00010C   A3           INC     DPTR
   \   00010D   E0           MOVX    A,@DPTR
   \   00010E   C0E0         PUSH    A
   \   000110   7401         MOV     A,#0x1
   \   000112   12....       LCALL   ?XSTACK_DISP0_8
   \   000115   D0E0         POP     A
   \   000117   12....       LCALL   ?Subroutine33 & 0xFFFF
    397          
    398            /* TxOption */
    399            txOpts = *pBuf++;
   \                     ??CrossCallReturnLabel_55:
   \   00011A   F5..         MOV     ?V6,A
    400          
    401            /* Radius */
    402            radius = *pBuf++;
   \   00011C   85..82       MOV     DPL,?V0
   \   00011F   85..83       MOV     DPH,?V1
   \   000122   A3           INC     DPTR
   \   000123   A3           INC     DPTR
   \   000124   A3           INC     DPTR
   \   000125   A3           INC     DPTR
   \   000126   E0           MOVX    A,@DPTR
   \   000127   F5..         MOV     ?V3,A
   \   000129   E5..         MOV     A,?V0
   \   00012B   2405         ADD     A,#0x5
   \   00012D   F5..         MOV     ?V0,A
   \   00012F   5002         JNC     ??MT_AfDataRequest_6
   \   000131   05..         INC     ?V1
    403          
    404            /* Length */
    405            if (cmd1 == MT_AF_DATA_REQUEST_EXT)
   \                     ??MT_AfDataRequest_6:
   \   000133   7402         MOV     A,#0x2
   \   000135   65..         XRL     A,?V7
   \   000137   85..82       MOV     DPL,?V0
   \   00013A   85..83       MOV     DPH,?V1
   \   00013D   7016         JNZ     ??MT_AfDataRequest_7
    406            {
    407              dataLen = BUILD_UINT16(pBuf[0], pBuf[1]);
   \   00013F   12....       LCALL   ?Subroutine12 & 0xFFFF
    408              tempLen = dataLen + MT_AF_REQ_MSG_LEN + MT_AF_REQ_MSG_EXT;
   \                     ??CrossCallReturnLabel_134:
   \   000142   EE           MOV     A,R6
   \   000143   2414         ADD     A,#0x14
   \   000145   F8           MOV     R0,A
   \   000146   E4           CLR     A
   \   000147   3F           ADDC    A,R7
   \   000148   F9           MOV     R1,A
    409              pBuf += 2;
   \   000149   E5..         MOV     A,?V0
   \   00014B   2402         ADD     A,#0x2
   \   00014D   F5..         MOV     ?V0,A
   \   00014F   5016         JNC     ??MT_AfDataRequest_8
   \   000151   05..         INC     ?V1
   \   000153   8012         SJMP    ??MT_AfDataRequest_8
    410            }
    411            else
    412            {
    413              dataLen = *pBuf++;
   \                     ??MT_AfDataRequest_7:
   \   000155   E0           MOVX    A,@DPTR
   \   000156   FE           MOV     R6,A
   \   000157   7F00         MOV     R7,#0x0
   \   000159   A3           INC     DPTR
   \   00015A   8582..       MOV     ?V0,DPL
   \   00015D   8583..       MOV     ?V1,DPH
    414              tempLen = dataLen + MT_AF_REQ_MSG_LEN;
   \   000160   240A         ADD     A,#0xa
   \   000162   F8           MOV     R0,A
   \   000163   E4           CLR     A
   \   000164   3400         ADDC    A,#0x0
   \   000166   F9           MOV     R1,A
    415            }
    416          
    417            if ( epDesc == NULL )
   \                     ??MT_AfDataRequest_8:
   \   000167   7402         MOV     A,#0x2
   \   000169   12....       LCALL   ?XSTACK_DISP0_8
   \   00016C   12....       LCALL   ??Subroutine77_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_169:
   \   00016F   EA           MOV     A,R2
   \   000170   4B           ORL     A,R3
   \   000171   6011         JZ      ??MT_AfDataRequest_9
    418            {
    419              retValue = afStatus_INVALID_PARAMETER;
    420            }
    421            else if (tempLen > (uint16)MT_RPC_DATA_MAX)
   \   000173   C3           CLR     C
   \   000174   E8           MOV     A,R0
   \   000175   94FB         SUBB    A,#-0x5
   \   000177   E9           MOV     A,R1
   \   000178   9400         SUBB    A,#0x0
   \   00017A   5003         JNC     $+5
   \   00017C   02....       LJMP    ??MT_AfDataRequest_10 & 0xFFFF
    422            {
    423              if (pMtAfDataReq != NULL)
   \   00017F   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_197:
   \   000182   600B         JZ      ??MT_AfDataRequest_11
    424              {
    425                retValue = afStatus_INVALID_PARAMETER;
   \                     ??MT_AfDataRequest_9:
   \   000184   85..82       MOV     DPL,?XSP + 0
   \   000187   85..83       MOV     DPH,?XSP + 1
   \   00018A   7402         MOV     A,#0x2
   \   00018C   02....       LJMP    ??MT_AfDataRequest_12 & 0xFFFF
    426              }
    427              else if ((pMtAfDataReq = osal_mem_alloc(sizeof(mtAfDataReq_t) + dataLen)) == NULL)
   \                     ??MT_AfDataRequest_11:
   \   00018F                ; Setup parameters for call to function osal_mem_alloc
   \   00018F   EE           MOV     A,R6
   \   000190   2418         ADD     A,#0x18
   \   000192   FA           MOV     R2,A
   \   000193   E4           CLR     A
   \   000194   3F           ADDC    A,R7
   \   000195   FB           MOV     R3,A
   \   000196   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000199   90....       MOV     DPTR,#pMtAfDataReq
   \   00019C   12....       LCALL   ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_86:
   \   00019F   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_198:
   \   0001A2   85..82       MOV     DPL,?XSP + 0
   \   0001A5   85..83       MOV     DPH,?XSP + 1
   \   0001A8   7005         JNZ     ??MT_AfDataRequest_13
    428              {
    429                retValue = afStatus_MEM_FAIL;
   \   0001AA   7410         MOV     A,#0x10
   \   0001AC   02....       LJMP    ??MT_AfDataRequest_12 & 0xFFFF
    430              }
    431              else
    432              {
    433                retValue = afStatus_SUCCESS;
   \                     ??MT_AfDataRequest_13:
   \   0001AF   E4           CLR     A
   \   0001B0   F0           MOVX    @DPTR,A
    434          
    435                pMtAfDataReq->data = (uint8 *)(pMtAfDataReq+1);
   \   0001B1   90....       MOV     DPTR,#pMtAfDataReq
   \   0001B4   E0           MOVX    A,@DPTR
   \   0001B5   2418         ADD     A,#0x18
   \   0001B7   FA           MOV     R2,A
   \   0001B8   A3           INC     DPTR
   \   0001B9   E0           MOVX    A,@DPTR
   \   0001BA   3400         ADDC    A,#0x0
   \   0001BC   FB           MOV     R3,A
   \   0001BD   90....       MOV     DPTR,#pMtAfDataReq
   \   0001C0   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_43:
   \   0001C3   A3           INC     DPTR
   \   0001C4   EB           MOV     A,R3
   \   0001C5   F0           MOVX    @DPTR,A
    436                (void)osal_memcpy(&(pMtAfDataReq->dstAddr), &dstAddr, sizeof(afAddrType_t));
   \   0001C6                ; Setup parameters for call to function osal_memcpy
   \   0001C6   7405         MOV     A,#0x5
   \   0001C8   12....       LCALL   ?XSTACK_DISP100_8
   \   0001CB   88..         MOV     ?V0,R0
   \   0001CD   89..         MOV     ?V1,R1
   \   0001CF   75..00       MOV     ?V2,#0x0
   \   0001D2   78..         MOV     R0,#?V0
   \   0001D4   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0001D7   7C0C         MOV     R4,#0xc
   \   0001D9   7D00         MOV     R5,#0x0
   \   0001DB   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_49:
   \   0001DE   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0001E1   7403         MOV     A,#0x3
   \   0001E3   12....       LCALL   ?DEALLOC_XSTACK8
    437                pMtAfDataReq->epDesc = epDesc;
   \   0001E6   7402         MOV     A,#0x2
   \   0001E8   12....       LCALL   ?XSTACK_DISP0_8
   \   0001EB   12....       LCALL   ??Subroutine77_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_170:
   \   0001EE   90....       MOV     DPTR,#pMtAfDataReq
   \   0001F1   12....       LCALL   ??Subroutine76_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_160:
   \   0001F4   240E         ADD     A,#0xe
   \   0001F6   F582         MOV     DPL,A
   \   0001F8   E4           CLR     A
   \   0001F9   38           ADDC    A,R0
   \   0001FA   F583         MOV     DPH,A
   \   0001FC   12....       LCALL   ?Subroutine46 & 0xFFFF
    438                pMtAfDataReq->cId = cId;
   \                     ??CrossCallReturnLabel_87:
   \   0001FF   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   000202   E5..         MOV     A,?V4
   \   000204   F0           MOVX    @DPTR,A
   \   000205   A3           INC     DPTR
   \   000206   E5..         MOV     A,?V5
   \   000208   F0           MOVX    @DPTR,A
    439                pMtAfDataReq->dataLen = dataLen;
   \   000209   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_35:
   \   00020C   EE           MOV     A,R6
   \   00020D   F0           MOVX    @DPTR,A
   \   00020E   A3           INC     DPTR
   \   00020F   EF           MOV     A,R7
   \   000210   F0           MOVX    @DPTR,A
    440                pMtAfDataReq->transId = transId;
   \   000211   7401         MOV     A,#0x1
   \   000213   12....       LCALL   ?XSTACK_DISP0_8
   \   000216   E0           MOVX    A,@DPTR
   \   000217   C0E0         PUSH    A
   \   000219   90....       MOV     DPTR,#pMtAfDataReq
   \   00021C   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_37:
   \   00021F   D0E0         POP     A
   \   000221   F0           MOVX    @DPTR,A
    441                pMtAfDataReq->txOpts = txOpts;
   \   000222   90....       MOV     DPTR,#pMtAfDataReq
   \   000225   12....       LCALL   ??Subroutine76_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_161:
   \   000228   2415         ADD     A,#0x15
   \   00022A   F582         MOV     DPL,A
   \   00022C   E4           CLR     A
   \   00022D   38           ADDC    A,R0
   \   00022E   F583         MOV     DPH,A
   \   000230   E5..         MOV     A,?V6
   \   000232   F0           MOVX    @DPTR,A
    442                pMtAfDataReq->radius = radius;
   \   000233   90....       MOV     DPTR,#pMtAfDataReq
   \   000236   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_39:
   \   000239   E5..         MOV     A,?V3
   \   00023B   12....       LCALL   ?Subroutine18 & 0xFFFF
    443          
    444                // Setup to time-out the huge outgoing item if host does not MT_AF_DATA_STORE it.
    445                pMtAfDataReq->tick = MT_AF_EXEC_CNT;
   \                     ??CrossCallReturnLabel_31:
   \   00023E   740F         MOV     A,#0xf
   \   000240   F0           MOVX    @DPTR,A
    446                if (ZSuccess != osal_start_timerEx(MT_TaskID, MT_AF_EXEC_EVT, MT_AF_EXEC_DLY))
   \   000241                ; Setup parameters for call to function osal_start_timerEx
   \   000241   90....       MOV     DPTR,#__Constant_3e8
   \   000244   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   000247   7A08         MOV     R2,#0x8
   \   000249   7B00         MOV     R3,#0x0
   \   00024B   90....       MOV     DPTR,#MT_TaskID
   \   00024E   E0           MOVX    A,@DPTR
   \   00024F   F9           MOV     R1,A
   \   000250   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000253   7404         MOV     A,#0x4
   \   000255   12....       LCALL   ?DEALLOC_XSTACK8
   \   000258   E9           MOV     A,R1
   \   000259   6057         JZ      ??MT_AfDataRequest_14
    447                {
    448                  (void)osal_set_event(MT_TaskID, MT_AF_EXEC_EVT);
   \   00025B                ; Setup parameters for call to function osal_set_event
   \   00025B   7A08         MOV     R2,#0x8
   \   00025D   7B00         MOV     R3,#0x0
   \   00025F   90....       MOV     DPTR,#MT_TaskID
   \   000262   E0           MOVX    A,@DPTR
   \   000263   F9           MOV     R1,A
   \   000264   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   000267   8049         SJMP    ??MT_AfDataRequest_14
    449                }
    450              }
    451            }
    452          #if defined ( MT_GP_FUNC )
    453            else if ( ( cmd1 == MT_AF_DATA_REQUEST_EXT )
    454                     && ( dstAddr.endPoint == ZGP_ENDPOINT_ID )
    455                     && ( dstAddr.panId == 0 )
    456                     && ( dstAddr.addrMode == afAddr64Bit ) )// loopback support
    457            {
    458              retValue = MT_GpGenerateResponse( dstAddr.addr.extAddr, dataLen, pBuf );
    459            }
    460          #endif
    461            else
    462            {
    463              retValue = AF_DataRequest(&dstAddr, epDesc, cId, dataLen, pBuf, &transId, txOpts, radius);
   \                     ??MT_AfDataRequest_10:
   \   000269                ; Setup parameters for call to function AF_DataRequest
   \   000269   E5..         MOV     A,?V3
   \   00026B   F5..         MOV     ?V2,A
   \   00026D   78..         MOV     R0,#?V2
   \   00026F   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000272   7402         MOV     A,#0x2
   \   000274   12....       LCALL   ?XSTACK_DISP100_8
   \   000277   88..         MOV     ?V2,R0
   \   000279   89..         MOV     ?V3,R1
   \   00027B   78..         MOV     R0,#?V2
   \   00027D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000280   78..         MOV     R0,#?V0
   \   000282   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000285   8E..         MOV     ?V0,R6
   \   000287   8F..         MOV     ?V1,R7
   \   000289   78..         MOV     R0,#?V0
   \   00028B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00028E   78..         MOV     R0,#?V4
   \   000290   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000293   A9..         MOV     R1,?V6
   \   000295   740B         MOV     A,#0xb
   \   000297   12....       LCALL   ?XSTACK_DISP0_8
   \   00029A   12....       LCALL   ?Subroutine32 & 0xFFFF
    464            }
   \                     ??CrossCallReturnLabel_51:
   \   00029D   740E         MOV     A,#0xe
   \   00029F   12....       LCALL   ?XSTACK_DISP101_8
   \   0002A2   12....       LCALL   `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
   \   0002A5   7409         MOV     A,#0x9
   \   0002A7   12....       LCALL   ?DEALLOC_XSTACK8
   \   0002AA   E9           MOV     A,R1
   \   0002AB   85..82       MOV     DPL,?XSP + 0
   \   0002AE   85..83       MOV     DPH,?XSP + 1
   \                     ??MT_AfDataRequest_12:
   \   0002B1   F0           MOVX    @DPTR,A
    465          
    466            if (MT_RPC_CMD_SREQ == (cmd0 & MT_RPC_CMD_TYPE_MASK))
   \                     ??MT_AfDataRequest_14:
   \   0002B2   7404         MOV     A,#0x4
   \   0002B4   12....       LCALL   ?XSTACK_DISP0_8
   \   0002B7   E0           MOVX    A,@DPTR
   \   0002B8   54E0         ANL     A,#0xe0
   \   0002BA   6420         XRL     A,#0x20
   \   0002BC   700D         JNZ     ??MT_AfDataRequest_15
    467            {
    468              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP|(uint8)MT_RPC_SYS_AF), cmd1, 1, &retValue);
   \   0002BE                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   0002BE   AC..         MOV     R4,?XSP + 0
   \   0002C0   AD..         MOV     R5,?XSP + 1
   \   0002C2   7B01         MOV     R3,#0x1
   \   0002C4   AA..         MOV     R2,?V7
   \   0002C6   7964         MOV     R1,#0x64
   \   0002C8   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    469            }
    470          }
   \                     ??MT_AfDataRequest_15:
   \   0002CB   7411         MOV     A,#0x11
   \   0002CD                REQUIRE ?Subroutine1
   \   0002CD                ; // Fall through to label ?Subroutine1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F08         MOV     R7,#0x8
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000   7402         MOV     A,#0x2
   \   000002                REQUIRE ??Subroutine68_0
   \   000002                ; // Fall through to label ??Subroutine68_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine68_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   85..82       MOV     DPL,?V0
   \   000004   85..83       MOV     DPH,?V1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   12....       LCALL   ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_121:
   \   000003   8582..       MOV     ?V0,DPL
   \   000006   8583..       MOV     ?V1,DPH
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   12....       LCALL   ?Subroutine48 & 0xFFFF
   \                     ??CrossCallReturnLabel_94:
   \   000003   7405         MOV     A,#0x5
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine48:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   EA           MOV     A,R2
   \   000006   F8           MOV     R0,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002                REQUIRE ??Subroutine69_0
   \   000002                ; // Fall through to label ??Subroutine69_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine69_0:
   \   000000   12....       LCALL   ??Subroutine70_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_139:
   \   000003   EA           MOV     A,R2
   \   000004   28           ADD     A,R0
   \   000005   FE           MOV     R6,A
   \   000006   E4           CLR     A
   \   000007   39           ADDC    A,R1
   \   000008   FF           MOV     R7,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine70_0:
   \   000000   A3           INC     DPTR
   \   000001   E0           MOVX    A,@DPTR
   \   000002   F8           MOV     R0,A
   \   000003   E4           CLR     A
   \   000004   C8           XCH     A,R0
   \   000005   F9           MOV     R1,A
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   E8           MOV     A,R0
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   E9           MOV     A,R1
   \   000004   12....       LCALL   ?Subroutine58 & 0xFFFF
   \                     ??CrossCallReturnLabel_106:
   \   000007   E0           MOVX    A,@DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   12....       LCALL   ?Subroutine58 & 0xFFFF
   \                     ??CrossCallReturnLabel_107:
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine58:
   \   000000   12....       LCALL   ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_120:
   \   000003   A3           INC     DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine65:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   85..82       MOV     DPL,?V0
   \   000004   85..83       MOV     DPH,?V1
   \   000007   A3           INC     DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine46:
   \   000000   EA           MOV     A,R2
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   EB           MOV     A,R3
   \   000004   F0           MOVX    @DPTR,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FC           MOV     R4,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FD           MOV     R5,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine76_0:
   \   000000   12....       LCALL   ??Subroutine81_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_212:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   12....       LCALL   ??Subroutine81_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_208:
   \   000003   2416         ADD     A,#0x16
   \   000005   F582         MOV     DPL,A
   \   000007   E4           CLR     A
   \   000008   38           ADDC    A,R0
   \   000009   F583         MOV     DPH,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   12....       LCALL   ??Subroutine81_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_207:
   \   000003   2414         ADD     A,#0x14
   \   000005   F582         MOV     DPL,A
   \   000007   E4           CLR     A
   \   000008   38           ADDC    A,R0
   \   000009   F583         MOV     DPH,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   12....       LCALL   ?Subroutine50 & 0xFFFF
   \                     ??CrossCallReturnLabel_186:
   \   000003   EA           MOV     A,R2
   \   000004   F0           MOVX    @DPTR,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine50:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002                REQUIRE ??Subroutine79_0
   \   000002                ; // Fall through to label ??Subroutine79_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine79_0:
   \   000000   A3           INC     DPTR
   \   000001   E0           MOVX    A,@DPTR
   \   000002   F583         MOV     DPH,A
   \   000004   8882         MOV     DPL,R0
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   90....       MOV     DPTR,#pMtAfDataReq
   \   000003   E0           MOVX    A,@DPTR
   \   000004   2402         ADD     A,#0x2
   \   000006   FA           MOV     R2,A
   \   000007   A3           INC     DPTR
   \   000008   E0           MOVX    A,@DPTR
   \   000009   3400         ADDC    A,#0x0
   \   00000B   FB           MOV     R3,A
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   12....       LCALL   ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_211:
   \   000003   2412         ADD     A,#0x12
   \   000005   F582         MOV     DPL,A
   \   000007   E4           CLR     A
   \   000008   38           ADDC    A,R0
   \   000009   F583         MOV     DPH,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   12....       LCALL   ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_210:
   \   000003   2410         ADD     A,#0x10
   \   000005   F582         MOV     DPL,A
   \   000007   E4           CLR     A
   \   000008   38           ADDC    A,R0
   \   000009   F583         MOV     DPH,A
   \   00000B   22           RET
    471          
    472          #if defined ( ZIGBEE_SOURCE_ROUTING )
    473          
    474          /***************************************************************************************************
    475           * @fn      MT_AfDataRequestSrcRtg
    476           *
    477           * @brief   Process AF Register command
    478           *
    479           * @param   pBuf - pointer to the received buffer
    480           *
    481           * @return  none
    482           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    483          void MT_AfDataRequestSrcRtg(uint8 *pBuf)
   \                     MT_AfDataRequestSrcRtg:
    484          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 18
   \   000005   74EE         MOV     A,#-0x12
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8B..         MOV     ?V1,R3
    485            uint8 cmdId, dataLen = 0;
    486            uint8 retValue = ZFailure;
   \   00000C   85..82       MOV     DPL,?XSP + 0
   \   00000F   85..83       MOV     DPH,?XSP + 1
   \   000012   7401         MOV     A,#0x1
   \   000014   12....       LCALL   ??Subroutine67_0 & 0xFFFF
    487            endPointDesc_t *epDesc;
    488            byte transId;
    489            afAddrType_t dstAddr;
    490            cId_t cId;
    491            byte txOpts, radius, srcEP, relayCnt;
    492            uint16 *pRelayList;
    493            uint8 i;
    494          
    495            /* parse header */
    496            cmdId = pBuf[MT_RPC_POS_CMD1];
   \                     ??CrossCallReturnLabel_125:
   \   000017   C0E0         PUSH    A
   \   000019   7403         MOV     A,#0x3
   \   00001B   12....       LCALL   ?XSTACK_DISP0_8
   \   00001E   D0E0         POP     A
   \   000020   F0           MOVX    @DPTR,A
    497            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   000021   EA           MOV     A,R2
   \   000022   2403         ADD     A,#0x3
   \   000024   F5..         MOV     ?V0,A
   \   000026   5002         JNC     ??MT_AfDataRequestSrcRtg_0
   \   000028   05..         INC     ?V1
    498          
    499            /* Destination address */
    500            /* Initialize the panID field to zero to avoid inter-pan */
    501            osal_memset( &dstAddr, 0, sizeof(afAddrType_t) );
   \                     ??MT_AfDataRequestSrcRtg_0:
   \   00002A                ; Setup parameters for call to function osal_memset
   \   00002A   7C0C         MOV     R4,#0xc
   \   00002C   7D00         MOV     R5,#0x0
   \   00002E   7900         MOV     R1,#0x0
   \   000030   7406         MOV     A,#0x6
   \   000032   12....       LCALL   ?XSTACK_DISP101_8
   \   000035   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
    502            dstAddr.addrMode = afAddr16Bit;
   \   000038   740E         MOV     A,#0xe
   \   00003A   12....       LCALL   ?XSTACK_DISP0_8
   \   00003D   12....       LCALL   ?Subroutine39 & 0xFFFF
    503            dstAddr.addr.shortAddr = BUILD_UINT16(pBuf[0], pBuf[1]);
   \                     ??CrossCallReturnLabel_130:
   \   000040   12....       LCALL   ?Subroutine48 & 0xFFFF
   \                     ??CrossCallReturnLabel_93:
   \   000043   7406         MOV     A,#0x6
   \   000045   12....       LCALL   ?XSTACK_DISP0_8
   \   000048   12....       LCALL   ?Subroutine38 & 0xFFFF
    504            pBuf += 2;
    505          
    506            /* Destination endpoint */
    507            dstAddr.endPoint = *pBuf++;
   \                     ??CrossCallReturnLabel_67:
   \   00004B   C0E0         PUSH    A
   \   00004D   740F         MOV     A,#0xf
   \   00004F   12....       LCALL   ?XSTACK_DISP0_8
   \   000052   D0E0         POP     A
   \   000054   12....       LCALL   ?Subroutine33 & 0xFFFF
    508          
    509            /* Source endpoint */
    510            srcEP = *pBuf++;
   \                     ??CrossCallReturnLabel_56:
   \   000057   F9           MOV     R1,A
   \   000058   E5..         MOV     A,?V0
   \   00005A   2404         ADD     A,#0x4
   \   00005C   F5..         MOV     ?V0,A
   \   00005E   5002         JNC     ??MT_AfDataRequestSrcRtg_1
   \   000060   05..         INC     ?V1
    511            epDesc = afFindEndPointDesc( srcEP );
   \                     ??MT_AfDataRequestSrcRtg_1:
   \   000062                ; Setup parameters for call to function afFindEndPointDesc
   \   000062   12....       LCALL   `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
   \   000065   7404         MOV     A,#0x4
   \   000067   12....       LCALL   ?XSTACK_DISP0_8
   \   00006A   EA           MOV     A,R2
   \   00006B   F0           MOVX    @DPTR,A
   \   00006C   A3           INC     DPTR
   \   00006D   EB           MOV     A,R3
   \   00006E   12....       LCALL   ??Subroutine68_0 & 0xFFFF
    512          
    513            /* ClusterId */
    514            cId = BUILD_UINT16(pBuf[0], pBuf[1]);
   \                     ??CrossCallReturnLabel_131:
   \   000071   12....       LCALL   ?Subroutine12 & 0xFFFF
    515            pBuf +=2;
    516          
    517            /* TransId */
    518            transId = *pBuf++;
   \                     ??CrossCallReturnLabel_135:
   \   000074   85..82       MOV     DPL,?V0
   \   000077   85..83       MOV     DPH,?V1
   \   00007A   A3           INC     DPTR
   \   00007B   A3           INC     DPTR
   \   00007C   E0           MOVX    A,@DPTR
   \   00007D   C0E0         PUSH    A
   \   00007F   7401         MOV     A,#0x1
   \   000081   12....       LCALL   ?XSTACK_DISP0_8
   \   000084   D0E0         POP     A
   \   000086   12....       LCALL   ?Subroutine33 & 0xFFFF
    519          
    520            /* TxOption */
    521            txOpts = *pBuf++;
   \                     ??CrossCallReturnLabel_57:
   \   000089   C0E0         PUSH    A
   \   00008B   7402         MOV     A,#0x2
   \   00008D   12....       LCALL   ?XSTACK_DISP0_8
   \   000090   D0E0         POP     A
   \   000092   12....       LCALL   ??Subroutine68_0 & 0xFFFF
    522          
    523            /* Radius */
    524            radius = *pBuf++;
   \                     ??CrossCallReturnLabel_132:
   \   000095   A3           INC     DPTR
   \   000096   A3           INC     DPTR
   \   000097   A3           INC     DPTR
   \   000098   A3           INC     DPTR
   \   000099   E0           MOVX    A,@DPTR
   \   00009A   F5..         MOV     ?V3,A
    525          
    526            /* Source route relay count */
    527            relayCnt = *pBuf++;
   \   00009C   85..82       MOV     DPL,?V0
   \   00009F   85..83       MOV     DPH,?V1
   \   0000A2   A3           INC     DPTR
   \   0000A3   A3           INC     DPTR
   \   0000A4   A3           INC     DPTR
   \   0000A5   A3           INC     DPTR
   \   0000A6   A3           INC     DPTR
   \   0000A7   E0           MOVX    A,@DPTR
   \   0000A8   F5..         MOV     ?V2,A
   \   0000AA   E5..         MOV     A,?V0
   \   0000AC   2406         ADD     A,#0x6
   \   0000AE   F5..         MOV     ?V0,A
   \   0000B0   5002         JNC     ??MT_AfDataRequestSrcRtg_2
   \   0000B2   05..         INC     ?V1
    528          
    529            /* Convert the source route relay list */
    530            if( (pRelayList = osal_mem_alloc( relayCnt * sizeof( uint16 ))) != NULL )
   \                     ??MT_AfDataRequestSrcRtg_2:
   \   0000B4                ; Setup parameters for call to function osal_mem_alloc
   \   0000B4   AA..         MOV     R2,?V2
   \   0000B6   EA           MOV     A,R2
   \   0000B7   2A           ADD     A,R2
   \   0000B8   FA           MOV     R2,A
   \   0000B9   E4           CLR     A
   \   0000BA   33           RLC     A
   \   0000BB   FB           MOV     R3,A
   \   0000BC   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   0000BF   8A..         MOV     ?V6,R2
   \   0000C1   8B..         MOV     ?V7,R3
   \   0000C3   EA           MOV     A,R2
   \   0000C4   45..         ORL     A,?V7
   \   0000C6   7003         JNZ     $+5
   \   0000C8   02....       LJMP    ??MT_AfDataRequestSrcRtg_3 & 0xFFFF
    531            {
    532              for( i = 0; i < relayCnt; i++ )
   \   0000CB   7A00         MOV     R2,#0x0
   \   0000CD   8028         SJMP    ??MT_AfDataRequestSrcRtg_4
    533              {
    534                pRelayList[i]  = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??MT_AfDataRequestSrcRtg_5:
   \   0000CF   12....       LCALL   ?Subroutine52 & 0xFFFF
   \                     ??CrossCallReturnLabel_137:
   \   0000D2   EC           MOV     A,R4
   \   0000D3   28           ADD     A,R0
   \   0000D4   E4           CLR     A
   \   0000D5   39           ADDC    A,R1
   \   0000D6   FD           MOV     R5,A
   \   0000D7   EA           MOV     A,R2
   \   0000D8   25E0         ADD     A,0xE0 /* A   */
   \   0000DA   F8           MOV     R0,A
   \   0000DB   E4           CLR     A
   \   0000DC   33           RLC     A
   \   0000DD   F9           MOV     R1,A
   \   0000DE   E5..         MOV     A,?V6
   \   0000E0   28           ADD     A,R0
   \   0000E1   F582         MOV     DPL,A
   \   0000E3   EB           MOV     A,R3
   \   0000E4   39           ADDC    A,R1
   \   0000E5   F583         MOV     DPH,A
   \   0000E7   EC           MOV     A,R4
   \   0000E8   F0           MOVX    @DPTR,A
   \   0000E9   A3           INC     DPTR
   \   0000EA   ED           MOV     A,R5
   \   0000EB   F0           MOVX    @DPTR,A
    535                pBuf += 2;
   \   0000EC   E5..         MOV     A,?V0
   \   0000EE   2402         ADD     A,#0x2
   \   0000F0   F5..         MOV     ?V0,A
   \   0000F2   5002         JNC     ??MT_AfDataRequestSrcRtg_6
   \   0000F4   05..         INC     ?V1
    536              }
   \                     ??MT_AfDataRequestSrcRtg_6:
   \   0000F6   0A           INC     R2
   \                     ??MT_AfDataRequestSrcRtg_4:
   \   0000F7   EA           MOV     A,R2
   \   0000F8   C3           CLR     C
   \   0000F9   95..         SUBB    A,?V2
   \   0000FB   85..82       MOV     DPL,?V0
   \   0000FE   85..83       MOV     DPH,?V1
   \   000101   E0           MOVX    A,@DPTR
   \   000102   40CB         JC      ??MT_AfDataRequestSrcRtg_5
    537          
    538              /* Data payload Length */
    539              dataLen = *pBuf++;
   \   000104   FA           MOV     R2,A
   \   000105   A3           INC     DPTR
   \   000106   8582..       MOV     ?V0,DPL
   \   000109   8583..       MOV     ?V1,DPH
    540          
    541              if ( epDesc == NULL )
   \   00010C   7404         MOV     A,#0x4
   \   00010E   12....       LCALL   ?XSTACK_DISP0_8
   \   000111   12....       LCALL   ??Subroutine80_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_189:
   \   000114   700A         JNZ     ??MT_AfDataRequestSrcRtg_7
    542              {
    543                retValue = afStatus_INVALID_PARAMETER;
   \   000116   85..82       MOV     DPL,?XSP + 0
   \   000119   85..83       MOV     DPH,?XSP + 1
   \   00011C   7402         MOV     A,#0x2
   \   00011E   805C         SJMP    ??MT_AfDataRequestSrcRtg_8
    544              }
    545              else
    546              {
    547                retValue = AF_DataRequestSrcRtg( &dstAddr, epDesc, cId, dataLen, pBuf,
    548                                               &transId, txOpts, radius, relayCnt, pRelayList );
   \                     ??MT_AfDataRequestSrcRtg_7:
   \   000120                ; Setup parameters for call to function AF_DataRequestSrcRtg
   \   000120   78..         MOV     R0,#?V6
   \   000122   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000125   78..         MOV     R0,#?V2
   \   000127   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00012A   E5..         MOV     A,?V3
   \   00012C   F5..         MOV     ?V2,A
   \   00012E   78..         MOV     R0,#?V2
   \   000130   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000133   7405         MOV     A,#0x5
   \   000135   12....       LCALL   ?XSTACK_DISP100_8
   \   000138   88..         MOV     ?V2,R0
   \   00013A   89..         MOV     ?V3,R1
   \   00013C   78..         MOV     R0,#?V2
   \   00013E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000141   78..         MOV     R0,#?V0
   \   000143   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000146   8A..         MOV     ?V0,R2
   \   000148   75..00       MOV     ?V1,#0x0
   \   00014B   78..         MOV     R0,#?V0
   \   00014D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000150   8E..         MOV     ?V0,R6
   \   000152   8F..         MOV     ?V1,R7
   \   000154   78..         MOV     R0,#?V0
   \   000156   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000159   740E         MOV     A,#0xe
   \   00015B   12....       LCALL   ?XSTACK_DISP0_8
   \   00015E   E0           MOVX    A,@DPTR
   \   00015F   F9           MOV     R1,A
   \   000160   7410         MOV     A,#0x10
   \   000162   12....       LCALL   ?XSTACK_DISP0_8
   \   000165   12....       LCALL   ?Subroutine32 & 0xFFFF
    549              }
   \                     ??CrossCallReturnLabel_52:
   \   000168   7412         MOV     A,#0x12
   \   00016A   12....       LCALL   ?XSTACK_DISP101_8
   \   00016D   12....       LCALL   `??AF_DataRequestSrcRtg::?relay`; Banked call to: AF_DataRequestSrcRtg
   \   000170   740C         MOV     A,#0xc
   \   000172   12....       LCALL   ?DEALLOC_XSTACK8
   \   000175   E9           MOV     A,R1
   \   000176   85..82       MOV     DPL,?XSP + 0
   \   000179   85..83       MOV     DPH,?XSP + 1
   \                     ??MT_AfDataRequestSrcRtg_8:
   \   00017C   F0           MOVX    @DPTR,A
    550          
    551              /* Free the memory allocated */
    552              osal_mem_free( pRelayList );
   \   00017D                ; Setup parameters for call to function osal_mem_free
   \   00017D   AA..         MOV     R2,?V6
   \   00017F   AB..         MOV     R3,?V7
   \   000181   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000184   8009         SJMP    ??MT_AfDataRequestSrcRtg_9
    553            }
    554            else
    555            {
    556              retValue = afStatus_MEM_FAIL;
   \                     ??MT_AfDataRequestSrcRtg_3:
   \   000186   85..82       MOV     DPL,?XSP + 0
   \   000189   85..83       MOV     DPH,?XSP + 1
   \   00018C   7410         MOV     A,#0x10
   \   00018E   F0           MOVX    @DPTR,A
    557            }
    558          
    559          
    560            /* Build and send back the response */
    561            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_AF), cmdId, 1, &retValue);
   \                     ??MT_AfDataRequestSrcRtg_9:
   \   00018F                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00018F   AC..         MOV     R4,?XSP + 0
   \   000191   AD..         MOV     R5,?XSP + 1
   \   000193   7B01         MOV     R3,#0x1
   \   000195   7403         MOV     A,#0x3
   \   000197   12....       LCALL   ?XSTACK_DISP0_8
   \   00019A   E0           MOVX    A,@DPTR
   \   00019B   FA           MOV     R2,A
   \   00019C   7964         MOV     R1,#0x64
   \   00019E   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    562          }
   \   0001A1   7412         MOV     A,#0x12
   \   0001A3   02....       LJMP    ?Subroutine1 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine52:
   \   000000   FC           MOV     R4,A
   \   000001                REQUIRE ??Subroutine70_0
   \   000001                ; // Fall through to label ??Subroutine70_0
    563          #endif
    564          
    565          #if defined INTER_PAN
    566          /***************************************************************************************************
    567           * @fn      MT_AfInterPanCtl
    568           *
    569           * @brief   Process the AF Inter Pan control command.
    570           *
    571           * @param   pBuf - pointer to the received buffer
    572           *
    573           * @return  none
    574           ***************************************************************************************************/
    575          static void MT_AfInterPanCtl(uint8 *pBuf)
    576          {
    577            uint8 cmd, rtrn;
    578            uint16 panId;
    579            endPointDesc_t *pEP;
    580          
    581            cmd = pBuf[MT_RPC_POS_CMD1];
    582            pBuf += MT_RPC_FRAME_HDR_SZ;
    583          
    584            switch (*pBuf++)  // Inter-pan request parameter.
    585            {
    586            case InterPanClr:
    587              rtrn = StubAPS_SetIntraPanChannel();           // Switch channel back to the NIB channel.
    588              break;
    589          
    590            case InterPanSet:
    591              rtrn = StubAPS_SetInterPanChannel(*pBuf);      // Set channel for inter-pan communication.
    592              break;
    593          
    594            case InterPanReg:
    595              if ((pEP = afFindEndPointDesc(*pBuf)))
    596              {
    597                StubAPS_RegisterApp(pEP);
    598                rtrn = SUCCESS;
    599              }
    600              else
    601              {
    602                rtrn = FAILURE;
    603              }
    604              break;
    605          
    606            case InterPanChk:
    607              panId = BUILD_UINT16(pBuf[0], pBuf[1]);
    608              rtrn = (StubAPS_InterPan(panId, pBuf[2])) ? ZSuccess : ZFailure;
    609              break;
    610          
    611            default:
    612              rtrn = afStatus_INVALID_PARAMETER;
    613              break;
    614            }
    615          
    616            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_AF), cmd, 1, &rtrn);
    617          }
    618          #endif
    619          
    620          /***************************************************************************************************
    621           * @fn      MT_AfDataConfirm
    622           *
    623           * @brief   Process
    624           *
    625           * @param   pBuf - pointer to the received buffer
    626           *
    627           * @return  none
    628           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    629          void MT_AfDataConfirm(afDataConfirm_t *pMsg)
   \                     MT_AfDataConfirm:
    630          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 3
   \   000004   74FD         MOV     A,#-0x3
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
    631            uint8 retArray[3];
    632          
    633            retArray[0] = pMsg->hdr.status;
   \   000009   12....       LCALL   ?Subroutine14 & 0xFFFF
    634            retArray[1] = pMsg->endpoint;
   \                     ??CrossCallReturnLabel_23:
   \   00000C   C0E0         PUSH    A
   \   00000E   7401         MOV     A,#0x1
   \   000010   12....       LCALL   ?XSTACK_DISP0_8
   \   000013   D0E0         POP     A
   \   000015   12....       LCALL   ?Subroutine45 & 0xFFFF
    635            retArray[2] = pMsg->transID;
   \                     ??CrossCallReturnLabel_84:
   \   000018   C0E0         PUSH    A
   \   00001A   7402         MOV     A,#0x2
   \   00001C   12....       LCALL   ?XSTACK_DISP0_8
   \   00001F   D0E0         POP     A
   \   000021   12....       LCALL   ?Subroutine44 & 0xFFFF
    636          
    637            /* Build and send back the response */
    638            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_AF), MT_AF_DATA_CONFIRM, 3, retArray);
   \                     ??CrossCallReturnLabel_81:
   \   000024   7B03         MOV     R3,#0x3
   \   000026   7A80         MOV     R2,#-0x80
   \   000028   7944         MOV     R1,#0x44
   \   00002A   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    639          }
   \   00002D   7403         MOV     A,#0x3
   \   00002F                REQUIRE ?Subroutine2
   \   00002F                ; // Fall through to label ?Subroutine2

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   D083         POP     DPH
   \   000005   D082         POP     DPL
   \   000007   02....       LJMP    ?BRET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine45:
   \   000000   12....       LCALL   ?Subroutine59 & 0xFFFF
   \                     ??CrossCallReturnLabel_109:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine59:
   \   000000   12....       LCALL   ?Subroutine64 & 0xFFFF
   \                     ??CrossCallReturnLabel_128:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004   12....       LCALL   ?Subroutine56 & 0xFFFF
   \                     ??CrossCallReturnLabel_102:
   \   000007   8A82         MOV     DPL,R2
   \   000009   8B83         MOV     DPH,R3
   \   00000B   A3           INC     DPTR
   \   00000C   A3           INC     DPTR
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine56:
   \   000000   A3           INC     DPTR
   \   000001   E0           MOVX    A,@DPTR
   \   000002   85..82       MOV     DPL,?XSP + 0
   \   000005   85..83       MOV     DPH,?XSP + 1
   \   000008   F0           MOVX    @DPTR,A
   \   000009   22           RET
    640          
    641          /***************************************************************************************************
    642           * @fn      MT_AfReflectError
    643           *
    644           * @brief   Process
    645           *
    646           * @param   pBuf - pointer to the received buffer
    647           *
    648           * @return  none
    649           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    650          void MT_AfReflectError(afReflectError_t *pMsg)
   \                     MT_AfReflectError:
    651          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 6
   \   000004   74FA         MOV     A,#-0x6
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
    652            uint8 retArray[6];
    653          
    654            retArray[0] = pMsg->hdr.status;
   \   000009   12....       LCALL   ?Subroutine14 & 0xFFFF
    655            retArray[1] = pMsg->endpoint;
   \                     ??CrossCallReturnLabel_24:
   \   00000C   C0E0         PUSH    A
   \   00000E   7401         MOV     A,#0x1
   \   000010   12....       LCALL   ?XSTACK_DISP0_8
   \   000013   D0E0         POP     A
   \   000015   12....       LCALL   ?Subroutine45 & 0xFFFF
    656            retArray[2] = pMsg->transID;
   \                     ??CrossCallReturnLabel_85:
   \   000018   C0E0         PUSH    A
   \   00001A   7402         MOV     A,#0x2
   \   00001C   12....       LCALL   ?XSTACK_DISP0_8
   \   00001F   D0E0         POP     A
   \   000021   12....       LCALL   ?Subroutine59 & 0xFFFF
    657            retArray[3] = pMsg->dstAddrMode;
   \                     ??CrossCallReturnLabel_108:
   \   000024   A3           INC     DPTR
   \   000025   E0           MOVX    A,@DPTR
   \   000026   C0E0         PUSH    A
   \   000028   7403         MOV     A,#0x3
   \   00002A   12....       LCALL   ?XSTACK_DISP0_8
   \   00002D   D0E0         POP     A
   \   00002F   F0           MOVX    @DPTR,A
    658            retArray[4] = LO_UINT16( pMsg->dstAddr );
   \   000030   EA           MOV     A,R2
   \   000031   2405         ADD     A,#0x5
   \   000033   F8           MOV     R0,A
   \   000034   E4           CLR     A
   \   000035   3B           ADDC    A,R3
   \   000036   F9           MOV     R1,A
   \   000037   8882         MOV     DPL,R0
   \   000039   8983         MOV     DPH,R1
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   C0E0         PUSH    A
   \   00003E   7404         MOV     A,#0x4
   \   000040   12....       LCALL   ?XSTACK_DISP0_8
   \   000043   D0E0         POP     A
   \   000045   12....       LCALL   ?Subroutine36 & 0xFFFF
    659            retArray[5] = HI_UINT16( pMsg->dstAddr );
   \                     ??CrossCallReturnLabel_60:
   \   000048   C0E0         PUSH    A
   \   00004A   7405         MOV     A,#0x5
   \   00004C   12....       LCALL   ?XSTACK_DISP0_8
   \   00004F   D0E0         POP     A
   \   000051   12....       LCALL   ?Subroutine44 & 0xFFFF
    660          
    661            /* Build and send back the response */
    662            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_AF), MT_AF_REFLECT_ERROR, 6, retArray);
   \                     ??CrossCallReturnLabel_82:
   \   000054   7B06         MOV     R3,#0x6
   \   000056   7A83         MOV     R2,#-0x7d
   \   000058   7944         MOV     R1,#0x44
   \   00005A   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    663          }
   \   00005D   7406         MOV     A,#0x6
   \   00005F   80..         SJMP    ?Subroutine2

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8882         MOV     DPL,R0
   \   000003   8983         MOV     DPH,R1
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   22           RET
    664          
    665          /***************************************************************************************************
    666           * @fn          MT_AfIncomingMsg
    667           *
    668           * @brief       Process the callback subscription for AF Incoming data.
    669           *
    670           * @param       pkt - Incoming AF data.
    671           *
    672           * @return      none
    673           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    674          void MT_AfIncomingMsg(afIncomingMSGPacket_t *pMsg)
   \                     MT_AfIncomingMsg:
    675          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 7
   \   000005   74F9         MOV     A,#-0x7
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   EA           MOV     A,R2
   \   000011   F0           MOVX    @DPTR,A
   \   000012   A3           INC     DPTR
   \   000013   EB           MOV     A,R3
   \   000014   12....       LCALL   ?Subroutine23 & 0xFFFF
    676            #define MT_AF_INC_MSG_LEN  20
    677            #define MT_AF_INC_MSG_EXT  10
    678          
    679            uint16 dataLen = pMsg->cmd.DataLength;  // Length of the data section in the response packet.
   \                     ??CrossCallReturnLabel_157:
   \   000017   2420         ADD     A,#0x20
   \   000019   12....       LCALL   ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_112:
   \   00001C   F5..         MOV     ?V4,A
   \   00001E   A3           INC     DPTR
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   F5..         MOV     ?V5,A
    680            uint16 respLen = MT_AF_INC_MSG_LEN + dataLen;
   \   000022   E5..         MOV     A,?V4
   \   000024   2414         ADD     A,#0x14
   \   000026   FE           MOV     R6,A
   \   000027   E4           CLR     A
   \   000028   35..         ADDC    A,?V5
   \   00002A   FF           MOV     R7,A
    681            uint8 cmd = MT_AF_INCOMING_MSG;
   \   00002B   7406         MOV     A,#0x6
   \   00002D   12....       LCALL   ?XSTACK_DISP0_8
   \   000030   7481         MOV     A,#-0x7f
   \   000032   F0           MOVX    @DPTR,A
    682            uint8 *pRsp, *pTmp;
    683            mtAfInMsgList_t *pItem = NULL;
   \   000033   7404         MOV     A,#0x4
   \   000035   12....       LCALL   ?XSTACK_DISP0_8
   \   000038   E4           CLR     A
   \   000039   F0           MOVX    @DPTR,A
   \   00003A   12....       LCALL   ?Subroutine43 & 0xFFFF
    684          
    685          #if defined INTER_PAN
    686            if (StubAPS_InterPan(pMsg->srcAddr.panId, pMsg->srcAddr.endPoint))
    687            {
    688              cmd = MT_AF_INCOMING_MSG_EXT;
    689            }
    690            else
    691          #endif
    692            if ((pMsg->srcAddr.addrMode == afAddr64Bit) ||
    693                (respLen > (uint16)(MT_RPC_DATA_MAX - MT_AF_INC_MSG_EXT)))
   \                     ??CrossCallReturnLabel_140:
   \   00003D   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   000040   6403         XRL     A,#0x3
   \   000042   6009         JZ      ??MT_AfIncomingMsg_0
   \   000044   C3           CLR     C
   \   000045   EE           MOV     A,R6
   \   000046   94F1         SUBB    A,#-0xf
   \   000048   EF           MOV     A,R7
   \   000049   9400         SUBB    A,#0x0
   \   00004B   400F         JC      ??MT_AfIncomingMsg_1
    694            {
    695              cmd = MT_AF_INCOMING_MSG_EXT;
   \                     ??MT_AfIncomingMsg_0:
   \   00004D   7406         MOV     A,#0x6
   \   00004F   12....       LCALL   ?XSTACK_DISP0_8
   \   000052   7482         MOV     A,#-0x7e
   \   000054   F0           MOVX    @DPTR,A
    696            }
    697          
    698            if (cmd == MT_AF_INCOMING_MSG_EXT)
    699            {
    700              respLen += MT_AF_INC_MSG_EXT;
   \   000055   EE           MOV     A,R6
   \   000056   240A         ADD     A,#0xa
   \   000058   FE           MOV     R6,A
   \   000059   E4           CLR     A
   \   00005A   3F           ADDC    A,R7
   \   00005B   FF           MOV     R7,A
    701            }
    702          
    703            if (respLen > (uint16)MT_RPC_DATA_MAX)
   \                     ??MT_AfIncomingMsg_1:
   \   00005C   C3           CLR     C
   \   00005D   EE           MOV     A,R6
   \   00005E   94FB         SUBB    A,#-0x5
   \   000060   EF           MOV     A,R7
   \   000061   9400         SUBB    A,#0x0
   \   000063   4043         JC      ??MT_AfIncomingMsg_2
    704            {
    705              if ((pItem = (mtAfInMsgList_t *)osal_mem_alloc(sizeof(mtAfInMsgList_t) + dataLen)) == NULL)
   \   000065                ; Setup parameters for call to function osal_mem_alloc
   \   000065   E5..         MOV     A,?V4
   \   000067   2409         ADD     A,#0x9
   \   000069   FA           MOV     R2,A
   \   00006A   E4           CLR     A
   \   00006B   35..         ADDC    A,?V5
   \   00006D   FB           MOV     R3,A
   \   00006E   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000071   7404         MOV     A,#0x4
   \   000073   12....       LCALL   ?XSTACK_DISP0_8
   \   000076   12....       LCALL   ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_88:
   \   000079   7404         MOV     A,#0x4
   \   00007B   12....       LCALL   ?XSTACK_DISP0_8
   \   00007E   12....       LCALL   ??Subroutine80_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_190:
   \   000081   7003         JNZ     $+5
   \   000083   02....       LJMP    ??MT_AfIncomingMsg_3 & 0xFFFF
    706              {
    707                return;  // If cannot hold a huge message, cannot give indication at all.
    708              }
    709          
    710              pItem->data = (uint8 *)(pItem+1);
   \   000086   7404         MOV     A,#0x4
   \   000088   12....       LCALL   ?XSTACK_DISP0_8
   \   00008B   E0           MOVX    A,@DPTR
   \   00008C   2409         ADD     A,#0x9
   \   00008E   F8           MOV     R0,A
   \   00008F   A3           INC     DPTR
   \   000090   E0           MOVX    A,@DPTR
   \   000091   3400         ADDC    A,#0x0
   \   000093   F9           MOV     R1,A
   \   000094   7404         MOV     A,#0x4
   \   000096   12....       LCALL   ?XSTACK_DISP0_8
   \   000099   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_45:
   \   00009C   12....       LCALL   ?Subroutine41 & 0xFFFF
    711              respLen -= dataLen;  // Zero data bytes are sent with an over-sized incoming indication.
   \                     ??CrossCallReturnLabel_74:
   \   00009F   C3           CLR     C
   \   0000A0   EE           MOV     A,R6
   \   0000A1   95..         SUBB    A,?V4
   \   0000A3   FE           MOV     R6,A
   \   0000A4   EF           MOV     A,R7
   \   0000A5   95..         SUBB    A,?V5
   \   0000A7   FF           MOV     R7,A
    712            }
    713          
    714            // Attempt to allocate memory for the response packet.
    715            if ((pRsp = osal_mem_alloc(respLen)) == NULL)
   \                     ??MT_AfIncomingMsg_2:
   \   0000A8                ; Setup parameters for call to function osal_mem_alloc
   \   0000A8   EE           MOV     A,R6
   \   0000A9   FA           MOV     R2,A
   \   0000AA   EF           MOV     A,R7
   \   0000AB   FB           MOV     R3,A
   \   0000AC   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   0000AF   7402         MOV     A,#0x2
   \   0000B1   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B4   12....       LCALL   ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_89:
   \   0000B7   7402         MOV     A,#0x2
   \   0000B9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000BC   12....       LCALL   ??Subroutine80_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_191:
   \   0000BF   7018         JNZ     ??MT_AfIncomingMsg_4
    716            {
    717              if (pItem != NULL)
   \   0000C1   7404         MOV     A,#0x4
   \   0000C3   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C6   12....       LCALL   ??Subroutine80_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_192:
   \   0000C9   600B         JZ      ??MT_AfIncomingMsg_5
    718              {
    719                (void)osal_mem_free(pItem);
   \   0000CB                ; Setup parameters for call to function osal_mem_free
   \   0000CB   7404         MOV     A,#0x4
   \   0000CD   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D0   12....       LCALL   ??Subroutine77_0 & 0xFFFF
    720              }
   \                     ??CrossCallReturnLabel_171:
   \   0000D3   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    721              return;
   \                     ??MT_AfIncomingMsg_5:
   \   0000D6   02....       LJMP    ??MT_AfIncomingMsg_3 & 0xFFFF
    722            }
    723            pTmp = pRsp;
    724          
    725            /* Group ID */
    726            *pTmp++ = LO_UINT16(pMsg->groupId);
   \                     ??MT_AfIncomingMsg_4:
   \   0000D9   85..82       MOV     DPL,?XSP + 0
   \   0000DC   85..83       MOV     DPH,?XSP + 1
   \   0000DF   E0           MOVX    A,@DPTR
   \   0000E0   2402         ADD     A,#0x2
   \   0000E2   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   0000E5   C0E0         PUSH    A
   \   0000E7   7402         MOV     A,#0x2
   \   0000E9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000EC   12....       LCALL   ?Subroutine62 & 0xFFFF
   \                     ??CrossCallReturnLabel_118:
   \   0000EF   D0E0         POP     A
   \   0000F1   12....       LCALL   ?Subroutine36 & 0xFFFF
    727            *pTmp++ = HI_UINT16(pMsg->groupId);
   \                     ??CrossCallReturnLabel_61:
   \   0000F4   C0E0         PUSH    A
   \   0000F6   7402         MOV     A,#0x2
   \   0000F8   12....       LCALL   ?XSTACK_DISP0_8
   \   0000FB   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_148:
   \   0000FE   D0E0         POP     A
   \   000100   12....       LCALL   ?Subroutine40 & 0xFFFF
    728          
    729            /* Cluster ID */
    730            *pTmp++ = LO_UINT16(pMsg->clusterId);
   \                     ??CrossCallReturnLabel_68:
   \   000103   2404         ADD     A,#0x4
   \   000105   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   000108   C0E0         PUSH    A
   \   00010A   7402         MOV     A,#0x2
   \   00010C   12....       LCALL   ?XSTACK_DISP0_8
   \   00010F   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_46:
   \   000112   D0E0         POP     A
   \   000114   12....       LCALL   ?Subroutine36 & 0xFFFF
    731            *pTmp++ = HI_UINT16(pMsg->clusterId);
   \                     ??CrossCallReturnLabel_62:
   \   000117   C0E0         PUSH    A
   \   000119   7402         MOV     A,#0x2
   \   00011B   12....       LCALL   ?XSTACK_DISP0_8
   \   00011E   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   000121   D0E0         POP     A
   \   000123   F0           MOVX    @DPTR,A
    732          
    733            if (cmd == MT_AF_INCOMING_MSG_EXT)
   \   000124   7406         MOV     A,#0x6
   \   000126   12....       LCALL   ?XSTACK_DISP0_8
   \   000129   E0           MOVX    A,@DPTR
   \   00012A   6482         XRL     A,#0x82
   \   00012C   85..82       MOV     DPL,?XSP + 0
   \   00012F   85..83       MOV     DPH,?XSP + 1
   \   000132   7076         JNZ     ??MT_AfIncomingMsg_6
    734            {
    735              *pTmp++ = pMsg->srcAddr.addrMode;
   \   000134   E0           MOVX    A,@DPTR
   \   000135   240E         ADD     A,#0xe
   \   000137   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   00013A   C0E0         PUSH    A
   \   00013C   7402         MOV     A,#0x2
   \   00013E   12....       LCALL   ?XSTACK_DISP0_8
   \   000141   12....       LCALL   ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_41:
   \   000144   D0E0         POP     A
   \   000146   F0           MOVX    @DPTR,A
   \   000147   7402         MOV     A,#0x2
   \   000149   12....       LCALL   ?XSTACK_DISP0_8
   \   00014C   E0           MOVX    A,@DPTR
   \   00014D   2405         ADD     A,#0x5
   \   00014F   F5..         MOV     ?V6,A
   \   000151   A3           INC     DPTR
   \   000152   E0           MOVX    A,@DPTR
   \   000153   3400         ADDC    A,#0x0
   \   000155   F5..         MOV     ?V7,A
    736          
    737              if (pMsg->srcAddr.addrMode == afAddr64Bit)
   \   000157   8882         MOV     DPL,R0
   \   000159   8983         MOV     DPH,R1
   \   00015B   E0           MOVX    A,@DPTR
   \   00015C   6403         XRL     A,#0x3
   \   00015E   85..82       MOV     DPL,?XSP + 0
   \   000161   85..83       MOV     DPH,?XSP + 1
   \   000164   7025         JNZ     ??MT_AfIncomingMsg_7
    738              {
    739                (void)osal_memcpy(pTmp, pMsg->srcAddr.addr.extAddr, Z_EXTADDR_LEN);
   \   000166                ; Setup parameters for call to function osal_memcpy
   \   000166   E0           MOVX    A,@DPTR
   \   000167   2406         ADD     A,#0x6
   \   000169   F5..         MOV     ?V0,A
   \   00016B   A3           INC     DPTR
   \   00016C   E0           MOVX    A,@DPTR
   \   00016D   3400         ADDC    A,#0x0
   \   00016F   F5..         MOV     ?V1,A
   \   000171   75..00       MOV     ?V2,#0x0
   \   000174   78..         MOV     R0,#?V0
   \   000176   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000179   7C08         MOV     R4,#0x8
   \   00017B   7D00         MOV     R5,#0x0
   \   00017D   AA..         MOV     R2,?V6
   \   00017F   AB..         MOV     R3,?V7
   \   000181   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000184   7403         MOV     A,#0x3
   \   000186   12....       LCALL   ?DEALLOC_XSTACK8
   \   000189   8006         SJMP    ??CrossCallReturnLabel_2
    740              }
    741              else
    742              {
    743                pTmp[0] = LO_UINT16(pMsg->srcAddr.addr.shortAddr);
   \                     ??MT_AfIncomingMsg_7:
   \   00018B   E0           MOVX    A,@DPTR
   \   00018C   2406         ADD     A,#0x6
   \   00018E   12....       LCALL   ?Subroutine5 & 0xFFFF
    744                pTmp[1] = HI_UINT16(pMsg->srcAddr.addr.shortAddr);
    745              }
    746              pTmp += Z_EXTADDR_LEN;
    747          
    748              *pTmp++ = pMsg->srcAddr.endPoint;
   \                     ??CrossCallReturnLabel_2:
   \   000191   12....       LCALL   ??Subroutine75_0 & 0xFFFF
    749          #if defined INTER_PAN
    750              *pTmp++ = LO_UINT16(pMsg->srcAddr.panId);
    751              *pTmp++ = HI_UINT16(pMsg->srcAddr.panId);
    752          #else
    753              *pTmp++ = 0;
    754              *pTmp++ = 0;
    755          #endif
    756            }
   \                     ??CrossCallReturnLabel_164:
   \   000194   240F         ADD     A,#0xf
   \   000196   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   000199   E4           CLR     A
   \   00019A   12....       LCALL   ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   00019D   F0           MOVX    @DPTR,A
   \   00019E   E5..         MOV     A,?V6
   \   0001A0   240B         ADD     A,#0xb
   \   0001A2   F5..         MOV     ?V6,A
   \   0001A4   5054         JNC     ??MT_AfIncomingMsg_8
   \   0001A6   05..         INC     ?V7
   \                     ??MT_AfIncomingMsg_9:
   \   0001A8   8050         SJMP    ??MT_AfIncomingMsg_8
    757            else
    758            {
    759              /* Source Address */
    760              *pTmp++ = LO_UINT16(pMsg->srcAddr.addr.shortAddr);
   \                     ??MT_AfIncomingMsg_6:
   \   0001AA   E0           MOVX    A,@DPTR
   \   0001AB   2406         ADD     A,#0x6
   \   0001AD   12....       LCALL   ?Subroutine9 & 0xFFFF
    761              *pTmp++ = HI_UINT16(pMsg->srcAddr.addr.shortAddr);
    762          
    763              /* Source EP */
    764              *pTmp++ = pMsg->srcAddr.endPoint;
    765            }
   \                     ??CrossCallReturnLabel_16:
   \   0001B0   C0E0         PUSH    A
   \   0001B2   7402         MOV     A,#0x2
   \   0001B4   12....       LCALL   ?XSTACK_DISP0_8
   \   0001B7   12....       LCALL   ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   0001BA   D0E0         POP     A
   \   0001BC   12....       LCALL   ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_63:
   \   0001BF   C0E0         PUSH    A
   \   0001C1   7402         MOV     A,#0x2
   \   0001C3   12....       LCALL   ?XSTACK_DISP0_8
   \   0001C6   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   0001C9   A3           INC     DPTR
   \   0001CA   A3           INC     DPTR
   \   0001CB   D0E0         POP     A
   \   0001CD   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_158:
   \   0001D0   240F         ADD     A,#0xf
   \   0001D2   12....       LCALL   ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_113:
   \   0001D5   C0E0         PUSH    A
   \   0001D7   7402         MOV     A,#0x2
   \   0001D9   12....       LCALL   ?XSTACK_DISP0_8
   \   0001DC   12....       LCALL   ??Subroutine76_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_162:
   \   0001DF   2406         ADD     A,#0x6
   \   0001E1   F582         MOV     DPL,A
   \   0001E3   E4           CLR     A
   \   0001E4   38           ADDC    A,R0
   \   0001E5   F583         MOV     DPH,A
   \   0001E7   D0E0         POP     A
   \   0001E9   F0           MOVX    @DPTR,A
   \   0001EA   7402         MOV     A,#0x2
   \   0001EC   12....       LCALL   ?XSTACK_DISP0_8
   \   0001EF   E0           MOVX    A,@DPTR
   \   0001F0   2407         ADD     A,#0x7
   \   0001F2   F5..         MOV     ?V6,A
   \   0001F4   A3           INC     DPTR
   \   0001F5   E0           MOVX    A,@DPTR
   \   0001F6   3400         ADDC    A,#0x0
   \   0001F8   F5..         MOV     ?V7,A
    766          
    767            /* Destination EP */
    768            *pTmp++ = pMsg->endPoint;
   \                     ??MT_AfIncomingMsg_8:
   \   0001FA   85..82       MOV     DPL,?XSP + 0
   \   0001FD   85..83       MOV     DPH,?XSP + 1
   \   000200   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   000203   E0           MOVX    A,@DPTR
   \   000204   85..82       MOV     DPL,?V6
   \   000207   85..83       MOV     DPH,?V7
   \   00020A   12....       LCALL   ??Subroutine71_0 & 0xFFFF
    769          
    770            /* WasBroadCast */
    771            *pTmp++ = pMsg->wasBroadcast;
   \                     ??CrossCallReturnLabel_142:
   \   00020D   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   000210   85..82       MOV     DPL,?V6
   \   000213   85..83       MOV     DPH,?V7
   \   000216   12....       LCALL   ?Subroutine43 & 0xFFFF
    772          
    773            /* LinkQuality */
    774            *pTmp++ = pMsg->LinkQuality;
   \                     ??CrossCallReturnLabel_141:
   \   000219   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_40:
   \   00021C   12....       LCALL   ??Subroutine74_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_150:
   \   00021F   12....       LCALL   ?Subroutine23 & 0xFFFF
    775          
    776            /* SecurityUse */
    777            *pTmp++ = pMsg->SecurityUse;
   \                     ??CrossCallReturnLabel_159:
   \   000222   2419         ADD     A,#0x19
   \   000224   12....       LCALL   ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_151:
   \   000227   A3           INC     DPTR
   \   000228   12....       LCALL   ?Subroutine40 & 0xFFFF
    778          
    779            /* Timestamp */
    780            *pTmp++ = BREAK_UINT32(pMsg->timestamp, 0);
   \                     ??CrossCallReturnLabel_69:
   \   00022B   241A         ADD     A,#0x1a
   \   00022D   FA           MOV     R2,A
   \   00022E   A3           INC     DPTR
   \   00022F   E0           MOVX    A,@DPTR
   \   000230   3400         ADDC    A,#0x0
   \   000232   FB           MOV     R3,A
   \   000233   8A82         MOV     DPL,R2
   \   000235   8B83         MOV     DPH,R3
   \   000237   78..         MOV     R0,#?V0
   \   000239   12....       LCALL   ?L_MOV_X
   \   00023C   85..82       MOV     DPL,?V6
   \   00023F   85..83       MOV     DPH,?V7
   \   000242   12....       LCALL   ?Subroutine42 & 0xFFFF
    781            *pTmp++ = BREAK_UINT32(pMsg->timestamp, 1);
   \                     ??CrossCallReturnLabel_143:
   \   000245   12....       LCALL   ?L_MOV_X
   \   000248   E5..         MOV     A,?V1
   \   00024A   85..82       MOV     DPL,?V6
   \   00024D   85..83       MOV     DPH,?V7
   \   000250   A3           INC     DPTR
   \   000251   A3           INC     DPTR
   \   000252   A3           INC     DPTR
   \   000253   A3           INC     DPTR
   \   000254   A3           INC     DPTR
   \   000255   12....       LCALL   ??Subroutine72_0 & 0xFFFF
    782            *pTmp++ = BREAK_UINT32(pMsg->timestamp, 2);
   \                     ??CrossCallReturnLabel_145:
   \   000258   12....       LCALL   ?L_MOV_X
   \   00025B   7410         MOV     A,#0x10
   \   00025D   78..         MOV     R0,#?V0
   \   00025F   12....       LCALL   ?UL_SHR
   \   000262   85..82       MOV     DPL,?V6
   \   000265   85..83       MOV     DPH,?V7
   \   000268   A3           INC     DPTR
   \   000269   A3           INC     DPTR
   \   00026A   12....       LCALL   ?Subroutine42 & 0xFFFF
    783            *pTmp++ = BREAK_UINT32(pMsg->timestamp, 3);
   \                     ??CrossCallReturnLabel_144:
   \   00026D   12....       LCALL   ?L_MOV_X
   \   000270   7418         MOV     A,#0x18
   \   000272   78..         MOV     R0,#?V0
   \   000274   12....       LCALL   ?UL_SHR
   \   000277   85..82       MOV     DPL,?V6
   \   00027A   85..83       MOV     DPH,?V7
   \   00027D   A3           INC     DPTR
   \   00027E   A3           INC     DPTR
   \   00027F   A3           INC     DPTR
   \   000280   A3           INC     DPTR
   \   000281   A3           INC     DPTR
   \   000282   A3           INC     DPTR
   \   000283   A3           INC     DPTR
   \   000284   E5..         MOV     A,?V0
   \   000286   F0           MOVX    @DPTR,A
    784          
    785          
    786            /* Data Length */
    787            if (cmd == MT_AF_INCOMING_MSG_EXT)
   \   000287   7406         MOV     A,#0x6
   \   000289   12....       LCALL   ?XSTACK_DISP0_8
   \   00028C   E0           MOVX    A,@DPTR
   \   00028D   6482         XRL     A,#0x82
   \   00028F   7020         JNZ     ??MT_AfIncomingMsg_10
    788            {
    789              /* Z-Tool apparently takes the last Byte before the data buffer as the dynamic length and
    790               * ignores the bigger UInt16 length of an EXT incoming message. But no data bytes will be sent
    791               * with a huge message, so it's necessary to work-around and fake-out Z-Tool with a zero here.
    792               */
    793              *pTmp++ = 0;  // TODO - workaround Z-Tool shortcoming; should be: = pMsg->cmd.TransSeqNumber;
   \   000291   85..82       MOV     DPL,?V6
   \   000294   85..83       MOV     DPH,?V7
   \   000297   A3           INC     DPTR
   \   000298   A3           INC     DPTR
   \   000299   A3           INC     DPTR
   \   00029A   A3           INC     DPTR
   \   00029B   A3           INC     DPTR
   \   00029C   A3           INC     DPTR
   \   00029D   A3           INC     DPTR
   \   00029E   A3           INC     DPTR
   \   00029F   E4           CLR     A
   \   0002A0   12....       LCALL   ?Subroutine57 & 0xFFFF
    794              *pTmp++ = LO_UINT16(dataLen);
    795              *pTmp++ = HI_UINT16(dataLen);
    796            }
   \                     ??CrossCallReturnLabel_103:
   \   0002A3   E5..         MOV     A,?V4
   \   0002A5   12....       LCALL   ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_59:
   \   0002A8   E5..         MOV     A,?V5
   \   0002AA   F0           MOVX    @DPTR,A
   \   0002AB   E5..         MOV     A,?V6
   \   0002AD   240B         ADD     A,#0xb
   \   0002AF   800F         SJMP    ??MT_AfIncomingMsg_11
    797            else
    798            {
    799              *pTmp++ = pMsg->cmd.TransSeqNumber;
   \                     ??MT_AfIncomingMsg_10:
   \   0002B1   12....       LCALL   ??Subroutine75_0 & 0xFFFF
    800              *pTmp++ = dataLen;
    801            }
   \                     ??CrossCallReturnLabel_165:
   \   0002B4   241F         ADD     A,#0x1f
   \   0002B6   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   0002B9   E5..         MOV     A,?V4
   \   0002BB   F0           MOVX    @DPTR,A
   \   0002BC   E5..         MOV     A,?V6
   \   0002BE   240A         ADD     A,#0xa
   \                     ??MT_AfIncomingMsg_11:
   \   0002C0   F5..         MOV     ?V6,A
   \   0002C2   5002         JNC     ??MT_AfIncomingMsg_12
   \   0002C4   05..         INC     ?V7
    802          
    803            /* Data */
    804            if (pItem != NULL)
   \                     ??MT_AfIncomingMsg_12:
   \   0002C6   7404         MOV     A,#0x4
   \   0002C8   12....       LCALL   ?XSTACK_DISP0_8
   \   0002CB   12....       LCALL   ??Subroutine80_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_193:
   \   0002CE   7003         JNZ     $+5
   \   0002D0   02....       LJMP    ??MT_AfIncomingMsg_13 & 0xFFFF
    805            {
    806              // Enqueue the new huge incoming item.
    807              pItem->next = pMtAfInMsgList;
   \   0002D3   90....       MOV     DPTR,#pMtAfInMsgList
   \   0002D6   12....       LCALL   ??Subroutine77_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_172:
   \   0002D9   7404         MOV     A,#0x4
   \   0002DB   12....       LCALL   ?XSTACK_DISP0_8
   \   0002DE   12....       LCALL   ??Subroutine79_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_181:
   \   0002E1   12....       LCALL   ?Subroutine46 & 0xFFFF
    808              pMtAfInMsgList = pItem;
   \                     ??CrossCallReturnLabel_90:
   \   0002E4   7404         MOV     A,#0x4
   \   0002E6   12....       LCALL   ?XSTACK_DISP0_8
   \   0002E9   12....       LCALL   ?Subroutine17 & 0xFFFF
    809          
    810              // Setup to time-out the huge incoming item if host does not MT_AF_DATA_RETRIEVE it.
    811              pItem->tick = MT_AF_EXEC_CNT;
   \                     ??CrossCallReturnLabel_30:
   \   0002EC   7404         MOV     A,#0x4
   \   0002EE   12....       LCALL   ?XSTACK_DISP0_8
   \   0002F1   12....       LCALL   ??Subroutine76_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_163:
   \   0002F4   2408         ADD     A,#0x8
   \   0002F6   F582         MOV     DPL,A
   \   0002F8   E4           CLR     A
   \   0002F9   38           ADDC    A,R0
   \   0002FA   F583         MOV     DPH,A
   \   0002FC   740F         MOV     A,#0xf
   \   0002FE   F0           MOVX    @DPTR,A
    812              if (ZSuccess != osal_start_timerEx(MT_TaskID, MT_AF_EXEC_EVT, MT_AF_EXEC_DLY))
   \   0002FF                ; Setup parameters for call to function osal_start_timerEx
   \   0002FF   90....       MOV     DPTR,#__Constant_3e8
   \   000302   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   000305   7A08         MOV     R2,#0x8
   \   000307   7B00         MOV     R3,#0x0
   \   000309   90....       MOV     DPTR,#MT_TaskID
   \   00030C   E0           MOVX    A,@DPTR
   \   00030D   F9           MOV     R1,A
   \   00030E   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000311   7404         MOV     A,#0x4
   \   000313   12....       LCALL   ?DEALLOC_XSTACK8
   \   000316   E9           MOV     A,R1
   \   000317   600C         JZ      ??MT_AfIncomingMsg_14
    813              {
    814                (void)osal_set_event(MT_TaskID, MT_AF_EXEC_EVT);
   \   000319                ; Setup parameters for call to function osal_set_event
   \   000319   7A08         MOV     R2,#0x8
   \   00031B   7B00         MOV     R3,#0x0
   \   00031D   90....       MOV     DPTR,#MT_TaskID
   \   000320   E0           MOVX    A,@DPTR
   \   000321   F9           MOV     R1,A
   \   000322   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
    815              }
    816          
    817              pItem->timestamp = pMsg->timestamp;
   \                     ??MT_AfIncomingMsg_14:
   \   000325   12....       LCALL   ??Subroutine75_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_166:
   \   000328   241A         ADD     A,#0x1a
   \   00032A   F582         MOV     DPL,A
   \   00032C   E4           CLR     A
   \   00032D   38           ADDC    A,R0
   \   00032E   F583         MOV     DPH,A
   \   000330   12....       LCALL   ?XLOAD_R0123
   \   000333   7404         MOV     A,#0x4
   \   000335   12....       LCALL   ?XSTACK_DISP0_8
   \   000338   E0           MOVX    A,@DPTR
   \   000339   FC           MOV     R4,A
   \   00033A   A3           INC     DPTR
   \   00033B   E0           MOVX    A,@DPTR
   \   00033C   F583         MOV     DPH,A
   \   00033E   8C82         MOV     DPL,R4
   \   000340   A3           INC     DPTR
   \   000341   A3           INC     DPTR
   \   000342   A3           INC     DPTR
   \   000343   A3           INC     DPTR
   \   000344   12....       LCALL   ?XSTORE_R0123
    818              (void)osal_memcpy(pItem->data, pMsg->cmd.Data, dataLen);
   \   000347                ; Setup parameters for call to function osal_memcpy
   \   000347   12....       LCALL   ?Subroutine8 & 0xFFFF
    819            }
   \                     ??CrossCallReturnLabel_11:
   \   00034A   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00034D   AC..         MOV     R4,?V4
   \   00034F   AD..         MOV     R5,?V5
   \   000351   7407         MOV     A,#0x7
   \   000353   12....       LCALL   ?XSTACK_DISP0_8
   \   000356   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   000359   FA           MOV     R2,A
   \   00035A   A3           INC     DPTR
   \   00035B   E0           MOVX    A,@DPTR
   \   00035C   FB           MOV     R3,A
   \   00035D   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000360   7403         MOV     A,#0x3
   \   000362   12....       LCALL   ?DEALLOC_XSTACK8
   \   000365   8022         SJMP    ??MT_AfIncomingMsg_15
    820            else
    821            {
    822              (void)osal_memcpy(pTmp, pMsg->cmd.Data, dataLen);
   \                     ??MT_AfIncomingMsg_13:
   \   000367                ; Setup parameters for call to function osal_memcpy
   \   000367   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   00036A   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00036D   AC..         MOV     R4,?V4
   \   00036F   AD..         MOV     R5,?V5
   \   000371   AA..         MOV     R2,?V6
   \   000373   AB..         MOV     R3,?V7
   \   000375   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000378   7403         MOV     A,#0x3
   \   00037A   12....       LCALL   ?DEALLOC_XSTACK8
    823              pTmp += dataLen;
   \   00037D   E5..         MOV     A,?V6
   \   00037F   25..         ADD     A,?V4
   \   000381   F5..         MOV     ?V6,A
   \   000383   E5..         MOV     A,?V7
   \   000385   35..         ADDC    A,?V5
   \   000387   F5..         MOV     ?V7,A
    824            }
    825          
    826            // MAC Source address
    827            *pTmp++ = LO_UINT16(pMsg->macSrcAddr);
   \                     ??MT_AfIncomingMsg_15:
   \   000389   85..82       MOV     DPL,?XSP + 0
   \   00038C   85..83       MOV     DPH,?XSP + 1
   \   00038F   E0           MOVX    A,@DPTR
   \   000390   2424         ADD     A,#0x24
   \   000392   12....       LCALL   ?Subroutine5 & 0xFFFF
    828            *pTmp++ = HI_UINT16(pMsg->macSrcAddr);
    829          
    830            // messages result radius
    831            *pTmp = pMsg->radius;
   \                     ??CrossCallReturnLabel_3:
   \   000395   12....       LCALL   ??Subroutine75_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_167:
   \   000398   2426         ADD     A,#0x26
   \   00039A   12....       LCALL   ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_152:
   \   00039D   F0           MOVX    @DPTR,A
    832          
    833            /* Build and send back the response */
    834            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ|(uint8)MT_RPC_SYS_AF), cmd, respLen, pRsp);
   \   00039E                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00039E   7402         MOV     A,#0x2
   \   0003A0   12....       LCALL   ?XSTACK_DISP0_8
   \   0003A3   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_53:
   \   0003A6   EE           MOV     A,R6
   \   0003A7   FB           MOV     R3,A
   \   0003A8   7406         MOV     A,#0x6
   \   0003AA   12....       LCALL   ?XSTACK_DISP0_8
   \   0003AD   E0           MOVX    A,@DPTR
   \   0003AE   FA           MOV     R2,A
   \   0003AF   7944         MOV     R1,#0x44
   \   0003B1   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    835          
    836            (void)osal_mem_free(pRsp);
   \   0003B4                ; Setup parameters for call to function osal_mem_free
   \   0003B4   7402         MOV     A,#0x2
   \   0003B6   12....       LCALL   ?XSTACK_DISP0_8
   \   0003B9   12....       LCALL   ??Subroutine77_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_173:
   \   0003BC   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    837          }
   \                     ??MT_AfIncomingMsg_3:
   \   0003BF   7407         MOV     A,#0x7
   \   0003C1   02....       LJMP    ?Subroutine1 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine43:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine71_0
   \   000001                ; // Fall through to label ??Subroutine71_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine71_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   85..82       MOV     DPL,?XSP + 0
   \   000004   85..83       MOV     DPH,?XSP + 1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine42:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   A3           INC     DPTR
   \   000004   E5..         MOV     A,?V0
   \   000006                REQUIRE ??Subroutine72_0
   \   000006                ; // Fall through to label ??Subroutine72_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine72_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   78..         MOV     R0,#?V0
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   12....       LCALL   ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_104:
   \   000003   A3           INC     DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   12....       LCALL   ?Subroutine51 & 0xFFFF
   \                     ??CrossCallReturnLabel_98:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine51:
   \   000000   12....       LCALL   ?Subroutine62 & 0xFFFF
   \                     ??CrossCallReturnLabel_119:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine62:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F583         MOV     DPH,A
   \   000006   8A82         MOV     DPL,R2
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002                REQUIRE ??Subroutine73_0
   \   000002                ; // Fall through to label ??Subroutine73_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine73_0:
   \   000000   12....       LCALL   ??Subroutine79_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_187:
   \   000003   A3           INC     DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   12....       LCALL   ?Subroutine51 & 0xFFFF
   \                     ??CrossCallReturnLabel_97:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   F582         MOV     DPL,A
   \   000002   E4           CLR     A
   \   000003   38           ADDC    A,R0
   \   000004   F583         MOV     DPH,A
   \   000006                REQUIRE ??Subroutine74_0
   \   000006                ; // Fall through to label ??Subroutine74_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine74_0:
   \   000000   12....       LCALL   ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_154:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine55:
   \   000000   12....       LCALL   ?Subroutine63 & 0xFFFF
   \                     ??CrossCallReturnLabel_156:
   \   000003   A3           INC     DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                REQUIRE ??Subroutine75_0
   \   000001                ; // Fall through to label ??Subroutine75_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine75_0:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine76_0
   \   000006                ; // Fall through to label ??Subroutine76_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   12....       LCALL   ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_100:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine54:
   \   000000   F8           MOV     R0,A
   \   000001   A3           INC     DPTR
   \   000002   E0           MOVX    A,@DPTR
   \   000003   3400         ADDC    A,#0x0
   \   000005   F9           MOV     R1,A
   \   000006   8882         MOV     DPL,R0
   \   000008   8983         MOV     DPH,R1
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006   12....       LCALL   ??Subroutine81_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_204:
   \   000009   2422         ADD     A,#0x22
   \   00000B   12....       LCALL   ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_115:
   \   00000E   F5..         MOV     ?V0,A
   \   000010   A3           INC     DPTR
   \   000011   E0           MOVX    A,@DPTR
   \   000012   F5..         MOV     ?V1,A
   \   000014   78..         MOV     R0,#?V0
   \   000016   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   12....       LCALL   ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_99:
   \   000003   85..82       MOV     DPL,?V6
   \   000006   85..83       MOV     DPH,?V7
   \   000009   F0           MOVX    @DPTR,A
   \   00000A   8882         MOV     DPL,R0
   \   00000C   8983         MOV     DPH,R1
   \   00000E   A3           INC     DPTR
   \   00000F   12....       LCALL   ?Subroutine63 & 0xFFFF
   \                     ??CrossCallReturnLabel_155:
   \   000012   F0           MOVX    @DPTR,A
   \   000013   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine63:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   85..82       MOV     DPL,?V6
   \   000004   85..83       MOV     DPH,?V7
   \   000007   A3           INC     DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   F582         MOV     DPL,A
   \   000002   E4           CLR     A
   \   000003   38           ADDC    A,R0
   \   000004   F583         MOV     DPH,A
   \   000006   12....       LCALL   ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_153:
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   A3           INC     DPTR
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   12....       LCALL   ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_105:
   \   000012   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine57:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   85..82       MOV     DPL,?V6
   \   000004   85..83       MOV     DPH,?V7
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   A3           INC     DPTR
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   85..82       MOV     DPL,?XSP + 0
   \   000004   85..83       MOV     DPH,?XSP + 1
   \   000007   E0           MOVX    A,@DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   12....       LCALL   ?Subroutine49 & 0xFFFF
   \                     ??CrossCallReturnLabel_96:
   \   000003   A3           INC     DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   12....       LCALL   ?Subroutine49 & 0xFFFF
   \                     ??CrossCallReturnLabel_95:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine49:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F583         MOV     DPH,A
   \   000006   8882         MOV     DPL,R0
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   12....       LCALL   ??Subroutine81_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_206:
   \   000003   2415         ADD     A,#0x15
   \   000005   12....       LCALL   ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_117:
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   12....       LCALL   ??Subroutine81_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_205:
   \   000003   240E         ADD     A,#0xe
   \   000005   12....       LCALL   ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_116:
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine61:
   \   000000   F582         MOV     DPL,A
   \   000002   E4           CLR     A
   \   000003   38           ADDC    A,R0
   \   000004   F583         MOV     DPH,A
   \   000006   E0           MOVX    A,@DPTR
   \   000007   22           RET
    838          
    839          /**************************************************************************************************
    840           * @fn          MT_AfDataRetrieve
    841           *
    842           * @brief   Process AF Data Retrieve command to incrementally read out a very large
    843           *          incoming AF message.
    844           *
    845           * input parameters
    846           *
    847           * @param pBuf - pointer to the received buffer
    848           *
    849           * output parameters
    850           *
    851           * @param rtrn - AF-Status of the operation.
    852           *
    853           * @return      None.
    854           **************************************************************************************************
    855           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    856          void MT_AfDataRetrieve(uint8 *pBuf)
   \                     MT_AfDataRetrieve:
    857          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV     A,#-0x5
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   7401         MOV     A,#0x1
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   12....       LCALL   ?Subroutine46 & 0xFFFF
    858            #define MT_AF_RTV_HDR_SZ  2
    859          
    860            uint32 timestamp;
    861            mtAfInMsgList_t *pPrev, *pItem = pMtAfInMsgList;
   \                     ??CrossCallReturnLabel_91:
   \   000012   12....       LCALL   ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_179:
   \   000015   7403         MOV     A,#0x3
   \   000017   12....       LCALL   ?XSTACK_DISP0_8
   \   00001A   12....       LCALL   ?Subroutine41 & 0xFFFF
    862            uint8 rtrn = afStatus_FAILED;
   \                     ??CrossCallReturnLabel_75:
   \   00001D   7A01         MOV     R2,#0x1
    863            uint8 len = 0;
   \   00001F   85..82       MOV     DPL,?XSP + 0
   \   000022   85..83       MOV     DPH,?XSP + 1
   \   000025   E4           CLR     A
   \   000026   F0           MOVX    @DPTR,A
    864          
    865            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   000027   04           INC     A
   \   000028   12....       LCALL   ?XSTACK_DISP0_8
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   2403         ADD     A,#0x3
   \   00002E   F8           MOV     R0,A
   \   00002F   A3           INC     DPTR
   \   000030   E0           MOVX    A,@DPTR
   \   000031   3400         ADDC    A,#0x0
   \   000033   F9           MOV     R1,A
   \   000034   EA           MOV     A,R2
   \   000035   12....       LCALL   ?XSTACK_DISP0_8
   \   000038   12....       LCALL   ?Subroutine41 & 0xFFFF
    866            timestamp = BUILD_UINT32(pBuf[0], pBuf[1], pBuf[2], pBuf[3]);
   \                     ??CrossCallReturnLabel_76:
   \   00003B   EA           MOV     A,R2
   \   00003C   12....       LCALL   ?XSTACK_DISP0_8
   \   00003F   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   000042   F5..         MOV     ?V0,A
   \   000044   E4           CLR     A
   \   000045   F5..         MOV     ?V1,A
   \   000047   F5..         MOV     ?V2,A
   \   000049   F5..         MOV     ?V3,A
   \   00004B   04           INC     A
   \   00004C   12....       LCALL   ?XSTACK_DISP0_8
   \   00004F   12....       LCALL   ??Subroutine73_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_146:
   \   000052   E0           MOVX    A,@DPTR
   \   000053   F5..         MOV     ?V4,A
   \   000055   E4           CLR     A
   \   000056   F5..         MOV     ?V5,A
   \   000058   F5..         MOV     ?V6,A
   \   00005A   F5..         MOV     ?V7,A
   \   00005C   7408         MOV     A,#0x8
   \   00005E   78..         MOV     R0,#?V4
   \   000060   12....       LCALL   ?L_SHL
   \   000063   78..         MOV     R0,#?V0
   \   000065   79..         MOV     R1,#?V4
   \   000067   12....       LCALL   ?L_ADD
   \   00006A   EA           MOV     A,R2
   \   00006B   12....       LCALL   ?XSTACK_DISP0_8
   \   00006E   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   000071   F5..         MOV     ?V4,A
   \   000073   E4           CLR     A
   \   000074   F5..         MOV     ?V5,A
   \   000076   7410         MOV     A,#0x10
   \   000078   78..         MOV     R0,#?V4
   \   00007A   12....       LCALL   ?L_SHL
   \   00007D   78..         MOV     R0,#?V0
   \   00007F   79..         MOV     R1,#?V4
   \   000081   12....       LCALL   ?L_ADD
   \   000084   EA           MOV     A,R2
   \   000085   12....       LCALL   ?XSTACK_DISP0_8
   \   000088   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   00008B   E0           MOVX    A,@DPTR
   \   00008C   F5..         MOV     ?V4,A
   \   00008E   E4           CLR     A
   \   00008F   F5..         MOV     ?V6,A
   \   000091   7418         MOV     A,#0x18
   \   000093   78..         MOV     R0,#?V4
   \   000095   12....       LCALL   ?L_SHL
   \   000098   78..         MOV     R0,#?V0
   \   00009A   79..         MOV     R1,#?V4
   \   00009C   12....       LCALL   ?L_ADD
   \   00009F   8010         SJMP    ??CrossCallReturnLabel_77
    867          
    868            while (pItem != NULL)
    869            {
    870              pPrev = pItem;
    871              if (pItem->timestamp == timestamp)
    872              {
    873                break;
    874              }
    875              pItem = pItem->next;
   \                     ??MT_AfDataRetrieve_0:
   \   0000A1   7403         MOV     A,#0x3
   \   0000A3   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A6   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   0000A9   7403         MOV     A,#0x3
   \   0000AB   12....       LCALL   ?XSTACK_DISP0_8
   \   0000AE   12....       LCALL   ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_77:
   \   0000B1   7403         MOV     A,#0x3
   \   0000B3   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B6   12....       LCALL   ??Subroutine80_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_194:
   \   0000B9   7003         JNZ     $+5
   \   0000BB   02....       LJMP    ??MT_AfDataRetrieve_1 & 0xFFFF
   \   0000BE   E8           MOV     A,R0
   \   0000BF   FC           MOV     R4,A
   \   0000C0   E9           MOV     A,R1
   \   0000C1   FD           MOV     R5,A
   \   0000C2   7403         MOV     A,#0x3
   \   0000C4   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C7   12....       LCALL   ??Subroutine73_0 & 0xFFFF
    876            }
   \                     ??CrossCallReturnLabel_147:
   \   0000CA   A3           INC     DPTR
   \   0000CB   A3           INC     DPTR
   \   0000CC   A3           INC     DPTR
   \   0000CD   78..         MOV     R0,#?V0
   \   0000CF   12....       LCALL   ?L_EQ_X
   \   0000D2   70CD         JNZ     ??MT_AfDataRetrieve_0
    877          
    878            if (pItem != NULL)
    879            {
    880              uint16 idx;
    881              uint8 *pRsp;
    882          
    883              pBuf += 4;
   \   0000D4   EA           MOV     A,R2
   \   0000D5   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D8   E0           MOVX    A,@DPTR
   \   0000D9   2404         ADD     A,#0x4
   \   0000DB   F8           MOV     R0,A
   \   0000DC   A3           INC     DPTR
   \   0000DD   E0           MOVX    A,@DPTR
   \   0000DE   3400         ADDC    A,#0x0
   \   0000E0   F9           MOV     R1,A
   \   0000E1   EA           MOV     A,R2
   \   0000E2   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E5   12....       LCALL   ?Subroutine41 & 0xFFFF
    884              idx = BUILD_UINT16(pBuf[0], pBuf[1]);
   \                     ??CrossCallReturnLabel_78:
   \   0000E8   EA           MOV     A,R2
   \   0000E9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000EC   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   0000EF   FA           MOV     R2,A
   \   0000F0   7401         MOV     A,#0x1
   \   0000F2   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F5   12....       LCALL   ??Subroutine79_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_182:
   \   0000F8   12....       LCALL   ??Subroutine69_0 & 0xFFFF
    885              len = pBuf[2];
   \                     ??CrossCallReturnLabel_133:
   \   0000FB   7401         MOV     A,#0x1
   \   0000FD   12....       LCALL   ?XSTACK_DISP0_8
   \   000100   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   000103   85..82       MOV     DPL,?XSP + 0
   \   000106   85..83       MOV     DPH,?XSP + 1
   \   000109   F0           MOVX    @DPTR,A
    886          
    887              if (len == 0)  // Indication to delete the afIncomingMSGPacket.
   \   00010A   706C         JNZ     ??MT_AfDataRetrieve_2
    888              {
    889                if (pMtAfInMsgList == pItem)
   \   00010C   12....       LCALL   ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_180:
   \   00010F   7403         MOV     A,#0x3
   \   000111   12....       LCALL   ?XSTACK_DISP0_8
   \   000114   E0           MOVX    A,@DPTR
   \   000115   68           XRL     A,R0
   \   000116   7003         JNZ     ??MT_AfDataRetrieve_3
   \   000118   A3           INC     DPTR
   \   000119   E0           MOVX    A,@DPTR
   \   00011A   69           XRL     A,R1
   \                     ??MT_AfDataRetrieve_3:
   \   00011B   700D         JNZ     ??MT_AfDataRetrieve_4
    890                {
    891                  pMtAfInMsgList = pItem->next;
   \   00011D   7403         MOV     A,#0x3
   \   00011F   12....       LCALL   ?XSTACK_DISP0_8
   \   000122   12....       LCALL   ?Subroutine7 & 0xFFFF
    892                }
   \                     ??CrossCallReturnLabel_9:
   \   000125   90....       MOV     DPTR,#pMtAfInMsgList
   \   000128   800C         SJMP    ??MT_AfDataRetrieve_5
    893                else
    894                {
    895                  pPrev->next = pItem->next;
   \                     ??MT_AfDataRetrieve_4:
   \   00012A   7403         MOV     A,#0x3
   \   00012C   12....       LCALL   ?XSTACK_DISP0_8
   \   00012F   12....       LCALL   ?Subroutine7 & 0xFFFF
    896                }
   \                     ??CrossCallReturnLabel_10:
   \   000132   8C82         MOV     DPL,R4
   \   000134   8D83         MOV     DPH,R5
   \                     ??MT_AfDataRetrieve_5:
   \   000136   12....       LCALL   ?Subroutine41 & 0xFFFF
    897                (void)osal_mem_free(pItem);
   \                     ??CrossCallReturnLabel_79:
   \   000139                ; Setup parameters for call to function osal_mem_free
   \   000139   7403         MOV     A,#0x3
   \   00013B   12....       LCALL   ?XSTACK_DISP0_8
   \   00013E   12....       LCALL   ??Subroutine77_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_174:
   \   000141   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    898                rtrn = afStatus_SUCCESS;
   \   000144   7A00         MOV     R2,#0x0
    899              }
    900              else if ((pRsp = osal_mem_alloc(len + MT_AF_RTV_HDR_SZ)) == NULL)
    901              {
    902                rtrn = afStatus_MEM_FAIL;
    903                len = 0;
    904              }
    905              else
    906              {
    907                pRsp[0] = ZSuccess;
    908                pRsp[1] = len;
    909                (void)osal_memcpy(pRsp + MT_AF_RTV_HDR_SZ, pItem->data+idx, len);
    910                MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_AF),
    911                                                     MT_AF_DATA_RETRIEVE, len + MT_AF_RTV_HDR_SZ, pRsp);
    912                (void)osal_mem_free(pRsp);
    913                return;
    914              }
    915            }
    916          
    917            pBuf[0] = rtrn;
   \                     ??MT_AfDataRetrieve_1:
   \   000146   7401         MOV     A,#0x1
   \   000148   12....       LCALL   ?XSTACK_DISP0_8
   \   00014B   12....       LCALL   ?Subroutine27 & 0xFFFF
    918            pBuf[1] = len;
   \                     ??CrossCallReturnLabel_44:
   \   00014E   85..82       MOV     DPL,?XSP + 0
   \   000151   85..83       MOV     DPH,?XSP + 1
   \   000154   E0           MOVX    A,@DPTR
   \   000155   C0E0         PUSH    A
   \   000157   7401         MOV     A,#0x1
   \   000159   12....       LCALL   ?XSTACK_DISP0_8
   \   00015C   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_149:
   \   00015F   D0E0         POP     A
   \   000161   F0           MOVX    @DPTR,A
    919            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_AF),
    920                                                 MT_AF_DATA_RETRIEVE, MT_AF_RTV_HDR_SZ, pBuf);
   \   000162                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000162   7401         MOV     A,#0x1
   \   000164   12....       LCALL   ?XSTACK_DISP0_8
   \   000167   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_54:
   \   00016A   7B02         MOV     R3,#0x2
   \   00016C   7A12         MOV     R2,#0x12
   \   00016E   7964         MOV     R1,#0x64
   \   000170   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    921          }
   \                     ??MT_AfDataRetrieve_6:
   \   000173   7405         MOV     A,#0x5
   \   000175   02....       LJMP    ?Subroutine1 & 0xFFFF
   \                     ??MT_AfDataRetrieve_2:
   \   000178                ; Setup parameters for call to function osal_mem_alloc
   \   000178   2402         ADD     A,#0x2
   \   00017A   FA           MOV     R2,A
   \   00017B   E4           CLR     A
   \   00017C   3400         ADDC    A,#0x0
   \   00017E   FB           MOV     R3,A
   \   00017F   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000182   8A..         MOV     ?V0,R2
   \   000184   8B..         MOV     ?V1,R3
   \   000186   EA           MOV     A,R2
   \   000187   45..         ORL     A,?V1
   \   000189   700C         JNZ     ??MT_AfDataRetrieve_7
   \   00018B   7A10         MOV     R2,#0x10
   \   00018D   85..82       MOV     DPL,?XSP + 0
   \   000190   85..83       MOV     DPH,?XSP + 1
   \   000193   E4           CLR     A
   \   000194   F0           MOVX    @DPTR,A
   \   000195   80AF         SJMP    ??MT_AfDataRetrieve_1
   \                     ??MT_AfDataRetrieve_7:
   \   000197   8A82         MOV     DPL,R2
   \   000199   8B83         MOV     DPH,R3
   \   00019B   E4           CLR     A
   \   00019C   12....       LCALL   ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_70:
   \   00019F   8A82         MOV     DPL,R2
   \   0001A1   8B83         MOV     DPH,R3
   \   0001A3   A3           INC     DPTR
   \   0001A4   F0           MOVX    @DPTR,A
   \   0001A5                ; Setup parameters for call to function osal_memcpy
   \   0001A5   7403         MOV     A,#0x3
   \   0001A7   12....       LCALL   ?XSTACK_DISP0_8
   \   0001AA   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   0001AD   2E           ADD     A,R6
   \   0001AE   F5..         MOV     ?V4,A
   \   0001B0   A3           INC     DPTR
   \   0001B1   E0           MOVX    A,@DPTR
   \   0001B2   3F           ADDC    A,R7
   \   0001B3   F5..         MOV     ?V5,A
   \   0001B5   78..         MOV     R0,#?V4
   \   0001B7   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0001BA   7403         MOV     A,#0x3
   \   0001BC   12....       LCALL   ?XSTACK_DISP0_8
   \   0001BF   E0           MOVX    A,@DPTR
   \   0001C0   FC           MOV     R4,A
   \   0001C1   7D00         MOV     R5,#0x0
   \   0001C3   EA           MOV     A,R2
   \   0001C4   2402         ADD     A,#0x2
   \   0001C6   FA           MOV     R2,A
   \   0001C7   E4           CLR     A
   \   0001C8   35..         ADDC    A,?V1
   \   0001CA   FB           MOV     R3,A
   \   0001CB   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0001CE   7403         MOV     A,#0x3
   \   0001D0   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001D3                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   0001D3   AC..         MOV     R4,?V0
   \   0001D5   AD..         MOV     R5,?V1
   \   0001D7   85..82       MOV     DPL,?XSP + 0
   \   0001DA   85..83       MOV     DPH,?XSP + 1
   \   0001DD   E0           MOVX    A,@DPTR
   \   0001DE   2402         ADD     A,#0x2
   \   0001E0   FB           MOV     R3,A
   \   0001E1   7A12         MOV     R2,#0x12
   \   0001E3   7964         MOV     R1,#0x64
   \   0001E5   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   \   0001E8                ; Setup parameters for call to function osal_mem_free
   \   0001E8   AA..         MOV     R2,?V0
   \   0001EA   AB..         MOV     R3,?V1
   \   0001EC   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0001EF   8082         SJMP    ??MT_AfDataRetrieve_6

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   12....       LCALL   ?Subroutine50 & 0xFFFF
   \                     ??CrossCallReturnLabel_184:
   \   000003   12....       LCALL   ?Subroutine53 & 0xFFFF
   \                     ??CrossCallReturnLabel_200:
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   12....       LCALL   ?Subroutine50 & 0xFFFF
   \                     ??CrossCallReturnLabel_185:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET
    922          
    923          /**************************************************************************************************
    924           * @fn          MT_AfDataStore
    925           *
    926           * @brief   Process AF Data Store command to incrementally store the data buffer for very large
    927           *          outgoing AF message.
    928           *
    929           * input parameters
    930           *
    931           * @param pBuf - pointer to the received buffer
    932           *
    933           * output parameters
    934           *
    935           * @param rtrn - AF-Status of the operation.
    936           *
    937           * @return      None.
    938           **************************************************************************************************
    939           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    940          void MT_AfDataStore(uint8 *pBuf)
   \                     MT_AfDataStore:
    941          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    942            uint16 idx;
    943            uint8 len, rtrn = afStatus_FAILED;
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   7401         MOV     A,#0x1
   \   000012   F0           MOVX    @DPTR,A
    944          
    945            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   000013   EA           MOV     A,R2
   \   000014   2403         ADD     A,#0x3
   \   000016   FA           MOV     R2,A
   \   000017   5001         JNC     ??MT_AfDataStore_0
   \   000019   0B           INC     R3
    946            idx = BUILD_UINT16(pBuf[0], pBuf[1]);
   \                     ??MT_AfDataStore_0:
   \   00001A   8A82         MOV     DPL,R2
   \   00001C   8B83         MOV     DPH,R3
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   12....       LCALL   ?Subroutine52 & 0xFFFF
   \                     ??CrossCallReturnLabel_138:
   \   000022   EC           MOV     A,R4
   \   000023   28           ADD     A,R0
   \   000024   FE           MOV     R6,A
   \   000025   E4           CLR     A
   \   000026   39           ADDC    A,R1
   \   000027   FF           MOV     R7,A
    947            len = pBuf[2];
   \   000028   8A82         MOV     DPL,R2
   \   00002A   8B83         MOV     DPH,R3
   \   00002C   A3           INC     DPTR
   \   00002D   A3           INC     DPTR
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   FC           MOV     R4,A
    948            pBuf += 3;
   \   000030   EA           MOV     A,R2
   \   000031   2403         ADD     A,#0x3
   \   000033   FA           MOV     R2,A
   \   000034   5001         JNC     ??MT_AfDataStore_1
   \   000036   0B           INC     R3
    949          
    950            if (pMtAfDataReq == NULL)
   \                     ??MT_AfDataStore_1:
   \   000037   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_199:
   \   00003A   700B         JNZ     ??MT_AfDataStore_2
    951            {
    952              rtrn = afStatus_MEM_FAIL;
   \   00003C   85..82       MOV     DPL,?XSP + 0
   \   00003F   85..83       MOV     DPH,?XSP + 1
   \   000042   7410         MOV     A,#0x10
   \   000044   02....       LJMP    ??MT_AfDataStore_3 & 0xFFFF
    953            }
    954            else if (len == 0)  // Indication to send the message.
   \                     ??MT_AfDataStore_2:
   \   000047   EC           MOV     A,R4
   \   000048   7068         JNZ     ??MT_AfDataStore_4
    955            {
    956              rtrn = AF_DataRequest(&(pMtAfDataReq->dstAddr), pMtAfDataReq->epDesc, pMtAfDataReq->cId,
    957                                      pMtAfDataReq->dataLen,  pMtAfDataReq->data,
    958                                    &(pMtAfDataReq->transId), pMtAfDataReq->txOpts, pMtAfDataReq->radius);
   \   00004A                ; Setup parameters for call to function AF_DataRequest
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   C8           XCH     A,R0
   \   00004C   2416         ADD     A,#0x16
   \   00004E   12....       LCALL   ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_114:
   \   000051   F5..         MOV     ?V0,A
   \   000053   78..         MOV     R0,#?V0
   \   000055   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000058   90....       MOV     DPTR,#pMtAfDataReq
   \   00005B   E0           MOVX    A,@DPTR
   \   00005C   2414         ADD     A,#0x14
   \   00005E   F5..         MOV     ?V0,A
   \   000060   A3           INC     DPTR
   \   000061   E0           MOVX    A,@DPTR
   \   000062   3400         ADDC    A,#0x0
   \   000064   F5..         MOV     ?V1,A
   \   000066   78..         MOV     R0,#?V0
   \   000068   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00006B   90....       MOV     DPTR,#pMtAfDataReq
   \   00006E   12....       LCALL   ?Subroutine50 & 0xFFFF
   \                     ??CrossCallReturnLabel_183:
   \   000071   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000074   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_36:
   \   000077   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00007A   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   00007D   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000080   90....       MOV     DPTR,#pMtAfDataReq
   \   000083   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   000086   F9           MOV     R1,A
   \   000087   90....       MOV     DPTR,#pMtAfDataReq
   \   00008A   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   00008D   FC           MOV     R4,A
   \   00008E   A3           INC     DPTR
   \   00008F   E0           MOVX    A,@DPTR
   \   000090   FD           MOV     R5,A
   \   000091   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_50:
   \   000094   12....       LCALL   `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
   \   000097   7409         MOV     A,#0x9
   \   000099   12....       LCALL   ?DEALLOC_XSTACK8
   \   00009C   E9           MOV     A,R1
   \   00009D   85..82       MOV     DPL,?XSP + 0
   \   0000A0   85..83       MOV     DPH,?XSP + 1
   \   0000A3   F0           MOVX    @DPTR,A
    959              (void)osal_mem_free(pMtAfDataReq);
   \   0000A4                ; Setup parameters for call to function osal_mem_free
   \   0000A4   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_176:
   \   0000A7   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    960              pMtAfDataReq = NULL;
   \   0000AA   90....       MOV     DPTR,#pMtAfDataReq
   \   0000AD   E4           CLR     A
   \   0000AE   F0           MOVX    @DPTR,A
   \   0000AF   A3           INC     DPTR
   \   0000B0   8029         SJMP    ??MT_AfDataStore_3
    961            }
    962            else
    963            {
    964              (void)osal_memcpy(pMtAfDataReq->data+idx, pBuf, len);
   \                     ??MT_AfDataStore_4:
   \   0000B2                ; Setup parameters for call to function osal_memcpy
   \   0000B2   8A..         MOV     ?V0,R2
   \   0000B4   8B..         MOV     ?V1,R3
   \   0000B6   75..00       MOV     ?V2,#0x0
   \   0000B9   78..         MOV     R0,#?V0
   \   0000BB   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000BE   7D00         MOV     R5,#0x0
   \   0000C0   90....       MOV     DPTR,#pMtAfDataReq
   \   0000C3   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   0000C6   2E           ADD     A,R6
   \   0000C7   FA           MOV     R2,A
   \   0000C8   A3           INC     DPTR
   \   0000C9   E0           MOVX    A,@DPTR
   \   0000CA   3F           ADDC    A,R7
   \   0000CB   FB           MOV     R3,A
   \   0000CC   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000CF   7403         MOV     A,#0x3
   \   0000D1   12....       LCALL   ?DEALLOC_XSTACK8
    965              rtrn = afStatus_SUCCESS;
   \   0000D4   85..82       MOV     DPL,?XSP + 0
   \   0000D7   85..83       MOV     DPH,?XSP + 1
   \   0000DA   E4           CLR     A
    966            }
   \                     ??MT_AfDataStore_3:
   \   0000DB   12....       LCALL   ?Subroutine44 & 0xFFFF
    967          
    968            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_AF),
    969                                                                          MT_AF_DATA_STORE, 1, &rtrn);
   \                     ??CrossCallReturnLabel_83:
   \   0000DE   7B01         MOV     R3,#0x1
   \   0000E0   7A11         MOV     R2,#0x11
   \   0000E2   7964         MOV     R1,#0x64
   \   0000E4   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    970          }
   \   0000E7   7401         MOV     A,#0x1
   \   0000E9   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000EC   7F03         MOV     R7,#0x3
   \   0000EE   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_AfExec::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_AfExec

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_AfCommandProcessing::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_AfCommandProcessing

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_AfRegister::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_AfRegister

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_AfDelete::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_AfDelete

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_AfDataRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_AfDataRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_AfDataRequestSrcRtg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_AfDataRequestSrcRtg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_AfDataConfirm::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_AfDataConfirm

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_AfReflectError::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_AfReflectError

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_AfIncomingMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_AfIncomingMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_AfDataRetrieve::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_AfDataRetrieve

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_AfDataStore::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_AfDataStore

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0, 0}>`:
   \   000000   00           DB 0
   \   000001   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_3e8:
   \   000000   E8030000     DD 1000
    971          
    972          /**************************************************************************************************
    973           * @fn          MT_AfAPSF_ConfigSet
    974           *
    975           * @brief       This function is the MT proxy for afAPSF_ConfigSet().
    976           *
    977           * input parameters
    978           *
    979           * @param       pBuf - Pointer to the received buffer.
    980           *
    981           * output parameters
    982           *
    983           * None.
    984           *
    985           * @return      None.
    986           */
    987          static void MT_AfAPSF_ConfigSet(uint8 *pBuf)
    988          {
    989            afAPSF_Config_t cfg = { pBuf[MT_RPC_POS_DAT0+1], pBuf[MT_RPC_POS_DAT0+2] };
    990            afStatus_t rtrn = afAPSF_ConfigSet(pBuf[MT_RPC_POS_DAT0], &cfg);
    991          
    992            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_AF),
    993                                                 MT_AF_APSF_CONFIG_SET, 1, (uint8 *)&rtrn);
    994          }
    995          
    996          /**************************************************************************************************
    997           * @fn          MT_AfAPSF_ConfigGet
    998           *
    999           * @brief       This function is the MT proxy for afAPSF_ConfigGet().
   1000           *
   1001           * input parameters
   1002           *
   1003           * @param       pBuf - Pointer to the received buffer.
   1004           *
   1005           * output parameters
   1006           *
   1007           * None.
   1008           *
   1009           * @return      None.
   1010           */
   1011          static void MT_AfAPSF_ConfigGet(uint8 *pBuf)
   1012          {
   1013            afAPSF_Config_t cfg = { 0, 0 };
   1014            uint8 buf[2];
   1015          
   1016            afAPSF_ConfigGet( pBuf[MT_RPC_POS_DAT0], &cfg );
   1017          
   1018            buf[0] = cfg.frameDelay;
   1019            buf[1] = cfg.windowSize;
   1020          
   1021            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_AF),
   1022                                                 MT_AF_APSF_CONFIG_GET, 3, buf );
   1023          }
   1024          
   1025          /***************************************************************************************************
   1026          ***************************************************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      1     14   MT_AfCommandProcessing
        0     14   -> MT_AfDataRequest
        0     14   -> MT_AfDataRequestSrcRtg
        0     14   -> MT_AfDataRetrieve
        0     14   -> MT_AfDataStore
        0     14   -> MT_AfDelete
        0     14   -> MT_AfRegister
        0     14   -> MT_BuildAndSendZToolResponse
        0     14   -> afAPSF_ConfigGet
        0     14   -> afAPSF_ConfigSet
      3      3   MT_AfDataConfirm
        2      3   -> MT_BuildAndSendZToolResponse
      1     56   MT_AfDataRequest
        0     42   -> AF_DataRequest
        0     33   -> MT_BuildAndSendZToolResponse
        0     33   -> afFindEndPointDesc
        0     33   -> osal_mem_alloc
        0     36   -> osal_memcpy
        0     33   -> osal_set_event
        0     37   -> osal_start_timerEx
      1     60   MT_AfDataRequestSrcRtg
        0     46   -> AF_DataRequestSrcRtg
        0     34   -> MT_BuildAndSendZToolResponse
        0     34   -> afFindEndPointDesc
        0     34   -> osal_mem_alloc
        0     34   -> osal_mem_free
        0     34   -> osal_memset
      1     38   MT_AfDataRetrieve
        0     21   -> MT_BuildAndSendZToolResponse
        0     21   -> osal_mem_alloc
        0     21   -> osal_mem_free
        0     24   -> osal_memcpy
      1     35   MT_AfDataStore
        0     21   -> AF_DataRequest
        0     12   -> MT_BuildAndSendZToolResponse
        0     12   -> osal_mem_free
        0     15   -> osal_memcpy
      1     24   MT_AfDelete
        0     10   -> MT_BuildAndSendZToolResponse
        0     10   -> afDelete
      0     13   MT_AfExec
        0      9   -> osal_mem_free
        0      9   -> osal_set_event
        0     13   -> osal_start_timerEx
      1     27   MT_AfIncomingMsg
        0     23   -> MT_BuildAndSendZToolResponse
        0     23   -> osal_mem_alloc
        0     23   -> osal_mem_free
        0     26   -> osal_memcpy
        0     23   -> osal_set_event
        0     27   -> osal_start_timerEx
      3      6   MT_AfReflectError
        2      6   -> MT_BuildAndSendZToolResponse
      1     29   MT_AfRegister
        0     15   -> MT_BuildAndSendZToolResponse
        0     15   -> MT_BuildEndpointDesc
        0     15   -> afRegister
        0     15   -> osal_mem_alloc
        0     15   -> osal_mem_free


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       2  ?<Constant {0, 0}>
       5  ??Subroutine66_0
       6  ??Subroutine67_0
       8  ??Subroutine68_0
      10  ??Subroutine69_0
       7  ??Subroutine70_0
       8  ??Subroutine71_0
       8  ??Subroutine72_0
       5  ??Subroutine73_0
       4  ??Subroutine74_0
       6  ??Subroutine75_0
       4  ??Subroutine76_0
       6  ??Subroutine77_0
       4  ??Subroutine78_0
       7  ??Subroutine79_0
       6  ??Subroutine80_0
       6  ??Subroutine81_0
       3  ?Subroutine0
       8  ?Subroutine1
       3  ?Subroutine10
       5  ?Subroutine11
       2  ?Subroutine12
       5  ?Subroutine13
      15  ?Subroutine14
       9  ?Subroutine15
       9  ?Subroutine16
      12  ?Subroutine17
       8  ?Subroutine18
      12  ?Subroutine19
      10  ?Subroutine2
      12  ?Subroutine20
      12  ?Subroutine21
      12  ?Subroutine22
       1  ?Subroutine23
       6  ?Subroutine24
       6  ?Subroutine25
       2  ?Subroutine26
       6  ?Subroutine27
       4  ?Subroutine28
       3  ?Subroutine29
       3  ?Subroutine3
       6  ?Subroutine30
      13  ?Subroutine31
       6  ?Subroutine32
       6  ?Subroutine33
       8  ?Subroutine34
       5  ?Subroutine35
       8  ?Subroutine36
      10  ?Subroutine37
       9  ?Subroutine38
       2  ?Subroutine39
      19  ?Subroutine4
       9  ?Subroutine40
       6  ?Subroutine41
       6  ?Subroutine42
       1  ?Subroutine43
       6  ?Subroutine44
       5  ?Subroutine45
       6  ?Subroutine46
       3  ?Subroutine47
       8  ?Subroutine48
      11  ?Subroutine49
      20  ?Subroutine5
       2  ?Subroutine50
       6  ?Subroutine51
       1  ?Subroutine52
       6  ?Subroutine53
      12  ?Subroutine54
       5  ?Subroutine55
      10  ?Subroutine56
      17  ?Subroutine57
       5  ?Subroutine58
       6  ?Subroutine59
       5  ?Subroutine6
       9  ?Subroutine60
       8  ?Subroutine61
       9  ?Subroutine62
       9  ?Subroutine63
       7  ?Subroutine64
       9  ?Subroutine65
       7  ?Subroutine7
      23  ?Subroutine8
       4  ?Subroutine9
     236  MT_AfCommandProcessing
       6  MT_AfCommandProcessing::?relay
      47  MT_AfDataConfirm
       6  MT_AfDataConfirm::?relay
     717  MT_AfDataRequest
       6  MT_AfDataRequest::?relay
     422  MT_AfDataRequestSrcRtg
       6  MT_AfDataRequestSrcRtg::?relay
     497  MT_AfDataRetrieve
       6  MT_AfDataRetrieve::?relay
     241  MT_AfDataStore
       6  MT_AfDataStore::?relay
      50  MT_AfDelete
       6  MT_AfDelete::?relay
     166  MT_AfExec
       6  MT_AfExec::?relay
     964  MT_AfIncomingMsg
       6  MT_AfIncomingMsg::?relay
      97  MT_AfReflectError
       6  MT_AfReflectError::?relay
     124  MT_AfRegister
       6  MT_AfRegister::?relay
       4  __Constant_3e8
       2  pMtAfDataReq
       2  pMtAfInMsgList

 
 4 162 bytes in segment BANKED_CODE
    66 bytes in segment BANK_RELAYS
     6 bytes in segment XDATA_ROM_C
     4 bytes in segment XDATA_Z
 
 4 228 bytes of CODE  memory
     2 bytes of CONST memory (+ 4 bytes shared)
     4 bytes of XDATA memory

Errors: none
Warnings: none
