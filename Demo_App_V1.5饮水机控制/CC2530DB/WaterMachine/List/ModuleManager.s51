///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V9.30.1.3056 for 8051               24/Oct/2016  15:09:36
// Copyright 2004-2015 IAR Systems AB.
// Standalone license - IAR Embedded Workbench for 8051
//
//    Core               =  plain
//    Code model         =  banked
//    Data model         =  large
//    Calling convention =  xdata reentrant
//    Constant location  =  data_rom
//    Dptr setup         =  1,16
//                          
//    Source file        =  
//        E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V1.5饮水机控制\Frame\ModuleManager.c
//    Command line       =  
//        -f "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V1.5饮水机控制\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"
//        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
//        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f
//        "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V1.5饮水机控制\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
//        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
//        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
//        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
//        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
//        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
//        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
//        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
//        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
//        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
//        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
//        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
//        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
//        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
//        -DPOLL_RATE=50 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
//        -DREJOIN_POLL_RATE=440 "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack
//        Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V1.5饮水机控制\Frame\ModuleManager.c"
//        -D LOG_OUT -D UART1_PROTOCOL_RESOLVER=1 -D xISQC -D NWK_AUTO_POLL -D
//        ZTOOL_P1 -D ISR_KEYINTERRUPT -D xMT_TASK -D xMT_SYS_FUNC -D
//        xMT_ZDO_FUNC -D xLCD_SUPPORTED=DEBUG -D xPOWER_SAVING -lC
//        "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V1.5饮水机控制\CC2530DB\WaterMachine\List"
//        -lA "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V1.5饮水机控制\CC2530DB\WaterMachine\List"
//        --diag_suppress Pe001,Pa010 -o
//        "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V1.5饮水机控制\CC2530DB\WaterMachine\Obj"
//        -e --no_code_motion --debug --core=plain --dptr=16,1
//        --data_model=large --code_model=banked
//        --calling_convention=xdata_reentrant --place_constants=data_rom
//        --nr_virtual_regs 8 -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack
//        Mesh 1.0.0\Projects\zstack\Samples\Demo_App_V1.5饮水机控制\CC2530DB\"
//        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V1.5饮水机控制\CC2530DB\..\Source\"
//        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V1.5饮水机控制\CC2530DB\..\Frame\"
//        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V1.5饮水机控制\CC2530DB\..\Module\WaterMachine\"
//        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V1.5饮水机控制\CC2530DB\..\..\..\ZMain\TI2530DB\"
//        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V1.5饮水机控制\CC2530DB\..\..\..\..\..\Components\hal\include\"
//        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V1.5饮水机控制\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
//        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V1.5饮水机控制\CC2530DB\..\..\..\..\..\Components\mac\include\"
//        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V1.5饮水机控制\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
//        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V1.5饮水机控制\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
//        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V1.5饮水机控制\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
//        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V1.5饮水机控制\CC2530DB\..\..\..\..\..\Components\mt\"
//        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V1.5饮水机控制\CC2530DB\..\..\..\..\..\Components\osal\include\"
//        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V1.5饮水机控制\CC2530DB\..\..\..\..\..\Components\services\saddr\"
//        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V1.5饮水机控制\CC2530DB\..\..\..\..\..\Components\services\sdata\"
//        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V1.5饮水机控制\CC2530DB\..\..\..\..\..\Components\stack\af\"
//        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V1.5饮水机控制\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
//        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V1.5饮水机控制\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
//        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V1.5饮水机控制\CC2530DB\..\..\..\..\..\Components\stack\sec\"
//        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V1.5饮水机控制\CC2530DB\..\..\..\..\..\Components\stack\sys\"
//        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V1.5饮水机控制\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
//        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V1.5饮水机控制\CC2530DB\..\..\..\..\..\Components\zmac\"
//        -I "E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V1.5饮水机控制\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
//        -Ohz
//    List file          =  
//        E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh
//        1.0.0\Projects\zstack\Samples\Demo_App_V1.5饮水机控制\CC2530DB\WaterMachine\List\ModuleManager.s51
//
///////////////////////////////////////////////////////////////////////////////

        NAME ModuleManager

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__iar_require _formatted_write", ""
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?V0
        EXTERN ?V2
        EXTERN ?V3
        EXTERN ?V1
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN __INIT_XDATA_I

        PUBLIC `??HeartBeat_Check::?relay`
        FUNCTION `??HeartBeat_Check::?relay`,0203H
        PUBLIC `??HeartBeat_Set::?relay`
        FUNCTION `??HeartBeat_Set::?relay`,0203H
        PUBLIC `??getModuleByModuleAddr::?relay`
        FUNCTION `??getModuleByModuleAddr::?relay`,0203H
        PUBLIC `??getModuleByModuleID::?relay`
        FUNCTION `??getModuleByModuleID::?relay`,0203H
        PUBLIC `??getModuleByName::?relay`
        FUNCTION `??getModuleByName::?relay`,0203H
        PUBLIC HeartBeat_Check
        FUNCTION HeartBeat_Check,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC HeartBeat_Set
        FUNCTION HeartBeat_Set,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC ModuleList
        PUBLIC Module_Count
        PUBLIC getModuleByModuleAddr
        FUNCTION getModuleByModuleAddr,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC getModuleByModuleID
        FUNCTION getModuleByModuleID,0203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC getModuleByName
        FUNCTION getModuleByName,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource SP:8, PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B SameValue
          CFI A SameValue
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT SameValue
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon1
        
printf              SYMBOL "printf"
`??printf::?relay`  SYMBOL "?relay", printf
strcmp              SYMBOL "strcmp"
`??strcmp::?relay`  SYMBOL "?relay", strcmp
HeartBeat_Check     SYMBOL "HeartBeat_Check"
`??HeartBeat_Check::?relay` SYMBOL "?relay", HeartBeat_Check
HeartBeat_Set       SYMBOL "HeartBeat_Set"
`??HeartBeat_Set::?relay` SYMBOL "?relay", HeartBeat_Set
getModuleByModuleAddr SYMBOL "getModuleByModuleAddr"
`??getModuleByModuleAddr::?relay` SYMBOL "?relay", getModuleByModuleAddr
getModuleByModuleID SYMBOL "getModuleByModuleID"
`??getModuleByModuleID::?relay` SYMBOL "?relay", getModuleByModuleID
getModuleByName     SYMBOL "getModuleByName"
`??getModuleByName::?relay` SYMBOL "?relay", getModuleByName

        EXTERN `??printf::?relay`
        FUNCTION `??printf::?relay`,00H
        EXTERN `??strcmp::?relay`
        FUNCTION `??strcmp::?relay`,00H
        EXTERN printf
        FUNCTION printf,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN strcmp
        FUNCTION strcmp,010202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC

// E:\资源(G：)\#个人项目\ZigbeeProject\Z-Stack Mesh 1.0.0\Projects\zstack\Samples\Demo_App_V1.5饮水机控制\Frame\ModuleManager.c
//    1 #include "ModuleManager.h"
//    2 #include <stdio.h>
//    3 #include <string.h>
//    4 #include "hal_defs.h"

        RSEG XDATA_I:XDATA:NOROOT(0)
//    5 ModuleBoard_T ModuleList[] = {
ModuleList:
        DATA8
        DS 26
        REQUIRE `?<Initializer for ModuleList>`
        REQUIRE __INIT_XDATA_I
//    6   {"主控", COORDINATOR_MODULE, OFFLINE ,0 ,0 },
//    7   {"饮水机", WATER_MODULE    , OFFLINE ,0 ,0 },
//    8 };

        RSEG XDATA_I:XDATA:NOROOT(0)
//    9 uint8_t Module_Count = sizeof(ModuleList)/sizeof(ModuleBoard_T);
Module_Count:
        DATA8
        DS 1
        REQUIRE `?<Initializer for Module_Count>`
        REQUIRE __INIT_XDATA_I
//   10 
//   11 /****************************************************
//   12 	函数名:	getModuleByName
//   13 	功能:	从模块列表中获取模块信息根据模块中文名
//   14 	参数:	模块中文名 
//   15         作者:	liyao 2016年10月19日14:38:12
//   16 ****************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   17 ModuleBoard_T* getModuleByName(uint8_t *name){
getModuleByName:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function getModuleByName
        CODE
        FUNCALL getModuleByName, strcmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//   18     uint8_t i;
//   19     for(i = 0; i < Module_Count; i++){ 
        MOV     ?V0,#0x0
        SJMP    ??getModuleByName_0
??getModuleByName_1:
        INC     ?V0
??getModuleByName_0:
        MOV     DPTR,#Module_Count
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,?V0
        CLR     C
        SUBB    A,R0
        JNC     ??getModuleByName_2
//   20       if(strcmp((char const*)name, (char const*)(&ModuleList[i].Name)) == 0){
        ; Setup parameters for call to function strcmp
        MOV     A,?V0
        MOV     B,#0xd
        MUL     AB
        MOV     R0,A
        MOV     R1,B
        MOV     A,#ModuleList & 0xff
        ADD     A,R0
        MOV     R4,A
        MOV     A,#(ModuleList >> 8) & 0xff
        ADDC    A,R1
        MOV     R5,A
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??strcmp::?relay`   ; Banked call to: strcmp
        MOV     ?V3,R3
        MOV     A,R2
        ORL     A,?V3
        JNZ     ??getModuleByName_1
//   21         return &ModuleList[i];
        MOV     A,?V0
        MOV     B,#0xd
        MUL     AB
        MOV     R0,A
        MOV     R1,B
        MOV     A,#ModuleList & 0xff
        ADD     A,R0
        MOV     R2,A
        MOV     A,#(ModuleList >> 8) & 0xff
        ADDC    A,R1
        MOV     R3,A
        SJMP    ??getModuleByName_3
//   22       }
//   23     }
//   24     return NULL;
??getModuleByName_2:
        MOV     R2,#0x0
        MOV     R3,#0x0
??getModuleByName_3:
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
//   25 }
          CFI EndBlock cfiBlock0
//   26 
//   27 /****************************************************
//   28 	函数名:	getModuleByModuleID
//   29 	功能:	从模块列表中获取模块信息根据模块ID
//   30 	参数:	模块ID
//   31         作者:	liyao 2016年10月19日14:38:12
//   32 ****************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   33 ModuleBoard_T* getModuleByModuleID(MODULE ModuleID){
getModuleByModuleID:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function getModuleByModuleID
        CODE
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//   34     uint8_t i;
//   35     for(i = 0; i < Module_Count; i++){ 
        MOV     R0,#0x0
        SJMP    ??getModuleByModuleID_0
??getModuleByModuleID_1:
        INC     R0
??getModuleByModuleID_0:
        MOV     DPTR,#Module_Count
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     A,R0
        CLR     C
        SUBB    A,R2
        JNC     ??getModuleByModuleID_2
//   36       if(ModuleID == ModuleList[i].ModuleID){
        MOV     A,R0
        MOV     B,#0xd
        MUL     AB
        MOV     R2,A
        MOV     R3,B
        MOV     A,#(ModuleList + 8) & 0xff
        ADD     A,R2
        MOV     DPL,A
        MOV     A,#((ModuleList + 8) >> 8) & 0xff
        ADDC    A,R3
        MOV     DPH,A
        MOVX    A,@DPTR
        XRL     A,R1
        JNZ     ??getModuleByModuleID_1
//   37         return &ModuleList[i];
        MOV     A,#ModuleList & 0xff
        ADD     A,R2
        MOV     R2,A
        MOV     A,#(ModuleList >> 8) & 0xff
        ADDC    A,R3
        MOV     R3,A
        SJMP    ??getModuleByModuleID_3
//   38       }
//   39     }
//   40     return NULL;
??getModuleByModuleID_2:
        MOV     R2,#0x0
        MOV     R3,#0x0
??getModuleByModuleID_3:
          CFI EndBlock cfiBlock1
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0
//   41 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        POP     DPH
          CFI CFA_SP SP+-4
          CFI DPH0 SameValue
        POP     DPL
          CFI CFA_SP SP+-3
          CFI DPL0 SameValue
        LJMP    ?BRET
          CFI EndBlock cfiBlock2
//   42 
//   43 /****************************************************
//   44 	函数名:	getModuleByModuleAddr
//   45 	功能:	从模块列表中获取模块信息根据模块短地址
//   46 	参数:	模块短地址
//   47         作者:	liyao 2016年10月19日14:38:12
//   48 ****************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   49 ModuleBoard_T* getModuleByModuleAddr(uint16_t ShortAddr){
getModuleByModuleAddr:
          CFI Block cfiBlock3 Using cfiCommon0
          CFI Function getModuleByModuleAddr
        CODE
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//   50     uint8_t i;
//   51     for(i = 0; i < Module_Count; i++){ 
        MOV     R4,#0x0
        SJMP    ??getModuleByModuleAddr_0
??getModuleByModuleAddr_1:
        INC     R4
??getModuleByModuleAddr_0:
        MOV     DPTR,#Module_Count
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,R4
        CLR     C
        SUBB    A,R0
        JNC     ??getModuleByModuleAddr_2
//   52       if(ShortAddr == ModuleList[i].ShortAddr){
        MOV     A,R4
        MOV     B,#0xd
        MUL     AB
        MOV     R0,A
        MOV     R1,B
        MOV     A,#(ModuleList + 11) & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#((ModuleList + 11) >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        MOVX    A,@DPTR
        XRL     A,R2
        JNZ     ??getModuleByModuleAddr_3
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R3
??getModuleByModuleAddr_3:
        JNZ     ??getModuleByModuleAddr_1
//   53         return &ModuleList[i];
        MOV     A,#ModuleList & 0xff
        ADD     A,R0
        MOV     R2,A
        MOV     A,#(ModuleList >> 8) & 0xff
        ADDC    A,R1
        MOV     R3,A
        SJMP    ??getModuleByModuleAddr_4
//   54       }
//   55     }
//   56     return NULL;
??getModuleByModuleAddr_2:
        MOV     R2,#0x0
        MOV     R3,#0x0
??getModuleByModuleAddr_4:
        SJMP    ?Subroutine0
//   57 }
          CFI EndBlock cfiBlock3
//   58 
//   59 /****************************************************
//   60 	函数名:	ModuleHeartBeat_Check
//   61 	功能:	检查所有模块是否在线
//   62 	参数:	模块短地址
//   63         作者:	liyao 2016年10月19日14:38:12
//   64 ****************************************************/ 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   65 void HeartBeat_Check(void){
HeartBeat_Check:
          CFI Block cfiBlock4 Using cfiCommon0
          CFI Function HeartBeat_Check
        CODE
        FUNCALL HeartBeat_Check, printf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HeartBeat_Check, printf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//   66     uint8_t i;
//   67     for(i = 0; i < Module_Count; i++){ //位图操作最后2位判断历史状态
        MOV     R6,#0x0
        SJMP    ??HeartBeat_Check_0
//   68       if((ModuleList[i].HeartBeat_Flag & 0x03) == 0x02){
//   69         printf("%s离线\r\n",ModuleList[i].Name);
//   70         ModuleList[i].ShortAddr = 0; 
//   71         ModuleList[i].ModuleState = OFFLINE; 
//   72       }else if((ModuleList[i].HeartBeat_Flag & 0x03) == 0x01){
??HeartBeat_Check_1:
        MOVX    A,@DPTR
        ANL     A,#0x3
        XRL     A,#0x1
        JNZ     ??HeartBeat_Check_2
//   73         printf("%s上线\r\n",ModuleList[i].Name); 
        LCALL   ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_0:
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 12)
        MOV     R2,#`?<Constant "%s\\311\\317\\317\\337\\r\\n">` & 0xff
        MOV     R3,#(`?<Constant "%s\\311\\317\\317\\337\\r\\n">` >> 8) & 0xff
        LCALL   `??printf::?relay`   ; Banked call to: printf
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
//   74         ModuleList[i].ModuleState = ONLINE; 
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        CLR     A
??HeartBeat_Check_3:
        MOVX    @DPTR,A
//   75       }
//   76       ModuleList[i].HeartBeat_Flag = (ModuleList[i].HeartBeat_Flag <<1) & 0xFE;
??HeartBeat_Check_2:
        MOV     A,R6
        MOV     B,#0xd
        MUL     AB
        MOV     R0,A
        MOV     R1,B
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_2:
        MOV     A,?V0
        ADD     A,#0xa
        MOV     DPL,A
        CLR     A
        ADDC    A,?V1
        MOV     DPH,A
        MOVX    A,@DPTR
        CLR     C
        RLC     A
        MOVX    @DPTR,A
        INC     R6
??HeartBeat_Check_0:
        MOV     DPTR,#Module_Count
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,R6
        CLR     C
        SUBB    A,R0
        JNC     ??HeartBeat_Check_4
        MOV     A,R6
        MOV     B,#0xd
        MUL     AB
        MOV     R0,A
        MOV     R1,B
        MOV     A,#(ModuleList + 10) & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#((ModuleList + 10) >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        MOVX    A,@DPTR
        ANL     A,#0x3
        XRL     A,#0x2
        JNZ     ??HeartBeat_Check_1
        LCALL   ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_1:
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 12)
        MOV     R2,#`?<Constant "%s\\300\\353\\317\\337\\r\\n">` & 0xff
        MOV     R3,#(`?<Constant "%s\\300\\353\\317\\337\\r\\n">` >> 8) & 0xff
        LCALL   `??printf::?relay`   ; Banked call to: printf
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
        MOV     A,?V0
        ADD     A,#0xb
        MOV     DPL,A
        CLR     A
        ADDC    A,?V1
        MOV     DPH,A
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     A
        SJMP    ??HeartBeat_Check_3
//   77     }
//   78 }
??HeartBeat_Check_4:
          CFI EndBlock cfiBlock4
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
          CFI Block cfiBlock5 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock5

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
          CFI Block cfiCond6 Using cfiCommon0
          CFI Function HeartBeat_Check
          CFI Conditional ??CrossCallReturnLabel_0
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond7 Using cfiCommon0
          CFI (cfiCond7) Function HeartBeat_Check
          CFI (cfiCond7) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond7) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond7) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond7) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond7) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond7) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond7) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond7) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond7) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond7) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond7) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond7) CFA_SP SP+-2
          CFI (cfiCond7) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker8 Using cfiCommon1
          CFI (cfiPicker8) NoFunction
          CFI (cfiPicker8) Picker
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_3:
        ; Setup parameters for call to function printf
        ; Setup parameters for call to function printf
        MOV     R0,#?V0
        RET
          CFI EndBlock cfiCond6
          CFI EndBlock cfiCond7
          CFI EndBlock cfiPicker8

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
          CFI Block cfiCond9 Using cfiCommon0
          CFI Function HeartBeat_Check
          CFI Conditional ??CrossCallReturnLabel_2
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond10 Using cfiCommon0
          CFI (cfiCond10) Function HeartBeat_Check
          CFI (cfiCond10) Conditional ??CrossCallReturnLabel_3, ??CrossCallReturnLabel_0
          CFI (cfiCond10) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond10) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond10) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond10) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond10) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond10) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond10) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond10) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond10) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond10) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond10) CFA_SP SP+-4
          CFI (cfiCond10) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond11 Using cfiCommon0
          CFI (cfiCond11) Function HeartBeat_Check
          CFI (cfiCond11) Conditional ??CrossCallReturnLabel_3, ??CrossCallReturnLabel_1
          CFI (cfiCond11) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond11) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond11) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond11) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond11) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond11) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond11) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond11) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond11) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond11) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond11) CFA_SP SP+-4
          CFI (cfiCond11) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker12 Using cfiCommon1
          CFI (cfiPicker12) NoFunction
          CFI (cfiPicker12) Picker
        MOV     A,#ModuleList & 0xff
        ADD     A,R0
        MOV     ?V0,A
        MOV     A,#(ModuleList >> 8) & 0xff
        ADDC    A,R1
        MOV     ?V1,A
        RET
          CFI EndBlock cfiCond9
          CFI EndBlock cfiCond10
          CFI EndBlock cfiCond11
          CFI EndBlock cfiPicker12
//   79 
//   80 /****************************************************
//   81 	函数名:	HeartBeat_Set
//   82 	功能:	设置心跳存在
//   83 	参数:	模块ID
//   84         作者:	liyao 2016年10月20日12:37:55
//   85 ****************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   86 void HeartBeat_Set(MODULE ModuleID){
HeartBeat_Set:
          CFI Block cfiBlock13 Using cfiCommon0
          CFI Function HeartBeat_Set
        CODE
        FUNCALL HeartBeat_Set, getModuleByModuleID
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//   87     ModuleBoard_T *ModuleBoard = getModuleByModuleID(ModuleID);
        ; Setup parameters for call to function getModuleByModuleID
        LCALL   `??getModuleByModuleID::?relay`; Banked call to: getModuleByModuleID
        MOV     DPL,R2
        MOV     DPH,R3
//   88     ModuleBoard->HeartBeat_Flag = ModuleBoard->HeartBeat_Flag | 0x01; 
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        ORL     A,#0x1
        MOVX    @DPTR,A
//   89 }
        SJMP    ?Subroutine1
          CFI EndBlock cfiBlock13

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for ModuleList>`:
        DB "\326\367\277\330"
        DB 0, 0, 0
        DATA8
        DB 0
        DB 1
        DB 0
        DATA16
        DW 0
        DB "\322\373\313\256\273\372"
        DB 0
        DATA8
        DB 1
        DB 1
        DB 0
        DATA16
        DW 0

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for Module_Count>`:
        DATA8
        DB 2

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??getModuleByName::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    getModuleByName

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??getModuleByModuleID::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    getModuleByModuleID

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??getModuleByModuleAddr::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    getModuleByModuleAddr

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??HeartBeat_Check::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    HeartBeat_Check

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??HeartBeat_Set::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    HeartBeat_Set

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "%s\\300\\353\\317\\337\\r\\n">`:
        DB "%s\300\353\317\337\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "%s\\311\\317\\317\\337\\r\\n">`:
        DB "%s\311\317\317\337\015\012"

        END
//   90 //ModuleBoard_T WaterMachine = {
//   91 //    "饮水机"
//   92 //};
//   93 
//   94 //void Module_Init(void){
//   95 //    uint8_t i;
//   96 //    
//   97 //}
// 
// 424 bytes in segment BANKED_CODE
//  30 bytes in segment BANK_RELAYS
//  27 bytes in segment XDATA_I
//  27 bytes in segment XDATA_ID
//  18 bytes in segment XDATA_ROM_C
// 
// 481 bytes of CODE  memory
//  18 bytes of CONST memory
//  27 bytes of XDATA memory
//
//Errors: none
//Warnings: none
